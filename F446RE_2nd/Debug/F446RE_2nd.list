
F446RE_2nd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  0800aaa8  0800aaa8  0001aaa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b114  0800b114  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b114  0800b114  0001b114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b11c  0800b11c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b11c  0800b11c  0001b11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b120  0800b120  0001b120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004164  200001e0  0800b304  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004344  0800b304  00024344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017890  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037f7  00000000  00000000  00037aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  0003b298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001208  00000000  00000000  0003c608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025abb  00000000  00000000  0003d810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016825  00000000  00000000  000632cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e149a  00000000  00000000  00079af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015af8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061c8  00000000  00000000  0015afdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aa8c 	.word	0x0800aa8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800aa8c 	.word	0x0800aa8c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <delay>:
/****************** define the timer handler below  **************/
#define timer htim1

extern TIM_HandleTypeDef timer;

void delay (uint16_t us) {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&timer, 0);
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <delay+0x30>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2200      	movs	r2, #0
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000efe:	bf00      	nop
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <delay+0x30>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d3f9      	bcc.n	8000f00 <delay+0x14>
}
 8000f0c:	bf00      	nop
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	200004d8 	.word	0x200004d8

08000f20 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	461a      	mov	r2, r3
 8000f32:	2120      	movs	r1, #32
 8000f34:	4820      	ldr	r0, [pc, #128]	; (8000fb8 <send_to_lcd+0x98>)
 8000f36:	f001 ff29 	bl	8002d8c <HAL_GPIO_WritePin>

    /* write the data to the respective pin */
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	08db      	lsrs	r3, r3, #3
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	461a      	mov	r2, r3
 8000f48:	2104      	movs	r1, #4
 8000f4a:	481c      	ldr	r0, [pc, #112]	; (8000fbc <send_to_lcd+0x9c>)
 8000f4c:	f001 ff1e 	bl	8002d8c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	2104      	movs	r1, #4
 8000f60:	4815      	ldr	r0, [pc, #84]	; (8000fb8 <send_to_lcd+0x98>)
 8000f62:	f001 ff13 	bl	8002d8c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	085b      	lsrs	r3, r3, #1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	461a      	mov	r2, r3
 8000f74:	2102      	movs	r1, #2
 8000f76:	4812      	ldr	r0, [pc, #72]	; (8000fc0 <send_to_lcd+0xa0>)
 8000f78:	f001 ff08 	bl	8002d8c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	461a      	mov	r2, r3
 8000f86:	2101      	movs	r1, #1
 8000f88:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <send_to_lcd+0xa0>)
 8000f8a:	f001 feff 	bl	8002d8c <HAL_GPIO_WritePin>

    /* Toggle EN PIN to send the data
     * if the HCLK > 100 MHz, use the  20 us delay
     * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
     */
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2120      	movs	r1, #32
 8000f92:	480b      	ldr	r0, [pc, #44]	; (8000fc0 <send_to_lcd+0xa0>)
 8000f94:	f001 fefa 	bl	8002d8c <HAL_GPIO_WritePin>
    delay (20);
 8000f98:	2014      	movs	r0, #20
 8000f9a:	f7ff ffa7 	bl	8000eec <delay>
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2120      	movs	r1, #32
 8000fa2:	4807      	ldr	r0, [pc, #28]	; (8000fc0 <send_to_lcd+0xa0>)
 8000fa4:	f001 fef2 	bl	8002d8c <HAL_GPIO_WritePin>
    delay (20);
 8000fa8:	2014      	movs	r0, #20
 8000faa:	f7ff ff9f 	bl	8000eec <delay>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40020400 	.word	0x40020400
 8000fbc:	40020c00 	.word	0x40020c00
 8000fc0:	40020800 	.word	0x40020800

08000fc4 <lcd_send_cmd>:

void lcd_send_cmd (char cmd) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	091b      	lsrs	r3, r3, #4
 8000fd2:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ffa1 	bl	8000f20 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f003 030f 	and.w	r3, r3, #15
 8000fe4:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend, 0);
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ff98 	bl	8000f20 <send_to_lcd>
}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <lcd_send_data>:

void lcd_send_data (char data) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send higher nibble */
    datatosend = ((data>>4)&0x0f);
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	091b      	lsrs	r3, r3, #4
 8001006:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	2101      	movs	r1, #1
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff87 	bl	8000f20 <send_to_lcd>

    /* send Lower nibble */
    datatosend = ((data)&0x0f);
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	f003 030f 	and.w	r3, r3, #15
 8001018:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend, 1);
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	2101      	movs	r1, #1
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ff7e 	bl	8000f20 <send_to_lcd>
}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <lcd_clear>:

void lcd_clear (void) {
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 8001030:	2001      	movs	r0, #1
 8001032:	f7ff ffc7 	bl	8000fc4 <lcd_send_cmd>
    HAL_Delay(2);
 8001036:	2002      	movs	r0, #2
 8001038:	f000 fe86 	bl	8001d48 <HAL_Delay>
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <lcd_put_cur>:

void lcd_put_cur(int row, int col) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
    switch (row) {
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <lcd_put_cur+0x18>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d005      	beq.n	8001062 <lcd_put_cur+0x22>
 8001056:	e009      	b.n	800106c <lcd_put_cur+0x2c>
        case 0:
            col |= 0x80;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800105e:	603b      	str	r3, [r7, #0]
            break;
 8001060:	e004      	b.n	800106c <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001068:	603b      	str	r3, [r7, #0]
            break;
 800106a:	bf00      	nop
    }

    lcd_send_cmd (col);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ffa7 	bl	8000fc4 <lcd_send_cmd>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <lcd_init>:

void lcd_init (void) {
 800107e:	b580      	push	{r7, lr}
 8001080:	af00      	add	r7, sp, #0
    // 4 bit initialisation
    HAL_Delay(50);  // wait for >40ms
 8001082:	2032      	movs	r0, #50	; 0x32
 8001084:	f000 fe60 	bl	8001d48 <HAL_Delay>
    lcd_send_cmd (0x30);
 8001088:	2030      	movs	r0, #48	; 0x30
 800108a:	f7ff ff9b 	bl	8000fc4 <lcd_send_cmd>
    HAL_Delay(5);  // wait for >4.1ms
 800108e:	2005      	movs	r0, #5
 8001090:	f000 fe5a 	bl	8001d48 <HAL_Delay>
    lcd_send_cmd (0x30);
 8001094:	2030      	movs	r0, #48	; 0x30
 8001096:	f7ff ff95 	bl	8000fc4 <lcd_send_cmd>
    HAL_Delay(1);  // wait for >100us
 800109a:	2001      	movs	r0, #1
 800109c:	f000 fe54 	bl	8001d48 <HAL_Delay>
    lcd_send_cmd (0x30);
 80010a0:	2030      	movs	r0, #48	; 0x30
 80010a2:	f7ff ff8f 	bl	8000fc4 <lcd_send_cmd>
    HAL_Delay(10);
 80010a6:	200a      	movs	r0, #10
 80010a8:	f000 fe4e 	bl	8001d48 <HAL_Delay>
    lcd_send_cmd (0x20);  // 4bit mode
 80010ac:	2020      	movs	r0, #32
 80010ae:	f7ff ff89 	bl	8000fc4 <lcd_send_cmd>
    HAL_Delay(10);
 80010b2:	200a      	movs	r0, #10
 80010b4:	f000 fe48 	bl	8001d48 <HAL_Delay>

    // display initialisation
    lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80010b8:	2028      	movs	r0, #40	; 0x28
 80010ba:	f7ff ff83 	bl	8000fc4 <lcd_send_cmd>
    HAL_Delay(1);
 80010be:	2001      	movs	r0, #1
 80010c0:	f000 fe42 	bl	8001d48 <HAL_Delay>
    lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80010c4:	2008      	movs	r0, #8
 80010c6:	f7ff ff7d 	bl	8000fc4 <lcd_send_cmd>
    HAL_Delay(1);
 80010ca:	2001      	movs	r0, #1
 80010cc:	f000 fe3c 	bl	8001d48 <HAL_Delay>
    lcd_send_cmd (0x01);  // clear display
 80010d0:	2001      	movs	r0, #1
 80010d2:	f7ff ff77 	bl	8000fc4 <lcd_send_cmd>
    HAL_Delay(1);
 80010d6:	2001      	movs	r0, #1
 80010d8:	f000 fe36 	bl	8001d48 <HAL_Delay>
    HAL_Delay(1);
 80010dc:	2001      	movs	r0, #1
 80010de:	f000 fe33 	bl	8001d48 <HAL_Delay>
    lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80010e2:	2006      	movs	r0, #6
 80010e4:	f7ff ff6e 	bl	8000fc4 <lcd_send_cmd>
    HAL_Delay(1);
 80010e8:	2001      	movs	r0, #1
 80010ea:	f000 fe2d 	bl	8001d48 <HAL_Delay>
    lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80010ee:	200c      	movs	r0, #12
 80010f0:	f7ff ff68 	bl	8000fc4 <lcd_send_cmd>
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <lcd_send_string>:

void lcd_send_string (char *str) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data (*str++);
 8001100:	e006      	b.n	8001110 <lcd_send_string+0x18>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	1c5a      	adds	r2, r3, #1
 8001106:	607a      	str	r2, [r7, #4]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff74 	bl	8000ff8 <lcd_send_data>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1f4      	bne.n	8001102 <lcd_send_string+0xa>
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <lcd_display_scrolling_text>:

void lcd_scroll_left(void) {
    lcd_send_cmd(0x18); // Command to shift display left
}

void lcd_display_scrolling_text(char *str, uint16_t delay_ms) {
 8001122:	b580      	push	{r7, lr}
 8001124:	b08a      	sub	sp, #40	; 0x28
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	460b      	mov	r3, r1
 800112c:	807b      	strh	r3, [r7, #2]
    char buffer[17]; // Buffer for a single line (16 characters + null terminator)
    int len = strlen(str);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff f86e 	bl	8000210 <strlen>
 8001134:	4603      	mov	r3, r0
 8001136:	623b      	str	r3, [r7, #32]

    if (len <= 16) {
 8001138:	6a3b      	ldr	r3, [r7, #32]
 800113a:	2b10      	cmp	r3, #16
 800113c:	dc07      	bgt.n	800114e <lcd_display_scrolling_text+0x2c>
        // If the string is shorter than or equal to the display width, just display it
        lcd_put_cur(1, 0);
 800113e:	2100      	movs	r1, #0
 8001140:	2001      	movs	r0, #1
 8001142:	f7ff ff7d 	bl	8001040 <lcd_put_cur>
        lcd_send_string(str);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffd6 	bl	80010f8 <lcd_send_string>
 800114c:	e039      	b.n	80011c2 <lcd_display_scrolling_text+0xa0>
        return;
    }

    // Display the first 16 characters
    strncpy(buffer, str, 16);
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	2210      	movs	r2, #16
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4618      	mov	r0, r3
 8001158:	f007 fc1d 	bl	8008996 <strncpy>
    buffer[16] = '\0'; // Null-terminate the buffer
 800115c:	2300      	movs	r3, #0
 800115e:	773b      	strb	r3, [r7, #28]
    lcd_put_cur(1, 0);
 8001160:	2100      	movs	r1, #0
 8001162:	2001      	movs	r0, #1
 8001164:	f7ff ff6c 	bl	8001040 <lcd_put_cur>
    lcd_send_string(buffer); // Display initial part
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ffc3 	bl	80010f8 <lcd_send_string>

    HAL_Delay(delay_ms); // Initial delay
 8001172:	887b      	ldrh	r3, [r7, #2]
 8001174:	4618      	mov	r0, r3
 8001176:	f000 fde7 	bl	8001d48 <HAL_Delay>

    // Scroll through the string
    for (int i = 0; i < len - 16; i++) {
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
 800117e:	e01b      	b.n	80011b8 <lcd_display_scrolling_text+0x96>
        // Shift the string by one character
        strncpy(buffer, str + i + 1, 16);
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	3301      	adds	r3, #1
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	18d1      	adds	r1, r2, r3
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2210      	movs	r2, #16
 800118e:	4618      	mov	r0, r3
 8001190:	f007 fc01 	bl	8008996 <strncpy>
        buffer[16] = '\0'; // Null-terminate the buffer
 8001194:	2300      	movs	r3, #0
 8001196:	773b      	strb	r3, [r7, #28]
        lcd_put_cur(1, 0);
 8001198:	2100      	movs	r1, #0
 800119a:	2001      	movs	r0, #1
 800119c:	f7ff ff50 	bl	8001040 <lcd_put_cur>
        lcd_send_string(buffer); // Update display
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ffa7 	bl	80010f8 <lcd_send_string>
        HAL_Delay(delay_ms);
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 fdcb 	bl	8001d48 <HAL_Delay>
    for (int i = 0; i < len - 16; i++) {
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	3301      	adds	r3, #1
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
 80011b8:	6a3b      	ldr	r3, [r7, #32]
 80011ba:	3b10      	subs	r3, #16
 80011bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011be:	429a      	cmp	r2, r3
 80011c0:	dbde      	blt.n	8001180 <lcd_display_scrolling_text+0x5e>
    }
}
 80011c2:	3728      	adds	r7, #40	; 0x28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80011d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	4a06      	ldr	r2, [pc, #24]	; (80011f8 <vApplicationGetIdleTaskMemory+0x30>)
 80011de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2280      	movs	r2, #128	; 0x80
 80011e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80011e6:	bf00      	nop
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	200001fc 	.word	0x200001fc
 80011f8:	200002b0 	.word	0x200002b0

080011fc <HAL_CAN_RxFifo1MsgPendingCallback>:

int row = 0;
int col = 0;

// Callback for CAN receive
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
    // Get the received message
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK) {
 8001204:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>)
 8001206:	4a37      	ldr	r2, [pc, #220]	; (80012e4 <HAL_CAN_RxFifo1MsgPendingCallback+0xe8>)
 8001208:	2101      	movs	r1, #1
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 ffe0 	bl	80021d0 <HAL_CAN_GetRxMessage>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_CAN_RxFifo1MsgPendingCallback+0x1e>
        Error_Handler();  // Handle reception error
 8001216:	f000 fb0a 	bl	800182e <Error_Handler>
    }

    if (totalBytesReceived == 0) {
 800121a:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d115      	bne.n	800124e <HAL_CAN_RxFifo1MsgPendingCallback+0x52>
        // The first byte of the first frame tells us the total message length
        expectedMessageSize = RxData[0];
 8001222:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	4b30      	ldr	r3, [pc, #192]	; (80012ec <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 800122a:	601a      	str	r2, [r3, #0]
        // Copy the remaining 7 bytes to the buffer
        memcpy(&fullRxBuffer[totalBytesReceived], &RxData[1], 7);
 800122c:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8001234:	4413      	add	r3, r2
 8001236:	2207      	movs	r2, #7
 8001238:	492e      	ldr	r1, [pc, #184]	; (80012f4 <HAL_CAN_RxFifo1MsgPendingCallback+0xf8>)
 800123a:	4618      	mov	r0, r3
 800123c:	f006 fda5 	bl	8007d8a <memcpy>
        totalBytesReceived += 7;
 8001240:	4b29      	ldr	r3, [pc, #164]	; (80012e8 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	3307      	adds	r3, #7
 8001246:	b2da      	uxtb	r2, r3
 8001248:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 800124a:	701a      	strb	r2, [r3, #0]
 800124c:	e014      	b.n	8001278 <HAL_CAN_RxFifo1MsgPendingCallback+0x7c>
    } else {
        // Copy the full data as usual
        size_t datalength = RxHeader.DLC;
 800124e:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <HAL_CAN_RxFifo1MsgPendingCallback+0xe8>)
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy(&fullRxBuffer[totalBytesReceived], RxData, datalength);
 8001254:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 800125c:	4413      	add	r3, r2
 800125e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001260:	491f      	ldr	r1, [pc, #124]	; (80012e0 <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>)
 8001262:	4618      	mov	r0, r3
 8001264:	f006 fd91 	bl	8007d8a <memcpy>
        totalBytesReceived += datalength;
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4413      	add	r3, r2
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 8001276:	701a      	strb	r2, [r3, #0]
    }

    // Check if the full message has been received
    if (totalBytesReceived >= expectedMessageSize) {
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	429a      	cmp	r2, r3
 8001284:	d328      	bcc.n	80012d8 <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>
        // Decode the received message from the complete buffer
        pb_istream_t stream = pb_istream_from_buffer(fullRxBuffer, totalBytesReceived);
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	4917      	ldr	r1, [pc, #92]	; (80012f0 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8001292:	4618      	mov	r0, r3
 8001294:	f004 ff52 	bl	800613c <pb_istream_from_buffer>
        bool status = pb_decode(&stream, ServoUltrasonicData_fields, &received_message);
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4a16      	ldr	r2, [pc, #88]	; (80012f8 <HAL_CAN_RxFifo1MsgPendingCallback+0xfc>)
 800129e:	4917      	ldr	r1, [pc, #92]	; (80012fc <HAL_CAN_RxFifo1MsgPendingCallback+0x100>)
 80012a0:	4618      	mov	r0, r3
 80012a2:	f006 f885 	bl	80073b0 <pb_decode>
 80012a6:	4603      	mov	r3, r0
 80012a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

        if (!status) {
 80012ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80012b0:	f083 0301 	eor.w	r3, r3, #1
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d008      	beq.n	80012cc <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>
            const char* nanopb_error = PB_GET_ERROR(&stream);
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	e000      	b.n	80012c6 <HAL_CAN_RxFifo1MsgPendingCallback+0xca>
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <HAL_CAN_RxFifo1MsgPendingCallback+0x104>)
 80012c6:	61fb      	str	r3, [r7, #28]
            Error_Handler();  // Handle decoding error
 80012c8:	f000 fab1 	bl	800182e <Error_Handler>
        }

        // Reset for the next message
        totalBytesReceived = 0;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
        expectedMessageSize = 0;
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
    }
}
 80012d8:	bf00      	nop
 80012da:	3728      	adds	r7, #40	; 0x28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000548 	.word	0x20000548
 80012e4:	2000052c 	.word	0x2000052c
 80012e8:	20000588 	.word	0x20000588
 80012ec:	2000058c 	.word	0x2000058c
 80012f0:	20000550 	.word	0x20000550
 80012f4:	20000549 	.word	0x20000549
 80012f8:	20000570 	.word	0x20000570
 80012fc:	0800ad0c 	.word	0x0800ad0c
 8001300:	0800aab8 	.word	0x0800aab8

08001304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001304:	b5b0      	push	{r4, r5, r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800130a:	f000 fcdb 	bl	8001cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130e:	f000 f845 	bl	800139c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001312:	f000 f959 	bl	80015c8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001316:	f000 f8b3 	bl	8001480 <MX_CAN1_Init>
  MX_TIM1_Init();
 800131a:	f000 f905 	bl	8001528 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800131e:	4817      	ldr	r0, [pc, #92]	; (800137c <main+0x78>)
 8001320:	f002 fb6e 	bl	8003a00 <HAL_TIM_Base_Start>

  lcd_init();
 8001324:	f7ff feab 	bl	800107e <lcd_init>

  HAL_CAN_Start(&hcan1);
 8001328:	4815      	ldr	r0, [pc, #84]	; (8001380 <main+0x7c>)
 800132a:	f000 ff0d 	bl	8002148 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 800132e:	2110      	movs	r1, #16
 8001330:	4813      	ldr	r0, [pc, #76]	; (8001380 <main+0x7c>)
 8001332:	f001 f85f 	bl	80023f4 <HAL_CAN_ActivateNotification>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of commandProcess */
  osThreadDef(commandProcess, CommandProcessorTask, osPriorityNormal, 0, 128);
 8001336:	4b13      	ldr	r3, [pc, #76]	; (8001384 <main+0x80>)
 8001338:	1d3c      	adds	r4, r7, #4
 800133a:	461d      	mov	r5, r3
 800133c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800133e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001340:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001344:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  commandProcessHandle = osThreadCreate(osThread(commandProcess), NULL);
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f003 f810 	bl	8004372 <osThreadCreate>
 8001352:	4603      	mov	r3, r0
 8001354:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <main+0x84>)
 8001356:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  RetValCAN = xTaskCreate(CANCommunicationTask, "CANCommTask", 256, NULL, osPriorityNormal, &TaskCANHandle);
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <main+0x88>)
 800135a:	9301      	str	r3, [sp, #4]
 800135c:	2300      	movs	r3, #0
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2300      	movs	r3, #0
 8001362:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001366:	490a      	ldr	r1, [pc, #40]	; (8001390 <main+0x8c>)
 8001368:	480a      	ldr	r0, [pc, #40]	; (8001394 <main+0x90>)
 800136a:	f003 f95f 	bl	800462c <xTaskCreate>
 800136e:	4603      	mov	r3, r0
 8001370:	4a09      	ldr	r2, [pc, #36]	; (8001398 <main+0x94>)
 8001372:	6013      	str	r3, [r2, #0]
  assert_param(RetValCAN != NULL);

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001374:	f002 fff6 	bl	8004364 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001378:	e7fe      	b.n	8001378 <main+0x74>
 800137a:	bf00      	nop
 800137c:	200004d8 	.word	0x200004d8
 8001380:	200004b0 	.word	0x200004b0
 8001384:	0800aacc 	.word	0x0800aacc
 8001388:	20000520 	.word	0x20000520
 800138c:	20000528 	.word	0x20000528
 8001390:	0800aac0 	.word	0x0800aac0
 8001394:	080016f5 	.word	0x080016f5
 8001398:	20000524 	.word	0x20000524

0800139c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b094      	sub	sp, #80	; 0x50
 80013a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	2234      	movs	r2, #52	; 0x34
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f006 fcfb 	bl	8007da6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c0:	2300      	movs	r3, #0
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <SystemClock_Config+0xdc>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	4a2b      	ldr	r2, [pc, #172]	; (8001478 <SystemClock_Config+0xdc>)
 80013ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ce:	6413      	str	r3, [r2, #64]	; 0x40
 80013d0:	4b29      	ldr	r3, [pc, #164]	; (8001478 <SystemClock_Config+0xdc>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013dc:	2300      	movs	r3, #0
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	4b26      	ldr	r3, [pc, #152]	; (800147c <SystemClock_Config+0xe0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a25      	ldr	r2, [pc, #148]	; (800147c <SystemClock_Config+0xe0>)
 80013e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	4b23      	ldr	r3, [pc, #140]	; (800147c <SystemClock_Config+0xe0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013f8:	2301      	movs	r3, #1
 80013fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001400:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001402:	2302      	movs	r3, #2
 8001404:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001406:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800140a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 800140c:	230f      	movs	r3, #15
 800140e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001410:	23d8      	movs	r3, #216	; 0xd8
 8001412:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001414:	2302      	movs	r3, #2
 8001416:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001418:	2302      	movs	r3, #2
 800141a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800141c:	2302      	movs	r3, #2
 800141e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	4618      	mov	r0, r3
 8001426:	f001 fffd 	bl	8003424 <HAL_RCC_OscConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001430:	f000 f9fd 	bl	800182e <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001434:	f001 fcc4 	bl	8002dc0 <HAL_PWREx_EnableOverDrive>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800143e:	f000 f9f6 	bl	800182e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001442:	230f      	movs	r3, #15
 8001444:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001446:	2302      	movs	r3, #2
 8001448:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800144e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001452:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001458:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800145a:	f107 0308 	add.w	r3, r7, #8
 800145e:	2105      	movs	r1, #5
 8001460:	4618      	mov	r0, r3
 8001462:	f001 fcfd 	bl	8002e60 <HAL_RCC_ClockConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800146c:	f000 f9df 	bl	800182e <Error_Handler>
  }
}
 8001470:	bf00      	nop
 8001472:	3750      	adds	r7, #80	; 0x50
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40023800 	.word	0x40023800
 800147c:	40007000 	.word	0x40007000

08001480 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001486:	4b26      	ldr	r3, [pc, #152]	; (8001520 <MX_CAN1_Init+0xa0>)
 8001488:	4a26      	ldr	r2, [pc, #152]	; (8001524 <MX_CAN1_Init+0xa4>)
 800148a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 800148c:	4b24      	ldr	r3, [pc, #144]	; (8001520 <MX_CAN1_Init+0xa0>)
 800148e:	2212      	movs	r2, #18
 8001490:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001492:	4b23      	ldr	r3, [pc, #140]	; (8001520 <MX_CAN1_Init+0xa0>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001498:	4b21      	ldr	r3, [pc, #132]	; (8001520 <MX_CAN1_Init+0xa0>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <MX_CAN1_Init+0xa0>)
 80014a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014a4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80014a6:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <MX_CAN1_Init+0xa0>)
 80014a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014ac:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80014ae:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <MX_CAN1_Init+0xa0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_CAN1_Init+0xa0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80014ba:	4b19      	ldr	r3, [pc, #100]	; (8001520 <MX_CAN1_Init+0xa0>)
 80014bc:	2200      	movs	r2, #0
 80014be:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80014c0:	4b17      	ldr	r3, [pc, #92]	; (8001520 <MX_CAN1_Init+0xa0>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <MX_CAN1_Init+0xa0>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <MX_CAN1_Init+0xa0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80014d2:	4813      	ldr	r0, [pc, #76]	; (8001520 <MX_CAN1_Init+0xa0>)
 80014d4:	f000 fc5c 	bl	8001d90 <HAL_CAN_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80014de:	f000 f9a6 	bl	800182e <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80014e2:	2301      	movs	r3, #1
 80014e4:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // Choose a filter bank
 80014e6:	230a      	movs	r3, #10
 80014e8:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80014ea:	2301      	movs	r3, #1
 80014ec:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x144 << 5; // Example ID, adjust as needed
 80014ee:	f44f 5322 	mov.w	r3, #10368	; 0x2880
 80014f2:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x144 << 5;
 80014f8:	f44f 5322 	mov.w	r3, #10368	; 0x2880
 80014fc:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001502:	2300      	movs	r3, #0
 8001504:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001506:	2301      	movs	r3, #1
 8001508:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800150e:	463b      	mov	r3, r7
 8001510:	4619      	mov	r1, r3
 8001512:	4803      	ldr	r0, [pc, #12]	; (8001520 <MX_CAN1_Init+0xa0>)
 8001514:	f000 fd38 	bl	8001f88 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	3728      	adds	r7, #40	; 0x28
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200004b0 	.word	0x200004b0
 8001524:	40006400 	.word	0x40006400

08001528 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152e:	f107 0308 	add.w	r3, r7, #8
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153c:	463b      	mov	r3, r7
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001544:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <MX_TIM1_Init+0x98>)
 8001546:	4a1f      	ldr	r2, [pc, #124]	; (80015c4 <MX_TIM1_Init+0x9c>)
 8001548:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 800154a:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <MX_TIM1_Init+0x98>)
 800154c:	22b3      	movs	r2, #179	; 0xb3
 800154e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <MX_TIM1_Init+0x98>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001556:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <MX_TIM1_Init+0x98>)
 8001558:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800155c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155e:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <MX_TIM1_Init+0x98>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001564:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <MX_TIM1_Init+0x98>)
 8001566:	2200      	movs	r2, #0
 8001568:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <MX_TIM1_Init+0x98>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001570:	4813      	ldr	r0, [pc, #76]	; (80015c0 <MX_TIM1_Init+0x98>)
 8001572:	f002 f9f5 	bl	8003960 <HAL_TIM_Base_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800157c:	f000 f957 	bl	800182e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001584:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001586:	f107 0308 	add.w	r3, r7, #8
 800158a:	4619      	mov	r1, r3
 800158c:	480c      	ldr	r0, [pc, #48]	; (80015c0 <MX_TIM1_Init+0x98>)
 800158e:	f002 fc17 	bl	8003dc0 <HAL_TIM_ConfigClockSource>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001598:	f000 f949 	bl	800182e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015a4:	463b      	mov	r3, r7
 80015a6:	4619      	mov	r1, r3
 80015a8:	4805      	ldr	r0, [pc, #20]	; (80015c0 <MX_TIM1_Init+0x98>)
 80015aa:	f002 fe33 	bl	8004214 <HAL_TIMEx_MasterConfigSynchronization>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80015b4:	f000 f93b 	bl	800182e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	200004d8 	.word	0x200004d8
 80015c4:	40010000 	.word	0x40010000

080015c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b40      	ldr	r3, [pc, #256]	; (80016e4 <MX_GPIO_Init+0x11c>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a3f      	ldr	r2, [pc, #252]	; (80016e4 <MX_GPIO_Init+0x11c>)
 80015e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b3d      	ldr	r3, [pc, #244]	; (80016e4 <MX_GPIO_Init+0x11c>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b39      	ldr	r3, [pc, #228]	; (80016e4 <MX_GPIO_Init+0x11c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a38      	ldr	r2, [pc, #224]	; (80016e4 <MX_GPIO_Init+0x11c>)
 8001604:	f043 0304 	orr.w	r3, r3, #4
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b36      	ldr	r3, [pc, #216]	; (80016e4 <MX_GPIO_Init+0x11c>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	4b32      	ldr	r3, [pc, #200]	; (80016e4 <MX_GPIO_Init+0x11c>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a31      	ldr	r2, [pc, #196]	; (80016e4 <MX_GPIO_Init+0x11c>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <MX_GPIO_Init+0x11c>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <MX_GPIO_Init+0x11c>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a2a      	ldr	r2, [pc, #168]	; (80016e4 <MX_GPIO_Init+0x11c>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <MX_GPIO_Init+0x11c>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <MX_GPIO_Init+0x11c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a23      	ldr	r2, [pc, #140]	; (80016e4 <MX_GPIO_Init+0x11c>)
 8001658:	f043 0308 	orr.w	r3, r3, #8
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <MX_GPIO_Init+0x11c>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	2133      	movs	r1, #51	; 0x33
 800166e:	481e      	ldr	r0, [pc, #120]	; (80016e8 <MX_GPIO_Init+0x120>)
 8001670:	f001 fb8c 	bl	8002d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	2124      	movs	r1, #36	; 0x24
 8001678:	481c      	ldr	r0, [pc, #112]	; (80016ec <MX_GPIO_Init+0x124>)
 800167a:	f001 fb87 	bl	8002d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	2104      	movs	r1, #4
 8001682:	481b      	ldr	r0, [pc, #108]	; (80016f0 <MX_GPIO_Init+0x128>)
 8001684:	f001 fb82 	bl	8002d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001688:	2333      	movs	r3, #51	; 0x33
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4812      	ldr	r0, [pc, #72]	; (80016e8 <MX_GPIO_Init+0x120>)
 80016a0:	f001 f9e0 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 80016a4:	2324      	movs	r3, #36	; 0x24
 80016a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4619      	mov	r1, r3
 80016ba:	480c      	ldr	r0, [pc, #48]	; (80016ec <MX_GPIO_Init+0x124>)
 80016bc:	f001 f9d2 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016c0:	2304      	movs	r3, #4
 80016c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c4:	2301      	movs	r3, #1
 80016c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	4806      	ldr	r0, [pc, #24]	; (80016f0 <MX_GPIO_Init+0x128>)
 80016d8:	f001 f9c4 	bl	8002a64 <HAL_GPIO_Init>

}
 80016dc:	bf00      	nop
 80016de:	3728      	adds	r7, #40	; 0x28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020800 	.word	0x40020800
 80016ec:	40020400 	.word	0x40020400
 80016f0:	40020c00 	.word	0x40020c00

080016f4 <CANCommunicationTask>:

/* USER CODE BEGIN 4 */

void CANCommunicationTask(void *argument) {
 80016f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016f8:	b098      	sub	sp, #96	; 0x60
 80016fa:	af06      	add	r7, sp, #24
 80016fc:	6078      	str	r0, [r7, #4]

	char messageString[50];
	uint32_t ulNotificationValue;
	int i = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	647b      	str	r3, [r7, #68]	; 0x44

    for (;;) {
        if (xTaskNotifyWait(0, 0xFFFFFFFF, &ulNotificationValue, 0) == pdTRUE) {
 8001702:	f107 020c 	add.w	r2, r7, #12
 8001706:	2300      	movs	r3, #0
 8001708:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800170c:	2000      	movs	r0, #0
 800170e:	f003 fc17 	bl	8004f40 <xTaskNotifyWait>
 8001712:	4603      	mov	r3, r0
 8001714:	2b01      	cmp	r3, #1
 8001716:	d137      	bne.n	8001788 <CANCommunicationTask+0x94>
            // If notification received from UltrasonicSensorTask, turn on laser
            if (ulNotificationValue & (1 << 0)) {
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0ef      	beq.n	8001702 <CANCommunicationTask+0xe>
                snprintf(messageString, sizeof(messageString),
                         "Pos1: %.2f deg, Pos2: %.2f deg, Dis: %.2f cm",
                         received_message.position_1,
 8001722:	4b26      	ldr	r3, [pc, #152]	; (80017bc <CANCommunicationTask+0xc8>)
 8001724:	681b      	ldr	r3, [r3, #0]
                snprintf(messageString, sizeof(messageString),
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe ff2e 	bl	8000588 <__aeabi_f2d>
 800172c:	4604      	mov	r4, r0
 800172e:	460d      	mov	r5, r1
                         received_message.position_2,
 8001730:	4b22      	ldr	r3, [pc, #136]	; (80017bc <CANCommunicationTask+0xc8>)
 8001732:	685b      	ldr	r3, [r3, #4]
                snprintf(messageString, sizeof(messageString),
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe ff27 	bl	8000588 <__aeabi_f2d>
 800173a:	4680      	mov	r8, r0
 800173c:	4689      	mov	r9, r1
						 received_message.distance);
 800173e:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <CANCommunicationTask+0xc8>)
 8001740:	689b      	ldr	r3, [r3, #8]
                snprintf(messageString, sizeof(messageString),
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe ff20 	bl	8000588 <__aeabi_f2d>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	f107 0010 	add.w	r0, r7, #16
 8001750:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001754:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001758:	e9cd 4500 	strd	r4, r5, [sp]
 800175c:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <CANCommunicationTask+0xcc>)
 800175e:	2132      	movs	r1, #50	; 0x32
 8001760:	f007 f8a2 	bl	80088a8 <sniprintf>

                lcd_put_cur(0, 0);
 8001764:	2100      	movs	r1, #0
 8001766:	2000      	movs	r0, #0
 8001768:	f7ff fc6a 	bl	8001040 <lcd_put_cur>
                lcd_send_string("CAN DATA: ");
 800176c:	4815      	ldr	r0, [pc, #84]	; (80017c4 <CANCommunicationTask+0xd0>)
 800176e:	f7ff fcc3 	bl	80010f8 <lcd_send_string>

                // Display scrolling text on the second line
                lcd_put_cur(1, 0);
 8001772:	2100      	movs	r1, #0
 8001774:	2001      	movs	r0, #1
 8001776:	f7ff fc63 	bl	8001040 <lcd_put_cur>
                lcd_display_scrolling_text(messageString, 110); // Adjust delay as needed
 800177a:	f107 0310 	add.w	r3, r7, #16
 800177e:	216e      	movs	r1, #110	; 0x6e
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fcce 	bl	8001122 <lcd_display_scrolling_text>
 8001786:	e7bc      	b.n	8001702 <CANCommunicationTask+0xe>
            }
        } else {
        	snprintf(messageString, sizeof(messageString), "STAND BY: %d", i);
 8001788:	f107 0010 	add.w	r0, r7, #16
 800178c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800178e:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <CANCommunicationTask+0xd4>)
 8001790:	2132      	movs	r1, #50	; 0x32
 8001792:	f007 f889 	bl	80088a8 <sniprintf>
            lcd_put_cur(0, 0);
 8001796:	2100      	movs	r1, #0
 8001798:	2000      	movs	r0, #0
 800179a:	f7ff fc51 	bl	8001040 <lcd_put_cur>
            lcd_send_string(messageString);
 800179e:	f107 0310 	add.w	r3, r7, #16
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fca8 	bl	80010f8 <lcd_send_string>

            vTaskDelay(pdMS_TO_TICKS(1000));
 80017a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017ac:	f003 f88c 	bl	80048c8 <vTaskDelay>

            lcd_clear();
 80017b0:	f7ff fc3c 	bl	800102c <lcd_clear>
            i++;
 80017b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017b6:	3301      	adds	r3, #1
 80017b8:	647b      	str	r3, [r7, #68]	; 0x44
        if (xTaskNotifyWait(0, 0xFFFFFFFF, &ulNotificationValue, 0) == pdTRUE) {
 80017ba:	e7a2      	b.n	8001702 <CANCommunicationTask+0xe>
 80017bc:	20000570 	.word	0x20000570
 80017c0:	0800aae8 	.word	0x0800aae8
 80017c4:	0800ab18 	.word	0x0800ab18
 80017c8:	0800ab24 	.word	0x0800ab24

080017cc <CommandProcessorTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_CommandProcessorTask */
void CommandProcessorTask(void const * argument)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (memcmp(&previous_message, &received_message, sizeof(ServoUltrasonicData)) != 0) {
 80017d4:	220c      	movs	r2, #12
 80017d6:	490b      	ldr	r1, [pc, #44]	; (8001804 <CommandProcessorTask+0x38>)
 80017d8:	480b      	ldr	r0, [pc, #44]	; (8001808 <CommandProcessorTask+0x3c>)
 80017da:	f006 fac6 	bl	8007d6a <memcmp>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00b      	beq.n	80017fc <CommandProcessorTask+0x30>
		  // Update the previous message with the current received message
		  previous_message = received_message;
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <CommandProcessorTask+0x3c>)
 80017e6:	4a07      	ldr	r2, [pc, #28]	; (8001804 <CommandProcessorTask+0x38>)
 80017e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80017ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		  // Notify CANCommunicationTask about the change
		  xTaskNotify(TaskCANHandle, (1 << 0), eSetBits);
 80017ee:	4b07      	ldr	r3, [pc, #28]	; (800180c <CommandProcessorTask+0x40>)
 80017f0:	6818      	ldr	r0, [r3, #0]
 80017f2:	2300      	movs	r3, #0
 80017f4:	2201      	movs	r2, #1
 80017f6:	2101      	movs	r1, #1
 80017f8:	f003 fc02 	bl	8005000 <xTaskGenericNotify>
	  }

	  vTaskDelay(pdMS_TO_TICKS(100));
 80017fc:	2064      	movs	r0, #100	; 0x64
 80017fe:	f003 f863 	bl	80048c8 <vTaskDelay>
	  if (memcmp(&previous_message, &received_message, sizeof(ServoUltrasonicData)) != 0) {
 8001802:	e7e7      	b.n	80017d4 <CommandProcessorTask+0x8>
 8001804:	20000570 	.word	0x20000570
 8001808:	2000057c 	.word	0x2000057c
 800180c:	20000528 	.word	0x20000528

08001810 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001820:	d101      	bne.n	8001826 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001822:	f000 fa71 	bl	8001d08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001832:	b672      	cpsid	i
}
 8001834:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001836:	e7fe      	b.n	8001836 <Error_Handler+0x8>

08001838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_MspInit+0x54>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	4a11      	ldr	r2, [pc, #68]	; (800188c <HAL_MspInit+0x54>)
 8001848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800184c:	6453      	str	r3, [r2, #68]	; 0x44
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <HAL_MspInit+0x54>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	603b      	str	r3, [r7, #0]
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <HAL_MspInit+0x54>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <HAL_MspInit+0x54>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001868:	6413      	str	r3, [r2, #64]	; 0x40
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_MspInit+0x54>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	210f      	movs	r1, #15
 800187a:	f06f 0001 	mvn.w	r0, #1
 800187e:	f001 f8c7 	bl	8002a10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800

08001890 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a1d      	ldr	r2, [pc, #116]	; (8001924 <HAL_CAN_MspInit+0x94>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d134      	bne.n	800191c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <HAL_CAN_MspInit+0x98>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a1b      	ldr	r2, [pc, #108]	; (8001928 <HAL_CAN_MspInit+0x98>)
 80018bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <HAL_CAN_MspInit+0x98>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_CAN_MspInit+0x98>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a14      	ldr	r2, [pc, #80]	; (8001928 <HAL_CAN_MspInit+0x98>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_CAN_MspInit+0x98>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f8:	2303      	movs	r3, #3
 80018fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80018fc:	2309      	movs	r3, #9
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4619      	mov	r1, r3
 8001906:	4809      	ldr	r0, [pc, #36]	; (800192c <HAL_CAN_MspInit+0x9c>)
 8001908:	f001 f8ac 	bl	8002a64 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800190c:	2200      	movs	r2, #0
 800190e:	2105      	movs	r1, #5
 8001910:	2015      	movs	r0, #21
 8001912:	f001 f87d 	bl	8002a10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001916:	2015      	movs	r0, #21
 8001918:	f001 f896 	bl	8002a48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800191c:	bf00      	nop
 800191e:	3728      	adds	r7, #40	; 0x28
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40006400 	.word	0x40006400
 8001928:	40023800 	.word	0x40023800
 800192c:	40020000 	.word	0x40020000

08001930 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0b      	ldr	r2, [pc, #44]	; (800196c <HAL_TIM_Base_MspInit+0x3c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d10d      	bne.n	800195e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_TIM_Base_MspInit+0x40>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	4a09      	ldr	r2, [pc, #36]	; (8001970 <HAL_TIM_Base_MspInit+0x40>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6453      	str	r3, [r2, #68]	; 0x44
 8001952:	4b07      	ldr	r3, [pc, #28]	; (8001970 <HAL_TIM_Base_MspInit+0x40>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800195e:	bf00      	nop
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40010000 	.word	0x40010000
 8001970:	40023800 	.word	0x40023800

08001974 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08e      	sub	sp, #56	; 0x38
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <HAL_InitTick+0xe8>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	4a33      	ldr	r2, [pc, #204]	; (8001a5c <HAL_InitTick+0xe8>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6413      	str	r3, [r2, #64]	; 0x40
 8001994:	4b31      	ldr	r3, [pc, #196]	; (8001a5c <HAL_InitTick+0xe8>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019a0:	f107 0210 	add.w	r2, r7, #16
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4611      	mov	r1, r2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f001 fb5e 	bl	800306c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d103      	bne.n	80019c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019ba:	f001 fb43 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 80019be:	6378      	str	r0, [r7, #52]	; 0x34
 80019c0:	e004      	b.n	80019cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019c2:	f001 fb3f 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 80019c6:	4603      	mov	r3, r0
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ce:	4a24      	ldr	r2, [pc, #144]	; (8001a60 <HAL_InitTick+0xec>)
 80019d0:	fba2 2303 	umull	r2, r3, r2, r3
 80019d4:	0c9b      	lsrs	r3, r3, #18
 80019d6:	3b01      	subs	r3, #1
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80019da:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <HAL_InitTick+0xf0>)
 80019dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <HAL_InitTick+0xf0>)
 80019e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019e8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80019ea:	4a1e      	ldr	r2, [pc, #120]	; (8001a64 <HAL_InitTick+0xf0>)
 80019ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ee:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80019f0:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <HAL_InitTick+0xf0>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f6:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <HAL_InitTick+0xf0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fc:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <HAL_InitTick+0xf0>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001a02:	4818      	ldr	r0, [pc, #96]	; (8001a64 <HAL_InitTick+0xf0>)
 8001a04:	f001 ffac 	bl	8003960 <HAL_TIM_Base_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001a0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d11b      	bne.n	8001a4e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001a16:	4813      	ldr	r0, [pc, #76]	; (8001a64 <HAL_InitTick+0xf0>)
 8001a18:	f002 f85a 	bl	8003ad0 <HAL_TIM_Base_Start_IT>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001a22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d111      	bne.n	8001a4e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a2a:	201c      	movs	r0, #28
 8001a2c:	f001 f80c 	bl	8002a48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b0f      	cmp	r3, #15
 8001a34:	d808      	bhi.n	8001a48 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001a36:	2200      	movs	r2, #0
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	201c      	movs	r0, #28
 8001a3c:	f000 ffe8 	bl	8002a10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a40:	4a09      	ldr	r2, [pc, #36]	; (8001a68 <HAL_InitTick+0xf4>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e002      	b.n	8001a4e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3738      	adds	r7, #56	; 0x38
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	431bde83 	.word	0x431bde83
 8001a64:	20000590 	.word	0x20000590
 8001a68:	20000004 	.word	0x20000004

08001a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <NMI_Handler+0x4>

08001a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <HardFault_Handler+0x4>

08001a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <MemManage_Handler+0x4>

08001a7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <BusFault_Handler+0x4>

08001a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <UsageFault_Handler+0x4>

08001a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <CAN1_RX1_IRQHandler+0x10>)
 8001a9e:	f000 fccf 	bl	8002440 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200004b0 	.word	0x200004b0

08001aac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <TIM2_IRQHandler+0x10>)
 8001ab2:	f002 f87d 	bl	8003bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000590 	.word	0x20000590

08001ac0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return 1;
 8001ac4:	2301      	movs	r3, #1
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_kill>:

int _kill(int pid, int sig)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ada:	f006 f823 	bl	8007b24 <__errno>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2216      	movs	r2, #22
 8001ae2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_exit>:

void _exit (int status)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ffe7 	bl	8001ad0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b02:	e7fe      	b.n	8001b02 <_exit+0x12>

08001b04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	e00a      	b.n	8001b2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b16:	f3af 8000 	nop.w
 8001b1a:	4601      	mov	r1, r0
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	60ba      	str	r2, [r7, #8]
 8001b22:	b2ca      	uxtb	r2, r1
 8001b24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	dbf0      	blt.n	8001b16 <_read+0x12>
  }

  return len;
 8001b34:	687b      	ldr	r3, [r7, #4]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	e009      	b.n	8001b64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	60ba      	str	r2, [r7, #8]
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3301      	adds	r3, #1
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	dbf1      	blt.n	8001b50 <_write+0x12>
  }
  return len;
 8001b6c:	687b      	ldr	r3, [r7, #4]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <_close>:

int _close(int file)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b9e:	605a      	str	r2, [r3, #4]
  return 0;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <_isatty>:

int _isatty(int file)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be8:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <_sbrk+0x5c>)
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <_sbrk+0x60>)
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf4:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <_sbrk+0x64>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <_sbrk+0x68>)
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d207      	bcs.n	8001c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c10:	f005 ff88 	bl	8007b24 <__errno>
 8001c14:	4603      	mov	r3, r0
 8001c16:	220c      	movs	r2, #12
 8001c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c1e:	e009      	b.n	8001c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <_sbrk+0x64>)
 8001c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c32:	68fb      	ldr	r3, [r7, #12]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20020000 	.word	0x20020000
 8001c40:	00000400 	.word	0x00000400
 8001c44:	200005d8 	.word	0x200005d8
 8001c48:	20004348 	.word	0x20004348

08001c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <SystemInit+0x20>)
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c56:	4a05      	ldr	r2, [pc, #20]	; (8001c6c <SystemInit+0x20>)
 8001c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ca8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c74:	480d      	ldr	r0, [pc, #52]	; (8001cac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c76:	490e      	ldr	r1, [pc, #56]	; (8001cb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c78:	4a0e      	ldr	r2, [pc, #56]	; (8001cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c7c:	e002      	b.n	8001c84 <LoopCopyDataInit>

08001c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c82:	3304      	adds	r3, #4

08001c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c88:	d3f9      	bcc.n	8001c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c8a:	4a0b      	ldr	r2, [pc, #44]	; (8001cb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c8c:	4c0b      	ldr	r4, [pc, #44]	; (8001cbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c90:	e001      	b.n	8001c96 <LoopFillZerobss>

08001c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c94:	3204      	adds	r2, #4

08001c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c98:	d3fb      	bcc.n	8001c92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c9a:	f7ff ffd7 	bl	8001c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c9e:	f006 f83d 	bl	8007d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ca2:	f7ff fb2f 	bl	8001304 <main>
  bx  lr    
 8001ca6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ca8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001cb4:	0800b124 	.word	0x0800b124
  ldr r2, =_sbss
 8001cb8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001cbc:	20004344 	.word	0x20004344

08001cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc0:	e7fe      	b.n	8001cc0 <ADC_IRQHandler>
	...

08001cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cc8:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <HAL_Init+0x40>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <HAL_Init+0x40>)
 8001cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_Init+0x40>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <HAL_Init+0x40>)
 8001cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_Init+0x40>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <HAL_Init+0x40>)
 8001ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cec:	2003      	movs	r0, #3
 8001cee:	f000 fe84 	bl	80029fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf2:	200f      	movs	r0, #15
 8001cf4:	f7ff fe3e 	bl	8001974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf8:	f7ff fd9e 	bl	8001838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40023c00 	.word	0x40023c00

08001d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_IncTick+0x20>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_IncTick+0x24>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <HAL_IncTick+0x24>)
 8001d1a:	6013      	str	r3, [r2, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	200005dc 	.word	0x200005dc

08001d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return uwTick;
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <HAL_GetTick+0x14>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	200005dc 	.word	0x200005dc

08001d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d50:	f7ff ffee 	bl	8001d30 <HAL_GetTick>
 8001d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d60:	d005      	beq.n	8001d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <HAL_Delay+0x44>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d6e:	bf00      	nop
 8001d70:	f7ff ffde 	bl	8001d30 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d8f7      	bhi.n	8001d70 <HAL_Delay+0x28>
  {
  }
}
 8001d80:	bf00      	nop
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000008 	.word	0x20000008

08001d90 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e0ed      	b.n	8001f7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d102      	bne.n	8001db4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff fd6e 	bl	8001890 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0201 	orr.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dc4:	f7ff ffb4 	bl	8001d30 <HAL_GetTick>
 8001dc8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dca:	e012      	b.n	8001df2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dcc:	f7ff ffb0 	bl	8001d30 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b0a      	cmp	r3, #10
 8001dd8:	d90b      	bls.n	8001df2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2205      	movs	r2, #5
 8001dea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e0c5      	b.n	8001f7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0e5      	beq.n	8001dcc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0202 	bic.w	r2, r2, #2
 8001e0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e10:	f7ff ff8e 	bl	8001d30 <HAL_GetTick>
 8001e14:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e16:	e012      	b.n	8001e3e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e18:	f7ff ff8a 	bl	8001d30 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b0a      	cmp	r3, #10
 8001e24:	d90b      	bls.n	8001e3e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2205      	movs	r2, #5
 8001e36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e09f      	b.n	8001f7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1e5      	bne.n	8001e18 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7e1b      	ldrb	r3, [r3, #24]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d108      	bne.n	8001e66 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	e007      	b.n	8001e76 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7e5b      	ldrb	r3, [r3, #25]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d108      	bne.n	8001e90 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	e007      	b.n	8001ea0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7e9b      	ldrb	r3, [r3, #26]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d108      	bne.n	8001eba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0220 	orr.w	r2, r2, #32
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	e007      	b.n	8001eca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0220 	bic.w	r2, r2, #32
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	7edb      	ldrb	r3, [r3, #27]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d108      	bne.n	8001ee4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0210 	bic.w	r2, r2, #16
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	e007      	b.n	8001ef4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0210 	orr.w	r2, r2, #16
 8001ef2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	7f1b      	ldrb	r3, [r3, #28]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d108      	bne.n	8001f0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0208 	orr.w	r2, r2, #8
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	e007      	b.n	8001f1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0208 	bic.w	r2, r2, #8
 8001f1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	7f5b      	ldrb	r3, [r3, #29]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d108      	bne.n	8001f38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 0204 	orr.w	r2, r2, #4
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	e007      	b.n	8001f48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0204 	bic.w	r2, r2, #4
 8001f46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	ea42 0103 	orr.w	r1, r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	1e5a      	subs	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b087      	sub	sp, #28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f9e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001fa0:	7cfb      	ldrb	r3, [r7, #19]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d003      	beq.n	8001fae <HAL_CAN_ConfigFilter+0x26>
 8001fa6:	7cfb      	ldrb	r3, [r7, #19]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	f040 80be 	bne.w	800212a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001fae:	4b65      	ldr	r3, [pc, #404]	; (8002144 <HAL_CAN_ConfigFilter+0x1bc>)
 8001fb0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fb8:	f043 0201 	orr.w	r2, r3, #1
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fc8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	021b      	lsls	r3, r3, #8
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	f003 031f 	and.w	r3, r3, #31
 8001fee:	2201      	movs	r2, #1
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	401a      	ands	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d123      	bne.n	8002058 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	43db      	mvns	r3, r3
 800201a:	401a      	ands	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002032:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	3248      	adds	r2, #72	; 0x48
 8002038:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800204c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800204e:	6979      	ldr	r1, [r7, #20]
 8002050:	3348      	adds	r3, #72	; 0x48
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	440b      	add	r3, r1
 8002056:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d122      	bne.n	80020a6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	431a      	orrs	r2, r3
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002080:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	3248      	adds	r2, #72	; 0x48
 8002086:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800209a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800209c:	6979      	ldr	r1, [r7, #20]
 800209e:	3348      	adds	r3, #72	; 0x48
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	440b      	add	r3, r1
 80020a4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d109      	bne.n	80020c2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	401a      	ands	r2, r3
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80020c0:	e007      	b.n	80020d2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	431a      	orrs	r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d109      	bne.n	80020ee <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	401a      	ands	r2, r3
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80020ec:	e007      	b.n	80020fe <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d107      	bne.n	8002116 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	431a      	orrs	r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800211c:	f023 0201 	bic.w	r2, r3, #1
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	e006      	b.n	8002138 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
  }
}
 8002138:	4618      	mov	r0, r3
 800213a:	371c      	adds	r7, #28
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40006400 	.word	0x40006400

08002148 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b01      	cmp	r3, #1
 800215a:	d12e      	bne.n	80021ba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0201 	bic.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002174:	f7ff fddc 	bl	8001d30 <HAL_GetTick>
 8002178:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800217a:	e012      	b.n	80021a2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800217c:	f7ff fdd8 	bl	8001d30 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b0a      	cmp	r3, #10
 8002188:	d90b      	bls.n	80021a2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2205      	movs	r2, #5
 800219a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e012      	b.n	80021c8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1e5      	bne.n	800217c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e006      	b.n	80021c8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
  }
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80021d0:	b480      	push	{r7}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021e4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80021e6:	7dfb      	ldrb	r3, [r7, #23]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d003      	beq.n	80021f4 <HAL_CAN_GetRxMessage+0x24>
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	f040 80f3 	bne.w	80023da <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10e      	bne.n	8002218 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d116      	bne.n	8002236 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0e7      	b.n	80023e8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d107      	bne.n	8002236 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e0d8      	b.n	80023e8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	331b      	adds	r3, #27
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	4413      	add	r3, r2
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0204 	and.w	r2, r3, #4
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10c      	bne.n	800226e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	331b      	adds	r3, #27
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	4413      	add	r3, r2
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	0d5b      	lsrs	r3, r3, #21
 8002264:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	e00b      	b.n	8002286 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	331b      	adds	r3, #27
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	4413      	add	r3, r2
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	08db      	lsrs	r3, r3, #3
 800227e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	331b      	adds	r3, #27
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	4413      	add	r3, r2
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0202 	and.w	r2, r3, #2
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	331b      	adds	r3, #27
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	4413      	add	r3, r2
 80022a8:	3304      	adds	r3, #4
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 020f 	and.w	r2, r3, #15
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	331b      	adds	r3, #27
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	4413      	add	r3, r2
 80022c0:	3304      	adds	r3, #4
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	331b      	adds	r3, #27
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	4413      	add	r3, r2
 80022d8:	3304      	adds	r3, #4
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	0c1b      	lsrs	r3, r3, #16
 80022de:	b29a      	uxth	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	4413      	add	r3, r2
 8002304:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	0a1a      	lsrs	r2, r3, #8
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	3301      	adds	r3, #1
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	4413      	add	r3, r2
 800231e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	0c1a      	lsrs	r2, r3, #16
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	3302      	adds	r3, #2
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	4413      	add	r3, r2
 8002338:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	0e1a      	lsrs	r2, r3, #24
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	3303      	adds	r3, #3
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	4413      	add	r3, r2
 8002352:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	3304      	adds	r3, #4
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	4413      	add	r3, r2
 800236a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	0a1a      	lsrs	r2, r3, #8
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	3305      	adds	r3, #5
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	4413      	add	r3, r2
 8002384:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	0c1a      	lsrs	r2, r3, #16
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	3306      	adds	r3, #6
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	4413      	add	r3, r2
 800239e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	0e1a      	lsrs	r2, r3, #24
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	3307      	adds	r3, #7
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d108      	bne.n	80023c6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0220 	orr.w	r2, r2, #32
 80023c2:	60da      	str	r2, [r3, #12]
 80023c4:	e007      	b.n	80023d6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 0220 	orr.w	r2, r2, #32
 80023d4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	e006      	b.n	80023e8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
  }
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	371c      	adds	r7, #28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002404:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d002      	beq.n	8002412 <HAL_CAN_ActivateNotification+0x1e>
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d109      	bne.n	8002426 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6959      	ldr	r1, [r3, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	e006      	b.n	8002434 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
  }
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002448:	2300      	movs	r3, #0
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d07c      	beq.n	8002580 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d023      	beq.n	80024d8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2201      	movs	r2, #1
 8002496:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f983 	bl	80027ae <HAL_CAN_TxMailbox0CompleteCallback>
 80024a8:	e016      	b.n	80024d8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d004      	beq.n	80024be <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
 80024bc:	e00c      	b.n	80024d8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d004      	beq.n	80024d2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
 80024d0:	e002      	b.n	80024d8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f989 	bl	80027ea <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d024      	beq.n	800252c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f963 	bl	80027c2 <HAL_CAN_TxMailbox1CompleteCallback>
 80024fc:	e016      	b.n	800252c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002504:	2b00      	cmp	r3, #0
 8002506:	d004      	beq.n	8002512 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
 8002510:	e00c      	b.n	800252c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002518:	2b00      	cmp	r3, #0
 800251a:	d004      	beq.n	8002526 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
 8002524:	e002      	b.n	800252c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f969 	bl	80027fe <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d024      	beq.n	8002580 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800253e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f943 	bl	80027d6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002550:	e016      	b.n	8002580 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d004      	beq.n	8002566 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
 8002564:	e00c      	b.n	8002580 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d004      	beq.n	800257a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
 8002578:	e002      	b.n	8002580 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f949 	bl	8002812 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00c      	beq.n	80025a4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f003 0310 	and.w	r3, r3, #16
 8002590:	2b00      	cmp	r3, #0
 8002592:	d007      	beq.n	80025a4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800259a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2210      	movs	r2, #16
 80025a2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d006      	beq.n	80025c6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2208      	movs	r2, #8
 80025be:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f93a 	bl	800283a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d009      	beq.n	80025e4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f921 	bl	8002826 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00c      	beq.n	8002608 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f003 0310 	and.w	r3, r3, #16
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d007      	beq.n	8002608 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2210      	movs	r2, #16
 8002606:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00b      	beq.n	800262a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b00      	cmp	r3, #0
 800261a:	d006      	beq.n	800262a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2208      	movs	r2, #8
 8002622:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f912 	bl	800284e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	2b00      	cmp	r3, #0
 8002632:	d009      	beq.n	8002648 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fe fdda 	bl	80011fc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00b      	beq.n	800266a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	2b00      	cmp	r3, #0
 800265a:	d006      	beq.n	800266a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2210      	movs	r2, #16
 8002662:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f8fc 	bl	8002862 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00b      	beq.n	800268c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d006      	beq.n	800268c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2208      	movs	r2, #8
 8002684:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f8f5 	bl	8002876 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d07b      	beq.n	800278e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d072      	beq.n	8002786 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	f043 0302 	orr.w	r3, r3, #2
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d008      	beq.n	80026f4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	f043 0304 	orr.w	r3, r3, #4
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d043      	beq.n	8002786 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002704:	2b00      	cmp	r3, #0
 8002706:	d03e      	beq.n	8002786 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800270e:	2b60      	cmp	r3, #96	; 0x60
 8002710:	d02b      	beq.n	800276a <HAL_CAN_IRQHandler+0x32a>
 8002712:	2b60      	cmp	r3, #96	; 0x60
 8002714:	d82e      	bhi.n	8002774 <HAL_CAN_IRQHandler+0x334>
 8002716:	2b50      	cmp	r3, #80	; 0x50
 8002718:	d022      	beq.n	8002760 <HAL_CAN_IRQHandler+0x320>
 800271a:	2b50      	cmp	r3, #80	; 0x50
 800271c:	d82a      	bhi.n	8002774 <HAL_CAN_IRQHandler+0x334>
 800271e:	2b40      	cmp	r3, #64	; 0x40
 8002720:	d019      	beq.n	8002756 <HAL_CAN_IRQHandler+0x316>
 8002722:	2b40      	cmp	r3, #64	; 0x40
 8002724:	d826      	bhi.n	8002774 <HAL_CAN_IRQHandler+0x334>
 8002726:	2b30      	cmp	r3, #48	; 0x30
 8002728:	d010      	beq.n	800274c <HAL_CAN_IRQHandler+0x30c>
 800272a:	2b30      	cmp	r3, #48	; 0x30
 800272c:	d822      	bhi.n	8002774 <HAL_CAN_IRQHandler+0x334>
 800272e:	2b10      	cmp	r3, #16
 8002730:	d002      	beq.n	8002738 <HAL_CAN_IRQHandler+0x2f8>
 8002732:	2b20      	cmp	r3, #32
 8002734:	d005      	beq.n	8002742 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002736:	e01d      	b.n	8002774 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	f043 0308 	orr.w	r3, r3, #8
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002740:	e019      	b.n	8002776 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	f043 0310 	orr.w	r3, r3, #16
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800274a:	e014      	b.n	8002776 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	f043 0320 	orr.w	r3, r3, #32
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002754:	e00f      	b.n	8002776 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800275e:	e00a      	b.n	8002776 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002768:	e005      	b.n	8002776 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002772:	e000      	b.n	8002776 <HAL_CAN_IRQHandler+0x336>
            break;
 8002774:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	699a      	ldr	r2, [r3, #24]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002784:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2204      	movs	r2, #4
 800278c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f872 	bl	800288a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80027a6:	bf00      	nop
 80027a8:	3728      	adds	r7, #40	; 0x28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <__NVIC_SetPriorityGrouping+0x44>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028bc:	4013      	ands	r3, r2
 80028be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028d2:	4a04      	ldr	r2, [pc, #16]	; (80028e4 <__NVIC_SetPriorityGrouping+0x44>)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	60d3      	str	r3, [r2, #12]
}
 80028d8:	bf00      	nop
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028ec:	4b04      	ldr	r3, [pc, #16]	; (8002900 <__NVIC_GetPriorityGrouping+0x18>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	0a1b      	lsrs	r3, r3, #8
 80028f2:	f003 0307 	and.w	r3, r3, #7
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	2b00      	cmp	r3, #0
 8002914:	db0b      	blt.n	800292e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	f003 021f 	and.w	r2, r3, #31
 800291c:	4907      	ldr	r1, [pc, #28]	; (800293c <__NVIC_EnableIRQ+0x38>)
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	095b      	lsrs	r3, r3, #5
 8002924:	2001      	movs	r0, #1
 8002926:	fa00 f202 	lsl.w	r2, r0, r2
 800292a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	e000e100 	.word	0xe000e100

08002940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	6039      	str	r1, [r7, #0]
 800294a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002950:	2b00      	cmp	r3, #0
 8002952:	db0a      	blt.n	800296a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	b2da      	uxtb	r2, r3
 8002958:	490c      	ldr	r1, [pc, #48]	; (800298c <__NVIC_SetPriority+0x4c>)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	0112      	lsls	r2, r2, #4
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	440b      	add	r3, r1
 8002964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002968:	e00a      	b.n	8002980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	b2da      	uxtb	r2, r3
 800296e:	4908      	ldr	r1, [pc, #32]	; (8002990 <__NVIC_SetPriority+0x50>)
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	3b04      	subs	r3, #4
 8002978:	0112      	lsls	r2, r2, #4
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	440b      	add	r3, r1
 800297e:	761a      	strb	r2, [r3, #24]
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000e100 	.word	0xe000e100
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002994:	b480      	push	{r7}
 8002996:	b089      	sub	sp, #36	; 0x24
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f1c3 0307 	rsb	r3, r3, #7
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	bf28      	it	cs
 80029b2:	2304      	movcs	r3, #4
 80029b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3304      	adds	r3, #4
 80029ba:	2b06      	cmp	r3, #6
 80029bc:	d902      	bls.n	80029c4 <NVIC_EncodePriority+0x30>
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3b03      	subs	r3, #3
 80029c2:	e000      	b.n	80029c6 <NVIC_EncodePriority+0x32>
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43da      	mvns	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	401a      	ands	r2, r3
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	fa01 f303 	lsl.w	r3, r1, r3
 80029e6:	43d9      	mvns	r1, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ec:	4313      	orrs	r3, r2
         );
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3724      	adds	r7, #36	; 0x24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff ff4c 	bl	80028a0 <__NVIC_SetPriorityGrouping>
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a22:	f7ff ff61 	bl	80028e8 <__NVIC_GetPriorityGrouping>
 8002a26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	6978      	ldr	r0, [r7, #20]
 8002a2e:	f7ff ffb1 	bl	8002994 <NVIC_EncodePriority>
 8002a32:	4602      	mov	r2, r0
 8002a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a38:	4611      	mov	r1, r2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ff80 	bl	8002940 <__NVIC_SetPriority>
}
 8002a40:	bf00      	nop
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff ff54 	bl	8002904 <__NVIC_EnableIRQ>
}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b089      	sub	sp, #36	; 0x24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
 8002a7e:	e165      	b.n	8002d4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a80:	2201      	movs	r2, #1
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	f040 8154 	bne.w	8002d46 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d005      	beq.n	8002ab6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d130      	bne.n	8002b18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4013      	ands	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aec:	2201      	movs	r2, #1
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f003 0201 	and.w	r2, r3, #1
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 0303 	and.w	r3, r3, #3
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d017      	beq.n	8002b54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	2203      	movs	r2, #3
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d123      	bne.n	8002ba8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	08da      	lsrs	r2, r3, #3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3208      	adds	r2, #8
 8002b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	220f      	movs	r2, #15
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	08da      	lsrs	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3208      	adds	r2, #8
 8002ba2:	69b9      	ldr	r1, [r7, #24]
 8002ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0203 	and.w	r2, r3, #3
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 80ae 	beq.w	8002d46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	4b5d      	ldr	r3, [pc, #372]	; (8002d64 <HAL_GPIO_Init+0x300>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	4a5c      	ldr	r2, [pc, #368]	; (8002d64 <HAL_GPIO_Init+0x300>)
 8002bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bfa:	4b5a      	ldr	r3, [pc, #360]	; (8002d64 <HAL_GPIO_Init+0x300>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c06:	4a58      	ldr	r2, [pc, #352]	; (8002d68 <HAL_GPIO_Init+0x304>)
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	089b      	lsrs	r3, r3, #2
 8002c0c:	3302      	adds	r3, #2
 8002c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	220f      	movs	r2, #15
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a4f      	ldr	r2, [pc, #316]	; (8002d6c <HAL_GPIO_Init+0x308>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d025      	beq.n	8002c7e <HAL_GPIO_Init+0x21a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a4e      	ldr	r2, [pc, #312]	; (8002d70 <HAL_GPIO_Init+0x30c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d01f      	beq.n	8002c7a <HAL_GPIO_Init+0x216>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a4d      	ldr	r2, [pc, #308]	; (8002d74 <HAL_GPIO_Init+0x310>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d019      	beq.n	8002c76 <HAL_GPIO_Init+0x212>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a4c      	ldr	r2, [pc, #304]	; (8002d78 <HAL_GPIO_Init+0x314>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d013      	beq.n	8002c72 <HAL_GPIO_Init+0x20e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a4b      	ldr	r2, [pc, #300]	; (8002d7c <HAL_GPIO_Init+0x318>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d00d      	beq.n	8002c6e <HAL_GPIO_Init+0x20a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4a      	ldr	r2, [pc, #296]	; (8002d80 <HAL_GPIO_Init+0x31c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d007      	beq.n	8002c6a <HAL_GPIO_Init+0x206>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a49      	ldr	r2, [pc, #292]	; (8002d84 <HAL_GPIO_Init+0x320>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d101      	bne.n	8002c66 <HAL_GPIO_Init+0x202>
 8002c62:	2306      	movs	r3, #6
 8002c64:	e00c      	b.n	8002c80 <HAL_GPIO_Init+0x21c>
 8002c66:	2307      	movs	r3, #7
 8002c68:	e00a      	b.n	8002c80 <HAL_GPIO_Init+0x21c>
 8002c6a:	2305      	movs	r3, #5
 8002c6c:	e008      	b.n	8002c80 <HAL_GPIO_Init+0x21c>
 8002c6e:	2304      	movs	r3, #4
 8002c70:	e006      	b.n	8002c80 <HAL_GPIO_Init+0x21c>
 8002c72:	2303      	movs	r3, #3
 8002c74:	e004      	b.n	8002c80 <HAL_GPIO_Init+0x21c>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e002      	b.n	8002c80 <HAL_GPIO_Init+0x21c>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <HAL_GPIO_Init+0x21c>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	69fa      	ldr	r2, [r7, #28]
 8002c82:	f002 0203 	and.w	r2, r2, #3
 8002c86:	0092      	lsls	r2, r2, #2
 8002c88:	4093      	lsls	r3, r2
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c90:	4935      	ldr	r1, [pc, #212]	; (8002d68 <HAL_GPIO_Init+0x304>)
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	089b      	lsrs	r3, r3, #2
 8002c96:	3302      	adds	r3, #2
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c9e:	4b3a      	ldr	r3, [pc, #232]	; (8002d88 <HAL_GPIO_Init+0x324>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cc2:	4a31      	ldr	r2, [pc, #196]	; (8002d88 <HAL_GPIO_Init+0x324>)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cc8:	4b2f      	ldr	r3, [pc, #188]	; (8002d88 <HAL_GPIO_Init+0x324>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cec:	4a26      	ldr	r2, [pc, #152]	; (8002d88 <HAL_GPIO_Init+0x324>)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cf2:	4b25      	ldr	r3, [pc, #148]	; (8002d88 <HAL_GPIO_Init+0x324>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d16:	4a1c      	ldr	r2, [pc, #112]	; (8002d88 <HAL_GPIO_Init+0x324>)
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d1c:	4b1a      	ldr	r3, [pc, #104]	; (8002d88 <HAL_GPIO_Init+0x324>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d40:	4a11      	ldr	r2, [pc, #68]	; (8002d88 <HAL_GPIO_Init+0x324>)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	61fb      	str	r3, [r7, #28]
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	2b0f      	cmp	r3, #15
 8002d50:	f67f ae96 	bls.w	8002a80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	3724      	adds	r7, #36	; 0x24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800
 8002d68:	40013800 	.word	0x40013800
 8002d6c:	40020000 	.word	0x40020000
 8002d70:	40020400 	.word	0x40020400
 8002d74:	40020800 	.word	0x40020800
 8002d78:	40020c00 	.word	0x40020c00
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40021400 	.word	0x40021400
 8002d84:	40021800 	.word	0x40021800
 8002d88:	40013c00 	.word	0x40013c00

08002d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	807b      	strh	r3, [r7, #2]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d9c:	787b      	ldrb	r3, [r7, #1]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002da2:	887a      	ldrh	r2, [r7, #2]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002da8:	e003      	b.n	8002db2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002daa:	887b      	ldrh	r3, [r7, #2]
 8002dac:	041a      	lsls	r2, r3, #16
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	619a      	str	r2, [r3, #24]
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	603b      	str	r3, [r7, #0]
 8002dce:	4b20      	ldr	r3, [pc, #128]	; (8002e50 <HAL_PWREx_EnableOverDrive+0x90>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	4a1f      	ldr	r2, [pc, #124]	; (8002e50 <HAL_PWREx_EnableOverDrive+0x90>)
 8002dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dda:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002de6:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <HAL_PWREx_EnableOverDrive+0x94>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dec:	f7fe ffa0 	bl	8001d30 <HAL_GetTick>
 8002df0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002df2:	e009      	b.n	8002e08 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002df4:	f7fe ff9c 	bl	8001d30 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e02:	d901      	bls.n	8002e08 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e01f      	b.n	8002e48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e08:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e14:	d1ee      	bne.n	8002df4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e16:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e1c:	f7fe ff88 	bl	8001d30 <HAL_GetTick>
 8002e20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e22:	e009      	b.n	8002e38 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e24:	f7fe ff84 	bl	8001d30 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e32:	d901      	bls.n	8002e38 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e007      	b.n	8002e48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e38:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e44:	d1ee      	bne.n	8002e24 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40023800 	.word	0x40023800
 8002e54:	420e0040 	.word	0x420e0040
 8002e58:	40007000 	.word	0x40007000
 8002e5c:	420e0044 	.word	0x420e0044

08002e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0cc      	b.n	800300e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e74:	4b68      	ldr	r3, [pc, #416]	; (8003018 <HAL_RCC_ClockConfig+0x1b8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d90c      	bls.n	8002e9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	4b65      	ldr	r3, [pc, #404]	; (8003018 <HAL_RCC_ClockConfig+0x1b8>)
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8a:	4b63      	ldr	r3, [pc, #396]	; (8003018 <HAL_RCC_ClockConfig+0x1b8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0b8      	b.n	800300e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d020      	beq.n	8002eea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eb4:	4b59      	ldr	r3, [pc, #356]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	4a58      	ldr	r2, [pc, #352]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ebe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d005      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ecc:	4b53      	ldr	r3, [pc, #332]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	4a52      	ldr	r2, [pc, #328]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ed6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed8:	4b50      	ldr	r3, [pc, #320]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	494d      	ldr	r1, [pc, #308]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d044      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d107      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efe:	4b47      	ldr	r3, [pc, #284]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d119      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e07f      	b.n	800300e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d003      	beq.n	8002f1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	d107      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1e:	4b3f      	ldr	r3, [pc, #252]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d109      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e06f      	b.n	800300e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2e:	4b3b      	ldr	r3, [pc, #236]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e067      	b.n	800300e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f3e:	4b37      	ldr	r3, [pc, #220]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f023 0203 	bic.w	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	4934      	ldr	r1, [pc, #208]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f50:	f7fe feee 	bl	8001d30 <HAL_GetTick>
 8002f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f56:	e00a      	b.n	8002f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f58:	f7fe feea 	bl	8001d30 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e04f      	b.n	800300e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6e:	4b2b      	ldr	r3, [pc, #172]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 020c 	and.w	r2, r3, #12
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d1eb      	bne.n	8002f58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f80:	4b25      	ldr	r3, [pc, #148]	; (8003018 <HAL_RCC_ClockConfig+0x1b8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d20c      	bcs.n	8002fa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8e:	4b22      	ldr	r3, [pc, #136]	; (8003018 <HAL_RCC_ClockConfig+0x1b8>)
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b20      	ldr	r3, [pc, #128]	; (8003018 <HAL_RCC_ClockConfig+0x1b8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e032      	b.n	800300e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb4:	4b19      	ldr	r3, [pc, #100]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4916      	ldr	r1, [pc, #88]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d009      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fd2:	4b12      	ldr	r3, [pc, #72]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	490e      	ldr	r1, [pc, #56]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fe6:	f000 f873 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 8002fea:	4602      	mov	r2, r0
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	490a      	ldr	r1, [pc, #40]	; (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff8:	5ccb      	ldrb	r3, [r1, r3]
 8002ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffe:	4a09      	ldr	r2, [pc, #36]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8003000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003002:	4b09      	ldr	r3, [pc, #36]	; (8003028 <HAL_RCC_ClockConfig+0x1c8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7fe fcb4 	bl	8001974 <HAL_InitTick>

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40023c00 	.word	0x40023c00
 800301c:	40023800 	.word	0x40023800
 8003020:	0800ad24 	.word	0x0800ad24
 8003024:	20000000 	.word	0x20000000
 8003028:	20000004 	.word	0x20000004

0800302c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003030:	4b03      	ldr	r3, [pc, #12]	; (8003040 <HAL_RCC_GetHCLKFreq+0x14>)
 8003032:	681b      	ldr	r3, [r3, #0]
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000000 	.word	0x20000000

08003044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003048:	f7ff fff0 	bl	800302c <HAL_RCC_GetHCLKFreq>
 800304c:	4602      	mov	r2, r0
 800304e:	4b05      	ldr	r3, [pc, #20]	; (8003064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	0a9b      	lsrs	r3, r3, #10
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	4903      	ldr	r1, [pc, #12]	; (8003068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800305a:	5ccb      	ldrb	r3, [r1, r3]
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40023800 	.word	0x40023800
 8003068:	0800ad34 	.word	0x0800ad34

0800306c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	220f      	movs	r2, #15
 800307a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800307c:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <HAL_RCC_GetClockConfig+0x5c>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 0203 	and.w	r2, r3, #3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003088:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <HAL_RCC_GetClockConfig+0x5c>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <HAL_RCC_GetClockConfig+0x5c>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80030a0:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <HAL_RCC_GetClockConfig+0x5c>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	08db      	lsrs	r3, r3, #3
 80030a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030ae:	4b07      	ldr	r3, [pc, #28]	; (80030cc <HAL_RCC_GetClockConfig+0x60>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 020f 	and.w	r2, r3, #15
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	601a      	str	r2, [r3, #0]
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40023c00 	.word	0x40023c00

080030d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d4:	b0a6      	sub	sp, #152	; 0x98
 80030d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030f6:	4bc8      	ldr	r3, [pc, #800]	; (8003418 <HAL_RCC_GetSysClockFreq+0x348>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b0c      	cmp	r3, #12
 8003100:	f200 817e 	bhi.w	8003400 <HAL_RCC_GetSysClockFreq+0x330>
 8003104:	a201      	add	r2, pc, #4	; (adr r2, 800310c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310a:	bf00      	nop
 800310c:	08003141 	.word	0x08003141
 8003110:	08003401 	.word	0x08003401
 8003114:	08003401 	.word	0x08003401
 8003118:	08003401 	.word	0x08003401
 800311c:	08003149 	.word	0x08003149
 8003120:	08003401 	.word	0x08003401
 8003124:	08003401 	.word	0x08003401
 8003128:	08003401 	.word	0x08003401
 800312c:	08003151 	.word	0x08003151
 8003130:	08003401 	.word	0x08003401
 8003134:	08003401 	.word	0x08003401
 8003138:	08003401 	.word	0x08003401
 800313c:	080032bb 	.word	0x080032bb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003140:	4bb6      	ldr	r3, [pc, #728]	; (800341c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003142:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003146:	e15f      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003148:	4bb5      	ldr	r3, [pc, #724]	; (8003420 <HAL_RCC_GetSysClockFreq+0x350>)
 800314a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800314e:	e15b      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003150:	4bb1      	ldr	r3, [pc, #708]	; (8003418 <HAL_RCC_GetSysClockFreq+0x348>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003158:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800315c:	4bae      	ldr	r3, [pc, #696]	; (8003418 <HAL_RCC_GetSysClockFreq+0x348>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d031      	beq.n	80031cc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003168:	4bab      	ldr	r3, [pc, #684]	; (8003418 <HAL_RCC_GetSysClockFreq+0x348>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	099b      	lsrs	r3, r3, #6
 800316e:	2200      	movs	r2, #0
 8003170:	66bb      	str	r3, [r7, #104]	; 0x68
 8003172:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003174:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800317a:	663b      	str	r3, [r7, #96]	; 0x60
 800317c:	2300      	movs	r3, #0
 800317e:	667b      	str	r3, [r7, #100]	; 0x64
 8003180:	4ba7      	ldr	r3, [pc, #668]	; (8003420 <HAL_RCC_GetSysClockFreq+0x350>)
 8003182:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003186:	462a      	mov	r2, r5
 8003188:	fb03 f202 	mul.w	r2, r3, r2
 800318c:	2300      	movs	r3, #0
 800318e:	4621      	mov	r1, r4
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	4413      	add	r3, r2
 8003196:	4aa2      	ldr	r2, [pc, #648]	; (8003420 <HAL_RCC_GetSysClockFreq+0x350>)
 8003198:	4621      	mov	r1, r4
 800319a:	fba1 1202 	umull	r1, r2, r1, r2
 800319e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80031a0:	460a      	mov	r2, r1
 80031a2:	67ba      	str	r2, [r7, #120]	; 0x78
 80031a4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80031a6:	4413      	add	r3, r2
 80031a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031ae:	2200      	movs	r2, #0
 80031b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80031b2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80031b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031b8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80031bc:	f7fd fd14 	bl	8000be8 <__aeabi_uldivmod>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4613      	mov	r3, r2
 80031c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031ca:	e064      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031cc:	4b92      	ldr	r3, [pc, #584]	; (8003418 <HAL_RCC_GetSysClockFreq+0x348>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	099b      	lsrs	r3, r3, #6
 80031d2:	2200      	movs	r2, #0
 80031d4:	653b      	str	r3, [r7, #80]	; 0x50
 80031d6:	657a      	str	r2, [r7, #84]	; 0x54
 80031d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031de:	64bb      	str	r3, [r7, #72]	; 0x48
 80031e0:	2300      	movs	r3, #0
 80031e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031e4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80031e8:	4622      	mov	r2, r4
 80031ea:	462b      	mov	r3, r5
 80031ec:	f04f 0000 	mov.w	r0, #0
 80031f0:	f04f 0100 	mov.w	r1, #0
 80031f4:	0159      	lsls	r1, r3, #5
 80031f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031fa:	0150      	lsls	r0, r2, #5
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4621      	mov	r1, r4
 8003202:	1a51      	subs	r1, r2, r1
 8003204:	6139      	str	r1, [r7, #16]
 8003206:	4629      	mov	r1, r5
 8003208:	eb63 0301 	sbc.w	r3, r3, r1
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800321a:	4659      	mov	r1, fp
 800321c:	018b      	lsls	r3, r1, #6
 800321e:	4651      	mov	r1, sl
 8003220:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003224:	4651      	mov	r1, sl
 8003226:	018a      	lsls	r2, r1, #6
 8003228:	4651      	mov	r1, sl
 800322a:	ebb2 0801 	subs.w	r8, r2, r1
 800322e:	4659      	mov	r1, fp
 8003230:	eb63 0901 	sbc.w	r9, r3, r1
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003240:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003244:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003248:	4690      	mov	r8, r2
 800324a:	4699      	mov	r9, r3
 800324c:	4623      	mov	r3, r4
 800324e:	eb18 0303 	adds.w	r3, r8, r3
 8003252:	60bb      	str	r3, [r7, #8]
 8003254:	462b      	mov	r3, r5
 8003256:	eb49 0303 	adc.w	r3, r9, r3
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003268:	4629      	mov	r1, r5
 800326a:	028b      	lsls	r3, r1, #10
 800326c:	4621      	mov	r1, r4
 800326e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003272:	4621      	mov	r1, r4
 8003274:	028a      	lsls	r2, r1, #10
 8003276:	4610      	mov	r0, r2
 8003278:	4619      	mov	r1, r3
 800327a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800327e:	2200      	movs	r2, #0
 8003280:	643b      	str	r3, [r7, #64]	; 0x40
 8003282:	647a      	str	r2, [r7, #68]	; 0x44
 8003284:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003288:	f7fd fcae 	bl	8000be8 <__aeabi_uldivmod>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4613      	mov	r3, r2
 8003292:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003296:	4b60      	ldr	r3, [pc, #384]	; (8003418 <HAL_RCC_GetSysClockFreq+0x348>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	0c1b      	lsrs	r3, r3, #16
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	3301      	adds	r3, #1
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80032a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80032b8:	e0a6      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032ba:	4b57      	ldr	r3, [pc, #348]	; (8003418 <HAL_RCC_GetSysClockFreq+0x348>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032c6:	4b54      	ldr	r3, [pc, #336]	; (8003418 <HAL_RCC_GetSysClockFreq+0x348>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d02a      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d2:	4b51      	ldr	r3, [pc, #324]	; (8003418 <HAL_RCC_GetSysClockFreq+0x348>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	099b      	lsrs	r3, r3, #6
 80032d8:	2200      	movs	r2, #0
 80032da:	63bb      	str	r3, [r7, #56]	; 0x38
 80032dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032e4:	2100      	movs	r1, #0
 80032e6:	4b4e      	ldr	r3, [pc, #312]	; (8003420 <HAL_RCC_GetSysClockFreq+0x350>)
 80032e8:	fb03 f201 	mul.w	r2, r3, r1
 80032ec:	2300      	movs	r3, #0
 80032ee:	fb00 f303 	mul.w	r3, r0, r3
 80032f2:	4413      	add	r3, r2
 80032f4:	4a4a      	ldr	r2, [pc, #296]	; (8003420 <HAL_RCC_GetSysClockFreq+0x350>)
 80032f6:	fba0 1202 	umull	r1, r2, r0, r2
 80032fa:	677a      	str	r2, [r7, #116]	; 0x74
 80032fc:	460a      	mov	r2, r1
 80032fe:	673a      	str	r2, [r7, #112]	; 0x70
 8003300:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003302:	4413      	add	r3, r2
 8003304:	677b      	str	r3, [r7, #116]	; 0x74
 8003306:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800330a:	2200      	movs	r2, #0
 800330c:	633b      	str	r3, [r7, #48]	; 0x30
 800330e:	637a      	str	r2, [r7, #52]	; 0x34
 8003310:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003314:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003318:	f7fd fc66 	bl	8000be8 <__aeabi_uldivmod>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4613      	mov	r3, r2
 8003322:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003326:	e05b      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003328:	4b3b      	ldr	r3, [pc, #236]	; (8003418 <HAL_RCC_GetSysClockFreq+0x348>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	099b      	lsrs	r3, r3, #6
 800332e:	2200      	movs	r2, #0
 8003330:	62bb      	str	r3, [r7, #40]	; 0x28
 8003332:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800333a:	623b      	str	r3, [r7, #32]
 800333c:	2300      	movs	r3, #0
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
 8003340:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003344:	4642      	mov	r2, r8
 8003346:	464b      	mov	r3, r9
 8003348:	f04f 0000 	mov.w	r0, #0
 800334c:	f04f 0100 	mov.w	r1, #0
 8003350:	0159      	lsls	r1, r3, #5
 8003352:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003356:	0150      	lsls	r0, r2, #5
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4641      	mov	r1, r8
 800335e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003362:	4649      	mov	r1, r9
 8003364:	eb63 0b01 	sbc.w	fp, r3, r1
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003374:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003378:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800337c:	ebb2 040a 	subs.w	r4, r2, sl
 8003380:	eb63 050b 	sbc.w	r5, r3, fp
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	00eb      	lsls	r3, r5, #3
 800338e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003392:	00e2      	lsls	r2, r4, #3
 8003394:	4614      	mov	r4, r2
 8003396:	461d      	mov	r5, r3
 8003398:	4643      	mov	r3, r8
 800339a:	18e3      	adds	r3, r4, r3
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	464b      	mov	r3, r9
 80033a0:	eb45 0303 	adc.w	r3, r5, r3
 80033a4:	607b      	str	r3, [r7, #4]
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033b2:	4629      	mov	r1, r5
 80033b4:	028b      	lsls	r3, r1, #10
 80033b6:	4621      	mov	r1, r4
 80033b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033bc:	4621      	mov	r1, r4
 80033be:	028a      	lsls	r2, r1, #10
 80033c0:	4610      	mov	r0, r2
 80033c2:	4619      	mov	r1, r3
 80033c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033c8:	2200      	movs	r2, #0
 80033ca:	61bb      	str	r3, [r7, #24]
 80033cc:	61fa      	str	r2, [r7, #28]
 80033ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033d2:	f7fd fc09 	bl	8000be8 <__aeabi_uldivmod>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	4613      	mov	r3, r2
 80033dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80033e0:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <HAL_RCC_GetSysClockFreq+0x348>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	0f1b      	lsrs	r3, r3, #28
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80033ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80033fe:	e003      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003400:	4b06      	ldr	r3, [pc, #24]	; (800341c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003402:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003406:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003408:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 800340c:	4618      	mov	r0, r3
 800340e:	3798      	adds	r7, #152	; 0x98
 8003410:	46bd      	mov	sp, r7
 8003412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800
 800341c:	00f42400 	.word	0x00f42400
 8003420:	017d7840 	.word	0x017d7840

08003424 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e28d      	b.n	8003952 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 8083 	beq.w	800354a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003444:	4b94      	ldr	r3, [pc, #592]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b04      	cmp	r3, #4
 800344e:	d019      	beq.n	8003484 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003450:	4b91      	ldr	r3, [pc, #580]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003458:	2b08      	cmp	r3, #8
 800345a:	d106      	bne.n	800346a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800345c:	4b8e      	ldr	r3, [pc, #568]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003468:	d00c      	beq.n	8003484 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800346a:	4b8b      	ldr	r3, [pc, #556]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003472:	2b0c      	cmp	r3, #12
 8003474:	d112      	bne.n	800349c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003476:	4b88      	ldr	r3, [pc, #544]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003482:	d10b      	bne.n	800349c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003484:	4b84      	ldr	r3, [pc, #528]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d05b      	beq.n	8003548 <HAL_RCC_OscConfig+0x124>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d157      	bne.n	8003548 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e25a      	b.n	8003952 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a4:	d106      	bne.n	80034b4 <HAL_RCC_OscConfig+0x90>
 80034a6:	4b7c      	ldr	r3, [pc, #496]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a7b      	ldr	r2, [pc, #492]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 80034ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	e01d      	b.n	80034f0 <HAL_RCC_OscConfig+0xcc>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034bc:	d10c      	bne.n	80034d8 <HAL_RCC_OscConfig+0xb4>
 80034be:	4b76      	ldr	r3, [pc, #472]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a75      	ldr	r2, [pc, #468]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 80034c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	4b73      	ldr	r3, [pc, #460]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a72      	ldr	r2, [pc, #456]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 80034d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	e00b      	b.n	80034f0 <HAL_RCC_OscConfig+0xcc>
 80034d8:	4b6f      	ldr	r3, [pc, #444]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a6e      	ldr	r2, [pc, #440]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 80034de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	4b6c      	ldr	r3, [pc, #432]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a6b      	ldr	r2, [pc, #428]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 80034ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d013      	beq.n	8003520 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f8:	f7fe fc1a 	bl	8001d30 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003500:	f7fe fc16 	bl	8001d30 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b64      	cmp	r3, #100	; 0x64
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e21f      	b.n	8003952 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003512:	4b61      	ldr	r3, [pc, #388]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0f0      	beq.n	8003500 <HAL_RCC_OscConfig+0xdc>
 800351e:	e014      	b.n	800354a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003520:	f7fe fc06 	bl	8001d30 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003528:	f7fe fc02 	bl	8001d30 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b64      	cmp	r3, #100	; 0x64
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e20b      	b.n	8003952 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800353a:	4b57      	ldr	r3, [pc, #348]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x104>
 8003546:	e000      	b.n	800354a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d06f      	beq.n	8003636 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003556:	4b50      	ldr	r3, [pc, #320]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 030c 	and.w	r3, r3, #12
 800355e:	2b00      	cmp	r3, #0
 8003560:	d017      	beq.n	8003592 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003562:	4b4d      	ldr	r3, [pc, #308]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800356a:	2b08      	cmp	r3, #8
 800356c:	d105      	bne.n	800357a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800356e:	4b4a      	ldr	r3, [pc, #296]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00b      	beq.n	8003592 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800357a:	4b47      	ldr	r3, [pc, #284]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003582:	2b0c      	cmp	r3, #12
 8003584:	d11c      	bne.n	80035c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003586:	4b44      	ldr	r3, [pc, #272]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d116      	bne.n	80035c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003592:	4b41      	ldr	r3, [pc, #260]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <HAL_RCC_OscConfig+0x186>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d001      	beq.n	80035aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e1d3      	b.n	8003952 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035aa:	4b3b      	ldr	r3, [pc, #236]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4937      	ldr	r1, [pc, #220]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035be:	e03a      	b.n	8003636 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d020      	beq.n	800360a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035c8:	4b34      	ldr	r3, [pc, #208]	; (800369c <HAL_RCC_OscConfig+0x278>)
 80035ca:	2201      	movs	r2, #1
 80035cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ce:	f7fe fbaf 	bl	8001d30 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035d6:	f7fe fbab 	bl	8001d30 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e1b4      	b.n	8003952 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e8:	4b2b      	ldr	r3, [pc, #172]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f0      	beq.n	80035d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f4:	4b28      	ldr	r3, [pc, #160]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	4925      	ldr	r1, [pc, #148]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 8003604:	4313      	orrs	r3, r2
 8003606:	600b      	str	r3, [r1, #0]
 8003608:	e015      	b.n	8003636 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800360a:	4b24      	ldr	r3, [pc, #144]	; (800369c <HAL_RCC_OscConfig+0x278>)
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003610:	f7fe fb8e 	bl	8001d30 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003618:	f7fe fb8a 	bl	8001d30 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e193      	b.n	8003952 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800362a:	4b1b      	ldr	r3, [pc, #108]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f0      	bne.n	8003618 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d036      	beq.n	80036b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d016      	beq.n	8003678 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800364a:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 800364c:	2201      	movs	r2, #1
 800364e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003650:	f7fe fb6e 	bl	8001d30 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003658:	f7fe fb6a 	bl	8001d30 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e173      	b.n	8003952 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800366a:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 800366c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0f0      	beq.n	8003658 <HAL_RCC_OscConfig+0x234>
 8003676:	e01b      	b.n	80036b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003678:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367e:	f7fe fb57 	bl	8001d30 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003684:	e00e      	b.n	80036a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003686:	f7fe fb53 	bl	8001d30 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d907      	bls.n	80036a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e15c      	b.n	8003952 <HAL_RCC_OscConfig+0x52e>
 8003698:	40023800 	.word	0x40023800
 800369c:	42470000 	.word	0x42470000
 80036a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a4:	4b8a      	ldr	r3, [pc, #552]	; (80038d0 <HAL_RCC_OscConfig+0x4ac>)
 80036a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1ea      	bne.n	8003686 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 8097 	beq.w	80037ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036be:	2300      	movs	r3, #0
 80036c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036c2:	4b83      	ldr	r3, [pc, #524]	; (80038d0 <HAL_RCC_OscConfig+0x4ac>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10f      	bne.n	80036ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ce:	2300      	movs	r3, #0
 80036d0:	60bb      	str	r3, [r7, #8]
 80036d2:	4b7f      	ldr	r3, [pc, #508]	; (80038d0 <HAL_RCC_OscConfig+0x4ac>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	4a7e      	ldr	r2, [pc, #504]	; (80038d0 <HAL_RCC_OscConfig+0x4ac>)
 80036d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036dc:	6413      	str	r3, [r2, #64]	; 0x40
 80036de:	4b7c      	ldr	r3, [pc, #496]	; (80038d0 <HAL_RCC_OscConfig+0x4ac>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e6:	60bb      	str	r3, [r7, #8]
 80036e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ea:	2301      	movs	r3, #1
 80036ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ee:	4b79      	ldr	r3, [pc, #484]	; (80038d4 <HAL_RCC_OscConfig+0x4b0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d118      	bne.n	800372c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036fa:	4b76      	ldr	r3, [pc, #472]	; (80038d4 <HAL_RCC_OscConfig+0x4b0>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a75      	ldr	r2, [pc, #468]	; (80038d4 <HAL_RCC_OscConfig+0x4b0>)
 8003700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003706:	f7fe fb13 	bl	8001d30 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370e:	f7fe fb0f 	bl	8001d30 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e118      	b.n	8003952 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003720:	4b6c      	ldr	r3, [pc, #432]	; (80038d4 <HAL_RCC_OscConfig+0x4b0>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0f0      	beq.n	800370e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d106      	bne.n	8003742 <HAL_RCC_OscConfig+0x31e>
 8003734:	4b66      	ldr	r3, [pc, #408]	; (80038d0 <HAL_RCC_OscConfig+0x4ac>)
 8003736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003738:	4a65      	ldr	r2, [pc, #404]	; (80038d0 <HAL_RCC_OscConfig+0x4ac>)
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	6713      	str	r3, [r2, #112]	; 0x70
 8003740:	e01c      	b.n	800377c <HAL_RCC_OscConfig+0x358>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b05      	cmp	r3, #5
 8003748:	d10c      	bne.n	8003764 <HAL_RCC_OscConfig+0x340>
 800374a:	4b61      	ldr	r3, [pc, #388]	; (80038d0 <HAL_RCC_OscConfig+0x4ac>)
 800374c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374e:	4a60      	ldr	r2, [pc, #384]	; (80038d0 <HAL_RCC_OscConfig+0x4ac>)
 8003750:	f043 0304 	orr.w	r3, r3, #4
 8003754:	6713      	str	r3, [r2, #112]	; 0x70
 8003756:	4b5e      	ldr	r3, [pc, #376]	; (80038d0 <HAL_RCC_OscConfig+0x4ac>)
 8003758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375a:	4a5d      	ldr	r2, [pc, #372]	; (80038d0 <HAL_RCC_OscConfig+0x4ac>)
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	6713      	str	r3, [r2, #112]	; 0x70
 8003762:	e00b      	b.n	800377c <HAL_RCC_OscConfig+0x358>
 8003764:	4b5a      	ldr	r3, [pc, #360]	; (80038d0 <HAL_RCC_OscConfig+0x4ac>)
 8003766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003768:	4a59      	ldr	r2, [pc, #356]	; (80038d0 <HAL_RCC_OscConfig+0x4ac>)
 800376a:	f023 0301 	bic.w	r3, r3, #1
 800376e:	6713      	str	r3, [r2, #112]	; 0x70
 8003770:	4b57      	ldr	r3, [pc, #348]	; (80038d0 <HAL_RCC_OscConfig+0x4ac>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003774:	4a56      	ldr	r2, [pc, #344]	; (80038d0 <HAL_RCC_OscConfig+0x4ac>)
 8003776:	f023 0304 	bic.w	r3, r3, #4
 800377a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d015      	beq.n	80037b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003784:	f7fe fad4 	bl	8001d30 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800378a:	e00a      	b.n	80037a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800378c:	f7fe fad0 	bl	8001d30 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f241 3288 	movw	r2, #5000	; 0x1388
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e0d7      	b.n	8003952 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a2:	4b4b      	ldr	r3, [pc, #300]	; (80038d0 <HAL_RCC_OscConfig+0x4ac>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0ee      	beq.n	800378c <HAL_RCC_OscConfig+0x368>
 80037ae:	e014      	b.n	80037da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b0:	f7fe fabe 	bl	8001d30 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b6:	e00a      	b.n	80037ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b8:	f7fe faba 	bl	8001d30 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e0c1      	b.n	8003952 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ce:	4b40      	ldr	r3, [pc, #256]	; (80038d0 <HAL_RCC_OscConfig+0x4ac>)
 80037d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1ee      	bne.n	80037b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037da:	7dfb      	ldrb	r3, [r7, #23]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d105      	bne.n	80037ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e0:	4b3b      	ldr	r3, [pc, #236]	; (80038d0 <HAL_RCC_OscConfig+0x4ac>)
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	4a3a      	ldr	r2, [pc, #232]	; (80038d0 <HAL_RCC_OscConfig+0x4ac>)
 80037e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 80ad 	beq.w	8003950 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037f6:	4b36      	ldr	r3, [pc, #216]	; (80038d0 <HAL_RCC_OscConfig+0x4ac>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 030c 	and.w	r3, r3, #12
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d060      	beq.n	80038c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d145      	bne.n	8003896 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380a:	4b33      	ldr	r3, [pc, #204]	; (80038d8 <HAL_RCC_OscConfig+0x4b4>)
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003810:	f7fe fa8e 	bl	8001d30 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003818:	f7fe fa8a 	bl	8001d30 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e093      	b.n	8003952 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382a:	4b29      	ldr	r3, [pc, #164]	; (80038d0 <HAL_RCC_OscConfig+0x4ac>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f0      	bne.n	8003818 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69da      	ldr	r2, [r3, #28]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	019b      	lsls	r3, r3, #6
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	085b      	lsrs	r3, r3, #1
 800384e:	3b01      	subs	r3, #1
 8003850:	041b      	lsls	r3, r3, #16
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	061b      	lsls	r3, r3, #24
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	071b      	lsls	r3, r3, #28
 8003862:	491b      	ldr	r1, [pc, #108]	; (80038d0 <HAL_RCC_OscConfig+0x4ac>)
 8003864:	4313      	orrs	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003868:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <HAL_RCC_OscConfig+0x4b4>)
 800386a:	2201      	movs	r2, #1
 800386c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386e:	f7fe fa5f 	bl	8001d30 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003876:	f7fe fa5b 	bl	8001d30 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e064      	b.n	8003952 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003888:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <HAL_RCC_OscConfig+0x4ac>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0f0      	beq.n	8003876 <HAL_RCC_OscConfig+0x452>
 8003894:	e05c      	b.n	8003950 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003896:	4b10      	ldr	r3, [pc, #64]	; (80038d8 <HAL_RCC_OscConfig+0x4b4>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7fe fa48 	bl	8001d30 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a4:	f7fe fa44 	bl	8001d30 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e04d      	b.n	8003952 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b6:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <HAL_RCC_OscConfig+0x4ac>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x480>
 80038c2:	e045      	b.n	8003950 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d107      	bne.n	80038dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e040      	b.n	8003952 <HAL_RCC_OscConfig+0x52e>
 80038d0:	40023800 	.word	0x40023800
 80038d4:	40007000 	.word	0x40007000
 80038d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038dc:	4b1f      	ldr	r3, [pc, #124]	; (800395c <HAL_RCC_OscConfig+0x538>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d030      	beq.n	800394c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d129      	bne.n	800394c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003902:	429a      	cmp	r2, r3
 8003904:	d122      	bne.n	800394c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800390c:	4013      	ands	r3, r2
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003912:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003914:	4293      	cmp	r3, r2
 8003916:	d119      	bne.n	800394c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	085b      	lsrs	r3, r3, #1
 8003924:	3b01      	subs	r3, #1
 8003926:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003928:	429a      	cmp	r2, r3
 800392a:	d10f      	bne.n	800394c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003938:	429a      	cmp	r2, r3
 800393a:	d107      	bne.n	800394c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40023800 	.word	0x40023800

08003960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e041      	b.n	80039f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fd ffd2 	bl	8001930 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3304      	adds	r3, #4
 800399c:	4619      	mov	r1, r3
 800399e:	4610      	mov	r0, r2
 80039a0:	f000 fafe 	bl	8003fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d001      	beq.n	8003a18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e046      	b.n	8003aa6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a23      	ldr	r2, [pc, #140]	; (8003ab4 <HAL_TIM_Base_Start+0xb4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d022      	beq.n	8003a70 <HAL_TIM_Base_Start+0x70>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a32:	d01d      	beq.n	8003a70 <HAL_TIM_Base_Start+0x70>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1f      	ldr	r2, [pc, #124]	; (8003ab8 <HAL_TIM_Base_Start+0xb8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d018      	beq.n	8003a70 <HAL_TIM_Base_Start+0x70>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1e      	ldr	r2, [pc, #120]	; (8003abc <HAL_TIM_Base_Start+0xbc>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d013      	beq.n	8003a70 <HAL_TIM_Base_Start+0x70>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a1c      	ldr	r2, [pc, #112]	; (8003ac0 <HAL_TIM_Base_Start+0xc0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00e      	beq.n	8003a70 <HAL_TIM_Base_Start+0x70>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a1b      	ldr	r2, [pc, #108]	; (8003ac4 <HAL_TIM_Base_Start+0xc4>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d009      	beq.n	8003a70 <HAL_TIM_Base_Start+0x70>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a19      	ldr	r2, [pc, #100]	; (8003ac8 <HAL_TIM_Base_Start+0xc8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d004      	beq.n	8003a70 <HAL_TIM_Base_Start+0x70>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a18      	ldr	r2, [pc, #96]	; (8003acc <HAL_TIM_Base_Start+0xcc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d111      	bne.n	8003a94 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b06      	cmp	r3, #6
 8003a80:	d010      	beq.n	8003aa4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0201 	orr.w	r2, r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a92:	e007      	b.n	8003aa4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0201 	orr.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40010000 	.word	0x40010000
 8003ab8:	40000400 	.word	0x40000400
 8003abc:	40000800 	.word	0x40000800
 8003ac0:	40000c00 	.word	0x40000c00
 8003ac4:	40010400 	.word	0x40010400
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40001800 	.word	0x40001800

08003ad0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d001      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e04e      	b.n	8003b86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a23      	ldr	r2, [pc, #140]	; (8003b94 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d022      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b12:	d01d      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1f      	ldr	r2, [pc, #124]	; (8003b98 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d018      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1e      	ldr	r2, [pc, #120]	; (8003b9c <HAL_TIM_Base_Start_IT+0xcc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d013      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ba0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00e      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1b      	ldr	r2, [pc, #108]	; (8003ba4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d009      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a19      	ldr	r2, [pc, #100]	; (8003ba8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d004      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a18      	ldr	r2, [pc, #96]	; (8003bac <HAL_TIM_Base_Start_IT+0xdc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d111      	bne.n	8003b74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b06      	cmp	r3, #6
 8003b60:	d010      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0201 	orr.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b72:	e007      	b.n	8003b84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40010000 	.word	0x40010000
 8003b98:	40000400 	.word	0x40000400
 8003b9c:	40000800 	.word	0x40000800
 8003ba0:	40000c00 	.word	0x40000c00
 8003ba4:	40010400 	.word	0x40010400
 8003ba8:	40014000 	.word	0x40014000
 8003bac:	40001800 	.word	0x40001800

08003bb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d122      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d11b      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f06f 0202 	mvn.w	r2, #2
 8003bdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f9b5 	bl	8003f62 <HAL_TIM_IC_CaptureCallback>
 8003bf8:	e005      	b.n	8003c06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f9a7 	bl	8003f4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f9b8 	bl	8003f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d122      	bne.n	8003c60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d11b      	bne.n	8003c60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f06f 0204 	mvn.w	r2, #4
 8003c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2202      	movs	r2, #2
 8003c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f98b 	bl	8003f62 <HAL_TIM_IC_CaptureCallback>
 8003c4c:	e005      	b.n	8003c5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f97d 	bl	8003f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f98e 	bl	8003f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d122      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	d11b      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0208 	mvn.w	r2, #8
 8003c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2204      	movs	r2, #4
 8003c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f961 	bl	8003f62 <HAL_TIM_IC_CaptureCallback>
 8003ca0:	e005      	b.n	8003cae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f953 	bl	8003f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f964 	bl	8003f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	2b10      	cmp	r3, #16
 8003cc0:	d122      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b10      	cmp	r3, #16
 8003cce:	d11b      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f06f 0210 	mvn.w	r2, #16
 8003cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2208      	movs	r2, #8
 8003cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f937 	bl	8003f62 <HAL_TIM_IC_CaptureCallback>
 8003cf4:	e005      	b.n	8003d02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f929 	bl	8003f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f93a 	bl	8003f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d10e      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d107      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f06f 0201 	mvn.w	r2, #1
 8003d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fd fd6e 	bl	8001810 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3e:	2b80      	cmp	r3, #128	; 0x80
 8003d40:	d10e      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4c:	2b80      	cmp	r3, #128	; 0x80
 8003d4e:	d107      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fae0 	bl	8004320 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6a:	2b40      	cmp	r3, #64	; 0x40
 8003d6c:	d10e      	bne.n	8003d8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d78:	2b40      	cmp	r3, #64	; 0x40
 8003d7a:	d107      	bne.n	8003d8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f8ff 	bl	8003f8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	d10e      	bne.n	8003db8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d107      	bne.n	8003db8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f06f 0220 	mvn.w	r2, #32
 8003db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 faaa 	bl	800430c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003db8:	bf00      	nop
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_TIM_ConfigClockSource+0x1c>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e0b4      	b.n	8003f46 <HAL_TIM_ConfigClockSource+0x186>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e14:	d03e      	beq.n	8003e94 <HAL_TIM_ConfigClockSource+0xd4>
 8003e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e1a:	f200 8087 	bhi.w	8003f2c <HAL_TIM_ConfigClockSource+0x16c>
 8003e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e22:	f000 8086 	beq.w	8003f32 <HAL_TIM_ConfigClockSource+0x172>
 8003e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2a:	d87f      	bhi.n	8003f2c <HAL_TIM_ConfigClockSource+0x16c>
 8003e2c:	2b70      	cmp	r3, #112	; 0x70
 8003e2e:	d01a      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0xa6>
 8003e30:	2b70      	cmp	r3, #112	; 0x70
 8003e32:	d87b      	bhi.n	8003f2c <HAL_TIM_ConfigClockSource+0x16c>
 8003e34:	2b60      	cmp	r3, #96	; 0x60
 8003e36:	d050      	beq.n	8003eda <HAL_TIM_ConfigClockSource+0x11a>
 8003e38:	2b60      	cmp	r3, #96	; 0x60
 8003e3a:	d877      	bhi.n	8003f2c <HAL_TIM_ConfigClockSource+0x16c>
 8003e3c:	2b50      	cmp	r3, #80	; 0x50
 8003e3e:	d03c      	beq.n	8003eba <HAL_TIM_ConfigClockSource+0xfa>
 8003e40:	2b50      	cmp	r3, #80	; 0x50
 8003e42:	d873      	bhi.n	8003f2c <HAL_TIM_ConfigClockSource+0x16c>
 8003e44:	2b40      	cmp	r3, #64	; 0x40
 8003e46:	d058      	beq.n	8003efa <HAL_TIM_ConfigClockSource+0x13a>
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	d86f      	bhi.n	8003f2c <HAL_TIM_ConfigClockSource+0x16c>
 8003e4c:	2b30      	cmp	r3, #48	; 0x30
 8003e4e:	d064      	beq.n	8003f1a <HAL_TIM_ConfigClockSource+0x15a>
 8003e50:	2b30      	cmp	r3, #48	; 0x30
 8003e52:	d86b      	bhi.n	8003f2c <HAL_TIM_ConfigClockSource+0x16c>
 8003e54:	2b20      	cmp	r3, #32
 8003e56:	d060      	beq.n	8003f1a <HAL_TIM_ConfigClockSource+0x15a>
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	d867      	bhi.n	8003f2c <HAL_TIM_ConfigClockSource+0x16c>
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d05c      	beq.n	8003f1a <HAL_TIM_ConfigClockSource+0x15a>
 8003e60:	2b10      	cmp	r3, #16
 8003e62:	d05a      	beq.n	8003f1a <HAL_TIM_ConfigClockSource+0x15a>
 8003e64:	e062      	b.n	8003f2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	6899      	ldr	r1, [r3, #8]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f000 f9ad 	bl	80041d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	609a      	str	r2, [r3, #8]
      break;
 8003e92:	e04f      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6818      	ldr	r0, [r3, #0]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	6899      	ldr	r1, [r3, #8]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f000 f996 	bl	80041d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eb6:	609a      	str	r2, [r3, #8]
      break;
 8003eb8:	e03c      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	6859      	ldr	r1, [r3, #4]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f000 f90a 	bl	80040e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2150      	movs	r1, #80	; 0x50
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 f963 	bl	800419e <TIM_ITRx_SetConfig>
      break;
 8003ed8:	e02c      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6818      	ldr	r0, [r3, #0]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	6859      	ldr	r1, [r3, #4]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f000 f929 	bl	800413e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2160      	movs	r1, #96	; 0x60
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 f953 	bl	800419e <TIM_ITRx_SetConfig>
      break;
 8003ef8:	e01c      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	6859      	ldr	r1, [r3, #4]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	461a      	mov	r2, r3
 8003f08:	f000 f8ea 	bl	80040e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2140      	movs	r1, #64	; 0x40
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 f943 	bl	800419e <TIM_ITRx_SetConfig>
      break;
 8003f18:	e00c      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4619      	mov	r1, r3
 8003f24:	4610      	mov	r0, r2
 8003f26:	f000 f93a 	bl	800419e <TIM_ITRx_SetConfig>
      break;
 8003f2a:	e003      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f30:	e000      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
	...

08003fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a40      	ldr	r2, [pc, #256]	; (80040b4 <TIM_Base_SetConfig+0x114>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d013      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fbe:	d00f      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a3d      	ldr	r2, [pc, #244]	; (80040b8 <TIM_Base_SetConfig+0x118>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d00b      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a3c      	ldr	r2, [pc, #240]	; (80040bc <TIM_Base_SetConfig+0x11c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d007      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a3b      	ldr	r2, [pc, #236]	; (80040c0 <TIM_Base_SetConfig+0x120>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d003      	beq.n	8003fe0 <TIM_Base_SetConfig+0x40>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a3a      	ldr	r2, [pc, #232]	; (80040c4 <TIM_Base_SetConfig+0x124>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d108      	bne.n	8003ff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a2f      	ldr	r2, [pc, #188]	; (80040b4 <TIM_Base_SetConfig+0x114>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d02b      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004000:	d027      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a2c      	ldr	r2, [pc, #176]	; (80040b8 <TIM_Base_SetConfig+0x118>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d023      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a2b      	ldr	r2, [pc, #172]	; (80040bc <TIM_Base_SetConfig+0x11c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d01f      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a2a      	ldr	r2, [pc, #168]	; (80040c0 <TIM_Base_SetConfig+0x120>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d01b      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a29      	ldr	r2, [pc, #164]	; (80040c4 <TIM_Base_SetConfig+0x124>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d017      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a28      	ldr	r2, [pc, #160]	; (80040c8 <TIM_Base_SetConfig+0x128>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d013      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a27      	ldr	r2, [pc, #156]	; (80040cc <TIM_Base_SetConfig+0x12c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00f      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a26      	ldr	r2, [pc, #152]	; (80040d0 <TIM_Base_SetConfig+0x130>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00b      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a25      	ldr	r2, [pc, #148]	; (80040d4 <TIM_Base_SetConfig+0x134>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d007      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a24      	ldr	r2, [pc, #144]	; (80040d8 <TIM_Base_SetConfig+0x138>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d003      	beq.n	8004052 <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a23      	ldr	r2, [pc, #140]	; (80040dc <TIM_Base_SetConfig+0x13c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d108      	bne.n	8004064 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4313      	orrs	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a0a      	ldr	r2, [pc, #40]	; (80040b4 <TIM_Base_SetConfig+0x114>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d003      	beq.n	8004098 <TIM_Base_SetConfig+0xf8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a0c      	ldr	r2, [pc, #48]	; (80040c4 <TIM_Base_SetConfig+0x124>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d103      	bne.n	80040a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	615a      	str	r2, [r3, #20]
}
 80040a6:	bf00      	nop
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40010000 	.word	0x40010000
 80040b8:	40000400 	.word	0x40000400
 80040bc:	40000800 	.word	0x40000800
 80040c0:	40000c00 	.word	0x40000c00
 80040c4:	40010400 	.word	0x40010400
 80040c8:	40014000 	.word	0x40014000
 80040cc:	40014400 	.word	0x40014400
 80040d0:	40014800 	.word	0x40014800
 80040d4:	40001800 	.word	0x40001800
 80040d8:	40001c00 	.word	0x40001c00
 80040dc:	40002000 	.word	0x40002000

080040e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	f023 0201 	bic.w	r2, r3, #1
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800410a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	4313      	orrs	r3, r2
 8004114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f023 030a 	bic.w	r3, r3, #10
 800411c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4313      	orrs	r3, r2
 8004124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	621a      	str	r2, [r3, #32]
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800413e:	b480      	push	{r7}
 8004140:	b087      	sub	sp, #28
 8004142:	af00      	add	r7, sp, #0
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	f023 0210 	bic.w	r2, r3, #16
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004168:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	031b      	lsls	r3, r3, #12
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800417a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	621a      	str	r2, [r3, #32]
}
 8004192:	bf00      	nop
 8004194:	371c      	adds	r7, #28
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800419e:	b480      	push	{r7}
 80041a0:	b085      	sub	sp, #20
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f043 0307 	orr.w	r3, r3, #7
 80041c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	609a      	str	r2, [r3, #8]
}
 80041c8:	bf00      	nop
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	021a      	lsls	r2, r3, #8
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	609a      	str	r2, [r3, #8]
}
 8004208:	bf00      	nop
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004228:	2302      	movs	r3, #2
 800422a:	e05a      	b.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a21      	ldr	r2, [pc, #132]	; (80042f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d022      	beq.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004278:	d01d      	beq.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a1d      	ldr	r2, [pc, #116]	; (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d018      	beq.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1b      	ldr	r2, [pc, #108]	; (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d013      	beq.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1a      	ldr	r2, [pc, #104]	; (80042fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d00e      	beq.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a18      	ldr	r2, [pc, #96]	; (8004300 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d009      	beq.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a17      	ldr	r2, [pc, #92]	; (8004304 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d004      	beq.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a15      	ldr	r2, [pc, #84]	; (8004308 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d10c      	bne.n	80042d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40010000 	.word	0x40010000
 80042f4:	40000400 	.word	0x40000400
 80042f8:	40000800 	.word	0x40000800
 80042fc:	40000c00 	.word	0x40000c00
 8004300:	40010400 	.word	0x40010400
 8004304:	40014000 	.word	0x40014000
 8004308:	40001800 	.word	0x40001800

0800430c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004346:	2b84      	cmp	r3, #132	; 0x84
 8004348:	d005      	beq.n	8004356 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800434a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4413      	add	r3, r2
 8004352:	3303      	adds	r3, #3
 8004354:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004356:	68fb      	ldr	r3, [r7, #12]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004368:	f000 fae2 	bl	8004930 <vTaskStartScheduler>
  
  return osOK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	bd80      	pop	{r7, pc}

08004372 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004372:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004374:	b089      	sub	sp, #36	; 0x24
 8004376:	af04      	add	r7, sp, #16
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d020      	beq.n	80043c6 <osThreadCreate+0x54>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01c      	beq.n	80043c6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685c      	ldr	r4, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681d      	ldr	r5, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691e      	ldr	r6, [r3, #16]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff ffc8 	bl	8004334 <makeFreeRtosPriority>
 80043a4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043ae:	9202      	str	r2, [sp, #8]
 80043b0:	9301      	str	r3, [sp, #4]
 80043b2:	9100      	str	r1, [sp, #0]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	4632      	mov	r2, r6
 80043b8:	4629      	mov	r1, r5
 80043ba:	4620      	mov	r0, r4
 80043bc:	f000 f8d9 	bl	8004572 <xTaskCreateStatic>
 80043c0:	4603      	mov	r3, r0
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	e01c      	b.n	8004400 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685c      	ldr	r4, [r3, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043d2:	b29e      	uxth	r6, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff ffaa 	bl	8004334 <makeFreeRtosPriority>
 80043e0:	4602      	mov	r2, r0
 80043e2:	f107 030c 	add.w	r3, r7, #12
 80043e6:	9301      	str	r3, [sp, #4]
 80043e8:	9200      	str	r2, [sp, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	4632      	mov	r2, r6
 80043ee:	4629      	mov	r1, r5
 80043f0:	4620      	mov	r0, r4
 80043f2:	f000 f91b 	bl	800462c <xTaskCreate>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d001      	beq.n	8004400 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80043fc:	2300      	movs	r3, #0
 80043fe:	e000      	b.n	8004402 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004400:	68fb      	ldr	r3, [r7, #12]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800440a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f103 0208 	add.w	r2, r3, #8
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004422:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f103 0208 	add.w	r2, r3, #8
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f103 0208 	add.w	r2, r3, #8
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	601a      	str	r2, [r3, #0]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044c2:	d103      	bne.n	80044cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	e00c      	b.n	80044e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3308      	adds	r3, #8
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	e002      	b.n	80044da <vListInsert+0x2e>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d2f6      	bcs.n	80044d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	601a      	str	r2, [r3, #0]
}
 8004512:	bf00      	nop
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800451e:	b480      	push	{r7}
 8004520:	b085      	sub	sp, #20
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6892      	ldr	r2, [r2, #8]
 8004534:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6852      	ldr	r2, [r2, #4]
 800453e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	429a      	cmp	r2, r3
 8004548:	d103      	bne.n	8004552 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	1e5a      	subs	r2, r3, #1
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004572:	b580      	push	{r7, lr}
 8004574:	b08e      	sub	sp, #56	; 0x38
 8004576:	af04      	add	r7, sp, #16
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
 800457e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10a      	bne.n	800459c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004598:	bf00      	nop
 800459a:	e7fe      	b.n	800459a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800459c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10a      	bne.n	80045b8 <xTaskCreateStatic+0x46>
	__asm volatile
 80045a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	61fb      	str	r3, [r7, #28]
}
 80045b4:	bf00      	nop
 80045b6:	e7fe      	b.n	80045b6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80045b8:	23b4      	movs	r3, #180	; 0xb4
 80045ba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	2bb4      	cmp	r3, #180	; 0xb4
 80045c0:	d00a      	beq.n	80045d8 <xTaskCreateStatic+0x66>
	__asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	61bb      	str	r3, [r7, #24]
}
 80045d4:	bf00      	nop
 80045d6:	e7fe      	b.n	80045d6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80045d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80045da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01e      	beq.n	800461e <xTaskCreateStatic+0xac>
 80045e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d01b      	beq.n	800461e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80045f8:	2300      	movs	r3, #0
 80045fa:	9303      	str	r3, [sp, #12]
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	9302      	str	r3, [sp, #8]
 8004600:	f107 0314 	add.w	r3, r7, #20
 8004604:	9301      	str	r3, [sp, #4]
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	68b9      	ldr	r1, [r7, #8]
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 f851 	bl	80046b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004616:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004618:	f000 f8ec 	bl	80047f4 <prvAddNewTaskToReadyList>
 800461c:	e001      	b.n	8004622 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800461e:	2300      	movs	r3, #0
 8004620:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004622:	697b      	ldr	r3, [r7, #20]
	}
 8004624:	4618      	mov	r0, r3
 8004626:	3728      	adds	r7, #40	; 0x28
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08c      	sub	sp, #48	; 0x30
 8004630:	af04      	add	r7, sp, #16
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	4613      	mov	r3, r2
 800463a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800463c:	88fb      	ldrh	r3, [r7, #6]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4618      	mov	r0, r3
 8004642:	f001 f811 	bl	8005668 <pvPortMalloc>
 8004646:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00e      	beq.n	800466c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800464e:	20b4      	movs	r0, #180	; 0xb4
 8004650:	f001 f80a 	bl	8005668 <pvPortMalloc>
 8004654:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	631a      	str	r2, [r3, #48]	; 0x30
 8004662:	e005      	b.n	8004670 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004664:	6978      	ldr	r0, [r7, #20]
 8004666:	f001 f8cb 	bl	8005800 <vPortFree>
 800466a:	e001      	b.n	8004670 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800466c:	2300      	movs	r3, #0
 800466e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d017      	beq.n	80046a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800467e:	88fa      	ldrh	r2, [r7, #6]
 8004680:	2300      	movs	r3, #0
 8004682:	9303      	str	r3, [sp, #12]
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	9302      	str	r3, [sp, #8]
 8004688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468a:	9301      	str	r3, [sp, #4]
 800468c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	68b9      	ldr	r1, [r7, #8]
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f80f 	bl	80046b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800469a:	69f8      	ldr	r0, [r7, #28]
 800469c:	f000 f8aa 	bl	80047f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80046a0:	2301      	movs	r3, #1
 80046a2:	61bb      	str	r3, [r7, #24]
 80046a4:	e002      	b.n	80046ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80046a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80046ac:	69bb      	ldr	r3, [r7, #24]
	}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3720      	adds	r7, #32
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
	...

080046b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046d0:	3b01      	subs	r3, #1
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	f023 0307 	bic.w	r3, r3, #7
 80046de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <prvInitialiseNewTask+0x48>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	617b      	str	r3, [r7, #20]
}
 80046fc:	bf00      	nop
 80046fe:	e7fe      	b.n	80046fe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01f      	beq.n	8004746 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004706:	2300      	movs	r3, #0
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	e012      	b.n	8004732 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	4413      	add	r3, r2
 8004712:	7819      	ldrb	r1, [r3, #0]
 8004714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	4413      	add	r3, r2
 800471a:	3334      	adds	r3, #52	; 0x34
 800471c:	460a      	mov	r2, r1
 800471e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	4413      	add	r3, r2
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d006      	beq.n	800473a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	3301      	adds	r3, #1
 8004730:	61fb      	str	r3, [r7, #28]
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	2b0f      	cmp	r3, #15
 8004736:	d9e9      	bls.n	800470c <prvInitialiseNewTask+0x54>
 8004738:	e000      	b.n	800473c <prvInitialiseNewTask+0x84>
			{
				break;
 800473a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004744:	e003      	b.n	800474e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800474e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004750:	2b06      	cmp	r3, #6
 8004752:	d901      	bls.n	8004758 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004754:	2306      	movs	r3, #6
 8004756:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800475c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004760:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004762:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004766:	2200      	movs	r2, #0
 8004768:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	3304      	adds	r3, #4
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff fe6b 	bl	800444a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004776:	3318      	adds	r3, #24
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff fe66 	bl	800444a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800477e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004782:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004786:	f1c3 0207 	rsb	r2, r3, #7
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004792:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004796:	2200      	movs	r2, #0
 8004798:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800479c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	334c      	adds	r3, #76	; 0x4c
 80047a8:	2260      	movs	r2, #96	; 0x60
 80047aa:	2100      	movs	r1, #0
 80047ac:	4618      	mov	r0, r3
 80047ae:	f003 fafa 	bl	8007da6 <memset>
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	4a0c      	ldr	r2, [pc, #48]	; (80047e8 <prvInitialiseNewTask+0x130>)
 80047b6:	651a      	str	r2, [r3, #80]	; 0x50
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	4a0c      	ldr	r2, [pc, #48]	; (80047ec <prvInitialiseNewTask+0x134>)
 80047bc:	655a      	str	r2, [r3, #84]	; 0x54
 80047be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c0:	4a0b      	ldr	r2, [pc, #44]	; (80047f0 <prvInitialiseNewTask+0x138>)
 80047c2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	68f9      	ldr	r1, [r7, #12]
 80047c8:	69b8      	ldr	r0, [r7, #24]
 80047ca:	f000 fd3d 	bl	8005248 <pxPortInitialiseStack>
 80047ce:	4602      	mov	r2, r0
 80047d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80047d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047e0:	bf00      	nop
 80047e2:	3720      	adds	r7, #32
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	0800ad5c 	.word	0x0800ad5c
 80047ec:	0800ad7c 	.word	0x0800ad7c
 80047f0:	0800ad3c 	.word	0x0800ad3c

080047f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80047fc:	f000 fe52 	bl	80054a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004800:	4b2a      	ldr	r3, [pc, #168]	; (80048ac <prvAddNewTaskToReadyList+0xb8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3301      	adds	r3, #1
 8004806:	4a29      	ldr	r2, [pc, #164]	; (80048ac <prvAddNewTaskToReadyList+0xb8>)
 8004808:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800480a:	4b29      	ldr	r3, [pc, #164]	; (80048b0 <prvAddNewTaskToReadyList+0xbc>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d109      	bne.n	8004826 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004812:	4a27      	ldr	r2, [pc, #156]	; (80048b0 <prvAddNewTaskToReadyList+0xbc>)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004818:	4b24      	ldr	r3, [pc, #144]	; (80048ac <prvAddNewTaskToReadyList+0xb8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d110      	bne.n	8004842 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004820:	f000 facc 	bl	8004dbc <prvInitialiseTaskLists>
 8004824:	e00d      	b.n	8004842 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004826:	4b23      	ldr	r3, [pc, #140]	; (80048b4 <prvAddNewTaskToReadyList+0xc0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d109      	bne.n	8004842 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800482e:	4b20      	ldr	r3, [pc, #128]	; (80048b0 <prvAddNewTaskToReadyList+0xbc>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	429a      	cmp	r2, r3
 800483a:	d802      	bhi.n	8004842 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800483c:	4a1c      	ldr	r2, [pc, #112]	; (80048b0 <prvAddNewTaskToReadyList+0xbc>)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004842:	4b1d      	ldr	r3, [pc, #116]	; (80048b8 <prvAddNewTaskToReadyList+0xc4>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3301      	adds	r3, #1
 8004848:	4a1b      	ldr	r2, [pc, #108]	; (80048b8 <prvAddNewTaskToReadyList+0xc4>)
 800484a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	2201      	movs	r2, #1
 8004852:	409a      	lsls	r2, r3
 8004854:	4b19      	ldr	r3, [pc, #100]	; (80048bc <prvAddNewTaskToReadyList+0xc8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4313      	orrs	r3, r2
 800485a:	4a18      	ldr	r2, [pc, #96]	; (80048bc <prvAddNewTaskToReadyList+0xc8>)
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004862:	4613      	mov	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4a15      	ldr	r2, [pc, #84]	; (80048c0 <prvAddNewTaskToReadyList+0xcc>)
 800486c:	441a      	add	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3304      	adds	r3, #4
 8004872:	4619      	mov	r1, r3
 8004874:	4610      	mov	r0, r2
 8004876:	f7ff fdf5 	bl	8004464 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800487a:	f000 fe43 	bl	8005504 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800487e:	4b0d      	ldr	r3, [pc, #52]	; (80048b4 <prvAddNewTaskToReadyList+0xc0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00e      	beq.n	80048a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004886:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <prvAddNewTaskToReadyList+0xbc>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	429a      	cmp	r2, r3
 8004892:	d207      	bcs.n	80048a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004894:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <prvAddNewTaskToReadyList+0xd0>)
 8004896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048a4:	bf00      	nop
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	200006e0 	.word	0x200006e0
 80048b0:	200005e0 	.word	0x200005e0
 80048b4:	200006ec 	.word	0x200006ec
 80048b8:	200006fc 	.word	0x200006fc
 80048bc:	200006e8 	.word	0x200006e8
 80048c0:	200005e4 	.word	0x200005e4
 80048c4:	e000ed04 	.word	0xe000ed04

080048c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d017      	beq.n	800490a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80048da:	4b13      	ldr	r3, [pc, #76]	; (8004928 <vTaskDelay+0x60>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <vTaskDelay+0x30>
	__asm volatile
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	60bb      	str	r3, [r7, #8]
}
 80048f4:	bf00      	nop
 80048f6:	e7fe      	b.n	80048f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80048f8:	f000 f884 	bl	8004a04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048fc:	2100      	movs	r1, #0
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fc3c 	bl	800517c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004904:	f000 f88c 	bl	8004a20 <xTaskResumeAll>
 8004908:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d107      	bne.n	8004920 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004910:	4b06      	ldr	r3, [pc, #24]	; (800492c <vTaskDelay+0x64>)
 8004912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004920:	bf00      	nop
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	20000708 	.word	0x20000708
 800492c:	e000ed04 	.word	0xe000ed04

08004930 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08a      	sub	sp, #40	; 0x28
 8004934:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004936:	2300      	movs	r3, #0
 8004938:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800493a:	2300      	movs	r3, #0
 800493c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800493e:	463a      	mov	r2, r7
 8004940:	1d39      	adds	r1, r7, #4
 8004942:	f107 0308 	add.w	r3, r7, #8
 8004946:	4618      	mov	r0, r3
 8004948:	f7fc fc3e 	bl	80011c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800494c:	6839      	ldr	r1, [r7, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	9202      	str	r2, [sp, #8]
 8004954:	9301      	str	r3, [sp, #4]
 8004956:	2300      	movs	r3, #0
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	2300      	movs	r3, #0
 800495c:	460a      	mov	r2, r1
 800495e:	4921      	ldr	r1, [pc, #132]	; (80049e4 <vTaskStartScheduler+0xb4>)
 8004960:	4821      	ldr	r0, [pc, #132]	; (80049e8 <vTaskStartScheduler+0xb8>)
 8004962:	f7ff fe06 	bl	8004572 <xTaskCreateStatic>
 8004966:	4603      	mov	r3, r0
 8004968:	4a20      	ldr	r2, [pc, #128]	; (80049ec <vTaskStartScheduler+0xbc>)
 800496a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800496c:	4b1f      	ldr	r3, [pc, #124]	; (80049ec <vTaskStartScheduler+0xbc>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004974:	2301      	movs	r3, #1
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	e001      	b.n	800497e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d11b      	bne.n	80049bc <vTaskStartScheduler+0x8c>
	__asm volatile
 8004984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	613b      	str	r3, [r7, #16]
}
 8004996:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004998:	4b15      	ldr	r3, [pc, #84]	; (80049f0 <vTaskStartScheduler+0xc0>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	334c      	adds	r3, #76	; 0x4c
 800499e:	4a15      	ldr	r2, [pc, #84]	; (80049f4 <vTaskStartScheduler+0xc4>)
 80049a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049a2:	4b15      	ldr	r3, [pc, #84]	; (80049f8 <vTaskStartScheduler+0xc8>)
 80049a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049aa:	4b14      	ldr	r3, [pc, #80]	; (80049fc <vTaskStartScheduler+0xcc>)
 80049ac:	2201      	movs	r2, #1
 80049ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049b0:	4b13      	ldr	r3, [pc, #76]	; (8004a00 <vTaskStartScheduler+0xd0>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049b6:	f000 fcd3 	bl	8005360 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049ba:	e00e      	b.n	80049da <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049c2:	d10a      	bne.n	80049da <vTaskStartScheduler+0xaa>
	__asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	60fb      	str	r3, [r7, #12]
}
 80049d6:	bf00      	nop
 80049d8:	e7fe      	b.n	80049d8 <vTaskStartScheduler+0xa8>
}
 80049da:	bf00      	nop
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	0800ab34 	.word	0x0800ab34
 80049e8:	08004d8d 	.word	0x08004d8d
 80049ec:	20000704 	.word	0x20000704
 80049f0:	200005e0 	.word	0x200005e0
 80049f4:	20000010 	.word	0x20000010
 80049f8:	20000700 	.word	0x20000700
 80049fc:	200006ec 	.word	0x200006ec
 8004a00:	200006e4 	.word	0x200006e4

08004a04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004a08:	4b04      	ldr	r3, [pc, #16]	; (8004a1c <vTaskSuspendAll+0x18>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	4a03      	ldr	r2, [pc, #12]	; (8004a1c <vTaskSuspendAll+0x18>)
 8004a10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004a12:	bf00      	nop
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	20000708 	.word	0x20000708

08004a20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a2e:	4b41      	ldr	r3, [pc, #260]	; (8004b34 <xTaskResumeAll+0x114>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10a      	bne.n	8004a4c <xTaskResumeAll+0x2c>
	__asm volatile
 8004a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3a:	f383 8811 	msr	BASEPRI, r3
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	603b      	str	r3, [r7, #0]
}
 8004a48:	bf00      	nop
 8004a4a:	e7fe      	b.n	8004a4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a4c:	f000 fd2a 	bl	80054a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a50:	4b38      	ldr	r3, [pc, #224]	; (8004b34 <xTaskResumeAll+0x114>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	4a37      	ldr	r2, [pc, #220]	; (8004b34 <xTaskResumeAll+0x114>)
 8004a58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a5a:	4b36      	ldr	r3, [pc, #216]	; (8004b34 <xTaskResumeAll+0x114>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d161      	bne.n	8004b26 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a62:	4b35      	ldr	r3, [pc, #212]	; (8004b38 <xTaskResumeAll+0x118>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d05d      	beq.n	8004b26 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a6a:	e02e      	b.n	8004aca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a6c:	4b33      	ldr	r3, [pc, #204]	; (8004b3c <xTaskResumeAll+0x11c>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	3318      	adds	r3, #24
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff fd50 	bl	800451e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3304      	adds	r3, #4
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7ff fd4b 	bl	800451e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	409a      	lsls	r2, r3
 8004a90:	4b2b      	ldr	r3, [pc, #172]	; (8004b40 <xTaskResumeAll+0x120>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	4a2a      	ldr	r2, [pc, #168]	; (8004b40 <xTaskResumeAll+0x120>)
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4a27      	ldr	r2, [pc, #156]	; (8004b44 <xTaskResumeAll+0x124>)
 8004aa8:	441a      	add	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3304      	adds	r3, #4
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	f7ff fcd7 	bl	8004464 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aba:	4b23      	ldr	r3, [pc, #140]	; (8004b48 <xTaskResumeAll+0x128>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d302      	bcc.n	8004aca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004ac4:	4b21      	ldr	r3, [pc, #132]	; (8004b4c <xTaskResumeAll+0x12c>)
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004aca:	4b1c      	ldr	r3, [pc, #112]	; (8004b3c <xTaskResumeAll+0x11c>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1cc      	bne.n	8004a6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ad8:	f000 fa12 	bl	8004f00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004adc:	4b1c      	ldr	r3, [pc, #112]	; (8004b50 <xTaskResumeAll+0x130>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d010      	beq.n	8004b0a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ae8:	f000 f836 	bl	8004b58 <xTaskIncrementTick>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004af2:	4b16      	ldr	r3, [pc, #88]	; (8004b4c <xTaskResumeAll+0x12c>)
 8004af4:	2201      	movs	r2, #1
 8004af6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1f1      	bne.n	8004ae8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004b04:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <xTaskResumeAll+0x130>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b0a:	4b10      	ldr	r3, [pc, #64]	; (8004b4c <xTaskResumeAll+0x12c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d009      	beq.n	8004b26 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b12:	2301      	movs	r3, #1
 8004b14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b16:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <xTaskResumeAll+0x134>)
 8004b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b26:	f000 fced 	bl	8005504 <vPortExitCritical>

	return xAlreadyYielded;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	20000708 	.word	0x20000708
 8004b38:	200006e0 	.word	0x200006e0
 8004b3c:	200006a0 	.word	0x200006a0
 8004b40:	200006e8 	.word	0x200006e8
 8004b44:	200005e4 	.word	0x200005e4
 8004b48:	200005e0 	.word	0x200005e0
 8004b4c:	200006f4 	.word	0x200006f4
 8004b50:	200006f0 	.word	0x200006f0
 8004b54:	e000ed04 	.word	0xe000ed04

08004b58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b62:	4b4e      	ldr	r3, [pc, #312]	; (8004c9c <xTaskIncrementTick+0x144>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f040 808e 	bne.w	8004c88 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b6c:	4b4c      	ldr	r3, [pc, #304]	; (8004ca0 <xTaskIncrementTick+0x148>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3301      	adds	r3, #1
 8004b72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b74:	4a4a      	ldr	r2, [pc, #296]	; (8004ca0 <xTaskIncrementTick+0x148>)
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d120      	bne.n	8004bc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b80:	4b48      	ldr	r3, [pc, #288]	; (8004ca4 <xTaskIncrementTick+0x14c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <xTaskIncrementTick+0x48>
	__asm volatile
 8004b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	603b      	str	r3, [r7, #0]
}
 8004b9c:	bf00      	nop
 8004b9e:	e7fe      	b.n	8004b9e <xTaskIncrementTick+0x46>
 8004ba0:	4b40      	ldr	r3, [pc, #256]	; (8004ca4 <xTaskIncrementTick+0x14c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	60fb      	str	r3, [r7, #12]
 8004ba6:	4b40      	ldr	r3, [pc, #256]	; (8004ca8 <xTaskIncrementTick+0x150>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a3e      	ldr	r2, [pc, #248]	; (8004ca4 <xTaskIncrementTick+0x14c>)
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	4a3e      	ldr	r2, [pc, #248]	; (8004ca8 <xTaskIncrementTick+0x150>)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6013      	str	r3, [r2, #0]
 8004bb4:	4b3d      	ldr	r3, [pc, #244]	; (8004cac <xTaskIncrementTick+0x154>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	4a3c      	ldr	r2, [pc, #240]	; (8004cac <xTaskIncrementTick+0x154>)
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	f000 f99f 	bl	8004f00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bc2:	4b3b      	ldr	r3, [pc, #236]	; (8004cb0 <xTaskIncrementTick+0x158>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d348      	bcc.n	8004c5e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bcc:	4b35      	ldr	r3, [pc, #212]	; (8004ca4 <xTaskIncrementTick+0x14c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d104      	bne.n	8004be0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bd6:	4b36      	ldr	r3, [pc, #216]	; (8004cb0 <xTaskIncrementTick+0x158>)
 8004bd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bdc:	601a      	str	r2, [r3, #0]
					break;
 8004bde:	e03e      	b.n	8004c5e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004be0:	4b30      	ldr	r3, [pc, #192]	; (8004ca4 <xTaskIncrementTick+0x14c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d203      	bcs.n	8004c00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004bf8:	4a2d      	ldr	r2, [pc, #180]	; (8004cb0 <xTaskIncrementTick+0x158>)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004bfe:	e02e      	b.n	8004c5e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	3304      	adds	r3, #4
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff fc8a 	bl	800451e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d004      	beq.n	8004c1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	3318      	adds	r3, #24
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff fc81 	bl	800451e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	2201      	movs	r2, #1
 8004c22:	409a      	lsls	r2, r3
 8004c24:	4b23      	ldr	r3, [pc, #140]	; (8004cb4 <xTaskIncrementTick+0x15c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	4a22      	ldr	r2, [pc, #136]	; (8004cb4 <xTaskIncrementTick+0x15c>)
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4a1f      	ldr	r2, [pc, #124]	; (8004cb8 <xTaskIncrementTick+0x160>)
 8004c3c:	441a      	add	r2, r3
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	3304      	adds	r3, #4
 8004c42:	4619      	mov	r1, r3
 8004c44:	4610      	mov	r0, r2
 8004c46:	f7ff fc0d 	bl	8004464 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4e:	4b1b      	ldr	r3, [pc, #108]	; (8004cbc <xTaskIncrementTick+0x164>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d3b9      	bcc.n	8004bcc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c5c:	e7b6      	b.n	8004bcc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c5e:	4b17      	ldr	r3, [pc, #92]	; (8004cbc <xTaskIncrementTick+0x164>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c64:	4914      	ldr	r1, [pc, #80]	; (8004cb8 <xTaskIncrementTick+0x160>)
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	440b      	add	r3, r1
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d901      	bls.n	8004c7a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004c76:	2301      	movs	r3, #1
 8004c78:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004c7a:	4b11      	ldr	r3, [pc, #68]	; (8004cc0 <xTaskIncrementTick+0x168>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d007      	beq.n	8004c92 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004c82:	2301      	movs	r3, #1
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	e004      	b.n	8004c92 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004c88:	4b0e      	ldr	r3, [pc, #56]	; (8004cc4 <xTaskIncrementTick+0x16c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	4a0d      	ldr	r2, [pc, #52]	; (8004cc4 <xTaskIncrementTick+0x16c>)
 8004c90:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004c92:	697b      	ldr	r3, [r7, #20]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	20000708 	.word	0x20000708
 8004ca0:	200006e4 	.word	0x200006e4
 8004ca4:	20000698 	.word	0x20000698
 8004ca8:	2000069c 	.word	0x2000069c
 8004cac:	200006f8 	.word	0x200006f8
 8004cb0:	20000700 	.word	0x20000700
 8004cb4:	200006e8 	.word	0x200006e8
 8004cb8:	200005e4 	.word	0x200005e4
 8004cbc:	200005e0 	.word	0x200005e0
 8004cc0:	200006f4 	.word	0x200006f4
 8004cc4:	200006f0 	.word	0x200006f0

08004cc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004cce:	4b29      	ldr	r3, [pc, #164]	; (8004d74 <vTaskSwitchContext+0xac>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004cd6:	4b28      	ldr	r3, [pc, #160]	; (8004d78 <vTaskSwitchContext+0xb0>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004cdc:	e044      	b.n	8004d68 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004cde:	4b26      	ldr	r3, [pc, #152]	; (8004d78 <vTaskSwitchContext+0xb0>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ce4:	4b25      	ldr	r3, [pc, #148]	; (8004d7c <vTaskSwitchContext+0xb4>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	fab3 f383 	clz	r3, r3
 8004cf0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004cf2:	7afb      	ldrb	r3, [r7, #11]
 8004cf4:	f1c3 031f 	rsb	r3, r3, #31
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	4921      	ldr	r1, [pc, #132]	; (8004d80 <vTaskSwitchContext+0xb8>)
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	440b      	add	r3, r1
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10a      	bne.n	8004d24 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	607b      	str	r3, [r7, #4]
}
 8004d20:	bf00      	nop
 8004d22:	e7fe      	b.n	8004d22 <vTaskSwitchContext+0x5a>
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	4613      	mov	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4a14      	ldr	r2, [pc, #80]	; (8004d80 <vTaskSwitchContext+0xb8>)
 8004d30:	4413      	add	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	605a      	str	r2, [r3, #4]
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	3308      	adds	r3, #8
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d104      	bne.n	8004d54 <vTaskSwitchContext+0x8c>
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	605a      	str	r2, [r3, #4]
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	4a0a      	ldr	r2, [pc, #40]	; (8004d84 <vTaskSwitchContext+0xbc>)
 8004d5c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d5e:	4b09      	ldr	r3, [pc, #36]	; (8004d84 <vTaskSwitchContext+0xbc>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	334c      	adds	r3, #76	; 0x4c
 8004d64:	4a08      	ldr	r2, [pc, #32]	; (8004d88 <vTaskSwitchContext+0xc0>)
 8004d66:	6013      	str	r3, [r2, #0]
}
 8004d68:	bf00      	nop
 8004d6a:	371c      	adds	r7, #28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	20000708 	.word	0x20000708
 8004d78:	200006f4 	.word	0x200006f4
 8004d7c:	200006e8 	.word	0x200006e8
 8004d80:	200005e4 	.word	0x200005e4
 8004d84:	200005e0 	.word	0x200005e0
 8004d88:	20000010 	.word	0x20000010

08004d8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d94:	f000 f852 	bl	8004e3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d98:	4b06      	ldr	r3, [pc, #24]	; (8004db4 <prvIdleTask+0x28>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d9f9      	bls.n	8004d94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004da0:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <prvIdleTask+0x2c>)
 8004da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004db0:	e7f0      	b.n	8004d94 <prvIdleTask+0x8>
 8004db2:	bf00      	nop
 8004db4:	200005e4 	.word	0x200005e4
 8004db8:	e000ed04 	.word	0xe000ed04

08004dbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	607b      	str	r3, [r7, #4]
 8004dc6:	e00c      	b.n	8004de2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4a12      	ldr	r2, [pc, #72]	; (8004e1c <prvInitialiseTaskLists+0x60>)
 8004dd4:	4413      	add	r3, r2
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff fb17 	bl	800440a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3301      	adds	r3, #1
 8004de0:	607b      	str	r3, [r7, #4]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b06      	cmp	r3, #6
 8004de6:	d9ef      	bls.n	8004dc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004de8:	480d      	ldr	r0, [pc, #52]	; (8004e20 <prvInitialiseTaskLists+0x64>)
 8004dea:	f7ff fb0e 	bl	800440a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004dee:	480d      	ldr	r0, [pc, #52]	; (8004e24 <prvInitialiseTaskLists+0x68>)
 8004df0:	f7ff fb0b 	bl	800440a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004df4:	480c      	ldr	r0, [pc, #48]	; (8004e28 <prvInitialiseTaskLists+0x6c>)
 8004df6:	f7ff fb08 	bl	800440a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004dfa:	480c      	ldr	r0, [pc, #48]	; (8004e2c <prvInitialiseTaskLists+0x70>)
 8004dfc:	f7ff fb05 	bl	800440a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e00:	480b      	ldr	r0, [pc, #44]	; (8004e30 <prvInitialiseTaskLists+0x74>)
 8004e02:	f7ff fb02 	bl	800440a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e06:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <prvInitialiseTaskLists+0x78>)
 8004e08:	4a05      	ldr	r2, [pc, #20]	; (8004e20 <prvInitialiseTaskLists+0x64>)
 8004e0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e0c:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <prvInitialiseTaskLists+0x7c>)
 8004e0e:	4a05      	ldr	r2, [pc, #20]	; (8004e24 <prvInitialiseTaskLists+0x68>)
 8004e10:	601a      	str	r2, [r3, #0]
}
 8004e12:	bf00      	nop
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	200005e4 	.word	0x200005e4
 8004e20:	20000670 	.word	0x20000670
 8004e24:	20000684 	.word	0x20000684
 8004e28:	200006a0 	.word	0x200006a0
 8004e2c:	200006b4 	.word	0x200006b4
 8004e30:	200006cc 	.word	0x200006cc
 8004e34:	20000698 	.word	0x20000698
 8004e38:	2000069c 	.word	0x2000069c

08004e3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e42:	e019      	b.n	8004e78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e44:	f000 fb2e 	bl	80054a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e48:	4b10      	ldr	r3, [pc, #64]	; (8004e8c <prvCheckTasksWaitingTermination+0x50>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3304      	adds	r3, #4
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fb62 	bl	800451e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e5a:	4b0d      	ldr	r3, [pc, #52]	; (8004e90 <prvCheckTasksWaitingTermination+0x54>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	4a0b      	ldr	r2, [pc, #44]	; (8004e90 <prvCheckTasksWaitingTermination+0x54>)
 8004e62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e64:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <prvCheckTasksWaitingTermination+0x58>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	4a0a      	ldr	r2, [pc, #40]	; (8004e94 <prvCheckTasksWaitingTermination+0x58>)
 8004e6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e6e:	f000 fb49 	bl	8005504 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f810 	bl	8004e98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e78:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <prvCheckTasksWaitingTermination+0x58>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e1      	bne.n	8004e44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e80:	bf00      	nop
 8004e82:	bf00      	nop
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	200006b4 	.word	0x200006b4
 8004e90:	200006e0 	.word	0x200006e0
 8004e94:	200006c8 	.word	0x200006c8

08004e98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	334c      	adds	r3, #76	; 0x4c
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f003 fc93 	bl	80087d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d108      	bne.n	8004ec6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 fca1 	bl	8005800 <vPortFree>
				vPortFree( pxTCB );
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fc9e 	bl	8005800 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ec4:	e018      	b.n	8004ef8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d103      	bne.n	8004ed8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 fc95 	bl	8005800 <vPortFree>
	}
 8004ed6:	e00f      	b.n	8004ef8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d00a      	beq.n	8004ef8 <prvDeleteTCB+0x60>
	__asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	60fb      	str	r3, [r7, #12]
}
 8004ef4:	bf00      	nop
 8004ef6:	e7fe      	b.n	8004ef6 <prvDeleteTCB+0x5e>
	}
 8004ef8:	bf00      	nop
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f06:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <prvResetNextTaskUnblockTime+0x38>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d104      	bne.n	8004f1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f10:	4b0a      	ldr	r3, [pc, #40]	; (8004f3c <prvResetNextTaskUnblockTime+0x3c>)
 8004f12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f18:	e008      	b.n	8004f2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f1a:	4b07      	ldr	r3, [pc, #28]	; (8004f38 <prvResetNextTaskUnblockTime+0x38>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	4a04      	ldr	r2, [pc, #16]	; (8004f3c <prvResetNextTaskUnblockTime+0x3c>)
 8004f2a:	6013      	str	r3, [r2, #0]
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	20000698 	.word	0x20000698
 8004f3c:	20000700 	.word	0x20000700

08004f40 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8004f4e:	f000 faa9 	bl	80054a4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004f52:	4b29      	ldr	r3, [pc, #164]	; (8004ff8 <xTaskNotifyWait+0xb8>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d01c      	beq.n	8004f9a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004f60:	4b25      	ldr	r3, [pc, #148]	; (8004ff8 <xTaskNotifyWait+0xb8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	43d2      	mvns	r2, r2
 8004f6c:	400a      	ands	r2, r1
 8004f6e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004f72:	4b21      	ldr	r3, [pc, #132]	; (8004ff8 <xTaskNotifyWait+0xb8>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00b      	beq.n	8004f9a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f82:	2101      	movs	r1, #1
 8004f84:	6838      	ldr	r0, [r7, #0]
 8004f86:	f000 f8f9 	bl	800517c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004f8a:	4b1c      	ldr	r3, [pc, #112]	; (8004ffc <xTaskNotifyWait+0xbc>)
 8004f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004f9a:	f000 fab3 	bl	8005504 <vPortExitCritical>

		taskENTER_CRITICAL();
 8004f9e:	f000 fa81 	bl	80054a4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d005      	beq.n	8004fb4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004fa8:	4b13      	ldr	r3, [pc, #76]	; (8004ff8 <xTaskNotifyWait+0xb8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004fb4:	4b10      	ldr	r3, [pc, #64]	; (8004ff8 <xTaskNotifyWait+0xb8>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d002      	beq.n	8004fc8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	617b      	str	r3, [r7, #20]
 8004fc6:	e00a      	b.n	8004fde <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004fc8:	4b0b      	ldr	r3, [pc, #44]	; (8004ff8 <xTaskNotifyWait+0xb8>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	43d2      	mvns	r2, r2
 8004fd4:	400a      	ands	r2, r1
 8004fd6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fde:	4b06      	ldr	r3, [pc, #24]	; (8004ff8 <xTaskNotifyWait+0xb8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8004fe8:	f000 fa8c 	bl	8005504 <vPortExitCritical>

		return xReturn;
 8004fec:	697b      	ldr	r3, [r7, #20]
	}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	200005e0 	.word	0x200005e0
 8004ffc:	e000ed04 	.word	0xe000ed04

08005000 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08a      	sub	sp, #40	; 0x28
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	4613      	mov	r3, r2
 800500e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005010:	2301      	movs	r3, #1
 8005012:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10a      	bne.n	8005030 <xTaskGenericNotify+0x30>
	__asm volatile
 800501a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501e:	f383 8811 	msr	BASEPRI, r3
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	61bb      	str	r3, [r7, #24]
}
 800502c:	bf00      	nop
 800502e:	e7fe      	b.n	800502e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005034:	f000 fa36 	bl	80054a4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d004      	beq.n	8005048 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800504e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	2b04      	cmp	r3, #4
 800505c:	d82d      	bhi.n	80050ba <xTaskGenericNotify+0xba>
 800505e:	a201      	add	r2, pc, #4	; (adr r2, 8005064 <xTaskGenericNotify+0x64>)
 8005060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005064:	080050dd 	.word	0x080050dd
 8005068:	08005079 	.word	0x08005079
 800506c:	0800508b 	.word	0x0800508b
 8005070:	0800509b 	.word	0x0800509b
 8005074:	080050a5 	.word	0x080050a5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	431a      	orrs	r2, r3
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8005088:	e02b      	b.n	80050e2 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8005098:	e023      	b.n	80050e2 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80050a2:	e01e      	b.n	80050e2 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80050a4:	7ffb      	ldrb	r3, [r7, #31]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d004      	beq.n	80050b4 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80050b2:	e016      	b.n	80050e2 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 80050b4:	2300      	movs	r3, #0
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80050b8:	e013      	b.n	80050e2 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80050c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050c4:	d00c      	beq.n	80050e0 <xTaskGenericNotify+0xe0>
	__asm volatile
 80050c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	617b      	str	r3, [r7, #20]
}
 80050d8:	bf00      	nop
 80050da:	e7fe      	b.n	80050da <xTaskGenericNotify+0xda>
					break;
 80050dc:	bf00      	nop
 80050de:	e000      	b.n	80050e2 <xTaskGenericNotify+0xe2>

					break;
 80050e0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80050e2:	7ffb      	ldrb	r3, [r7, #31]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d139      	bne.n	800515c <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	3304      	adds	r3, #4
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff fa16 	bl	800451e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f6:	2201      	movs	r2, #1
 80050f8:	409a      	lsls	r2, r3
 80050fa:	4b1c      	ldr	r3, [pc, #112]	; (800516c <xTaskGenericNotify+0x16c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4313      	orrs	r3, r2
 8005100:	4a1a      	ldr	r2, [pc, #104]	; (800516c <xTaskGenericNotify+0x16c>)
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005108:	4613      	mov	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4a17      	ldr	r2, [pc, #92]	; (8005170 <xTaskGenericNotify+0x170>)
 8005112:	441a      	add	r2, r3
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	3304      	adds	r3, #4
 8005118:	4619      	mov	r1, r3
 800511a:	4610      	mov	r0, r2
 800511c:	f7ff f9a2 	bl	8004464 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <xTaskGenericNotify+0x13e>
	__asm volatile
 8005128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512c:	f383 8811 	msr	BASEPRI, r3
 8005130:	f3bf 8f6f 	isb	sy
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	613b      	str	r3, [r7, #16]
}
 800513a:	bf00      	nop
 800513c:	e7fe      	b.n	800513c <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005142:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <xTaskGenericNotify+0x174>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005148:	429a      	cmp	r2, r3
 800514a:	d907      	bls.n	800515c <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800514c:	4b0a      	ldr	r3, [pc, #40]	; (8005178 <xTaskGenericNotify+0x178>)
 800514e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800515c:	f000 f9d2 	bl	8005504 <vPortExitCritical>

		return xReturn;
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005162:	4618      	mov	r0, r3
 8005164:	3728      	adds	r7, #40	; 0x28
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	200006e8 	.word	0x200006e8
 8005170:	200005e4 	.word	0x200005e4
 8005174:	200005e0 	.word	0x200005e0
 8005178:	e000ed04 	.word	0xe000ed04

0800517c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005186:	4b29      	ldr	r3, [pc, #164]	; (800522c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800518c:	4b28      	ldr	r3, [pc, #160]	; (8005230 <prvAddCurrentTaskToDelayedList+0xb4>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3304      	adds	r3, #4
 8005192:	4618      	mov	r0, r3
 8005194:	f7ff f9c3 	bl	800451e <uxListRemove>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10b      	bne.n	80051b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800519e:	4b24      	ldr	r3, [pc, #144]	; (8005230 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	2201      	movs	r2, #1
 80051a6:	fa02 f303 	lsl.w	r3, r2, r3
 80051aa:	43da      	mvns	r2, r3
 80051ac:	4b21      	ldr	r3, [pc, #132]	; (8005234 <prvAddCurrentTaskToDelayedList+0xb8>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4013      	ands	r3, r2
 80051b2:	4a20      	ldr	r2, [pc, #128]	; (8005234 <prvAddCurrentTaskToDelayedList+0xb8>)
 80051b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051bc:	d10a      	bne.n	80051d4 <prvAddCurrentTaskToDelayedList+0x58>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d007      	beq.n	80051d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051c4:	4b1a      	ldr	r3, [pc, #104]	; (8005230 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3304      	adds	r3, #4
 80051ca:	4619      	mov	r1, r3
 80051cc:	481a      	ldr	r0, [pc, #104]	; (8005238 <prvAddCurrentTaskToDelayedList+0xbc>)
 80051ce:	f7ff f949 	bl	8004464 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051d2:	e026      	b.n	8005222 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4413      	add	r3, r2
 80051da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051dc:	4b14      	ldr	r3, [pc, #80]	; (8005230 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d209      	bcs.n	8005200 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051ec:	4b13      	ldr	r3, [pc, #76]	; (800523c <prvAddCurrentTaskToDelayedList+0xc0>)
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	4b0f      	ldr	r3, [pc, #60]	; (8005230 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3304      	adds	r3, #4
 80051f6:	4619      	mov	r1, r3
 80051f8:	4610      	mov	r0, r2
 80051fa:	f7ff f957 	bl	80044ac <vListInsert>
}
 80051fe:	e010      	b.n	8005222 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005200:	4b0f      	ldr	r3, [pc, #60]	; (8005240 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	4b0a      	ldr	r3, [pc, #40]	; (8005230 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3304      	adds	r3, #4
 800520a:	4619      	mov	r1, r3
 800520c:	4610      	mov	r0, r2
 800520e:	f7ff f94d 	bl	80044ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005212:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	429a      	cmp	r2, r3
 800521a:	d202      	bcs.n	8005222 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800521c:	4a09      	ldr	r2, [pc, #36]	; (8005244 <prvAddCurrentTaskToDelayedList+0xc8>)
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	6013      	str	r3, [r2, #0]
}
 8005222:	bf00      	nop
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	200006e4 	.word	0x200006e4
 8005230:	200005e0 	.word	0x200005e0
 8005234:	200006e8 	.word	0x200006e8
 8005238:	200006cc 	.word	0x200006cc
 800523c:	2000069c 	.word	0x2000069c
 8005240:	20000698 	.word	0x20000698
 8005244:	20000700 	.word	0x20000700

08005248 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	3b04      	subs	r3, #4
 8005258:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005260:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3b04      	subs	r3, #4
 8005266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f023 0201 	bic.w	r2, r3, #1
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3b04      	subs	r3, #4
 8005276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005278:	4a0c      	ldr	r2, [pc, #48]	; (80052ac <pxPortInitialiseStack+0x64>)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3b14      	subs	r3, #20
 8005282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3b04      	subs	r3, #4
 800528e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f06f 0202 	mvn.w	r2, #2
 8005296:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	3b20      	subs	r3, #32
 800529c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800529e:	68fb      	ldr	r3, [r7, #12]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	080052b1 	.word	0x080052b1

080052b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80052ba:	4b12      	ldr	r3, [pc, #72]	; (8005304 <prvTaskExitError+0x54>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052c2:	d00a      	beq.n	80052da <prvTaskExitError+0x2a>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	60fb      	str	r3, [r7, #12]
}
 80052d6:	bf00      	nop
 80052d8:	e7fe      	b.n	80052d8 <prvTaskExitError+0x28>
	__asm volatile
 80052da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052de:	f383 8811 	msr	BASEPRI, r3
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	60bb      	str	r3, [r7, #8]
}
 80052ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80052ee:	bf00      	nop
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0fc      	beq.n	80052f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80052f6:	bf00      	nop
 80052f8:	bf00      	nop
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	2000000c 	.word	0x2000000c
	...

08005310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005310:	4b07      	ldr	r3, [pc, #28]	; (8005330 <pxCurrentTCBConst2>)
 8005312:	6819      	ldr	r1, [r3, #0]
 8005314:	6808      	ldr	r0, [r1, #0]
 8005316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800531a:	f380 8809 	msr	PSP, r0
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f04f 0000 	mov.w	r0, #0
 8005326:	f380 8811 	msr	BASEPRI, r0
 800532a:	4770      	bx	lr
 800532c:	f3af 8000 	nop.w

08005330 <pxCurrentTCBConst2>:
 8005330:	200005e0 	.word	0x200005e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop

08005338 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005338:	4808      	ldr	r0, [pc, #32]	; (800535c <prvPortStartFirstTask+0x24>)
 800533a:	6800      	ldr	r0, [r0, #0]
 800533c:	6800      	ldr	r0, [r0, #0]
 800533e:	f380 8808 	msr	MSP, r0
 8005342:	f04f 0000 	mov.w	r0, #0
 8005346:	f380 8814 	msr	CONTROL, r0
 800534a:	b662      	cpsie	i
 800534c:	b661      	cpsie	f
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	df00      	svc	0
 8005358:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800535a:	bf00      	nop
 800535c:	e000ed08 	.word	0xe000ed08

08005360 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005366:	4b46      	ldr	r3, [pc, #280]	; (8005480 <xPortStartScheduler+0x120>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a46      	ldr	r2, [pc, #280]	; (8005484 <xPortStartScheduler+0x124>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d10a      	bne.n	8005386 <xPortStartScheduler+0x26>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	613b      	str	r3, [r7, #16]
}
 8005382:	bf00      	nop
 8005384:	e7fe      	b.n	8005384 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005386:	4b3e      	ldr	r3, [pc, #248]	; (8005480 <xPortStartScheduler+0x120>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a3f      	ldr	r2, [pc, #252]	; (8005488 <xPortStartScheduler+0x128>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d10a      	bne.n	80053a6 <xPortStartScheduler+0x46>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	60fb      	str	r3, [r7, #12]
}
 80053a2:	bf00      	nop
 80053a4:	e7fe      	b.n	80053a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053a6:	4b39      	ldr	r3, [pc, #228]	; (800548c <xPortStartScheduler+0x12c>)
 80053a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	22ff      	movs	r2, #255	; 0xff
 80053b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053c0:	78fb      	ldrb	r3, [r7, #3]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	4b31      	ldr	r3, [pc, #196]	; (8005490 <xPortStartScheduler+0x130>)
 80053cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80053ce:	4b31      	ldr	r3, [pc, #196]	; (8005494 <xPortStartScheduler+0x134>)
 80053d0:	2207      	movs	r2, #7
 80053d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053d4:	e009      	b.n	80053ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80053d6:	4b2f      	ldr	r3, [pc, #188]	; (8005494 <xPortStartScheduler+0x134>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3b01      	subs	r3, #1
 80053dc:	4a2d      	ldr	r2, [pc, #180]	; (8005494 <xPortStartScheduler+0x134>)
 80053de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053e0:	78fb      	ldrb	r3, [r7, #3]
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053ea:	78fb      	ldrb	r3, [r7, #3]
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f2:	2b80      	cmp	r3, #128	; 0x80
 80053f4:	d0ef      	beq.n	80053d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053f6:	4b27      	ldr	r3, [pc, #156]	; (8005494 <xPortStartScheduler+0x134>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f1c3 0307 	rsb	r3, r3, #7
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d00a      	beq.n	8005418 <xPortStartScheduler+0xb8>
	__asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	60bb      	str	r3, [r7, #8]
}
 8005414:	bf00      	nop
 8005416:	e7fe      	b.n	8005416 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005418:	4b1e      	ldr	r3, [pc, #120]	; (8005494 <xPortStartScheduler+0x134>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	021b      	lsls	r3, r3, #8
 800541e:	4a1d      	ldr	r2, [pc, #116]	; (8005494 <xPortStartScheduler+0x134>)
 8005420:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005422:	4b1c      	ldr	r3, [pc, #112]	; (8005494 <xPortStartScheduler+0x134>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800542a:	4a1a      	ldr	r2, [pc, #104]	; (8005494 <xPortStartScheduler+0x134>)
 800542c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	b2da      	uxtb	r2, r3
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005436:	4b18      	ldr	r3, [pc, #96]	; (8005498 <xPortStartScheduler+0x138>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a17      	ldr	r2, [pc, #92]	; (8005498 <xPortStartScheduler+0x138>)
 800543c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005440:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005442:	4b15      	ldr	r3, [pc, #84]	; (8005498 <xPortStartScheduler+0x138>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a14      	ldr	r2, [pc, #80]	; (8005498 <xPortStartScheduler+0x138>)
 8005448:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800544c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800544e:	f000 f8dd 	bl	800560c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005452:	4b12      	ldr	r3, [pc, #72]	; (800549c <xPortStartScheduler+0x13c>)
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005458:	f000 f8fc 	bl	8005654 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800545c:	4b10      	ldr	r3, [pc, #64]	; (80054a0 <xPortStartScheduler+0x140>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a0f      	ldr	r2, [pc, #60]	; (80054a0 <xPortStartScheduler+0x140>)
 8005462:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005466:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005468:	f7ff ff66 	bl	8005338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800546c:	f7ff fc2c 	bl	8004cc8 <vTaskSwitchContext>
	prvTaskExitError();
 8005470:	f7ff ff1e 	bl	80052b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	e000ed00 	.word	0xe000ed00
 8005484:	410fc271 	.word	0x410fc271
 8005488:	410fc270 	.word	0x410fc270
 800548c:	e000e400 	.word	0xe000e400
 8005490:	2000070c 	.word	0x2000070c
 8005494:	20000710 	.word	0x20000710
 8005498:	e000ed20 	.word	0xe000ed20
 800549c:	2000000c 	.word	0x2000000c
 80054a0:	e000ef34 	.word	0xe000ef34

080054a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	607b      	str	r3, [r7, #4]
}
 80054bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80054be:	4b0f      	ldr	r3, [pc, #60]	; (80054fc <vPortEnterCritical+0x58>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3301      	adds	r3, #1
 80054c4:	4a0d      	ldr	r2, [pc, #52]	; (80054fc <vPortEnterCritical+0x58>)
 80054c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80054c8:	4b0c      	ldr	r3, [pc, #48]	; (80054fc <vPortEnterCritical+0x58>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d10f      	bne.n	80054f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80054d0:	4b0b      	ldr	r3, [pc, #44]	; (8005500 <vPortEnterCritical+0x5c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	603b      	str	r3, [r7, #0]
}
 80054ec:	bf00      	nop
 80054ee:	e7fe      	b.n	80054ee <vPortEnterCritical+0x4a>
	}
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	2000000c 	.word	0x2000000c
 8005500:	e000ed04 	.word	0xe000ed04

08005504 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800550a:	4b12      	ldr	r3, [pc, #72]	; (8005554 <vPortExitCritical+0x50>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10a      	bne.n	8005528 <vPortExitCritical+0x24>
	__asm volatile
 8005512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	607b      	str	r3, [r7, #4]
}
 8005524:	bf00      	nop
 8005526:	e7fe      	b.n	8005526 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005528:	4b0a      	ldr	r3, [pc, #40]	; (8005554 <vPortExitCritical+0x50>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3b01      	subs	r3, #1
 800552e:	4a09      	ldr	r2, [pc, #36]	; (8005554 <vPortExitCritical+0x50>)
 8005530:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005532:	4b08      	ldr	r3, [pc, #32]	; (8005554 <vPortExitCritical+0x50>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d105      	bne.n	8005546 <vPortExitCritical+0x42>
 800553a:	2300      	movs	r3, #0
 800553c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005544:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	2000000c 	.word	0x2000000c
	...

08005560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005560:	f3ef 8009 	mrs	r0, PSP
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	4b15      	ldr	r3, [pc, #84]	; (80055c0 <pxCurrentTCBConst>)
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	f01e 0f10 	tst.w	lr, #16
 8005570:	bf08      	it	eq
 8005572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800557a:	6010      	str	r0, [r2, #0]
 800557c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005580:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005584:	f380 8811 	msr	BASEPRI, r0
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f7ff fb9a 	bl	8004cc8 <vTaskSwitchContext>
 8005594:	f04f 0000 	mov.w	r0, #0
 8005598:	f380 8811 	msr	BASEPRI, r0
 800559c:	bc09      	pop	{r0, r3}
 800559e:	6819      	ldr	r1, [r3, #0]
 80055a0:	6808      	ldr	r0, [r1, #0]
 80055a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a6:	f01e 0f10 	tst.w	lr, #16
 80055aa:	bf08      	it	eq
 80055ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80055b0:	f380 8809 	msr	PSP, r0
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	f3af 8000 	nop.w

080055c0 <pxCurrentTCBConst>:
 80055c0:	200005e0 	.word	0x200005e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80055c4:	bf00      	nop
 80055c6:	bf00      	nop

080055c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
	__asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	607b      	str	r3, [r7, #4]
}
 80055e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80055e2:	f7ff fab9 	bl	8004b58 <xTaskIncrementTick>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055ec:	4b06      	ldr	r3, [pc, #24]	; (8005608 <SysTick_Handler+0x40>)
 80055ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	2300      	movs	r3, #0
 80055f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	f383 8811 	msr	BASEPRI, r3
}
 80055fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005600:	bf00      	nop
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	e000ed04 	.word	0xe000ed04

0800560c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005610:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <vPortSetupTimerInterrupt+0x34>)
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005616:	4b0b      	ldr	r3, [pc, #44]	; (8005644 <vPortSetupTimerInterrupt+0x38>)
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800561c:	4b0a      	ldr	r3, [pc, #40]	; (8005648 <vPortSetupTimerInterrupt+0x3c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a0a      	ldr	r2, [pc, #40]	; (800564c <vPortSetupTimerInterrupt+0x40>)
 8005622:	fba2 2303 	umull	r2, r3, r2, r3
 8005626:	099b      	lsrs	r3, r3, #6
 8005628:	4a09      	ldr	r2, [pc, #36]	; (8005650 <vPortSetupTimerInterrupt+0x44>)
 800562a:	3b01      	subs	r3, #1
 800562c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800562e:	4b04      	ldr	r3, [pc, #16]	; (8005640 <vPortSetupTimerInterrupt+0x34>)
 8005630:	2207      	movs	r2, #7
 8005632:	601a      	str	r2, [r3, #0]
}
 8005634:	bf00      	nop
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	e000e010 	.word	0xe000e010
 8005644:	e000e018 	.word	0xe000e018
 8005648:	20000000 	.word	0x20000000
 800564c:	10624dd3 	.word	0x10624dd3
 8005650:	e000e014 	.word	0xe000e014

08005654 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005654:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005664 <vPortEnableVFP+0x10>
 8005658:	6801      	ldr	r1, [r0, #0]
 800565a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800565e:	6001      	str	r1, [r0, #0]
 8005660:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005662:	bf00      	nop
 8005664:	e000ed88 	.word	0xe000ed88

08005668 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08a      	sub	sp, #40	; 0x28
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005670:	2300      	movs	r3, #0
 8005672:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005674:	f7ff f9c6 	bl	8004a04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005678:	4b5b      	ldr	r3, [pc, #364]	; (80057e8 <pvPortMalloc+0x180>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005680:	f000 f920 	bl	80058c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005684:	4b59      	ldr	r3, [pc, #356]	; (80057ec <pvPortMalloc+0x184>)
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4013      	ands	r3, r2
 800568c:	2b00      	cmp	r3, #0
 800568e:	f040 8093 	bne.w	80057b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d01d      	beq.n	80056d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005698:	2208      	movs	r2, #8
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4413      	add	r3, r2
 800569e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d014      	beq.n	80056d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f023 0307 	bic.w	r3, r3, #7
 80056b0:	3308      	adds	r3, #8
 80056b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <pvPortMalloc+0x6c>
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	617b      	str	r3, [r7, #20]
}
 80056d0:	bf00      	nop
 80056d2:	e7fe      	b.n	80056d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d06e      	beq.n	80057b8 <pvPortMalloc+0x150>
 80056da:	4b45      	ldr	r3, [pc, #276]	; (80057f0 <pvPortMalloc+0x188>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d869      	bhi.n	80057b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80056e4:	4b43      	ldr	r3, [pc, #268]	; (80057f4 <pvPortMalloc+0x18c>)
 80056e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80056e8:	4b42      	ldr	r3, [pc, #264]	; (80057f4 <pvPortMalloc+0x18c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056ee:	e004      	b.n	80056fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	429a      	cmp	r2, r3
 8005702:	d903      	bls.n	800570c <pvPortMalloc+0xa4>
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1f1      	bne.n	80056f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800570c:	4b36      	ldr	r3, [pc, #216]	; (80057e8 <pvPortMalloc+0x180>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005712:	429a      	cmp	r2, r3
 8005714:	d050      	beq.n	80057b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2208      	movs	r2, #8
 800571c:	4413      	add	r3, r2
 800571e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	1ad2      	subs	r2, r2, r3
 8005730:	2308      	movs	r3, #8
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	429a      	cmp	r2, r3
 8005736:	d91f      	bls.n	8005778 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4413      	add	r3, r2
 800573e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <pvPortMalloc+0xf8>
	__asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	613b      	str	r3, [r7, #16]
}
 800575c:	bf00      	nop
 800575e:	e7fe      	b.n	800575e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	1ad2      	subs	r2, r2, r3
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005772:	69b8      	ldr	r0, [r7, #24]
 8005774:	f000 f908 	bl	8005988 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005778:	4b1d      	ldr	r3, [pc, #116]	; (80057f0 <pvPortMalloc+0x188>)
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	4a1b      	ldr	r2, [pc, #108]	; (80057f0 <pvPortMalloc+0x188>)
 8005784:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005786:	4b1a      	ldr	r3, [pc, #104]	; (80057f0 <pvPortMalloc+0x188>)
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	4b1b      	ldr	r3, [pc, #108]	; (80057f8 <pvPortMalloc+0x190>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	429a      	cmp	r2, r3
 8005790:	d203      	bcs.n	800579a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005792:	4b17      	ldr	r3, [pc, #92]	; (80057f0 <pvPortMalloc+0x188>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a18      	ldr	r2, [pc, #96]	; (80057f8 <pvPortMalloc+0x190>)
 8005798:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	4b13      	ldr	r3, [pc, #76]	; (80057ec <pvPortMalloc+0x184>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	431a      	orrs	r2, r3
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	2200      	movs	r2, #0
 80057ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80057ae:	4b13      	ldr	r3, [pc, #76]	; (80057fc <pvPortMalloc+0x194>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3301      	adds	r3, #1
 80057b4:	4a11      	ldr	r2, [pc, #68]	; (80057fc <pvPortMalloc+0x194>)
 80057b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80057b8:	f7ff f932 	bl	8004a20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00a      	beq.n	80057dc <pvPortMalloc+0x174>
	__asm volatile
 80057c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ca:	f383 8811 	msr	BASEPRI, r3
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	60fb      	str	r3, [r7, #12]
}
 80057d8:	bf00      	nop
 80057da:	e7fe      	b.n	80057da <pvPortMalloc+0x172>
	return pvReturn;
 80057dc:	69fb      	ldr	r3, [r7, #28]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3728      	adds	r7, #40	; 0x28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	2000431c 	.word	0x2000431c
 80057ec:	20004330 	.word	0x20004330
 80057f0:	20004320 	.word	0x20004320
 80057f4:	20004314 	.word	0x20004314
 80057f8:	20004324 	.word	0x20004324
 80057fc:	20004328 	.word	0x20004328

08005800 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d04d      	beq.n	80058ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005812:	2308      	movs	r3, #8
 8005814:	425b      	negs	r3, r3
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4413      	add	r3, r2
 800581a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	4b24      	ldr	r3, [pc, #144]	; (80058b8 <vPortFree+0xb8>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4013      	ands	r3, r2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10a      	bne.n	8005844 <vPortFree+0x44>
	__asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	60fb      	str	r3, [r7, #12]
}
 8005840:	bf00      	nop
 8005842:	e7fe      	b.n	8005842 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00a      	beq.n	8005862 <vPortFree+0x62>
	__asm volatile
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	60bb      	str	r3, [r7, #8]
}
 800585e:	bf00      	nop
 8005860:	e7fe      	b.n	8005860 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	4b14      	ldr	r3, [pc, #80]	; (80058b8 <vPortFree+0xb8>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4013      	ands	r3, r2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01e      	beq.n	80058ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d11a      	bne.n	80058ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	4b0e      	ldr	r3, [pc, #56]	; (80058b8 <vPortFree+0xb8>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	43db      	mvns	r3, r3
 8005882:	401a      	ands	r2, r3
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005888:	f7ff f8bc 	bl	8004a04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	4b0a      	ldr	r3, [pc, #40]	; (80058bc <vPortFree+0xbc>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4413      	add	r3, r2
 8005896:	4a09      	ldr	r2, [pc, #36]	; (80058bc <vPortFree+0xbc>)
 8005898:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800589a:	6938      	ldr	r0, [r7, #16]
 800589c:	f000 f874 	bl	8005988 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80058a0:	4b07      	ldr	r3, [pc, #28]	; (80058c0 <vPortFree+0xc0>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3301      	adds	r3, #1
 80058a6:	4a06      	ldr	r2, [pc, #24]	; (80058c0 <vPortFree+0xc0>)
 80058a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80058aa:	f7ff f8b9 	bl	8004a20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058ae:	bf00      	nop
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20004330 	.word	0x20004330
 80058bc:	20004320 	.word	0x20004320
 80058c0:	2000432c 	.word	0x2000432c

080058c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80058ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80058ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80058d0:	4b27      	ldr	r3, [pc, #156]	; (8005970 <prvHeapInit+0xac>)
 80058d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00c      	beq.n	80058f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3307      	adds	r3, #7
 80058e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0307 	bic.w	r3, r3, #7
 80058ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	4a1f      	ldr	r2, [pc, #124]	; (8005970 <prvHeapInit+0xac>)
 80058f4:	4413      	add	r3, r2
 80058f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058fc:	4a1d      	ldr	r2, [pc, #116]	; (8005974 <prvHeapInit+0xb0>)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005902:	4b1c      	ldr	r3, [pc, #112]	; (8005974 <prvHeapInit+0xb0>)
 8005904:	2200      	movs	r2, #0
 8005906:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	4413      	add	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005910:	2208      	movs	r2, #8
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	1a9b      	subs	r3, r3, r2
 8005916:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0307 	bic.w	r3, r3, #7
 800591e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4a15      	ldr	r2, [pc, #84]	; (8005978 <prvHeapInit+0xb4>)
 8005924:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005926:	4b14      	ldr	r3, [pc, #80]	; (8005978 <prvHeapInit+0xb4>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2200      	movs	r2, #0
 800592c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800592e:	4b12      	ldr	r3, [pc, #72]	; (8005978 <prvHeapInit+0xb4>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	1ad2      	subs	r2, r2, r3
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005944:	4b0c      	ldr	r3, [pc, #48]	; (8005978 <prvHeapInit+0xb4>)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	4a0a      	ldr	r2, [pc, #40]	; (800597c <prvHeapInit+0xb8>)
 8005952:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	4a09      	ldr	r2, [pc, #36]	; (8005980 <prvHeapInit+0xbc>)
 800595a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800595c:	4b09      	ldr	r3, [pc, #36]	; (8005984 <prvHeapInit+0xc0>)
 800595e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005962:	601a      	str	r2, [r3, #0]
}
 8005964:	bf00      	nop
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	20000714 	.word	0x20000714
 8005974:	20004314 	.word	0x20004314
 8005978:	2000431c 	.word	0x2000431c
 800597c:	20004324 	.word	0x20004324
 8005980:	20004320 	.word	0x20004320
 8005984:	20004330 	.word	0x20004330

08005988 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005990:	4b28      	ldr	r3, [pc, #160]	; (8005a34 <prvInsertBlockIntoFreeList+0xac>)
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	e002      	b.n	800599c <prvInsertBlockIntoFreeList+0x14>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d8f7      	bhi.n	8005996 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	4413      	add	r3, r2
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d108      	bne.n	80059ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	441a      	add	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	441a      	add	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d118      	bne.n	8005a10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	4b15      	ldr	r3, [pc, #84]	; (8005a38 <prvInsertBlockIntoFreeList+0xb0>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d00d      	beq.n	8005a06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	441a      	add	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	e008      	b.n	8005a18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a06:	4b0c      	ldr	r3, [pc, #48]	; (8005a38 <prvInsertBlockIntoFreeList+0xb0>)
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	e003      	b.n	8005a18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d002      	beq.n	8005a26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a26:	bf00      	nop
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	20004314 	.word	0x20004314
 8005a38:	2000431c 	.word	0x2000431c

08005a3c <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b08f      	sub	sp, #60	; 0x3c
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	891a      	ldrh	r2, [r3, #8]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	8a1b      	ldrh	r3, [r3, #16]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d301      	bcc.n	8005a56 <load_descriptor_values+0x1a>
        return false;
 8005a52:	2300      	movs	r3, #0
 8005a54:	e156      	b.n	8005d04 <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	895b      	ldrh	r3, [r3, #10]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 8005a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6a:	0a1b      	lsrs	r3, r3, #8
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 8005a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a74:	f003 0303 	and.w	r3, r3, #3
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d05a      	beq.n	8005b32 <load_descriptor_values+0xf6>
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	f200 8094 	bhi.w	8005baa <load_descriptor_values+0x16e>
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <load_descriptor_values+0x50>
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d01f      	beq.n	8005aca <load_descriptor_values+0x8e>
 8005a8a:	e08e      	b.n	8005baa <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 8005a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a94:	089b      	lsrs	r3, r3, #2
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa4:	0e1b      	lsrs	r3, r3, #24
 8005aa6:	b25b      	sxtb	r3, r3
 8005aa8:	f003 030f 	and.w	r3, r3, #15
 8005aac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = (word0 >> 16) & 0xFF;
 8005ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab2:	0c1b      	lsrs	r3, r3, #16
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 8005ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aba:	0f1b      	lsrs	r3, r3, #28
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	825a      	strh	r2, [r3, #18]
            break;
 8005ac8:	e0b4      	b.n	8005c34 <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	895b      	ldrh	r3, [r3, #10]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 8005ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae0:	0c1b      	lsrs	r3, r3, #16
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 8005aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af0:	089b      	lsrs	r3, r3, #2
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	0f1b      	lsrs	r3, r3, #28
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	019b      	lsls	r3, r3, #6
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	4313      	orrs	r3, r2
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 8005b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0e:	0f1b      	lsrs	r3, r3, #28
 8005b10:	b25b      	sxtb	r3, r3
 8005b12:	f003 030f 	and.w	r3, r3, #15
 8005b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word1 & 0xFFFF;
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	0c1b      	lsrs	r3, r3, #16
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	825a      	strh	r2, [r3, #18]
            break;
 8005b30:	e080      	b.n	8005c34 <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	895b      	ldrh	r3, [r3, #10]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	62bb      	str	r3, [r7, #40]	; 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	895b      	ldrh	r3, [r3, #10]
 8005b50:	3302      	adds	r3, #2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	895b      	ldrh	r3, [r3, #10]
 8005b64:	3303      	adds	r3, #3
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 8005b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b70:	0c1b      	lsrs	r3, r3, #16
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8005b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7a:	089b      	lsrs	r3, r3, #2
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b86:	0a1b      	lsrs	r3, r3, #8
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	019b      	lsls	r3, r3, #6
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	825a      	strh	r2, [r3, #18]
            break;
 8005ba8:	e044      	b.n	8005c34 <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	895b      	ldrh	r3, [r3, #10]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	895b      	ldrh	r3, [r3, #10]
 8005bc8:	3302      	adds	r3, #2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	895b      	ldrh	r3, [r3, #10]
 8005bdc:	3303      	adds	r3, #3
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	895b      	ldrh	r3, [r3, #10]
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	089b      	lsrs	r3, r3, #2
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	0a1b      	lsrs	r3, r3, #8
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	019b      	lsls	r3, r3, #6
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	825a      	strh	r2, [r3, #18]
            break;
 8005c32:	bf00      	nop
        }
    }

    if (!iter->message)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d106      	bne.n	8005c4a <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	621a      	str	r2, [r3, #32]
 8005c48:	e041      	b.n	8005cce <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c50:	441a      	add	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	619a      	str	r2, [r3, #24]

        if (size_offset)
 8005c56:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d008      	beq.n	8005c70 <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005c66:	425b      	negs	r3, r3
 8005c68:	441a      	add	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	621a      	str	r2, [r3, #32]
 8005c6e:	e01a      	b.n	8005ca6 <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	7d9b      	ldrb	r3, [r3, #22]
 8005c74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c78:	2b20      	cmp	r3, #32
 8005c7a:	d111      	bne.n	8005ca0 <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	7d9b      	ldrb	r3, [r3, #22]
 8005c80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d005      	beq.n	8005c94 <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	7d9b      	ldrb	r3, [r3, #22]
 8005c8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8005c90:	2b80      	cmp	r3, #128	; 0x80
 8005c92:	d105      	bne.n	8005ca0 <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f103 0214 	add.w	r2, r3, #20
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	621a      	str	r2, [r3, #32]
 8005c9e:	e002      	b.n	8005ca6 <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	7d9b      	ldrb	r3, [r3, #22]
 8005caa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005cae:	2b80      	cmp	r3, #128	; 0x80
 8005cb0:	d109      	bne.n	8005cc6 <load_descriptor_values+0x28a>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d005      	beq.n	8005cc6 <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	61da      	str	r2, [r3, #28]
 8005cc4:	e003      	b.n	8005cce <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	699a      	ldr	r2, [r3, #24]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	7d9b      	ldrb	r3, [r3, #22]
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	2b08      	cmp	r3, #8
 8005cd8:	d005      	beq.n	8005ce6 <load_descriptor_values+0x2aa>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	7d9b      	ldrb	r3, [r3, #22]
 8005cde:	f003 030f 	and.w	r3, r3, #15
 8005ce2:	2b09      	cmp	r3, #9
 8005ce4:	d10a      	bne.n	8005cfc <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	89db      	ldrh	r3, [r3, #14]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	625a      	str	r2, [r3, #36]	; 0x24
 8005cfa:	e002      	b.n	8005d02 <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return true;
 8005d02:	2301      	movs	r3, #1
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	373c      	adds	r7, #60	; 0x3c
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
    iter->index++;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	891b      	ldrh	r3, [r3, #8]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	891a      	ldrh	r2, [r3, #8]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	8a1b      	ldrh	r3, [r3, #16]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d30c      	bcc.n	8005d4c <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 8005d4a:	e03c      	b.n	8005dc6 <advance_iterator+0xb6>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	895b      	ldrh	r3, [r3, #10]
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	0a1b      	lsrs	r3, r3, #8
 8005d62:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f003 0303 	and.w	r3, r3, #3
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d70:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	895a      	ldrh	r2, [r3, #10]
 8005d76:	893b      	ldrh	r3, [r7, #8]
 8005d78:	4413      	add	r3, r2
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	899a      	ldrh	r2, [r3, #12]
 8005d84:	7afb      	ldrb	r3, [r7, #11]
 8005d86:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	bf0c      	ite	eq
 8005d8e:	2301      	moveq	r3, #1
 8005d90:	2300      	movne	r3, #0
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	4413      	add	r3, r2
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	89da      	ldrh	r2, [r3, #14]
 8005da2:	7afb      	ldrb	r3, [r7, #11]
 8005da4:	f003 030f 	and.w	r3, r3, #15
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d004      	beq.n	8005db6 <advance_iterator+0xa6>
 8005dac:	7afb      	ldrb	r3, [r7, #11]
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	2b09      	cmp	r3, #9
 8005db4:	d101      	bne.n	8005dba <advance_iterator+0xaa>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e000      	b.n	8005dbc <advance_iterator+0xac>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	4413      	add	r3, r2
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	81da      	strh	r2, [r3, #14]
}
 8005dc6:	bf00      	nop
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 8005dde:	2228      	movs	r2, #40	; 0x28
 8005de0:	2100      	movs	r1, #0
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f001 ffdf 	bl	8007da6 <memset>

    iter->descriptor = desc;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	601a      	str	r2, [r3, #0]
    iter->message = message;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f7ff fe21 	bl	8005a3c <load_descriptor_values>
 8005dfa:	4603      	mov	r3, r0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	0a1b      	lsrs	r3, r3, #8
 8005e22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e26:	2b80      	cmp	r3, #128	; 0x80
 8005e28:	d109      	bne.n	8005e3e <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	461a      	mov	r2, r3
 8005e30:	6939      	ldr	r1, [r7, #16]
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7ff ffcd 	bl	8005dd2 <pb_field_iter_begin>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	75fb      	strb	r3, [r7, #23]
 8005e3c:	e008      	b.n	8005e50 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	461a      	mov	r2, r3
 8005e44:	6939      	ldr	r1, [r7, #16]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7ff ffc3 	bl	8005dd2 <pb_field_iter_begin>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	f103 020c 	add.w	r2, r3, #12
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	621a      	str	r2, [r3, #32]
    return status;
 8005e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3718      	adds	r7, #24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff ff4f 	bl	8005d10 <advance_iterator>
    (void)load_descriptor_values(iter);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7ff fde2 	bl	8005a3c <load_descriptor_values>
    return iter->index != 0;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	891b      	ldrh	r3, [r3, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	bf14      	ite	ne
 8005e80:	2301      	movne	r3, #1
 8005e82:	2300      	moveq	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	8a1b      	ldrh	r3, [r3, #16]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d101      	bne.n	8005ea8 <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e044      	b.n	8005f32 <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	8a9b      	ldrh	r3, [r3, #20]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d901      	bls.n	8005eba <pb_field_iter_find+0x2c>
    {
        return false;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	e03b      	b.n	8005f32 <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	891b      	ldrh	r3, [r3, #8]
 8005ebe:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	8a1b      	ldrh	r3, [r3, #16]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d204      	bcs.n	8005ed6 <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	8a1a      	ldrh	r2, [r3, #16]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7ff ff1a 	bl	8005d10 <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	895b      	ldrh	r3, [r3, #10]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	089a      	lsrs	r2, r3, #2
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	4053      	eors	r3, r2
 8005ef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d110      	bne.n	8005f20 <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7ff fd9c 	bl	8005a3c <load_descriptor_values>

                if (iter->tag == tag &&
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	8a1b      	ldrh	r3, [r3, #16]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d107      	bne.n	8005f20 <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	7d9b      	ldrb	r3, [r3, #22]
 8005f14:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 8005f18:	2b0a      	cmp	r3, #10
 8005f1a:	d001      	beq.n	8005f20 <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e008      	b.n	8005f32 <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	891b      	ldrh	r3, [r3, #8]
 8005f24:	89fa      	ldrh	r2, [r7, #14]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d1d5      	bne.n	8005ed6 <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7ff fd86 	bl	8005a3c <load_descriptor_values>
        return false;
 8005f30:	2300      	movs	r3, #0
    }
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b084      	sub	sp, #16
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	7d9b      	ldrb	r3, [r3, #22]
 8005f46:	f003 030f 	and.w	r3, r3, #15
 8005f4a:	2b0a      	cmp	r3, #10
 8005f4c:	d101      	bne.n	8005f52 <pb_field_iter_find_extension+0x18>
    {
        return true;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e022      	b.n	8005f98 <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	891b      	ldrh	r3, [r3, #8]
 8005f56:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7ff fed9 	bl	8005d10 <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	895b      	ldrh	r3, [r3, #10]
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	0a1b      	lsrs	r3, r3, #8
 8005f74:	f003 030f 	and.w	r3, r3, #15
 8005f78:	2b0a      	cmp	r3, #10
 8005f7a:	d104      	bne.n	8005f86 <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff fd5d 	bl	8005a3c <load_descriptor_values>
 8005f82:	4603      	mov	r3, r0
 8005f84:	e008      	b.n	8005f98 <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	891b      	ldrh	r3, [r3, #8]
 8005f8a:	89fa      	ldrh	r2, [r7, #14]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d1e3      	bne.n	8005f58 <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7ff fd53 	bl	8005a3c <load_descriptor_values>
        return false;
 8005f96:	2300      	movs	r3, #0
    }
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	441a      	add	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d004      	beq.n	8005fce <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6979      	ldr	r1, [r7, #20]
 8005fc8:	68b8      	ldr	r0, [r7, #8]
 8005fca:	f001 fede 	bl	8007d8a <memcpy>
    }
    
    return true;
 8005fce:	2301      	movs	r3, #1
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b088      	sub	sp, #32
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
    if (count == 0)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <pb_read+0x16>
        return true;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e05f      	b.n	80060ae <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d123      	bne.n	800603c <pb_read+0x64>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a2f      	ldr	r2, [pc, #188]	; (80060b8 <pb_read+0xe0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d01e      	beq.n	800603c <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 8005ffe:	e011      	b.n	8006024 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 8006000:	f107 0310 	add.w	r3, r7, #16
 8006004:	2210      	movs	r2, #16
 8006006:	4619      	mov	r1, r3
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f7ff ffe5 	bl	8005fd8 <pb_read>
 800600e:	4603      	mov	r3, r0
 8006010:	f083 0301 	eor.w	r3, r3, #1
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <pb_read+0x46>
				return false;
 800601a:	2300      	movs	r3, #0
 800601c:	e047      	b.n	80060ae <pb_read+0xd6>
			
			count -= 16;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3b10      	subs	r3, #16
 8006022:	607b      	str	r3, [r7, #4]
		while (count > 16)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b10      	cmp	r3, #16
 8006028:	d8ea      	bhi.n	8006000 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 800602a:	f107 0310 	add.w	r3, r7, #16
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	4619      	mov	r1, r3
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f7ff ffd0 	bl	8005fd8 <pb_read>
 8006038:	4603      	mov	r3, r0
 800603a:	e038      	b.n	80060ae <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	429a      	cmp	r2, r3
 8006044:	d90b      	bls.n	800605e <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <pb_read+0x7c>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	e000      	b.n	8006056 <pb_read+0x7e>
 8006054:	4b19      	ldr	r3, [pc, #100]	; (80060bc <pb_read+0xe4>)
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	60d3      	str	r3, [r2, #12]
 800605a:	2300      	movs	r3, #0
 800605c:	e027      	b.n	80060ae <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	68b9      	ldr	r1, [r7, #8]
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	4798      	blx	r3
 800606a:	4603      	mov	r3, r0
 800606c:	f083 0301 	eor.w	r3, r3, #1
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00b      	beq.n	800608e <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d002      	beq.n	8006084 <pb_read+0xac>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	e000      	b.n	8006086 <pb_read+0xae>
 8006084:	4b0e      	ldr	r3, [pc, #56]	; (80060c0 <pb_read+0xe8>)
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	60d3      	str	r3, [r2, #12]
 800608a:	2300      	movs	r3, #0
 800608c:	e00f      	b.n	80060ae <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	429a      	cmp	r2, r3
 8006096:	d903      	bls.n	80060a0 <pb_read+0xc8>
        stream->bytes_left = 0;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	609a      	str	r2, [r3, #8]
 800609e:	e005      	b.n	80060ac <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	1ad2      	subs	r2, r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	609a      	str	r2, [r3, #8]

    return true;
 80060ac:	2301      	movs	r3, #1
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3720      	adds	r7, #32
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	08005fa1 	.word	0x08005fa1
 80060bc:	0800ab3c 	.word	0x0800ab3c
 80060c0:	0800ab4c 	.word	0x0800ab4c

080060c4 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10b      	bne.n	80060ee <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d002      	beq.n	80060e4 <pb_readbyte+0x20>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	e000      	b.n	80060e6 <pb_readbyte+0x22>
 80060e4:	4b13      	ldr	r3, [pc, #76]	; (8006134 <pb_readbyte+0x70>)
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	60d3      	str	r3, [r2, #12]
 80060ea:	2300      	movs	r3, #0
 80060ec:	e01d      	b.n	800612a <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2201      	movs	r2, #1
 80060f4:	6839      	ldr	r1, [r7, #0]
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	4798      	blx	r3
 80060fa:	4603      	mov	r3, r0
 80060fc:	f083 0301 	eor.w	r3, r3, #1
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00b      	beq.n	800611e <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <pb_readbyte+0x50>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	e000      	b.n	8006116 <pb_readbyte+0x52>
 8006114:	4b08      	ldr	r3, [pc, #32]	; (8006138 <pb_readbyte+0x74>)
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	60d3      	str	r3, [r2, #12]
 800611a:	2300      	movs	r3, #0
 800611c:	e005      	b.n	800612a <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	1e5a      	subs	r2, r3, #1
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	609a      	str	r2, [r3, #8]
    
    return true;    
 8006128:	2301      	movs	r3, #1
}
 800612a:	4618      	mov	r0, r3
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	0800ab3c 	.word	0x0800ab3c
 8006138:	0800ab4c 	.word	0x0800ab4c

0800613c <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 800613c:	b490      	push	{r4, r7}
 800613e:	b08a      	sub	sp, #40	; 0x28
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 8006148:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <pb_istream_from_buffer+0x38>)
 800614a:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8006158:	2300      	movs	r3, #0
 800615a:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	461c      	mov	r4, r3
 8006160:	f107 0318 	add.w	r3, r7, #24
 8006164:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006166:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	3728      	adds	r7, #40	; 0x28
 800616e:	46bd      	mov	sp, r7
 8006170:	bc90      	pop	{r4, r7}
 8006172:	4770      	bx	lr
 8006174:	08005fa1 	.word	0x08005fa1

08006178 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b088      	sub	sp, #32
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8006184:	f107 0315 	add.w	r3, r7, #21
 8006188:	4619      	mov	r1, r3
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f7ff ff9a 	bl	80060c4 <pb_readbyte>
 8006190:	4603      	mov	r3, r0
 8006192:	f083 0301 	eor.w	r3, r3, #1
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00b      	beq.n	80061b4 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d105      	bne.n	80061b0 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 80061b0:	2300      	movs	r3, #0
 80061b2:	e084      	b.n	80062be <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 80061b4:	7d7b      	ldrb	r3, [r7, #21]
 80061b6:	b25b      	sxtb	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	db02      	blt.n	80061c2 <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 80061bc:	7d7b      	ldrb	r3, [r7, #21]
 80061be:	61fb      	str	r3, [r7, #28]
 80061c0:	e079      	b.n	80062b6 <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 80061c2:	2307      	movs	r3, #7
 80061c4:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 80061c6:	7d7b      	ldrb	r3, [r7, #21]
 80061c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061cc:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 80061ce:	f107 0315 	add.w	r3, r7, #21
 80061d2:	4619      	mov	r1, r3
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f7ff ff75 	bl	80060c4 <pb_readbyte>
 80061da:	4603      	mov	r3, r0
 80061dc:	f083 0301 	eor.w	r3, r3, #1
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <pb_decode_varint32_eof+0x72>
                return false;
 80061e6:	2300      	movs	r3, #0
 80061e8:	e069      	b.n	80062be <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	2b1f      	cmp	r3, #31
 80061ee:	d92f      	bls.n	8006250 <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	2b3e      	cmp	r3, #62	; 0x3e
 80061f4:	d801      	bhi.n	80061fa <pb_decode_varint32_eof+0x82>
 80061f6:	23ff      	movs	r3, #255	; 0xff
 80061f8:	e000      	b.n	80061fc <pb_decode_varint32_eof+0x84>
 80061fa:	2301      	movs	r3, #1
 80061fc:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 80061fe:	7d7b      	ldrb	r3, [r7, #21]
 8006200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006204:	2b00      	cmp	r3, #0
 8006206:	d006      	beq.n	8006216 <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 8006208:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 800620a:	2b00      	cmp	r3, #0
 800620c:	da05      	bge.n	800621a <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 800620e:	7d7b      	ldrb	r3, [r7, #21]
 8006210:	7dfa      	ldrb	r2, [r7, #23]
 8006212:	429a      	cmp	r2, r3
 8006214:	d101      	bne.n	800621a <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <pb_decode_varint32_eof+0xa4>
 800621a:	2300      	movs	r3, #0
 800621c:	75bb      	strb	r3, [r7, #22]
 800621e:	7dbb      	ldrb	r3, [r7, #22]
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	2b3f      	cmp	r3, #63	; 0x3f
 800622a:	d805      	bhi.n	8006238 <pb_decode_varint32_eof+0xc0>
 800622c:	7dbb      	ldrb	r3, [r7, #22]
 800622e:	f083 0301 	eor.w	r3, r3, #1
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b00      	cmp	r3, #0
 8006236:	d037      	beq.n	80062a8 <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <pb_decode_varint32_eof+0xce>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	e000      	b.n	8006248 <pb_decode_varint32_eof+0xd0>
 8006246:	4b20      	ldr	r3, [pc, #128]	; (80062c8 <pb_decode_varint32_eof+0x150>)
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	60d3      	str	r3, [r2, #12]
 800624c:	2300      	movs	r3, #0
 800624e:	e036      	b.n	80062be <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	2b1c      	cmp	r3, #28
 8006254:	d11f      	bne.n	8006296 <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 8006256:	7d7b      	ldrb	r3, [r7, #21]
 8006258:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800625c:	2b00      	cmp	r3, #0
 800625e:	d010      	beq.n	8006282 <pb_decode_varint32_eof+0x10a>
 8006260:	7d7b      	ldrb	r3, [r7, #21]
 8006262:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8006266:	2b78      	cmp	r3, #120	; 0x78
 8006268:	d00b      	beq.n	8006282 <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <pb_decode_varint32_eof+0x100>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	e000      	b.n	800627a <pb_decode_varint32_eof+0x102>
 8006278:	4b13      	ldr	r3, [pc, #76]	; (80062c8 <pb_decode_varint32_eof+0x150>)
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	60d3      	str	r3, [r2, #12]
 800627e:	2300      	movs	r3, #0
 8006280:	e01d      	b.n	80062be <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 8006282:	7d7b      	ldrb	r3, [r7, #21]
 8006284:	f003 020f 	and.w	r2, r3, #15
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	fa02 f303 	lsl.w	r3, r2, r3
 800628e:	69fa      	ldr	r2, [r7, #28]
 8006290:	4313      	orrs	r3, r2
 8006292:	61fb      	str	r3, [r7, #28]
 8006294:	e008      	b.n	80062a8 <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8006296:	7d7b      	ldrb	r3, [r7, #21]
 8006298:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	69fa      	ldr	r2, [r7, #28]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	3307      	adds	r3, #7
 80062ac:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 80062ae:	7d7b      	ldrb	r3, [r7, #21]
 80062b0:	b25b      	sxtb	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	db8b      	blt.n	80061ce <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	69fa      	ldr	r2, [r7, #28]
 80062ba:	601a      	str	r2, [r3, #0]
   return true;
 80062bc:	2301      	movs	r3, #1
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3720      	adds	r7, #32
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	0800ab58 	.word	0x0800ab58

080062cc <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 80062d6:	2200      	movs	r2, #0
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7ff ff4c 	bl	8006178 <pb_decode_varint32_eof>
 80062e0:	4603      	mov	r3, r0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
	...

080062ec <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 80062ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062f0:	b08a      	sub	sp, #40	; 0x28
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	60f8      	str	r0, [r7, #12]
 80062f6:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 80062f8:	2300      	movs	r3, #0
 80062fa:	627b      	str	r3, [r7, #36]	; 0x24
    uint64_t result = 0;
 80062fc:	f04f 0200 	mov.w	r2, #0
 8006300:	f04f 0300 	mov.w	r3, #0
 8006304:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 8006308:	f107 0317 	add.w	r3, r7, #23
 800630c:	4619      	mov	r1, r3
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f7ff fed8 	bl	80060c4 <pb_readbyte>
 8006314:	4603      	mov	r3, r0
 8006316:	f083 0301 	eor.w	r3, r3, #1
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <pb_decode_varint+0x38>
            return false;
 8006320:	2300      	movs	r3, #0
 8006322:	e041      	b.n	80063a8 <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	2b3e      	cmp	r3, #62	; 0x3e
 8006328:	d910      	bls.n	800634c <pb_decode_varint+0x60>
 800632a:	7dfb      	ldrb	r3, [r7, #23]
 800632c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00b      	beq.n	800634c <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <pb_decode_varint+0x56>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	e000      	b.n	8006344 <pb_decode_varint+0x58>
 8006342:	4b1c      	ldr	r3, [pc, #112]	; (80063b4 <pb_decode_varint+0xc8>)
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	60d3      	str	r3, [r2, #12]
 8006348:	2300      	movs	r3, #0
 800634a:	e02d      	b.n	80063a8 <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 800634c:	7dfb      	ldrb	r3, [r7, #23]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2200      	movs	r2, #0
 8006352:	603b      	str	r3, [r7, #0]
 8006354:	607a      	str	r2, [r7, #4]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	f003 087f 	and.w	r8, r3, #127	; 0x7f
 800635c:	f04f 0900 	mov.w	r9, #0
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	f1a3 0120 	sub.w	r1, r3, #32
 8006366:	f1c3 0220 	rsb	r2, r3, #32
 800636a:	fa09 f503 	lsl.w	r5, r9, r3
 800636e:	fa08 f101 	lsl.w	r1, r8, r1
 8006372:	430d      	orrs	r5, r1
 8006374:	fa28 f202 	lsr.w	r2, r8, r2
 8006378:	4315      	orrs	r5, r2
 800637a:	fa08 f403 	lsl.w	r4, r8, r3
 800637e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006382:	ea42 0a04 	orr.w	sl, r2, r4
 8006386:	ea43 0b05 	orr.w	fp, r3, r5
 800638a:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	3307      	adds	r3, #7
 8006392:	627b      	str	r3, [r7, #36]	; 0x24
    } while (byte & 0x80);
 8006394:	7dfb      	ldrb	r3, [r7, #23]
 8006396:	b25b      	sxtb	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	dbb5      	blt.n	8006308 <pb_decode_varint+0x1c>
    
    *dest = result;
 800639c:	68b9      	ldr	r1, [r7, #8]
 800639e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063a2:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 80063a6:	2301      	movs	r3, #1
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3728      	adds	r7, #40	; 0x28
 80063ac:	46bd      	mov	sp, r7
 80063ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063b2:	bf00      	nop
 80063b4:	0800ab58 	.word	0x0800ab58

080063b8 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 80063c0:	f107 030f 	add.w	r3, r7, #15
 80063c4:	2201      	movs	r2, #1
 80063c6:	4619      	mov	r1, r3
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff fe05 	bl	8005fd8 <pb_read>
 80063ce:	4603      	mov	r3, r0
 80063d0:	f083 0301 	eor.w	r3, r3, #1
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <pb_skip_varint+0x26>
            return false;
 80063da:	2300      	movs	r3, #0
 80063dc:	e004      	b.n	80063e8 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 80063de:	7bfb      	ldrb	r3, [r7, #15]
 80063e0:	b25b      	sxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	dbec      	blt.n	80063c0 <pb_skip_varint+0x8>
    return true;
 80063e6:	2301      	movs	r3, #1
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 80063f8:	f107 030c 	add.w	r3, r7, #12
 80063fc:	4619      	mov	r1, r3
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7ff ff64 	bl	80062cc <pb_decode_varint32>
 8006404:	4603      	mov	r3, r0
 8006406:	f083 0301 	eor.w	r3, r3, #1
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <pb_skip_string+0x24>
        return false;
 8006410:	2300      	movs	r3, #0
 8006412:	e006      	b.n	8006422 <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	461a      	mov	r2, r3
 8006418:	2100      	movs	r1, #0
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff fddc 	bl	8005fd8 <pb_read>
 8006420:	4603      	mov	r3, r0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b086      	sub	sp, #24
 800642e:	af00      	add	r7, sp, #0
 8006430:	60f8      	str	r0, [r7, #12]
 8006432:	60b9      	str	r1, [r7, #8]
 8006434:	607a      	str	r2, [r7, #4]
 8006436:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	2200      	movs	r2, #0
 800643c:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	2200      	movs	r2, #0
 8006442:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 800644a:	f107 0314 	add.w	r3, r7, #20
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	4619      	mov	r1, r3
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f7ff fe90 	bl	8006178 <pb_decode_varint32_eof>
 8006458:	4603      	mov	r3, r0
 800645a:	f083 0301 	eor.w	r3, r3, #1
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <pb_decode_tag+0x3e>
    {
        return false;
 8006464:	2300      	movs	r3, #0
 8006466:	e00b      	b.n	8006480 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	08da      	lsrs	r2, r3, #3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	b2db      	uxtb	r3, r3
 8006474:	f003 0307 	and.w	r3, r3, #7
 8006478:	b2da      	uxtb	r2, r3
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	701a      	strb	r2, [r3, #0]
    return true;
 800647e:	2301      	movs	r3, #1
}
 8006480:	4618      	mov	r0, r3
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	460b      	mov	r3, r1
 8006492:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 8006494:	78fb      	ldrb	r3, [r7, #3]
 8006496:	2b05      	cmp	r3, #5
 8006498:	d826      	bhi.n	80064e8 <pb_skip_field+0x60>
 800649a:	a201      	add	r2, pc, #4	; (adr r2, 80064a0 <pb_skip_field+0x18>)
 800649c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a0:	080064b9 	.word	0x080064b9
 80064a4:	080064c3 	.word	0x080064c3
 80064a8:	080064d1 	.word	0x080064d1
 80064ac:	080064e9 	.word	0x080064e9
 80064b0:	080064e9 	.word	0x080064e9
 80064b4:	080064db 	.word	0x080064db
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff ff7d 	bl	80063b8 <pb_skip_varint>
 80064be:	4603      	mov	r3, r0
 80064c0:	e01d      	b.n	80064fe <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 80064c2:	2208      	movs	r2, #8
 80064c4:	2100      	movs	r1, #0
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7ff fd86 	bl	8005fd8 <pb_read>
 80064cc:	4603      	mov	r3, r0
 80064ce:	e016      	b.n	80064fe <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7ff ff8d 	bl	80063f0 <pb_skip_string>
 80064d6:	4603      	mov	r3, r0
 80064d8:	e011      	b.n	80064fe <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 80064da:	2204      	movs	r2, #4
 80064dc:	2100      	movs	r1, #0
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff fd7a 	bl	8005fd8 <pb_read>
 80064e4:	4603      	mov	r3, r0
 80064e6:	e00a      	b.n	80064fe <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <pb_skip_field+0x6e>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	e000      	b.n	80064f8 <pb_skip_field+0x70>
 80064f6:	4b04      	ldr	r3, [pc, #16]	; (8006508 <pb_skip_field+0x80>)
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	60d3      	str	r3, [r2, #12]
 80064fc:	2300      	movs	r3, #0
    }
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	0800ab68 	.word	0x0800ab68

0800650c <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	607a      	str	r2, [r7, #4]
 8006516:	603b      	str	r3, [r7, #0]
 8006518:	460b      	mov	r3, r1
 800651a:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 8006522:	7afb      	ldrb	r3, [r7, #11]
 8006524:	2b05      	cmp	r3, #5
 8006526:	d03f      	beq.n	80065a8 <read_raw_value+0x9c>
 8006528:	2b05      	cmp	r3, #5
 800652a:	dc47      	bgt.n	80065bc <read_raw_value+0xb0>
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <read_raw_value+0x2a>
 8006530:	2b01      	cmp	r3, #1
 8006532:	d02f      	beq.n	8006594 <read_raw_value+0x88>
 8006534:	e042      	b.n	80065bc <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2200      	movs	r2, #0
 800653a:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	1c5a      	adds	r2, r3, #1
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	429a      	cmp	r2, r3
 800654e:	d20b      	bcs.n	8006568 <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <read_raw_value+0x52>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	e000      	b.n	8006560 <read_raw_value+0x54>
 800655e:	4b1f      	ldr	r3, [pc, #124]	; (80065dc <read_raw_value+0xd0>)
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	60d3      	str	r3, [r2, #12]
 8006564:	2300      	movs	r3, #0
 8006566:	e034      	b.n	80065d2 <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 8006568:	2201      	movs	r2, #1
 800656a:	6879      	ldr	r1, [r7, #4]
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f7ff fd33 	bl	8005fd8 <pb_read>
 8006572:	4603      	mov	r3, r0
 8006574:	f083 0301 	eor.w	r3, r3, #1
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <read_raw_value+0x76>
                    return false;
 800657e:	2300      	movs	r3, #0
 8006580:	e027      	b.n	80065d2 <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	607a      	str	r2, [r7, #4]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	b25b      	sxtb	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	dbd5      	blt.n	800653c <read_raw_value+0x30>
            return true;
 8006590:	2301      	movs	r3, #1
 8006592:	e01e      	b.n	80065d2 <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2208      	movs	r2, #8
 8006598:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 800659a:	2208      	movs	r2, #8
 800659c:	6879      	ldr	r1, [r7, #4]
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f7ff fd1a 	bl	8005fd8 <pb_read>
 80065a4:	4603      	mov	r3, r0
 80065a6:	e014      	b.n	80065d2 <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	2204      	movs	r2, #4
 80065ac:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 80065ae:	2204      	movs	r2, #4
 80065b0:	6879      	ldr	r1, [r7, #4]
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f7ff fd10 	bl	8005fd8 <pb_read>
 80065b8:	4603      	mov	r3, r0
 80065ba:	e00a      	b.n	80065d2 <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <read_raw_value+0xbe>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	e000      	b.n	80065cc <read_raw_value+0xc0>
 80065ca:	4b05      	ldr	r3, [pc, #20]	; (80065e0 <read_raw_value+0xd4>)
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	60d3      	str	r3, [r2, #12]
 80065d0:	2300      	movs	r3, #0
    }
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	0800ab58 	.word	0x0800ab58
 80065e0:	0800ab68 	.word	0x0800ab68

080065e4 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 80065e4:	b590      	push	{r4, r7, lr}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 80065ee:	f107 030c 	add.w	r3, r7, #12
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f7ff fe69 	bl	80062cc <pb_decode_varint32>
 80065fa:	4603      	mov	r3, r0
 80065fc:	f083 0301 	eor.w	r3, r3, #1
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <pb_make_string_substream+0x26>
        return false;
 8006606:	2300      	movs	r3, #0
 8006608:	e020      	b.n	800664c <pb_make_string_substream+0x68>
    
    *substream = *stream;
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4614      	mov	r4, r2
 8006610:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006612:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	689a      	ldr	r2, [r3, #8]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	429a      	cmp	r2, r3
 800661e:	d20b      	bcs.n	8006638 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <pb_make_string_substream+0x4a>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	e000      	b.n	8006630 <pb_make_string_substream+0x4c>
 800662e:	4b09      	ldr	r3, [pc, #36]	; (8006654 <pb_make_string_substream+0x70>)
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	60d3      	str	r3, [r2, #12]
 8006634:	2300      	movs	r3, #0
 8006636:	e009      	b.n	800664c <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689a      	ldr	r2, [r3, #8]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	1ad2      	subs	r2, r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	609a      	str	r2, [r3, #8]
    return true;
 800664a:	2301      	movs	r3, #1
}
 800664c:	4618      	mov	r0, r3
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	bd90      	pop	{r4, r7, pc}
 8006654:	0800ab7c 	.word	0x0800ab7c

08006658 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00e      	beq.n	8006688 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	461a      	mov	r2, r3
 8006670:	2100      	movs	r1, #0
 8006672:	6838      	ldr	r0, [r7, #0]
 8006674:	f7ff fcb0 	bl	8005fd8 <pb_read>
 8006678:	4603      	mov	r3, r0
 800667a:	f083 0301 	eor.w	r3, r3, #1
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <pb_close_string_substream+0x30>
            return false;
 8006684:	2300      	movs	r3, #0
 8006686:	e008      	b.n	800669a <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	68da      	ldr	r2, [r3, #12]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	60da      	str	r2, [r3, #12]
#endif
    return true;
 8006698:	2301      	movs	r3, #1
}
 800669a:	4618      	mov	r0, r3
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
	...

080066a4 <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	460b      	mov	r3, r1
 80066ae:	607a      	str	r2, [r7, #4]
 80066b0:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	7d9b      	ldrb	r3, [r3, #22]
 80066b6:	f003 030f 	and.w	r3, r3, #15
 80066ba:	2b0b      	cmp	r3, #11
 80066bc:	f200 80d4 	bhi.w	8006868 <decode_basic_field+0x1c4>
 80066c0:	a201      	add	r2, pc, #4	; (adr r2, 80066c8 <decode_basic_field+0x24>)
 80066c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c6:	bf00      	nop
 80066c8:	080066f9 	.word	0x080066f9
 80066cc:	08006729 	.word	0x08006729
 80066d0:	08006729 	.word	0x08006729
 80066d4:	08006729 	.word	0x08006729
 80066d8:	08006759 	.word	0x08006759
 80066dc:	0800678d 	.word	0x0800678d
 80066e0:	080067c1 	.word	0x080067c1
 80066e4:	080067eb 	.word	0x080067eb
 80066e8:	08006815 	.word	0x08006815
 80066ec:	08006815 	.word	0x08006815
 80066f0:	08006869 	.word	0x08006869
 80066f4:	0800683f 	.word	0x0800683f
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 80066f8:	7afb      	ldrb	r3, [r7, #11]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00e      	beq.n	800671c <decode_basic_field+0x78>
 80066fe:	7afb      	ldrb	r3, [r7, #11]
 8006700:	2bff      	cmp	r3, #255	; 0xff
 8006702:	d00b      	beq.n	800671c <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <decode_basic_field+0x6e>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	e000      	b.n	8006714 <decode_basic_field+0x70>
 8006712:	4b5d      	ldr	r3, [pc, #372]	; (8006888 <decode_basic_field+0x1e4>)
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	60d3      	str	r3, [r2, #12]
 8006718:	2300      	movs	r3, #0
 800671a:	e0b0      	b.n	800687e <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 800671c:	6879      	ldr	r1, [r7, #4]
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 fef6 	bl	8007510 <pb_dec_bool>
 8006724:	4603      	mov	r3, r0
 8006726:	e0aa      	b.n	800687e <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8006728:	7afb      	ldrb	r3, [r7, #11]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00e      	beq.n	800674c <decode_basic_field+0xa8>
 800672e:	7afb      	ldrb	r3, [r7, #11]
 8006730:	2bff      	cmp	r3, #255	; 0xff
 8006732:	d00b      	beq.n	800674c <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <decode_basic_field+0x9e>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	e000      	b.n	8006744 <decode_basic_field+0xa0>
 8006742:	4b51      	ldr	r3, [pc, #324]	; (8006888 <decode_basic_field+0x1e4>)
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	60d3      	str	r3, [r2, #12]
 8006748:	2300      	movs	r3, #0
 800674a:	e098      	b.n	800687e <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 800674c:	6879      	ldr	r1, [r7, #4]
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 feee 	bl	8007530 <pb_dec_varint>
 8006754:	4603      	mov	r3, r0
 8006756:	e092      	b.n	800687e <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 8006758:	7afb      	ldrb	r3, [r7, #11]
 800675a:	2b05      	cmp	r3, #5
 800675c:	d00e      	beq.n	800677c <decode_basic_field+0xd8>
 800675e:	7afb      	ldrb	r3, [r7, #11]
 8006760:	2bff      	cmp	r3, #255	; 0xff
 8006762:	d00b      	beq.n	800677c <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <decode_basic_field+0xce>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	e000      	b.n	8006774 <decode_basic_field+0xd0>
 8006772:	4b45      	ldr	r3, [pc, #276]	; (8006888 <decode_basic_field+0x1e4>)
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	60d3      	str	r3, [r2, #12]
 8006778:	2300      	movs	r3, #0
 800677a:	e080      	b.n	800687e <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	4619      	mov	r1, r3
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f000 fe8a 	bl	800749c <pb_decode_fixed32>
 8006788:	4603      	mov	r3, r0
 800678a:	e078      	b.n	800687e <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 800678c:	7afb      	ldrb	r3, [r7, #11]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d00e      	beq.n	80067b0 <decode_basic_field+0x10c>
 8006792:	7afb      	ldrb	r3, [r7, #11]
 8006794:	2bff      	cmp	r3, #255	; 0xff
 8006796:	d00b      	beq.n	80067b0 <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d002      	beq.n	80067a6 <decode_basic_field+0x102>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	e000      	b.n	80067a8 <decode_basic_field+0x104>
 80067a6:	4b38      	ldr	r3, [pc, #224]	; (8006888 <decode_basic_field+0x1e4>)
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	60d3      	str	r3, [r2, #12]
 80067ac:	2300      	movs	r3, #0
 80067ae:	e066      	b.n	800687e <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	4619      	mov	r1, r3
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 fe8c 	bl	80074d4 <pb_decode_fixed64>
 80067bc:	4603      	mov	r3, r0
 80067be:	e05e      	b.n	800687e <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 80067c0:	7afb      	ldrb	r3, [r7, #11]
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d00b      	beq.n	80067de <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d002      	beq.n	80067d4 <decode_basic_field+0x130>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	e000      	b.n	80067d6 <decode_basic_field+0x132>
 80067d4:	4b2c      	ldr	r3, [pc, #176]	; (8006888 <decode_basic_field+0x1e4>)
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	60d3      	str	r3, [r2, #12]
 80067da:	2300      	movs	r3, #0
 80067dc:	e04f      	b.n	800687e <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 80067de:	6879      	ldr	r1, [r7, #4]
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 ffd1 	bl	8007788 <pb_dec_bytes>
 80067e6:	4603      	mov	r3, r0
 80067e8:	e049      	b.n	800687e <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 80067ea:	7afb      	ldrb	r3, [r7, #11]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d00b      	beq.n	8006808 <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d002      	beq.n	80067fe <decode_basic_field+0x15a>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	e000      	b.n	8006800 <decode_basic_field+0x15c>
 80067fe:	4b22      	ldr	r3, [pc, #136]	; (8006888 <decode_basic_field+0x1e4>)
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	60d3      	str	r3, [r2, #12]
 8006804:	2300      	movs	r3, #0
 8006806:	e03a      	b.n	800687e <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 8006808:	6879      	ldr	r1, [r7, #4]
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f001 f830 	bl	8007870 <pb_dec_string>
 8006810:	4603      	mov	r3, r0
 8006812:	e034      	b.n	800687e <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 8006814:	7afb      	ldrb	r3, [r7, #11]
 8006816:	2b02      	cmp	r3, #2
 8006818:	d00b      	beq.n	8006832 <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d002      	beq.n	8006828 <decode_basic_field+0x184>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	e000      	b.n	800682a <decode_basic_field+0x186>
 8006828:	4b17      	ldr	r3, [pc, #92]	; (8006888 <decode_basic_field+0x1e4>)
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	60d3      	str	r3, [r2, #12]
 800682e:	2300      	movs	r3, #0
 8006830:	e025      	b.n	800687e <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 8006832:	6879      	ldr	r1, [r7, #4]
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f001 f897 	bl	8007968 <pb_dec_submessage>
 800683a:	4603      	mov	r3, r0
 800683c:	e01f      	b.n	800687e <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 800683e:	7afb      	ldrb	r3, [r7, #11]
 8006840:	2b02      	cmp	r3, #2
 8006842:	d00b      	beq.n	800685c <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <decode_basic_field+0x1ae>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	e000      	b.n	8006854 <decode_basic_field+0x1b0>
 8006852:	4b0d      	ldr	r3, [pc, #52]	; (8006888 <decode_basic_field+0x1e4>)
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	60d3      	str	r3, [r2, #12]
 8006858:	2300      	movs	r3, #0
 800685a:	e010      	b.n	800687e <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 800685c:	6879      	ldr	r1, [r7, #4]
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f001 f90c 	bl	8007a7c <pb_dec_fixed_length_bytes>
 8006864:	4603      	mov	r3, r0
 8006866:	e00a      	b.n	800687e <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <decode_basic_field+0x1d2>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	e000      	b.n	8006878 <decode_basic_field+0x1d4>
 8006876:	4b05      	ldr	r3, [pc, #20]	; (800688c <decode_basic_field+0x1e8>)
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	60d3      	str	r3, [r2, #12]
 800687c:	2300      	movs	r3, #0
    }
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	0800ab94 	.word	0x0800ab94
 800688c:	0800aba4 	.word	0x0800aba4

08006890 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b096      	sub	sp, #88	; 0x58
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	460b      	mov	r3, r1
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	7d9b      	ldrb	r3, [r3, #22]
 80068a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068a6:	2b30      	cmp	r3, #48	; 0x30
 80068a8:	f000 80c2 	beq.w	8006a30 <decode_static_field+0x1a0>
 80068ac:	2b30      	cmp	r3, #48	; 0x30
 80068ae:	f200 811a 	bhi.w	8006ae6 <decode_static_field+0x256>
 80068b2:	2b20      	cmp	r3, #32
 80068b4:	d01f      	beq.n	80068f6 <decode_static_field+0x66>
 80068b6:	2b20      	cmp	r3, #32
 80068b8:	f200 8115 	bhi.w	8006ae6 <decode_static_field+0x256>
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d002      	beq.n	80068c6 <decode_static_field+0x36>
 80068c0:	2b10      	cmp	r3, #16
 80068c2:	d008      	beq.n	80068d6 <decode_static_field+0x46>
 80068c4:	e10f      	b.n	8006ae6 <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 80068c6:	7afb      	ldrb	r3, [r7, #11]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	4619      	mov	r1, r3
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f7ff fee9 	bl	80066a4 <decode_basic_field>
 80068d2:	4603      	mov	r3, r0
 80068d4:	e112      	b.n	8006afc <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	2201      	movs	r2, #1
 80068e4:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 80068e6:	7afb      	ldrb	r3, [r7, #11]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	4619      	mov	r1, r3
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f7ff fed9 	bl	80066a4 <decode_basic_field>
 80068f2:	4603      	mov	r3, r0
 80068f4:	e102      	b.n	8006afc <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 80068f6:	7afb      	ldrb	r3, [r7, #11]
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d16c      	bne.n	80069d6 <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	7d9b      	ldrb	r3, [r3, #22]
 8006900:	f003 030f 	and.w	r3, r3, #15
 8006904:	2b05      	cmp	r3, #5
 8006906:	d866      	bhi.n	80069d6 <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 8006908:	2301      	movs	r3, #1
 800690a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	653b      	str	r3, [r7, #80]	; 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	8a52      	ldrh	r2, [r2, #18]
 800691c:	4611      	mov	r1, r2
 800691e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006920:	8812      	ldrh	r2, [r2, #0]
 8006922:	fb01 f202 	mul.w	r2, r1, r2
 8006926:	441a      	add	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 800692c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006930:	4619      	mov	r1, r3
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f7ff fe56 	bl	80065e4 <pb_make_string_substream>
 8006938:	4603      	mov	r3, r0
 800693a:	f083 0301 	eor.w	r3, r3, #1
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	d01f      	beq.n	8006984 <decode_static_field+0xf4>
                    return false;
 8006944:	2300      	movs	r3, #0
 8006946:	e0d9      	b.n	8006afc <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 8006948:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	21ff      	movs	r1, #255	; 0xff
 8006950:	4618      	mov	r0, r3
 8006952:	f7ff fea7 	bl	80066a4 <decode_basic_field>
 8006956:	4603      	mov	r3, r0
 8006958:	f083 0301 	eor.w	r3, r3, #1
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <decode_static_field+0xda>
                    {
                        status = false;
 8006962:	2300      	movs	r3, #0
 8006964:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 8006968:	e015      	b.n	8006996 <decode_static_field+0x106>
                    }
                    (*size)++;
 800696a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	3301      	adds	r3, #1
 8006970:	b29a      	uxth	r2, r3
 8006972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006974:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	8a52      	ldrh	r2, [r2, #18]
 800697e:	441a      	add	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 8006984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006986:	2b00      	cmp	r3, #0
 8006988:	d005      	beq.n	8006996 <decode_static_field+0x106>
 800698a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800698c:	881a      	ldrh	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	8a9b      	ldrh	r3, [r3, #20]
 8006992:	429a      	cmp	r2, r3
 8006994:	d3d8      	bcc.n	8006948 <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 8006996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00b      	beq.n	80069b4 <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <decode_static_field+0x11a>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	e000      	b.n	80069ac <decode_static_field+0x11c>
 80069aa:	4b56      	ldr	r3, [pc, #344]	; (8006b04 <decode_static_field+0x274>)
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	60d3      	str	r3, [r2, #12]
 80069b0:	2300      	movs	r3, #0
 80069b2:	e0a3      	b.n	8006afc <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 80069b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80069b8:	4619      	mov	r1, r3
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f7ff fe4c 	bl	8006658 <pb_close_string_substream>
 80069c0:	4603      	mov	r3, r0
 80069c2:	f083 0301 	eor.w	r3, r3, #1
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <decode_static_field+0x140>
                    return false;
 80069cc:	2300      	movs	r3, #0
 80069ce:	e095      	b.n	8006afc <decode_static_field+0x26c>

                return status;
 80069d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069d4:	e092      	b.n	8006afc <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	64fb      	str	r3, [r7, #76]	; 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	8a52      	ldrh	r2, [r2, #18]
 80069e4:	4611      	mov	r1, r2
 80069e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069e8:	8812      	ldrh	r2, [r2, #0]
 80069ea:	fb01 f202 	mul.w	r2, r1, r2
 80069ee:	441a      	add	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 80069f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	1c5a      	adds	r2, r3, #1
 80069fa:	b291      	uxth	r1, r2
 80069fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069fe:	8011      	strh	r1, [r2, #0]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	8a92      	ldrh	r2, [r2, #20]
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d30b      	bcc.n	8006a20 <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <decode_static_field+0x186>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	e000      	b.n	8006a18 <decode_static_field+0x188>
 8006a16:	4b3b      	ldr	r3, [pc, #236]	; (8006b04 <decode_static_field+0x274>)
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	60d3      	str	r3, [r2, #12]
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	e06d      	b.n	8006afc <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 8006a20:	7afb      	ldrb	r3, [r7, #11]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	4619      	mov	r1, r3
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f7ff fe3c 	bl	80066a4 <decode_basic_field>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	e065      	b.n	8006afc <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	7d9b      	ldrb	r3, [r3, #22]
 8006a34:	f003 030f 	and.w	r3, r3, #15
 8006a38:	2b08      	cmp	r3, #8
 8006a3a:	d005      	beq.n	8006a48 <decode_static_field+0x1b8>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	7d9b      	ldrb	r3, [r3, #22]
 8006a40:	f003 030f 	and.w	r3, r3, #15
 8006a44:	2b09      	cmp	r3, #9
 8006a46:	d141      	bne.n	8006acc <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	881a      	ldrh	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d03a      	beq.n	8006acc <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	69d8      	ldr	r0, [r3, #28]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	8a5b      	ldrh	r3, [r3, #18]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	2100      	movs	r1, #0
 8006a62:	f001 f9a0 	bl	8007da6 <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10a      	bne.n	8006a86 <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d105      	bne.n	8006a86 <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d022      	beq.n	8006acc <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	69da      	ldr	r2, [r3, #28]
 8006a8e:	f107 0314 	add.w	r3, r7, #20
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7ff f99d 	bl	8005dd2 <pb_field_iter_begin>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d016      	beq.n	8006acc <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 8006a9e:	f107 0314 	add.w	r3, r7, #20
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fa4d 	bl	8006f42 <pb_message_set_to_defaults>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	f083 0301 	eor.w	r3, r3, #1
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00b      	beq.n	8006acc <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <decode_static_field+0x232>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	e000      	b.n	8006ac4 <decode_static_field+0x234>
 8006ac2:	4b11      	ldr	r3, [pc, #68]	; (8006b08 <decode_static_field+0x278>)
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	60d3      	str	r3, [r2, #12]
 8006ac8:	2300      	movs	r3, #0
 8006aca:	e017      	b.n	8006afc <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	8a12      	ldrh	r2, [r2, #16]
 8006ad4:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 8006ad6:	7afb      	ldrb	r3, [r7, #11]
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	4619      	mov	r1, r3
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f7ff fde1 	bl	80066a4 <decode_basic_field>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	e00a      	b.n	8006afc <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <decode_static_field+0x264>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	e000      	b.n	8006af6 <decode_static_field+0x266>
 8006af4:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <decode_static_field+0x27c>)
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	60d3      	str	r3, [r2, #12]
 8006afa:	2300      	movs	r3, #0
    }
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3758      	adds	r7, #88	; 0x58
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	0800abb8 	.word	0x0800abb8
 8006b08:	0800abc8 	.word	0x0800abc8
 8006b0c:	0800aba4 	.word	0x0800aba4

08006b10 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	607a      	str	r2, [r7, #4]
 8006b1c:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d002      	beq.n	8006b2c <decode_pointer_field+0x1c>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	e000      	b.n	8006b2e <decode_pointer_field+0x1e>
 8006b2c:	4b04      	ldr	r3, [pc, #16]	; (8006b40 <decode_pointer_field+0x30>)
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	60d3      	str	r3, [r2, #12]
 8006b32:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	0800abe0 	.word	0x0800abe0

08006b44 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8006b44:	b590      	push	{r4, r7, lr}
 8006b46:	b097      	sub	sp, #92	; 0x5c
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	61f8      	str	r0, [r7, #28]
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	617a      	str	r2, [r7, #20]
 8006b50:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d106      	bne.n	8006b6a <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 8006b5c:	7efb      	ldrb	r3, [r7, #27]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	69f8      	ldr	r0, [r7, #28]
 8006b62:	f7ff fc91 	bl	8006488 <pb_skip_field>
 8006b66:	4603      	mov	r3, r0
 8006b68:	e070      	b.n	8006c4c <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 8006b6a:	7efb      	ldrb	r3, [r7, #27]
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d145      	bne.n	8006bfc <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 8006b70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006b74:	4619      	mov	r1, r3
 8006b76:	69f8      	ldr	r0, [r7, #28]
 8006b78:	f7ff fd34 	bl	80065e4 <pb_make_string_substream>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	f083 0301 	eor.w	r3, r3, #1
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <decode_callback_field+0x48>
            return false;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	e05f      	b.n	8006c4c <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 8006b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b8e:	657b      	str	r3, [r7, #84]	; 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	4798      	blx	r3
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	f083 0301 	eor.w	r3, r3, #1
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d010      	beq.n	8006bce <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <decode_callback_field+0x76>
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	e005      	b.n	8006bc6 <decode_callback_field+0x82>
 8006bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <decode_callback_field+0x80>
 8006bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bc2:	e000      	b.n	8006bc6 <decode_callback_field+0x82>
 8006bc4:	4b23      	ldr	r3, [pc, #140]	; (8006c54 <decode_callback_field+0x110>)
 8006bc6:	69fa      	ldr	r2, [r7, #28]
 8006bc8:	60d3      	str	r3, [r2, #12]
                return false;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	e03e      	b.n	8006c4c <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 8006bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d003      	beq.n	8006bdc <decode_callback_field+0x98>
 8006bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d8d7      	bhi.n	8006b8c <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 8006bdc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006be0:	4619      	mov	r1, r3
 8006be2:	69f8      	ldr	r0, [r7, #28]
 8006be4:	f7ff fd38 	bl	8006658 <pb_close_string_substream>
 8006be8:	4603      	mov	r3, r0
 8006bea:	f083 0301 	eor.w	r3, r3, #1
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <decode_callback_field+0xb4>
            return false;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	e029      	b.n	8006c4c <decode_callback_field+0x108>

        return true;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e027      	b.n	8006c4c <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 8006bfc:	230a      	movs	r3, #10
 8006bfe:	627b      	str	r3, [r7, #36]	; 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8006c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c04:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006c08:	7ef9      	ldrb	r1, [r7, #27]
 8006c0a:	69f8      	ldr	r0, [r7, #28]
 8006c0c:	f7ff fc7e 	bl	800650c <read_raw_value>
 8006c10:	4603      	mov	r3, r0
 8006c12:	f083 0301 	eor.w	r3, r3, #1
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d001      	beq.n	8006c20 <decode_callback_field+0xdc>
            return false;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	e015      	b.n	8006c4c <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 8006c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c22:	463b      	mov	r3, r7
 8006c24:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7ff fa87 	bl	800613c <pb_istream_from_buffer>
 8006c2e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8006c32:	463b      	mov	r3, r7
 8006c34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	2100      	movs	r1, #0
 8006c48:	4798      	blx	r3
 8006c4a:	4603      	mov	r3, r0
    }
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	375c      	adds	r7, #92	; 0x5c
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd90      	pop	{r4, r7, pc}
 8006c54:	0800abf4 	.word	0x0800abf4

08006c58 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	460b      	mov	r3, r1
 8006c62:	607a      	str	r2, [r7, #4]
 8006c64:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	7d9b      	ldrb	r3, [r3, #22]
 8006c6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c6e:	2b80      	cmp	r3, #128	; 0x80
 8006c70:	d00e      	beq.n	8006c90 <decode_field+0x38>
 8006c72:	2b80      	cmp	r3, #128	; 0x80
 8006c74:	d81c      	bhi.n	8006cb0 <decode_field+0x58>
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <decode_field+0x28>
 8006c7a:	2b40      	cmp	r3, #64	; 0x40
 8006c7c:	d010      	beq.n	8006ca0 <decode_field+0x48>
 8006c7e:	e017      	b.n	8006cb0 <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 8006c80:	7afb      	ldrb	r3, [r7, #11]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	4619      	mov	r1, r3
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f7ff fe02 	bl	8006890 <decode_static_field>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	e01a      	b.n	8006cc6 <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 8006c90:	7afb      	ldrb	r3, [r7, #11]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	4619      	mov	r1, r3
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f7ff ff3a 	bl	8006b10 <decode_pointer_field>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	e012      	b.n	8006cc6 <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 8006ca0:	7afb      	ldrb	r3, [r7, #11]
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f7ff ff4c 	bl	8006b44 <decode_callback_field>
 8006cac:	4603      	mov	r3, r0
 8006cae:	e00a      	b.n	8006cc6 <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d002      	beq.n	8006cbe <decode_field+0x66>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	e000      	b.n	8006cc0 <decode_field+0x68>
 8006cbe:	4b04      	ldr	r3, [pc, #16]	; (8006cd0 <decode_field+0x78>)
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	60d3      	str	r3, [r2, #12]
 8006cc4:	2300      	movs	r3, #0
    }
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	0800aba4 	.word	0x0800aba4

08006cd4 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b08e      	sub	sp, #56	; 0x38
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 8006ce2:	f107 0310 	add.w	r3, r7, #16
 8006ce6:	68b9      	ldr	r1, [r7, #8]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7ff f88b 	bl	8005e04 <pb_field_iter_begin_extension>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	f083 0301 	eor.w	r3, r3, #1
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00b      	beq.n	8006d12 <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <default_extension_decoder+0x34>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	e000      	b.n	8006d0a <default_extension_decoder+0x36>
 8006d08:	4b0e      	ldr	r3, [pc, #56]	; (8006d44 <default_extension_decoder+0x70>)
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	60d3      	str	r3, [r2, #12]
 8006d0e:	2300      	movs	r3, #0
 8006d10:	e014      	b.n	8006d3c <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 8006d12:	8c3b      	ldrh	r3, [r7, #32]
 8006d14:	461a      	mov	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d102      	bne.n	8006d22 <default_extension_decoder+0x4e>
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <default_extension_decoder+0x52>
        return true;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e00a      	b.n	8006d3c <default_extension_decoder+0x68>

    extension->found = true;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 8006d2c:	f107 0210 	add.w	r2, r7, #16
 8006d30:	78fb      	ldrb	r3, [r7, #3]
 8006d32:	4619      	mov	r1, r3
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f7ff ff8f 	bl	8006c58 <decode_field>
 8006d3a:	4603      	mov	r3, r0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3738      	adds	r7, #56	; 0x38
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	0800ac04 	.word	0x0800ac04

08006d48 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 8006d48:	b590      	push	{r4, r7, lr}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	603b      	str	r3, [r7, #0]
 8006d54:	4613      	mov	r3, r2
 8006d56:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 8006d5e:	e022      	b.n	8006da6 <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00a      	beq.n	8006d80 <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681c      	ldr	r4, [r3, #0]
 8006d70:	79fb      	ldrb	r3, [r7, #7]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	6839      	ldr	r1, [r7, #0]
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	47a0      	blx	r4
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	75fb      	strb	r3, [r7, #23]
 8006d7e:	e007      	b.n	8006d90 <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 8006d80:	79fb      	ldrb	r3, [r7, #7]
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f7ff ffa4 	bl	8006cd4 <default_extension_decoder>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	75fb      	strb	r3, [r7, #23]

        if (!status)
 8006d90:	7dfb      	ldrb	r3, [r7, #23]
 8006d92:	f083 0301 	eor.w	r3, r3, #1
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <decode_extension+0x58>
            return false;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	e00b      	b.n	8006db8 <decode_extension+0x70>
        
        extension = extension->next;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d004      	beq.n	8006db6 <decode_extension+0x6e>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d0d4      	beq.n	8006d60 <decode_extension+0x18>
    }
    
    return true;
 8006db6:	2301      	movs	r3, #1
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	371c      	adds	r7, #28
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd90      	pop	{r4, r7, pc}

08006dc0 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08e      	sub	sp, #56	; 0x38
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	7d9b      	ldrb	r3, [r3, #22]
 8006dcc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8006dd0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006dd4:	f003 030f 	and.w	r3, r3, #15
 8006dd8:	2b0a      	cmp	r3, #10
 8006dda:	d124      	bne.n	8006e26 <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	69db      	ldr	r3, [r3, #28]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 8006de4:	e01b      	b.n	8006e1e <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 8006de6:	f107 0308 	add.w	r3, r7, #8
 8006dea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7ff f809 	bl	8005e04 <pb_field_iter_begin_extension>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00f      	beq.n	8006e18 <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 8006df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 8006dfe:	f107 0308 	add.w	r3, r7, #8
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 f89d 	bl	8006f42 <pb_message_set_to_defaults>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	f083 0301 	eor.w	r3, r3, #1
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <pb_field_set_to_default+0x58>
                    return false;
 8006e14:	2300      	movs	r3, #0
 8006e16:	e090      	b.n	8006f3a <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 8006e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 8006e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1e0      	bne.n	8006de6 <pb_field_set_to_default+0x26>
 8006e24:	e088      	b.n	8006f38 <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8006e26:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006e2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d166      	bne.n	8006f00 <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 8006e32:	2301      	movs	r3, #1
 8006e34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8006e38:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006e3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e40:	2b10      	cmp	r3, #16
 8006e42:	d108      	bne.n	8006e56 <pb_field_set_to_default+0x96>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a1b      	ldr	r3, [r3, #32]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d004      	beq.n	8006e56 <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	2200      	movs	r2, #0
 8006e52:	701a      	strb	r2, [r3, #0]
 8006e54:	e012      	b.n	8006e7c <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8006e56:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006e5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e5e:	2b20      	cmp	r3, #32
 8006e60:	d005      	beq.n	8006e6e <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8006e62:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006e66:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8006e6a:	2b30      	cmp	r3, #48	; 0x30
 8006e6c:	d106      	bne.n	8006e7c <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	2200      	movs	r2, #0
 8006e74:	801a      	strh	r2, [r3, #0]
            init_data = false;
 8006e76:	2300      	movs	r3, #0
 8006e78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        if (init_data)
 8006e7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d059      	beq.n	8006f38 <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	7d9b      	ldrb	r3, [r3, #22]
 8006e88:	f003 030f 	and.w	r3, r3, #15
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	d005      	beq.n	8006e9c <pb_field_set_to_default+0xdc>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	7d9b      	ldrb	r3, [r3, #22]
 8006e94:	f003 030f 	and.w	r3, r3, #15
 8006e98:	2b09      	cmp	r3, #9
 8006e9a:	d128      	bne.n	8006eee <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10a      	bne.n	8006ebc <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eaa:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d105      	bne.n	8006ebc <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d018      	beq.n	8006eee <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	69da      	ldr	r2, [r3, #28]
 8006ec4:	f107 0308 	add.w	r3, r7, #8
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fe ff82 	bl	8005dd2 <pb_field_iter_begin>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d030      	beq.n	8006f36 <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 8006ed4:	f107 0308 	add.w	r3, r7, #8
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f000 f832 	bl	8006f42 <pb_message_set_to_defaults>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	f083 0301 	eor.w	r3, r3, #1
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d025      	beq.n	8006f36 <pb_field_set_to_default+0x176>
                        return false;
 8006eea:	2300      	movs	r3, #0
 8006eec:	e025      	b.n	8006f3a <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	69d8      	ldr	r0, [r3, #28]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	8a5b      	ldrh	r3, [r3, #18]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	2100      	movs	r1, #0
 8006efa:	f000 ff54 	bl	8007da6 <memset>
 8006efe:	e01b      	b.n	8006f38 <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8006f00:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006f04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f08:	2b80      	cmp	r3, #128	; 0x80
 8006f0a:	d115      	bne.n	8006f38 <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	2200      	movs	r2, #0
 8006f12:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8006f14:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006f18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f1c:	2b20      	cmp	r3, #32
 8006f1e:	d005      	beq.n	8006f2c <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8006f20:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006f24:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8006f28:	2b30      	cmp	r3, #48	; 0x30
 8006f2a:	d105      	bne.n	8006f38 <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	2200      	movs	r2, #0
 8006f32:	801a      	strh	r2, [r3, #0]
 8006f34:	e000      	b.n	8006f38 <pb_field_set_to_default+0x178>
            {
 8006f36:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 8006f38:	2301      	movs	r3, #1
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3738      	adds	r7, #56	; 0x38
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 8006f42:	b590      	push	{r4, r7, lr}
 8006f44:	b08d      	sub	sp, #52	; 0x34
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 8006f4a:	f107 0320 	add.w	r3, r7, #32
 8006f4e:	2200      	movs	r2, #0
 8006f50:	601a      	str	r2, [r3, #0]
 8006f52:	605a      	str	r2, [r3, #4]
 8006f54:	609a      	str	r2, [r3, #8]
 8006f56:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d020      	beq.n	8006fac <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	6899      	ldr	r1, [r3, #8]
 8006f70:	463b      	mov	r3, r7
 8006f72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7ff f8e0 	bl	800613c <pb_istream_from_buffer>
 8006f7c:	f107 0420 	add.w	r4, r7, #32
 8006f80:	463b      	mov	r3, r7
 8006f82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8006f88:	f107 031a 	add.w	r3, r7, #26
 8006f8c:	f107 021c 	add.w	r2, r7, #28
 8006f90:	f107 011b 	add.w	r1, r7, #27
 8006f94:	f107 0020 	add.w	r0, r7, #32
 8006f98:	f7ff fa47 	bl	800642a <pb_decode_tag>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	f083 0301 	eor.w	r3, r3, #1
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <pb_message_set_to_defaults+0x6a>
            return false;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	e043      	b.n	8007034 <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 8006fac:	6978      	ldr	r0, [r7, #20]
 8006fae:	f7ff ff07 	bl	8006dc0 <pb_field_set_to_default>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	f083 0301 	eor.w	r3, r3, #1
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <pb_message_set_to_defaults+0x80>
            return false;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	e038      	b.n	8007034 <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d02e      	beq.n	8007026 <pb_message_set_to_defaults+0xe4>
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	8a1b      	ldrh	r3, [r3, #16]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d128      	bne.n	8007026 <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 8006fd4:	7ef9      	ldrb	r1, [r7, #27]
 8006fd6:	f107 0320 	add.w	r3, r7, #32
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7ff fe3b 	bl	8006c58 <decode_field>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	f083 0301 	eor.w	r3, r3, #1
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <pb_message_set_to_defaults+0xb0>
                return false;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	e020      	b.n	8007034 <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8006ff2:	f107 031a 	add.w	r3, r7, #26
 8006ff6:	f107 021c 	add.w	r2, r7, #28
 8006ffa:	f107 011b 	add.w	r1, r7, #27
 8006ffe:	f107 0020 	add.w	r0, r7, #32
 8007002:	f7ff fa12 	bl	800642a <pb_decode_tag>
 8007006:	4603      	mov	r3, r0
 8007008:	f083 0301 	eor.w	r3, r3, #1
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d001      	beq.n	8007016 <pb_message_set_to_defaults+0xd4>
                return false;
 8007012:	2300      	movs	r3, #0
 8007014:	e00e      	b.n	8007034 <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d003      	beq.n	8007026 <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	2200      	movs	r2, #0
 8007024:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 8007026:	6978      	ldr	r0, [r7, #20]
 8007028:	f7fe ff1c 	bl	8005e64 <pb_field_iter_next>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1bc      	bne.n	8006fac <pb_message_set_to_defaults+0x6a>

    return true;
 8007032:	2301      	movs	r3, #1
}
 8007034:	4618      	mov	r0, r3
 8007036:	3734      	adds	r7, #52	; 0x34
 8007038:	46bd      	mov	sp, r7
 800703a:	bd90      	pop	{r4, r7, pc}

0800703c <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b09a      	sub	sp, #104	; 0x68
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
 8007048:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 800704a:	2300      	movs	r3, #0
 800704c:	667b      	str	r3, [r7, #100]	; 0x64
    pb_extension_t *extensions = NULL;
 800704e:	2300      	movs	r3, #0
 8007050:	663b      	str	r3, [r7, #96]	; 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 8007052:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007056:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    pb_size_t fixed_count_size = 0;
 800705a:	2300      	movs	r3, #0
 800705c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    pb_size_t fixed_count_total_size = 0;
 8007060:	2300      	movs	r3, #0
 8007062:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 8007066:	2300      	movs	r3, #0
 8007068:	643b      	str	r3, [r7, #64]	; 0x40
 800706a:	2300      	movs	r3, #0
 800706c:	647b      	str	r3, [r7, #68]	; 0x44
    const uint32_t allbits = ~(uint32_t)0;
 800706e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007072:	657b      	str	r3, [r7, #84]	; 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 8007074:	f107 0318 	add.w	r3, r7, #24
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	68b9      	ldr	r1, [r7, #8]
 800707c:	4618      	mov	r0, r3
 800707e:	f7fe fea8 	bl	8005dd2 <pb_field_iter_begin>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 8102 	beq.w	800728e <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	f003 0301 	and.w	r3, r3, #1
 8007090:	2b00      	cmp	r3, #0
 8007092:	f040 80fc 	bne.w	800728e <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 8007096:	f107 0318 	add.w	r3, r7, #24
 800709a:	4618      	mov	r0, r3
 800709c:	f7ff ff51 	bl	8006f42 <pb_message_set_to_defaults>
 80070a0:	4603      	mov	r3, r0
 80070a2:	f083 0301 	eor.w	r3, r3, #1
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 80f0 	beq.w	800728e <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d002      	beq.n	80070bc <pb_decode_inner+0x80>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	e000      	b.n	80070be <pb_decode_inner+0x82>
 80070bc:	4b99      	ldr	r3, [pc, #612]	; (8007324 <pb_decode_inner+0x2e8>)
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	60d3      	str	r3, [r2, #12]
 80070c2:	2300      	movs	r3, #0
 80070c4:	e16d      	b.n	80073a2 <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 80070c6:	f107 0312 	add.w	r3, r7, #18
 80070ca:	f107 0214 	add.w	r2, r7, #20
 80070ce:	f107 0113 	add.w	r1, r7, #19
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f7ff f9a9 	bl	800642a <pb_decode_tag>
 80070d8:	4603      	mov	r3, r0
 80070da:	f083 0301 	eor.w	r3, r3, #1
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d005      	beq.n	80070f0 <pb_decode_inner+0xb4>
        {
            if (eof)
 80070e4:	7cbb      	ldrb	r3, [r7, #18]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f040 80d7 	bne.w	800729a <pb_decode_inner+0x25e>
                break;
            else
                return false;
 80070ec:	2300      	movs	r3, #0
 80070ee:	e158      	b.n	80073a2 <pb_decode_inner+0x366>
        }

        if (tag == 0)
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d111      	bne.n	800711a <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f040 80ce 	bne.w	800729e <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d002      	beq.n	8007110 <pb_decode_inner+0xd4>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	e000      	b.n	8007112 <pb_decode_inner+0xd6>
 8007110:	4b85      	ldr	r3, [pc, #532]	; (8007328 <pb_decode_inner+0x2ec>)
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	60d3      	str	r3, [r2, #12]
 8007116:	2300      	movs	r3, #0
 8007118:	e143      	b.n	80073a2 <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	f107 0318 	add.w	r3, r7, #24
 8007120:	4611      	mov	r1, r2
 8007122:	4618      	mov	r0, r3
 8007124:	f7fe feb3 	bl	8005e8e <pb_field_iter_find>
 8007128:	4603      	mov	r3, r0
 800712a:	f083 0301 	eor.w	r3, r3, #1
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d105      	bne.n	8007140 <pb_decode_inner+0x104>
 8007134:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007138:	f003 030f 	and.w	r3, r3, #15
 800713c:	2b0a      	cmp	r3, #10
 800713e:	d13c      	bne.n	80071ba <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 8007140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007142:	2b00      	cmp	r3, #0
 8007144:	d112      	bne.n	800716c <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 8007146:	f107 0318 	add.w	r3, r7, #24
 800714a:	4618      	mov	r0, r3
 800714c:	f7fe fef5 	bl	8005f3a <pb_field_iter_find_extension>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d004      	beq.n	8007160 <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 8007156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	663b      	str	r3, [r7, #96]	; 0x60
                    extension_range_start = iter.tag;
 800715c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800715e:	667b      	str	r3, [r7, #100]	; 0x64
                }

                if (!extensions)
 8007160:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007162:	2b00      	cmp	r3, #0
 8007164:	d102      	bne.n	800716c <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 8007166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800716a:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            if (tag >= extension_range_start)
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007170:	429a      	cmp	r2, r3
 8007172:	d815      	bhi.n	80071a0 <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	64fb      	str	r3, [r7, #76]	; 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 800717a:	6979      	ldr	r1, [r7, #20]
 800717c:	7cfa      	ldrb	r2, [r7, #19]
 800717e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f7ff fde1 	bl	8006d48 <decode_extension>
 8007186:	4603      	mov	r3, r0
 8007188:	f083 0301 	eor.w	r3, r3, #1
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <pb_decode_inner+0x15a>
                    return false;
 8007192:	2300      	movs	r3, #0
 8007194:	e105      	b.n	80073a2 <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800719c:	429a      	cmp	r2, r3
 800719e:	d173      	bne.n	8007288 <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 80071a0:	7cfb      	ldrb	r3, [r7, #19]
 80071a2:	4619      	mov	r1, r3
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f7ff f96f 	bl	8006488 <pb_skip_field>
 80071aa:	4603      	mov	r3, r0
 80071ac:	f083 0301 	eor.w	r3, r3, #1
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d06a      	beq.n	800728c <pb_decode_inner+0x250>
                return false;
 80071b6:	2300      	movs	r3, #0
 80071b8:	e0f3      	b.n	80073a2 <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 80071ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80071be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80071c2:	2b20      	cmp	r3, #32
 80071c4:	d12e      	bne.n	8007224 <pb_decode_inner+0x1e8>
 80071c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071c8:	f107 0318 	add.w	r3, r7, #24
 80071cc:	3314      	adds	r3, #20
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d128      	bne.n	8007224 <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 80071d2:	8c3b      	ldrh	r3, [r7, #32]
 80071d4:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80071d8:	429a      	cmp	r2, r3
 80071da:	d020      	beq.n	800721e <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 80071dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80071e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d011      	beq.n	800720c <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 80071e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 80071ec:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d00b      	beq.n	800720c <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d002      	beq.n	8007202 <pb_decode_inner+0x1c6>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	e000      	b.n	8007204 <pb_decode_inner+0x1c8>
 8007202:	4b4a      	ldr	r3, [pc, #296]	; (800732c <pb_decode_inner+0x2f0>)
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	60d3      	str	r3, [r2, #12]
 8007208:	2300      	movs	r3, #0
 800720a:	e0ca      	b.n	80073a2 <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 800720c:	8c3b      	ldrh	r3, [r7, #32]
 800720e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                fixed_count_size = 0;
 8007212:	2300      	movs	r3, #0
 8007214:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                fixed_count_total_size = iter.array_size;
 8007218:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800721a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }

            iter.pSize = &fixed_count_size;
 800721e:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 8007222:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 8007224:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007228:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800722c:	2b00      	cmp	r3, #0
 800722e:	d11c      	bne.n	800726a <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8007230:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007232:	2b3f      	cmp	r3, #63	; 0x3f
 8007234:	d819      	bhi.n	800726a <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8007236:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007238:	f003 031f 	and.w	r3, r3, #31
 800723c:	2201      	movs	r2, #1
 800723e:	fa02 f303 	lsl.w	r3, r2, r3
 8007242:	653b      	str	r3, [r7, #80]	; 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 8007244:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007246:	095b      	lsrs	r3, r3, #5
 8007248:	b29b      	uxth	r3, r3
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	3368      	adds	r3, #104	; 0x68
 800724e:	443b      	add	r3, r7
 8007250:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8007254:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007256:	095b      	lsrs	r3, r3, #5
 8007258:	b29b      	uxth	r3, r3
 800725a:	4619      	mov	r1, r3
 800725c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800725e:	431a      	orrs	r2, r3
 8007260:	008b      	lsls	r3, r1, #2
 8007262:	3368      	adds	r3, #104	; 0x68
 8007264:	443b      	add	r3, r7
 8007266:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 800726a:	7cfb      	ldrb	r3, [r7, #19]
 800726c:	f107 0218 	add.w	r2, r7, #24
 8007270:	4619      	mov	r1, r3
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f7ff fcf0 	bl	8006c58 <decode_field>
 8007278:	4603      	mov	r3, r0
 800727a:	f083 0301 	eor.w	r3, r3, #1
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b00      	cmp	r3, #0
 8007282:	d004      	beq.n	800728e <pb_decode_inner+0x252>
            return false;
 8007284:	2300      	movs	r3, #0
 8007286:	e08c      	b.n	80073a2 <pb_decode_inner+0x366>
                    continue;
 8007288:	bf00      	nop
 800728a:	e000      	b.n	800728e <pb_decode_inner+0x252>
            continue;
 800728c:	bf00      	nop
    while (stream->bytes_left)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	2b00      	cmp	r3, #0
 8007294:	f47f af17 	bne.w	80070c6 <pb_decode_inner+0x8a>
 8007298:	e002      	b.n	80072a0 <pb_decode_inner+0x264>
                break;
 800729a:	bf00      	nop
 800729c:	e000      	b.n	80072a0 <pb_decode_inner+0x264>
            break;
 800729e:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 80072a0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80072a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d011      	beq.n	80072d0 <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 80072ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 80072b0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d00b      	beq.n	80072d0 <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <pb_decode_inner+0x28a>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	e000      	b.n	80072c8 <pb_decode_inner+0x28c>
 80072c6:	4b19      	ldr	r3, [pc, #100]	; (800732c <pb_decode_inner+0x2f0>)
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	60d3      	str	r3, [r2, #12]
 80072cc:	2300      	movs	r3, #0
 80072ce:	e068      	b.n	80073a2 <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	8a5b      	ldrh	r3, [r3, #18]
 80072d4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

        if (req_field_count > 0)
 80072d8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d05f      	beq.n	80073a0 <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 80072e0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80072e4:	2b40      	cmp	r3, #64	; 0x40
 80072e6:	d902      	bls.n	80072ee <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 80072e8:	2340      	movs	r3, #64	; 0x40
 80072ea:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 80072ee:	2300      	movs	r3, #0
 80072f0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80072f4:	e023      	b.n	800733e <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 80072f6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	3368      	adds	r3, #104	; 0x68
 80072fe:	443b      	add	r3, r7
 8007300:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8007304:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007306:	429a      	cmp	r2, r3
 8007308:	d014      	beq.n	8007334 <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d002      	beq.n	8007318 <pb_decode_inner+0x2dc>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	e000      	b.n	800731a <pb_decode_inner+0x2de>
 8007318:	4b05      	ldr	r3, [pc, #20]	; (8007330 <pb_decode_inner+0x2f4>)
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	60d3      	str	r3, [r2, #12]
 800731e:	2300      	movs	r3, #0
 8007320:	e03f      	b.n	80073a2 <pb_decode_inner+0x366>
 8007322:	bf00      	nop
 8007324:	0800abc8 	.word	0x0800abc8
 8007328:	0800ac18 	.word	0x0800ac18
 800732c:	0800ac24 	.word	0x0800ac24
 8007330:	0800ac48 	.word	0x0800ac48
            for (i = 0; i < (req_field_count >> 5); i++)
 8007334:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8007338:	3301      	adds	r3, #1
 800733a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800733e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007342:	095b      	lsrs	r3, r3, #5
 8007344:	b29b      	uxth	r3, r3
 8007346:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 800734a:	429a      	cmp	r2, r3
 800734c:	d3d3      	bcc.n	80072f6 <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 800734e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007352:	f003 031f 	and.w	r3, r3, #31
 8007356:	2b00      	cmp	r3, #0
 8007358:	d022      	beq.n	80073a0 <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 800735a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800735e:	095b      	lsrs	r3, r3, #5
 8007360:	b29b      	uxth	r3, r3
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	3368      	adds	r3, #104	; 0x68
 8007366:	443b      	add	r3, r7
 8007368:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 800736c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007370:	b2db      	uxtb	r3, r3
 8007372:	f003 031f 	and.w	r3, r3, #31
 8007376:	b2db      	uxtb	r3, r3
 8007378:	f1c3 0320 	rsb	r3, r3, #32
 800737c:	b2db      	uxtb	r3, r3
 800737e:	4619      	mov	r1, r3
 8007380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007382:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8007384:	429a      	cmp	r2, r3
 8007386:	d00b      	beq.n	80073a0 <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d002      	beq.n	8007396 <pb_decode_inner+0x35a>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	e000      	b.n	8007398 <pb_decode_inner+0x35c>
 8007396:	4b05      	ldr	r3, [pc, #20]	; (80073ac <pb_decode_inner+0x370>)
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	60d3      	str	r3, [r2, #12]
 800739c:	2300      	movs	r3, #0
 800739e:	e000      	b.n	80073a2 <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 80073a0:	2301      	movs	r3, #1
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3768      	adds	r7, #104	; 0x68
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	0800ac48 	.word	0x0800ac48

080073b0 <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 80073bc:	2300      	movs	r3, #0
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	68b9      	ldr	r1, [r7, #8]
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f7ff fe3a 	bl	800703c <pb_decode_inner>
 80073c8:	4603      	mov	r3, r0
 80073ca:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 80073cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3718      	adds	r7, #24
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
 80073de:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 80073e0:	f107 030c 	add.w	r3, r7, #12
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7fe ff70 	bl	80062cc <pb_decode_varint32>
 80073ec:	4603      	mov	r3, r0
 80073ee:	f083 0301 	eor.w	r3, r3, #1
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <pb_decode_bool+0x26>
        return false;
 80073f8:	2300      	movs	r3, #0
 80073fa:	e008      	b.n	800740e <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	bf14      	ite	ne
 8007402:	2301      	movne	r3, #1
 8007404:	2300      	moveq	r3, #0
 8007406:	b2da      	uxtb	r2, r3
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	701a      	strb	r2, [r3, #0]
    return true;
 800740c:	2301      	movs	r3, #1
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 8007416:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 8007422:	f107 0308 	add.w	r3, r7, #8
 8007426:	4619      	mov	r1, r3
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7fe ff5f 	bl	80062ec <pb_decode_varint>
 800742e:	4603      	mov	r3, r0
 8007430:	f083 0301 	eor.w	r3, r3, #1
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <pb_decode_svarint+0x28>
        return false;
 800743a:	2300      	movs	r3, #0
 800743c:	e029      	b.n	8007492 <pb_decode_svarint+0x7c>
    
    if (value & 1)
 800743e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007442:	f002 0401 	and.w	r4, r2, #1
 8007446:	2500      	movs	r5, #0
 8007448:	ea54 0305 	orrs.w	r3, r4, r5
 800744c:	d013      	beq.n	8007476 <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 800744e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007452:	f04f 0200 	mov.w	r2, #0
 8007456:	f04f 0300 	mov.w	r3, #0
 800745a:	0842      	lsrs	r2, r0, #1
 800745c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8007460:	084b      	lsrs	r3, r1, #1
 8007462:	ea6f 0802 	mvn.w	r8, r2
 8007466:	ea6f 0903 	mvn.w	r9, r3
 800746a:	4642      	mov	r2, r8
 800746c:	464b      	mov	r3, r9
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	e9c1 2300 	strd	r2, r3, [r1]
 8007474:	e00c      	b.n	8007490 <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 8007476:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800747a:	f04f 0200 	mov.w	r2, #0
 800747e:	f04f 0300 	mov.w	r3, #0
 8007482:	0842      	lsrs	r2, r0, #1
 8007484:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8007488:	084b      	lsrs	r3, r1, #1
 800748a:	6839      	ldr	r1, [r7, #0]
 800748c:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 8007490:	2301      	movs	r3, #1
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800749c <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 80074a6:	f107 030c 	add.w	r3, r7, #12
 80074aa:	2204      	movs	r2, #4
 80074ac:	4619      	mov	r1, r3
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7fe fd92 	bl	8005fd8 <pb_read>
 80074b4:	4603      	mov	r3, r0
 80074b6:	f083 0301 	eor.w	r3, r3, #1
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <pb_decode_fixed32+0x28>
        return false;
 80074c0:	2300      	movs	r3, #0
 80074c2:	e003      	b.n	80074cc <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 80074ca:	2301      	movs	r3, #1
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 80074de:	f107 0308 	add.w	r3, r7, #8
 80074e2:	2208      	movs	r2, #8
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f7fe fd76 	bl	8005fd8 <pb_read>
 80074ec:	4603      	mov	r3, r0
 80074ee:	f083 0301 	eor.w	r3, r3, #1
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d001      	beq.n	80074fc <pb_decode_fixed64+0x28>
        return false;
 80074f8:	2300      	movs	r3, #0
 80074fa:	e005      	b.n	8007508 <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 80074fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 8007506:	2301      	movs	r3, #1
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	4619      	mov	r1, r3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7ff ff58 	bl	80073d6 <pb_decode_bool>
 8007526:	4603      	mov	r3, r0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8007530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007534:	b094      	sub	sp, #80	; 0x50
 8007536:	af00      	add	r7, sp, #0
 8007538:	6278      	str	r0, [r7, #36]	; 0x24
 800753a:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	7d9b      	ldrb	r3, [r3, #22]
 8007540:	f003 030f 	and.w	r3, r3, #15
 8007544:	2b02      	cmp	r3, #2
 8007546:	d179      	bne.n	800763c <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 8007548:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800754c:	4619      	mov	r1, r3
 800754e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007550:	f7fe fecc 	bl	80062ec <pb_decode_varint>
 8007554:	4603      	mov	r3, r0
 8007556:	f083 0301 	eor.w	r3, r3, #1
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	d001      	beq.n	8007564 <pb_dec_varint+0x34>
            return false;
 8007560:	2300      	movs	r3, #0
 8007562:	e107      	b.n	8007774 <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 8007564:	6a3b      	ldr	r3, [r7, #32]
 8007566:	8a5b      	ldrh	r3, [r3, #18]
 8007568:	2b08      	cmp	r3, #8
 800756a:	d10a      	bne.n	8007582 <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	69d9      	ldr	r1, [r3, #28]
 8007570:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007574:	e9c1 2300 	strd	r2, r3, [r1]
 8007578:	e9d1 2300 	ldrd	r2, r3, [r1]
 800757c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8007580:	e046      	b.n	8007610 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	8a5b      	ldrh	r3, [r3, #18]
 8007586:	2b04      	cmp	r3, #4
 8007588:	d10e      	bne.n	80075a8 <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 800758a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800758e:	6a3b      	ldr	r3, [r7, #32]
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	4602      	mov	r2, r0
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2200      	movs	r2, #0
 800759a:	613b      	str	r3, [r7, #16]
 800759c:	617a      	str	r2, [r7, #20]
 800759e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80075a2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 80075a6:	e033      	b.n	8007610 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 80075a8:	6a3b      	ldr	r3, [r7, #32]
 80075aa:	8a5b      	ldrh	r3, [r3, #18]
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d10f      	bne.n	80075d0 <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 80075b0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	b282      	uxth	r2, r0
 80075ba:	801a      	strh	r2, [r3, #0]
 80075bc:	881b      	ldrh	r3, [r3, #0]
 80075be:	b29b      	uxth	r3, r3
 80075c0:	2200      	movs	r2, #0
 80075c2:	60bb      	str	r3, [r7, #8]
 80075c4:	60fa      	str	r2, [r7, #12]
 80075c6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80075ca:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 80075ce:	e01f      	b.n	8007610 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 80075d0:	6a3b      	ldr	r3, [r7, #32]
 80075d2:	8a5b      	ldrh	r3, [r3, #18]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d10f      	bne.n	80075f8 <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 80075d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	69db      	ldr	r3, [r3, #28]
 80075e0:	b2c2      	uxtb	r2, r0
 80075e2:	701a      	strb	r2, [r3, #0]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2200      	movs	r2, #0
 80075ea:	603b      	str	r3, [r7, #0]
 80075ec:	607a      	str	r2, [r7, #4]
 80075ee:	e9d7 3400 	ldrd	r3, r4, [r7]
 80075f2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 80075f6:	e00b      	b.n	8007610 <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d002      	beq.n	8007606 <pb_dec_varint+0xd6>
 8007600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	e000      	b.n	8007608 <pb_dec_varint+0xd8>
 8007606:	4b5e      	ldr	r3, [pc, #376]	; (8007780 <pb_dec_varint+0x250>)
 8007608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800760a:	60d3      	str	r3, [r2, #12]
 800760c:	2300      	movs	r3, #0
 800760e:	e0b1      	b.n	8007774 <pb_dec_varint+0x244>

        if (clamped != value)
 8007610:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007614:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007618:	4299      	cmp	r1, r3
 800761a:	bf08      	it	eq
 800761c:	4290      	cmpeq	r0, r2
 800761e:	d00b      	beq.n	8007638 <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d002      	beq.n	800762e <pb_dec_varint+0xfe>
 8007628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	e000      	b.n	8007630 <pb_dec_varint+0x100>
 800762e:	4b55      	ldr	r3, [pc, #340]	; (8007784 <pb_dec_varint+0x254>)
 8007630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007632:	60d3      	str	r3, [r2, #12]
 8007634:	2300      	movs	r3, #0
 8007636:	e09d      	b.n	8007774 <pb_dec_varint+0x244>

        return true;
 8007638:	2301      	movs	r3, #1
 800763a:	e09b      	b.n	8007774 <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	7d9b      	ldrb	r3, [r3, #22]
 8007640:	f003 030f 	and.w	r3, r3, #15
 8007644:	2b03      	cmp	r3, #3
 8007646:	d10d      	bne.n	8007664 <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 8007648:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800764c:	4619      	mov	r1, r3
 800764e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007650:	f7ff fee1 	bl	8007416 <pb_decode_svarint>
 8007654:	4603      	mov	r3, r0
 8007656:	f083 0301 	eor.w	r3, r3, #1
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b00      	cmp	r3, #0
 800765e:	d022      	beq.n	80076a6 <pb_dec_varint+0x176>
                return false;
 8007660:	2300      	movs	r3, #0
 8007662:	e087      	b.n	8007774 <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 8007664:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007668:	4619      	mov	r1, r3
 800766a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800766c:	f7fe fe3e 	bl	80062ec <pb_decode_varint>
 8007670:	4603      	mov	r3, r0
 8007672:	f083 0301 	eor.w	r3, r3, #1
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <pb_dec_varint+0x150>
                return false;
 800767c:	2300      	movs	r3, #0
 800767e:	e079      	b.n	8007774 <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 8007680:	6a3b      	ldr	r3, [r7, #32]
 8007682:	8a5b      	ldrh	r3, [r3, #18]
 8007684:	2b08      	cmp	r3, #8
 8007686:	d104      	bne.n	8007692 <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 8007688:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800768c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8007690:	e009      	b.n	80076a6 <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 8007692:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007696:	4613      	mov	r3, r2
 8007698:	17da      	asrs	r2, r3, #31
 800769a:	61bb      	str	r3, [r7, #24]
 800769c:	61fa      	str	r2, [r7, #28]
 800769e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076a2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	8a5b      	ldrh	r3, [r3, #18]
 80076aa:	2b08      	cmp	r3, #8
 80076ac:	d10a      	bne.n	80076c4 <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	69d9      	ldr	r1, [r3, #28]
 80076b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80076b6:	e9c1 2300 	strd	r2, r3, [r1]
 80076ba:	e9d1 2300 	ldrd	r2, r3, [r1]
 80076be:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80076c2:	e042      	b.n	800774a <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	8a5b      	ldrh	r3, [r3, #18]
 80076c8:	2b04      	cmp	r3, #4
 80076ca:	d10c      	bne.n	80076e6 <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 80076cc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	69db      	ldr	r3, [r3, #28]
 80076d4:	4602      	mov	r2, r0
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	17da      	asrs	r2, r3, #31
 80076dc:	469a      	mov	sl, r3
 80076de:	4693      	mov	fp, r2
 80076e0:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
 80076e4:	e031      	b.n	800774a <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	8a5b      	ldrh	r3, [r3, #18]
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d10e      	bne.n	800770c <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 80076ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	69db      	ldr	r3, [r3, #28]
 80076f6:	b202      	sxth	r2, r0
 80076f8:	801a      	strh	r2, [r3, #0]
 80076fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076fe:	b21b      	sxth	r3, r3
 8007700:	17da      	asrs	r2, r3, #31
 8007702:	4698      	mov	r8, r3
 8007704:	4691      	mov	r9, r2
 8007706:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
 800770a:	e01e      	b.n	800774a <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	8a5b      	ldrh	r3, [r3, #18]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d10e      	bne.n	8007732 <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 8007714:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	b242      	sxtb	r2, r0
 800771e:	701a      	strb	r2, [r3, #0]
 8007720:	f993 3000 	ldrsb.w	r3, [r3]
 8007724:	b25b      	sxtb	r3, r3
 8007726:	17da      	asrs	r2, r3, #31
 8007728:	461c      	mov	r4, r3
 800772a:	4615      	mov	r5, r2
 800772c:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 8007730:	e00b      	b.n	800774a <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8007732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d002      	beq.n	8007740 <pb_dec_varint+0x210>
 800773a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	e000      	b.n	8007742 <pb_dec_varint+0x212>
 8007740:	4b0f      	ldr	r3, [pc, #60]	; (8007780 <pb_dec_varint+0x250>)
 8007742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007744:	60d3      	str	r3, [r2, #12]
 8007746:	2300      	movs	r3, #0
 8007748:	e014      	b.n	8007774 <pb_dec_varint+0x244>

        if (clamped != svalue)
 800774a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800774e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007752:	4299      	cmp	r1, r3
 8007754:	bf08      	it	eq
 8007756:	4290      	cmpeq	r0, r2
 8007758:	d00b      	beq.n	8007772 <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d002      	beq.n	8007768 <pb_dec_varint+0x238>
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	e000      	b.n	800776a <pb_dec_varint+0x23a>
 8007768:	4b06      	ldr	r3, [pc, #24]	; (8007784 <pb_dec_varint+0x254>)
 800776a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800776c:	60d3      	str	r3, [r2, #12]
 800776e:	2300      	movs	r3, #0
 8007770:	e000      	b.n	8007774 <pb_dec_varint+0x244>

        return true;
 8007772:	2301      	movs	r3, #1
    }
}
 8007774:	4618      	mov	r0, r3
 8007776:	3750      	adds	r7, #80	; 0x50
 8007778:	46bd      	mov	sp, r7
 800777a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800777e:	bf00      	nop
 8007780:	0800ac60 	.word	0x0800ac60
 8007784:	0800ac74 	.word	0x0800ac74

08007788 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 8007792:	f107 030c 	add.w	r3, r7, #12
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7fe fd97 	bl	80062cc <pb_decode_varint32>
 800779e:	4603      	mov	r3, r0
 80077a0:	f083 0301 	eor.w	r3, r3, #1
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <pb_dec_bytes+0x26>
        return false;
 80077aa:	2300      	movs	r3, #0
 80077ac:	e055      	b.n	800785a <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077b4:	d30b      	bcc.n	80077ce <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d002      	beq.n	80077c4 <pb_dec_bytes+0x3c>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	e000      	b.n	80077c6 <pb_dec_bytes+0x3e>
 80077c4:	4b27      	ldr	r3, [pc, #156]	; (8007864 <pb_dec_bytes+0xdc>)
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	60d3      	str	r3, [r2, #12]
 80077ca:	2300      	movs	r3, #0
 80077cc:	e045      	b.n	800785a <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3302      	adds	r3, #2
 80077d2:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d20b      	bcs.n	80077f4 <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <pb_dec_bytes+0x62>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	e000      	b.n	80077ec <pb_dec_bytes+0x64>
 80077ea:	4b1f      	ldr	r3, [pc, #124]	; (8007868 <pb_dec_bytes+0xe0>)
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	60d3      	str	r3, [r2, #12]
 80077f0:	2300      	movs	r3, #0
 80077f2:	e032      	b.n	800785a <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	7d9b      	ldrb	r3, [r3, #22]
 80077f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80077fc:	2b80      	cmp	r3, #128	; 0x80
 80077fe:	d10b      	bne.n	8007818 <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <pb_dec_bytes+0x86>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	e000      	b.n	8007810 <pb_dec_bytes+0x88>
 800780e:	4b17      	ldr	r3, [pc, #92]	; (800786c <pb_dec_bytes+0xe4>)
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	60d3      	str	r3, [r2, #12]
 8007814:	2300      	movs	r3, #0
 8007816:	e020      	b.n	800785a <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	8a5b      	ldrh	r3, [r3, #18]
 800781c:	461a      	mov	r2, r3
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	4293      	cmp	r3, r2
 8007822:	d90b      	bls.n	800783c <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <pb_dec_bytes+0xaa>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	e000      	b.n	8007834 <pb_dec_bytes+0xac>
 8007832:	4b0c      	ldr	r3, [pc, #48]	; (8007864 <pb_dec_bytes+0xdc>)
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	60d3      	str	r3, [r2, #12]
 8007838:	2300      	movs	r3, #0
 800783a:	e00e      	b.n	800785a <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	69db      	ldr	r3, [r3, #28]
 8007840:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	b29a      	uxth	r2, r3
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	3302      	adds	r3, #2
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7fe fbc0 	bl	8005fd8 <pb_read>
 8007858:	4603      	mov	r3, r0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3718      	adds	r7, #24
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	0800ac88 	.word	0x0800ac88
 8007868:	0800ac98 	.word	0x0800ac98
 800786c:	0800abe0 	.word	0x0800abe0

08007870 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 8007880:	f107 030c 	add.w	r3, r7, #12
 8007884:	4619      	mov	r1, r3
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f7fe fd20 	bl	80062cc <pb_decode_varint32>
 800788c:	4603      	mov	r3, r0
 800788e:	f083 0301 	eor.w	r3, r3, #1
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <pb_dec_string+0x2c>
        return false;
 8007898:	2300      	movs	r3, #0
 800789a:	e05a      	b.n	8007952 <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078a2:	d10b      	bne.n	80078bc <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <pb_dec_string+0x42>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	e000      	b.n	80078b4 <pb_dec_string+0x44>
 80078b2:	4b2a      	ldr	r3, [pc, #168]	; (800795c <pb_dec_string+0xec>)
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	60d3      	str	r3, [r2, #12]
 80078b8:	2300      	movs	r3, #0
 80078ba:	e04a      	b.n	8007952 <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	3301      	adds	r3, #1
 80078c0:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d20b      	bcs.n	80078e2 <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d002      	beq.n	80078d8 <pb_dec_string+0x68>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	e000      	b.n	80078da <pb_dec_string+0x6a>
 80078d8:	4b20      	ldr	r3, [pc, #128]	; (800795c <pb_dec_string+0xec>)
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	60d3      	str	r3, [r2, #12]
 80078de:	2300      	movs	r3, #0
 80078e0:	e037      	b.n	8007952 <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	7d9b      	ldrb	r3, [r3, #22]
 80078e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80078ea:	2b80      	cmp	r3, #128	; 0x80
 80078ec:	d10b      	bne.n	8007906 <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d002      	beq.n	80078fc <pb_dec_string+0x8c>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	e000      	b.n	80078fe <pb_dec_string+0x8e>
 80078fc:	4b18      	ldr	r3, [pc, #96]	; (8007960 <pb_dec_string+0xf0>)
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	60d3      	str	r3, [r2, #12]
 8007902:	2300      	movs	r3, #0
 8007904:	e025      	b.n	8007952 <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	8a5b      	ldrh	r3, [r3, #18]
 800790a:	461a      	mov	r2, r3
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	4293      	cmp	r3, r2
 8007910:	d90b      	bls.n	800792a <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d002      	beq.n	8007920 <pb_dec_string+0xb0>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	e000      	b.n	8007922 <pb_dec_string+0xb2>
 8007920:	4b10      	ldr	r3, [pc, #64]	; (8007964 <pb_dec_string+0xf4>)
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	60d3      	str	r3, [r2, #12]
 8007926:	2300      	movs	r3, #0
 8007928:	e013      	b.n	8007952 <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	4413      	add	r3, r2
 8007930:	2200      	movs	r2, #0
 8007932:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	461a      	mov	r2, r3
 8007938:	6979      	ldr	r1, [r7, #20]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7fe fb4c 	bl	8005fd8 <pb_read>
 8007940:	4603      	mov	r3, r0
 8007942:	f083 0301 	eor.w	r3, r3, #1
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <pb_dec_string+0xe0>
        return false;
 800794c:	2300      	movs	r3, #0
 800794e:	e000      	b.n	8007952 <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 8007950:	2301      	movs	r3, #1
}
 8007952:	4618      	mov	r0, r3
 8007954:	3718      	adds	r7, #24
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	0800ac98 	.word	0x0800ac98
 8007960:	0800abe0 	.word	0x0800abe0
 8007964:	0800aca8 	.word	0x0800aca8

08007968 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b08a      	sub	sp, #40	; 0x28
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
    bool status = true;
 8007972:	2301      	movs	r3, #1
 8007974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool submsg_consumed = false;
 8007978:	2300      	movs	r3, #0
 800797a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 800797e:	f107 030c 	add.w	r3, r7, #12
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7fe fe2d 	bl	80065e4 <pb_make_string_substream>
 800798a:	4603      	mov	r3, r0
 800798c:	f083 0301 	eor.w	r3, r3, #1
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <pb_dec_submessage+0x32>
        return false;
 8007996:	2300      	movs	r3, #0
 8007998:	e069      	b.n	8007a6e <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10b      	bne.n	80079ba <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <pb_dec_submessage+0x48>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	e000      	b.n	80079b2 <pb_dec_submessage+0x4a>
 80079b0:	4b31      	ldr	r3, [pc, #196]	; (8007a78 <pb_dec_submessage+0x110>)
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	60d3      	str	r3, [r2, #12]
 80079b6:	2300      	movs	r3, #0
 80079b8:	e059      	b.n	8007a6e <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	7d9b      	ldrb	r3, [r3, #22]
 80079be:	f003 030f 	and.w	r3, r3, #15
 80079c2:	2b09      	cmp	r3, #9
 80079c4:	d11c      	bne.n	8007a00 <pb_dec_submessage+0x98>
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d018      	beq.n	8007a00 <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	6a1b      	ldr	r3, [r3, #32]
 80079d2:	3b08      	subs	r3, #8
 80079d4:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d010      	beq.n	8007a00 <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	69fa      	ldr	r2, [r7, #28]
 80079e4:	3204      	adds	r2, #4
 80079e6:	f107 000c 	add.w	r0, r7, #12
 80079ea:	6839      	ldr	r1, [r7, #0]
 80079ec:	4798      	blx	r3
 80079ee:	4603      	mov	r3, r0
 80079f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if (substream.bytes_left == 0)
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d102      	bne.n	8007a00 <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 80079fa:	2301      	movs	r3, #1
 80079fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 8007a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d022      	beq.n	8007a4e <pb_dec_submessage+0xe6>
 8007a08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a0c:	f083 0301 	eor.w	r3, r3, #1
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d01b      	beq.n	8007a4e <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 8007a16:	2300      	movs	r3, #0
 8007a18:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	7d9b      	ldrb	r3, [r3, #22]
 8007a1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d107      	bne.n	8007a36 <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	7d9b      	ldrb	r3, [r3, #22]
 8007a2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8007a2e:	2b20      	cmp	r3, #32
 8007a30:	d001      	beq.n	8007a36 <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 8007a32:	2301      	movs	r3, #1
 8007a34:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	69da      	ldr	r2, [r3, #28]
 8007a3e:	f107 000c 	add.w	r0, r7, #12
 8007a42:	6a3b      	ldr	r3, [r7, #32]
 8007a44:	f7ff fafa 	bl	800703c <pb_decode_inner>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 8007a4e:	f107 030c 	add.w	r3, r7, #12
 8007a52:	4619      	mov	r1, r3
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f7fe fdff 	bl	8006658 <pb_close_string_substream>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	f083 0301 	eor.w	r3, r3, #1
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <pb_dec_submessage+0x102>
        return false;
 8007a66:	2300      	movs	r3, #0
 8007a68:	e001      	b.n	8007a6e <pb_dec_submessage+0x106>

    return status;
 8007a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3728      	adds	r7, #40	; 0x28
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	0800acb8 	.word	0x0800acb8

08007a7c <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8007a86:	f107 030c 	add.w	r3, r7, #12
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7fe fc1d 	bl	80062cc <pb_decode_varint32>
 8007a92:	4603      	mov	r3, r0
 8007a94:	f083 0301 	eor.w	r3, r3, #1
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <pb_dec_fixed_length_bytes+0x26>
        return false;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	e037      	b.n	8007b12 <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aa8:	d30b      	bcc.n	8007ac2 <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d002      	beq.n	8007ab8 <pb_dec_fixed_length_bytes+0x3c>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	e000      	b.n	8007aba <pb_dec_fixed_length_bytes+0x3e>
 8007ab8:	4b18      	ldr	r3, [pc, #96]	; (8007b1c <pb_dec_fixed_length_bytes+0xa0>)
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	60d3      	str	r3, [r2, #12]
 8007abe:	2300      	movs	r3, #0
 8007ac0:	e027      	b.n	8007b12 <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d109      	bne.n	8007adc <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	69d8      	ldr	r0, [r3, #28]
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	8a5b      	ldrh	r3, [r3, #18]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	f000 f967 	bl	8007da6 <memset>
        return true;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e01a      	b.n	8007b12 <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	8a5b      	ldrh	r3, [r3, #18]
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d00b      	beq.n	8007b00 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <pb_dec_fixed_length_bytes+0x7a>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	e000      	b.n	8007af8 <pb_dec_fixed_length_bytes+0x7c>
 8007af6:	4b0a      	ldr	r3, [pc, #40]	; (8007b20 <pb_dec_fixed_length_bytes+0xa4>)
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	60d3      	str	r3, [r2, #12]
 8007afc:	2300      	movs	r3, #0
 8007afe:	e008      	b.n	8007b12 <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	69d9      	ldr	r1, [r3, #28]
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	8a5b      	ldrh	r3, [r3, #18]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7fe fa64 	bl	8005fd8 <pb_read>
 8007b10:	4603      	mov	r3, r0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	0800ac88 	.word	0x0800ac88
 8007b20:	0800acd4 	.word	0x0800acd4

08007b24 <__errno>:
 8007b24:	4b01      	ldr	r3, [pc, #4]	; (8007b2c <__errno+0x8>)
 8007b26:	6818      	ldr	r0, [r3, #0]
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	20000010 	.word	0x20000010

08007b30 <std>:
 8007b30:	2300      	movs	r3, #0
 8007b32:	b510      	push	{r4, lr}
 8007b34:	4604      	mov	r4, r0
 8007b36:	e9c0 3300 	strd	r3, r3, [r0]
 8007b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b3e:	6083      	str	r3, [r0, #8]
 8007b40:	8181      	strh	r1, [r0, #12]
 8007b42:	6643      	str	r3, [r0, #100]	; 0x64
 8007b44:	81c2      	strh	r2, [r0, #14]
 8007b46:	6183      	str	r3, [r0, #24]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	2208      	movs	r2, #8
 8007b4c:	305c      	adds	r0, #92	; 0x5c
 8007b4e:	f000 f92a 	bl	8007da6 <memset>
 8007b52:	4b05      	ldr	r3, [pc, #20]	; (8007b68 <std+0x38>)
 8007b54:	6263      	str	r3, [r4, #36]	; 0x24
 8007b56:	4b05      	ldr	r3, [pc, #20]	; (8007b6c <std+0x3c>)
 8007b58:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b5a:	4b05      	ldr	r3, [pc, #20]	; (8007b70 <std+0x40>)
 8007b5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b5e:	4b05      	ldr	r3, [pc, #20]	; (8007b74 <std+0x44>)
 8007b60:	6224      	str	r4, [r4, #32]
 8007b62:	6323      	str	r3, [r4, #48]	; 0x30
 8007b64:	bd10      	pop	{r4, pc}
 8007b66:	bf00      	nop
 8007b68:	08008911 	.word	0x08008911
 8007b6c:	08008933 	.word	0x08008933
 8007b70:	0800896b 	.word	0x0800896b
 8007b74:	0800898f 	.word	0x0800898f

08007b78 <_cleanup_r>:
 8007b78:	4901      	ldr	r1, [pc, #4]	; (8007b80 <_cleanup_r+0x8>)
 8007b7a:	f000 b8af 	b.w	8007cdc <_fwalk_reent>
 8007b7e:	bf00      	nop
 8007b80:	08009801 	.word	0x08009801

08007b84 <__sfmoreglue>:
 8007b84:	b570      	push	{r4, r5, r6, lr}
 8007b86:	2268      	movs	r2, #104	; 0x68
 8007b88:	1e4d      	subs	r5, r1, #1
 8007b8a:	4355      	muls	r5, r2
 8007b8c:	460e      	mov	r6, r1
 8007b8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b92:	f000 f931 	bl	8007df8 <_malloc_r>
 8007b96:	4604      	mov	r4, r0
 8007b98:	b140      	cbz	r0, 8007bac <__sfmoreglue+0x28>
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	e9c0 1600 	strd	r1, r6, [r0]
 8007ba0:	300c      	adds	r0, #12
 8007ba2:	60a0      	str	r0, [r4, #8]
 8007ba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ba8:	f000 f8fd 	bl	8007da6 <memset>
 8007bac:	4620      	mov	r0, r4
 8007bae:	bd70      	pop	{r4, r5, r6, pc}

08007bb0 <__sfp_lock_acquire>:
 8007bb0:	4801      	ldr	r0, [pc, #4]	; (8007bb8 <__sfp_lock_acquire+0x8>)
 8007bb2:	f000 b8d8 	b.w	8007d66 <__retarget_lock_acquire_recursive>
 8007bb6:	bf00      	nop
 8007bb8:	20004335 	.word	0x20004335

08007bbc <__sfp_lock_release>:
 8007bbc:	4801      	ldr	r0, [pc, #4]	; (8007bc4 <__sfp_lock_release+0x8>)
 8007bbe:	f000 b8d3 	b.w	8007d68 <__retarget_lock_release_recursive>
 8007bc2:	bf00      	nop
 8007bc4:	20004335 	.word	0x20004335

08007bc8 <__sinit_lock_acquire>:
 8007bc8:	4801      	ldr	r0, [pc, #4]	; (8007bd0 <__sinit_lock_acquire+0x8>)
 8007bca:	f000 b8cc 	b.w	8007d66 <__retarget_lock_acquire_recursive>
 8007bce:	bf00      	nop
 8007bd0:	20004336 	.word	0x20004336

08007bd4 <__sinit_lock_release>:
 8007bd4:	4801      	ldr	r0, [pc, #4]	; (8007bdc <__sinit_lock_release+0x8>)
 8007bd6:	f000 b8c7 	b.w	8007d68 <__retarget_lock_release_recursive>
 8007bda:	bf00      	nop
 8007bdc:	20004336 	.word	0x20004336

08007be0 <__sinit>:
 8007be0:	b510      	push	{r4, lr}
 8007be2:	4604      	mov	r4, r0
 8007be4:	f7ff fff0 	bl	8007bc8 <__sinit_lock_acquire>
 8007be8:	69a3      	ldr	r3, [r4, #24]
 8007bea:	b11b      	cbz	r3, 8007bf4 <__sinit+0x14>
 8007bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bf0:	f7ff bff0 	b.w	8007bd4 <__sinit_lock_release>
 8007bf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007bf8:	6523      	str	r3, [r4, #80]	; 0x50
 8007bfa:	4b13      	ldr	r3, [pc, #76]	; (8007c48 <__sinit+0x68>)
 8007bfc:	4a13      	ldr	r2, [pc, #76]	; (8007c4c <__sinit+0x6c>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c02:	42a3      	cmp	r3, r4
 8007c04:	bf04      	itt	eq
 8007c06:	2301      	moveq	r3, #1
 8007c08:	61a3      	streq	r3, [r4, #24]
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f000 f820 	bl	8007c50 <__sfp>
 8007c10:	6060      	str	r0, [r4, #4]
 8007c12:	4620      	mov	r0, r4
 8007c14:	f000 f81c 	bl	8007c50 <__sfp>
 8007c18:	60a0      	str	r0, [r4, #8]
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f000 f818 	bl	8007c50 <__sfp>
 8007c20:	2200      	movs	r2, #0
 8007c22:	60e0      	str	r0, [r4, #12]
 8007c24:	2104      	movs	r1, #4
 8007c26:	6860      	ldr	r0, [r4, #4]
 8007c28:	f7ff ff82 	bl	8007b30 <std>
 8007c2c:	68a0      	ldr	r0, [r4, #8]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	2109      	movs	r1, #9
 8007c32:	f7ff ff7d 	bl	8007b30 <std>
 8007c36:	68e0      	ldr	r0, [r4, #12]
 8007c38:	2202      	movs	r2, #2
 8007c3a:	2112      	movs	r1, #18
 8007c3c:	f7ff ff78 	bl	8007b30 <std>
 8007c40:	2301      	movs	r3, #1
 8007c42:	61a3      	str	r3, [r4, #24]
 8007c44:	e7d2      	b.n	8007bec <__sinit+0xc>
 8007c46:	bf00      	nop
 8007c48:	0800ad9c 	.word	0x0800ad9c
 8007c4c:	08007b79 	.word	0x08007b79

08007c50 <__sfp>:
 8007c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c52:	4607      	mov	r7, r0
 8007c54:	f7ff ffac 	bl	8007bb0 <__sfp_lock_acquire>
 8007c58:	4b1e      	ldr	r3, [pc, #120]	; (8007cd4 <__sfp+0x84>)
 8007c5a:	681e      	ldr	r6, [r3, #0]
 8007c5c:	69b3      	ldr	r3, [r6, #24]
 8007c5e:	b913      	cbnz	r3, 8007c66 <__sfp+0x16>
 8007c60:	4630      	mov	r0, r6
 8007c62:	f7ff ffbd 	bl	8007be0 <__sinit>
 8007c66:	3648      	adds	r6, #72	; 0x48
 8007c68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	d503      	bpl.n	8007c78 <__sfp+0x28>
 8007c70:	6833      	ldr	r3, [r6, #0]
 8007c72:	b30b      	cbz	r3, 8007cb8 <__sfp+0x68>
 8007c74:	6836      	ldr	r6, [r6, #0]
 8007c76:	e7f7      	b.n	8007c68 <__sfp+0x18>
 8007c78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c7c:	b9d5      	cbnz	r5, 8007cb4 <__sfp+0x64>
 8007c7e:	4b16      	ldr	r3, [pc, #88]	; (8007cd8 <__sfp+0x88>)
 8007c80:	60e3      	str	r3, [r4, #12]
 8007c82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c86:	6665      	str	r5, [r4, #100]	; 0x64
 8007c88:	f000 f86c 	bl	8007d64 <__retarget_lock_init_recursive>
 8007c8c:	f7ff ff96 	bl	8007bbc <__sfp_lock_release>
 8007c90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c98:	6025      	str	r5, [r4, #0]
 8007c9a:	61a5      	str	r5, [r4, #24]
 8007c9c:	2208      	movs	r2, #8
 8007c9e:	4629      	mov	r1, r5
 8007ca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ca4:	f000 f87f 	bl	8007da6 <memset>
 8007ca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007cac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cb4:	3468      	adds	r4, #104	; 0x68
 8007cb6:	e7d9      	b.n	8007c6c <__sfp+0x1c>
 8007cb8:	2104      	movs	r1, #4
 8007cba:	4638      	mov	r0, r7
 8007cbc:	f7ff ff62 	bl	8007b84 <__sfmoreglue>
 8007cc0:	4604      	mov	r4, r0
 8007cc2:	6030      	str	r0, [r6, #0]
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	d1d5      	bne.n	8007c74 <__sfp+0x24>
 8007cc8:	f7ff ff78 	bl	8007bbc <__sfp_lock_release>
 8007ccc:	230c      	movs	r3, #12
 8007cce:	603b      	str	r3, [r7, #0]
 8007cd0:	e7ee      	b.n	8007cb0 <__sfp+0x60>
 8007cd2:	bf00      	nop
 8007cd4:	0800ad9c 	.word	0x0800ad9c
 8007cd8:	ffff0001 	.word	0xffff0001

08007cdc <_fwalk_reent>:
 8007cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ce0:	4606      	mov	r6, r0
 8007ce2:	4688      	mov	r8, r1
 8007ce4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007ce8:	2700      	movs	r7, #0
 8007cea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cee:	f1b9 0901 	subs.w	r9, r9, #1
 8007cf2:	d505      	bpl.n	8007d00 <_fwalk_reent+0x24>
 8007cf4:	6824      	ldr	r4, [r4, #0]
 8007cf6:	2c00      	cmp	r4, #0
 8007cf8:	d1f7      	bne.n	8007cea <_fwalk_reent+0xe>
 8007cfa:	4638      	mov	r0, r7
 8007cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d00:	89ab      	ldrh	r3, [r5, #12]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d907      	bls.n	8007d16 <_fwalk_reent+0x3a>
 8007d06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	d003      	beq.n	8007d16 <_fwalk_reent+0x3a>
 8007d0e:	4629      	mov	r1, r5
 8007d10:	4630      	mov	r0, r6
 8007d12:	47c0      	blx	r8
 8007d14:	4307      	orrs	r7, r0
 8007d16:	3568      	adds	r5, #104	; 0x68
 8007d18:	e7e9      	b.n	8007cee <_fwalk_reent+0x12>
	...

08007d1c <__libc_init_array>:
 8007d1c:	b570      	push	{r4, r5, r6, lr}
 8007d1e:	4d0d      	ldr	r5, [pc, #52]	; (8007d54 <__libc_init_array+0x38>)
 8007d20:	4c0d      	ldr	r4, [pc, #52]	; (8007d58 <__libc_init_array+0x3c>)
 8007d22:	1b64      	subs	r4, r4, r5
 8007d24:	10a4      	asrs	r4, r4, #2
 8007d26:	2600      	movs	r6, #0
 8007d28:	42a6      	cmp	r6, r4
 8007d2a:	d109      	bne.n	8007d40 <__libc_init_array+0x24>
 8007d2c:	4d0b      	ldr	r5, [pc, #44]	; (8007d5c <__libc_init_array+0x40>)
 8007d2e:	4c0c      	ldr	r4, [pc, #48]	; (8007d60 <__libc_init_array+0x44>)
 8007d30:	f002 feac 	bl	800aa8c <_init>
 8007d34:	1b64      	subs	r4, r4, r5
 8007d36:	10a4      	asrs	r4, r4, #2
 8007d38:	2600      	movs	r6, #0
 8007d3a:	42a6      	cmp	r6, r4
 8007d3c:	d105      	bne.n	8007d4a <__libc_init_array+0x2e>
 8007d3e:	bd70      	pop	{r4, r5, r6, pc}
 8007d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d44:	4798      	blx	r3
 8007d46:	3601      	adds	r6, #1
 8007d48:	e7ee      	b.n	8007d28 <__libc_init_array+0xc>
 8007d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d4e:	4798      	blx	r3
 8007d50:	3601      	adds	r6, #1
 8007d52:	e7f2      	b.n	8007d3a <__libc_init_array+0x1e>
 8007d54:	0800b11c 	.word	0x0800b11c
 8007d58:	0800b11c 	.word	0x0800b11c
 8007d5c:	0800b11c 	.word	0x0800b11c
 8007d60:	0800b120 	.word	0x0800b120

08007d64 <__retarget_lock_init_recursive>:
 8007d64:	4770      	bx	lr

08007d66 <__retarget_lock_acquire_recursive>:
 8007d66:	4770      	bx	lr

08007d68 <__retarget_lock_release_recursive>:
 8007d68:	4770      	bx	lr

08007d6a <memcmp>:
 8007d6a:	b510      	push	{r4, lr}
 8007d6c:	3901      	subs	r1, #1
 8007d6e:	4402      	add	r2, r0
 8007d70:	4290      	cmp	r0, r2
 8007d72:	d101      	bne.n	8007d78 <memcmp+0xe>
 8007d74:	2000      	movs	r0, #0
 8007d76:	e005      	b.n	8007d84 <memcmp+0x1a>
 8007d78:	7803      	ldrb	r3, [r0, #0]
 8007d7a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007d7e:	42a3      	cmp	r3, r4
 8007d80:	d001      	beq.n	8007d86 <memcmp+0x1c>
 8007d82:	1b18      	subs	r0, r3, r4
 8007d84:	bd10      	pop	{r4, pc}
 8007d86:	3001      	adds	r0, #1
 8007d88:	e7f2      	b.n	8007d70 <memcmp+0x6>

08007d8a <memcpy>:
 8007d8a:	440a      	add	r2, r1
 8007d8c:	4291      	cmp	r1, r2
 8007d8e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007d92:	d100      	bne.n	8007d96 <memcpy+0xc>
 8007d94:	4770      	bx	lr
 8007d96:	b510      	push	{r4, lr}
 8007d98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007da0:	4291      	cmp	r1, r2
 8007da2:	d1f9      	bne.n	8007d98 <memcpy+0xe>
 8007da4:	bd10      	pop	{r4, pc}

08007da6 <memset>:
 8007da6:	4402      	add	r2, r0
 8007da8:	4603      	mov	r3, r0
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d100      	bne.n	8007db0 <memset+0xa>
 8007dae:	4770      	bx	lr
 8007db0:	f803 1b01 	strb.w	r1, [r3], #1
 8007db4:	e7f9      	b.n	8007daa <memset+0x4>
	...

08007db8 <sbrk_aligned>:
 8007db8:	b570      	push	{r4, r5, r6, lr}
 8007dba:	4e0e      	ldr	r6, [pc, #56]	; (8007df4 <sbrk_aligned+0x3c>)
 8007dbc:	460c      	mov	r4, r1
 8007dbe:	6831      	ldr	r1, [r6, #0]
 8007dc0:	4605      	mov	r5, r0
 8007dc2:	b911      	cbnz	r1, 8007dca <sbrk_aligned+0x12>
 8007dc4:	f000 fd60 	bl	8008888 <_sbrk_r>
 8007dc8:	6030      	str	r0, [r6, #0]
 8007dca:	4621      	mov	r1, r4
 8007dcc:	4628      	mov	r0, r5
 8007dce:	f000 fd5b 	bl	8008888 <_sbrk_r>
 8007dd2:	1c43      	adds	r3, r0, #1
 8007dd4:	d00a      	beq.n	8007dec <sbrk_aligned+0x34>
 8007dd6:	1cc4      	adds	r4, r0, #3
 8007dd8:	f024 0403 	bic.w	r4, r4, #3
 8007ddc:	42a0      	cmp	r0, r4
 8007dde:	d007      	beq.n	8007df0 <sbrk_aligned+0x38>
 8007de0:	1a21      	subs	r1, r4, r0
 8007de2:	4628      	mov	r0, r5
 8007de4:	f000 fd50 	bl	8008888 <_sbrk_r>
 8007de8:	3001      	adds	r0, #1
 8007dea:	d101      	bne.n	8007df0 <sbrk_aligned+0x38>
 8007dec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007df0:	4620      	mov	r0, r4
 8007df2:	bd70      	pop	{r4, r5, r6, pc}
 8007df4:	2000433c 	.word	0x2000433c

08007df8 <_malloc_r>:
 8007df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dfc:	1ccd      	adds	r5, r1, #3
 8007dfe:	f025 0503 	bic.w	r5, r5, #3
 8007e02:	3508      	adds	r5, #8
 8007e04:	2d0c      	cmp	r5, #12
 8007e06:	bf38      	it	cc
 8007e08:	250c      	movcc	r5, #12
 8007e0a:	2d00      	cmp	r5, #0
 8007e0c:	4607      	mov	r7, r0
 8007e0e:	db01      	blt.n	8007e14 <_malloc_r+0x1c>
 8007e10:	42a9      	cmp	r1, r5
 8007e12:	d905      	bls.n	8007e20 <_malloc_r+0x28>
 8007e14:	230c      	movs	r3, #12
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	2600      	movs	r6, #0
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e20:	4e2e      	ldr	r6, [pc, #184]	; (8007edc <_malloc_r+0xe4>)
 8007e22:	f001 fd47 	bl	80098b4 <__malloc_lock>
 8007e26:	6833      	ldr	r3, [r6, #0]
 8007e28:	461c      	mov	r4, r3
 8007e2a:	bb34      	cbnz	r4, 8007e7a <_malloc_r+0x82>
 8007e2c:	4629      	mov	r1, r5
 8007e2e:	4638      	mov	r0, r7
 8007e30:	f7ff ffc2 	bl	8007db8 <sbrk_aligned>
 8007e34:	1c43      	adds	r3, r0, #1
 8007e36:	4604      	mov	r4, r0
 8007e38:	d14d      	bne.n	8007ed6 <_malloc_r+0xde>
 8007e3a:	6834      	ldr	r4, [r6, #0]
 8007e3c:	4626      	mov	r6, r4
 8007e3e:	2e00      	cmp	r6, #0
 8007e40:	d140      	bne.n	8007ec4 <_malloc_r+0xcc>
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	4631      	mov	r1, r6
 8007e46:	4638      	mov	r0, r7
 8007e48:	eb04 0803 	add.w	r8, r4, r3
 8007e4c:	f000 fd1c 	bl	8008888 <_sbrk_r>
 8007e50:	4580      	cmp	r8, r0
 8007e52:	d13a      	bne.n	8007eca <_malloc_r+0xd2>
 8007e54:	6821      	ldr	r1, [r4, #0]
 8007e56:	3503      	adds	r5, #3
 8007e58:	1a6d      	subs	r5, r5, r1
 8007e5a:	f025 0503 	bic.w	r5, r5, #3
 8007e5e:	3508      	adds	r5, #8
 8007e60:	2d0c      	cmp	r5, #12
 8007e62:	bf38      	it	cc
 8007e64:	250c      	movcc	r5, #12
 8007e66:	4629      	mov	r1, r5
 8007e68:	4638      	mov	r0, r7
 8007e6a:	f7ff ffa5 	bl	8007db8 <sbrk_aligned>
 8007e6e:	3001      	adds	r0, #1
 8007e70:	d02b      	beq.n	8007eca <_malloc_r+0xd2>
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	442b      	add	r3, r5
 8007e76:	6023      	str	r3, [r4, #0]
 8007e78:	e00e      	b.n	8007e98 <_malloc_r+0xa0>
 8007e7a:	6822      	ldr	r2, [r4, #0]
 8007e7c:	1b52      	subs	r2, r2, r5
 8007e7e:	d41e      	bmi.n	8007ebe <_malloc_r+0xc6>
 8007e80:	2a0b      	cmp	r2, #11
 8007e82:	d916      	bls.n	8007eb2 <_malloc_r+0xba>
 8007e84:	1961      	adds	r1, r4, r5
 8007e86:	42a3      	cmp	r3, r4
 8007e88:	6025      	str	r5, [r4, #0]
 8007e8a:	bf18      	it	ne
 8007e8c:	6059      	strne	r1, [r3, #4]
 8007e8e:	6863      	ldr	r3, [r4, #4]
 8007e90:	bf08      	it	eq
 8007e92:	6031      	streq	r1, [r6, #0]
 8007e94:	5162      	str	r2, [r4, r5]
 8007e96:	604b      	str	r3, [r1, #4]
 8007e98:	4638      	mov	r0, r7
 8007e9a:	f104 060b 	add.w	r6, r4, #11
 8007e9e:	f001 fd0f 	bl	80098c0 <__malloc_unlock>
 8007ea2:	f026 0607 	bic.w	r6, r6, #7
 8007ea6:	1d23      	adds	r3, r4, #4
 8007ea8:	1af2      	subs	r2, r6, r3
 8007eaa:	d0b6      	beq.n	8007e1a <_malloc_r+0x22>
 8007eac:	1b9b      	subs	r3, r3, r6
 8007eae:	50a3      	str	r3, [r4, r2]
 8007eb0:	e7b3      	b.n	8007e1a <_malloc_r+0x22>
 8007eb2:	6862      	ldr	r2, [r4, #4]
 8007eb4:	42a3      	cmp	r3, r4
 8007eb6:	bf0c      	ite	eq
 8007eb8:	6032      	streq	r2, [r6, #0]
 8007eba:	605a      	strne	r2, [r3, #4]
 8007ebc:	e7ec      	b.n	8007e98 <_malloc_r+0xa0>
 8007ebe:	4623      	mov	r3, r4
 8007ec0:	6864      	ldr	r4, [r4, #4]
 8007ec2:	e7b2      	b.n	8007e2a <_malloc_r+0x32>
 8007ec4:	4634      	mov	r4, r6
 8007ec6:	6876      	ldr	r6, [r6, #4]
 8007ec8:	e7b9      	b.n	8007e3e <_malloc_r+0x46>
 8007eca:	230c      	movs	r3, #12
 8007ecc:	603b      	str	r3, [r7, #0]
 8007ece:	4638      	mov	r0, r7
 8007ed0:	f001 fcf6 	bl	80098c0 <__malloc_unlock>
 8007ed4:	e7a1      	b.n	8007e1a <_malloc_r+0x22>
 8007ed6:	6025      	str	r5, [r4, #0]
 8007ed8:	e7de      	b.n	8007e98 <_malloc_r+0xa0>
 8007eda:	bf00      	nop
 8007edc:	20004338 	.word	0x20004338

08007ee0 <__cvt>:
 8007ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee4:	ec55 4b10 	vmov	r4, r5, d0
 8007ee8:	2d00      	cmp	r5, #0
 8007eea:	460e      	mov	r6, r1
 8007eec:	4619      	mov	r1, r3
 8007eee:	462b      	mov	r3, r5
 8007ef0:	bfbb      	ittet	lt
 8007ef2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007ef6:	461d      	movlt	r5, r3
 8007ef8:	2300      	movge	r3, #0
 8007efa:	232d      	movlt	r3, #45	; 0x2d
 8007efc:	700b      	strb	r3, [r1, #0]
 8007efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007f04:	4691      	mov	r9, r2
 8007f06:	f023 0820 	bic.w	r8, r3, #32
 8007f0a:	bfbc      	itt	lt
 8007f0c:	4622      	movlt	r2, r4
 8007f0e:	4614      	movlt	r4, r2
 8007f10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f14:	d005      	beq.n	8007f22 <__cvt+0x42>
 8007f16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f1a:	d100      	bne.n	8007f1e <__cvt+0x3e>
 8007f1c:	3601      	adds	r6, #1
 8007f1e:	2102      	movs	r1, #2
 8007f20:	e000      	b.n	8007f24 <__cvt+0x44>
 8007f22:	2103      	movs	r1, #3
 8007f24:	ab03      	add	r3, sp, #12
 8007f26:	9301      	str	r3, [sp, #4]
 8007f28:	ab02      	add	r3, sp, #8
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	ec45 4b10 	vmov	d0, r4, r5
 8007f30:	4653      	mov	r3, sl
 8007f32:	4632      	mov	r2, r6
 8007f34:	f000 fdf0 	bl	8008b18 <_dtoa_r>
 8007f38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007f3c:	4607      	mov	r7, r0
 8007f3e:	d102      	bne.n	8007f46 <__cvt+0x66>
 8007f40:	f019 0f01 	tst.w	r9, #1
 8007f44:	d022      	beq.n	8007f8c <__cvt+0xac>
 8007f46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f4a:	eb07 0906 	add.w	r9, r7, r6
 8007f4e:	d110      	bne.n	8007f72 <__cvt+0x92>
 8007f50:	783b      	ldrb	r3, [r7, #0]
 8007f52:	2b30      	cmp	r3, #48	; 0x30
 8007f54:	d10a      	bne.n	8007f6c <__cvt+0x8c>
 8007f56:	2200      	movs	r2, #0
 8007f58:	2300      	movs	r3, #0
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	f7f8 fdd3 	bl	8000b08 <__aeabi_dcmpeq>
 8007f62:	b918      	cbnz	r0, 8007f6c <__cvt+0x8c>
 8007f64:	f1c6 0601 	rsb	r6, r6, #1
 8007f68:	f8ca 6000 	str.w	r6, [sl]
 8007f6c:	f8da 3000 	ldr.w	r3, [sl]
 8007f70:	4499      	add	r9, r3
 8007f72:	2200      	movs	r2, #0
 8007f74:	2300      	movs	r3, #0
 8007f76:	4620      	mov	r0, r4
 8007f78:	4629      	mov	r1, r5
 8007f7a:	f7f8 fdc5 	bl	8000b08 <__aeabi_dcmpeq>
 8007f7e:	b108      	cbz	r0, 8007f84 <__cvt+0xa4>
 8007f80:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f84:	2230      	movs	r2, #48	; 0x30
 8007f86:	9b03      	ldr	r3, [sp, #12]
 8007f88:	454b      	cmp	r3, r9
 8007f8a:	d307      	bcc.n	8007f9c <__cvt+0xbc>
 8007f8c:	9b03      	ldr	r3, [sp, #12]
 8007f8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f90:	1bdb      	subs	r3, r3, r7
 8007f92:	4638      	mov	r0, r7
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	b004      	add	sp, #16
 8007f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f9c:	1c59      	adds	r1, r3, #1
 8007f9e:	9103      	str	r1, [sp, #12]
 8007fa0:	701a      	strb	r2, [r3, #0]
 8007fa2:	e7f0      	b.n	8007f86 <__cvt+0xa6>

08007fa4 <__exponent>:
 8007fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2900      	cmp	r1, #0
 8007faa:	bfb8      	it	lt
 8007fac:	4249      	neglt	r1, r1
 8007fae:	f803 2b02 	strb.w	r2, [r3], #2
 8007fb2:	bfb4      	ite	lt
 8007fb4:	222d      	movlt	r2, #45	; 0x2d
 8007fb6:	222b      	movge	r2, #43	; 0x2b
 8007fb8:	2909      	cmp	r1, #9
 8007fba:	7042      	strb	r2, [r0, #1]
 8007fbc:	dd2a      	ble.n	8008014 <__exponent+0x70>
 8007fbe:	f10d 0407 	add.w	r4, sp, #7
 8007fc2:	46a4      	mov	ip, r4
 8007fc4:	270a      	movs	r7, #10
 8007fc6:	46a6      	mov	lr, r4
 8007fc8:	460a      	mov	r2, r1
 8007fca:	fb91 f6f7 	sdiv	r6, r1, r7
 8007fce:	fb07 1516 	mls	r5, r7, r6, r1
 8007fd2:	3530      	adds	r5, #48	; 0x30
 8007fd4:	2a63      	cmp	r2, #99	; 0x63
 8007fd6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007fda:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007fde:	4631      	mov	r1, r6
 8007fe0:	dcf1      	bgt.n	8007fc6 <__exponent+0x22>
 8007fe2:	3130      	adds	r1, #48	; 0x30
 8007fe4:	f1ae 0502 	sub.w	r5, lr, #2
 8007fe8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007fec:	1c44      	adds	r4, r0, #1
 8007fee:	4629      	mov	r1, r5
 8007ff0:	4561      	cmp	r1, ip
 8007ff2:	d30a      	bcc.n	800800a <__exponent+0x66>
 8007ff4:	f10d 0209 	add.w	r2, sp, #9
 8007ff8:	eba2 020e 	sub.w	r2, r2, lr
 8007ffc:	4565      	cmp	r5, ip
 8007ffe:	bf88      	it	hi
 8008000:	2200      	movhi	r2, #0
 8008002:	4413      	add	r3, r2
 8008004:	1a18      	subs	r0, r3, r0
 8008006:	b003      	add	sp, #12
 8008008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800800a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800800e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008012:	e7ed      	b.n	8007ff0 <__exponent+0x4c>
 8008014:	2330      	movs	r3, #48	; 0x30
 8008016:	3130      	adds	r1, #48	; 0x30
 8008018:	7083      	strb	r3, [r0, #2]
 800801a:	70c1      	strb	r1, [r0, #3]
 800801c:	1d03      	adds	r3, r0, #4
 800801e:	e7f1      	b.n	8008004 <__exponent+0x60>

08008020 <_printf_float>:
 8008020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008024:	ed2d 8b02 	vpush	{d8}
 8008028:	b08d      	sub	sp, #52	; 0x34
 800802a:	460c      	mov	r4, r1
 800802c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008030:	4616      	mov	r6, r2
 8008032:	461f      	mov	r7, r3
 8008034:	4605      	mov	r5, r0
 8008036:	f001 fc1f 	bl	8009878 <_localeconv_r>
 800803a:	f8d0 a000 	ldr.w	sl, [r0]
 800803e:	4650      	mov	r0, sl
 8008040:	f7f8 f8e6 	bl	8000210 <strlen>
 8008044:	2300      	movs	r3, #0
 8008046:	930a      	str	r3, [sp, #40]	; 0x28
 8008048:	6823      	ldr	r3, [r4, #0]
 800804a:	9305      	str	r3, [sp, #20]
 800804c:	f8d8 3000 	ldr.w	r3, [r8]
 8008050:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008054:	3307      	adds	r3, #7
 8008056:	f023 0307 	bic.w	r3, r3, #7
 800805a:	f103 0208 	add.w	r2, r3, #8
 800805e:	f8c8 2000 	str.w	r2, [r8]
 8008062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008066:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800806a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800806e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008072:	9307      	str	r3, [sp, #28]
 8008074:	f8cd 8018 	str.w	r8, [sp, #24]
 8008078:	ee08 0a10 	vmov	s16, r0
 800807c:	4b9f      	ldr	r3, [pc, #636]	; (80082fc <_printf_float+0x2dc>)
 800807e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008082:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008086:	f7f8 fd71 	bl	8000b6c <__aeabi_dcmpun>
 800808a:	bb88      	cbnz	r0, 80080f0 <_printf_float+0xd0>
 800808c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008090:	4b9a      	ldr	r3, [pc, #616]	; (80082fc <_printf_float+0x2dc>)
 8008092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008096:	f7f8 fd4b 	bl	8000b30 <__aeabi_dcmple>
 800809a:	bb48      	cbnz	r0, 80080f0 <_printf_float+0xd0>
 800809c:	2200      	movs	r2, #0
 800809e:	2300      	movs	r3, #0
 80080a0:	4640      	mov	r0, r8
 80080a2:	4649      	mov	r1, r9
 80080a4:	f7f8 fd3a 	bl	8000b1c <__aeabi_dcmplt>
 80080a8:	b110      	cbz	r0, 80080b0 <_printf_float+0x90>
 80080aa:	232d      	movs	r3, #45	; 0x2d
 80080ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080b0:	4b93      	ldr	r3, [pc, #588]	; (8008300 <_printf_float+0x2e0>)
 80080b2:	4894      	ldr	r0, [pc, #592]	; (8008304 <_printf_float+0x2e4>)
 80080b4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80080b8:	bf94      	ite	ls
 80080ba:	4698      	movls	r8, r3
 80080bc:	4680      	movhi	r8, r0
 80080be:	2303      	movs	r3, #3
 80080c0:	6123      	str	r3, [r4, #16]
 80080c2:	9b05      	ldr	r3, [sp, #20]
 80080c4:	f023 0204 	bic.w	r2, r3, #4
 80080c8:	6022      	str	r2, [r4, #0]
 80080ca:	f04f 0900 	mov.w	r9, #0
 80080ce:	9700      	str	r7, [sp, #0]
 80080d0:	4633      	mov	r3, r6
 80080d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80080d4:	4621      	mov	r1, r4
 80080d6:	4628      	mov	r0, r5
 80080d8:	f000 f9d8 	bl	800848c <_printf_common>
 80080dc:	3001      	adds	r0, #1
 80080de:	f040 8090 	bne.w	8008202 <_printf_float+0x1e2>
 80080e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080e6:	b00d      	add	sp, #52	; 0x34
 80080e8:	ecbd 8b02 	vpop	{d8}
 80080ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f0:	4642      	mov	r2, r8
 80080f2:	464b      	mov	r3, r9
 80080f4:	4640      	mov	r0, r8
 80080f6:	4649      	mov	r1, r9
 80080f8:	f7f8 fd38 	bl	8000b6c <__aeabi_dcmpun>
 80080fc:	b140      	cbz	r0, 8008110 <_printf_float+0xf0>
 80080fe:	464b      	mov	r3, r9
 8008100:	2b00      	cmp	r3, #0
 8008102:	bfbc      	itt	lt
 8008104:	232d      	movlt	r3, #45	; 0x2d
 8008106:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800810a:	487f      	ldr	r0, [pc, #508]	; (8008308 <_printf_float+0x2e8>)
 800810c:	4b7f      	ldr	r3, [pc, #508]	; (800830c <_printf_float+0x2ec>)
 800810e:	e7d1      	b.n	80080b4 <_printf_float+0x94>
 8008110:	6863      	ldr	r3, [r4, #4]
 8008112:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008116:	9206      	str	r2, [sp, #24]
 8008118:	1c5a      	adds	r2, r3, #1
 800811a:	d13f      	bne.n	800819c <_printf_float+0x17c>
 800811c:	2306      	movs	r3, #6
 800811e:	6063      	str	r3, [r4, #4]
 8008120:	9b05      	ldr	r3, [sp, #20]
 8008122:	6861      	ldr	r1, [r4, #4]
 8008124:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008128:	2300      	movs	r3, #0
 800812a:	9303      	str	r3, [sp, #12]
 800812c:	ab0a      	add	r3, sp, #40	; 0x28
 800812e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008132:	ab09      	add	r3, sp, #36	; 0x24
 8008134:	ec49 8b10 	vmov	d0, r8, r9
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	6022      	str	r2, [r4, #0]
 800813c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008140:	4628      	mov	r0, r5
 8008142:	f7ff fecd 	bl	8007ee0 <__cvt>
 8008146:	9b06      	ldr	r3, [sp, #24]
 8008148:	9909      	ldr	r1, [sp, #36]	; 0x24
 800814a:	2b47      	cmp	r3, #71	; 0x47
 800814c:	4680      	mov	r8, r0
 800814e:	d108      	bne.n	8008162 <_printf_float+0x142>
 8008150:	1cc8      	adds	r0, r1, #3
 8008152:	db02      	blt.n	800815a <_printf_float+0x13a>
 8008154:	6863      	ldr	r3, [r4, #4]
 8008156:	4299      	cmp	r1, r3
 8008158:	dd41      	ble.n	80081de <_printf_float+0x1be>
 800815a:	f1ab 0b02 	sub.w	fp, fp, #2
 800815e:	fa5f fb8b 	uxtb.w	fp, fp
 8008162:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008166:	d820      	bhi.n	80081aa <_printf_float+0x18a>
 8008168:	3901      	subs	r1, #1
 800816a:	465a      	mov	r2, fp
 800816c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008170:	9109      	str	r1, [sp, #36]	; 0x24
 8008172:	f7ff ff17 	bl	8007fa4 <__exponent>
 8008176:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008178:	1813      	adds	r3, r2, r0
 800817a:	2a01      	cmp	r2, #1
 800817c:	4681      	mov	r9, r0
 800817e:	6123      	str	r3, [r4, #16]
 8008180:	dc02      	bgt.n	8008188 <_printf_float+0x168>
 8008182:	6822      	ldr	r2, [r4, #0]
 8008184:	07d2      	lsls	r2, r2, #31
 8008186:	d501      	bpl.n	800818c <_printf_float+0x16c>
 8008188:	3301      	adds	r3, #1
 800818a:	6123      	str	r3, [r4, #16]
 800818c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008190:	2b00      	cmp	r3, #0
 8008192:	d09c      	beq.n	80080ce <_printf_float+0xae>
 8008194:	232d      	movs	r3, #45	; 0x2d
 8008196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800819a:	e798      	b.n	80080ce <_printf_float+0xae>
 800819c:	9a06      	ldr	r2, [sp, #24]
 800819e:	2a47      	cmp	r2, #71	; 0x47
 80081a0:	d1be      	bne.n	8008120 <_printf_float+0x100>
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1bc      	bne.n	8008120 <_printf_float+0x100>
 80081a6:	2301      	movs	r3, #1
 80081a8:	e7b9      	b.n	800811e <_printf_float+0xfe>
 80081aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80081ae:	d118      	bne.n	80081e2 <_printf_float+0x1c2>
 80081b0:	2900      	cmp	r1, #0
 80081b2:	6863      	ldr	r3, [r4, #4]
 80081b4:	dd0b      	ble.n	80081ce <_printf_float+0x1ae>
 80081b6:	6121      	str	r1, [r4, #16]
 80081b8:	b913      	cbnz	r3, 80081c0 <_printf_float+0x1a0>
 80081ba:	6822      	ldr	r2, [r4, #0]
 80081bc:	07d0      	lsls	r0, r2, #31
 80081be:	d502      	bpl.n	80081c6 <_printf_float+0x1a6>
 80081c0:	3301      	adds	r3, #1
 80081c2:	440b      	add	r3, r1
 80081c4:	6123      	str	r3, [r4, #16]
 80081c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80081c8:	f04f 0900 	mov.w	r9, #0
 80081cc:	e7de      	b.n	800818c <_printf_float+0x16c>
 80081ce:	b913      	cbnz	r3, 80081d6 <_printf_float+0x1b6>
 80081d0:	6822      	ldr	r2, [r4, #0]
 80081d2:	07d2      	lsls	r2, r2, #31
 80081d4:	d501      	bpl.n	80081da <_printf_float+0x1ba>
 80081d6:	3302      	adds	r3, #2
 80081d8:	e7f4      	b.n	80081c4 <_printf_float+0x1a4>
 80081da:	2301      	movs	r3, #1
 80081dc:	e7f2      	b.n	80081c4 <_printf_float+0x1a4>
 80081de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80081e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e4:	4299      	cmp	r1, r3
 80081e6:	db05      	blt.n	80081f4 <_printf_float+0x1d4>
 80081e8:	6823      	ldr	r3, [r4, #0]
 80081ea:	6121      	str	r1, [r4, #16]
 80081ec:	07d8      	lsls	r0, r3, #31
 80081ee:	d5ea      	bpl.n	80081c6 <_printf_float+0x1a6>
 80081f0:	1c4b      	adds	r3, r1, #1
 80081f2:	e7e7      	b.n	80081c4 <_printf_float+0x1a4>
 80081f4:	2900      	cmp	r1, #0
 80081f6:	bfd4      	ite	le
 80081f8:	f1c1 0202 	rsble	r2, r1, #2
 80081fc:	2201      	movgt	r2, #1
 80081fe:	4413      	add	r3, r2
 8008200:	e7e0      	b.n	80081c4 <_printf_float+0x1a4>
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	055a      	lsls	r2, r3, #21
 8008206:	d407      	bmi.n	8008218 <_printf_float+0x1f8>
 8008208:	6923      	ldr	r3, [r4, #16]
 800820a:	4642      	mov	r2, r8
 800820c:	4631      	mov	r1, r6
 800820e:	4628      	mov	r0, r5
 8008210:	47b8      	blx	r7
 8008212:	3001      	adds	r0, #1
 8008214:	d12c      	bne.n	8008270 <_printf_float+0x250>
 8008216:	e764      	b.n	80080e2 <_printf_float+0xc2>
 8008218:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800821c:	f240 80e0 	bls.w	80083e0 <_printf_float+0x3c0>
 8008220:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008224:	2200      	movs	r2, #0
 8008226:	2300      	movs	r3, #0
 8008228:	f7f8 fc6e 	bl	8000b08 <__aeabi_dcmpeq>
 800822c:	2800      	cmp	r0, #0
 800822e:	d034      	beq.n	800829a <_printf_float+0x27a>
 8008230:	4a37      	ldr	r2, [pc, #220]	; (8008310 <_printf_float+0x2f0>)
 8008232:	2301      	movs	r3, #1
 8008234:	4631      	mov	r1, r6
 8008236:	4628      	mov	r0, r5
 8008238:	47b8      	blx	r7
 800823a:	3001      	adds	r0, #1
 800823c:	f43f af51 	beq.w	80080e2 <_printf_float+0xc2>
 8008240:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008244:	429a      	cmp	r2, r3
 8008246:	db02      	blt.n	800824e <_printf_float+0x22e>
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	07d8      	lsls	r0, r3, #31
 800824c:	d510      	bpl.n	8008270 <_printf_float+0x250>
 800824e:	ee18 3a10 	vmov	r3, s16
 8008252:	4652      	mov	r2, sl
 8008254:	4631      	mov	r1, r6
 8008256:	4628      	mov	r0, r5
 8008258:	47b8      	blx	r7
 800825a:	3001      	adds	r0, #1
 800825c:	f43f af41 	beq.w	80080e2 <_printf_float+0xc2>
 8008260:	f04f 0800 	mov.w	r8, #0
 8008264:	f104 091a 	add.w	r9, r4, #26
 8008268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800826a:	3b01      	subs	r3, #1
 800826c:	4543      	cmp	r3, r8
 800826e:	dc09      	bgt.n	8008284 <_printf_float+0x264>
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	079b      	lsls	r3, r3, #30
 8008274:	f100 8105 	bmi.w	8008482 <_printf_float+0x462>
 8008278:	68e0      	ldr	r0, [r4, #12]
 800827a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800827c:	4298      	cmp	r0, r3
 800827e:	bfb8      	it	lt
 8008280:	4618      	movlt	r0, r3
 8008282:	e730      	b.n	80080e6 <_printf_float+0xc6>
 8008284:	2301      	movs	r3, #1
 8008286:	464a      	mov	r2, r9
 8008288:	4631      	mov	r1, r6
 800828a:	4628      	mov	r0, r5
 800828c:	47b8      	blx	r7
 800828e:	3001      	adds	r0, #1
 8008290:	f43f af27 	beq.w	80080e2 <_printf_float+0xc2>
 8008294:	f108 0801 	add.w	r8, r8, #1
 8008298:	e7e6      	b.n	8008268 <_printf_float+0x248>
 800829a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800829c:	2b00      	cmp	r3, #0
 800829e:	dc39      	bgt.n	8008314 <_printf_float+0x2f4>
 80082a0:	4a1b      	ldr	r2, [pc, #108]	; (8008310 <_printf_float+0x2f0>)
 80082a2:	2301      	movs	r3, #1
 80082a4:	4631      	mov	r1, r6
 80082a6:	4628      	mov	r0, r5
 80082a8:	47b8      	blx	r7
 80082aa:	3001      	adds	r0, #1
 80082ac:	f43f af19 	beq.w	80080e2 <_printf_float+0xc2>
 80082b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082b4:	4313      	orrs	r3, r2
 80082b6:	d102      	bne.n	80082be <_printf_float+0x29e>
 80082b8:	6823      	ldr	r3, [r4, #0]
 80082ba:	07d9      	lsls	r1, r3, #31
 80082bc:	d5d8      	bpl.n	8008270 <_printf_float+0x250>
 80082be:	ee18 3a10 	vmov	r3, s16
 80082c2:	4652      	mov	r2, sl
 80082c4:	4631      	mov	r1, r6
 80082c6:	4628      	mov	r0, r5
 80082c8:	47b8      	blx	r7
 80082ca:	3001      	adds	r0, #1
 80082cc:	f43f af09 	beq.w	80080e2 <_printf_float+0xc2>
 80082d0:	f04f 0900 	mov.w	r9, #0
 80082d4:	f104 0a1a 	add.w	sl, r4, #26
 80082d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082da:	425b      	negs	r3, r3
 80082dc:	454b      	cmp	r3, r9
 80082de:	dc01      	bgt.n	80082e4 <_printf_float+0x2c4>
 80082e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082e2:	e792      	b.n	800820a <_printf_float+0x1ea>
 80082e4:	2301      	movs	r3, #1
 80082e6:	4652      	mov	r2, sl
 80082e8:	4631      	mov	r1, r6
 80082ea:	4628      	mov	r0, r5
 80082ec:	47b8      	blx	r7
 80082ee:	3001      	adds	r0, #1
 80082f0:	f43f aef7 	beq.w	80080e2 <_printf_float+0xc2>
 80082f4:	f109 0901 	add.w	r9, r9, #1
 80082f8:	e7ee      	b.n	80082d8 <_printf_float+0x2b8>
 80082fa:	bf00      	nop
 80082fc:	7fefffff 	.word	0x7fefffff
 8008300:	0800ada0 	.word	0x0800ada0
 8008304:	0800ada4 	.word	0x0800ada4
 8008308:	0800adac 	.word	0x0800adac
 800830c:	0800ada8 	.word	0x0800ada8
 8008310:	0800adb0 	.word	0x0800adb0
 8008314:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008316:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008318:	429a      	cmp	r2, r3
 800831a:	bfa8      	it	ge
 800831c:	461a      	movge	r2, r3
 800831e:	2a00      	cmp	r2, #0
 8008320:	4691      	mov	r9, r2
 8008322:	dc37      	bgt.n	8008394 <_printf_float+0x374>
 8008324:	f04f 0b00 	mov.w	fp, #0
 8008328:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800832c:	f104 021a 	add.w	r2, r4, #26
 8008330:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008332:	9305      	str	r3, [sp, #20]
 8008334:	eba3 0309 	sub.w	r3, r3, r9
 8008338:	455b      	cmp	r3, fp
 800833a:	dc33      	bgt.n	80083a4 <_printf_float+0x384>
 800833c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008340:	429a      	cmp	r2, r3
 8008342:	db3b      	blt.n	80083bc <_printf_float+0x39c>
 8008344:	6823      	ldr	r3, [r4, #0]
 8008346:	07da      	lsls	r2, r3, #31
 8008348:	d438      	bmi.n	80083bc <_printf_float+0x39c>
 800834a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800834c:	9a05      	ldr	r2, [sp, #20]
 800834e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008350:	1a9a      	subs	r2, r3, r2
 8008352:	eba3 0901 	sub.w	r9, r3, r1
 8008356:	4591      	cmp	r9, r2
 8008358:	bfa8      	it	ge
 800835a:	4691      	movge	r9, r2
 800835c:	f1b9 0f00 	cmp.w	r9, #0
 8008360:	dc35      	bgt.n	80083ce <_printf_float+0x3ae>
 8008362:	f04f 0800 	mov.w	r8, #0
 8008366:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800836a:	f104 0a1a 	add.w	sl, r4, #26
 800836e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008372:	1a9b      	subs	r3, r3, r2
 8008374:	eba3 0309 	sub.w	r3, r3, r9
 8008378:	4543      	cmp	r3, r8
 800837a:	f77f af79 	ble.w	8008270 <_printf_float+0x250>
 800837e:	2301      	movs	r3, #1
 8008380:	4652      	mov	r2, sl
 8008382:	4631      	mov	r1, r6
 8008384:	4628      	mov	r0, r5
 8008386:	47b8      	blx	r7
 8008388:	3001      	adds	r0, #1
 800838a:	f43f aeaa 	beq.w	80080e2 <_printf_float+0xc2>
 800838e:	f108 0801 	add.w	r8, r8, #1
 8008392:	e7ec      	b.n	800836e <_printf_float+0x34e>
 8008394:	4613      	mov	r3, r2
 8008396:	4631      	mov	r1, r6
 8008398:	4642      	mov	r2, r8
 800839a:	4628      	mov	r0, r5
 800839c:	47b8      	blx	r7
 800839e:	3001      	adds	r0, #1
 80083a0:	d1c0      	bne.n	8008324 <_printf_float+0x304>
 80083a2:	e69e      	b.n	80080e2 <_printf_float+0xc2>
 80083a4:	2301      	movs	r3, #1
 80083a6:	4631      	mov	r1, r6
 80083a8:	4628      	mov	r0, r5
 80083aa:	9205      	str	r2, [sp, #20]
 80083ac:	47b8      	blx	r7
 80083ae:	3001      	adds	r0, #1
 80083b0:	f43f ae97 	beq.w	80080e2 <_printf_float+0xc2>
 80083b4:	9a05      	ldr	r2, [sp, #20]
 80083b6:	f10b 0b01 	add.w	fp, fp, #1
 80083ba:	e7b9      	b.n	8008330 <_printf_float+0x310>
 80083bc:	ee18 3a10 	vmov	r3, s16
 80083c0:	4652      	mov	r2, sl
 80083c2:	4631      	mov	r1, r6
 80083c4:	4628      	mov	r0, r5
 80083c6:	47b8      	blx	r7
 80083c8:	3001      	adds	r0, #1
 80083ca:	d1be      	bne.n	800834a <_printf_float+0x32a>
 80083cc:	e689      	b.n	80080e2 <_printf_float+0xc2>
 80083ce:	9a05      	ldr	r2, [sp, #20]
 80083d0:	464b      	mov	r3, r9
 80083d2:	4442      	add	r2, r8
 80083d4:	4631      	mov	r1, r6
 80083d6:	4628      	mov	r0, r5
 80083d8:	47b8      	blx	r7
 80083da:	3001      	adds	r0, #1
 80083dc:	d1c1      	bne.n	8008362 <_printf_float+0x342>
 80083de:	e680      	b.n	80080e2 <_printf_float+0xc2>
 80083e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083e2:	2a01      	cmp	r2, #1
 80083e4:	dc01      	bgt.n	80083ea <_printf_float+0x3ca>
 80083e6:	07db      	lsls	r3, r3, #31
 80083e8:	d538      	bpl.n	800845c <_printf_float+0x43c>
 80083ea:	2301      	movs	r3, #1
 80083ec:	4642      	mov	r2, r8
 80083ee:	4631      	mov	r1, r6
 80083f0:	4628      	mov	r0, r5
 80083f2:	47b8      	blx	r7
 80083f4:	3001      	adds	r0, #1
 80083f6:	f43f ae74 	beq.w	80080e2 <_printf_float+0xc2>
 80083fa:	ee18 3a10 	vmov	r3, s16
 80083fe:	4652      	mov	r2, sl
 8008400:	4631      	mov	r1, r6
 8008402:	4628      	mov	r0, r5
 8008404:	47b8      	blx	r7
 8008406:	3001      	adds	r0, #1
 8008408:	f43f ae6b 	beq.w	80080e2 <_printf_float+0xc2>
 800840c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008410:	2200      	movs	r2, #0
 8008412:	2300      	movs	r3, #0
 8008414:	f7f8 fb78 	bl	8000b08 <__aeabi_dcmpeq>
 8008418:	b9d8      	cbnz	r0, 8008452 <_printf_float+0x432>
 800841a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800841c:	f108 0201 	add.w	r2, r8, #1
 8008420:	3b01      	subs	r3, #1
 8008422:	4631      	mov	r1, r6
 8008424:	4628      	mov	r0, r5
 8008426:	47b8      	blx	r7
 8008428:	3001      	adds	r0, #1
 800842a:	d10e      	bne.n	800844a <_printf_float+0x42a>
 800842c:	e659      	b.n	80080e2 <_printf_float+0xc2>
 800842e:	2301      	movs	r3, #1
 8008430:	4652      	mov	r2, sl
 8008432:	4631      	mov	r1, r6
 8008434:	4628      	mov	r0, r5
 8008436:	47b8      	blx	r7
 8008438:	3001      	adds	r0, #1
 800843a:	f43f ae52 	beq.w	80080e2 <_printf_float+0xc2>
 800843e:	f108 0801 	add.w	r8, r8, #1
 8008442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008444:	3b01      	subs	r3, #1
 8008446:	4543      	cmp	r3, r8
 8008448:	dcf1      	bgt.n	800842e <_printf_float+0x40e>
 800844a:	464b      	mov	r3, r9
 800844c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008450:	e6dc      	b.n	800820c <_printf_float+0x1ec>
 8008452:	f04f 0800 	mov.w	r8, #0
 8008456:	f104 0a1a 	add.w	sl, r4, #26
 800845a:	e7f2      	b.n	8008442 <_printf_float+0x422>
 800845c:	2301      	movs	r3, #1
 800845e:	4642      	mov	r2, r8
 8008460:	e7df      	b.n	8008422 <_printf_float+0x402>
 8008462:	2301      	movs	r3, #1
 8008464:	464a      	mov	r2, r9
 8008466:	4631      	mov	r1, r6
 8008468:	4628      	mov	r0, r5
 800846a:	47b8      	blx	r7
 800846c:	3001      	adds	r0, #1
 800846e:	f43f ae38 	beq.w	80080e2 <_printf_float+0xc2>
 8008472:	f108 0801 	add.w	r8, r8, #1
 8008476:	68e3      	ldr	r3, [r4, #12]
 8008478:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800847a:	1a5b      	subs	r3, r3, r1
 800847c:	4543      	cmp	r3, r8
 800847e:	dcf0      	bgt.n	8008462 <_printf_float+0x442>
 8008480:	e6fa      	b.n	8008278 <_printf_float+0x258>
 8008482:	f04f 0800 	mov.w	r8, #0
 8008486:	f104 0919 	add.w	r9, r4, #25
 800848a:	e7f4      	b.n	8008476 <_printf_float+0x456>

0800848c <_printf_common>:
 800848c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008490:	4616      	mov	r6, r2
 8008492:	4699      	mov	r9, r3
 8008494:	688a      	ldr	r2, [r1, #8]
 8008496:	690b      	ldr	r3, [r1, #16]
 8008498:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800849c:	4293      	cmp	r3, r2
 800849e:	bfb8      	it	lt
 80084a0:	4613      	movlt	r3, r2
 80084a2:	6033      	str	r3, [r6, #0]
 80084a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084a8:	4607      	mov	r7, r0
 80084aa:	460c      	mov	r4, r1
 80084ac:	b10a      	cbz	r2, 80084b2 <_printf_common+0x26>
 80084ae:	3301      	adds	r3, #1
 80084b0:	6033      	str	r3, [r6, #0]
 80084b2:	6823      	ldr	r3, [r4, #0]
 80084b4:	0699      	lsls	r1, r3, #26
 80084b6:	bf42      	ittt	mi
 80084b8:	6833      	ldrmi	r3, [r6, #0]
 80084ba:	3302      	addmi	r3, #2
 80084bc:	6033      	strmi	r3, [r6, #0]
 80084be:	6825      	ldr	r5, [r4, #0]
 80084c0:	f015 0506 	ands.w	r5, r5, #6
 80084c4:	d106      	bne.n	80084d4 <_printf_common+0x48>
 80084c6:	f104 0a19 	add.w	sl, r4, #25
 80084ca:	68e3      	ldr	r3, [r4, #12]
 80084cc:	6832      	ldr	r2, [r6, #0]
 80084ce:	1a9b      	subs	r3, r3, r2
 80084d0:	42ab      	cmp	r3, r5
 80084d2:	dc26      	bgt.n	8008522 <_printf_common+0x96>
 80084d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084d8:	1e13      	subs	r3, r2, #0
 80084da:	6822      	ldr	r2, [r4, #0]
 80084dc:	bf18      	it	ne
 80084de:	2301      	movne	r3, #1
 80084e0:	0692      	lsls	r2, r2, #26
 80084e2:	d42b      	bmi.n	800853c <_printf_common+0xb0>
 80084e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084e8:	4649      	mov	r1, r9
 80084ea:	4638      	mov	r0, r7
 80084ec:	47c0      	blx	r8
 80084ee:	3001      	adds	r0, #1
 80084f0:	d01e      	beq.n	8008530 <_printf_common+0xa4>
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	68e5      	ldr	r5, [r4, #12]
 80084f6:	6832      	ldr	r2, [r6, #0]
 80084f8:	f003 0306 	and.w	r3, r3, #6
 80084fc:	2b04      	cmp	r3, #4
 80084fe:	bf08      	it	eq
 8008500:	1aad      	subeq	r5, r5, r2
 8008502:	68a3      	ldr	r3, [r4, #8]
 8008504:	6922      	ldr	r2, [r4, #16]
 8008506:	bf0c      	ite	eq
 8008508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800850c:	2500      	movne	r5, #0
 800850e:	4293      	cmp	r3, r2
 8008510:	bfc4      	itt	gt
 8008512:	1a9b      	subgt	r3, r3, r2
 8008514:	18ed      	addgt	r5, r5, r3
 8008516:	2600      	movs	r6, #0
 8008518:	341a      	adds	r4, #26
 800851a:	42b5      	cmp	r5, r6
 800851c:	d11a      	bne.n	8008554 <_printf_common+0xc8>
 800851e:	2000      	movs	r0, #0
 8008520:	e008      	b.n	8008534 <_printf_common+0xa8>
 8008522:	2301      	movs	r3, #1
 8008524:	4652      	mov	r2, sl
 8008526:	4649      	mov	r1, r9
 8008528:	4638      	mov	r0, r7
 800852a:	47c0      	blx	r8
 800852c:	3001      	adds	r0, #1
 800852e:	d103      	bne.n	8008538 <_printf_common+0xac>
 8008530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008538:	3501      	adds	r5, #1
 800853a:	e7c6      	b.n	80084ca <_printf_common+0x3e>
 800853c:	18e1      	adds	r1, r4, r3
 800853e:	1c5a      	adds	r2, r3, #1
 8008540:	2030      	movs	r0, #48	; 0x30
 8008542:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008546:	4422      	add	r2, r4
 8008548:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800854c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008550:	3302      	adds	r3, #2
 8008552:	e7c7      	b.n	80084e4 <_printf_common+0x58>
 8008554:	2301      	movs	r3, #1
 8008556:	4622      	mov	r2, r4
 8008558:	4649      	mov	r1, r9
 800855a:	4638      	mov	r0, r7
 800855c:	47c0      	blx	r8
 800855e:	3001      	adds	r0, #1
 8008560:	d0e6      	beq.n	8008530 <_printf_common+0xa4>
 8008562:	3601      	adds	r6, #1
 8008564:	e7d9      	b.n	800851a <_printf_common+0x8e>
	...

08008568 <_printf_i>:
 8008568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800856c:	7e0f      	ldrb	r7, [r1, #24]
 800856e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008570:	2f78      	cmp	r7, #120	; 0x78
 8008572:	4691      	mov	r9, r2
 8008574:	4680      	mov	r8, r0
 8008576:	460c      	mov	r4, r1
 8008578:	469a      	mov	sl, r3
 800857a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800857e:	d807      	bhi.n	8008590 <_printf_i+0x28>
 8008580:	2f62      	cmp	r7, #98	; 0x62
 8008582:	d80a      	bhi.n	800859a <_printf_i+0x32>
 8008584:	2f00      	cmp	r7, #0
 8008586:	f000 80d8 	beq.w	800873a <_printf_i+0x1d2>
 800858a:	2f58      	cmp	r7, #88	; 0x58
 800858c:	f000 80a3 	beq.w	80086d6 <_printf_i+0x16e>
 8008590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008594:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008598:	e03a      	b.n	8008610 <_printf_i+0xa8>
 800859a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800859e:	2b15      	cmp	r3, #21
 80085a0:	d8f6      	bhi.n	8008590 <_printf_i+0x28>
 80085a2:	a101      	add	r1, pc, #4	; (adr r1, 80085a8 <_printf_i+0x40>)
 80085a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085a8:	08008601 	.word	0x08008601
 80085ac:	08008615 	.word	0x08008615
 80085b0:	08008591 	.word	0x08008591
 80085b4:	08008591 	.word	0x08008591
 80085b8:	08008591 	.word	0x08008591
 80085bc:	08008591 	.word	0x08008591
 80085c0:	08008615 	.word	0x08008615
 80085c4:	08008591 	.word	0x08008591
 80085c8:	08008591 	.word	0x08008591
 80085cc:	08008591 	.word	0x08008591
 80085d0:	08008591 	.word	0x08008591
 80085d4:	08008721 	.word	0x08008721
 80085d8:	08008645 	.word	0x08008645
 80085dc:	08008703 	.word	0x08008703
 80085e0:	08008591 	.word	0x08008591
 80085e4:	08008591 	.word	0x08008591
 80085e8:	08008743 	.word	0x08008743
 80085ec:	08008591 	.word	0x08008591
 80085f0:	08008645 	.word	0x08008645
 80085f4:	08008591 	.word	0x08008591
 80085f8:	08008591 	.word	0x08008591
 80085fc:	0800870b 	.word	0x0800870b
 8008600:	682b      	ldr	r3, [r5, #0]
 8008602:	1d1a      	adds	r2, r3, #4
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	602a      	str	r2, [r5, #0]
 8008608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800860c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008610:	2301      	movs	r3, #1
 8008612:	e0a3      	b.n	800875c <_printf_i+0x1f4>
 8008614:	6820      	ldr	r0, [r4, #0]
 8008616:	6829      	ldr	r1, [r5, #0]
 8008618:	0606      	lsls	r6, r0, #24
 800861a:	f101 0304 	add.w	r3, r1, #4
 800861e:	d50a      	bpl.n	8008636 <_printf_i+0xce>
 8008620:	680e      	ldr	r6, [r1, #0]
 8008622:	602b      	str	r3, [r5, #0]
 8008624:	2e00      	cmp	r6, #0
 8008626:	da03      	bge.n	8008630 <_printf_i+0xc8>
 8008628:	232d      	movs	r3, #45	; 0x2d
 800862a:	4276      	negs	r6, r6
 800862c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008630:	485e      	ldr	r0, [pc, #376]	; (80087ac <_printf_i+0x244>)
 8008632:	230a      	movs	r3, #10
 8008634:	e019      	b.n	800866a <_printf_i+0x102>
 8008636:	680e      	ldr	r6, [r1, #0]
 8008638:	602b      	str	r3, [r5, #0]
 800863a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800863e:	bf18      	it	ne
 8008640:	b236      	sxthne	r6, r6
 8008642:	e7ef      	b.n	8008624 <_printf_i+0xbc>
 8008644:	682b      	ldr	r3, [r5, #0]
 8008646:	6820      	ldr	r0, [r4, #0]
 8008648:	1d19      	adds	r1, r3, #4
 800864a:	6029      	str	r1, [r5, #0]
 800864c:	0601      	lsls	r1, r0, #24
 800864e:	d501      	bpl.n	8008654 <_printf_i+0xec>
 8008650:	681e      	ldr	r6, [r3, #0]
 8008652:	e002      	b.n	800865a <_printf_i+0xf2>
 8008654:	0646      	lsls	r6, r0, #25
 8008656:	d5fb      	bpl.n	8008650 <_printf_i+0xe8>
 8008658:	881e      	ldrh	r6, [r3, #0]
 800865a:	4854      	ldr	r0, [pc, #336]	; (80087ac <_printf_i+0x244>)
 800865c:	2f6f      	cmp	r7, #111	; 0x6f
 800865e:	bf0c      	ite	eq
 8008660:	2308      	moveq	r3, #8
 8008662:	230a      	movne	r3, #10
 8008664:	2100      	movs	r1, #0
 8008666:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800866a:	6865      	ldr	r5, [r4, #4]
 800866c:	60a5      	str	r5, [r4, #8]
 800866e:	2d00      	cmp	r5, #0
 8008670:	bfa2      	ittt	ge
 8008672:	6821      	ldrge	r1, [r4, #0]
 8008674:	f021 0104 	bicge.w	r1, r1, #4
 8008678:	6021      	strge	r1, [r4, #0]
 800867a:	b90e      	cbnz	r6, 8008680 <_printf_i+0x118>
 800867c:	2d00      	cmp	r5, #0
 800867e:	d04d      	beq.n	800871c <_printf_i+0x1b4>
 8008680:	4615      	mov	r5, r2
 8008682:	fbb6 f1f3 	udiv	r1, r6, r3
 8008686:	fb03 6711 	mls	r7, r3, r1, r6
 800868a:	5dc7      	ldrb	r7, [r0, r7]
 800868c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008690:	4637      	mov	r7, r6
 8008692:	42bb      	cmp	r3, r7
 8008694:	460e      	mov	r6, r1
 8008696:	d9f4      	bls.n	8008682 <_printf_i+0x11a>
 8008698:	2b08      	cmp	r3, #8
 800869a:	d10b      	bne.n	80086b4 <_printf_i+0x14c>
 800869c:	6823      	ldr	r3, [r4, #0]
 800869e:	07de      	lsls	r6, r3, #31
 80086a0:	d508      	bpl.n	80086b4 <_printf_i+0x14c>
 80086a2:	6923      	ldr	r3, [r4, #16]
 80086a4:	6861      	ldr	r1, [r4, #4]
 80086a6:	4299      	cmp	r1, r3
 80086a8:	bfde      	ittt	le
 80086aa:	2330      	movle	r3, #48	; 0x30
 80086ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80086b4:	1b52      	subs	r2, r2, r5
 80086b6:	6122      	str	r2, [r4, #16]
 80086b8:	f8cd a000 	str.w	sl, [sp]
 80086bc:	464b      	mov	r3, r9
 80086be:	aa03      	add	r2, sp, #12
 80086c0:	4621      	mov	r1, r4
 80086c2:	4640      	mov	r0, r8
 80086c4:	f7ff fee2 	bl	800848c <_printf_common>
 80086c8:	3001      	adds	r0, #1
 80086ca:	d14c      	bne.n	8008766 <_printf_i+0x1fe>
 80086cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086d0:	b004      	add	sp, #16
 80086d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086d6:	4835      	ldr	r0, [pc, #212]	; (80087ac <_printf_i+0x244>)
 80086d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80086dc:	6829      	ldr	r1, [r5, #0]
 80086de:	6823      	ldr	r3, [r4, #0]
 80086e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80086e4:	6029      	str	r1, [r5, #0]
 80086e6:	061d      	lsls	r5, r3, #24
 80086e8:	d514      	bpl.n	8008714 <_printf_i+0x1ac>
 80086ea:	07df      	lsls	r7, r3, #31
 80086ec:	bf44      	itt	mi
 80086ee:	f043 0320 	orrmi.w	r3, r3, #32
 80086f2:	6023      	strmi	r3, [r4, #0]
 80086f4:	b91e      	cbnz	r6, 80086fe <_printf_i+0x196>
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	f023 0320 	bic.w	r3, r3, #32
 80086fc:	6023      	str	r3, [r4, #0]
 80086fe:	2310      	movs	r3, #16
 8008700:	e7b0      	b.n	8008664 <_printf_i+0xfc>
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	f043 0320 	orr.w	r3, r3, #32
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	2378      	movs	r3, #120	; 0x78
 800870c:	4828      	ldr	r0, [pc, #160]	; (80087b0 <_printf_i+0x248>)
 800870e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008712:	e7e3      	b.n	80086dc <_printf_i+0x174>
 8008714:	0659      	lsls	r1, r3, #25
 8008716:	bf48      	it	mi
 8008718:	b2b6      	uxthmi	r6, r6
 800871a:	e7e6      	b.n	80086ea <_printf_i+0x182>
 800871c:	4615      	mov	r5, r2
 800871e:	e7bb      	b.n	8008698 <_printf_i+0x130>
 8008720:	682b      	ldr	r3, [r5, #0]
 8008722:	6826      	ldr	r6, [r4, #0]
 8008724:	6961      	ldr	r1, [r4, #20]
 8008726:	1d18      	adds	r0, r3, #4
 8008728:	6028      	str	r0, [r5, #0]
 800872a:	0635      	lsls	r5, r6, #24
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	d501      	bpl.n	8008734 <_printf_i+0x1cc>
 8008730:	6019      	str	r1, [r3, #0]
 8008732:	e002      	b.n	800873a <_printf_i+0x1d2>
 8008734:	0670      	lsls	r0, r6, #25
 8008736:	d5fb      	bpl.n	8008730 <_printf_i+0x1c8>
 8008738:	8019      	strh	r1, [r3, #0]
 800873a:	2300      	movs	r3, #0
 800873c:	6123      	str	r3, [r4, #16]
 800873e:	4615      	mov	r5, r2
 8008740:	e7ba      	b.n	80086b8 <_printf_i+0x150>
 8008742:	682b      	ldr	r3, [r5, #0]
 8008744:	1d1a      	adds	r2, r3, #4
 8008746:	602a      	str	r2, [r5, #0]
 8008748:	681d      	ldr	r5, [r3, #0]
 800874a:	6862      	ldr	r2, [r4, #4]
 800874c:	2100      	movs	r1, #0
 800874e:	4628      	mov	r0, r5
 8008750:	f7f7 fd66 	bl	8000220 <memchr>
 8008754:	b108      	cbz	r0, 800875a <_printf_i+0x1f2>
 8008756:	1b40      	subs	r0, r0, r5
 8008758:	6060      	str	r0, [r4, #4]
 800875a:	6863      	ldr	r3, [r4, #4]
 800875c:	6123      	str	r3, [r4, #16]
 800875e:	2300      	movs	r3, #0
 8008760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008764:	e7a8      	b.n	80086b8 <_printf_i+0x150>
 8008766:	6923      	ldr	r3, [r4, #16]
 8008768:	462a      	mov	r2, r5
 800876a:	4649      	mov	r1, r9
 800876c:	4640      	mov	r0, r8
 800876e:	47d0      	blx	sl
 8008770:	3001      	adds	r0, #1
 8008772:	d0ab      	beq.n	80086cc <_printf_i+0x164>
 8008774:	6823      	ldr	r3, [r4, #0]
 8008776:	079b      	lsls	r3, r3, #30
 8008778:	d413      	bmi.n	80087a2 <_printf_i+0x23a>
 800877a:	68e0      	ldr	r0, [r4, #12]
 800877c:	9b03      	ldr	r3, [sp, #12]
 800877e:	4298      	cmp	r0, r3
 8008780:	bfb8      	it	lt
 8008782:	4618      	movlt	r0, r3
 8008784:	e7a4      	b.n	80086d0 <_printf_i+0x168>
 8008786:	2301      	movs	r3, #1
 8008788:	4632      	mov	r2, r6
 800878a:	4649      	mov	r1, r9
 800878c:	4640      	mov	r0, r8
 800878e:	47d0      	blx	sl
 8008790:	3001      	adds	r0, #1
 8008792:	d09b      	beq.n	80086cc <_printf_i+0x164>
 8008794:	3501      	adds	r5, #1
 8008796:	68e3      	ldr	r3, [r4, #12]
 8008798:	9903      	ldr	r1, [sp, #12]
 800879a:	1a5b      	subs	r3, r3, r1
 800879c:	42ab      	cmp	r3, r5
 800879e:	dcf2      	bgt.n	8008786 <_printf_i+0x21e>
 80087a0:	e7eb      	b.n	800877a <_printf_i+0x212>
 80087a2:	2500      	movs	r5, #0
 80087a4:	f104 0619 	add.w	r6, r4, #25
 80087a8:	e7f5      	b.n	8008796 <_printf_i+0x22e>
 80087aa:	bf00      	nop
 80087ac:	0800adb2 	.word	0x0800adb2
 80087b0:	0800adc3 	.word	0x0800adc3

080087b4 <cleanup_glue>:
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	460c      	mov	r4, r1
 80087b8:	6809      	ldr	r1, [r1, #0]
 80087ba:	4605      	mov	r5, r0
 80087bc:	b109      	cbz	r1, 80087c2 <cleanup_glue+0xe>
 80087be:	f7ff fff9 	bl	80087b4 <cleanup_glue>
 80087c2:	4621      	mov	r1, r4
 80087c4:	4628      	mov	r0, r5
 80087c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087ca:	f001 bc19 	b.w	800a000 <_free_r>
	...

080087d0 <_reclaim_reent>:
 80087d0:	4b2c      	ldr	r3, [pc, #176]	; (8008884 <_reclaim_reent+0xb4>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4283      	cmp	r3, r0
 80087d6:	b570      	push	{r4, r5, r6, lr}
 80087d8:	4604      	mov	r4, r0
 80087da:	d051      	beq.n	8008880 <_reclaim_reent+0xb0>
 80087dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80087de:	b143      	cbz	r3, 80087f2 <_reclaim_reent+0x22>
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d14a      	bne.n	800887c <_reclaim_reent+0xac>
 80087e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087e8:	6819      	ldr	r1, [r3, #0]
 80087ea:	b111      	cbz	r1, 80087f2 <_reclaim_reent+0x22>
 80087ec:	4620      	mov	r0, r4
 80087ee:	f001 fc07 	bl	800a000 <_free_r>
 80087f2:	6961      	ldr	r1, [r4, #20]
 80087f4:	b111      	cbz	r1, 80087fc <_reclaim_reent+0x2c>
 80087f6:	4620      	mov	r0, r4
 80087f8:	f001 fc02 	bl	800a000 <_free_r>
 80087fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80087fe:	b111      	cbz	r1, 8008806 <_reclaim_reent+0x36>
 8008800:	4620      	mov	r0, r4
 8008802:	f001 fbfd 	bl	800a000 <_free_r>
 8008806:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008808:	b111      	cbz	r1, 8008810 <_reclaim_reent+0x40>
 800880a:	4620      	mov	r0, r4
 800880c:	f001 fbf8 	bl	800a000 <_free_r>
 8008810:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008812:	b111      	cbz	r1, 800881a <_reclaim_reent+0x4a>
 8008814:	4620      	mov	r0, r4
 8008816:	f001 fbf3 	bl	800a000 <_free_r>
 800881a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800881c:	b111      	cbz	r1, 8008824 <_reclaim_reent+0x54>
 800881e:	4620      	mov	r0, r4
 8008820:	f001 fbee 	bl	800a000 <_free_r>
 8008824:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008826:	b111      	cbz	r1, 800882e <_reclaim_reent+0x5e>
 8008828:	4620      	mov	r0, r4
 800882a:	f001 fbe9 	bl	800a000 <_free_r>
 800882e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008830:	b111      	cbz	r1, 8008838 <_reclaim_reent+0x68>
 8008832:	4620      	mov	r0, r4
 8008834:	f001 fbe4 	bl	800a000 <_free_r>
 8008838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800883a:	b111      	cbz	r1, 8008842 <_reclaim_reent+0x72>
 800883c:	4620      	mov	r0, r4
 800883e:	f001 fbdf 	bl	800a000 <_free_r>
 8008842:	69a3      	ldr	r3, [r4, #24]
 8008844:	b1e3      	cbz	r3, 8008880 <_reclaim_reent+0xb0>
 8008846:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008848:	4620      	mov	r0, r4
 800884a:	4798      	blx	r3
 800884c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800884e:	b1b9      	cbz	r1, 8008880 <_reclaim_reent+0xb0>
 8008850:	4620      	mov	r0, r4
 8008852:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008856:	f7ff bfad 	b.w	80087b4 <cleanup_glue>
 800885a:	5949      	ldr	r1, [r1, r5]
 800885c:	b941      	cbnz	r1, 8008870 <_reclaim_reent+0xa0>
 800885e:	3504      	adds	r5, #4
 8008860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008862:	2d80      	cmp	r5, #128	; 0x80
 8008864:	68d9      	ldr	r1, [r3, #12]
 8008866:	d1f8      	bne.n	800885a <_reclaim_reent+0x8a>
 8008868:	4620      	mov	r0, r4
 800886a:	f001 fbc9 	bl	800a000 <_free_r>
 800886e:	e7ba      	b.n	80087e6 <_reclaim_reent+0x16>
 8008870:	680e      	ldr	r6, [r1, #0]
 8008872:	4620      	mov	r0, r4
 8008874:	f001 fbc4 	bl	800a000 <_free_r>
 8008878:	4631      	mov	r1, r6
 800887a:	e7ef      	b.n	800885c <_reclaim_reent+0x8c>
 800887c:	2500      	movs	r5, #0
 800887e:	e7ef      	b.n	8008860 <_reclaim_reent+0x90>
 8008880:	bd70      	pop	{r4, r5, r6, pc}
 8008882:	bf00      	nop
 8008884:	20000010 	.word	0x20000010

08008888 <_sbrk_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4d06      	ldr	r5, [pc, #24]	; (80088a4 <_sbrk_r+0x1c>)
 800888c:	2300      	movs	r3, #0
 800888e:	4604      	mov	r4, r0
 8008890:	4608      	mov	r0, r1
 8008892:	602b      	str	r3, [r5, #0]
 8008894:	f7f9 f9a4 	bl	8001be0 <_sbrk>
 8008898:	1c43      	adds	r3, r0, #1
 800889a:	d102      	bne.n	80088a2 <_sbrk_r+0x1a>
 800889c:	682b      	ldr	r3, [r5, #0]
 800889e:	b103      	cbz	r3, 80088a2 <_sbrk_r+0x1a>
 80088a0:	6023      	str	r3, [r4, #0]
 80088a2:	bd38      	pop	{r3, r4, r5, pc}
 80088a4:	20004340 	.word	0x20004340

080088a8 <sniprintf>:
 80088a8:	b40c      	push	{r2, r3}
 80088aa:	b530      	push	{r4, r5, lr}
 80088ac:	4b17      	ldr	r3, [pc, #92]	; (800890c <sniprintf+0x64>)
 80088ae:	1e0c      	subs	r4, r1, #0
 80088b0:	681d      	ldr	r5, [r3, #0]
 80088b2:	b09d      	sub	sp, #116	; 0x74
 80088b4:	da08      	bge.n	80088c8 <sniprintf+0x20>
 80088b6:	238b      	movs	r3, #139	; 0x8b
 80088b8:	602b      	str	r3, [r5, #0]
 80088ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088be:	b01d      	add	sp, #116	; 0x74
 80088c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088c4:	b002      	add	sp, #8
 80088c6:	4770      	bx	lr
 80088c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80088cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80088d0:	bf14      	ite	ne
 80088d2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80088d6:	4623      	moveq	r3, r4
 80088d8:	9304      	str	r3, [sp, #16]
 80088da:	9307      	str	r3, [sp, #28]
 80088dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80088e0:	9002      	str	r0, [sp, #8]
 80088e2:	9006      	str	r0, [sp, #24]
 80088e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80088e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80088ea:	ab21      	add	r3, sp, #132	; 0x84
 80088ec:	a902      	add	r1, sp, #8
 80088ee:	4628      	mov	r0, r5
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	f001 fc2d 	bl	800a150 <_svfiprintf_r>
 80088f6:	1c43      	adds	r3, r0, #1
 80088f8:	bfbc      	itt	lt
 80088fa:	238b      	movlt	r3, #139	; 0x8b
 80088fc:	602b      	strlt	r3, [r5, #0]
 80088fe:	2c00      	cmp	r4, #0
 8008900:	d0dd      	beq.n	80088be <sniprintf+0x16>
 8008902:	9b02      	ldr	r3, [sp, #8]
 8008904:	2200      	movs	r2, #0
 8008906:	701a      	strb	r2, [r3, #0]
 8008908:	e7d9      	b.n	80088be <sniprintf+0x16>
 800890a:	bf00      	nop
 800890c:	20000010 	.word	0x20000010

08008910 <__sread>:
 8008910:	b510      	push	{r4, lr}
 8008912:	460c      	mov	r4, r1
 8008914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008918:	f001 fd1a 	bl	800a350 <_read_r>
 800891c:	2800      	cmp	r0, #0
 800891e:	bfab      	itete	ge
 8008920:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008922:	89a3      	ldrhlt	r3, [r4, #12]
 8008924:	181b      	addge	r3, r3, r0
 8008926:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800892a:	bfac      	ite	ge
 800892c:	6563      	strge	r3, [r4, #84]	; 0x54
 800892e:	81a3      	strhlt	r3, [r4, #12]
 8008930:	bd10      	pop	{r4, pc}

08008932 <__swrite>:
 8008932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008936:	461f      	mov	r7, r3
 8008938:	898b      	ldrh	r3, [r1, #12]
 800893a:	05db      	lsls	r3, r3, #23
 800893c:	4605      	mov	r5, r0
 800893e:	460c      	mov	r4, r1
 8008940:	4616      	mov	r6, r2
 8008942:	d505      	bpl.n	8008950 <__swrite+0x1e>
 8008944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008948:	2302      	movs	r3, #2
 800894a:	2200      	movs	r2, #0
 800894c:	f000 ff98 	bl	8009880 <_lseek_r>
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008956:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800895a:	81a3      	strh	r3, [r4, #12]
 800895c:	4632      	mov	r2, r6
 800895e:	463b      	mov	r3, r7
 8008960:	4628      	mov	r0, r5
 8008962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008966:	f000 b829 	b.w	80089bc <_write_r>

0800896a <__sseek>:
 800896a:	b510      	push	{r4, lr}
 800896c:	460c      	mov	r4, r1
 800896e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008972:	f000 ff85 	bl	8009880 <_lseek_r>
 8008976:	1c43      	adds	r3, r0, #1
 8008978:	89a3      	ldrh	r3, [r4, #12]
 800897a:	bf15      	itete	ne
 800897c:	6560      	strne	r0, [r4, #84]	; 0x54
 800897e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008982:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008986:	81a3      	strheq	r3, [r4, #12]
 8008988:	bf18      	it	ne
 800898a:	81a3      	strhne	r3, [r4, #12]
 800898c:	bd10      	pop	{r4, pc}

0800898e <__sclose>:
 800898e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008992:	f000 b825 	b.w	80089e0 <_close_r>

08008996 <strncpy>:
 8008996:	b510      	push	{r4, lr}
 8008998:	3901      	subs	r1, #1
 800899a:	4603      	mov	r3, r0
 800899c:	b132      	cbz	r2, 80089ac <strncpy+0x16>
 800899e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80089a2:	f803 4b01 	strb.w	r4, [r3], #1
 80089a6:	3a01      	subs	r2, #1
 80089a8:	2c00      	cmp	r4, #0
 80089aa:	d1f7      	bne.n	800899c <strncpy+0x6>
 80089ac:	441a      	add	r2, r3
 80089ae:	2100      	movs	r1, #0
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d100      	bne.n	80089b6 <strncpy+0x20>
 80089b4:	bd10      	pop	{r4, pc}
 80089b6:	f803 1b01 	strb.w	r1, [r3], #1
 80089ba:	e7f9      	b.n	80089b0 <strncpy+0x1a>

080089bc <_write_r>:
 80089bc:	b538      	push	{r3, r4, r5, lr}
 80089be:	4d07      	ldr	r5, [pc, #28]	; (80089dc <_write_r+0x20>)
 80089c0:	4604      	mov	r4, r0
 80089c2:	4608      	mov	r0, r1
 80089c4:	4611      	mov	r1, r2
 80089c6:	2200      	movs	r2, #0
 80089c8:	602a      	str	r2, [r5, #0]
 80089ca:	461a      	mov	r2, r3
 80089cc:	f7f9 f8b7 	bl	8001b3e <_write>
 80089d0:	1c43      	adds	r3, r0, #1
 80089d2:	d102      	bne.n	80089da <_write_r+0x1e>
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	b103      	cbz	r3, 80089da <_write_r+0x1e>
 80089d8:	6023      	str	r3, [r4, #0]
 80089da:	bd38      	pop	{r3, r4, r5, pc}
 80089dc:	20004340 	.word	0x20004340

080089e0 <_close_r>:
 80089e0:	b538      	push	{r3, r4, r5, lr}
 80089e2:	4d06      	ldr	r5, [pc, #24]	; (80089fc <_close_r+0x1c>)
 80089e4:	2300      	movs	r3, #0
 80089e6:	4604      	mov	r4, r0
 80089e8:	4608      	mov	r0, r1
 80089ea:	602b      	str	r3, [r5, #0]
 80089ec:	f7f9 f8c3 	bl	8001b76 <_close>
 80089f0:	1c43      	adds	r3, r0, #1
 80089f2:	d102      	bne.n	80089fa <_close_r+0x1a>
 80089f4:	682b      	ldr	r3, [r5, #0]
 80089f6:	b103      	cbz	r3, 80089fa <_close_r+0x1a>
 80089f8:	6023      	str	r3, [r4, #0]
 80089fa:	bd38      	pop	{r3, r4, r5, pc}
 80089fc:	20004340 	.word	0x20004340

08008a00 <quorem>:
 8008a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a04:	6903      	ldr	r3, [r0, #16]
 8008a06:	690c      	ldr	r4, [r1, #16]
 8008a08:	42a3      	cmp	r3, r4
 8008a0a:	4607      	mov	r7, r0
 8008a0c:	f2c0 8081 	blt.w	8008b12 <quorem+0x112>
 8008a10:	3c01      	subs	r4, #1
 8008a12:	f101 0814 	add.w	r8, r1, #20
 8008a16:	f100 0514 	add.w	r5, r0, #20
 8008a1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a1e:	9301      	str	r3, [sp, #4]
 8008a20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a34:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a38:	d331      	bcc.n	8008a9e <quorem+0x9e>
 8008a3a:	f04f 0e00 	mov.w	lr, #0
 8008a3e:	4640      	mov	r0, r8
 8008a40:	46ac      	mov	ip, r5
 8008a42:	46f2      	mov	sl, lr
 8008a44:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a48:	b293      	uxth	r3, r2
 8008a4a:	fb06 e303 	mla	r3, r6, r3, lr
 8008a4e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	ebaa 0303 	sub.w	r3, sl, r3
 8008a58:	f8dc a000 	ldr.w	sl, [ip]
 8008a5c:	0c12      	lsrs	r2, r2, #16
 8008a5e:	fa13 f38a 	uxtah	r3, r3, sl
 8008a62:	fb06 e202 	mla	r2, r6, r2, lr
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	9b00      	ldr	r3, [sp, #0]
 8008a6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a6e:	b292      	uxth	r2, r2
 8008a70:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008a74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a78:	f8bd 3000 	ldrh.w	r3, [sp]
 8008a7c:	4581      	cmp	r9, r0
 8008a7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a82:	f84c 3b04 	str.w	r3, [ip], #4
 8008a86:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a8a:	d2db      	bcs.n	8008a44 <quorem+0x44>
 8008a8c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a90:	b92b      	cbnz	r3, 8008a9e <quorem+0x9e>
 8008a92:	9b01      	ldr	r3, [sp, #4]
 8008a94:	3b04      	subs	r3, #4
 8008a96:	429d      	cmp	r5, r3
 8008a98:	461a      	mov	r2, r3
 8008a9a:	d32e      	bcc.n	8008afa <quorem+0xfa>
 8008a9c:	613c      	str	r4, [r7, #16]
 8008a9e:	4638      	mov	r0, r7
 8008aa0:	f001 f996 	bl	8009dd0 <__mcmp>
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	db24      	blt.n	8008af2 <quorem+0xf2>
 8008aa8:	3601      	adds	r6, #1
 8008aaa:	4628      	mov	r0, r5
 8008aac:	f04f 0c00 	mov.w	ip, #0
 8008ab0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ab4:	f8d0 e000 	ldr.w	lr, [r0]
 8008ab8:	b293      	uxth	r3, r2
 8008aba:	ebac 0303 	sub.w	r3, ip, r3
 8008abe:	0c12      	lsrs	r2, r2, #16
 8008ac0:	fa13 f38e 	uxtah	r3, r3, lr
 8008ac4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ac8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ad2:	45c1      	cmp	r9, r8
 8008ad4:	f840 3b04 	str.w	r3, [r0], #4
 8008ad8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008adc:	d2e8      	bcs.n	8008ab0 <quorem+0xb0>
 8008ade:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ae2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ae6:	b922      	cbnz	r2, 8008af2 <quorem+0xf2>
 8008ae8:	3b04      	subs	r3, #4
 8008aea:	429d      	cmp	r5, r3
 8008aec:	461a      	mov	r2, r3
 8008aee:	d30a      	bcc.n	8008b06 <quorem+0x106>
 8008af0:	613c      	str	r4, [r7, #16]
 8008af2:	4630      	mov	r0, r6
 8008af4:	b003      	add	sp, #12
 8008af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008afa:	6812      	ldr	r2, [r2, #0]
 8008afc:	3b04      	subs	r3, #4
 8008afe:	2a00      	cmp	r2, #0
 8008b00:	d1cc      	bne.n	8008a9c <quorem+0x9c>
 8008b02:	3c01      	subs	r4, #1
 8008b04:	e7c7      	b.n	8008a96 <quorem+0x96>
 8008b06:	6812      	ldr	r2, [r2, #0]
 8008b08:	3b04      	subs	r3, #4
 8008b0a:	2a00      	cmp	r2, #0
 8008b0c:	d1f0      	bne.n	8008af0 <quorem+0xf0>
 8008b0e:	3c01      	subs	r4, #1
 8008b10:	e7eb      	b.n	8008aea <quorem+0xea>
 8008b12:	2000      	movs	r0, #0
 8008b14:	e7ee      	b.n	8008af4 <quorem+0xf4>
	...

08008b18 <_dtoa_r>:
 8008b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1c:	ed2d 8b04 	vpush	{d8-d9}
 8008b20:	ec57 6b10 	vmov	r6, r7, d0
 8008b24:	b093      	sub	sp, #76	; 0x4c
 8008b26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b2c:	9106      	str	r1, [sp, #24]
 8008b2e:	ee10 aa10 	vmov	sl, s0
 8008b32:	4604      	mov	r4, r0
 8008b34:	9209      	str	r2, [sp, #36]	; 0x24
 8008b36:	930c      	str	r3, [sp, #48]	; 0x30
 8008b38:	46bb      	mov	fp, r7
 8008b3a:	b975      	cbnz	r5, 8008b5a <_dtoa_r+0x42>
 8008b3c:	2010      	movs	r0, #16
 8008b3e:	f000 feb1 	bl	80098a4 <malloc>
 8008b42:	4602      	mov	r2, r0
 8008b44:	6260      	str	r0, [r4, #36]	; 0x24
 8008b46:	b920      	cbnz	r0, 8008b52 <_dtoa_r+0x3a>
 8008b48:	4ba7      	ldr	r3, [pc, #668]	; (8008de8 <_dtoa_r+0x2d0>)
 8008b4a:	21ea      	movs	r1, #234	; 0xea
 8008b4c:	48a7      	ldr	r0, [pc, #668]	; (8008dec <_dtoa_r+0x2d4>)
 8008b4e:	f001 fc11 	bl	800a374 <__assert_func>
 8008b52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b56:	6005      	str	r5, [r0, #0]
 8008b58:	60c5      	str	r5, [r0, #12]
 8008b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b5c:	6819      	ldr	r1, [r3, #0]
 8008b5e:	b151      	cbz	r1, 8008b76 <_dtoa_r+0x5e>
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	604a      	str	r2, [r1, #4]
 8008b64:	2301      	movs	r3, #1
 8008b66:	4093      	lsls	r3, r2
 8008b68:	608b      	str	r3, [r1, #8]
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f000 feee 	bl	800994c <_Bfree>
 8008b70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b72:	2200      	movs	r2, #0
 8008b74:	601a      	str	r2, [r3, #0]
 8008b76:	1e3b      	subs	r3, r7, #0
 8008b78:	bfaa      	itet	ge
 8008b7a:	2300      	movge	r3, #0
 8008b7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008b80:	f8c8 3000 	strge.w	r3, [r8]
 8008b84:	4b9a      	ldr	r3, [pc, #616]	; (8008df0 <_dtoa_r+0x2d8>)
 8008b86:	bfbc      	itt	lt
 8008b88:	2201      	movlt	r2, #1
 8008b8a:	f8c8 2000 	strlt.w	r2, [r8]
 8008b8e:	ea33 030b 	bics.w	r3, r3, fp
 8008b92:	d11b      	bne.n	8008bcc <_dtoa_r+0xb4>
 8008b94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b96:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b9a:	6013      	str	r3, [r2, #0]
 8008b9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ba0:	4333      	orrs	r3, r6
 8008ba2:	f000 8592 	beq.w	80096ca <_dtoa_r+0xbb2>
 8008ba6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ba8:	b963      	cbnz	r3, 8008bc4 <_dtoa_r+0xac>
 8008baa:	4b92      	ldr	r3, [pc, #584]	; (8008df4 <_dtoa_r+0x2dc>)
 8008bac:	e022      	b.n	8008bf4 <_dtoa_r+0xdc>
 8008bae:	4b92      	ldr	r3, [pc, #584]	; (8008df8 <_dtoa_r+0x2e0>)
 8008bb0:	9301      	str	r3, [sp, #4]
 8008bb2:	3308      	adds	r3, #8
 8008bb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008bb6:	6013      	str	r3, [r2, #0]
 8008bb8:	9801      	ldr	r0, [sp, #4]
 8008bba:	b013      	add	sp, #76	; 0x4c
 8008bbc:	ecbd 8b04 	vpop	{d8-d9}
 8008bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc4:	4b8b      	ldr	r3, [pc, #556]	; (8008df4 <_dtoa_r+0x2dc>)
 8008bc6:	9301      	str	r3, [sp, #4]
 8008bc8:	3303      	adds	r3, #3
 8008bca:	e7f3      	b.n	8008bb4 <_dtoa_r+0x9c>
 8008bcc:	2200      	movs	r2, #0
 8008bce:	2300      	movs	r3, #0
 8008bd0:	4650      	mov	r0, sl
 8008bd2:	4659      	mov	r1, fp
 8008bd4:	f7f7 ff98 	bl	8000b08 <__aeabi_dcmpeq>
 8008bd8:	ec4b ab19 	vmov	d9, sl, fp
 8008bdc:	4680      	mov	r8, r0
 8008bde:	b158      	cbz	r0, 8008bf8 <_dtoa_r+0xe0>
 8008be0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008be2:	2301      	movs	r3, #1
 8008be4:	6013      	str	r3, [r2, #0]
 8008be6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f000 856b 	beq.w	80096c4 <_dtoa_r+0xbac>
 8008bee:	4883      	ldr	r0, [pc, #524]	; (8008dfc <_dtoa_r+0x2e4>)
 8008bf0:	6018      	str	r0, [r3, #0]
 8008bf2:	1e43      	subs	r3, r0, #1
 8008bf4:	9301      	str	r3, [sp, #4]
 8008bf6:	e7df      	b.n	8008bb8 <_dtoa_r+0xa0>
 8008bf8:	ec4b ab10 	vmov	d0, sl, fp
 8008bfc:	aa10      	add	r2, sp, #64	; 0x40
 8008bfe:	a911      	add	r1, sp, #68	; 0x44
 8008c00:	4620      	mov	r0, r4
 8008c02:	f001 f98b 	bl	8009f1c <__d2b>
 8008c06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008c0a:	ee08 0a10 	vmov	s16, r0
 8008c0e:	2d00      	cmp	r5, #0
 8008c10:	f000 8084 	beq.w	8008d1c <_dtoa_r+0x204>
 8008c14:	ee19 3a90 	vmov	r3, s19
 8008c18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008c20:	4656      	mov	r6, sl
 8008c22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008c26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008c2e:	4b74      	ldr	r3, [pc, #464]	; (8008e00 <_dtoa_r+0x2e8>)
 8008c30:	2200      	movs	r2, #0
 8008c32:	4630      	mov	r0, r6
 8008c34:	4639      	mov	r1, r7
 8008c36:	f7f7 fb47 	bl	80002c8 <__aeabi_dsub>
 8008c3a:	a365      	add	r3, pc, #404	; (adr r3, 8008dd0 <_dtoa_r+0x2b8>)
 8008c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c40:	f7f7 fcfa 	bl	8000638 <__aeabi_dmul>
 8008c44:	a364      	add	r3, pc, #400	; (adr r3, 8008dd8 <_dtoa_r+0x2c0>)
 8008c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4a:	f7f7 fb3f 	bl	80002cc <__adddf3>
 8008c4e:	4606      	mov	r6, r0
 8008c50:	4628      	mov	r0, r5
 8008c52:	460f      	mov	r7, r1
 8008c54:	f7f7 fc86 	bl	8000564 <__aeabi_i2d>
 8008c58:	a361      	add	r3, pc, #388	; (adr r3, 8008de0 <_dtoa_r+0x2c8>)
 8008c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5e:	f7f7 fceb 	bl	8000638 <__aeabi_dmul>
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	4630      	mov	r0, r6
 8008c68:	4639      	mov	r1, r7
 8008c6a:	f7f7 fb2f 	bl	80002cc <__adddf3>
 8008c6e:	4606      	mov	r6, r0
 8008c70:	460f      	mov	r7, r1
 8008c72:	f7f7 ff91 	bl	8000b98 <__aeabi_d2iz>
 8008c76:	2200      	movs	r2, #0
 8008c78:	9000      	str	r0, [sp, #0]
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	4639      	mov	r1, r7
 8008c80:	f7f7 ff4c 	bl	8000b1c <__aeabi_dcmplt>
 8008c84:	b150      	cbz	r0, 8008c9c <_dtoa_r+0x184>
 8008c86:	9800      	ldr	r0, [sp, #0]
 8008c88:	f7f7 fc6c 	bl	8000564 <__aeabi_i2d>
 8008c8c:	4632      	mov	r2, r6
 8008c8e:	463b      	mov	r3, r7
 8008c90:	f7f7 ff3a 	bl	8000b08 <__aeabi_dcmpeq>
 8008c94:	b910      	cbnz	r0, 8008c9c <_dtoa_r+0x184>
 8008c96:	9b00      	ldr	r3, [sp, #0]
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	9b00      	ldr	r3, [sp, #0]
 8008c9e:	2b16      	cmp	r3, #22
 8008ca0:	d85a      	bhi.n	8008d58 <_dtoa_r+0x240>
 8008ca2:	9a00      	ldr	r2, [sp, #0]
 8008ca4:	4b57      	ldr	r3, [pc, #348]	; (8008e04 <_dtoa_r+0x2ec>)
 8008ca6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cae:	ec51 0b19 	vmov	r0, r1, d9
 8008cb2:	f7f7 ff33 	bl	8000b1c <__aeabi_dcmplt>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	d050      	beq.n	8008d5c <_dtoa_r+0x244>
 8008cba:	9b00      	ldr	r3, [sp, #0]
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008cc6:	1b5d      	subs	r5, r3, r5
 8008cc8:	1e6b      	subs	r3, r5, #1
 8008cca:	9305      	str	r3, [sp, #20]
 8008ccc:	bf45      	ittet	mi
 8008cce:	f1c5 0301 	rsbmi	r3, r5, #1
 8008cd2:	9304      	strmi	r3, [sp, #16]
 8008cd4:	2300      	movpl	r3, #0
 8008cd6:	2300      	movmi	r3, #0
 8008cd8:	bf4c      	ite	mi
 8008cda:	9305      	strmi	r3, [sp, #20]
 8008cdc:	9304      	strpl	r3, [sp, #16]
 8008cde:	9b00      	ldr	r3, [sp, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	db3d      	blt.n	8008d60 <_dtoa_r+0x248>
 8008ce4:	9b05      	ldr	r3, [sp, #20]
 8008ce6:	9a00      	ldr	r2, [sp, #0]
 8008ce8:	920a      	str	r2, [sp, #40]	; 0x28
 8008cea:	4413      	add	r3, r2
 8008cec:	9305      	str	r3, [sp, #20]
 8008cee:	2300      	movs	r3, #0
 8008cf0:	9307      	str	r3, [sp, #28]
 8008cf2:	9b06      	ldr	r3, [sp, #24]
 8008cf4:	2b09      	cmp	r3, #9
 8008cf6:	f200 8089 	bhi.w	8008e0c <_dtoa_r+0x2f4>
 8008cfa:	2b05      	cmp	r3, #5
 8008cfc:	bfc4      	itt	gt
 8008cfe:	3b04      	subgt	r3, #4
 8008d00:	9306      	strgt	r3, [sp, #24]
 8008d02:	9b06      	ldr	r3, [sp, #24]
 8008d04:	f1a3 0302 	sub.w	r3, r3, #2
 8008d08:	bfcc      	ite	gt
 8008d0a:	2500      	movgt	r5, #0
 8008d0c:	2501      	movle	r5, #1
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	f200 8087 	bhi.w	8008e22 <_dtoa_r+0x30a>
 8008d14:	e8df f003 	tbb	[pc, r3]
 8008d18:	59383a2d 	.word	0x59383a2d
 8008d1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008d20:	441d      	add	r5, r3
 8008d22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d26:	2b20      	cmp	r3, #32
 8008d28:	bfc1      	itttt	gt
 8008d2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008d32:	fa0b f303 	lslgt.w	r3, fp, r3
 8008d36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008d3a:	bfda      	itte	le
 8008d3c:	f1c3 0320 	rsble	r3, r3, #32
 8008d40:	fa06 f003 	lslle.w	r0, r6, r3
 8008d44:	4318      	orrgt	r0, r3
 8008d46:	f7f7 fbfd 	bl	8000544 <__aeabi_ui2d>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	4606      	mov	r6, r0
 8008d4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008d52:	3d01      	subs	r5, #1
 8008d54:	930e      	str	r3, [sp, #56]	; 0x38
 8008d56:	e76a      	b.n	8008c2e <_dtoa_r+0x116>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e7b2      	b.n	8008cc2 <_dtoa_r+0x1aa>
 8008d5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d5e:	e7b1      	b.n	8008cc4 <_dtoa_r+0x1ac>
 8008d60:	9b04      	ldr	r3, [sp, #16]
 8008d62:	9a00      	ldr	r2, [sp, #0]
 8008d64:	1a9b      	subs	r3, r3, r2
 8008d66:	9304      	str	r3, [sp, #16]
 8008d68:	4253      	negs	r3, r2
 8008d6a:	9307      	str	r3, [sp, #28]
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	930a      	str	r3, [sp, #40]	; 0x28
 8008d70:	e7bf      	b.n	8008cf2 <_dtoa_r+0x1da>
 8008d72:	2300      	movs	r3, #0
 8008d74:	9308      	str	r3, [sp, #32]
 8008d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	dc55      	bgt.n	8008e28 <_dtoa_r+0x310>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d82:	461a      	mov	r2, r3
 8008d84:	9209      	str	r2, [sp, #36]	; 0x24
 8008d86:	e00c      	b.n	8008da2 <_dtoa_r+0x28a>
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e7f3      	b.n	8008d74 <_dtoa_r+0x25c>
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d90:	9308      	str	r3, [sp, #32]
 8008d92:	9b00      	ldr	r3, [sp, #0]
 8008d94:	4413      	add	r3, r2
 8008d96:	9302      	str	r3, [sp, #8]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	9303      	str	r3, [sp, #12]
 8008d9e:	bfb8      	it	lt
 8008da0:	2301      	movlt	r3, #1
 8008da2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008da4:	2200      	movs	r2, #0
 8008da6:	6042      	str	r2, [r0, #4]
 8008da8:	2204      	movs	r2, #4
 8008daa:	f102 0614 	add.w	r6, r2, #20
 8008dae:	429e      	cmp	r6, r3
 8008db0:	6841      	ldr	r1, [r0, #4]
 8008db2:	d93d      	bls.n	8008e30 <_dtoa_r+0x318>
 8008db4:	4620      	mov	r0, r4
 8008db6:	f000 fd89 	bl	80098cc <_Balloc>
 8008dba:	9001      	str	r0, [sp, #4]
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	d13b      	bne.n	8008e38 <_dtoa_r+0x320>
 8008dc0:	4b11      	ldr	r3, [pc, #68]	; (8008e08 <_dtoa_r+0x2f0>)
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008dc8:	e6c0      	b.n	8008b4c <_dtoa_r+0x34>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e7df      	b.n	8008d8e <_dtoa_r+0x276>
 8008dce:	bf00      	nop
 8008dd0:	636f4361 	.word	0x636f4361
 8008dd4:	3fd287a7 	.word	0x3fd287a7
 8008dd8:	8b60c8b3 	.word	0x8b60c8b3
 8008ddc:	3fc68a28 	.word	0x3fc68a28
 8008de0:	509f79fb 	.word	0x509f79fb
 8008de4:	3fd34413 	.word	0x3fd34413
 8008de8:	0800ade1 	.word	0x0800ade1
 8008dec:	0800adf8 	.word	0x0800adf8
 8008df0:	7ff00000 	.word	0x7ff00000
 8008df4:	0800addd 	.word	0x0800addd
 8008df8:	0800add4 	.word	0x0800add4
 8008dfc:	0800adb1 	.word	0x0800adb1
 8008e00:	3ff80000 	.word	0x3ff80000
 8008e04:	0800aee8 	.word	0x0800aee8
 8008e08:	0800ae53 	.word	0x0800ae53
 8008e0c:	2501      	movs	r5, #1
 8008e0e:	2300      	movs	r3, #0
 8008e10:	9306      	str	r3, [sp, #24]
 8008e12:	9508      	str	r5, [sp, #32]
 8008e14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	2312      	movs	r3, #18
 8008e20:	e7b0      	b.n	8008d84 <_dtoa_r+0x26c>
 8008e22:	2301      	movs	r3, #1
 8008e24:	9308      	str	r3, [sp, #32]
 8008e26:	e7f5      	b.n	8008e14 <_dtoa_r+0x2fc>
 8008e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e2e:	e7b8      	b.n	8008da2 <_dtoa_r+0x28a>
 8008e30:	3101      	adds	r1, #1
 8008e32:	6041      	str	r1, [r0, #4]
 8008e34:	0052      	lsls	r2, r2, #1
 8008e36:	e7b8      	b.n	8008daa <_dtoa_r+0x292>
 8008e38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e3a:	9a01      	ldr	r2, [sp, #4]
 8008e3c:	601a      	str	r2, [r3, #0]
 8008e3e:	9b03      	ldr	r3, [sp, #12]
 8008e40:	2b0e      	cmp	r3, #14
 8008e42:	f200 809d 	bhi.w	8008f80 <_dtoa_r+0x468>
 8008e46:	2d00      	cmp	r5, #0
 8008e48:	f000 809a 	beq.w	8008f80 <_dtoa_r+0x468>
 8008e4c:	9b00      	ldr	r3, [sp, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	dd32      	ble.n	8008eb8 <_dtoa_r+0x3a0>
 8008e52:	4ab7      	ldr	r2, [pc, #732]	; (8009130 <_dtoa_r+0x618>)
 8008e54:	f003 030f 	and.w	r3, r3, #15
 8008e58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e60:	9b00      	ldr	r3, [sp, #0]
 8008e62:	05d8      	lsls	r0, r3, #23
 8008e64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008e68:	d516      	bpl.n	8008e98 <_dtoa_r+0x380>
 8008e6a:	4bb2      	ldr	r3, [pc, #712]	; (8009134 <_dtoa_r+0x61c>)
 8008e6c:	ec51 0b19 	vmov	r0, r1, d9
 8008e70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e74:	f7f7 fd0a 	bl	800088c <__aeabi_ddiv>
 8008e78:	f007 070f 	and.w	r7, r7, #15
 8008e7c:	4682      	mov	sl, r0
 8008e7e:	468b      	mov	fp, r1
 8008e80:	2503      	movs	r5, #3
 8008e82:	4eac      	ldr	r6, [pc, #688]	; (8009134 <_dtoa_r+0x61c>)
 8008e84:	b957      	cbnz	r7, 8008e9c <_dtoa_r+0x384>
 8008e86:	4642      	mov	r2, r8
 8008e88:	464b      	mov	r3, r9
 8008e8a:	4650      	mov	r0, sl
 8008e8c:	4659      	mov	r1, fp
 8008e8e:	f7f7 fcfd 	bl	800088c <__aeabi_ddiv>
 8008e92:	4682      	mov	sl, r0
 8008e94:	468b      	mov	fp, r1
 8008e96:	e028      	b.n	8008eea <_dtoa_r+0x3d2>
 8008e98:	2502      	movs	r5, #2
 8008e9a:	e7f2      	b.n	8008e82 <_dtoa_r+0x36a>
 8008e9c:	07f9      	lsls	r1, r7, #31
 8008e9e:	d508      	bpl.n	8008eb2 <_dtoa_r+0x39a>
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	4649      	mov	r1, r9
 8008ea4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ea8:	f7f7 fbc6 	bl	8000638 <__aeabi_dmul>
 8008eac:	3501      	adds	r5, #1
 8008eae:	4680      	mov	r8, r0
 8008eb0:	4689      	mov	r9, r1
 8008eb2:	107f      	asrs	r7, r7, #1
 8008eb4:	3608      	adds	r6, #8
 8008eb6:	e7e5      	b.n	8008e84 <_dtoa_r+0x36c>
 8008eb8:	f000 809b 	beq.w	8008ff2 <_dtoa_r+0x4da>
 8008ebc:	9b00      	ldr	r3, [sp, #0]
 8008ebe:	4f9d      	ldr	r7, [pc, #628]	; (8009134 <_dtoa_r+0x61c>)
 8008ec0:	425e      	negs	r6, r3
 8008ec2:	4b9b      	ldr	r3, [pc, #620]	; (8009130 <_dtoa_r+0x618>)
 8008ec4:	f006 020f 	and.w	r2, r6, #15
 8008ec8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed0:	ec51 0b19 	vmov	r0, r1, d9
 8008ed4:	f7f7 fbb0 	bl	8000638 <__aeabi_dmul>
 8008ed8:	1136      	asrs	r6, r6, #4
 8008eda:	4682      	mov	sl, r0
 8008edc:	468b      	mov	fp, r1
 8008ede:	2300      	movs	r3, #0
 8008ee0:	2502      	movs	r5, #2
 8008ee2:	2e00      	cmp	r6, #0
 8008ee4:	d17a      	bne.n	8008fdc <_dtoa_r+0x4c4>
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1d3      	bne.n	8008e92 <_dtoa_r+0x37a>
 8008eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 8082 	beq.w	8008ff6 <_dtoa_r+0x4de>
 8008ef2:	4b91      	ldr	r3, [pc, #580]	; (8009138 <_dtoa_r+0x620>)
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	4650      	mov	r0, sl
 8008ef8:	4659      	mov	r1, fp
 8008efa:	f7f7 fe0f 	bl	8000b1c <__aeabi_dcmplt>
 8008efe:	2800      	cmp	r0, #0
 8008f00:	d079      	beq.n	8008ff6 <_dtoa_r+0x4de>
 8008f02:	9b03      	ldr	r3, [sp, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d076      	beq.n	8008ff6 <_dtoa_r+0x4de>
 8008f08:	9b02      	ldr	r3, [sp, #8]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	dd36      	ble.n	8008f7c <_dtoa_r+0x464>
 8008f0e:	9b00      	ldr	r3, [sp, #0]
 8008f10:	4650      	mov	r0, sl
 8008f12:	4659      	mov	r1, fp
 8008f14:	1e5f      	subs	r7, r3, #1
 8008f16:	2200      	movs	r2, #0
 8008f18:	4b88      	ldr	r3, [pc, #544]	; (800913c <_dtoa_r+0x624>)
 8008f1a:	f7f7 fb8d 	bl	8000638 <__aeabi_dmul>
 8008f1e:	9e02      	ldr	r6, [sp, #8]
 8008f20:	4682      	mov	sl, r0
 8008f22:	468b      	mov	fp, r1
 8008f24:	3501      	adds	r5, #1
 8008f26:	4628      	mov	r0, r5
 8008f28:	f7f7 fb1c 	bl	8000564 <__aeabi_i2d>
 8008f2c:	4652      	mov	r2, sl
 8008f2e:	465b      	mov	r3, fp
 8008f30:	f7f7 fb82 	bl	8000638 <__aeabi_dmul>
 8008f34:	4b82      	ldr	r3, [pc, #520]	; (8009140 <_dtoa_r+0x628>)
 8008f36:	2200      	movs	r2, #0
 8008f38:	f7f7 f9c8 	bl	80002cc <__adddf3>
 8008f3c:	46d0      	mov	r8, sl
 8008f3e:	46d9      	mov	r9, fp
 8008f40:	4682      	mov	sl, r0
 8008f42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008f46:	2e00      	cmp	r6, #0
 8008f48:	d158      	bne.n	8008ffc <_dtoa_r+0x4e4>
 8008f4a:	4b7e      	ldr	r3, [pc, #504]	; (8009144 <_dtoa_r+0x62c>)
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	4640      	mov	r0, r8
 8008f50:	4649      	mov	r1, r9
 8008f52:	f7f7 f9b9 	bl	80002c8 <__aeabi_dsub>
 8008f56:	4652      	mov	r2, sl
 8008f58:	465b      	mov	r3, fp
 8008f5a:	4680      	mov	r8, r0
 8008f5c:	4689      	mov	r9, r1
 8008f5e:	f7f7 fdfb 	bl	8000b58 <__aeabi_dcmpgt>
 8008f62:	2800      	cmp	r0, #0
 8008f64:	f040 8295 	bne.w	8009492 <_dtoa_r+0x97a>
 8008f68:	4652      	mov	r2, sl
 8008f6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008f6e:	4640      	mov	r0, r8
 8008f70:	4649      	mov	r1, r9
 8008f72:	f7f7 fdd3 	bl	8000b1c <__aeabi_dcmplt>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	f040 8289 	bne.w	800948e <_dtoa_r+0x976>
 8008f7c:	ec5b ab19 	vmov	sl, fp, d9
 8008f80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f2c0 8148 	blt.w	8009218 <_dtoa_r+0x700>
 8008f88:	9a00      	ldr	r2, [sp, #0]
 8008f8a:	2a0e      	cmp	r2, #14
 8008f8c:	f300 8144 	bgt.w	8009218 <_dtoa_r+0x700>
 8008f90:	4b67      	ldr	r3, [pc, #412]	; (8009130 <_dtoa_r+0x618>)
 8008f92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f280 80d5 	bge.w	800914c <_dtoa_r+0x634>
 8008fa2:	9b03      	ldr	r3, [sp, #12]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f300 80d1 	bgt.w	800914c <_dtoa_r+0x634>
 8008faa:	f040 826f 	bne.w	800948c <_dtoa_r+0x974>
 8008fae:	4b65      	ldr	r3, [pc, #404]	; (8009144 <_dtoa_r+0x62c>)
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	4640      	mov	r0, r8
 8008fb4:	4649      	mov	r1, r9
 8008fb6:	f7f7 fb3f 	bl	8000638 <__aeabi_dmul>
 8008fba:	4652      	mov	r2, sl
 8008fbc:	465b      	mov	r3, fp
 8008fbe:	f7f7 fdc1 	bl	8000b44 <__aeabi_dcmpge>
 8008fc2:	9e03      	ldr	r6, [sp, #12]
 8008fc4:	4637      	mov	r7, r6
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	f040 8245 	bne.w	8009456 <_dtoa_r+0x93e>
 8008fcc:	9d01      	ldr	r5, [sp, #4]
 8008fce:	2331      	movs	r3, #49	; 0x31
 8008fd0:	f805 3b01 	strb.w	r3, [r5], #1
 8008fd4:	9b00      	ldr	r3, [sp, #0]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	9300      	str	r3, [sp, #0]
 8008fda:	e240      	b.n	800945e <_dtoa_r+0x946>
 8008fdc:	07f2      	lsls	r2, r6, #31
 8008fde:	d505      	bpl.n	8008fec <_dtoa_r+0x4d4>
 8008fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fe4:	f7f7 fb28 	bl	8000638 <__aeabi_dmul>
 8008fe8:	3501      	adds	r5, #1
 8008fea:	2301      	movs	r3, #1
 8008fec:	1076      	asrs	r6, r6, #1
 8008fee:	3708      	adds	r7, #8
 8008ff0:	e777      	b.n	8008ee2 <_dtoa_r+0x3ca>
 8008ff2:	2502      	movs	r5, #2
 8008ff4:	e779      	b.n	8008eea <_dtoa_r+0x3d2>
 8008ff6:	9f00      	ldr	r7, [sp, #0]
 8008ff8:	9e03      	ldr	r6, [sp, #12]
 8008ffa:	e794      	b.n	8008f26 <_dtoa_r+0x40e>
 8008ffc:	9901      	ldr	r1, [sp, #4]
 8008ffe:	4b4c      	ldr	r3, [pc, #304]	; (8009130 <_dtoa_r+0x618>)
 8009000:	4431      	add	r1, r6
 8009002:	910d      	str	r1, [sp, #52]	; 0x34
 8009004:	9908      	ldr	r1, [sp, #32]
 8009006:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800900a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800900e:	2900      	cmp	r1, #0
 8009010:	d043      	beq.n	800909a <_dtoa_r+0x582>
 8009012:	494d      	ldr	r1, [pc, #308]	; (8009148 <_dtoa_r+0x630>)
 8009014:	2000      	movs	r0, #0
 8009016:	f7f7 fc39 	bl	800088c <__aeabi_ddiv>
 800901a:	4652      	mov	r2, sl
 800901c:	465b      	mov	r3, fp
 800901e:	f7f7 f953 	bl	80002c8 <__aeabi_dsub>
 8009022:	9d01      	ldr	r5, [sp, #4]
 8009024:	4682      	mov	sl, r0
 8009026:	468b      	mov	fp, r1
 8009028:	4649      	mov	r1, r9
 800902a:	4640      	mov	r0, r8
 800902c:	f7f7 fdb4 	bl	8000b98 <__aeabi_d2iz>
 8009030:	4606      	mov	r6, r0
 8009032:	f7f7 fa97 	bl	8000564 <__aeabi_i2d>
 8009036:	4602      	mov	r2, r0
 8009038:	460b      	mov	r3, r1
 800903a:	4640      	mov	r0, r8
 800903c:	4649      	mov	r1, r9
 800903e:	f7f7 f943 	bl	80002c8 <__aeabi_dsub>
 8009042:	3630      	adds	r6, #48	; 0x30
 8009044:	f805 6b01 	strb.w	r6, [r5], #1
 8009048:	4652      	mov	r2, sl
 800904a:	465b      	mov	r3, fp
 800904c:	4680      	mov	r8, r0
 800904e:	4689      	mov	r9, r1
 8009050:	f7f7 fd64 	bl	8000b1c <__aeabi_dcmplt>
 8009054:	2800      	cmp	r0, #0
 8009056:	d163      	bne.n	8009120 <_dtoa_r+0x608>
 8009058:	4642      	mov	r2, r8
 800905a:	464b      	mov	r3, r9
 800905c:	4936      	ldr	r1, [pc, #216]	; (8009138 <_dtoa_r+0x620>)
 800905e:	2000      	movs	r0, #0
 8009060:	f7f7 f932 	bl	80002c8 <__aeabi_dsub>
 8009064:	4652      	mov	r2, sl
 8009066:	465b      	mov	r3, fp
 8009068:	f7f7 fd58 	bl	8000b1c <__aeabi_dcmplt>
 800906c:	2800      	cmp	r0, #0
 800906e:	f040 80b5 	bne.w	80091dc <_dtoa_r+0x6c4>
 8009072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009074:	429d      	cmp	r5, r3
 8009076:	d081      	beq.n	8008f7c <_dtoa_r+0x464>
 8009078:	4b30      	ldr	r3, [pc, #192]	; (800913c <_dtoa_r+0x624>)
 800907a:	2200      	movs	r2, #0
 800907c:	4650      	mov	r0, sl
 800907e:	4659      	mov	r1, fp
 8009080:	f7f7 fada 	bl	8000638 <__aeabi_dmul>
 8009084:	4b2d      	ldr	r3, [pc, #180]	; (800913c <_dtoa_r+0x624>)
 8009086:	4682      	mov	sl, r0
 8009088:	468b      	mov	fp, r1
 800908a:	4640      	mov	r0, r8
 800908c:	4649      	mov	r1, r9
 800908e:	2200      	movs	r2, #0
 8009090:	f7f7 fad2 	bl	8000638 <__aeabi_dmul>
 8009094:	4680      	mov	r8, r0
 8009096:	4689      	mov	r9, r1
 8009098:	e7c6      	b.n	8009028 <_dtoa_r+0x510>
 800909a:	4650      	mov	r0, sl
 800909c:	4659      	mov	r1, fp
 800909e:	f7f7 facb 	bl	8000638 <__aeabi_dmul>
 80090a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090a4:	9d01      	ldr	r5, [sp, #4]
 80090a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80090a8:	4682      	mov	sl, r0
 80090aa:	468b      	mov	fp, r1
 80090ac:	4649      	mov	r1, r9
 80090ae:	4640      	mov	r0, r8
 80090b0:	f7f7 fd72 	bl	8000b98 <__aeabi_d2iz>
 80090b4:	4606      	mov	r6, r0
 80090b6:	f7f7 fa55 	bl	8000564 <__aeabi_i2d>
 80090ba:	3630      	adds	r6, #48	; 0x30
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	4640      	mov	r0, r8
 80090c2:	4649      	mov	r1, r9
 80090c4:	f7f7 f900 	bl	80002c8 <__aeabi_dsub>
 80090c8:	f805 6b01 	strb.w	r6, [r5], #1
 80090cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090ce:	429d      	cmp	r5, r3
 80090d0:	4680      	mov	r8, r0
 80090d2:	4689      	mov	r9, r1
 80090d4:	f04f 0200 	mov.w	r2, #0
 80090d8:	d124      	bne.n	8009124 <_dtoa_r+0x60c>
 80090da:	4b1b      	ldr	r3, [pc, #108]	; (8009148 <_dtoa_r+0x630>)
 80090dc:	4650      	mov	r0, sl
 80090de:	4659      	mov	r1, fp
 80090e0:	f7f7 f8f4 	bl	80002cc <__adddf3>
 80090e4:	4602      	mov	r2, r0
 80090e6:	460b      	mov	r3, r1
 80090e8:	4640      	mov	r0, r8
 80090ea:	4649      	mov	r1, r9
 80090ec:	f7f7 fd34 	bl	8000b58 <__aeabi_dcmpgt>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	d173      	bne.n	80091dc <_dtoa_r+0x6c4>
 80090f4:	4652      	mov	r2, sl
 80090f6:	465b      	mov	r3, fp
 80090f8:	4913      	ldr	r1, [pc, #76]	; (8009148 <_dtoa_r+0x630>)
 80090fa:	2000      	movs	r0, #0
 80090fc:	f7f7 f8e4 	bl	80002c8 <__aeabi_dsub>
 8009100:	4602      	mov	r2, r0
 8009102:	460b      	mov	r3, r1
 8009104:	4640      	mov	r0, r8
 8009106:	4649      	mov	r1, r9
 8009108:	f7f7 fd08 	bl	8000b1c <__aeabi_dcmplt>
 800910c:	2800      	cmp	r0, #0
 800910e:	f43f af35 	beq.w	8008f7c <_dtoa_r+0x464>
 8009112:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009114:	1e6b      	subs	r3, r5, #1
 8009116:	930f      	str	r3, [sp, #60]	; 0x3c
 8009118:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800911c:	2b30      	cmp	r3, #48	; 0x30
 800911e:	d0f8      	beq.n	8009112 <_dtoa_r+0x5fa>
 8009120:	9700      	str	r7, [sp, #0]
 8009122:	e049      	b.n	80091b8 <_dtoa_r+0x6a0>
 8009124:	4b05      	ldr	r3, [pc, #20]	; (800913c <_dtoa_r+0x624>)
 8009126:	f7f7 fa87 	bl	8000638 <__aeabi_dmul>
 800912a:	4680      	mov	r8, r0
 800912c:	4689      	mov	r9, r1
 800912e:	e7bd      	b.n	80090ac <_dtoa_r+0x594>
 8009130:	0800aee8 	.word	0x0800aee8
 8009134:	0800aec0 	.word	0x0800aec0
 8009138:	3ff00000 	.word	0x3ff00000
 800913c:	40240000 	.word	0x40240000
 8009140:	401c0000 	.word	0x401c0000
 8009144:	40140000 	.word	0x40140000
 8009148:	3fe00000 	.word	0x3fe00000
 800914c:	9d01      	ldr	r5, [sp, #4]
 800914e:	4656      	mov	r6, sl
 8009150:	465f      	mov	r7, fp
 8009152:	4642      	mov	r2, r8
 8009154:	464b      	mov	r3, r9
 8009156:	4630      	mov	r0, r6
 8009158:	4639      	mov	r1, r7
 800915a:	f7f7 fb97 	bl	800088c <__aeabi_ddiv>
 800915e:	f7f7 fd1b 	bl	8000b98 <__aeabi_d2iz>
 8009162:	4682      	mov	sl, r0
 8009164:	f7f7 f9fe 	bl	8000564 <__aeabi_i2d>
 8009168:	4642      	mov	r2, r8
 800916a:	464b      	mov	r3, r9
 800916c:	f7f7 fa64 	bl	8000638 <__aeabi_dmul>
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	4630      	mov	r0, r6
 8009176:	4639      	mov	r1, r7
 8009178:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800917c:	f7f7 f8a4 	bl	80002c8 <__aeabi_dsub>
 8009180:	f805 6b01 	strb.w	r6, [r5], #1
 8009184:	9e01      	ldr	r6, [sp, #4]
 8009186:	9f03      	ldr	r7, [sp, #12]
 8009188:	1bae      	subs	r6, r5, r6
 800918a:	42b7      	cmp	r7, r6
 800918c:	4602      	mov	r2, r0
 800918e:	460b      	mov	r3, r1
 8009190:	d135      	bne.n	80091fe <_dtoa_r+0x6e6>
 8009192:	f7f7 f89b 	bl	80002cc <__adddf3>
 8009196:	4642      	mov	r2, r8
 8009198:	464b      	mov	r3, r9
 800919a:	4606      	mov	r6, r0
 800919c:	460f      	mov	r7, r1
 800919e:	f7f7 fcdb 	bl	8000b58 <__aeabi_dcmpgt>
 80091a2:	b9d0      	cbnz	r0, 80091da <_dtoa_r+0x6c2>
 80091a4:	4642      	mov	r2, r8
 80091a6:	464b      	mov	r3, r9
 80091a8:	4630      	mov	r0, r6
 80091aa:	4639      	mov	r1, r7
 80091ac:	f7f7 fcac 	bl	8000b08 <__aeabi_dcmpeq>
 80091b0:	b110      	cbz	r0, 80091b8 <_dtoa_r+0x6a0>
 80091b2:	f01a 0f01 	tst.w	sl, #1
 80091b6:	d110      	bne.n	80091da <_dtoa_r+0x6c2>
 80091b8:	4620      	mov	r0, r4
 80091ba:	ee18 1a10 	vmov	r1, s16
 80091be:	f000 fbc5 	bl	800994c <_Bfree>
 80091c2:	2300      	movs	r3, #0
 80091c4:	9800      	ldr	r0, [sp, #0]
 80091c6:	702b      	strb	r3, [r5, #0]
 80091c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091ca:	3001      	adds	r0, #1
 80091cc:	6018      	str	r0, [r3, #0]
 80091ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f43f acf1 	beq.w	8008bb8 <_dtoa_r+0xa0>
 80091d6:	601d      	str	r5, [r3, #0]
 80091d8:	e4ee      	b.n	8008bb8 <_dtoa_r+0xa0>
 80091da:	9f00      	ldr	r7, [sp, #0]
 80091dc:	462b      	mov	r3, r5
 80091de:	461d      	mov	r5, r3
 80091e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091e4:	2a39      	cmp	r2, #57	; 0x39
 80091e6:	d106      	bne.n	80091f6 <_dtoa_r+0x6de>
 80091e8:	9a01      	ldr	r2, [sp, #4]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d1f7      	bne.n	80091de <_dtoa_r+0x6c6>
 80091ee:	9901      	ldr	r1, [sp, #4]
 80091f0:	2230      	movs	r2, #48	; 0x30
 80091f2:	3701      	adds	r7, #1
 80091f4:	700a      	strb	r2, [r1, #0]
 80091f6:	781a      	ldrb	r2, [r3, #0]
 80091f8:	3201      	adds	r2, #1
 80091fa:	701a      	strb	r2, [r3, #0]
 80091fc:	e790      	b.n	8009120 <_dtoa_r+0x608>
 80091fe:	4ba6      	ldr	r3, [pc, #664]	; (8009498 <_dtoa_r+0x980>)
 8009200:	2200      	movs	r2, #0
 8009202:	f7f7 fa19 	bl	8000638 <__aeabi_dmul>
 8009206:	2200      	movs	r2, #0
 8009208:	2300      	movs	r3, #0
 800920a:	4606      	mov	r6, r0
 800920c:	460f      	mov	r7, r1
 800920e:	f7f7 fc7b 	bl	8000b08 <__aeabi_dcmpeq>
 8009212:	2800      	cmp	r0, #0
 8009214:	d09d      	beq.n	8009152 <_dtoa_r+0x63a>
 8009216:	e7cf      	b.n	80091b8 <_dtoa_r+0x6a0>
 8009218:	9a08      	ldr	r2, [sp, #32]
 800921a:	2a00      	cmp	r2, #0
 800921c:	f000 80d7 	beq.w	80093ce <_dtoa_r+0x8b6>
 8009220:	9a06      	ldr	r2, [sp, #24]
 8009222:	2a01      	cmp	r2, #1
 8009224:	f300 80ba 	bgt.w	800939c <_dtoa_r+0x884>
 8009228:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800922a:	2a00      	cmp	r2, #0
 800922c:	f000 80b2 	beq.w	8009394 <_dtoa_r+0x87c>
 8009230:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009234:	9e07      	ldr	r6, [sp, #28]
 8009236:	9d04      	ldr	r5, [sp, #16]
 8009238:	9a04      	ldr	r2, [sp, #16]
 800923a:	441a      	add	r2, r3
 800923c:	9204      	str	r2, [sp, #16]
 800923e:	9a05      	ldr	r2, [sp, #20]
 8009240:	2101      	movs	r1, #1
 8009242:	441a      	add	r2, r3
 8009244:	4620      	mov	r0, r4
 8009246:	9205      	str	r2, [sp, #20]
 8009248:	f000 fc38 	bl	8009abc <__i2b>
 800924c:	4607      	mov	r7, r0
 800924e:	2d00      	cmp	r5, #0
 8009250:	dd0c      	ble.n	800926c <_dtoa_r+0x754>
 8009252:	9b05      	ldr	r3, [sp, #20]
 8009254:	2b00      	cmp	r3, #0
 8009256:	dd09      	ble.n	800926c <_dtoa_r+0x754>
 8009258:	42ab      	cmp	r3, r5
 800925a:	9a04      	ldr	r2, [sp, #16]
 800925c:	bfa8      	it	ge
 800925e:	462b      	movge	r3, r5
 8009260:	1ad2      	subs	r2, r2, r3
 8009262:	9204      	str	r2, [sp, #16]
 8009264:	9a05      	ldr	r2, [sp, #20]
 8009266:	1aed      	subs	r5, r5, r3
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	9305      	str	r3, [sp, #20]
 800926c:	9b07      	ldr	r3, [sp, #28]
 800926e:	b31b      	cbz	r3, 80092b8 <_dtoa_r+0x7a0>
 8009270:	9b08      	ldr	r3, [sp, #32]
 8009272:	2b00      	cmp	r3, #0
 8009274:	f000 80af 	beq.w	80093d6 <_dtoa_r+0x8be>
 8009278:	2e00      	cmp	r6, #0
 800927a:	dd13      	ble.n	80092a4 <_dtoa_r+0x78c>
 800927c:	4639      	mov	r1, r7
 800927e:	4632      	mov	r2, r6
 8009280:	4620      	mov	r0, r4
 8009282:	f000 fcdb 	bl	8009c3c <__pow5mult>
 8009286:	ee18 2a10 	vmov	r2, s16
 800928a:	4601      	mov	r1, r0
 800928c:	4607      	mov	r7, r0
 800928e:	4620      	mov	r0, r4
 8009290:	f000 fc2a 	bl	8009ae8 <__multiply>
 8009294:	ee18 1a10 	vmov	r1, s16
 8009298:	4680      	mov	r8, r0
 800929a:	4620      	mov	r0, r4
 800929c:	f000 fb56 	bl	800994c <_Bfree>
 80092a0:	ee08 8a10 	vmov	s16, r8
 80092a4:	9b07      	ldr	r3, [sp, #28]
 80092a6:	1b9a      	subs	r2, r3, r6
 80092a8:	d006      	beq.n	80092b8 <_dtoa_r+0x7a0>
 80092aa:	ee18 1a10 	vmov	r1, s16
 80092ae:	4620      	mov	r0, r4
 80092b0:	f000 fcc4 	bl	8009c3c <__pow5mult>
 80092b4:	ee08 0a10 	vmov	s16, r0
 80092b8:	2101      	movs	r1, #1
 80092ba:	4620      	mov	r0, r4
 80092bc:	f000 fbfe 	bl	8009abc <__i2b>
 80092c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	4606      	mov	r6, r0
 80092c6:	f340 8088 	ble.w	80093da <_dtoa_r+0x8c2>
 80092ca:	461a      	mov	r2, r3
 80092cc:	4601      	mov	r1, r0
 80092ce:	4620      	mov	r0, r4
 80092d0:	f000 fcb4 	bl	8009c3c <__pow5mult>
 80092d4:	9b06      	ldr	r3, [sp, #24]
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	4606      	mov	r6, r0
 80092da:	f340 8081 	ble.w	80093e0 <_dtoa_r+0x8c8>
 80092de:	f04f 0800 	mov.w	r8, #0
 80092e2:	6933      	ldr	r3, [r6, #16]
 80092e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80092e8:	6918      	ldr	r0, [r3, #16]
 80092ea:	f000 fb97 	bl	8009a1c <__hi0bits>
 80092ee:	f1c0 0020 	rsb	r0, r0, #32
 80092f2:	9b05      	ldr	r3, [sp, #20]
 80092f4:	4418      	add	r0, r3
 80092f6:	f010 001f 	ands.w	r0, r0, #31
 80092fa:	f000 8092 	beq.w	8009422 <_dtoa_r+0x90a>
 80092fe:	f1c0 0320 	rsb	r3, r0, #32
 8009302:	2b04      	cmp	r3, #4
 8009304:	f340 808a 	ble.w	800941c <_dtoa_r+0x904>
 8009308:	f1c0 001c 	rsb	r0, r0, #28
 800930c:	9b04      	ldr	r3, [sp, #16]
 800930e:	4403      	add	r3, r0
 8009310:	9304      	str	r3, [sp, #16]
 8009312:	9b05      	ldr	r3, [sp, #20]
 8009314:	4403      	add	r3, r0
 8009316:	4405      	add	r5, r0
 8009318:	9305      	str	r3, [sp, #20]
 800931a:	9b04      	ldr	r3, [sp, #16]
 800931c:	2b00      	cmp	r3, #0
 800931e:	dd07      	ble.n	8009330 <_dtoa_r+0x818>
 8009320:	ee18 1a10 	vmov	r1, s16
 8009324:	461a      	mov	r2, r3
 8009326:	4620      	mov	r0, r4
 8009328:	f000 fce2 	bl	8009cf0 <__lshift>
 800932c:	ee08 0a10 	vmov	s16, r0
 8009330:	9b05      	ldr	r3, [sp, #20]
 8009332:	2b00      	cmp	r3, #0
 8009334:	dd05      	ble.n	8009342 <_dtoa_r+0x82a>
 8009336:	4631      	mov	r1, r6
 8009338:	461a      	mov	r2, r3
 800933a:	4620      	mov	r0, r4
 800933c:	f000 fcd8 	bl	8009cf0 <__lshift>
 8009340:	4606      	mov	r6, r0
 8009342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009344:	2b00      	cmp	r3, #0
 8009346:	d06e      	beq.n	8009426 <_dtoa_r+0x90e>
 8009348:	ee18 0a10 	vmov	r0, s16
 800934c:	4631      	mov	r1, r6
 800934e:	f000 fd3f 	bl	8009dd0 <__mcmp>
 8009352:	2800      	cmp	r0, #0
 8009354:	da67      	bge.n	8009426 <_dtoa_r+0x90e>
 8009356:	9b00      	ldr	r3, [sp, #0]
 8009358:	3b01      	subs	r3, #1
 800935a:	ee18 1a10 	vmov	r1, s16
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	220a      	movs	r2, #10
 8009362:	2300      	movs	r3, #0
 8009364:	4620      	mov	r0, r4
 8009366:	f000 fb13 	bl	8009990 <__multadd>
 800936a:	9b08      	ldr	r3, [sp, #32]
 800936c:	ee08 0a10 	vmov	s16, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	f000 81b1 	beq.w	80096d8 <_dtoa_r+0xbc0>
 8009376:	2300      	movs	r3, #0
 8009378:	4639      	mov	r1, r7
 800937a:	220a      	movs	r2, #10
 800937c:	4620      	mov	r0, r4
 800937e:	f000 fb07 	bl	8009990 <__multadd>
 8009382:	9b02      	ldr	r3, [sp, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	4607      	mov	r7, r0
 8009388:	f300 808e 	bgt.w	80094a8 <_dtoa_r+0x990>
 800938c:	9b06      	ldr	r3, [sp, #24]
 800938e:	2b02      	cmp	r3, #2
 8009390:	dc51      	bgt.n	8009436 <_dtoa_r+0x91e>
 8009392:	e089      	b.n	80094a8 <_dtoa_r+0x990>
 8009394:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009396:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800939a:	e74b      	b.n	8009234 <_dtoa_r+0x71c>
 800939c:	9b03      	ldr	r3, [sp, #12]
 800939e:	1e5e      	subs	r6, r3, #1
 80093a0:	9b07      	ldr	r3, [sp, #28]
 80093a2:	42b3      	cmp	r3, r6
 80093a4:	bfbf      	itttt	lt
 80093a6:	9b07      	ldrlt	r3, [sp, #28]
 80093a8:	9607      	strlt	r6, [sp, #28]
 80093aa:	1af2      	sublt	r2, r6, r3
 80093ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80093ae:	bfb6      	itet	lt
 80093b0:	189b      	addlt	r3, r3, r2
 80093b2:	1b9e      	subge	r6, r3, r6
 80093b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80093b6:	9b03      	ldr	r3, [sp, #12]
 80093b8:	bfb8      	it	lt
 80093ba:	2600      	movlt	r6, #0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	bfb7      	itett	lt
 80093c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80093c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80093c8:	1a9d      	sublt	r5, r3, r2
 80093ca:	2300      	movlt	r3, #0
 80093cc:	e734      	b.n	8009238 <_dtoa_r+0x720>
 80093ce:	9e07      	ldr	r6, [sp, #28]
 80093d0:	9d04      	ldr	r5, [sp, #16]
 80093d2:	9f08      	ldr	r7, [sp, #32]
 80093d4:	e73b      	b.n	800924e <_dtoa_r+0x736>
 80093d6:	9a07      	ldr	r2, [sp, #28]
 80093d8:	e767      	b.n	80092aa <_dtoa_r+0x792>
 80093da:	9b06      	ldr	r3, [sp, #24]
 80093dc:	2b01      	cmp	r3, #1
 80093de:	dc18      	bgt.n	8009412 <_dtoa_r+0x8fa>
 80093e0:	f1ba 0f00 	cmp.w	sl, #0
 80093e4:	d115      	bne.n	8009412 <_dtoa_r+0x8fa>
 80093e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093ea:	b993      	cbnz	r3, 8009412 <_dtoa_r+0x8fa>
 80093ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80093f0:	0d1b      	lsrs	r3, r3, #20
 80093f2:	051b      	lsls	r3, r3, #20
 80093f4:	b183      	cbz	r3, 8009418 <_dtoa_r+0x900>
 80093f6:	9b04      	ldr	r3, [sp, #16]
 80093f8:	3301      	adds	r3, #1
 80093fa:	9304      	str	r3, [sp, #16]
 80093fc:	9b05      	ldr	r3, [sp, #20]
 80093fe:	3301      	adds	r3, #1
 8009400:	9305      	str	r3, [sp, #20]
 8009402:	f04f 0801 	mov.w	r8, #1
 8009406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009408:	2b00      	cmp	r3, #0
 800940a:	f47f af6a 	bne.w	80092e2 <_dtoa_r+0x7ca>
 800940e:	2001      	movs	r0, #1
 8009410:	e76f      	b.n	80092f2 <_dtoa_r+0x7da>
 8009412:	f04f 0800 	mov.w	r8, #0
 8009416:	e7f6      	b.n	8009406 <_dtoa_r+0x8ee>
 8009418:	4698      	mov	r8, r3
 800941a:	e7f4      	b.n	8009406 <_dtoa_r+0x8ee>
 800941c:	f43f af7d 	beq.w	800931a <_dtoa_r+0x802>
 8009420:	4618      	mov	r0, r3
 8009422:	301c      	adds	r0, #28
 8009424:	e772      	b.n	800930c <_dtoa_r+0x7f4>
 8009426:	9b03      	ldr	r3, [sp, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	dc37      	bgt.n	800949c <_dtoa_r+0x984>
 800942c:	9b06      	ldr	r3, [sp, #24]
 800942e:	2b02      	cmp	r3, #2
 8009430:	dd34      	ble.n	800949c <_dtoa_r+0x984>
 8009432:	9b03      	ldr	r3, [sp, #12]
 8009434:	9302      	str	r3, [sp, #8]
 8009436:	9b02      	ldr	r3, [sp, #8]
 8009438:	b96b      	cbnz	r3, 8009456 <_dtoa_r+0x93e>
 800943a:	4631      	mov	r1, r6
 800943c:	2205      	movs	r2, #5
 800943e:	4620      	mov	r0, r4
 8009440:	f000 faa6 	bl	8009990 <__multadd>
 8009444:	4601      	mov	r1, r0
 8009446:	4606      	mov	r6, r0
 8009448:	ee18 0a10 	vmov	r0, s16
 800944c:	f000 fcc0 	bl	8009dd0 <__mcmp>
 8009450:	2800      	cmp	r0, #0
 8009452:	f73f adbb 	bgt.w	8008fcc <_dtoa_r+0x4b4>
 8009456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009458:	9d01      	ldr	r5, [sp, #4]
 800945a:	43db      	mvns	r3, r3
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	f04f 0800 	mov.w	r8, #0
 8009462:	4631      	mov	r1, r6
 8009464:	4620      	mov	r0, r4
 8009466:	f000 fa71 	bl	800994c <_Bfree>
 800946a:	2f00      	cmp	r7, #0
 800946c:	f43f aea4 	beq.w	80091b8 <_dtoa_r+0x6a0>
 8009470:	f1b8 0f00 	cmp.w	r8, #0
 8009474:	d005      	beq.n	8009482 <_dtoa_r+0x96a>
 8009476:	45b8      	cmp	r8, r7
 8009478:	d003      	beq.n	8009482 <_dtoa_r+0x96a>
 800947a:	4641      	mov	r1, r8
 800947c:	4620      	mov	r0, r4
 800947e:	f000 fa65 	bl	800994c <_Bfree>
 8009482:	4639      	mov	r1, r7
 8009484:	4620      	mov	r0, r4
 8009486:	f000 fa61 	bl	800994c <_Bfree>
 800948a:	e695      	b.n	80091b8 <_dtoa_r+0x6a0>
 800948c:	2600      	movs	r6, #0
 800948e:	4637      	mov	r7, r6
 8009490:	e7e1      	b.n	8009456 <_dtoa_r+0x93e>
 8009492:	9700      	str	r7, [sp, #0]
 8009494:	4637      	mov	r7, r6
 8009496:	e599      	b.n	8008fcc <_dtoa_r+0x4b4>
 8009498:	40240000 	.word	0x40240000
 800949c:	9b08      	ldr	r3, [sp, #32]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f000 80ca 	beq.w	8009638 <_dtoa_r+0xb20>
 80094a4:	9b03      	ldr	r3, [sp, #12]
 80094a6:	9302      	str	r3, [sp, #8]
 80094a8:	2d00      	cmp	r5, #0
 80094aa:	dd05      	ble.n	80094b8 <_dtoa_r+0x9a0>
 80094ac:	4639      	mov	r1, r7
 80094ae:	462a      	mov	r2, r5
 80094b0:	4620      	mov	r0, r4
 80094b2:	f000 fc1d 	bl	8009cf0 <__lshift>
 80094b6:	4607      	mov	r7, r0
 80094b8:	f1b8 0f00 	cmp.w	r8, #0
 80094bc:	d05b      	beq.n	8009576 <_dtoa_r+0xa5e>
 80094be:	6879      	ldr	r1, [r7, #4]
 80094c0:	4620      	mov	r0, r4
 80094c2:	f000 fa03 	bl	80098cc <_Balloc>
 80094c6:	4605      	mov	r5, r0
 80094c8:	b928      	cbnz	r0, 80094d6 <_dtoa_r+0x9be>
 80094ca:	4b87      	ldr	r3, [pc, #540]	; (80096e8 <_dtoa_r+0xbd0>)
 80094cc:	4602      	mov	r2, r0
 80094ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80094d2:	f7ff bb3b 	b.w	8008b4c <_dtoa_r+0x34>
 80094d6:	693a      	ldr	r2, [r7, #16]
 80094d8:	3202      	adds	r2, #2
 80094da:	0092      	lsls	r2, r2, #2
 80094dc:	f107 010c 	add.w	r1, r7, #12
 80094e0:	300c      	adds	r0, #12
 80094e2:	f7fe fc52 	bl	8007d8a <memcpy>
 80094e6:	2201      	movs	r2, #1
 80094e8:	4629      	mov	r1, r5
 80094ea:	4620      	mov	r0, r4
 80094ec:	f000 fc00 	bl	8009cf0 <__lshift>
 80094f0:	9b01      	ldr	r3, [sp, #4]
 80094f2:	f103 0901 	add.w	r9, r3, #1
 80094f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80094fa:	4413      	add	r3, r2
 80094fc:	9305      	str	r3, [sp, #20]
 80094fe:	f00a 0301 	and.w	r3, sl, #1
 8009502:	46b8      	mov	r8, r7
 8009504:	9304      	str	r3, [sp, #16]
 8009506:	4607      	mov	r7, r0
 8009508:	4631      	mov	r1, r6
 800950a:	ee18 0a10 	vmov	r0, s16
 800950e:	f7ff fa77 	bl	8008a00 <quorem>
 8009512:	4641      	mov	r1, r8
 8009514:	9002      	str	r0, [sp, #8]
 8009516:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800951a:	ee18 0a10 	vmov	r0, s16
 800951e:	f000 fc57 	bl	8009dd0 <__mcmp>
 8009522:	463a      	mov	r2, r7
 8009524:	9003      	str	r0, [sp, #12]
 8009526:	4631      	mov	r1, r6
 8009528:	4620      	mov	r0, r4
 800952a:	f000 fc6d 	bl	8009e08 <__mdiff>
 800952e:	68c2      	ldr	r2, [r0, #12]
 8009530:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8009534:	4605      	mov	r5, r0
 8009536:	bb02      	cbnz	r2, 800957a <_dtoa_r+0xa62>
 8009538:	4601      	mov	r1, r0
 800953a:	ee18 0a10 	vmov	r0, s16
 800953e:	f000 fc47 	bl	8009dd0 <__mcmp>
 8009542:	4602      	mov	r2, r0
 8009544:	4629      	mov	r1, r5
 8009546:	4620      	mov	r0, r4
 8009548:	9207      	str	r2, [sp, #28]
 800954a:	f000 f9ff 	bl	800994c <_Bfree>
 800954e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009552:	ea43 0102 	orr.w	r1, r3, r2
 8009556:	9b04      	ldr	r3, [sp, #16]
 8009558:	430b      	orrs	r3, r1
 800955a:	464d      	mov	r5, r9
 800955c:	d10f      	bne.n	800957e <_dtoa_r+0xa66>
 800955e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009562:	d02a      	beq.n	80095ba <_dtoa_r+0xaa2>
 8009564:	9b03      	ldr	r3, [sp, #12]
 8009566:	2b00      	cmp	r3, #0
 8009568:	dd02      	ble.n	8009570 <_dtoa_r+0xa58>
 800956a:	9b02      	ldr	r3, [sp, #8]
 800956c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009570:	f88b a000 	strb.w	sl, [fp]
 8009574:	e775      	b.n	8009462 <_dtoa_r+0x94a>
 8009576:	4638      	mov	r0, r7
 8009578:	e7ba      	b.n	80094f0 <_dtoa_r+0x9d8>
 800957a:	2201      	movs	r2, #1
 800957c:	e7e2      	b.n	8009544 <_dtoa_r+0xa2c>
 800957e:	9b03      	ldr	r3, [sp, #12]
 8009580:	2b00      	cmp	r3, #0
 8009582:	db04      	blt.n	800958e <_dtoa_r+0xa76>
 8009584:	9906      	ldr	r1, [sp, #24]
 8009586:	430b      	orrs	r3, r1
 8009588:	9904      	ldr	r1, [sp, #16]
 800958a:	430b      	orrs	r3, r1
 800958c:	d122      	bne.n	80095d4 <_dtoa_r+0xabc>
 800958e:	2a00      	cmp	r2, #0
 8009590:	ddee      	ble.n	8009570 <_dtoa_r+0xa58>
 8009592:	ee18 1a10 	vmov	r1, s16
 8009596:	2201      	movs	r2, #1
 8009598:	4620      	mov	r0, r4
 800959a:	f000 fba9 	bl	8009cf0 <__lshift>
 800959e:	4631      	mov	r1, r6
 80095a0:	ee08 0a10 	vmov	s16, r0
 80095a4:	f000 fc14 	bl	8009dd0 <__mcmp>
 80095a8:	2800      	cmp	r0, #0
 80095aa:	dc03      	bgt.n	80095b4 <_dtoa_r+0xa9c>
 80095ac:	d1e0      	bne.n	8009570 <_dtoa_r+0xa58>
 80095ae:	f01a 0f01 	tst.w	sl, #1
 80095b2:	d0dd      	beq.n	8009570 <_dtoa_r+0xa58>
 80095b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095b8:	d1d7      	bne.n	800956a <_dtoa_r+0xa52>
 80095ba:	2339      	movs	r3, #57	; 0x39
 80095bc:	f88b 3000 	strb.w	r3, [fp]
 80095c0:	462b      	mov	r3, r5
 80095c2:	461d      	mov	r5, r3
 80095c4:	3b01      	subs	r3, #1
 80095c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80095ca:	2a39      	cmp	r2, #57	; 0x39
 80095cc:	d071      	beq.n	80096b2 <_dtoa_r+0xb9a>
 80095ce:	3201      	adds	r2, #1
 80095d0:	701a      	strb	r2, [r3, #0]
 80095d2:	e746      	b.n	8009462 <_dtoa_r+0x94a>
 80095d4:	2a00      	cmp	r2, #0
 80095d6:	dd07      	ble.n	80095e8 <_dtoa_r+0xad0>
 80095d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095dc:	d0ed      	beq.n	80095ba <_dtoa_r+0xaa2>
 80095de:	f10a 0301 	add.w	r3, sl, #1
 80095e2:	f88b 3000 	strb.w	r3, [fp]
 80095e6:	e73c      	b.n	8009462 <_dtoa_r+0x94a>
 80095e8:	9b05      	ldr	r3, [sp, #20]
 80095ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80095ee:	4599      	cmp	r9, r3
 80095f0:	d047      	beq.n	8009682 <_dtoa_r+0xb6a>
 80095f2:	ee18 1a10 	vmov	r1, s16
 80095f6:	2300      	movs	r3, #0
 80095f8:	220a      	movs	r2, #10
 80095fa:	4620      	mov	r0, r4
 80095fc:	f000 f9c8 	bl	8009990 <__multadd>
 8009600:	45b8      	cmp	r8, r7
 8009602:	ee08 0a10 	vmov	s16, r0
 8009606:	f04f 0300 	mov.w	r3, #0
 800960a:	f04f 020a 	mov.w	r2, #10
 800960e:	4641      	mov	r1, r8
 8009610:	4620      	mov	r0, r4
 8009612:	d106      	bne.n	8009622 <_dtoa_r+0xb0a>
 8009614:	f000 f9bc 	bl	8009990 <__multadd>
 8009618:	4680      	mov	r8, r0
 800961a:	4607      	mov	r7, r0
 800961c:	f109 0901 	add.w	r9, r9, #1
 8009620:	e772      	b.n	8009508 <_dtoa_r+0x9f0>
 8009622:	f000 f9b5 	bl	8009990 <__multadd>
 8009626:	4639      	mov	r1, r7
 8009628:	4680      	mov	r8, r0
 800962a:	2300      	movs	r3, #0
 800962c:	220a      	movs	r2, #10
 800962e:	4620      	mov	r0, r4
 8009630:	f000 f9ae 	bl	8009990 <__multadd>
 8009634:	4607      	mov	r7, r0
 8009636:	e7f1      	b.n	800961c <_dtoa_r+0xb04>
 8009638:	9b03      	ldr	r3, [sp, #12]
 800963a:	9302      	str	r3, [sp, #8]
 800963c:	9d01      	ldr	r5, [sp, #4]
 800963e:	ee18 0a10 	vmov	r0, s16
 8009642:	4631      	mov	r1, r6
 8009644:	f7ff f9dc 	bl	8008a00 <quorem>
 8009648:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800964c:	9b01      	ldr	r3, [sp, #4]
 800964e:	f805 ab01 	strb.w	sl, [r5], #1
 8009652:	1aea      	subs	r2, r5, r3
 8009654:	9b02      	ldr	r3, [sp, #8]
 8009656:	4293      	cmp	r3, r2
 8009658:	dd09      	ble.n	800966e <_dtoa_r+0xb56>
 800965a:	ee18 1a10 	vmov	r1, s16
 800965e:	2300      	movs	r3, #0
 8009660:	220a      	movs	r2, #10
 8009662:	4620      	mov	r0, r4
 8009664:	f000 f994 	bl	8009990 <__multadd>
 8009668:	ee08 0a10 	vmov	s16, r0
 800966c:	e7e7      	b.n	800963e <_dtoa_r+0xb26>
 800966e:	9b02      	ldr	r3, [sp, #8]
 8009670:	2b00      	cmp	r3, #0
 8009672:	bfc8      	it	gt
 8009674:	461d      	movgt	r5, r3
 8009676:	9b01      	ldr	r3, [sp, #4]
 8009678:	bfd8      	it	le
 800967a:	2501      	movle	r5, #1
 800967c:	441d      	add	r5, r3
 800967e:	f04f 0800 	mov.w	r8, #0
 8009682:	ee18 1a10 	vmov	r1, s16
 8009686:	2201      	movs	r2, #1
 8009688:	4620      	mov	r0, r4
 800968a:	f000 fb31 	bl	8009cf0 <__lshift>
 800968e:	4631      	mov	r1, r6
 8009690:	ee08 0a10 	vmov	s16, r0
 8009694:	f000 fb9c 	bl	8009dd0 <__mcmp>
 8009698:	2800      	cmp	r0, #0
 800969a:	dc91      	bgt.n	80095c0 <_dtoa_r+0xaa8>
 800969c:	d102      	bne.n	80096a4 <_dtoa_r+0xb8c>
 800969e:	f01a 0f01 	tst.w	sl, #1
 80096a2:	d18d      	bne.n	80095c0 <_dtoa_r+0xaa8>
 80096a4:	462b      	mov	r3, r5
 80096a6:	461d      	mov	r5, r3
 80096a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096ac:	2a30      	cmp	r2, #48	; 0x30
 80096ae:	d0fa      	beq.n	80096a6 <_dtoa_r+0xb8e>
 80096b0:	e6d7      	b.n	8009462 <_dtoa_r+0x94a>
 80096b2:	9a01      	ldr	r2, [sp, #4]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d184      	bne.n	80095c2 <_dtoa_r+0xaaa>
 80096b8:	9b00      	ldr	r3, [sp, #0]
 80096ba:	3301      	adds	r3, #1
 80096bc:	9300      	str	r3, [sp, #0]
 80096be:	2331      	movs	r3, #49	; 0x31
 80096c0:	7013      	strb	r3, [r2, #0]
 80096c2:	e6ce      	b.n	8009462 <_dtoa_r+0x94a>
 80096c4:	4b09      	ldr	r3, [pc, #36]	; (80096ec <_dtoa_r+0xbd4>)
 80096c6:	f7ff ba95 	b.w	8008bf4 <_dtoa_r+0xdc>
 80096ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f47f aa6e 	bne.w	8008bae <_dtoa_r+0x96>
 80096d2:	4b07      	ldr	r3, [pc, #28]	; (80096f0 <_dtoa_r+0xbd8>)
 80096d4:	f7ff ba8e 	b.w	8008bf4 <_dtoa_r+0xdc>
 80096d8:	9b02      	ldr	r3, [sp, #8]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	dcae      	bgt.n	800963c <_dtoa_r+0xb24>
 80096de:	9b06      	ldr	r3, [sp, #24]
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	f73f aea8 	bgt.w	8009436 <_dtoa_r+0x91e>
 80096e6:	e7a9      	b.n	800963c <_dtoa_r+0xb24>
 80096e8:	0800ae53 	.word	0x0800ae53
 80096ec:	0800adb0 	.word	0x0800adb0
 80096f0:	0800add4 	.word	0x0800add4

080096f4 <__sflush_r>:
 80096f4:	898a      	ldrh	r2, [r1, #12]
 80096f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096fa:	4605      	mov	r5, r0
 80096fc:	0710      	lsls	r0, r2, #28
 80096fe:	460c      	mov	r4, r1
 8009700:	d458      	bmi.n	80097b4 <__sflush_r+0xc0>
 8009702:	684b      	ldr	r3, [r1, #4]
 8009704:	2b00      	cmp	r3, #0
 8009706:	dc05      	bgt.n	8009714 <__sflush_r+0x20>
 8009708:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800970a:	2b00      	cmp	r3, #0
 800970c:	dc02      	bgt.n	8009714 <__sflush_r+0x20>
 800970e:	2000      	movs	r0, #0
 8009710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009714:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009716:	2e00      	cmp	r6, #0
 8009718:	d0f9      	beq.n	800970e <__sflush_r+0x1a>
 800971a:	2300      	movs	r3, #0
 800971c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009720:	682f      	ldr	r7, [r5, #0]
 8009722:	602b      	str	r3, [r5, #0]
 8009724:	d032      	beq.n	800978c <__sflush_r+0x98>
 8009726:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	075a      	lsls	r2, r3, #29
 800972c:	d505      	bpl.n	800973a <__sflush_r+0x46>
 800972e:	6863      	ldr	r3, [r4, #4]
 8009730:	1ac0      	subs	r0, r0, r3
 8009732:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009734:	b10b      	cbz	r3, 800973a <__sflush_r+0x46>
 8009736:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009738:	1ac0      	subs	r0, r0, r3
 800973a:	2300      	movs	r3, #0
 800973c:	4602      	mov	r2, r0
 800973e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009740:	6a21      	ldr	r1, [r4, #32]
 8009742:	4628      	mov	r0, r5
 8009744:	47b0      	blx	r6
 8009746:	1c43      	adds	r3, r0, #1
 8009748:	89a3      	ldrh	r3, [r4, #12]
 800974a:	d106      	bne.n	800975a <__sflush_r+0x66>
 800974c:	6829      	ldr	r1, [r5, #0]
 800974e:	291d      	cmp	r1, #29
 8009750:	d82c      	bhi.n	80097ac <__sflush_r+0xb8>
 8009752:	4a2a      	ldr	r2, [pc, #168]	; (80097fc <__sflush_r+0x108>)
 8009754:	40ca      	lsrs	r2, r1
 8009756:	07d6      	lsls	r6, r2, #31
 8009758:	d528      	bpl.n	80097ac <__sflush_r+0xb8>
 800975a:	2200      	movs	r2, #0
 800975c:	6062      	str	r2, [r4, #4]
 800975e:	04d9      	lsls	r1, r3, #19
 8009760:	6922      	ldr	r2, [r4, #16]
 8009762:	6022      	str	r2, [r4, #0]
 8009764:	d504      	bpl.n	8009770 <__sflush_r+0x7c>
 8009766:	1c42      	adds	r2, r0, #1
 8009768:	d101      	bne.n	800976e <__sflush_r+0x7a>
 800976a:	682b      	ldr	r3, [r5, #0]
 800976c:	b903      	cbnz	r3, 8009770 <__sflush_r+0x7c>
 800976e:	6560      	str	r0, [r4, #84]	; 0x54
 8009770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009772:	602f      	str	r7, [r5, #0]
 8009774:	2900      	cmp	r1, #0
 8009776:	d0ca      	beq.n	800970e <__sflush_r+0x1a>
 8009778:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800977c:	4299      	cmp	r1, r3
 800977e:	d002      	beq.n	8009786 <__sflush_r+0x92>
 8009780:	4628      	mov	r0, r5
 8009782:	f000 fc3d 	bl	800a000 <_free_r>
 8009786:	2000      	movs	r0, #0
 8009788:	6360      	str	r0, [r4, #52]	; 0x34
 800978a:	e7c1      	b.n	8009710 <__sflush_r+0x1c>
 800978c:	6a21      	ldr	r1, [r4, #32]
 800978e:	2301      	movs	r3, #1
 8009790:	4628      	mov	r0, r5
 8009792:	47b0      	blx	r6
 8009794:	1c41      	adds	r1, r0, #1
 8009796:	d1c7      	bne.n	8009728 <__sflush_r+0x34>
 8009798:	682b      	ldr	r3, [r5, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d0c4      	beq.n	8009728 <__sflush_r+0x34>
 800979e:	2b1d      	cmp	r3, #29
 80097a0:	d001      	beq.n	80097a6 <__sflush_r+0xb2>
 80097a2:	2b16      	cmp	r3, #22
 80097a4:	d101      	bne.n	80097aa <__sflush_r+0xb6>
 80097a6:	602f      	str	r7, [r5, #0]
 80097a8:	e7b1      	b.n	800970e <__sflush_r+0x1a>
 80097aa:	89a3      	ldrh	r3, [r4, #12]
 80097ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097b0:	81a3      	strh	r3, [r4, #12]
 80097b2:	e7ad      	b.n	8009710 <__sflush_r+0x1c>
 80097b4:	690f      	ldr	r7, [r1, #16]
 80097b6:	2f00      	cmp	r7, #0
 80097b8:	d0a9      	beq.n	800970e <__sflush_r+0x1a>
 80097ba:	0793      	lsls	r3, r2, #30
 80097bc:	680e      	ldr	r6, [r1, #0]
 80097be:	bf08      	it	eq
 80097c0:	694b      	ldreq	r3, [r1, #20]
 80097c2:	600f      	str	r7, [r1, #0]
 80097c4:	bf18      	it	ne
 80097c6:	2300      	movne	r3, #0
 80097c8:	eba6 0807 	sub.w	r8, r6, r7
 80097cc:	608b      	str	r3, [r1, #8]
 80097ce:	f1b8 0f00 	cmp.w	r8, #0
 80097d2:	dd9c      	ble.n	800970e <__sflush_r+0x1a>
 80097d4:	6a21      	ldr	r1, [r4, #32]
 80097d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097d8:	4643      	mov	r3, r8
 80097da:	463a      	mov	r2, r7
 80097dc:	4628      	mov	r0, r5
 80097de:	47b0      	blx	r6
 80097e0:	2800      	cmp	r0, #0
 80097e2:	dc06      	bgt.n	80097f2 <__sflush_r+0xfe>
 80097e4:	89a3      	ldrh	r3, [r4, #12]
 80097e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097ea:	81a3      	strh	r3, [r4, #12]
 80097ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097f0:	e78e      	b.n	8009710 <__sflush_r+0x1c>
 80097f2:	4407      	add	r7, r0
 80097f4:	eba8 0800 	sub.w	r8, r8, r0
 80097f8:	e7e9      	b.n	80097ce <__sflush_r+0xda>
 80097fa:	bf00      	nop
 80097fc:	20400001 	.word	0x20400001

08009800 <_fflush_r>:
 8009800:	b538      	push	{r3, r4, r5, lr}
 8009802:	690b      	ldr	r3, [r1, #16]
 8009804:	4605      	mov	r5, r0
 8009806:	460c      	mov	r4, r1
 8009808:	b913      	cbnz	r3, 8009810 <_fflush_r+0x10>
 800980a:	2500      	movs	r5, #0
 800980c:	4628      	mov	r0, r5
 800980e:	bd38      	pop	{r3, r4, r5, pc}
 8009810:	b118      	cbz	r0, 800981a <_fflush_r+0x1a>
 8009812:	6983      	ldr	r3, [r0, #24]
 8009814:	b90b      	cbnz	r3, 800981a <_fflush_r+0x1a>
 8009816:	f7fe f9e3 	bl	8007be0 <__sinit>
 800981a:	4b14      	ldr	r3, [pc, #80]	; (800986c <_fflush_r+0x6c>)
 800981c:	429c      	cmp	r4, r3
 800981e:	d11b      	bne.n	8009858 <_fflush_r+0x58>
 8009820:	686c      	ldr	r4, [r5, #4]
 8009822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d0ef      	beq.n	800980a <_fflush_r+0xa>
 800982a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800982c:	07d0      	lsls	r0, r2, #31
 800982e:	d404      	bmi.n	800983a <_fflush_r+0x3a>
 8009830:	0599      	lsls	r1, r3, #22
 8009832:	d402      	bmi.n	800983a <_fflush_r+0x3a>
 8009834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009836:	f7fe fa96 	bl	8007d66 <__retarget_lock_acquire_recursive>
 800983a:	4628      	mov	r0, r5
 800983c:	4621      	mov	r1, r4
 800983e:	f7ff ff59 	bl	80096f4 <__sflush_r>
 8009842:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009844:	07da      	lsls	r2, r3, #31
 8009846:	4605      	mov	r5, r0
 8009848:	d4e0      	bmi.n	800980c <_fflush_r+0xc>
 800984a:	89a3      	ldrh	r3, [r4, #12]
 800984c:	059b      	lsls	r3, r3, #22
 800984e:	d4dd      	bmi.n	800980c <_fflush_r+0xc>
 8009850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009852:	f7fe fa89 	bl	8007d68 <__retarget_lock_release_recursive>
 8009856:	e7d9      	b.n	800980c <_fflush_r+0xc>
 8009858:	4b05      	ldr	r3, [pc, #20]	; (8009870 <_fflush_r+0x70>)
 800985a:	429c      	cmp	r4, r3
 800985c:	d101      	bne.n	8009862 <_fflush_r+0x62>
 800985e:	68ac      	ldr	r4, [r5, #8]
 8009860:	e7df      	b.n	8009822 <_fflush_r+0x22>
 8009862:	4b04      	ldr	r3, [pc, #16]	; (8009874 <_fflush_r+0x74>)
 8009864:	429c      	cmp	r4, r3
 8009866:	bf08      	it	eq
 8009868:	68ec      	ldreq	r4, [r5, #12]
 800986a:	e7da      	b.n	8009822 <_fflush_r+0x22>
 800986c:	0800ad5c 	.word	0x0800ad5c
 8009870:	0800ad7c 	.word	0x0800ad7c
 8009874:	0800ad3c 	.word	0x0800ad3c

08009878 <_localeconv_r>:
 8009878:	4800      	ldr	r0, [pc, #0]	; (800987c <_localeconv_r+0x4>)
 800987a:	4770      	bx	lr
 800987c:	20000164 	.word	0x20000164

08009880 <_lseek_r>:
 8009880:	b538      	push	{r3, r4, r5, lr}
 8009882:	4d07      	ldr	r5, [pc, #28]	; (80098a0 <_lseek_r+0x20>)
 8009884:	4604      	mov	r4, r0
 8009886:	4608      	mov	r0, r1
 8009888:	4611      	mov	r1, r2
 800988a:	2200      	movs	r2, #0
 800988c:	602a      	str	r2, [r5, #0]
 800988e:	461a      	mov	r2, r3
 8009890:	f7f8 f998 	bl	8001bc4 <_lseek>
 8009894:	1c43      	adds	r3, r0, #1
 8009896:	d102      	bne.n	800989e <_lseek_r+0x1e>
 8009898:	682b      	ldr	r3, [r5, #0]
 800989a:	b103      	cbz	r3, 800989e <_lseek_r+0x1e>
 800989c:	6023      	str	r3, [r4, #0]
 800989e:	bd38      	pop	{r3, r4, r5, pc}
 80098a0:	20004340 	.word	0x20004340

080098a4 <malloc>:
 80098a4:	4b02      	ldr	r3, [pc, #8]	; (80098b0 <malloc+0xc>)
 80098a6:	4601      	mov	r1, r0
 80098a8:	6818      	ldr	r0, [r3, #0]
 80098aa:	f7fe baa5 	b.w	8007df8 <_malloc_r>
 80098ae:	bf00      	nop
 80098b0:	20000010 	.word	0x20000010

080098b4 <__malloc_lock>:
 80098b4:	4801      	ldr	r0, [pc, #4]	; (80098bc <__malloc_lock+0x8>)
 80098b6:	f7fe ba56 	b.w	8007d66 <__retarget_lock_acquire_recursive>
 80098ba:	bf00      	nop
 80098bc:	20004334 	.word	0x20004334

080098c0 <__malloc_unlock>:
 80098c0:	4801      	ldr	r0, [pc, #4]	; (80098c8 <__malloc_unlock+0x8>)
 80098c2:	f7fe ba51 	b.w	8007d68 <__retarget_lock_release_recursive>
 80098c6:	bf00      	nop
 80098c8:	20004334 	.word	0x20004334

080098cc <_Balloc>:
 80098cc:	b570      	push	{r4, r5, r6, lr}
 80098ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80098d0:	4604      	mov	r4, r0
 80098d2:	460d      	mov	r5, r1
 80098d4:	b976      	cbnz	r6, 80098f4 <_Balloc+0x28>
 80098d6:	2010      	movs	r0, #16
 80098d8:	f7ff ffe4 	bl	80098a4 <malloc>
 80098dc:	4602      	mov	r2, r0
 80098de:	6260      	str	r0, [r4, #36]	; 0x24
 80098e0:	b920      	cbnz	r0, 80098ec <_Balloc+0x20>
 80098e2:	4b18      	ldr	r3, [pc, #96]	; (8009944 <_Balloc+0x78>)
 80098e4:	4818      	ldr	r0, [pc, #96]	; (8009948 <_Balloc+0x7c>)
 80098e6:	2166      	movs	r1, #102	; 0x66
 80098e8:	f000 fd44 	bl	800a374 <__assert_func>
 80098ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098f0:	6006      	str	r6, [r0, #0]
 80098f2:	60c6      	str	r6, [r0, #12]
 80098f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80098f6:	68f3      	ldr	r3, [r6, #12]
 80098f8:	b183      	cbz	r3, 800991c <_Balloc+0x50>
 80098fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009902:	b9b8      	cbnz	r0, 8009934 <_Balloc+0x68>
 8009904:	2101      	movs	r1, #1
 8009906:	fa01 f605 	lsl.w	r6, r1, r5
 800990a:	1d72      	adds	r2, r6, #5
 800990c:	0092      	lsls	r2, r2, #2
 800990e:	4620      	mov	r0, r4
 8009910:	f000 fb60 	bl	8009fd4 <_calloc_r>
 8009914:	b160      	cbz	r0, 8009930 <_Balloc+0x64>
 8009916:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800991a:	e00e      	b.n	800993a <_Balloc+0x6e>
 800991c:	2221      	movs	r2, #33	; 0x21
 800991e:	2104      	movs	r1, #4
 8009920:	4620      	mov	r0, r4
 8009922:	f000 fb57 	bl	8009fd4 <_calloc_r>
 8009926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009928:	60f0      	str	r0, [r6, #12]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d1e4      	bne.n	80098fa <_Balloc+0x2e>
 8009930:	2000      	movs	r0, #0
 8009932:	bd70      	pop	{r4, r5, r6, pc}
 8009934:	6802      	ldr	r2, [r0, #0]
 8009936:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800993a:	2300      	movs	r3, #0
 800993c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009940:	e7f7      	b.n	8009932 <_Balloc+0x66>
 8009942:	bf00      	nop
 8009944:	0800ade1 	.word	0x0800ade1
 8009948:	0800ae64 	.word	0x0800ae64

0800994c <_Bfree>:
 800994c:	b570      	push	{r4, r5, r6, lr}
 800994e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009950:	4605      	mov	r5, r0
 8009952:	460c      	mov	r4, r1
 8009954:	b976      	cbnz	r6, 8009974 <_Bfree+0x28>
 8009956:	2010      	movs	r0, #16
 8009958:	f7ff ffa4 	bl	80098a4 <malloc>
 800995c:	4602      	mov	r2, r0
 800995e:	6268      	str	r0, [r5, #36]	; 0x24
 8009960:	b920      	cbnz	r0, 800996c <_Bfree+0x20>
 8009962:	4b09      	ldr	r3, [pc, #36]	; (8009988 <_Bfree+0x3c>)
 8009964:	4809      	ldr	r0, [pc, #36]	; (800998c <_Bfree+0x40>)
 8009966:	218a      	movs	r1, #138	; 0x8a
 8009968:	f000 fd04 	bl	800a374 <__assert_func>
 800996c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009970:	6006      	str	r6, [r0, #0]
 8009972:	60c6      	str	r6, [r0, #12]
 8009974:	b13c      	cbz	r4, 8009986 <_Bfree+0x3a>
 8009976:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009978:	6862      	ldr	r2, [r4, #4]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009980:	6021      	str	r1, [r4, #0]
 8009982:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009986:	bd70      	pop	{r4, r5, r6, pc}
 8009988:	0800ade1 	.word	0x0800ade1
 800998c:	0800ae64 	.word	0x0800ae64

08009990 <__multadd>:
 8009990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009994:	690d      	ldr	r5, [r1, #16]
 8009996:	4607      	mov	r7, r0
 8009998:	460c      	mov	r4, r1
 800999a:	461e      	mov	r6, r3
 800999c:	f101 0c14 	add.w	ip, r1, #20
 80099a0:	2000      	movs	r0, #0
 80099a2:	f8dc 3000 	ldr.w	r3, [ip]
 80099a6:	b299      	uxth	r1, r3
 80099a8:	fb02 6101 	mla	r1, r2, r1, r6
 80099ac:	0c1e      	lsrs	r6, r3, #16
 80099ae:	0c0b      	lsrs	r3, r1, #16
 80099b0:	fb02 3306 	mla	r3, r2, r6, r3
 80099b4:	b289      	uxth	r1, r1
 80099b6:	3001      	adds	r0, #1
 80099b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80099bc:	4285      	cmp	r5, r0
 80099be:	f84c 1b04 	str.w	r1, [ip], #4
 80099c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80099c6:	dcec      	bgt.n	80099a2 <__multadd+0x12>
 80099c8:	b30e      	cbz	r6, 8009a0e <__multadd+0x7e>
 80099ca:	68a3      	ldr	r3, [r4, #8]
 80099cc:	42ab      	cmp	r3, r5
 80099ce:	dc19      	bgt.n	8009a04 <__multadd+0x74>
 80099d0:	6861      	ldr	r1, [r4, #4]
 80099d2:	4638      	mov	r0, r7
 80099d4:	3101      	adds	r1, #1
 80099d6:	f7ff ff79 	bl	80098cc <_Balloc>
 80099da:	4680      	mov	r8, r0
 80099dc:	b928      	cbnz	r0, 80099ea <__multadd+0x5a>
 80099de:	4602      	mov	r2, r0
 80099e0:	4b0c      	ldr	r3, [pc, #48]	; (8009a14 <__multadd+0x84>)
 80099e2:	480d      	ldr	r0, [pc, #52]	; (8009a18 <__multadd+0x88>)
 80099e4:	21b5      	movs	r1, #181	; 0xb5
 80099e6:	f000 fcc5 	bl	800a374 <__assert_func>
 80099ea:	6922      	ldr	r2, [r4, #16]
 80099ec:	3202      	adds	r2, #2
 80099ee:	f104 010c 	add.w	r1, r4, #12
 80099f2:	0092      	lsls	r2, r2, #2
 80099f4:	300c      	adds	r0, #12
 80099f6:	f7fe f9c8 	bl	8007d8a <memcpy>
 80099fa:	4621      	mov	r1, r4
 80099fc:	4638      	mov	r0, r7
 80099fe:	f7ff ffa5 	bl	800994c <_Bfree>
 8009a02:	4644      	mov	r4, r8
 8009a04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a08:	3501      	adds	r5, #1
 8009a0a:	615e      	str	r6, [r3, #20]
 8009a0c:	6125      	str	r5, [r4, #16]
 8009a0e:	4620      	mov	r0, r4
 8009a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a14:	0800ae53 	.word	0x0800ae53
 8009a18:	0800ae64 	.word	0x0800ae64

08009a1c <__hi0bits>:
 8009a1c:	0c03      	lsrs	r3, r0, #16
 8009a1e:	041b      	lsls	r3, r3, #16
 8009a20:	b9d3      	cbnz	r3, 8009a58 <__hi0bits+0x3c>
 8009a22:	0400      	lsls	r0, r0, #16
 8009a24:	2310      	movs	r3, #16
 8009a26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a2a:	bf04      	itt	eq
 8009a2c:	0200      	lsleq	r0, r0, #8
 8009a2e:	3308      	addeq	r3, #8
 8009a30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009a34:	bf04      	itt	eq
 8009a36:	0100      	lsleq	r0, r0, #4
 8009a38:	3304      	addeq	r3, #4
 8009a3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009a3e:	bf04      	itt	eq
 8009a40:	0080      	lsleq	r0, r0, #2
 8009a42:	3302      	addeq	r3, #2
 8009a44:	2800      	cmp	r0, #0
 8009a46:	db05      	blt.n	8009a54 <__hi0bits+0x38>
 8009a48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009a4c:	f103 0301 	add.w	r3, r3, #1
 8009a50:	bf08      	it	eq
 8009a52:	2320      	moveq	r3, #32
 8009a54:	4618      	mov	r0, r3
 8009a56:	4770      	bx	lr
 8009a58:	2300      	movs	r3, #0
 8009a5a:	e7e4      	b.n	8009a26 <__hi0bits+0xa>

08009a5c <__lo0bits>:
 8009a5c:	6803      	ldr	r3, [r0, #0]
 8009a5e:	f013 0207 	ands.w	r2, r3, #7
 8009a62:	4601      	mov	r1, r0
 8009a64:	d00b      	beq.n	8009a7e <__lo0bits+0x22>
 8009a66:	07da      	lsls	r2, r3, #31
 8009a68:	d423      	bmi.n	8009ab2 <__lo0bits+0x56>
 8009a6a:	0798      	lsls	r0, r3, #30
 8009a6c:	bf49      	itett	mi
 8009a6e:	085b      	lsrmi	r3, r3, #1
 8009a70:	089b      	lsrpl	r3, r3, #2
 8009a72:	2001      	movmi	r0, #1
 8009a74:	600b      	strmi	r3, [r1, #0]
 8009a76:	bf5c      	itt	pl
 8009a78:	600b      	strpl	r3, [r1, #0]
 8009a7a:	2002      	movpl	r0, #2
 8009a7c:	4770      	bx	lr
 8009a7e:	b298      	uxth	r0, r3
 8009a80:	b9a8      	cbnz	r0, 8009aae <__lo0bits+0x52>
 8009a82:	0c1b      	lsrs	r3, r3, #16
 8009a84:	2010      	movs	r0, #16
 8009a86:	b2da      	uxtb	r2, r3
 8009a88:	b90a      	cbnz	r2, 8009a8e <__lo0bits+0x32>
 8009a8a:	3008      	adds	r0, #8
 8009a8c:	0a1b      	lsrs	r3, r3, #8
 8009a8e:	071a      	lsls	r2, r3, #28
 8009a90:	bf04      	itt	eq
 8009a92:	091b      	lsreq	r3, r3, #4
 8009a94:	3004      	addeq	r0, #4
 8009a96:	079a      	lsls	r2, r3, #30
 8009a98:	bf04      	itt	eq
 8009a9a:	089b      	lsreq	r3, r3, #2
 8009a9c:	3002      	addeq	r0, #2
 8009a9e:	07da      	lsls	r2, r3, #31
 8009aa0:	d403      	bmi.n	8009aaa <__lo0bits+0x4e>
 8009aa2:	085b      	lsrs	r3, r3, #1
 8009aa4:	f100 0001 	add.w	r0, r0, #1
 8009aa8:	d005      	beq.n	8009ab6 <__lo0bits+0x5a>
 8009aaa:	600b      	str	r3, [r1, #0]
 8009aac:	4770      	bx	lr
 8009aae:	4610      	mov	r0, r2
 8009ab0:	e7e9      	b.n	8009a86 <__lo0bits+0x2a>
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	4770      	bx	lr
 8009ab6:	2020      	movs	r0, #32
 8009ab8:	4770      	bx	lr
	...

08009abc <__i2b>:
 8009abc:	b510      	push	{r4, lr}
 8009abe:	460c      	mov	r4, r1
 8009ac0:	2101      	movs	r1, #1
 8009ac2:	f7ff ff03 	bl	80098cc <_Balloc>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	b928      	cbnz	r0, 8009ad6 <__i2b+0x1a>
 8009aca:	4b05      	ldr	r3, [pc, #20]	; (8009ae0 <__i2b+0x24>)
 8009acc:	4805      	ldr	r0, [pc, #20]	; (8009ae4 <__i2b+0x28>)
 8009ace:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009ad2:	f000 fc4f 	bl	800a374 <__assert_func>
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	6144      	str	r4, [r0, #20]
 8009ada:	6103      	str	r3, [r0, #16]
 8009adc:	bd10      	pop	{r4, pc}
 8009ade:	bf00      	nop
 8009ae0:	0800ae53 	.word	0x0800ae53
 8009ae4:	0800ae64 	.word	0x0800ae64

08009ae8 <__multiply>:
 8009ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aec:	4691      	mov	r9, r2
 8009aee:	690a      	ldr	r2, [r1, #16]
 8009af0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	bfb8      	it	lt
 8009af8:	460b      	movlt	r3, r1
 8009afa:	460c      	mov	r4, r1
 8009afc:	bfbc      	itt	lt
 8009afe:	464c      	movlt	r4, r9
 8009b00:	4699      	movlt	r9, r3
 8009b02:	6927      	ldr	r7, [r4, #16]
 8009b04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b08:	68a3      	ldr	r3, [r4, #8]
 8009b0a:	6861      	ldr	r1, [r4, #4]
 8009b0c:	eb07 060a 	add.w	r6, r7, sl
 8009b10:	42b3      	cmp	r3, r6
 8009b12:	b085      	sub	sp, #20
 8009b14:	bfb8      	it	lt
 8009b16:	3101      	addlt	r1, #1
 8009b18:	f7ff fed8 	bl	80098cc <_Balloc>
 8009b1c:	b930      	cbnz	r0, 8009b2c <__multiply+0x44>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	4b44      	ldr	r3, [pc, #272]	; (8009c34 <__multiply+0x14c>)
 8009b22:	4845      	ldr	r0, [pc, #276]	; (8009c38 <__multiply+0x150>)
 8009b24:	f240 115d 	movw	r1, #349	; 0x15d
 8009b28:	f000 fc24 	bl	800a374 <__assert_func>
 8009b2c:	f100 0514 	add.w	r5, r0, #20
 8009b30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b34:	462b      	mov	r3, r5
 8009b36:	2200      	movs	r2, #0
 8009b38:	4543      	cmp	r3, r8
 8009b3a:	d321      	bcc.n	8009b80 <__multiply+0x98>
 8009b3c:	f104 0314 	add.w	r3, r4, #20
 8009b40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009b44:	f109 0314 	add.w	r3, r9, #20
 8009b48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009b4c:	9202      	str	r2, [sp, #8]
 8009b4e:	1b3a      	subs	r2, r7, r4
 8009b50:	3a15      	subs	r2, #21
 8009b52:	f022 0203 	bic.w	r2, r2, #3
 8009b56:	3204      	adds	r2, #4
 8009b58:	f104 0115 	add.w	r1, r4, #21
 8009b5c:	428f      	cmp	r7, r1
 8009b5e:	bf38      	it	cc
 8009b60:	2204      	movcc	r2, #4
 8009b62:	9201      	str	r2, [sp, #4]
 8009b64:	9a02      	ldr	r2, [sp, #8]
 8009b66:	9303      	str	r3, [sp, #12]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d80c      	bhi.n	8009b86 <__multiply+0x9e>
 8009b6c:	2e00      	cmp	r6, #0
 8009b6e:	dd03      	ble.n	8009b78 <__multiply+0x90>
 8009b70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d05a      	beq.n	8009c2e <__multiply+0x146>
 8009b78:	6106      	str	r6, [r0, #16]
 8009b7a:	b005      	add	sp, #20
 8009b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b80:	f843 2b04 	str.w	r2, [r3], #4
 8009b84:	e7d8      	b.n	8009b38 <__multiply+0x50>
 8009b86:	f8b3 a000 	ldrh.w	sl, [r3]
 8009b8a:	f1ba 0f00 	cmp.w	sl, #0
 8009b8e:	d024      	beq.n	8009bda <__multiply+0xf2>
 8009b90:	f104 0e14 	add.w	lr, r4, #20
 8009b94:	46a9      	mov	r9, r5
 8009b96:	f04f 0c00 	mov.w	ip, #0
 8009b9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009b9e:	f8d9 1000 	ldr.w	r1, [r9]
 8009ba2:	fa1f fb82 	uxth.w	fp, r2
 8009ba6:	b289      	uxth	r1, r1
 8009ba8:	fb0a 110b 	mla	r1, sl, fp, r1
 8009bac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009bb0:	f8d9 2000 	ldr.w	r2, [r9]
 8009bb4:	4461      	add	r1, ip
 8009bb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009bba:	fb0a c20b 	mla	r2, sl, fp, ip
 8009bbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009bc2:	b289      	uxth	r1, r1
 8009bc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009bc8:	4577      	cmp	r7, lr
 8009bca:	f849 1b04 	str.w	r1, [r9], #4
 8009bce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009bd2:	d8e2      	bhi.n	8009b9a <__multiply+0xb2>
 8009bd4:	9a01      	ldr	r2, [sp, #4]
 8009bd6:	f845 c002 	str.w	ip, [r5, r2]
 8009bda:	9a03      	ldr	r2, [sp, #12]
 8009bdc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009be0:	3304      	adds	r3, #4
 8009be2:	f1b9 0f00 	cmp.w	r9, #0
 8009be6:	d020      	beq.n	8009c2a <__multiply+0x142>
 8009be8:	6829      	ldr	r1, [r5, #0]
 8009bea:	f104 0c14 	add.w	ip, r4, #20
 8009bee:	46ae      	mov	lr, r5
 8009bf0:	f04f 0a00 	mov.w	sl, #0
 8009bf4:	f8bc b000 	ldrh.w	fp, [ip]
 8009bf8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009bfc:	fb09 220b 	mla	r2, r9, fp, r2
 8009c00:	4492      	add	sl, r2
 8009c02:	b289      	uxth	r1, r1
 8009c04:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009c08:	f84e 1b04 	str.w	r1, [lr], #4
 8009c0c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009c10:	f8be 1000 	ldrh.w	r1, [lr]
 8009c14:	0c12      	lsrs	r2, r2, #16
 8009c16:	fb09 1102 	mla	r1, r9, r2, r1
 8009c1a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009c1e:	4567      	cmp	r7, ip
 8009c20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c24:	d8e6      	bhi.n	8009bf4 <__multiply+0x10c>
 8009c26:	9a01      	ldr	r2, [sp, #4]
 8009c28:	50a9      	str	r1, [r5, r2]
 8009c2a:	3504      	adds	r5, #4
 8009c2c:	e79a      	b.n	8009b64 <__multiply+0x7c>
 8009c2e:	3e01      	subs	r6, #1
 8009c30:	e79c      	b.n	8009b6c <__multiply+0x84>
 8009c32:	bf00      	nop
 8009c34:	0800ae53 	.word	0x0800ae53
 8009c38:	0800ae64 	.word	0x0800ae64

08009c3c <__pow5mult>:
 8009c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c40:	4615      	mov	r5, r2
 8009c42:	f012 0203 	ands.w	r2, r2, #3
 8009c46:	4606      	mov	r6, r0
 8009c48:	460f      	mov	r7, r1
 8009c4a:	d007      	beq.n	8009c5c <__pow5mult+0x20>
 8009c4c:	4c25      	ldr	r4, [pc, #148]	; (8009ce4 <__pow5mult+0xa8>)
 8009c4e:	3a01      	subs	r2, #1
 8009c50:	2300      	movs	r3, #0
 8009c52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c56:	f7ff fe9b 	bl	8009990 <__multadd>
 8009c5a:	4607      	mov	r7, r0
 8009c5c:	10ad      	asrs	r5, r5, #2
 8009c5e:	d03d      	beq.n	8009cdc <__pow5mult+0xa0>
 8009c60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009c62:	b97c      	cbnz	r4, 8009c84 <__pow5mult+0x48>
 8009c64:	2010      	movs	r0, #16
 8009c66:	f7ff fe1d 	bl	80098a4 <malloc>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	6270      	str	r0, [r6, #36]	; 0x24
 8009c6e:	b928      	cbnz	r0, 8009c7c <__pow5mult+0x40>
 8009c70:	4b1d      	ldr	r3, [pc, #116]	; (8009ce8 <__pow5mult+0xac>)
 8009c72:	481e      	ldr	r0, [pc, #120]	; (8009cec <__pow5mult+0xb0>)
 8009c74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009c78:	f000 fb7c 	bl	800a374 <__assert_func>
 8009c7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c80:	6004      	str	r4, [r0, #0]
 8009c82:	60c4      	str	r4, [r0, #12]
 8009c84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009c88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c8c:	b94c      	cbnz	r4, 8009ca2 <__pow5mult+0x66>
 8009c8e:	f240 2171 	movw	r1, #625	; 0x271
 8009c92:	4630      	mov	r0, r6
 8009c94:	f7ff ff12 	bl	8009abc <__i2b>
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	6003      	str	r3, [r0, #0]
 8009ca2:	f04f 0900 	mov.w	r9, #0
 8009ca6:	07eb      	lsls	r3, r5, #31
 8009ca8:	d50a      	bpl.n	8009cc0 <__pow5mult+0x84>
 8009caa:	4639      	mov	r1, r7
 8009cac:	4622      	mov	r2, r4
 8009cae:	4630      	mov	r0, r6
 8009cb0:	f7ff ff1a 	bl	8009ae8 <__multiply>
 8009cb4:	4639      	mov	r1, r7
 8009cb6:	4680      	mov	r8, r0
 8009cb8:	4630      	mov	r0, r6
 8009cba:	f7ff fe47 	bl	800994c <_Bfree>
 8009cbe:	4647      	mov	r7, r8
 8009cc0:	106d      	asrs	r5, r5, #1
 8009cc2:	d00b      	beq.n	8009cdc <__pow5mult+0xa0>
 8009cc4:	6820      	ldr	r0, [r4, #0]
 8009cc6:	b938      	cbnz	r0, 8009cd8 <__pow5mult+0x9c>
 8009cc8:	4622      	mov	r2, r4
 8009cca:	4621      	mov	r1, r4
 8009ccc:	4630      	mov	r0, r6
 8009cce:	f7ff ff0b 	bl	8009ae8 <__multiply>
 8009cd2:	6020      	str	r0, [r4, #0]
 8009cd4:	f8c0 9000 	str.w	r9, [r0]
 8009cd8:	4604      	mov	r4, r0
 8009cda:	e7e4      	b.n	8009ca6 <__pow5mult+0x6a>
 8009cdc:	4638      	mov	r0, r7
 8009cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ce2:	bf00      	nop
 8009ce4:	0800afb0 	.word	0x0800afb0
 8009ce8:	0800ade1 	.word	0x0800ade1
 8009cec:	0800ae64 	.word	0x0800ae64

08009cf0 <__lshift>:
 8009cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cf4:	460c      	mov	r4, r1
 8009cf6:	6849      	ldr	r1, [r1, #4]
 8009cf8:	6923      	ldr	r3, [r4, #16]
 8009cfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009cfe:	68a3      	ldr	r3, [r4, #8]
 8009d00:	4607      	mov	r7, r0
 8009d02:	4691      	mov	r9, r2
 8009d04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d08:	f108 0601 	add.w	r6, r8, #1
 8009d0c:	42b3      	cmp	r3, r6
 8009d0e:	db0b      	blt.n	8009d28 <__lshift+0x38>
 8009d10:	4638      	mov	r0, r7
 8009d12:	f7ff fddb 	bl	80098cc <_Balloc>
 8009d16:	4605      	mov	r5, r0
 8009d18:	b948      	cbnz	r0, 8009d2e <__lshift+0x3e>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	4b2a      	ldr	r3, [pc, #168]	; (8009dc8 <__lshift+0xd8>)
 8009d1e:	482b      	ldr	r0, [pc, #172]	; (8009dcc <__lshift+0xdc>)
 8009d20:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009d24:	f000 fb26 	bl	800a374 <__assert_func>
 8009d28:	3101      	adds	r1, #1
 8009d2a:	005b      	lsls	r3, r3, #1
 8009d2c:	e7ee      	b.n	8009d0c <__lshift+0x1c>
 8009d2e:	2300      	movs	r3, #0
 8009d30:	f100 0114 	add.w	r1, r0, #20
 8009d34:	f100 0210 	add.w	r2, r0, #16
 8009d38:	4618      	mov	r0, r3
 8009d3a:	4553      	cmp	r3, sl
 8009d3c:	db37      	blt.n	8009dae <__lshift+0xbe>
 8009d3e:	6920      	ldr	r0, [r4, #16]
 8009d40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d44:	f104 0314 	add.w	r3, r4, #20
 8009d48:	f019 091f 	ands.w	r9, r9, #31
 8009d4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009d54:	d02f      	beq.n	8009db6 <__lshift+0xc6>
 8009d56:	f1c9 0e20 	rsb	lr, r9, #32
 8009d5a:	468a      	mov	sl, r1
 8009d5c:	f04f 0c00 	mov.w	ip, #0
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	fa02 f209 	lsl.w	r2, r2, r9
 8009d66:	ea42 020c 	orr.w	r2, r2, ip
 8009d6a:	f84a 2b04 	str.w	r2, [sl], #4
 8009d6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d72:	4298      	cmp	r0, r3
 8009d74:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009d78:	d8f2      	bhi.n	8009d60 <__lshift+0x70>
 8009d7a:	1b03      	subs	r3, r0, r4
 8009d7c:	3b15      	subs	r3, #21
 8009d7e:	f023 0303 	bic.w	r3, r3, #3
 8009d82:	3304      	adds	r3, #4
 8009d84:	f104 0215 	add.w	r2, r4, #21
 8009d88:	4290      	cmp	r0, r2
 8009d8a:	bf38      	it	cc
 8009d8c:	2304      	movcc	r3, #4
 8009d8e:	f841 c003 	str.w	ip, [r1, r3]
 8009d92:	f1bc 0f00 	cmp.w	ip, #0
 8009d96:	d001      	beq.n	8009d9c <__lshift+0xac>
 8009d98:	f108 0602 	add.w	r6, r8, #2
 8009d9c:	3e01      	subs	r6, #1
 8009d9e:	4638      	mov	r0, r7
 8009da0:	612e      	str	r6, [r5, #16]
 8009da2:	4621      	mov	r1, r4
 8009da4:	f7ff fdd2 	bl	800994c <_Bfree>
 8009da8:	4628      	mov	r0, r5
 8009daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dae:	f842 0f04 	str.w	r0, [r2, #4]!
 8009db2:	3301      	adds	r3, #1
 8009db4:	e7c1      	b.n	8009d3a <__lshift+0x4a>
 8009db6:	3904      	subs	r1, #4
 8009db8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dbc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009dc0:	4298      	cmp	r0, r3
 8009dc2:	d8f9      	bhi.n	8009db8 <__lshift+0xc8>
 8009dc4:	e7ea      	b.n	8009d9c <__lshift+0xac>
 8009dc6:	bf00      	nop
 8009dc8:	0800ae53 	.word	0x0800ae53
 8009dcc:	0800ae64 	.word	0x0800ae64

08009dd0 <__mcmp>:
 8009dd0:	b530      	push	{r4, r5, lr}
 8009dd2:	6902      	ldr	r2, [r0, #16]
 8009dd4:	690c      	ldr	r4, [r1, #16]
 8009dd6:	1b12      	subs	r2, r2, r4
 8009dd8:	d10e      	bne.n	8009df8 <__mcmp+0x28>
 8009dda:	f100 0314 	add.w	r3, r0, #20
 8009dde:	3114      	adds	r1, #20
 8009de0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009de4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009de8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009dec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009df0:	42a5      	cmp	r5, r4
 8009df2:	d003      	beq.n	8009dfc <__mcmp+0x2c>
 8009df4:	d305      	bcc.n	8009e02 <__mcmp+0x32>
 8009df6:	2201      	movs	r2, #1
 8009df8:	4610      	mov	r0, r2
 8009dfa:	bd30      	pop	{r4, r5, pc}
 8009dfc:	4283      	cmp	r3, r0
 8009dfe:	d3f3      	bcc.n	8009de8 <__mcmp+0x18>
 8009e00:	e7fa      	b.n	8009df8 <__mcmp+0x28>
 8009e02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e06:	e7f7      	b.n	8009df8 <__mcmp+0x28>

08009e08 <__mdiff>:
 8009e08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0c:	460c      	mov	r4, r1
 8009e0e:	4606      	mov	r6, r0
 8009e10:	4611      	mov	r1, r2
 8009e12:	4620      	mov	r0, r4
 8009e14:	4690      	mov	r8, r2
 8009e16:	f7ff ffdb 	bl	8009dd0 <__mcmp>
 8009e1a:	1e05      	subs	r5, r0, #0
 8009e1c:	d110      	bne.n	8009e40 <__mdiff+0x38>
 8009e1e:	4629      	mov	r1, r5
 8009e20:	4630      	mov	r0, r6
 8009e22:	f7ff fd53 	bl	80098cc <_Balloc>
 8009e26:	b930      	cbnz	r0, 8009e36 <__mdiff+0x2e>
 8009e28:	4b3a      	ldr	r3, [pc, #232]	; (8009f14 <__mdiff+0x10c>)
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	f240 2132 	movw	r1, #562	; 0x232
 8009e30:	4839      	ldr	r0, [pc, #228]	; (8009f18 <__mdiff+0x110>)
 8009e32:	f000 fa9f 	bl	800a374 <__assert_func>
 8009e36:	2301      	movs	r3, #1
 8009e38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e40:	bfa4      	itt	ge
 8009e42:	4643      	movge	r3, r8
 8009e44:	46a0      	movge	r8, r4
 8009e46:	4630      	mov	r0, r6
 8009e48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009e4c:	bfa6      	itte	ge
 8009e4e:	461c      	movge	r4, r3
 8009e50:	2500      	movge	r5, #0
 8009e52:	2501      	movlt	r5, #1
 8009e54:	f7ff fd3a 	bl	80098cc <_Balloc>
 8009e58:	b920      	cbnz	r0, 8009e64 <__mdiff+0x5c>
 8009e5a:	4b2e      	ldr	r3, [pc, #184]	; (8009f14 <__mdiff+0x10c>)
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009e62:	e7e5      	b.n	8009e30 <__mdiff+0x28>
 8009e64:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009e68:	6926      	ldr	r6, [r4, #16]
 8009e6a:	60c5      	str	r5, [r0, #12]
 8009e6c:	f104 0914 	add.w	r9, r4, #20
 8009e70:	f108 0514 	add.w	r5, r8, #20
 8009e74:	f100 0e14 	add.w	lr, r0, #20
 8009e78:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009e7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009e80:	f108 0210 	add.w	r2, r8, #16
 8009e84:	46f2      	mov	sl, lr
 8009e86:	2100      	movs	r1, #0
 8009e88:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009e90:	fa1f f883 	uxth.w	r8, r3
 8009e94:	fa11 f18b 	uxtah	r1, r1, fp
 8009e98:	0c1b      	lsrs	r3, r3, #16
 8009e9a:	eba1 0808 	sub.w	r8, r1, r8
 8009e9e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ea2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009ea6:	fa1f f888 	uxth.w	r8, r8
 8009eaa:	1419      	asrs	r1, r3, #16
 8009eac:	454e      	cmp	r6, r9
 8009eae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009eb2:	f84a 3b04 	str.w	r3, [sl], #4
 8009eb6:	d8e7      	bhi.n	8009e88 <__mdiff+0x80>
 8009eb8:	1b33      	subs	r3, r6, r4
 8009eba:	3b15      	subs	r3, #21
 8009ebc:	f023 0303 	bic.w	r3, r3, #3
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	3415      	adds	r4, #21
 8009ec4:	42a6      	cmp	r6, r4
 8009ec6:	bf38      	it	cc
 8009ec8:	2304      	movcc	r3, #4
 8009eca:	441d      	add	r5, r3
 8009ecc:	4473      	add	r3, lr
 8009ece:	469e      	mov	lr, r3
 8009ed0:	462e      	mov	r6, r5
 8009ed2:	4566      	cmp	r6, ip
 8009ed4:	d30e      	bcc.n	8009ef4 <__mdiff+0xec>
 8009ed6:	f10c 0203 	add.w	r2, ip, #3
 8009eda:	1b52      	subs	r2, r2, r5
 8009edc:	f022 0203 	bic.w	r2, r2, #3
 8009ee0:	3d03      	subs	r5, #3
 8009ee2:	45ac      	cmp	ip, r5
 8009ee4:	bf38      	it	cc
 8009ee6:	2200      	movcc	r2, #0
 8009ee8:	441a      	add	r2, r3
 8009eea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009eee:	b17b      	cbz	r3, 8009f10 <__mdiff+0x108>
 8009ef0:	6107      	str	r7, [r0, #16]
 8009ef2:	e7a3      	b.n	8009e3c <__mdiff+0x34>
 8009ef4:	f856 8b04 	ldr.w	r8, [r6], #4
 8009ef8:	fa11 f288 	uxtah	r2, r1, r8
 8009efc:	1414      	asrs	r4, r2, #16
 8009efe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009f02:	b292      	uxth	r2, r2
 8009f04:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009f08:	f84e 2b04 	str.w	r2, [lr], #4
 8009f0c:	1421      	asrs	r1, r4, #16
 8009f0e:	e7e0      	b.n	8009ed2 <__mdiff+0xca>
 8009f10:	3f01      	subs	r7, #1
 8009f12:	e7ea      	b.n	8009eea <__mdiff+0xe2>
 8009f14:	0800ae53 	.word	0x0800ae53
 8009f18:	0800ae64 	.word	0x0800ae64

08009f1c <__d2b>:
 8009f1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f20:	4689      	mov	r9, r1
 8009f22:	2101      	movs	r1, #1
 8009f24:	ec57 6b10 	vmov	r6, r7, d0
 8009f28:	4690      	mov	r8, r2
 8009f2a:	f7ff fccf 	bl	80098cc <_Balloc>
 8009f2e:	4604      	mov	r4, r0
 8009f30:	b930      	cbnz	r0, 8009f40 <__d2b+0x24>
 8009f32:	4602      	mov	r2, r0
 8009f34:	4b25      	ldr	r3, [pc, #148]	; (8009fcc <__d2b+0xb0>)
 8009f36:	4826      	ldr	r0, [pc, #152]	; (8009fd0 <__d2b+0xb4>)
 8009f38:	f240 310a 	movw	r1, #778	; 0x30a
 8009f3c:	f000 fa1a 	bl	800a374 <__assert_func>
 8009f40:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009f44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009f48:	bb35      	cbnz	r5, 8009f98 <__d2b+0x7c>
 8009f4a:	2e00      	cmp	r6, #0
 8009f4c:	9301      	str	r3, [sp, #4]
 8009f4e:	d028      	beq.n	8009fa2 <__d2b+0x86>
 8009f50:	4668      	mov	r0, sp
 8009f52:	9600      	str	r6, [sp, #0]
 8009f54:	f7ff fd82 	bl	8009a5c <__lo0bits>
 8009f58:	9900      	ldr	r1, [sp, #0]
 8009f5a:	b300      	cbz	r0, 8009f9e <__d2b+0x82>
 8009f5c:	9a01      	ldr	r2, [sp, #4]
 8009f5e:	f1c0 0320 	rsb	r3, r0, #32
 8009f62:	fa02 f303 	lsl.w	r3, r2, r3
 8009f66:	430b      	orrs	r3, r1
 8009f68:	40c2      	lsrs	r2, r0
 8009f6a:	6163      	str	r3, [r4, #20]
 8009f6c:	9201      	str	r2, [sp, #4]
 8009f6e:	9b01      	ldr	r3, [sp, #4]
 8009f70:	61a3      	str	r3, [r4, #24]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	bf14      	ite	ne
 8009f76:	2202      	movne	r2, #2
 8009f78:	2201      	moveq	r2, #1
 8009f7a:	6122      	str	r2, [r4, #16]
 8009f7c:	b1d5      	cbz	r5, 8009fb4 <__d2b+0x98>
 8009f7e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f82:	4405      	add	r5, r0
 8009f84:	f8c9 5000 	str.w	r5, [r9]
 8009f88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f8c:	f8c8 0000 	str.w	r0, [r8]
 8009f90:	4620      	mov	r0, r4
 8009f92:	b003      	add	sp, #12
 8009f94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f9c:	e7d5      	b.n	8009f4a <__d2b+0x2e>
 8009f9e:	6161      	str	r1, [r4, #20]
 8009fa0:	e7e5      	b.n	8009f6e <__d2b+0x52>
 8009fa2:	a801      	add	r0, sp, #4
 8009fa4:	f7ff fd5a 	bl	8009a5c <__lo0bits>
 8009fa8:	9b01      	ldr	r3, [sp, #4]
 8009faa:	6163      	str	r3, [r4, #20]
 8009fac:	2201      	movs	r2, #1
 8009fae:	6122      	str	r2, [r4, #16]
 8009fb0:	3020      	adds	r0, #32
 8009fb2:	e7e3      	b.n	8009f7c <__d2b+0x60>
 8009fb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009fb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009fbc:	f8c9 0000 	str.w	r0, [r9]
 8009fc0:	6918      	ldr	r0, [r3, #16]
 8009fc2:	f7ff fd2b 	bl	8009a1c <__hi0bits>
 8009fc6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009fca:	e7df      	b.n	8009f8c <__d2b+0x70>
 8009fcc:	0800ae53 	.word	0x0800ae53
 8009fd0:	0800ae64 	.word	0x0800ae64

08009fd4 <_calloc_r>:
 8009fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fd6:	fba1 2402 	umull	r2, r4, r1, r2
 8009fda:	b94c      	cbnz	r4, 8009ff0 <_calloc_r+0x1c>
 8009fdc:	4611      	mov	r1, r2
 8009fde:	9201      	str	r2, [sp, #4]
 8009fe0:	f7fd ff0a 	bl	8007df8 <_malloc_r>
 8009fe4:	9a01      	ldr	r2, [sp, #4]
 8009fe6:	4605      	mov	r5, r0
 8009fe8:	b930      	cbnz	r0, 8009ff8 <_calloc_r+0x24>
 8009fea:	4628      	mov	r0, r5
 8009fec:	b003      	add	sp, #12
 8009fee:	bd30      	pop	{r4, r5, pc}
 8009ff0:	220c      	movs	r2, #12
 8009ff2:	6002      	str	r2, [r0, #0]
 8009ff4:	2500      	movs	r5, #0
 8009ff6:	e7f8      	b.n	8009fea <_calloc_r+0x16>
 8009ff8:	4621      	mov	r1, r4
 8009ffa:	f7fd fed4 	bl	8007da6 <memset>
 8009ffe:	e7f4      	b.n	8009fea <_calloc_r+0x16>

0800a000 <_free_r>:
 800a000:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a002:	2900      	cmp	r1, #0
 800a004:	d044      	beq.n	800a090 <_free_r+0x90>
 800a006:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a00a:	9001      	str	r0, [sp, #4]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	f1a1 0404 	sub.w	r4, r1, #4
 800a012:	bfb8      	it	lt
 800a014:	18e4      	addlt	r4, r4, r3
 800a016:	f7ff fc4d 	bl	80098b4 <__malloc_lock>
 800a01a:	4a1e      	ldr	r2, [pc, #120]	; (800a094 <_free_r+0x94>)
 800a01c:	9801      	ldr	r0, [sp, #4]
 800a01e:	6813      	ldr	r3, [r2, #0]
 800a020:	b933      	cbnz	r3, 800a030 <_free_r+0x30>
 800a022:	6063      	str	r3, [r4, #4]
 800a024:	6014      	str	r4, [r2, #0]
 800a026:	b003      	add	sp, #12
 800a028:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a02c:	f7ff bc48 	b.w	80098c0 <__malloc_unlock>
 800a030:	42a3      	cmp	r3, r4
 800a032:	d908      	bls.n	800a046 <_free_r+0x46>
 800a034:	6825      	ldr	r5, [r4, #0]
 800a036:	1961      	adds	r1, r4, r5
 800a038:	428b      	cmp	r3, r1
 800a03a:	bf01      	itttt	eq
 800a03c:	6819      	ldreq	r1, [r3, #0]
 800a03e:	685b      	ldreq	r3, [r3, #4]
 800a040:	1949      	addeq	r1, r1, r5
 800a042:	6021      	streq	r1, [r4, #0]
 800a044:	e7ed      	b.n	800a022 <_free_r+0x22>
 800a046:	461a      	mov	r2, r3
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	b10b      	cbz	r3, 800a050 <_free_r+0x50>
 800a04c:	42a3      	cmp	r3, r4
 800a04e:	d9fa      	bls.n	800a046 <_free_r+0x46>
 800a050:	6811      	ldr	r1, [r2, #0]
 800a052:	1855      	adds	r5, r2, r1
 800a054:	42a5      	cmp	r5, r4
 800a056:	d10b      	bne.n	800a070 <_free_r+0x70>
 800a058:	6824      	ldr	r4, [r4, #0]
 800a05a:	4421      	add	r1, r4
 800a05c:	1854      	adds	r4, r2, r1
 800a05e:	42a3      	cmp	r3, r4
 800a060:	6011      	str	r1, [r2, #0]
 800a062:	d1e0      	bne.n	800a026 <_free_r+0x26>
 800a064:	681c      	ldr	r4, [r3, #0]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	6053      	str	r3, [r2, #4]
 800a06a:	4421      	add	r1, r4
 800a06c:	6011      	str	r1, [r2, #0]
 800a06e:	e7da      	b.n	800a026 <_free_r+0x26>
 800a070:	d902      	bls.n	800a078 <_free_r+0x78>
 800a072:	230c      	movs	r3, #12
 800a074:	6003      	str	r3, [r0, #0]
 800a076:	e7d6      	b.n	800a026 <_free_r+0x26>
 800a078:	6825      	ldr	r5, [r4, #0]
 800a07a:	1961      	adds	r1, r4, r5
 800a07c:	428b      	cmp	r3, r1
 800a07e:	bf04      	itt	eq
 800a080:	6819      	ldreq	r1, [r3, #0]
 800a082:	685b      	ldreq	r3, [r3, #4]
 800a084:	6063      	str	r3, [r4, #4]
 800a086:	bf04      	itt	eq
 800a088:	1949      	addeq	r1, r1, r5
 800a08a:	6021      	streq	r1, [r4, #0]
 800a08c:	6054      	str	r4, [r2, #4]
 800a08e:	e7ca      	b.n	800a026 <_free_r+0x26>
 800a090:	b003      	add	sp, #12
 800a092:	bd30      	pop	{r4, r5, pc}
 800a094:	20004338 	.word	0x20004338

0800a098 <__ssputs_r>:
 800a098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a09c:	688e      	ldr	r6, [r1, #8]
 800a09e:	429e      	cmp	r6, r3
 800a0a0:	4682      	mov	sl, r0
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	4690      	mov	r8, r2
 800a0a6:	461f      	mov	r7, r3
 800a0a8:	d838      	bhi.n	800a11c <__ssputs_r+0x84>
 800a0aa:	898a      	ldrh	r2, [r1, #12]
 800a0ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a0b0:	d032      	beq.n	800a118 <__ssputs_r+0x80>
 800a0b2:	6825      	ldr	r5, [r4, #0]
 800a0b4:	6909      	ldr	r1, [r1, #16]
 800a0b6:	eba5 0901 	sub.w	r9, r5, r1
 800a0ba:	6965      	ldr	r5, [r4, #20]
 800a0bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	444b      	add	r3, r9
 800a0c8:	106d      	asrs	r5, r5, #1
 800a0ca:	429d      	cmp	r5, r3
 800a0cc:	bf38      	it	cc
 800a0ce:	461d      	movcc	r5, r3
 800a0d0:	0553      	lsls	r3, r2, #21
 800a0d2:	d531      	bpl.n	800a138 <__ssputs_r+0xa0>
 800a0d4:	4629      	mov	r1, r5
 800a0d6:	f7fd fe8f 	bl	8007df8 <_malloc_r>
 800a0da:	4606      	mov	r6, r0
 800a0dc:	b950      	cbnz	r0, 800a0f4 <__ssputs_r+0x5c>
 800a0de:	230c      	movs	r3, #12
 800a0e0:	f8ca 3000 	str.w	r3, [sl]
 800a0e4:	89a3      	ldrh	r3, [r4, #12]
 800a0e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0ea:	81a3      	strh	r3, [r4, #12]
 800a0ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f4:	6921      	ldr	r1, [r4, #16]
 800a0f6:	464a      	mov	r2, r9
 800a0f8:	f7fd fe47 	bl	8007d8a <memcpy>
 800a0fc:	89a3      	ldrh	r3, [r4, #12]
 800a0fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a106:	81a3      	strh	r3, [r4, #12]
 800a108:	6126      	str	r6, [r4, #16]
 800a10a:	6165      	str	r5, [r4, #20]
 800a10c:	444e      	add	r6, r9
 800a10e:	eba5 0509 	sub.w	r5, r5, r9
 800a112:	6026      	str	r6, [r4, #0]
 800a114:	60a5      	str	r5, [r4, #8]
 800a116:	463e      	mov	r6, r7
 800a118:	42be      	cmp	r6, r7
 800a11a:	d900      	bls.n	800a11e <__ssputs_r+0x86>
 800a11c:	463e      	mov	r6, r7
 800a11e:	6820      	ldr	r0, [r4, #0]
 800a120:	4632      	mov	r2, r6
 800a122:	4641      	mov	r1, r8
 800a124:	f000 f968 	bl	800a3f8 <memmove>
 800a128:	68a3      	ldr	r3, [r4, #8]
 800a12a:	1b9b      	subs	r3, r3, r6
 800a12c:	60a3      	str	r3, [r4, #8]
 800a12e:	6823      	ldr	r3, [r4, #0]
 800a130:	4433      	add	r3, r6
 800a132:	6023      	str	r3, [r4, #0]
 800a134:	2000      	movs	r0, #0
 800a136:	e7db      	b.n	800a0f0 <__ssputs_r+0x58>
 800a138:	462a      	mov	r2, r5
 800a13a:	f000 f977 	bl	800a42c <_realloc_r>
 800a13e:	4606      	mov	r6, r0
 800a140:	2800      	cmp	r0, #0
 800a142:	d1e1      	bne.n	800a108 <__ssputs_r+0x70>
 800a144:	6921      	ldr	r1, [r4, #16]
 800a146:	4650      	mov	r0, sl
 800a148:	f7ff ff5a 	bl	800a000 <_free_r>
 800a14c:	e7c7      	b.n	800a0de <__ssputs_r+0x46>
	...

0800a150 <_svfiprintf_r>:
 800a150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a154:	4698      	mov	r8, r3
 800a156:	898b      	ldrh	r3, [r1, #12]
 800a158:	061b      	lsls	r3, r3, #24
 800a15a:	b09d      	sub	sp, #116	; 0x74
 800a15c:	4607      	mov	r7, r0
 800a15e:	460d      	mov	r5, r1
 800a160:	4614      	mov	r4, r2
 800a162:	d50e      	bpl.n	800a182 <_svfiprintf_r+0x32>
 800a164:	690b      	ldr	r3, [r1, #16]
 800a166:	b963      	cbnz	r3, 800a182 <_svfiprintf_r+0x32>
 800a168:	2140      	movs	r1, #64	; 0x40
 800a16a:	f7fd fe45 	bl	8007df8 <_malloc_r>
 800a16e:	6028      	str	r0, [r5, #0]
 800a170:	6128      	str	r0, [r5, #16]
 800a172:	b920      	cbnz	r0, 800a17e <_svfiprintf_r+0x2e>
 800a174:	230c      	movs	r3, #12
 800a176:	603b      	str	r3, [r7, #0]
 800a178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a17c:	e0d1      	b.n	800a322 <_svfiprintf_r+0x1d2>
 800a17e:	2340      	movs	r3, #64	; 0x40
 800a180:	616b      	str	r3, [r5, #20]
 800a182:	2300      	movs	r3, #0
 800a184:	9309      	str	r3, [sp, #36]	; 0x24
 800a186:	2320      	movs	r3, #32
 800a188:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a18c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a190:	2330      	movs	r3, #48	; 0x30
 800a192:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a33c <_svfiprintf_r+0x1ec>
 800a196:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a19a:	f04f 0901 	mov.w	r9, #1
 800a19e:	4623      	mov	r3, r4
 800a1a0:	469a      	mov	sl, r3
 800a1a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1a6:	b10a      	cbz	r2, 800a1ac <_svfiprintf_r+0x5c>
 800a1a8:	2a25      	cmp	r2, #37	; 0x25
 800a1aa:	d1f9      	bne.n	800a1a0 <_svfiprintf_r+0x50>
 800a1ac:	ebba 0b04 	subs.w	fp, sl, r4
 800a1b0:	d00b      	beq.n	800a1ca <_svfiprintf_r+0x7a>
 800a1b2:	465b      	mov	r3, fp
 800a1b4:	4622      	mov	r2, r4
 800a1b6:	4629      	mov	r1, r5
 800a1b8:	4638      	mov	r0, r7
 800a1ba:	f7ff ff6d 	bl	800a098 <__ssputs_r>
 800a1be:	3001      	adds	r0, #1
 800a1c0:	f000 80aa 	beq.w	800a318 <_svfiprintf_r+0x1c8>
 800a1c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1c6:	445a      	add	r2, fp
 800a1c8:	9209      	str	r2, [sp, #36]	; 0x24
 800a1ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f000 80a2 	beq.w	800a318 <_svfiprintf_r+0x1c8>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1de:	f10a 0a01 	add.w	sl, sl, #1
 800a1e2:	9304      	str	r3, [sp, #16]
 800a1e4:	9307      	str	r3, [sp, #28]
 800a1e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1ea:	931a      	str	r3, [sp, #104]	; 0x68
 800a1ec:	4654      	mov	r4, sl
 800a1ee:	2205      	movs	r2, #5
 800a1f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1f4:	4851      	ldr	r0, [pc, #324]	; (800a33c <_svfiprintf_r+0x1ec>)
 800a1f6:	f7f6 f813 	bl	8000220 <memchr>
 800a1fa:	9a04      	ldr	r2, [sp, #16]
 800a1fc:	b9d8      	cbnz	r0, 800a236 <_svfiprintf_r+0xe6>
 800a1fe:	06d0      	lsls	r0, r2, #27
 800a200:	bf44      	itt	mi
 800a202:	2320      	movmi	r3, #32
 800a204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a208:	0711      	lsls	r1, r2, #28
 800a20a:	bf44      	itt	mi
 800a20c:	232b      	movmi	r3, #43	; 0x2b
 800a20e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a212:	f89a 3000 	ldrb.w	r3, [sl]
 800a216:	2b2a      	cmp	r3, #42	; 0x2a
 800a218:	d015      	beq.n	800a246 <_svfiprintf_r+0xf6>
 800a21a:	9a07      	ldr	r2, [sp, #28]
 800a21c:	4654      	mov	r4, sl
 800a21e:	2000      	movs	r0, #0
 800a220:	f04f 0c0a 	mov.w	ip, #10
 800a224:	4621      	mov	r1, r4
 800a226:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a22a:	3b30      	subs	r3, #48	; 0x30
 800a22c:	2b09      	cmp	r3, #9
 800a22e:	d94e      	bls.n	800a2ce <_svfiprintf_r+0x17e>
 800a230:	b1b0      	cbz	r0, 800a260 <_svfiprintf_r+0x110>
 800a232:	9207      	str	r2, [sp, #28]
 800a234:	e014      	b.n	800a260 <_svfiprintf_r+0x110>
 800a236:	eba0 0308 	sub.w	r3, r0, r8
 800a23a:	fa09 f303 	lsl.w	r3, r9, r3
 800a23e:	4313      	orrs	r3, r2
 800a240:	9304      	str	r3, [sp, #16]
 800a242:	46a2      	mov	sl, r4
 800a244:	e7d2      	b.n	800a1ec <_svfiprintf_r+0x9c>
 800a246:	9b03      	ldr	r3, [sp, #12]
 800a248:	1d19      	adds	r1, r3, #4
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	9103      	str	r1, [sp, #12]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	bfbb      	ittet	lt
 800a252:	425b      	neglt	r3, r3
 800a254:	f042 0202 	orrlt.w	r2, r2, #2
 800a258:	9307      	strge	r3, [sp, #28]
 800a25a:	9307      	strlt	r3, [sp, #28]
 800a25c:	bfb8      	it	lt
 800a25e:	9204      	strlt	r2, [sp, #16]
 800a260:	7823      	ldrb	r3, [r4, #0]
 800a262:	2b2e      	cmp	r3, #46	; 0x2e
 800a264:	d10c      	bne.n	800a280 <_svfiprintf_r+0x130>
 800a266:	7863      	ldrb	r3, [r4, #1]
 800a268:	2b2a      	cmp	r3, #42	; 0x2a
 800a26a:	d135      	bne.n	800a2d8 <_svfiprintf_r+0x188>
 800a26c:	9b03      	ldr	r3, [sp, #12]
 800a26e:	1d1a      	adds	r2, r3, #4
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	9203      	str	r2, [sp, #12]
 800a274:	2b00      	cmp	r3, #0
 800a276:	bfb8      	it	lt
 800a278:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a27c:	3402      	adds	r4, #2
 800a27e:	9305      	str	r3, [sp, #20]
 800a280:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a34c <_svfiprintf_r+0x1fc>
 800a284:	7821      	ldrb	r1, [r4, #0]
 800a286:	2203      	movs	r2, #3
 800a288:	4650      	mov	r0, sl
 800a28a:	f7f5 ffc9 	bl	8000220 <memchr>
 800a28e:	b140      	cbz	r0, 800a2a2 <_svfiprintf_r+0x152>
 800a290:	2340      	movs	r3, #64	; 0x40
 800a292:	eba0 000a 	sub.w	r0, r0, sl
 800a296:	fa03 f000 	lsl.w	r0, r3, r0
 800a29a:	9b04      	ldr	r3, [sp, #16]
 800a29c:	4303      	orrs	r3, r0
 800a29e:	3401      	adds	r4, #1
 800a2a0:	9304      	str	r3, [sp, #16]
 800a2a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2a6:	4826      	ldr	r0, [pc, #152]	; (800a340 <_svfiprintf_r+0x1f0>)
 800a2a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2ac:	2206      	movs	r2, #6
 800a2ae:	f7f5 ffb7 	bl	8000220 <memchr>
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d038      	beq.n	800a328 <_svfiprintf_r+0x1d8>
 800a2b6:	4b23      	ldr	r3, [pc, #140]	; (800a344 <_svfiprintf_r+0x1f4>)
 800a2b8:	bb1b      	cbnz	r3, 800a302 <_svfiprintf_r+0x1b2>
 800a2ba:	9b03      	ldr	r3, [sp, #12]
 800a2bc:	3307      	adds	r3, #7
 800a2be:	f023 0307 	bic.w	r3, r3, #7
 800a2c2:	3308      	adds	r3, #8
 800a2c4:	9303      	str	r3, [sp, #12]
 800a2c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2c8:	4433      	add	r3, r6
 800a2ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a2cc:	e767      	b.n	800a19e <_svfiprintf_r+0x4e>
 800a2ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2d2:	460c      	mov	r4, r1
 800a2d4:	2001      	movs	r0, #1
 800a2d6:	e7a5      	b.n	800a224 <_svfiprintf_r+0xd4>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	3401      	adds	r4, #1
 800a2dc:	9305      	str	r3, [sp, #20]
 800a2de:	4619      	mov	r1, r3
 800a2e0:	f04f 0c0a 	mov.w	ip, #10
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2ea:	3a30      	subs	r2, #48	; 0x30
 800a2ec:	2a09      	cmp	r2, #9
 800a2ee:	d903      	bls.n	800a2f8 <_svfiprintf_r+0x1a8>
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d0c5      	beq.n	800a280 <_svfiprintf_r+0x130>
 800a2f4:	9105      	str	r1, [sp, #20]
 800a2f6:	e7c3      	b.n	800a280 <_svfiprintf_r+0x130>
 800a2f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	2301      	movs	r3, #1
 800a300:	e7f0      	b.n	800a2e4 <_svfiprintf_r+0x194>
 800a302:	ab03      	add	r3, sp, #12
 800a304:	9300      	str	r3, [sp, #0]
 800a306:	462a      	mov	r2, r5
 800a308:	4b0f      	ldr	r3, [pc, #60]	; (800a348 <_svfiprintf_r+0x1f8>)
 800a30a:	a904      	add	r1, sp, #16
 800a30c:	4638      	mov	r0, r7
 800a30e:	f7fd fe87 	bl	8008020 <_printf_float>
 800a312:	1c42      	adds	r2, r0, #1
 800a314:	4606      	mov	r6, r0
 800a316:	d1d6      	bne.n	800a2c6 <_svfiprintf_r+0x176>
 800a318:	89ab      	ldrh	r3, [r5, #12]
 800a31a:	065b      	lsls	r3, r3, #25
 800a31c:	f53f af2c 	bmi.w	800a178 <_svfiprintf_r+0x28>
 800a320:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a322:	b01d      	add	sp, #116	; 0x74
 800a324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a328:	ab03      	add	r3, sp, #12
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	462a      	mov	r2, r5
 800a32e:	4b06      	ldr	r3, [pc, #24]	; (800a348 <_svfiprintf_r+0x1f8>)
 800a330:	a904      	add	r1, sp, #16
 800a332:	4638      	mov	r0, r7
 800a334:	f7fe f918 	bl	8008568 <_printf_i>
 800a338:	e7eb      	b.n	800a312 <_svfiprintf_r+0x1c2>
 800a33a:	bf00      	nop
 800a33c:	0800afbc 	.word	0x0800afbc
 800a340:	0800afc6 	.word	0x0800afc6
 800a344:	08008021 	.word	0x08008021
 800a348:	0800a099 	.word	0x0800a099
 800a34c:	0800afc2 	.word	0x0800afc2

0800a350 <_read_r>:
 800a350:	b538      	push	{r3, r4, r5, lr}
 800a352:	4d07      	ldr	r5, [pc, #28]	; (800a370 <_read_r+0x20>)
 800a354:	4604      	mov	r4, r0
 800a356:	4608      	mov	r0, r1
 800a358:	4611      	mov	r1, r2
 800a35a:	2200      	movs	r2, #0
 800a35c:	602a      	str	r2, [r5, #0]
 800a35e:	461a      	mov	r2, r3
 800a360:	f7f7 fbd0 	bl	8001b04 <_read>
 800a364:	1c43      	adds	r3, r0, #1
 800a366:	d102      	bne.n	800a36e <_read_r+0x1e>
 800a368:	682b      	ldr	r3, [r5, #0]
 800a36a:	b103      	cbz	r3, 800a36e <_read_r+0x1e>
 800a36c:	6023      	str	r3, [r4, #0]
 800a36e:	bd38      	pop	{r3, r4, r5, pc}
 800a370:	20004340 	.word	0x20004340

0800a374 <__assert_func>:
 800a374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a376:	4614      	mov	r4, r2
 800a378:	461a      	mov	r2, r3
 800a37a:	4b09      	ldr	r3, [pc, #36]	; (800a3a0 <__assert_func+0x2c>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4605      	mov	r5, r0
 800a380:	68d8      	ldr	r0, [r3, #12]
 800a382:	b14c      	cbz	r4, 800a398 <__assert_func+0x24>
 800a384:	4b07      	ldr	r3, [pc, #28]	; (800a3a4 <__assert_func+0x30>)
 800a386:	9100      	str	r1, [sp, #0]
 800a388:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a38c:	4906      	ldr	r1, [pc, #24]	; (800a3a8 <__assert_func+0x34>)
 800a38e:	462b      	mov	r3, r5
 800a390:	f000 f80e 	bl	800a3b0 <fiprintf>
 800a394:	f000 faa0 	bl	800a8d8 <abort>
 800a398:	4b04      	ldr	r3, [pc, #16]	; (800a3ac <__assert_func+0x38>)
 800a39a:	461c      	mov	r4, r3
 800a39c:	e7f3      	b.n	800a386 <__assert_func+0x12>
 800a39e:	bf00      	nop
 800a3a0:	20000010 	.word	0x20000010
 800a3a4:	0800afcd 	.word	0x0800afcd
 800a3a8:	0800afda 	.word	0x0800afda
 800a3ac:	0800b008 	.word	0x0800b008

0800a3b0 <fiprintf>:
 800a3b0:	b40e      	push	{r1, r2, r3}
 800a3b2:	b503      	push	{r0, r1, lr}
 800a3b4:	4601      	mov	r1, r0
 800a3b6:	ab03      	add	r3, sp, #12
 800a3b8:	4805      	ldr	r0, [pc, #20]	; (800a3d0 <fiprintf+0x20>)
 800a3ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3be:	6800      	ldr	r0, [r0, #0]
 800a3c0:	9301      	str	r3, [sp, #4]
 800a3c2:	f000 f88b 	bl	800a4dc <_vfiprintf_r>
 800a3c6:	b002      	add	sp, #8
 800a3c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3cc:	b003      	add	sp, #12
 800a3ce:	4770      	bx	lr
 800a3d0:	20000010 	.word	0x20000010

0800a3d4 <__ascii_mbtowc>:
 800a3d4:	b082      	sub	sp, #8
 800a3d6:	b901      	cbnz	r1, 800a3da <__ascii_mbtowc+0x6>
 800a3d8:	a901      	add	r1, sp, #4
 800a3da:	b142      	cbz	r2, 800a3ee <__ascii_mbtowc+0x1a>
 800a3dc:	b14b      	cbz	r3, 800a3f2 <__ascii_mbtowc+0x1e>
 800a3de:	7813      	ldrb	r3, [r2, #0]
 800a3e0:	600b      	str	r3, [r1, #0]
 800a3e2:	7812      	ldrb	r2, [r2, #0]
 800a3e4:	1e10      	subs	r0, r2, #0
 800a3e6:	bf18      	it	ne
 800a3e8:	2001      	movne	r0, #1
 800a3ea:	b002      	add	sp, #8
 800a3ec:	4770      	bx	lr
 800a3ee:	4610      	mov	r0, r2
 800a3f0:	e7fb      	b.n	800a3ea <__ascii_mbtowc+0x16>
 800a3f2:	f06f 0001 	mvn.w	r0, #1
 800a3f6:	e7f8      	b.n	800a3ea <__ascii_mbtowc+0x16>

0800a3f8 <memmove>:
 800a3f8:	4288      	cmp	r0, r1
 800a3fa:	b510      	push	{r4, lr}
 800a3fc:	eb01 0402 	add.w	r4, r1, r2
 800a400:	d902      	bls.n	800a408 <memmove+0x10>
 800a402:	4284      	cmp	r4, r0
 800a404:	4623      	mov	r3, r4
 800a406:	d807      	bhi.n	800a418 <memmove+0x20>
 800a408:	1e43      	subs	r3, r0, #1
 800a40a:	42a1      	cmp	r1, r4
 800a40c:	d008      	beq.n	800a420 <memmove+0x28>
 800a40e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a412:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a416:	e7f8      	b.n	800a40a <memmove+0x12>
 800a418:	4402      	add	r2, r0
 800a41a:	4601      	mov	r1, r0
 800a41c:	428a      	cmp	r2, r1
 800a41e:	d100      	bne.n	800a422 <memmove+0x2a>
 800a420:	bd10      	pop	{r4, pc}
 800a422:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a426:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a42a:	e7f7      	b.n	800a41c <memmove+0x24>

0800a42c <_realloc_r>:
 800a42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a430:	4680      	mov	r8, r0
 800a432:	4614      	mov	r4, r2
 800a434:	460e      	mov	r6, r1
 800a436:	b921      	cbnz	r1, 800a442 <_realloc_r+0x16>
 800a438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a43c:	4611      	mov	r1, r2
 800a43e:	f7fd bcdb 	b.w	8007df8 <_malloc_r>
 800a442:	b92a      	cbnz	r2, 800a450 <_realloc_r+0x24>
 800a444:	f7ff fddc 	bl	800a000 <_free_r>
 800a448:	4625      	mov	r5, r4
 800a44a:	4628      	mov	r0, r5
 800a44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a450:	f000 faae 	bl	800a9b0 <_malloc_usable_size_r>
 800a454:	4284      	cmp	r4, r0
 800a456:	4607      	mov	r7, r0
 800a458:	d802      	bhi.n	800a460 <_realloc_r+0x34>
 800a45a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a45e:	d812      	bhi.n	800a486 <_realloc_r+0x5a>
 800a460:	4621      	mov	r1, r4
 800a462:	4640      	mov	r0, r8
 800a464:	f7fd fcc8 	bl	8007df8 <_malloc_r>
 800a468:	4605      	mov	r5, r0
 800a46a:	2800      	cmp	r0, #0
 800a46c:	d0ed      	beq.n	800a44a <_realloc_r+0x1e>
 800a46e:	42bc      	cmp	r4, r7
 800a470:	4622      	mov	r2, r4
 800a472:	4631      	mov	r1, r6
 800a474:	bf28      	it	cs
 800a476:	463a      	movcs	r2, r7
 800a478:	f7fd fc87 	bl	8007d8a <memcpy>
 800a47c:	4631      	mov	r1, r6
 800a47e:	4640      	mov	r0, r8
 800a480:	f7ff fdbe 	bl	800a000 <_free_r>
 800a484:	e7e1      	b.n	800a44a <_realloc_r+0x1e>
 800a486:	4635      	mov	r5, r6
 800a488:	e7df      	b.n	800a44a <_realloc_r+0x1e>

0800a48a <__sfputc_r>:
 800a48a:	6893      	ldr	r3, [r2, #8]
 800a48c:	3b01      	subs	r3, #1
 800a48e:	2b00      	cmp	r3, #0
 800a490:	b410      	push	{r4}
 800a492:	6093      	str	r3, [r2, #8]
 800a494:	da08      	bge.n	800a4a8 <__sfputc_r+0x1e>
 800a496:	6994      	ldr	r4, [r2, #24]
 800a498:	42a3      	cmp	r3, r4
 800a49a:	db01      	blt.n	800a4a0 <__sfputc_r+0x16>
 800a49c:	290a      	cmp	r1, #10
 800a49e:	d103      	bne.n	800a4a8 <__sfputc_r+0x1e>
 800a4a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4a4:	f000 b94a 	b.w	800a73c <__swbuf_r>
 800a4a8:	6813      	ldr	r3, [r2, #0]
 800a4aa:	1c58      	adds	r0, r3, #1
 800a4ac:	6010      	str	r0, [r2, #0]
 800a4ae:	7019      	strb	r1, [r3, #0]
 800a4b0:	4608      	mov	r0, r1
 800a4b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <__sfputs_r>:
 800a4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ba:	4606      	mov	r6, r0
 800a4bc:	460f      	mov	r7, r1
 800a4be:	4614      	mov	r4, r2
 800a4c0:	18d5      	adds	r5, r2, r3
 800a4c2:	42ac      	cmp	r4, r5
 800a4c4:	d101      	bne.n	800a4ca <__sfputs_r+0x12>
 800a4c6:	2000      	movs	r0, #0
 800a4c8:	e007      	b.n	800a4da <__sfputs_r+0x22>
 800a4ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4ce:	463a      	mov	r2, r7
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	f7ff ffda 	bl	800a48a <__sfputc_r>
 800a4d6:	1c43      	adds	r3, r0, #1
 800a4d8:	d1f3      	bne.n	800a4c2 <__sfputs_r+0xa>
 800a4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a4dc <_vfiprintf_r>:
 800a4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e0:	460d      	mov	r5, r1
 800a4e2:	b09d      	sub	sp, #116	; 0x74
 800a4e4:	4614      	mov	r4, r2
 800a4e6:	4698      	mov	r8, r3
 800a4e8:	4606      	mov	r6, r0
 800a4ea:	b118      	cbz	r0, 800a4f4 <_vfiprintf_r+0x18>
 800a4ec:	6983      	ldr	r3, [r0, #24]
 800a4ee:	b90b      	cbnz	r3, 800a4f4 <_vfiprintf_r+0x18>
 800a4f0:	f7fd fb76 	bl	8007be0 <__sinit>
 800a4f4:	4b89      	ldr	r3, [pc, #548]	; (800a71c <_vfiprintf_r+0x240>)
 800a4f6:	429d      	cmp	r5, r3
 800a4f8:	d11b      	bne.n	800a532 <_vfiprintf_r+0x56>
 800a4fa:	6875      	ldr	r5, [r6, #4]
 800a4fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4fe:	07d9      	lsls	r1, r3, #31
 800a500:	d405      	bmi.n	800a50e <_vfiprintf_r+0x32>
 800a502:	89ab      	ldrh	r3, [r5, #12]
 800a504:	059a      	lsls	r2, r3, #22
 800a506:	d402      	bmi.n	800a50e <_vfiprintf_r+0x32>
 800a508:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a50a:	f7fd fc2c 	bl	8007d66 <__retarget_lock_acquire_recursive>
 800a50e:	89ab      	ldrh	r3, [r5, #12]
 800a510:	071b      	lsls	r3, r3, #28
 800a512:	d501      	bpl.n	800a518 <_vfiprintf_r+0x3c>
 800a514:	692b      	ldr	r3, [r5, #16]
 800a516:	b9eb      	cbnz	r3, 800a554 <_vfiprintf_r+0x78>
 800a518:	4629      	mov	r1, r5
 800a51a:	4630      	mov	r0, r6
 800a51c:	f000 f96e 	bl	800a7fc <__swsetup_r>
 800a520:	b1c0      	cbz	r0, 800a554 <_vfiprintf_r+0x78>
 800a522:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a524:	07dc      	lsls	r4, r3, #31
 800a526:	d50e      	bpl.n	800a546 <_vfiprintf_r+0x6a>
 800a528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a52c:	b01d      	add	sp, #116	; 0x74
 800a52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a532:	4b7b      	ldr	r3, [pc, #492]	; (800a720 <_vfiprintf_r+0x244>)
 800a534:	429d      	cmp	r5, r3
 800a536:	d101      	bne.n	800a53c <_vfiprintf_r+0x60>
 800a538:	68b5      	ldr	r5, [r6, #8]
 800a53a:	e7df      	b.n	800a4fc <_vfiprintf_r+0x20>
 800a53c:	4b79      	ldr	r3, [pc, #484]	; (800a724 <_vfiprintf_r+0x248>)
 800a53e:	429d      	cmp	r5, r3
 800a540:	bf08      	it	eq
 800a542:	68f5      	ldreq	r5, [r6, #12]
 800a544:	e7da      	b.n	800a4fc <_vfiprintf_r+0x20>
 800a546:	89ab      	ldrh	r3, [r5, #12]
 800a548:	0598      	lsls	r0, r3, #22
 800a54a:	d4ed      	bmi.n	800a528 <_vfiprintf_r+0x4c>
 800a54c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a54e:	f7fd fc0b 	bl	8007d68 <__retarget_lock_release_recursive>
 800a552:	e7e9      	b.n	800a528 <_vfiprintf_r+0x4c>
 800a554:	2300      	movs	r3, #0
 800a556:	9309      	str	r3, [sp, #36]	; 0x24
 800a558:	2320      	movs	r3, #32
 800a55a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a55e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a562:	2330      	movs	r3, #48	; 0x30
 800a564:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a728 <_vfiprintf_r+0x24c>
 800a568:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a56c:	f04f 0901 	mov.w	r9, #1
 800a570:	4623      	mov	r3, r4
 800a572:	469a      	mov	sl, r3
 800a574:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a578:	b10a      	cbz	r2, 800a57e <_vfiprintf_r+0xa2>
 800a57a:	2a25      	cmp	r2, #37	; 0x25
 800a57c:	d1f9      	bne.n	800a572 <_vfiprintf_r+0x96>
 800a57e:	ebba 0b04 	subs.w	fp, sl, r4
 800a582:	d00b      	beq.n	800a59c <_vfiprintf_r+0xc0>
 800a584:	465b      	mov	r3, fp
 800a586:	4622      	mov	r2, r4
 800a588:	4629      	mov	r1, r5
 800a58a:	4630      	mov	r0, r6
 800a58c:	f7ff ff94 	bl	800a4b8 <__sfputs_r>
 800a590:	3001      	adds	r0, #1
 800a592:	f000 80aa 	beq.w	800a6ea <_vfiprintf_r+0x20e>
 800a596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a598:	445a      	add	r2, fp
 800a59a:	9209      	str	r2, [sp, #36]	; 0x24
 800a59c:	f89a 3000 	ldrb.w	r3, [sl]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f000 80a2 	beq.w	800a6ea <_vfiprintf_r+0x20e>
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5b0:	f10a 0a01 	add.w	sl, sl, #1
 800a5b4:	9304      	str	r3, [sp, #16]
 800a5b6:	9307      	str	r3, [sp, #28]
 800a5b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5bc:	931a      	str	r3, [sp, #104]	; 0x68
 800a5be:	4654      	mov	r4, sl
 800a5c0:	2205      	movs	r2, #5
 800a5c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5c6:	4858      	ldr	r0, [pc, #352]	; (800a728 <_vfiprintf_r+0x24c>)
 800a5c8:	f7f5 fe2a 	bl	8000220 <memchr>
 800a5cc:	9a04      	ldr	r2, [sp, #16]
 800a5ce:	b9d8      	cbnz	r0, 800a608 <_vfiprintf_r+0x12c>
 800a5d0:	06d1      	lsls	r1, r2, #27
 800a5d2:	bf44      	itt	mi
 800a5d4:	2320      	movmi	r3, #32
 800a5d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5da:	0713      	lsls	r3, r2, #28
 800a5dc:	bf44      	itt	mi
 800a5de:	232b      	movmi	r3, #43	; 0x2b
 800a5e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a5e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a5ea:	d015      	beq.n	800a618 <_vfiprintf_r+0x13c>
 800a5ec:	9a07      	ldr	r2, [sp, #28]
 800a5ee:	4654      	mov	r4, sl
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	f04f 0c0a 	mov.w	ip, #10
 800a5f6:	4621      	mov	r1, r4
 800a5f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5fc:	3b30      	subs	r3, #48	; 0x30
 800a5fe:	2b09      	cmp	r3, #9
 800a600:	d94e      	bls.n	800a6a0 <_vfiprintf_r+0x1c4>
 800a602:	b1b0      	cbz	r0, 800a632 <_vfiprintf_r+0x156>
 800a604:	9207      	str	r2, [sp, #28]
 800a606:	e014      	b.n	800a632 <_vfiprintf_r+0x156>
 800a608:	eba0 0308 	sub.w	r3, r0, r8
 800a60c:	fa09 f303 	lsl.w	r3, r9, r3
 800a610:	4313      	orrs	r3, r2
 800a612:	9304      	str	r3, [sp, #16]
 800a614:	46a2      	mov	sl, r4
 800a616:	e7d2      	b.n	800a5be <_vfiprintf_r+0xe2>
 800a618:	9b03      	ldr	r3, [sp, #12]
 800a61a:	1d19      	adds	r1, r3, #4
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	9103      	str	r1, [sp, #12]
 800a620:	2b00      	cmp	r3, #0
 800a622:	bfbb      	ittet	lt
 800a624:	425b      	neglt	r3, r3
 800a626:	f042 0202 	orrlt.w	r2, r2, #2
 800a62a:	9307      	strge	r3, [sp, #28]
 800a62c:	9307      	strlt	r3, [sp, #28]
 800a62e:	bfb8      	it	lt
 800a630:	9204      	strlt	r2, [sp, #16]
 800a632:	7823      	ldrb	r3, [r4, #0]
 800a634:	2b2e      	cmp	r3, #46	; 0x2e
 800a636:	d10c      	bne.n	800a652 <_vfiprintf_r+0x176>
 800a638:	7863      	ldrb	r3, [r4, #1]
 800a63a:	2b2a      	cmp	r3, #42	; 0x2a
 800a63c:	d135      	bne.n	800a6aa <_vfiprintf_r+0x1ce>
 800a63e:	9b03      	ldr	r3, [sp, #12]
 800a640:	1d1a      	adds	r2, r3, #4
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	9203      	str	r2, [sp, #12]
 800a646:	2b00      	cmp	r3, #0
 800a648:	bfb8      	it	lt
 800a64a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a64e:	3402      	adds	r4, #2
 800a650:	9305      	str	r3, [sp, #20]
 800a652:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a738 <_vfiprintf_r+0x25c>
 800a656:	7821      	ldrb	r1, [r4, #0]
 800a658:	2203      	movs	r2, #3
 800a65a:	4650      	mov	r0, sl
 800a65c:	f7f5 fde0 	bl	8000220 <memchr>
 800a660:	b140      	cbz	r0, 800a674 <_vfiprintf_r+0x198>
 800a662:	2340      	movs	r3, #64	; 0x40
 800a664:	eba0 000a 	sub.w	r0, r0, sl
 800a668:	fa03 f000 	lsl.w	r0, r3, r0
 800a66c:	9b04      	ldr	r3, [sp, #16]
 800a66e:	4303      	orrs	r3, r0
 800a670:	3401      	adds	r4, #1
 800a672:	9304      	str	r3, [sp, #16]
 800a674:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a678:	482c      	ldr	r0, [pc, #176]	; (800a72c <_vfiprintf_r+0x250>)
 800a67a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a67e:	2206      	movs	r2, #6
 800a680:	f7f5 fdce 	bl	8000220 <memchr>
 800a684:	2800      	cmp	r0, #0
 800a686:	d03f      	beq.n	800a708 <_vfiprintf_r+0x22c>
 800a688:	4b29      	ldr	r3, [pc, #164]	; (800a730 <_vfiprintf_r+0x254>)
 800a68a:	bb1b      	cbnz	r3, 800a6d4 <_vfiprintf_r+0x1f8>
 800a68c:	9b03      	ldr	r3, [sp, #12]
 800a68e:	3307      	adds	r3, #7
 800a690:	f023 0307 	bic.w	r3, r3, #7
 800a694:	3308      	adds	r3, #8
 800a696:	9303      	str	r3, [sp, #12]
 800a698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a69a:	443b      	add	r3, r7
 800a69c:	9309      	str	r3, [sp, #36]	; 0x24
 800a69e:	e767      	b.n	800a570 <_vfiprintf_r+0x94>
 800a6a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6a4:	460c      	mov	r4, r1
 800a6a6:	2001      	movs	r0, #1
 800a6a8:	e7a5      	b.n	800a5f6 <_vfiprintf_r+0x11a>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	3401      	adds	r4, #1
 800a6ae:	9305      	str	r3, [sp, #20]
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	f04f 0c0a 	mov.w	ip, #10
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6bc:	3a30      	subs	r2, #48	; 0x30
 800a6be:	2a09      	cmp	r2, #9
 800a6c0:	d903      	bls.n	800a6ca <_vfiprintf_r+0x1ee>
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d0c5      	beq.n	800a652 <_vfiprintf_r+0x176>
 800a6c6:	9105      	str	r1, [sp, #20]
 800a6c8:	e7c3      	b.n	800a652 <_vfiprintf_r+0x176>
 800a6ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e7f0      	b.n	800a6b6 <_vfiprintf_r+0x1da>
 800a6d4:	ab03      	add	r3, sp, #12
 800a6d6:	9300      	str	r3, [sp, #0]
 800a6d8:	462a      	mov	r2, r5
 800a6da:	4b16      	ldr	r3, [pc, #88]	; (800a734 <_vfiprintf_r+0x258>)
 800a6dc:	a904      	add	r1, sp, #16
 800a6de:	4630      	mov	r0, r6
 800a6e0:	f7fd fc9e 	bl	8008020 <_printf_float>
 800a6e4:	4607      	mov	r7, r0
 800a6e6:	1c78      	adds	r0, r7, #1
 800a6e8:	d1d6      	bne.n	800a698 <_vfiprintf_r+0x1bc>
 800a6ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6ec:	07d9      	lsls	r1, r3, #31
 800a6ee:	d405      	bmi.n	800a6fc <_vfiprintf_r+0x220>
 800a6f0:	89ab      	ldrh	r3, [r5, #12]
 800a6f2:	059a      	lsls	r2, r3, #22
 800a6f4:	d402      	bmi.n	800a6fc <_vfiprintf_r+0x220>
 800a6f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6f8:	f7fd fb36 	bl	8007d68 <__retarget_lock_release_recursive>
 800a6fc:	89ab      	ldrh	r3, [r5, #12]
 800a6fe:	065b      	lsls	r3, r3, #25
 800a700:	f53f af12 	bmi.w	800a528 <_vfiprintf_r+0x4c>
 800a704:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a706:	e711      	b.n	800a52c <_vfiprintf_r+0x50>
 800a708:	ab03      	add	r3, sp, #12
 800a70a:	9300      	str	r3, [sp, #0]
 800a70c:	462a      	mov	r2, r5
 800a70e:	4b09      	ldr	r3, [pc, #36]	; (800a734 <_vfiprintf_r+0x258>)
 800a710:	a904      	add	r1, sp, #16
 800a712:	4630      	mov	r0, r6
 800a714:	f7fd ff28 	bl	8008568 <_printf_i>
 800a718:	e7e4      	b.n	800a6e4 <_vfiprintf_r+0x208>
 800a71a:	bf00      	nop
 800a71c:	0800ad5c 	.word	0x0800ad5c
 800a720:	0800ad7c 	.word	0x0800ad7c
 800a724:	0800ad3c 	.word	0x0800ad3c
 800a728:	0800afbc 	.word	0x0800afbc
 800a72c:	0800afc6 	.word	0x0800afc6
 800a730:	08008021 	.word	0x08008021
 800a734:	0800a4b9 	.word	0x0800a4b9
 800a738:	0800afc2 	.word	0x0800afc2

0800a73c <__swbuf_r>:
 800a73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a73e:	460e      	mov	r6, r1
 800a740:	4614      	mov	r4, r2
 800a742:	4605      	mov	r5, r0
 800a744:	b118      	cbz	r0, 800a74e <__swbuf_r+0x12>
 800a746:	6983      	ldr	r3, [r0, #24]
 800a748:	b90b      	cbnz	r3, 800a74e <__swbuf_r+0x12>
 800a74a:	f7fd fa49 	bl	8007be0 <__sinit>
 800a74e:	4b21      	ldr	r3, [pc, #132]	; (800a7d4 <__swbuf_r+0x98>)
 800a750:	429c      	cmp	r4, r3
 800a752:	d12b      	bne.n	800a7ac <__swbuf_r+0x70>
 800a754:	686c      	ldr	r4, [r5, #4]
 800a756:	69a3      	ldr	r3, [r4, #24]
 800a758:	60a3      	str	r3, [r4, #8]
 800a75a:	89a3      	ldrh	r3, [r4, #12]
 800a75c:	071a      	lsls	r2, r3, #28
 800a75e:	d52f      	bpl.n	800a7c0 <__swbuf_r+0x84>
 800a760:	6923      	ldr	r3, [r4, #16]
 800a762:	b36b      	cbz	r3, 800a7c0 <__swbuf_r+0x84>
 800a764:	6923      	ldr	r3, [r4, #16]
 800a766:	6820      	ldr	r0, [r4, #0]
 800a768:	1ac0      	subs	r0, r0, r3
 800a76a:	6963      	ldr	r3, [r4, #20]
 800a76c:	b2f6      	uxtb	r6, r6
 800a76e:	4283      	cmp	r3, r0
 800a770:	4637      	mov	r7, r6
 800a772:	dc04      	bgt.n	800a77e <__swbuf_r+0x42>
 800a774:	4621      	mov	r1, r4
 800a776:	4628      	mov	r0, r5
 800a778:	f7ff f842 	bl	8009800 <_fflush_r>
 800a77c:	bb30      	cbnz	r0, 800a7cc <__swbuf_r+0x90>
 800a77e:	68a3      	ldr	r3, [r4, #8]
 800a780:	3b01      	subs	r3, #1
 800a782:	60a3      	str	r3, [r4, #8]
 800a784:	6823      	ldr	r3, [r4, #0]
 800a786:	1c5a      	adds	r2, r3, #1
 800a788:	6022      	str	r2, [r4, #0]
 800a78a:	701e      	strb	r6, [r3, #0]
 800a78c:	6963      	ldr	r3, [r4, #20]
 800a78e:	3001      	adds	r0, #1
 800a790:	4283      	cmp	r3, r0
 800a792:	d004      	beq.n	800a79e <__swbuf_r+0x62>
 800a794:	89a3      	ldrh	r3, [r4, #12]
 800a796:	07db      	lsls	r3, r3, #31
 800a798:	d506      	bpl.n	800a7a8 <__swbuf_r+0x6c>
 800a79a:	2e0a      	cmp	r6, #10
 800a79c:	d104      	bne.n	800a7a8 <__swbuf_r+0x6c>
 800a79e:	4621      	mov	r1, r4
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	f7ff f82d 	bl	8009800 <_fflush_r>
 800a7a6:	b988      	cbnz	r0, 800a7cc <__swbuf_r+0x90>
 800a7a8:	4638      	mov	r0, r7
 800a7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7ac:	4b0a      	ldr	r3, [pc, #40]	; (800a7d8 <__swbuf_r+0x9c>)
 800a7ae:	429c      	cmp	r4, r3
 800a7b0:	d101      	bne.n	800a7b6 <__swbuf_r+0x7a>
 800a7b2:	68ac      	ldr	r4, [r5, #8]
 800a7b4:	e7cf      	b.n	800a756 <__swbuf_r+0x1a>
 800a7b6:	4b09      	ldr	r3, [pc, #36]	; (800a7dc <__swbuf_r+0xa0>)
 800a7b8:	429c      	cmp	r4, r3
 800a7ba:	bf08      	it	eq
 800a7bc:	68ec      	ldreq	r4, [r5, #12]
 800a7be:	e7ca      	b.n	800a756 <__swbuf_r+0x1a>
 800a7c0:	4621      	mov	r1, r4
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	f000 f81a 	bl	800a7fc <__swsetup_r>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	d0cb      	beq.n	800a764 <__swbuf_r+0x28>
 800a7cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a7d0:	e7ea      	b.n	800a7a8 <__swbuf_r+0x6c>
 800a7d2:	bf00      	nop
 800a7d4:	0800ad5c 	.word	0x0800ad5c
 800a7d8:	0800ad7c 	.word	0x0800ad7c
 800a7dc:	0800ad3c 	.word	0x0800ad3c

0800a7e0 <__ascii_wctomb>:
 800a7e0:	b149      	cbz	r1, 800a7f6 <__ascii_wctomb+0x16>
 800a7e2:	2aff      	cmp	r2, #255	; 0xff
 800a7e4:	bf85      	ittet	hi
 800a7e6:	238a      	movhi	r3, #138	; 0x8a
 800a7e8:	6003      	strhi	r3, [r0, #0]
 800a7ea:	700a      	strbls	r2, [r1, #0]
 800a7ec:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a7f0:	bf98      	it	ls
 800a7f2:	2001      	movls	r0, #1
 800a7f4:	4770      	bx	lr
 800a7f6:	4608      	mov	r0, r1
 800a7f8:	4770      	bx	lr
	...

0800a7fc <__swsetup_r>:
 800a7fc:	4b32      	ldr	r3, [pc, #200]	; (800a8c8 <__swsetup_r+0xcc>)
 800a7fe:	b570      	push	{r4, r5, r6, lr}
 800a800:	681d      	ldr	r5, [r3, #0]
 800a802:	4606      	mov	r6, r0
 800a804:	460c      	mov	r4, r1
 800a806:	b125      	cbz	r5, 800a812 <__swsetup_r+0x16>
 800a808:	69ab      	ldr	r3, [r5, #24]
 800a80a:	b913      	cbnz	r3, 800a812 <__swsetup_r+0x16>
 800a80c:	4628      	mov	r0, r5
 800a80e:	f7fd f9e7 	bl	8007be0 <__sinit>
 800a812:	4b2e      	ldr	r3, [pc, #184]	; (800a8cc <__swsetup_r+0xd0>)
 800a814:	429c      	cmp	r4, r3
 800a816:	d10f      	bne.n	800a838 <__swsetup_r+0x3c>
 800a818:	686c      	ldr	r4, [r5, #4]
 800a81a:	89a3      	ldrh	r3, [r4, #12]
 800a81c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a820:	0719      	lsls	r1, r3, #28
 800a822:	d42c      	bmi.n	800a87e <__swsetup_r+0x82>
 800a824:	06dd      	lsls	r5, r3, #27
 800a826:	d411      	bmi.n	800a84c <__swsetup_r+0x50>
 800a828:	2309      	movs	r3, #9
 800a82a:	6033      	str	r3, [r6, #0]
 800a82c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a830:	81a3      	strh	r3, [r4, #12]
 800a832:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a836:	e03e      	b.n	800a8b6 <__swsetup_r+0xba>
 800a838:	4b25      	ldr	r3, [pc, #148]	; (800a8d0 <__swsetup_r+0xd4>)
 800a83a:	429c      	cmp	r4, r3
 800a83c:	d101      	bne.n	800a842 <__swsetup_r+0x46>
 800a83e:	68ac      	ldr	r4, [r5, #8]
 800a840:	e7eb      	b.n	800a81a <__swsetup_r+0x1e>
 800a842:	4b24      	ldr	r3, [pc, #144]	; (800a8d4 <__swsetup_r+0xd8>)
 800a844:	429c      	cmp	r4, r3
 800a846:	bf08      	it	eq
 800a848:	68ec      	ldreq	r4, [r5, #12]
 800a84a:	e7e6      	b.n	800a81a <__swsetup_r+0x1e>
 800a84c:	0758      	lsls	r0, r3, #29
 800a84e:	d512      	bpl.n	800a876 <__swsetup_r+0x7a>
 800a850:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a852:	b141      	cbz	r1, 800a866 <__swsetup_r+0x6a>
 800a854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a858:	4299      	cmp	r1, r3
 800a85a:	d002      	beq.n	800a862 <__swsetup_r+0x66>
 800a85c:	4630      	mov	r0, r6
 800a85e:	f7ff fbcf 	bl	800a000 <_free_r>
 800a862:	2300      	movs	r3, #0
 800a864:	6363      	str	r3, [r4, #52]	; 0x34
 800a866:	89a3      	ldrh	r3, [r4, #12]
 800a868:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a86c:	81a3      	strh	r3, [r4, #12]
 800a86e:	2300      	movs	r3, #0
 800a870:	6063      	str	r3, [r4, #4]
 800a872:	6923      	ldr	r3, [r4, #16]
 800a874:	6023      	str	r3, [r4, #0]
 800a876:	89a3      	ldrh	r3, [r4, #12]
 800a878:	f043 0308 	orr.w	r3, r3, #8
 800a87c:	81a3      	strh	r3, [r4, #12]
 800a87e:	6923      	ldr	r3, [r4, #16]
 800a880:	b94b      	cbnz	r3, 800a896 <__swsetup_r+0x9a>
 800a882:	89a3      	ldrh	r3, [r4, #12]
 800a884:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a88c:	d003      	beq.n	800a896 <__swsetup_r+0x9a>
 800a88e:	4621      	mov	r1, r4
 800a890:	4630      	mov	r0, r6
 800a892:	f000 f84d 	bl	800a930 <__smakebuf_r>
 800a896:	89a0      	ldrh	r0, [r4, #12]
 800a898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a89c:	f010 0301 	ands.w	r3, r0, #1
 800a8a0:	d00a      	beq.n	800a8b8 <__swsetup_r+0xbc>
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	60a3      	str	r3, [r4, #8]
 800a8a6:	6963      	ldr	r3, [r4, #20]
 800a8a8:	425b      	negs	r3, r3
 800a8aa:	61a3      	str	r3, [r4, #24]
 800a8ac:	6923      	ldr	r3, [r4, #16]
 800a8ae:	b943      	cbnz	r3, 800a8c2 <__swsetup_r+0xc6>
 800a8b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8b4:	d1ba      	bne.n	800a82c <__swsetup_r+0x30>
 800a8b6:	bd70      	pop	{r4, r5, r6, pc}
 800a8b8:	0781      	lsls	r1, r0, #30
 800a8ba:	bf58      	it	pl
 800a8bc:	6963      	ldrpl	r3, [r4, #20]
 800a8be:	60a3      	str	r3, [r4, #8]
 800a8c0:	e7f4      	b.n	800a8ac <__swsetup_r+0xb0>
 800a8c2:	2000      	movs	r0, #0
 800a8c4:	e7f7      	b.n	800a8b6 <__swsetup_r+0xba>
 800a8c6:	bf00      	nop
 800a8c8:	20000010 	.word	0x20000010
 800a8cc:	0800ad5c 	.word	0x0800ad5c
 800a8d0:	0800ad7c 	.word	0x0800ad7c
 800a8d4:	0800ad3c 	.word	0x0800ad3c

0800a8d8 <abort>:
 800a8d8:	b508      	push	{r3, lr}
 800a8da:	2006      	movs	r0, #6
 800a8dc:	f000 f898 	bl	800aa10 <raise>
 800a8e0:	2001      	movs	r0, #1
 800a8e2:	f7f7 f905 	bl	8001af0 <_exit>

0800a8e6 <__swhatbuf_r>:
 800a8e6:	b570      	push	{r4, r5, r6, lr}
 800a8e8:	460e      	mov	r6, r1
 800a8ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ee:	2900      	cmp	r1, #0
 800a8f0:	b096      	sub	sp, #88	; 0x58
 800a8f2:	4614      	mov	r4, r2
 800a8f4:	461d      	mov	r5, r3
 800a8f6:	da08      	bge.n	800a90a <__swhatbuf_r+0x24>
 800a8f8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	602a      	str	r2, [r5, #0]
 800a900:	061a      	lsls	r2, r3, #24
 800a902:	d410      	bmi.n	800a926 <__swhatbuf_r+0x40>
 800a904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a908:	e00e      	b.n	800a928 <__swhatbuf_r+0x42>
 800a90a:	466a      	mov	r2, sp
 800a90c:	f000 f89c 	bl	800aa48 <_fstat_r>
 800a910:	2800      	cmp	r0, #0
 800a912:	dbf1      	blt.n	800a8f8 <__swhatbuf_r+0x12>
 800a914:	9a01      	ldr	r2, [sp, #4]
 800a916:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a91a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a91e:	425a      	negs	r2, r3
 800a920:	415a      	adcs	r2, r3
 800a922:	602a      	str	r2, [r5, #0]
 800a924:	e7ee      	b.n	800a904 <__swhatbuf_r+0x1e>
 800a926:	2340      	movs	r3, #64	; 0x40
 800a928:	2000      	movs	r0, #0
 800a92a:	6023      	str	r3, [r4, #0]
 800a92c:	b016      	add	sp, #88	; 0x58
 800a92e:	bd70      	pop	{r4, r5, r6, pc}

0800a930 <__smakebuf_r>:
 800a930:	898b      	ldrh	r3, [r1, #12]
 800a932:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a934:	079d      	lsls	r5, r3, #30
 800a936:	4606      	mov	r6, r0
 800a938:	460c      	mov	r4, r1
 800a93a:	d507      	bpl.n	800a94c <__smakebuf_r+0x1c>
 800a93c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a940:	6023      	str	r3, [r4, #0]
 800a942:	6123      	str	r3, [r4, #16]
 800a944:	2301      	movs	r3, #1
 800a946:	6163      	str	r3, [r4, #20]
 800a948:	b002      	add	sp, #8
 800a94a:	bd70      	pop	{r4, r5, r6, pc}
 800a94c:	ab01      	add	r3, sp, #4
 800a94e:	466a      	mov	r2, sp
 800a950:	f7ff ffc9 	bl	800a8e6 <__swhatbuf_r>
 800a954:	9900      	ldr	r1, [sp, #0]
 800a956:	4605      	mov	r5, r0
 800a958:	4630      	mov	r0, r6
 800a95a:	f7fd fa4d 	bl	8007df8 <_malloc_r>
 800a95e:	b948      	cbnz	r0, 800a974 <__smakebuf_r+0x44>
 800a960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a964:	059a      	lsls	r2, r3, #22
 800a966:	d4ef      	bmi.n	800a948 <__smakebuf_r+0x18>
 800a968:	f023 0303 	bic.w	r3, r3, #3
 800a96c:	f043 0302 	orr.w	r3, r3, #2
 800a970:	81a3      	strh	r3, [r4, #12]
 800a972:	e7e3      	b.n	800a93c <__smakebuf_r+0xc>
 800a974:	4b0d      	ldr	r3, [pc, #52]	; (800a9ac <__smakebuf_r+0x7c>)
 800a976:	62b3      	str	r3, [r6, #40]	; 0x28
 800a978:	89a3      	ldrh	r3, [r4, #12]
 800a97a:	6020      	str	r0, [r4, #0]
 800a97c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a980:	81a3      	strh	r3, [r4, #12]
 800a982:	9b00      	ldr	r3, [sp, #0]
 800a984:	6163      	str	r3, [r4, #20]
 800a986:	9b01      	ldr	r3, [sp, #4]
 800a988:	6120      	str	r0, [r4, #16]
 800a98a:	b15b      	cbz	r3, 800a9a4 <__smakebuf_r+0x74>
 800a98c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a990:	4630      	mov	r0, r6
 800a992:	f000 f86b 	bl	800aa6c <_isatty_r>
 800a996:	b128      	cbz	r0, 800a9a4 <__smakebuf_r+0x74>
 800a998:	89a3      	ldrh	r3, [r4, #12]
 800a99a:	f023 0303 	bic.w	r3, r3, #3
 800a99e:	f043 0301 	orr.w	r3, r3, #1
 800a9a2:	81a3      	strh	r3, [r4, #12]
 800a9a4:	89a0      	ldrh	r0, [r4, #12]
 800a9a6:	4305      	orrs	r5, r0
 800a9a8:	81a5      	strh	r5, [r4, #12]
 800a9aa:	e7cd      	b.n	800a948 <__smakebuf_r+0x18>
 800a9ac:	08007b79 	.word	0x08007b79

0800a9b0 <_malloc_usable_size_r>:
 800a9b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9b4:	1f18      	subs	r0, r3, #4
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	bfbc      	itt	lt
 800a9ba:	580b      	ldrlt	r3, [r1, r0]
 800a9bc:	18c0      	addlt	r0, r0, r3
 800a9be:	4770      	bx	lr

0800a9c0 <_raise_r>:
 800a9c0:	291f      	cmp	r1, #31
 800a9c2:	b538      	push	{r3, r4, r5, lr}
 800a9c4:	4604      	mov	r4, r0
 800a9c6:	460d      	mov	r5, r1
 800a9c8:	d904      	bls.n	800a9d4 <_raise_r+0x14>
 800a9ca:	2316      	movs	r3, #22
 800a9cc:	6003      	str	r3, [r0, #0]
 800a9ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9d2:	bd38      	pop	{r3, r4, r5, pc}
 800a9d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a9d6:	b112      	cbz	r2, 800a9de <_raise_r+0x1e>
 800a9d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9dc:	b94b      	cbnz	r3, 800a9f2 <_raise_r+0x32>
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f000 f830 	bl	800aa44 <_getpid_r>
 800a9e4:	462a      	mov	r2, r5
 800a9e6:	4601      	mov	r1, r0
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9ee:	f000 b817 	b.w	800aa20 <_kill_r>
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d00a      	beq.n	800aa0c <_raise_r+0x4c>
 800a9f6:	1c59      	adds	r1, r3, #1
 800a9f8:	d103      	bne.n	800aa02 <_raise_r+0x42>
 800a9fa:	2316      	movs	r3, #22
 800a9fc:	6003      	str	r3, [r0, #0]
 800a9fe:	2001      	movs	r0, #1
 800aa00:	e7e7      	b.n	800a9d2 <_raise_r+0x12>
 800aa02:	2400      	movs	r4, #0
 800aa04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa08:	4628      	mov	r0, r5
 800aa0a:	4798      	blx	r3
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	e7e0      	b.n	800a9d2 <_raise_r+0x12>

0800aa10 <raise>:
 800aa10:	4b02      	ldr	r3, [pc, #8]	; (800aa1c <raise+0xc>)
 800aa12:	4601      	mov	r1, r0
 800aa14:	6818      	ldr	r0, [r3, #0]
 800aa16:	f7ff bfd3 	b.w	800a9c0 <_raise_r>
 800aa1a:	bf00      	nop
 800aa1c:	20000010 	.word	0x20000010

0800aa20 <_kill_r>:
 800aa20:	b538      	push	{r3, r4, r5, lr}
 800aa22:	4d07      	ldr	r5, [pc, #28]	; (800aa40 <_kill_r+0x20>)
 800aa24:	2300      	movs	r3, #0
 800aa26:	4604      	mov	r4, r0
 800aa28:	4608      	mov	r0, r1
 800aa2a:	4611      	mov	r1, r2
 800aa2c:	602b      	str	r3, [r5, #0]
 800aa2e:	f7f7 f84f 	bl	8001ad0 <_kill>
 800aa32:	1c43      	adds	r3, r0, #1
 800aa34:	d102      	bne.n	800aa3c <_kill_r+0x1c>
 800aa36:	682b      	ldr	r3, [r5, #0]
 800aa38:	b103      	cbz	r3, 800aa3c <_kill_r+0x1c>
 800aa3a:	6023      	str	r3, [r4, #0]
 800aa3c:	bd38      	pop	{r3, r4, r5, pc}
 800aa3e:	bf00      	nop
 800aa40:	20004340 	.word	0x20004340

0800aa44 <_getpid_r>:
 800aa44:	f7f7 b83c 	b.w	8001ac0 <_getpid>

0800aa48 <_fstat_r>:
 800aa48:	b538      	push	{r3, r4, r5, lr}
 800aa4a:	4d07      	ldr	r5, [pc, #28]	; (800aa68 <_fstat_r+0x20>)
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	4604      	mov	r4, r0
 800aa50:	4608      	mov	r0, r1
 800aa52:	4611      	mov	r1, r2
 800aa54:	602b      	str	r3, [r5, #0]
 800aa56:	f7f7 f89a 	bl	8001b8e <_fstat>
 800aa5a:	1c43      	adds	r3, r0, #1
 800aa5c:	d102      	bne.n	800aa64 <_fstat_r+0x1c>
 800aa5e:	682b      	ldr	r3, [r5, #0]
 800aa60:	b103      	cbz	r3, 800aa64 <_fstat_r+0x1c>
 800aa62:	6023      	str	r3, [r4, #0]
 800aa64:	bd38      	pop	{r3, r4, r5, pc}
 800aa66:	bf00      	nop
 800aa68:	20004340 	.word	0x20004340

0800aa6c <_isatty_r>:
 800aa6c:	b538      	push	{r3, r4, r5, lr}
 800aa6e:	4d06      	ldr	r5, [pc, #24]	; (800aa88 <_isatty_r+0x1c>)
 800aa70:	2300      	movs	r3, #0
 800aa72:	4604      	mov	r4, r0
 800aa74:	4608      	mov	r0, r1
 800aa76:	602b      	str	r3, [r5, #0]
 800aa78:	f7f7 f899 	bl	8001bae <_isatty>
 800aa7c:	1c43      	adds	r3, r0, #1
 800aa7e:	d102      	bne.n	800aa86 <_isatty_r+0x1a>
 800aa80:	682b      	ldr	r3, [r5, #0]
 800aa82:	b103      	cbz	r3, 800aa86 <_isatty_r+0x1a>
 800aa84:	6023      	str	r3, [r4, #0]
 800aa86:	bd38      	pop	{r3, r4, r5, pc}
 800aa88:	20004340 	.word	0x20004340

0800aa8c <_init>:
 800aa8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa8e:	bf00      	nop
 800aa90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa92:	bc08      	pop	{r3}
 800aa94:	469e      	mov	lr, r3
 800aa96:	4770      	bx	lr

0800aa98 <_fini>:
 800aa98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa9a:	bf00      	nop
 800aa9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa9e:	bc08      	pop	{r3}
 800aaa0:	469e      	mov	lr, r3
 800aaa2:	4770      	bx	lr
