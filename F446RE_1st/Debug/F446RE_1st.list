
F446RE_1st.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8b0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800ca80  0800ca80  0001ca80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cefc  0800cefc  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cefc  0800cefc  0001cefc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf04  0800cf04  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf04  0800cf04  0001cf04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf08  0800cf08  0001cf08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800cf0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043e8  2000009c  0800cfa8  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004484  0800cfa8  00024484  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f248  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041e2  00000000  00000000  0003f314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  000434f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001738  00000000  00000000  00044d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000268d6  00000000  00000000  000464c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d23e  00000000  00000000  0006cd96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eedc1  00000000  00000000  00089fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00178d95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b48  00000000  00000000  00178de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ca68 	.word	0x0800ca68

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	0800ca68 	.word	0x0800ca68

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__aeabi_d2uiz>:
 80009ac:	004a      	lsls	r2, r1, #1
 80009ae:	d211      	bcs.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009b4:	d211      	bcs.n	80009da <__aeabi_d2uiz+0x2e>
 80009b6:	d50d      	bpl.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c0:	d40e      	bmi.n	80009e0 <__aeabi_d2uiz+0x34>
 80009c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ce:	fa23 f002 	lsr.w	r0, r3, r2
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d102      	bne.n	80009e6 <__aeabi_d2uiz+0x3a>
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009e4:	4770      	bx	lr
 80009e6:	f04f 0000 	mov.w	r0, #0
 80009ea:	4770      	bx	lr

080009ec <__aeabi_uldivmod>:
 80009ec:	b953      	cbnz	r3, 8000a04 <__aeabi_uldivmod+0x18>
 80009ee:	b94a      	cbnz	r2, 8000a04 <__aeabi_uldivmod+0x18>
 80009f0:	2900      	cmp	r1, #0
 80009f2:	bf08      	it	eq
 80009f4:	2800      	cmpeq	r0, #0
 80009f6:	bf1c      	itt	ne
 80009f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a00:	f000 b974 	b.w	8000cec <__aeabi_idiv0>
 8000a04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a0c:	f000 f806 	bl	8000a1c <__udivmoddi4>
 8000a10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a18:	b004      	add	sp, #16
 8000a1a:	4770      	bx	lr

08000a1c <__udivmoddi4>:
 8000a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a20:	9d08      	ldr	r5, [sp, #32]
 8000a22:	4604      	mov	r4, r0
 8000a24:	468e      	mov	lr, r1
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d14d      	bne.n	8000ac6 <__udivmoddi4+0xaa>
 8000a2a:	428a      	cmp	r2, r1
 8000a2c:	4694      	mov	ip, r2
 8000a2e:	d969      	bls.n	8000b04 <__udivmoddi4+0xe8>
 8000a30:	fab2 f282 	clz	r2, r2
 8000a34:	b152      	cbz	r2, 8000a4c <__udivmoddi4+0x30>
 8000a36:	fa01 f302 	lsl.w	r3, r1, r2
 8000a3a:	f1c2 0120 	rsb	r1, r2, #32
 8000a3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a46:	ea41 0e03 	orr.w	lr, r1, r3
 8000a4a:	4094      	lsls	r4, r2
 8000a4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a50:	0c21      	lsrs	r1, r4, #16
 8000a52:	fbbe f6f8 	udiv	r6, lr, r8
 8000a56:	fa1f f78c 	uxth.w	r7, ip
 8000a5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a62:	fb06 f107 	mul.w	r1, r6, r7
 8000a66:	4299      	cmp	r1, r3
 8000a68:	d90a      	bls.n	8000a80 <__udivmoddi4+0x64>
 8000a6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a72:	f080 811f 	bcs.w	8000cb4 <__udivmoddi4+0x298>
 8000a76:	4299      	cmp	r1, r3
 8000a78:	f240 811c 	bls.w	8000cb4 <__udivmoddi4+0x298>
 8000a7c:	3e02      	subs	r6, #2
 8000a7e:	4463      	add	r3, ip
 8000a80:	1a5b      	subs	r3, r3, r1
 8000a82:	b2a4      	uxth	r4, r4
 8000a84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a88:	fb08 3310 	mls	r3, r8, r0, r3
 8000a8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a90:	fb00 f707 	mul.w	r7, r0, r7
 8000a94:	42a7      	cmp	r7, r4
 8000a96:	d90a      	bls.n	8000aae <__udivmoddi4+0x92>
 8000a98:	eb1c 0404 	adds.w	r4, ip, r4
 8000a9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000aa0:	f080 810a 	bcs.w	8000cb8 <__udivmoddi4+0x29c>
 8000aa4:	42a7      	cmp	r7, r4
 8000aa6:	f240 8107 	bls.w	8000cb8 <__udivmoddi4+0x29c>
 8000aaa:	4464      	add	r4, ip
 8000aac:	3802      	subs	r0, #2
 8000aae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ab2:	1be4      	subs	r4, r4, r7
 8000ab4:	2600      	movs	r6, #0
 8000ab6:	b11d      	cbz	r5, 8000ac0 <__udivmoddi4+0xa4>
 8000ab8:	40d4      	lsrs	r4, r2
 8000aba:	2300      	movs	r3, #0
 8000abc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ac0:	4631      	mov	r1, r6
 8000ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d909      	bls.n	8000ade <__udivmoddi4+0xc2>
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	f000 80ef 	beq.w	8000cae <__udivmoddi4+0x292>
 8000ad0:	2600      	movs	r6, #0
 8000ad2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ad6:	4630      	mov	r0, r6
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	fab3 f683 	clz	r6, r3
 8000ae2:	2e00      	cmp	r6, #0
 8000ae4:	d14a      	bne.n	8000b7c <__udivmoddi4+0x160>
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d302      	bcc.n	8000af0 <__udivmoddi4+0xd4>
 8000aea:	4282      	cmp	r2, r0
 8000aec:	f200 80f9 	bhi.w	8000ce2 <__udivmoddi4+0x2c6>
 8000af0:	1a84      	subs	r4, r0, r2
 8000af2:	eb61 0303 	sbc.w	r3, r1, r3
 8000af6:	2001      	movs	r0, #1
 8000af8:	469e      	mov	lr, r3
 8000afa:	2d00      	cmp	r5, #0
 8000afc:	d0e0      	beq.n	8000ac0 <__udivmoddi4+0xa4>
 8000afe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b02:	e7dd      	b.n	8000ac0 <__udivmoddi4+0xa4>
 8000b04:	b902      	cbnz	r2, 8000b08 <__udivmoddi4+0xec>
 8000b06:	deff      	udf	#255	; 0xff
 8000b08:	fab2 f282 	clz	r2, r2
 8000b0c:	2a00      	cmp	r2, #0
 8000b0e:	f040 8092 	bne.w	8000c36 <__udivmoddi4+0x21a>
 8000b12:	eba1 010c 	sub.w	r1, r1, ip
 8000b16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1a:	fa1f fe8c 	uxth.w	lr, ip
 8000b1e:	2601      	movs	r6, #1
 8000b20:	0c20      	lsrs	r0, r4, #16
 8000b22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b26:	fb07 1113 	mls	r1, r7, r3, r1
 8000b2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b2e:	fb0e f003 	mul.w	r0, lr, r3
 8000b32:	4288      	cmp	r0, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x12c>
 8000b36:	eb1c 0101 	adds.w	r1, ip, r1
 8000b3a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x12a>
 8000b40:	4288      	cmp	r0, r1
 8000b42:	f200 80cb 	bhi.w	8000cdc <__udivmoddi4+0x2c0>
 8000b46:	4643      	mov	r3, r8
 8000b48:	1a09      	subs	r1, r1, r0
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b50:	fb07 1110 	mls	r1, r7, r0, r1
 8000b54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b58:	fb0e fe00 	mul.w	lr, lr, r0
 8000b5c:	45a6      	cmp	lr, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x156>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b68:	d202      	bcs.n	8000b70 <__udivmoddi4+0x154>
 8000b6a:	45a6      	cmp	lr, r4
 8000b6c:	f200 80bb 	bhi.w	8000ce6 <__udivmoddi4+0x2ca>
 8000b70:	4608      	mov	r0, r1
 8000b72:	eba4 040e 	sub.w	r4, r4, lr
 8000b76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b7a:	e79c      	b.n	8000ab6 <__udivmoddi4+0x9a>
 8000b7c:	f1c6 0720 	rsb	r7, r6, #32
 8000b80:	40b3      	lsls	r3, r6
 8000b82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b92:	431c      	orrs	r4, r3
 8000b94:	40f9      	lsrs	r1, r7
 8000b96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ba2:	0c20      	lsrs	r0, r4, #16
 8000ba4:	fa1f fe8c 	uxth.w	lr, ip
 8000ba8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000bb4:	4288      	cmp	r0, r1
 8000bb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bba:	d90b      	bls.n	8000bd4 <__udivmoddi4+0x1b8>
 8000bbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000bc4:	f080 8088 	bcs.w	8000cd8 <__udivmoddi4+0x2bc>
 8000bc8:	4288      	cmp	r0, r1
 8000bca:	f240 8085 	bls.w	8000cd8 <__udivmoddi4+0x2bc>
 8000bce:	f1a8 0802 	sub.w	r8, r8, #2
 8000bd2:	4461      	add	r1, ip
 8000bd4:	1a09      	subs	r1, r1, r0
 8000bd6:	b2a4      	uxth	r4, r4
 8000bd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bdc:	fb09 1110 	mls	r1, r9, r0, r1
 8000be0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000be4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be8:	458e      	cmp	lr, r1
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1e2>
 8000bec:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000bf4:	d26c      	bcs.n	8000cd0 <__udivmoddi4+0x2b4>
 8000bf6:	458e      	cmp	lr, r1
 8000bf8:	d96a      	bls.n	8000cd0 <__udivmoddi4+0x2b4>
 8000bfa:	3802      	subs	r0, #2
 8000bfc:	4461      	add	r1, ip
 8000bfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c02:	fba0 9402 	umull	r9, r4, r0, r2
 8000c06:	eba1 010e 	sub.w	r1, r1, lr
 8000c0a:	42a1      	cmp	r1, r4
 8000c0c:	46c8      	mov	r8, r9
 8000c0e:	46a6      	mov	lr, r4
 8000c10:	d356      	bcc.n	8000cc0 <__udivmoddi4+0x2a4>
 8000c12:	d053      	beq.n	8000cbc <__udivmoddi4+0x2a0>
 8000c14:	b15d      	cbz	r5, 8000c2e <__udivmoddi4+0x212>
 8000c16:	ebb3 0208 	subs.w	r2, r3, r8
 8000c1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c22:	fa22 f306 	lsr.w	r3, r2, r6
 8000c26:	40f1      	lsrs	r1, r6
 8000c28:	431f      	orrs	r7, r3
 8000c2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c2e:	2600      	movs	r6, #0
 8000c30:	4631      	mov	r1, r6
 8000c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c36:	f1c2 0320 	rsb	r3, r2, #32
 8000c3a:	40d8      	lsrs	r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	fa21 f303 	lsr.w	r3, r1, r3
 8000c44:	4091      	lsls	r1, r2
 8000c46:	4301      	orrs	r1, r0
 8000c48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4c:	fa1f fe8c 	uxth.w	lr, ip
 8000c50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c54:	fb07 3610 	mls	r6, r7, r0, r3
 8000c58:	0c0b      	lsrs	r3, r1, #16
 8000c5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c62:	429e      	cmp	r6, r3
 8000c64:	fa04 f402 	lsl.w	r4, r4, r2
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x260>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c72:	d22f      	bcs.n	8000cd4 <__udivmoddi4+0x2b8>
 8000c74:	429e      	cmp	r6, r3
 8000c76:	d92d      	bls.n	8000cd4 <__udivmoddi4+0x2b8>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	b289      	uxth	r1, r1
 8000c80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c84:	fb07 3316 	mls	r3, r7, r6, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x28a>
 8000c94:	eb1c 0101 	adds.w	r1, ip, r1
 8000c98:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000c9c:	d216      	bcs.n	8000ccc <__udivmoddi4+0x2b0>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d914      	bls.n	8000ccc <__udivmoddi4+0x2b0>
 8000ca2:	3e02      	subs	r6, #2
 8000ca4:	4461      	add	r1, ip
 8000ca6:	1ac9      	subs	r1, r1, r3
 8000ca8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cac:	e738      	b.n	8000b20 <__udivmoddi4+0x104>
 8000cae:	462e      	mov	r6, r5
 8000cb0:	4628      	mov	r0, r5
 8000cb2:	e705      	b.n	8000ac0 <__udivmoddi4+0xa4>
 8000cb4:	4606      	mov	r6, r0
 8000cb6:	e6e3      	b.n	8000a80 <__udivmoddi4+0x64>
 8000cb8:	4618      	mov	r0, r3
 8000cba:	e6f8      	b.n	8000aae <__udivmoddi4+0x92>
 8000cbc:	454b      	cmp	r3, r9
 8000cbe:	d2a9      	bcs.n	8000c14 <__udivmoddi4+0x1f8>
 8000cc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cc8:	3801      	subs	r0, #1
 8000cca:	e7a3      	b.n	8000c14 <__udivmoddi4+0x1f8>
 8000ccc:	4646      	mov	r6, r8
 8000cce:	e7ea      	b.n	8000ca6 <__udivmoddi4+0x28a>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	e794      	b.n	8000bfe <__udivmoddi4+0x1e2>
 8000cd4:	4640      	mov	r0, r8
 8000cd6:	e7d1      	b.n	8000c7c <__udivmoddi4+0x260>
 8000cd8:	46d0      	mov	r8, sl
 8000cda:	e77b      	b.n	8000bd4 <__udivmoddi4+0x1b8>
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	4461      	add	r1, ip
 8000ce0:	e732      	b.n	8000b48 <__udivmoddi4+0x12c>
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	e709      	b.n	8000afa <__udivmoddi4+0xde>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	e742      	b.n	8000b72 <__udivmoddi4+0x156>

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <vApplicationGetIdleTaskMemory+0x2c>)
 8000d00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <vApplicationGetIdleTaskMemory+0x30>)
 8000d06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2280      	movs	r2, #128	; 0x80
 8000d0c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d0e:	bf00      	nop
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	200000b8 	.word	0x200000b8
 8000d20:	2000016c 	.word	0x2000016c
 8000d24:	00000000 	.word	0x00000000

08000d28 <HAL_TIM_IC_CaptureCallback>:

uint8_t totalBytesReceived = 0;
size_t expectedMessageSize = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	7f1b      	ldrb	r3, [r3, #28]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	f040 8083 	bne.w	8000e40 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000d3a:	4b45      	ldr	r3, [pc, #276]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d11a      	bne.n	8000d78 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000d42:	2100      	movs	r1, #0
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f005 f9d7 	bl	80060f8 <HAL_TIM_ReadCapturedValue>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	4a41      	ldr	r2, [pc, #260]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d4e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000d50:	4b3f      	ldr	r3, [pc, #252]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	6a1a      	ldr	r2, [r3, #32]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f022 020a 	bic.w	r2, r2, #10
 8000d64:	621a      	str	r2, [r3, #32]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	6a1a      	ldr	r2, [r3, #32]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f042 0202 	orr.w	r2, r2, #2
 8000d74:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000d76:	e063      	b.n	8000e40 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000d78:	4b35      	ldr	r3, [pc, #212]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d15f      	bne.n	8000e40 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000d80:	2100      	movs	r1, #0
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f005 f9b8 	bl	80060f8 <HAL_TIM_ReadCapturedValue>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	4a33      	ldr	r2, [pc, #204]	; (8000e58 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d8c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2200      	movs	r2, #0
 8000d94:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000d96:	4b30      	ldr	r3, [pc, #192]	; (8000e58 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	4b2e      	ldr	r3, [pc, #184]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d907      	bls.n	8000db2 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000da2:	4b2d      	ldr	r3, [pc, #180]	; (8000e58 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	4b2b      	ldr	r3, [pc, #172]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	4a2b      	ldr	r2, [pc, #172]	; (8000e5c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	e00f      	b.n	8000dd2 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000db2:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	4b28      	ldr	r3, [pc, #160]	; (8000e58 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d909      	bls.n	8000dd2 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000dbe:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	4b24      	ldr	r3, [pc, #144]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000dcc:	33ff      	adds	r3, #255	; 0xff
 8000dce:	4a23      	ldr	r2, [pc, #140]	; (8000e5c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000dd0:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000dd2:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fb5c 	bl	8000494 <__aeabi_ui2d>
 8000ddc:	a31a      	add	r3, pc, #104	; (adr r3, 8000e48 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de2:	f7ff fbd1 	bl	8000588 <__aeabi_dmul>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	4610      	mov	r0, r2
 8000dec:	4619      	mov	r1, r3
 8000dee:	f04f 0200 	mov.w	r2, #0
 8000df2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df6:	f7ff fcf1 	bl	80007dc <__aeabi_ddiv>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	4610      	mov	r0, r2
 8000e00:	4619      	mov	r1, r3
 8000e02:	f7ff fdd3 	bl	80009ac <__aeabi_d2uiz>
 8000e06:	4603      	mov	r3, r0
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000e0c:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	6a1a      	ldr	r2, [r3, #32]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f022 020a 	bic.w	r2, r2, #10
 8000e22:	621a      	str	r2, [r3, #32]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6a12      	ldr	r2, [r2, #32]
 8000e2e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	68da      	ldr	r2, [r3, #12]
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f022 0202 	bic.w	r2, r2, #2
 8000e3e:	60da      	str	r2, [r3, #12]
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	b020c49c 	.word	0xb020c49c
 8000e4c:	3fa16872 	.word	0x3fa16872
 8000e50:	2000069c 	.word	0x2000069c
 8000e54:	20000690 	.word	0x20000690
 8000e58:	20000694 	.word	0x20000694
 8000e5c:	20000698 	.word	0x20000698
 8000e60:	20000024 	.word	0x20000024
 8000e64:	200004e4 	.word	0x200004e4

08000e68 <HAL_CAN_RxFifo0MsgPendingCallback>:

// Callback for CAN receive
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
    // Get the received message
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000e70:	4b2e      	ldr	r3, [pc, #184]	; (8000f2c <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000e72:	4a2f      	ldr	r2, [pc, #188]	; (8000f30 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000e74:	2100      	movs	r1, #0
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f002 fbd9 	bl	800362e <HAL_CAN_GetRxMessage>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
        Error_Handler();  // Handle reception error
 8000e82:	f001 f8d8 	bl	8002036 <Error_Handler>
    }

    if (totalBytesReceived == 0) {
 8000e86:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d115      	bne.n	8000eba <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
        // The first byte of the first frame tells us the total message length
        expectedMessageSize = RxData[0];
 8000e8e:	4b27      	ldr	r3, [pc, #156]	; (8000f2c <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000e96:	601a      	str	r2, [r3, #0]
        // Copy the remaining 7 bytes to the buffer
        memcpy(&fullRxBuffer[totalBytesReceived], &RxData[1], CAN_FIRST_FRAME_SIZE);
 8000e98:	4b26      	ldr	r3, [pc, #152]	; (8000f34 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000ea0:	4413      	add	r3, r2
 8000ea2:	2207      	movs	r2, #7
 8000ea4:	4926      	ldr	r1, [pc, #152]	; (8000f40 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f00b fd06 	bl	800c8b8 <memcpy>
        totalBytesReceived += CAN_FIRST_FRAME_SIZE;
 8000eac:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	3307      	adds	r3, #7
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000eb6:	701a      	strb	r2, [r3, #0]
 8000eb8:	e014      	b.n	8000ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
    } else {
        // Copy the full data as usual
        size_t datalength = RxHeader.DLC;
 8000eba:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	61fb      	str	r3, [r7, #28]
        memcpy(&fullRxBuffer[totalBytesReceived], RxData, datalength);
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000ec8:	4413      	add	r3, r2
 8000eca:	69fa      	ldr	r2, [r7, #28]
 8000ecc:	4917      	ldr	r1, [pc, #92]	; (8000f2c <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f00b fcf2 	bl	800c8b8 <memcpy>
        totalBytesReceived += datalength;
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4413      	add	r3, r2
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000ee2:	701a      	strb	r2, [r3, #0]
    }

    // Check if the full message has been received
    if (totalBytesReceived >= expectedMessageSize) {
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d317      	bcc.n	8000f22 <HAL_CAN_RxFifo0MsgPendingCallback+0xba>
        // Decode the received message from the complete buffer
        pb_istream_t stream = pb_istream_from_buffer(fullRxBuffer, totalBytesReceived);
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	490f      	ldr	r1, [pc, #60]	; (8000f3c <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000efe:	4618      	mov	r0, r3
 8000f00:	f008 fee4 	bl	8009ccc <pb_istream_from_buffer>
        bool status = pb_decode(&stream, CombinedData_fields, &received_combined);
 8000f04:	f107 0308 	add.w	r3, r7, #8
 8000f08:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000f0a:	490f      	ldr	r1, [pc, #60]	; (8000f48 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f00a f817 	bl	800af40 <pb_decode>
 8000f12:	4603      	mov	r3, r0
 8000f14:	76fb      	strb	r3, [r7, #27]
        if (!status) {
//            Error_Handler();  // Handle decoding error
        }

        // Reset for the next message
        totalBytesReceived = 0;
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
        expectedMessageSize = 0;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
    }
}
 8000f22:	bf00      	nop
 8000f24:	3720      	adds	r7, #32
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000678 	.word	0x20000678
 8000f30:	2000065c 	.word	0x2000065c
 8000f34:	200006d4 	.word	0x200006d4
 8000f38:	200006d8 	.word	0x200006d8
 8000f3c:	20000004 	.word	0x20000004
 8000f40:	20000679 	.word	0x20000679
 8000f44:	200006a0 	.word	0x200006a0
 8000f48:	0800ce64 	.word	0x0800ce64

08000f4c <SendCANMessage>:

void SendCANMessage(uint8_t* buffer, size_t message_length, uint32_t ide) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08c      	sub	sp, #48	; 0x30
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
    size_t bytesSent = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t frameIndex = 0; // To keep track of the frames
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    while (bytesSent < message_length) {
 8000f62:	e054      	b.n	800100e <SendCANMessage+0xc2>
        uint8_t TxData[8] = {0}; // Initialize with zeros
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]

        if (frameIndex == 0) {
 8000f6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d11a      	bne.n	8000faa <SendCANMessage+0x5e>
            // First frame: include the message length in the first byte
            TxData[0] = (uint8_t)message_length; // Store the total message length in the first byte
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	753b      	strb	r3, [r7, #20]
            size_t bytesToSend = (message_length < CAN_FIRST_FRAME_SIZE) ? message_length : CAN_FIRST_FRAME_SIZE;
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	2b07      	cmp	r3, #7
 8000f7e:	bf28      	it	cs
 8000f80:	2307      	movcs	r3, #7
 8000f82:	623b      	str	r3, [r7, #32]
            memcpy(&TxData[1], &buffer[bytesSent], bytesToSend);
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f88:	18d1      	adds	r1, r2, r3
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	3301      	adds	r3, #1
 8000f90:	6a3a      	ldr	r2, [r7, #32]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f00b fc90 	bl	800c8b8 <memcpy>
            TxHeader.DLC = bytesToSend + 1; // DLC is the number of bytes in this frame
 8000f98:	6a3b      	ldr	r3, [r7, #32]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	4a20      	ldr	r2, [pc, #128]	; (8001020 <SendCANMessage+0xd4>)
 8000f9e:	6113      	str	r3, [r2, #16]
            bytesSent += bytesToSend;
 8000fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fa2:	6a3b      	ldr	r3, [r7, #32]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fa8:	e016      	b.n	8000fd8 <SendCANMessage+0x8c>
        } else {
            // Subsequent frames
            size_t bytesToSend = (message_length - bytesSent > CAN_MAX_FRAME_SIZE) ? CAN_MAX_FRAME_SIZE : (message_length - bytesSent);
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	2b08      	cmp	r3, #8
 8000fb2:	bf28      	it	cs
 8000fb4:	2308      	movcs	r3, #8
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
            memcpy(TxData, &buffer[bytesSent], bytesToSend);
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fbc:	18d1      	adds	r1, r2, r3
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f00b fc77 	bl	800c8b8 <memcpy>
            TxHeader.DLC = bytesToSend; // DLC is the number of bytes in this frame
 8000fca:	4a15      	ldr	r2, [pc, #84]	; (8001020 <SendCANMessage+0xd4>)
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	6113      	str	r3, [r2, #16]
            bytesSent += bytesToSend;
 8000fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	4413      	add	r3, r2
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        TxHeader.IDE = CAN_ID_STD;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <SendCANMessage+0xd4>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
        TxHeader.RTR = CAN_RTR_DATA;
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <SendCANMessage+0xd4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
        TxHeader.StdId = ide;
 8000fe4:	4a0e      	ldr	r2, [pc, #56]	; (8001020 <SendCANMessage+0xd4>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]

        HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox[frameIndex]);
 8000fea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4a0c      	ldr	r2, [pc, #48]	; (8001024 <SendCANMessage+0xd8>)
 8000ff2:	4413      	add	r3, r2
 8000ff4:	f107 0214 	add.w	r2, r7, #20
 8000ff8:	4909      	ldr	r1, [pc, #36]	; (8001020 <SendCANMessage+0xd4>)
 8000ffa:	480b      	ldr	r0, [pc, #44]	; (8001028 <SendCANMessage+0xdc>)
 8000ffc:	f002 fa3c 	bl	8003478 <HAL_CAN_AddTxMessage>
 8001000:	4603      	mov	r3, r0
 8001002:	77fb      	strb	r3, [r7, #31]
        if (status != HAL_OK) {
//            Error_Handler();  // Handle transmission error
        }

        frameIndex++;
 8001004:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001008:	3301      	adds	r3, #1
 800100a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    while (bytesSent < message_length) {
 800100e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	429a      	cmp	r2, r3
 8001014:	d3a6      	bcc.n	8000f64 <SendCANMessage+0x18>
    }
}
 8001016:	bf00      	nop
 8001018:	bf00      	nop
 800101a:	3730      	adds	r7, #48	; 0x30
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000644 	.word	0x20000644
 8001024:	20000680 	.word	0x20000680
 8001028:	200004bc 	.word	0x200004bc

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b5b0      	push	{r4, r5, r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001032:	f001 fbaf 	bl	8002794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001036:	f000 f8ef 	bl	8001218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103a:	f000 fbef 	bl	800181c <MX_GPIO_Init>
  MX_DMA_Init();
 800103e:	f000 fbc5 	bl	80017cc <MX_DMA_Init>
  MX_ADC1_Init();
 8001042:	f000 f95b 	bl	80012fc <MX_ADC1_Init>
  MX_ADC2_Init();
 8001046:	f000 f9ab 	bl	80013a0 <MX_ADC2_Init>
  MX_TIM3_Init();
 800104a:	f000 faa5 	bl	8001598 <MX_TIM3_Init>
  MX_TIM4_Init();
 800104e:	f000 fb1b 	bl	8001688 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001052:	f000 fa4b 	bl	80014ec <MX_TIM1_Init>
  MX_CAN1_Init();
 8001056:	f000 f9f5 	bl	8001444 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 800105a:	f000 fb8d 	bl	8001778 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //start pwm signal motor1
 800105e:	2100      	movs	r1, #0
 8001060:	484b      	ldr	r0, [pc, #300]	; (8001190 <main+0x164>)
 8001062:	f004 fadb 	bl	800561c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //start pwm signal motor1
 8001066:	2104      	movs	r1, #4
 8001068:	484a      	ldr	r0, [pc, #296]	; (8001194 <main+0x168>)
 800106a:	f004 fad7 	bl	800561c <HAL_TIM_PWM_Start>

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800106e:	2100      	movs	r1, #0
 8001070:	4849      	ldr	r0, [pc, #292]	; (8001198 <main+0x16c>)
 8001072:	f004 fbeb 	bl	800584c <HAL_TIM_IC_Start_IT>

  HAL_CAN_Start(&hcan1);
 8001076:	4849      	ldr	r0, [pc, #292]	; (800119c <main+0x170>)
 8001078:	f002 f9ba 	bl	80033f0 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800107c:	2102      	movs	r1, #2
 800107e:	4847      	ldr	r0, [pc, #284]	; (800119c <main+0x170>)
 8001080:	f002 fbe7 	bl	8003852 <HAL_CAN_ActivateNotification>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  xLaserSemaphore = xSemaphoreCreateBinary();
 8001084:	2203      	movs	r2, #3
 8001086:	2100      	movs	r1, #0
 8001088:	2001      	movs	r0, #1
 800108a:	f006 f9ab 	bl	80073e4 <xQueueGenericCreate>
 800108e:	4603      	mov	r3, r0
 8001090:	4a43      	ldr	r2, [pc, #268]	; (80011a0 <main+0x174>)
 8001092:	6013      	str	r3, [r2, #0]
  assert_param(xLaserSemaphore != NULL);

  xManualModeSemaphore = xSemaphoreCreateBinary();
 8001094:	2203      	movs	r2, #3
 8001096:	2100      	movs	r1, #0
 8001098:	2001      	movs	r0, #1
 800109a:	f006 f9a3 	bl	80073e4 <xQueueGenericCreate>
 800109e:	4603      	mov	r3, r0
 80010a0:	4a40      	ldr	r2, [pc, #256]	; (80011a4 <main+0x178>)
 80010a2:	6013      	str	r3, [r2, #0]
  assert_param(xManualModeSemaphore != NULL);

  xScanModeSemaphore = xSemaphoreCreateBinary();
 80010a4:	2203      	movs	r2, #3
 80010a6:	2100      	movs	r1, #0
 80010a8:	2001      	movs	r0, #1
 80010aa:	f006 f99b 	bl	80073e4 <xQueueGenericCreate>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4a3d      	ldr	r2, [pc, #244]	; (80011a8 <main+0x17c>)
 80010b2:	6013      	str	r3, [r2, #0]
  assert_param(xScanModeSemaphore != NULL);

  xCanTransmitSemaphore = xSemaphoreCreateBinary();
 80010b4:	2203      	movs	r2, #3
 80010b6:	2100      	movs	r1, #0
 80010b8:	2001      	movs	r0, #1
 80010ba:	f006 f993 	bl	80073e4 <xQueueGenericCreate>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a3a      	ldr	r2, [pc, #232]	; (80011ac <main+0x180>)
 80010c2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of CommandProcess */
  osThreadDef(CommandProcess, CommandProcessorTask, osPriorityHigh, 0, 128);
 80010c4:	4b3a      	ldr	r3, [pc, #232]	; (80011b0 <main+0x184>)
 80010c6:	1d3c      	adds	r4, r7, #4
 80010c8:	461d      	mov	r5, r3
 80010ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CommandProcessHandle = osThreadCreate(osThread(CommandProcess), NULL);
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f006 f819 	bl	8007112 <osThreadCreate>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4a34      	ldr	r2, [pc, #208]	; (80011b4 <main+0x188>)
 80010e4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  RetValJCT = xTaskCreate(JoystickControlTask, "JoystickControlTask", 128, NULL, PRIORITY_JOYSTICK_CONTROL, &Task2Handle);
 80010e6:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <main+0x18c>)
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	2300      	movs	r3, #0
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2300      	movs	r3, #0
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	4932      	ldr	r1, [pc, #200]	; (80011bc <main+0x190>)
 80010f4:	4832      	ldr	r0, [pc, #200]	; (80011c0 <main+0x194>)
 80010f6:	f006 fd38 	bl	8007b6a <xTaskCreate>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4a31      	ldr	r2, [pc, #196]	; (80011c4 <main+0x198>)
 80010fe:	6013      	str	r3, [r2, #0]
  assert_param(RetValJCT != NULL);

  RetValUST = xTaskCreate(UltrasonicSensorTask, "UltrasonicSensorTask", 128, NULL, PRIORITY_ULTRASONIC_SENSOR, &Task3Handle);
 8001100:	4b31      	ldr	r3, [pc, #196]	; (80011c8 <main+0x19c>)
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2300      	movs	r3, #0
 800110c:	2280      	movs	r2, #128	; 0x80
 800110e:	492f      	ldr	r1, [pc, #188]	; (80011cc <main+0x1a0>)
 8001110:	482f      	ldr	r0, [pc, #188]	; (80011d0 <main+0x1a4>)
 8001112:	f006 fd2a 	bl	8007b6a <xTaskCreate>
 8001116:	4603      	mov	r3, r0
 8001118:	4a2e      	ldr	r2, [pc, #184]	; (80011d4 <main+0x1a8>)
 800111a:	6013      	str	r3, [r2, #0]
  assert_param(RetValUST != NULL);

  RetValLCT = xTaskCreate(LaserControlTask, "LaserControlTask", 128, NULL, PRIORITY_LASER_CONTROL, &Task4Handle);
 800111c:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <main+0x1ac>)
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	f06f 0301 	mvn.w	r3, #1
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2300      	movs	r3, #0
 8001128:	2280      	movs	r2, #128	; 0x80
 800112a:	492c      	ldr	r1, [pc, #176]	; (80011dc <main+0x1b0>)
 800112c:	482c      	ldr	r0, [pc, #176]	; (80011e0 <main+0x1b4>)
 800112e:	f006 fd1c 	bl	8007b6a <xTaskCreate>
 8001132:	4603      	mov	r3, r0
 8001134:	4a2b      	ldr	r2, [pc, #172]	; (80011e4 <main+0x1b8>)
 8001136:	6013      	str	r3, [r2, #0]
  assert_param(RetValLCT != NULL);

  RetValSMT = xTaskCreate(ScanningModeTask, "ScanningModeTask", 128, NULL, PRIORITY_SCANNING_MODE, &Task5Handle);
 8001138:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <main+0x1bc>)
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	2300      	movs	r3, #0
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2300      	movs	r3, #0
 8001142:	2280      	movs	r2, #128	; 0x80
 8001144:	4929      	ldr	r1, [pc, #164]	; (80011ec <main+0x1c0>)
 8001146:	482a      	ldr	r0, [pc, #168]	; (80011f0 <main+0x1c4>)
 8001148:	f006 fd0f 	bl	8007b6a <xTaskCreate>
 800114c:	4603      	mov	r3, r0
 800114e:	4a29      	ldr	r2, [pc, #164]	; (80011f4 <main+0x1c8>)
 8001150:	6013      	str	r3, [r2, #0]
  assert_param(RetValSMT != NULL);

  RetValCAN = xTaskCreate(CANCommunicationTask, "CANCommTask", 256, NULL, osPriorityNormal, &TaskCANHandle);
 8001152:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <main+0x1cc>)
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	2300      	movs	r3, #0
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2300      	movs	r3, #0
 800115c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001160:	4926      	ldr	r1, [pc, #152]	; (80011fc <main+0x1d0>)
 8001162:	4827      	ldr	r0, [pc, #156]	; (8001200 <main+0x1d4>)
 8001164:	f006 fd01 	bl	8007b6a <xTaskCreate>
 8001168:	4603      	mov	r3, r0
 800116a:	4a26      	ldr	r2, [pc, #152]	; (8001204 <main+0x1d8>)
 800116c:	6013      	str	r3, [r2, #0]
  assert_param(RetValCAN != NULL);

  RetValCANSTATUS = xTaskCreate(CANStatusCommTask, "CANStatusCommTask", 256, NULL, osPriorityNormal, &TaskCanStatusHandle);
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <main+0x1dc>)
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	2300      	movs	r3, #0
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2300      	movs	r3, #0
 8001178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800117c:	4923      	ldr	r1, [pc, #140]	; (800120c <main+0x1e0>)
 800117e:	4824      	ldr	r0, [pc, #144]	; (8001210 <main+0x1e4>)
 8001180:	f006 fcf3 	bl	8007b6a <xTaskCreate>
 8001184:	4603      	mov	r3, r0
 8001186:	4a23      	ldr	r2, [pc, #140]	; (8001214 <main+0x1e8>)
 8001188:	6013      	str	r3, [r2, #0]
  assert_param(RetValCANSTATUS != NULL);

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800118a:	f005 ffbb 	bl	8007104 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800118e:	e7fe      	b.n	800118e <main+0x162>
 8001190:	2000052c 	.word	0x2000052c
 8001194:	20000574 	.word	0x20000574
 8001198:	200004e4 	.word	0x200004e4
 800119c:	200004bc 	.word	0x200004bc
 80011a0:	20000634 	.word	0x20000634
 80011a4:	20000638 	.word	0x20000638
 80011a8:	2000063c 	.word	0x2000063c
 80011ac:	20000640 	.word	0x20000640
 80011b0:	0800cb04 	.word	0x0800cb04
 80011b4:	20000600 	.word	0x20000600
 80011b8:	20000608 	.word	0x20000608
 80011bc:	0800ca90 	.word	0x0800ca90
 80011c0:	08001981 	.word	0x08001981
 80011c4:	20000604 	.word	0x20000604
 80011c8:	20000610 	.word	0x20000610
 80011cc:	0800caa4 	.word	0x0800caa4
 80011d0:	08001ad1 	.word	0x08001ad1
 80011d4:	2000060c 	.word	0x2000060c
 80011d8:	20000618 	.word	0x20000618
 80011dc:	0800cabc 	.word	0x0800cabc
 80011e0:	08001b4d 	.word	0x08001b4d
 80011e4:	20000614 	.word	0x20000614
 80011e8:	20000620 	.word	0x20000620
 80011ec:	0800cad0 	.word	0x0800cad0
 80011f0:	08001b9d 	.word	0x08001b9d
 80011f4:	2000061c 	.word	0x2000061c
 80011f8:	20000628 	.word	0x20000628
 80011fc:	0800cae4 	.word	0x0800cae4
 8001200:	08001c59 	.word	0x08001c59
 8001204:	20000624 	.word	0x20000624
 8001208:	20000630 	.word	0x20000630
 800120c:	0800caf0 	.word	0x0800caf0
 8001210:	08001d5d 	.word	0x08001d5d
 8001214:	2000062c 	.word	0x2000062c

08001218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b094      	sub	sp, #80	; 0x50
 800121c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	2234      	movs	r2, #52	; 0x34
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f00b fb54 	bl	800c8d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122c:	f107 0308 	add.w	r3, r7, #8
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <SystemClock_Config+0xdc>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	4a2b      	ldr	r2, [pc, #172]	; (80012f4 <SystemClock_Config+0xdc>)
 8001246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124a:	6413      	str	r3, [r2, #64]	; 0x40
 800124c:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <SystemClock_Config+0xdc>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001258:	2300      	movs	r3, #0
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <SystemClock_Config+0xe0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a25      	ldr	r2, [pc, #148]	; (80012f8 <SystemClock_Config+0xe0>)
 8001262:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <SystemClock_Config+0xe0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001274:	2301      	movs	r3, #1
 8001276:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800127c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127e:	2302      	movs	r3, #2
 8001280:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001282:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001286:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001288:	230f      	movs	r3, #15
 800128a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800128c:	23d8      	movs	r3, #216	; 0xd8
 800128e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001290:	2302      	movs	r3, #2
 8001292:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001294:	2302      	movs	r3, #2
 8001296:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001298:	2302      	movs	r3, #2
 800129a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 fe03 	bl	8004eac <HAL_RCC_OscConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012ac:	f000 fec3 	bl	8002036 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012b0:	f003 fab6 	bl	8004820 <HAL_PWREx_EnableOverDrive>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012ba:	f000 febc 	bl	8002036 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012be:	230f      	movs	r3, #15
 80012c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c2:	2302      	movs	r3, #2
 80012c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	2105      	movs	r1, #5
 80012dc:	4618      	mov	r0, r3
 80012de:	f003 faef 	bl	80048c0 <HAL_RCC_ClockConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80012e8:	f000 fea5 	bl	8002036 <Error_Handler>
  }
}
 80012ec:	bf00      	nop
 80012ee:	3750      	adds	r7, #80	; 0x50
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40007000 	.word	0x40007000

080012fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001302:	463b      	mov	r3, r7
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800130e:	4b21      	ldr	r3, [pc, #132]	; (8001394 <MX_ADC1_Init+0x98>)
 8001310:	4a21      	ldr	r2, [pc, #132]	; (8001398 <MX_ADC1_Init+0x9c>)
 8001312:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001314:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <MX_ADC1_Init+0x98>)
 8001316:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800131a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <MX_ADC1_Init+0x98>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001322:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <MX_ADC1_Init+0x98>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001328:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_ADC1_Init+0x98>)
 800132a:	2201      	movs	r2, #1
 800132c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800132e:	4b19      	ldr	r3, [pc, #100]	; (8001394 <MX_ADC1_Init+0x98>)
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <MX_ADC1_Init+0x98>)
 8001338:	2200      	movs	r2, #0
 800133a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_ADC1_Init+0x98>)
 800133e:	4a17      	ldr	r2, [pc, #92]	; (800139c <MX_ADC1_Init+0xa0>)
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_ADC1_Init+0x98>)
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_ADC1_Init+0x98>)
 800134a:	2201      	movs	r2, #1
 800134c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_ADC1_Init+0x98>)
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_ADC1_Init+0x98>)
 8001358:	2201      	movs	r2, #1
 800135a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <MX_ADC1_Init+0x98>)
 800135e:	f001 fa5b 	bl	8002818 <HAL_ADC_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001368:	f000 fe65 	bl	8002036 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800136c:	2300      	movs	r3, #0
 800136e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001370:	2301      	movs	r3, #1
 8001372:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001378:	463b      	mov	r3, r7
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_ADC1_Init+0x98>)
 800137e:	f001 fc2d 	bl	8002bdc <HAL_ADC_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001388:	f000 fe55 	bl	8002036 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	2000036c 	.word	0x2000036c
 8001398:	40012000 	.word	0x40012000
 800139c:	0f000001 	.word	0x0f000001

080013a0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013a6:	463b      	mov	r3, r7
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80013b2:	4b21      	ldr	r3, [pc, #132]	; (8001438 <MX_ADC2_Init+0x98>)
 80013b4:	4a21      	ldr	r2, [pc, #132]	; (800143c <MX_ADC2_Init+0x9c>)
 80013b6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013b8:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <MX_ADC2_Init+0x98>)
 80013ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013be:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013c0:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <MX_ADC2_Init+0x98>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80013c6:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <MX_ADC2_Init+0x98>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80013cc:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <MX_ADC2_Init+0x98>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013d2:	4b19      	ldr	r3, [pc, #100]	; (8001438 <MX_ADC2_Init+0x98>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013da:	4b17      	ldr	r3, [pc, #92]	; (8001438 <MX_ADC2_Init+0x98>)
 80013dc:	2200      	movs	r2, #0
 80013de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <MX_ADC2_Init+0x98>)
 80013e2:	4a17      	ldr	r2, [pc, #92]	; (8001440 <MX_ADC2_Init+0xa0>)
 80013e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <MX_ADC2_Init+0x98>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <MX_ADC2_Init+0x98>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_ADC2_Init+0x98>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <MX_ADC2_Init+0x98>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001400:	480d      	ldr	r0, [pc, #52]	; (8001438 <MX_ADC2_Init+0x98>)
 8001402:	f001 fa09 	bl	8002818 <HAL_ADC_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800140c:	f000 fe13 	bl	8002036 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001410:	2301      	movs	r3, #1
 8001412:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001414:	2301      	movs	r3, #1
 8001416:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800141c:	463b      	mov	r3, r7
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_ADC2_Init+0x98>)
 8001422:	f001 fbdb 	bl	8002bdc <HAL_ADC_ConfigChannel>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800142c:	f000 fe03 	bl	8002036 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200003b4 	.word	0x200003b4
 800143c:	40012100 	.word	0x40012100
 8001440:	0f000001 	.word	0x0f000001

08001444 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800144a:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <MX_CAN1_Init+0xa0>)
 800144c:	4a26      	ldr	r2, [pc, #152]	; (80014e8 <MX_CAN1_Init+0xa4>)
 800144e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8001450:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <MX_CAN1_Init+0xa0>)
 8001452:	2212      	movs	r2, #18
 8001454:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001456:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <MX_CAN1_Init+0xa0>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800145c:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <MX_CAN1_Init+0xa0>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001462:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <MX_CAN1_Init+0xa0>)
 8001464:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001468:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800146a:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <MX_CAN1_Init+0xa0>)
 800146c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001470:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001472:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <MX_CAN1_Init+0xa0>)
 8001474:	2200      	movs	r2, #0
 8001476:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <MX_CAN1_Init+0xa0>)
 800147a:	2200      	movs	r2, #0
 800147c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <MX_CAN1_Init+0xa0>)
 8001480:	2200      	movs	r2, #0
 8001482:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <MX_CAN1_Init+0xa0>)
 8001486:	2200      	movs	r2, #0
 8001488:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <MX_CAN1_Init+0xa0>)
 800148c:	2200      	movs	r2, #0
 800148e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_CAN1_Init+0xa0>)
 8001492:	2200      	movs	r2, #0
 8001494:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001496:	4813      	ldr	r0, [pc, #76]	; (80014e4 <MX_CAN1_Init+0xa0>)
 8001498:	f001 fdce 	bl	8003038 <HAL_CAN_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80014a2:	f000 fdc8 	bl	8002036 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80014a6:	2301      	movs	r3, #1
 80014a8:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // Choose a filter bank
 80014aa:	2312      	movs	r3, #18
 80014ac:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x441 << 5; // Example ID, adjust as needed
 80014b2:	f648 0320 	movw	r3, #34848	; 0x8820
 80014b6:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x441 << 5;
 80014bc:	f648 0320 	movw	r3, #34848	; 0x8820
 80014c0:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80014ca:	2301      	movs	r3, #1
 80014cc:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;
 80014ce:	2314      	movs	r3, #20
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80014d2:	463b      	mov	r3, r7
 80014d4:	4619      	mov	r1, r3
 80014d6:	4803      	ldr	r0, [pc, #12]	; (80014e4 <MX_CAN1_Init+0xa0>)
 80014d8:	f001 feaa 	bl	8003230 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	3728      	adds	r7, #40	; 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200004bc 	.word	0x200004bc
 80014e8:	40006400 	.word	0x40006400

080014ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f2:	f107 0310 	add.w	r3, r7, #16
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014fc:	463b      	mov	r3, r7
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001508:	4b21      	ldr	r3, [pc, #132]	; (8001590 <MX_TIM1_Init+0xa4>)
 800150a:	4a22      	ldr	r2, [pc, #136]	; (8001594 <MX_TIM1_Init+0xa8>)
 800150c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 800150e:	4b20      	ldr	r3, [pc, #128]	; (8001590 <MX_TIM1_Init+0xa4>)
 8001510:	22b3      	movs	r2, #179	; 0xb3
 8001512:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001514:	4b1e      	ldr	r3, [pc, #120]	; (8001590 <MX_TIM1_Init+0xa4>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800151a:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <MX_TIM1_Init+0xa4>)
 800151c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001520:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001522:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <MX_TIM1_Init+0xa4>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <MX_TIM1_Init+0xa4>)
 800152a:	2200      	movs	r2, #0
 800152c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <MX_TIM1_Init+0xa4>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001534:	4816      	ldr	r0, [pc, #88]	; (8001590 <MX_TIM1_Init+0xa4>)
 8001536:	f004 f939 	bl	80057ac <HAL_TIM_IC_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001540:	f000 fd79 	bl	8002036 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	4619      	mov	r1, r3
 8001552:	480f      	ldr	r0, [pc, #60]	; (8001590 <MX_TIM1_Init+0xa4>)
 8001554:	f005 fa6c 	bl	8006a30 <HAL_TIMEx_MasterConfigSynchronization>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800155e:	f000 fd6a 	bl	8002036 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001562:	2300      	movs	r3, #0
 8001564:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001566:	2301      	movs	r3, #1
 8001568:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001572:	463b      	mov	r3, r7
 8001574:	2200      	movs	r2, #0
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_TIM1_Init+0xa4>)
 800157a:	f004 fb97 	bl	8005cac <HAL_TIM_IC_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001584:	f000 fd57 	bl	8002036 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200004e4 	.word	0x200004e4
 8001594:	40010000 	.word	0x40010000

08001598 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08e      	sub	sp, #56	; 0x38
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ac:	f107 0320 	add.w	r3, r7, #32
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
 80015c4:	615a      	str	r2, [r3, #20]
 80015c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015c8:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <MX_TIM3_Init+0xe8>)
 80015ca:	4a2e      	ldr	r2, [pc, #184]	; (8001684 <MX_TIM3_Init+0xec>)
 80015cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 900-1;
 80015ce:	4b2c      	ldr	r3, [pc, #176]	; (8001680 <MX_TIM3_Init+0xe8>)
 80015d0:	f240 3283 	movw	r2, #899	; 0x383
 80015d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d6:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <MX_TIM3_Init+0xe8>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80015dc:	4b28      	ldr	r3, [pc, #160]	; (8001680 <MX_TIM3_Init+0xe8>)
 80015de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e4:	4b26      	ldr	r3, [pc, #152]	; (8001680 <MX_TIM3_Init+0xe8>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ea:	4b25      	ldr	r3, [pc, #148]	; (8001680 <MX_TIM3_Init+0xe8>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015f0:	4823      	ldr	r0, [pc, #140]	; (8001680 <MX_TIM3_Init+0xe8>)
 80015f2:	f003 fef9 	bl	80053e8 <HAL_TIM_Base_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80015fc:	f000 fd1b 	bl	8002036 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001606:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800160a:	4619      	mov	r1, r3
 800160c:	481c      	ldr	r0, [pc, #112]	; (8001680 <MX_TIM3_Init+0xe8>)
 800160e:	f004 fcab 	bl	8005f68 <HAL_TIM_ConfigClockSource>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001618:	f000 fd0d 	bl	8002036 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800161c:	4818      	ldr	r0, [pc, #96]	; (8001680 <MX_TIM3_Init+0xe8>)
 800161e:	f003 ffa3 	bl	8005568 <HAL_TIM_PWM_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001628:	f000 fd05 	bl	8002036 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001634:	f107 0320 	add.w	r3, r7, #32
 8001638:	4619      	mov	r1, r3
 800163a:	4811      	ldr	r0, [pc, #68]	; (8001680 <MX_TIM3_Init+0xe8>)
 800163c:	f005 f9f8 	bl	8006a30 <HAL_TIMEx_MasterConfigSynchronization>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001646:	f000 fcf6 	bl	8002036 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800164a:	2360      	movs	r3, #96	; 0x60
 800164c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2200      	movs	r2, #0
 800165e:	4619      	mov	r1, r3
 8001660:	4807      	ldr	r0, [pc, #28]	; (8001680 <MX_TIM3_Init+0xe8>)
 8001662:	f004 fbbf 	bl	8005de4 <HAL_TIM_PWM_ConfigChannel>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800166c:	f000 fce3 	bl	8002036 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001670:	4803      	ldr	r0, [pc, #12]	; (8001680 <MX_TIM3_Init+0xe8>)
 8001672:	f000 fed1 	bl	8002418 <HAL_TIM_MspPostInit>

}
 8001676:	bf00      	nop
 8001678:	3738      	adds	r7, #56	; 0x38
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	2000052c 	.word	0x2000052c
 8001684:	40000400 	.word	0x40000400

08001688 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08e      	sub	sp, #56	; 0x38
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169c:	f107 0320 	add.w	r3, r7, #32
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
 80016b4:	615a      	str	r2, [r3, #20]
 80016b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016b8:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <MX_TIM4_Init+0xe8>)
 80016ba:	4a2e      	ldr	r2, [pc, #184]	; (8001774 <MX_TIM4_Init+0xec>)
 80016bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1800-1;
 80016be:	4b2c      	ldr	r3, [pc, #176]	; (8001770 <MX_TIM4_Init+0xe8>)
 80016c0:	f240 7207 	movw	r2, #1799	; 0x707
 80016c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c6:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <MX_TIM4_Init+0xe8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80016cc:	4b28      	ldr	r3, [pc, #160]	; (8001770 <MX_TIM4_Init+0xe8>)
 80016ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d4:	4b26      	ldr	r3, [pc, #152]	; (8001770 <MX_TIM4_Init+0xe8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016da:	4b25      	ldr	r3, [pc, #148]	; (8001770 <MX_TIM4_Init+0xe8>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016e0:	4823      	ldr	r0, [pc, #140]	; (8001770 <MX_TIM4_Init+0xe8>)
 80016e2:	f003 fe81 	bl	80053e8 <HAL_TIM_Base_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80016ec:	f000 fca3 	bl	8002036 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016fa:	4619      	mov	r1, r3
 80016fc:	481c      	ldr	r0, [pc, #112]	; (8001770 <MX_TIM4_Init+0xe8>)
 80016fe:	f004 fc33 	bl	8005f68 <HAL_TIM_ConfigClockSource>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001708:	f000 fc95 	bl	8002036 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800170c:	4818      	ldr	r0, [pc, #96]	; (8001770 <MX_TIM4_Init+0xe8>)
 800170e:	f003 ff2b 	bl	8005568 <HAL_TIM_PWM_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001718:	f000 fc8d 	bl	8002036 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001720:	2300      	movs	r3, #0
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001724:	f107 0320 	add.w	r3, r7, #32
 8001728:	4619      	mov	r1, r3
 800172a:	4811      	ldr	r0, [pc, #68]	; (8001770 <MX_TIM4_Init+0xe8>)
 800172c:	f005 f980 	bl	8006a30 <HAL_TIMEx_MasterConfigSynchronization>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001736:	f000 fc7e 	bl	8002036 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800173a:	2360      	movs	r3, #96	; 0x60
 800173c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	2204      	movs	r2, #4
 800174e:	4619      	mov	r1, r3
 8001750:	4807      	ldr	r0, [pc, #28]	; (8001770 <MX_TIM4_Init+0xe8>)
 8001752:	f004 fb47 	bl	8005de4 <HAL_TIM_PWM_ConfigChannel>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800175c:	f000 fc6b 	bl	8002036 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001760:	4803      	ldr	r0, [pc, #12]	; (8001770 <MX_TIM4_Init+0xe8>)
 8001762:	f000 fe59 	bl	8002418 <HAL_TIM_MspPostInit>

}
 8001766:	bf00      	nop
 8001768:	3738      	adds	r7, #56	; 0x38
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000574 	.word	0x20000574
 8001774:	40000800 	.word	0x40000800

08001778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 800177e:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <MX_USART2_UART_Init+0x50>)
 8001780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 8001784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 800179e:	220c      	movs	r2, #12
 80017a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ae:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 80017b0:	f005 f9ce 	bl	8006b50 <HAL_UART_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017ba:	f000 fc3c 	bl	8002036 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200005bc 	.word	0x200005bc
 80017c8:	40004400 	.word	0x40004400

080017cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <MX_DMA_Init+0x4c>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <MX_DMA_Init+0x4c>)
 80017dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <MX_DMA_Init+0x4c>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2105      	movs	r1, #5
 80017f2:	2038      	movs	r0, #56	; 0x38
 80017f4:	f002 fb3a 	bl	8003e6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017f8:	2038      	movs	r0, #56	; 0x38
 80017fa:	f002 fb53 	bl	8003ea4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2105      	movs	r1, #5
 8001802:	203a      	movs	r0, #58	; 0x3a
 8001804:	f002 fb32 	bl	8003e6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001808:	203a      	movs	r0, #58	; 0x3a
 800180a:	f002 fb4b 	bl	8003ea4 <HAL_NVIC_EnableIRQ>

}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800

0800181c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	; 0x28
 8001820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	4b4d      	ldr	r3, [pc, #308]	; (800196c <MX_GPIO_Init+0x150>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a4c      	ldr	r2, [pc, #304]	; (800196c <MX_GPIO_Init+0x150>)
 800183c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b4a      	ldr	r3, [pc, #296]	; (800196c <MX_GPIO_Init+0x150>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b46      	ldr	r3, [pc, #280]	; (800196c <MX_GPIO_Init+0x150>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a45      	ldr	r2, [pc, #276]	; (800196c <MX_GPIO_Init+0x150>)
 8001858:	f043 0304 	orr.w	r3, r3, #4
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b43      	ldr	r3, [pc, #268]	; (800196c <MX_GPIO_Init+0x150>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	4b3f      	ldr	r3, [pc, #252]	; (800196c <MX_GPIO_Init+0x150>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a3e      	ldr	r2, [pc, #248]	; (800196c <MX_GPIO_Init+0x150>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b3c      	ldr	r3, [pc, #240]	; (800196c <MX_GPIO_Init+0x150>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	4b38      	ldr	r3, [pc, #224]	; (800196c <MX_GPIO_Init+0x150>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a37      	ldr	r2, [pc, #220]	; (800196c <MX_GPIO_Init+0x150>)
 8001890:	f043 0308 	orr.w	r3, r3, #8
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b35      	ldr	r3, [pc, #212]	; (800196c <MX_GPIO_Init+0x150>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	603b      	str	r3, [r7, #0]
 80018a6:	4b31      	ldr	r3, [pc, #196]	; (800196c <MX_GPIO_Init+0x150>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a30      	ldr	r2, [pc, #192]	; (800196c <MX_GPIO_Init+0x150>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b2e      	ldr	r3, [pc, #184]	; (800196c <MX_GPIO_Init+0x150>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, testLED1_Pin|testLED2_Pin, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	2103      	movs	r1, #3
 80018c2:	482b      	ldr	r0, [pc, #172]	; (8001970 <MX_GPIO_Init+0x154>)
 80018c4:	f002 ff92 	bl	80047ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ce:	4829      	ldr	r0, [pc, #164]	; (8001974 <MX_GPIO_Init+0x158>)
 80018d0:	f002 ff8c 	bl	80047ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(laser_GPIO_Port, laser_Pin, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2120      	movs	r1, #32
 80018d8:	4827      	ldr	r0, [pc, #156]	; (8001978 <MX_GPIO_Init+0x15c>)
 80018da:	f002 ff87 	bl	80047ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : testLED1_Pin testLED2_Pin */
  GPIO_InitStruct.Pin = testLED1_Pin|testLED2_Pin;
 80018de:	2303      	movs	r3, #3
 80018e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e2:	2301      	movs	r3, #1
 80018e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	4619      	mov	r1, r3
 80018f4:	481e      	ldr	r0, [pc, #120]	; (8001970 <MX_GPIO_Init+0x154>)
 80018f6:	f002 fdcd 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : modeMotor_Pin */
  GPIO_InitStruct.Pin = modeMotor_Pin;
 80018fa:	2310      	movs	r3, #16
 80018fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001902:	2302      	movs	r3, #2
 8001904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(modeMotor_GPIO_Port, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	4818      	ldr	r0, [pc, #96]	; (8001970 <MX_GPIO_Init+0x154>)
 800190e:	f002 fdc1 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : Trig_Pin */
  GPIO_InitStruct.Pin = Trig_Pin;
 8001912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001918:	2301      	movs	r3, #1
 800191a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	4619      	mov	r1, r3
 800192a:	4812      	ldr	r0, [pc, #72]	; (8001974 <MX_GPIO_Init+0x158>)
 800192c:	f002 fdb2 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : laserTrig_Pin */
  GPIO_InitStruct.Pin = laserTrig_Pin;
 8001930:	2304      	movs	r3, #4
 8001932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001934:	2300      	movs	r3, #0
 8001936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001938:	2301      	movs	r3, #1
 800193a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(laserTrig_GPIO_Port, &GPIO_InitStruct);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4619      	mov	r1, r3
 8001942:	480e      	ldr	r0, [pc, #56]	; (800197c <MX_GPIO_Init+0x160>)
 8001944:	f002 fda6 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pin : laser_Pin */
  GPIO_InitStruct.Pin = laser_Pin;
 8001948:	2320      	movs	r3, #32
 800194a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194c:	2301      	movs	r3, #1
 800194e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(laser_GPIO_Port, &GPIO_InitStruct);
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	4619      	mov	r1, r3
 800195e:	4806      	ldr	r0, [pc, #24]	; (8001978 <MX_GPIO_Init+0x15c>)
 8001960:	f002 fd98 	bl	8004494 <HAL_GPIO_Init>

}
 8001964:	bf00      	nop
 8001966:	3728      	adds	r7, #40	; 0x28
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40023800 	.word	0x40023800
 8001970:	40020800 	.word	0x40020800
 8001974:	40020000 	.word	0x40020000
 8001978:	40020400 	.word	0x40020400
 800197c:	40020c00 	.word	0x40020c00

08001980 <JoystickControlTask>:

/* USER CODE BEGIN 4 */

void JoystickControlTask(void * argument) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

	uint16_t pulseX;
	uint16_t pulseY;

    while(1) {
    	if (xSemaphoreTake(xManualModeSemaphore, portMAX_DELAY)) {
 8001988:	4b4b      	ldr	r3, [pc, #300]	; (8001ab8 <JoystickControlTask+0x138>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001990:	4618      	mov	r0, r3
 8001992:	f005 fe7f 	bl	8007694 <xQueueSemaphoreTake>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0f5      	beq.n	8001988 <JoystickControlTask+0x8>
			// Read joystick x-axis
			HAL_ADC_Start(&hadc1);
 800199c:	4847      	ldr	r0, [pc, #284]	; (8001abc <JoystickControlTask+0x13c>)
 800199e:	f000 ff7f 	bl	80028a0 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1,1);
 80019a2:	2101      	movs	r1, #1
 80019a4:	4845      	ldr	r0, [pc, #276]	; (8001abc <JoystickControlTask+0x13c>)
 80019a6:	f001 f880 	bl	8002aaa <HAL_ADC_PollForConversion>
			readValueX = HAL_ADC_GetValue(&hadc1);
 80019aa:	4844      	ldr	r0, [pc, #272]	; (8001abc <JoystickControlTask+0x13c>)
 80019ac:	f001 f908 	bl	8002bc0 <HAL_ADC_GetValue>
 80019b0:	4603      	mov	r3, r0
 80019b2:	81fb      	strh	r3, [r7, #14]
			HAL_ADC_Stop(&hadc1);
 80019b4:	4841      	ldr	r0, [pc, #260]	; (8001abc <JoystickControlTask+0x13c>)
 80019b6:	f001 f845 	bl	8002a44 <HAL_ADC_Stop>

			// Read joystick y-axis
			HAL_ADC_Start(&hadc2);
 80019ba:	4841      	ldr	r0, [pc, #260]	; (8001ac0 <JoystickControlTask+0x140>)
 80019bc:	f000 ff70 	bl	80028a0 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc2,1);
 80019c0:	2101      	movs	r1, #1
 80019c2:	483f      	ldr	r0, [pc, #252]	; (8001ac0 <JoystickControlTask+0x140>)
 80019c4:	f001 f871 	bl	8002aaa <HAL_ADC_PollForConversion>
			readValueY = HAL_ADC_GetValue(&hadc2);
 80019c8:	483d      	ldr	r0, [pc, #244]	; (8001ac0 <JoystickControlTask+0x140>)
 80019ca:	f001 f8f9 	bl	8002bc0 <HAL_ADC_GetValue>
 80019ce:	4603      	mov	r3, r0
 80019d0:	81bb      	strh	r3, [r7, #12]
			HAL_ADC_Stop(&hadc2);
 80019d2:	483b      	ldr	r0, [pc, #236]	; (8001ac0 <JoystickControlTask+0x140>)
 80019d4:	f001 f836 	bl	8002a44 <HAL_ADC_Stop>

			// Perform the calculation to get ccr value for desired pwm
			pulseX = PWM_MIN + (uint16_t)(((float)readValueX / 4095.0) * (PWM_MAX - PWM_MIN));
 80019d8:	89fb      	ldrh	r3, [r7, #14]
 80019da:	ee07 3a90 	vmov	s15, r3
 80019de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019e2:	ee17 0a90 	vmov	r0, s15
 80019e6:	f7fe fd77 	bl	80004d8 <__aeabi_f2d>
 80019ea:	a331      	add	r3, pc, #196	; (adr r3, 8001ab0 <JoystickControlTask+0x130>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	f7fe fef4 	bl	80007dc <__aeabi_ddiv>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	4b30      	ldr	r3, [pc, #192]	; (8001ac4 <JoystickControlTask+0x144>)
 8001a02:	f7fe fdc1 	bl	8000588 <__aeabi_dmul>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f7fe ffcd 	bl	80009ac <__aeabi_d2uiz>
 8001a12:	4603      	mov	r3, r0
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001a22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a2a:	ee17 3a90 	vmov	r3, s15
 8001a2e:	817b      	strh	r3, [r7, #10]
			htim3.Instance->CCR1 = pulseX;
 8001a30:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <JoystickControlTask+0x148>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	897a      	ldrh	r2, [r7, #10]
 8001a36:	635a      	str	r2, [r3, #52]	; 0x34

			pulseY = PWM_MIN + (uint16_t)(((float)readValueY / 4095.0) * (PWM_MAX - PWM_MIN));
 8001a38:	89bb      	ldrh	r3, [r7, #12]
 8001a3a:	ee07 3a90 	vmov	s15, r3
 8001a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a42:	ee17 0a90 	vmov	r0, s15
 8001a46:	f7fe fd47 	bl	80004d8 <__aeabi_f2d>
 8001a4a:	a319      	add	r3, pc, #100	; (adr r3, 8001ab0 <JoystickControlTask+0x130>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	f7fe fec4 	bl	80007dc <__aeabi_ddiv>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <JoystickControlTask+0x144>)
 8001a62:	f7fe fd91 	bl	8000588 <__aeabi_dmul>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f7fe ff9d 	bl	80009ac <__aeabi_d2uiz>
 8001a72:	4603      	mov	r3, r0
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	ee07 3a90 	vmov	s15, r3
 8001a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001a82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a8a:	ee17 3a90 	vmov	r3, s15
 8001a8e:	813b      	strh	r3, [r7, #8]
			htim4.Instance->CCR1 = pulseY;
 8001a90:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <JoystickControlTask+0x14c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	893a      	ldrh	r2, [r7, #8]
 8001a96:	635a      	str	r2, [r3, #52]	; 0x34

			xSemaphoreGive(xManualModeSemaphore);
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <JoystickControlTask+0x138>)
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	f005 fcf9 	bl	8007498 <xQueueGenericSend>
			vTaskDelay(pdMS_TO_TICKS(100));  // Delay to allow other tasks to run
 8001aa6:	2064      	movs	r0, #100	; 0x64
 8001aa8:	f006 f9ac 	bl	8007e04 <vTaskDelay>
    	if (xSemaphoreTake(xManualModeSemaphore, portMAX_DELAY)) {
 8001aac:	e76c      	b.n	8001988 <JoystickControlTask+0x8>
 8001aae:	bf00      	nop
 8001ab0:	00000000 	.word	0x00000000
 8001ab4:	40affe00 	.word	0x40affe00
 8001ab8:	20000638 	.word	0x20000638
 8001abc:	2000036c 	.word	0x2000036c
 8001ac0:	200003b4 	.word	0x200003b4
 8001ac4:	40468000 	.word	0x40468000
 8001ac8:	2000052c 	.word	0x2000052c
 8001acc:	20000574 	.word	0x20000574

08001ad0 <UltrasonicSensorTask>:
    	}
    }
}

void UltrasonicSensorTask(void * argument) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

    while(1) {
    	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ade:	4817      	ldr	r0, [pc, #92]	; (8001b3c <UltrasonicSensorTask+0x6c>)
 8001ae0:	f002 fe84 	bl	80047ec <HAL_GPIO_WritePin>
    	vTaskDelay(pdMS_TO_TICKS(10));  // wait for 10 ms
 8001ae4:	200a      	movs	r0, #10
 8001ae6:	f006 f98d 	bl	8007e04 <vTaskDelay>
		HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001aea:	2200      	movs	r2, #0
 8001aec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001af0:	4812      	ldr	r0, [pc, #72]	; (8001b3c <UltrasonicSensorTask+0x6c>)
 8001af2:	f002 fe7b 	bl	80047ec <HAL_GPIO_WritePin>

		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <UltrasonicSensorTask+0x70>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <UltrasonicSensorTask+0x70>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f042 0202 	orr.w	r2, r2, #2
 8001b04:	60da      	str	r2, [r3, #12]

        if (Distance < THRESHOLD_DISTANCE) {
 8001b06:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <UltrasonicSensorTask+0x74>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d807      	bhi.n	8001b1e <UltrasonicSensorTask+0x4e>
        	// Notify CommandProcessorTask that object is close
        	xTaskNotify(CommandProcessHandle, (1 << 0), eSetBits); // Use bit 0 to indicate UltrasonicSensorTask
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <UltrasonicSensorTask+0x78>)
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	2300      	movs	r3, #0
 8001b14:	2201      	movs	r2, #1
 8001b16:	2101      	movs	r1, #1
 8001b18:	f006 ffd6 	bl	8008ac8 <xTaskGenericNotify>
 8001b1c:	e00a      	b.n	8001b34 <UltrasonicSensorTask+0x64>
        }
        else if (Distance > THRESHOLD_DISTANCE) {
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <UltrasonicSensorTask+0x74>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d906      	bls.n	8001b34 <UltrasonicSensorTask+0x64>
        	// Notify LaserControlTask that object is far
        	xTaskNotify(CommandProcessHandle, (1 << 1), eSetBits); // Use bit 0 to indicate LaserControlTask
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <UltrasonicSensorTask+0x78>)
 8001b28:	6818      	ldr	r0, [r3, #0]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2102      	movs	r1, #2
 8001b30:	f006 ffca 	bl	8008ac8 <xTaskGenericNotify>
        }

        vTaskDelay(pdMS_TO_TICKS(200));
 8001b34:	20c8      	movs	r0, #200	; 0xc8
 8001b36:	f006 f965 	bl	8007e04 <vTaskDelay>
    	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001b3a:	e7cd      	b.n	8001ad8 <UltrasonicSensorTask+0x8>
 8001b3c:	40020000 	.word	0x40020000
 8001b40:	200004e4 	.word	0x200004e4
 8001b44:	20000024 	.word	0x20000024
 8001b48:	20000600 	.word	0x20000600

08001b4c <LaserControlTask>:
    }
}

void LaserControlTask(void * argument) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

    while(1) {

        if (xSemaphoreTake(xLaserSemaphore, 0) == pdTRUE) {
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <LaserControlTask+0x48>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f005 fd9a 	bl	8007694 <xQueueSemaphoreTake>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d10c      	bne.n	8001b80 <LaserControlTask+0x34>
            // If semaphore is successfully taken, turn on the laser
            HAL_GPIO_WritePin(laser_GPIO_Port, laser_Pin, GPIO_PIN_SET);
 8001b66:	2201      	movs	r2, #1
 8001b68:	2120      	movs	r1, #32
 8001b6a:	480b      	ldr	r0, [pc, #44]	; (8001b98 <LaserControlTask+0x4c>)
 8001b6c:	f002 fe3e 	bl	80047ec <HAL_GPIO_WritePin>
            xSemaphoreGive(xLaserSemaphore);
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <LaserControlTask+0x48>)
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	2300      	movs	r3, #0
 8001b76:	2200      	movs	r2, #0
 8001b78:	2100      	movs	r1, #0
 8001b7a:	f005 fc8d 	bl	8007498 <xQueueGenericSend>
 8001b7e:	e004      	b.n	8001b8a <LaserControlTask+0x3e>
        } else {
            // If semaphore is not available, turn off the laser
            HAL_GPIO_WritePin(laser_GPIO_Port, laser_Pin, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2120      	movs	r1, #32
 8001b84:	4804      	ldr	r0, [pc, #16]	; (8001b98 <LaserControlTask+0x4c>)
 8001b86:	f002 fe31 	bl	80047ec <HAL_GPIO_WritePin>
        }
        vTaskDelay(pdMS_TO_TICKS(100));
 8001b8a:	2064      	movs	r0, #100	; 0x64
 8001b8c:	f006 f93a 	bl	8007e04 <vTaskDelay>
        if (xSemaphoreTake(xLaserSemaphore, 0) == pdTRUE) {
 8001b90:	e7e0      	b.n	8001b54 <LaserControlTask+0x8>
 8001b92:	bf00      	nop
 8001b94:	20000634 	.word	0x20000634
 8001b98:	40020400 	.word	0x40020400

08001b9c <ScanningModeTask>:
    }
}

void ScanningModeTask(void * argument) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
    bool increasing = true;  // Flag to indicate direction of movement
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]

    for (;;) {
            while (1) {
                // Check if laser mode is active and should stop scanning
                if (xSemaphoreTake(xScanModeSemaphore, 0) == pdFALSE) {
 8001ba8:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <ScanningModeTask+0xac>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f005 fd70 	bl	8007694 <xQueueSemaphoreTake>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d043      	beq.n	8001c42 <ScanningModeTask+0xa6>
                    // Laser mode active, stop scanning
                    break;
                }

                // Update PWM for motor X
                htim3.Instance->CCR1 = pulseX;
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <ScanningModeTask+0xb0>)
 8001bbc:	881a      	ldrh	r2, [r3, #0]
 8001bbe:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <ScanningModeTask+0xb4>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	635a      	str	r2, [r3, #52]	; 0x34

                // Move in the current direction
                if (increasing) {
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d018      	beq.n	8001bfc <ScanningModeTask+0x60>
                    pulseX++;
 8001bca:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <ScanningModeTask+0xb0>)
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <ScanningModeTask+0xb0>)
 8001bd4:	801a      	strh	r2, [r3, #0]
                    if (pulseX > PWM_MAX) {
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <ScanningModeTask+0xb0>)
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	ee07 3a90 	vmov	s15, r3
 8001bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001c54 <ScanningModeTask+0xb8>
 8001be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bee:	dd1d      	ble.n	8001c2c <ScanningModeTask+0x90>
                        pulseX = PWM_MAX;  // Cap pulseX at 100
 8001bf0:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <ScanningModeTask+0xb0>)
 8001bf2:	224b      	movs	r2, #75	; 0x4b
 8001bf4:	801a      	strh	r2, [r3, #0]
                        increasing = false;  // Change direction to decreasing
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	73fb      	strb	r3, [r7, #15]
 8001bfa:	e017      	b.n	8001c2c <ScanningModeTask+0x90>
                    }
                } else {
                    pulseX--;
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <ScanningModeTask+0xb0>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <ScanningModeTask+0xb0>)
 8001c06:	801a      	strh	r2, [r3, #0]
                    if (pulseX < PWM_MIN) {
 8001c08:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <ScanningModeTask+0xb0>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	ee07 3a90 	vmov	s15, r3
 8001c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c14:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c20:	d504      	bpl.n	8001c2c <ScanningModeTask+0x90>
                        pulseX = PWM_MIN;  // Cap pulseX at 50
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <ScanningModeTask+0xb0>)
 8001c24:	221e      	movs	r2, #30
 8001c26:	801a      	strh	r2, [r3, #0]
                        increasing = true;  // Change direction to increasing
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
                    }
                }

                xSemaphoreGive(xScanModeSemaphore);
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <ScanningModeTask+0xac>)
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	2300      	movs	r3, #0
 8001c32:	2200      	movs	r2, #0
 8001c34:	2100      	movs	r1, #0
 8001c36:	f005 fc2f 	bl	8007498 <xQueueGenericSend>

                // Delay for smooth movement
                vTaskDelay(pdMS_TO_TICKS(50));
 8001c3a:	2032      	movs	r0, #50	; 0x32
 8001c3c:	f006 f8e2 	bl	8007e04 <vTaskDelay>
                if (xSemaphoreTake(xScanModeSemaphore, 0) == pdFALSE) {
 8001c40:	e7b2      	b.n	8001ba8 <ScanningModeTask+0xc>
                    break;
 8001c42:	bf00      	nop
    for (;;) {
 8001c44:	e7b0      	b.n	8001ba8 <ScanningModeTask+0xc>
 8001c46:	bf00      	nop
 8001c48:	2000063c 	.word	0x2000063c
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	2000052c 	.word	0x2000052c
 8001c54:	42960000 	.word	0x42960000

08001c58 <CANCommunicationTask>:
        }
    }
}


void CANCommunicationTask(void *argument) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b092      	sub	sp, #72	; 0x48
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
    uint8_t buffer[MAX_MESSAGE_SIZE];  // Adjust the buffer size according to your needs
    size_t message_length;

	for (;;)
	{
		if (xSemaphoreTake(xCanTransmitSemaphore, 0) == pdTRUE) {
 8001c60:	4b36      	ldr	r3, [pc, #216]	; (8001d3c <CANCommunicationTask+0xe4>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2100      	movs	r1, #0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f005 fd14 	bl	8007694 <xQueueSemaphoreTake>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d1f6      	bne.n	8001c60 <CANCommunicationTask+0x8>
			feedback_data.position_1 = ((float)(htim3.Instance->CCR1 - PWM_MIN) / (PWM_MAX - PWM_MIN)) * 180.0f;  //  Calculating motor 1 angle from ccr value
 8001c72:	4b33      	ldr	r3, [pc, #204]	; (8001d40 <CANCommunicationTask+0xe8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c78:	ee07 3a90 	vmov	s15, r3
 8001c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c80:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001c84:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001c88:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001d44 <CANCommunicationTask+0xec>
 8001c8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c90:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001d48 <CANCommunicationTask+0xf0>
 8001c94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c98:	4b2c      	ldr	r3, [pc, #176]	; (8001d4c <CANCommunicationTask+0xf4>)
 8001c9a:	edc3 7a00 	vstr	s15, [r3]
			feedback_data.position_2 = ((float)(htim4.Instance->CCR1 - PWM_MIN) / (PWM_MAX - PWM_MIN)) * 180.0f;  //  Calculating motor 2 angle from ccr value
 8001c9e:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <CANCommunicationTask+0xf8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca4:	ee07 3a90 	vmov	s15, r3
 8001ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cac:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001cb0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001cb4:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001d44 <CANCommunicationTask+0xec>
 8001cb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cbc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001d48 <CANCommunicationTask+0xf0>
 8001cc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cc4:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <CANCommunicationTask+0xf4>)
 8001cc6:	edc3 7a01 	vstr	s15, [r3, #4]
			feedback_data.distance = (float)(Distance); // UltraSound distance
 8001cca:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <CANCommunicationTask+0xfc>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	ee07 3a90 	vmov	s15, r3
 8001cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <CANCommunicationTask+0xf4>)
 8001cd8:	edc3 7a02 	vstr	s15, [r3, #8]

		    pb_ostream_t stream = pb_ostream_from_buffer(buffer, sizeof(buffer));
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	f107 0120 	add.w	r1, r7, #32
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f009 fcfc 	bl	800b6e4 <pb_ostream_from_buffer>
		    bool status = pb_encode(&stream, ServoUltrasonicData_fields, &feedback_data);
 8001cec:	f107 030c 	add.w	r3, r7, #12
 8001cf0:	4a16      	ldr	r2, [pc, #88]	; (8001d4c <CANCommunicationTask+0xf4>)
 8001cf2:	4919      	ldr	r1, [pc, #100]	; (8001d58 <CANCommunicationTask+0x100>)
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f00a f962 	bl	800bfbe <pb_encode>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		    message_length = stream.bytes_written;
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	643b      	str	r3, [r7, #64]	; 0x40

		    if (!status) {
 8001d04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001d08:	f083 0301 	eor.w	r3, r3, #1
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <CANCommunicationTask+0xbe>
		        Error_Handler();  // Handle encoding error
 8001d12:	f000 f990 	bl	8002036 <Error_Handler>
		    }

			/// Send the data
		    SendCANMessage(buffer, message_length, CAN_ID_DISP);
 8001d16:	f107 0320 	add.w	r3, r7, #32
 8001d1a:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8001d1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff f913 	bl	8000f4c <SendCANMessage>
		    xSemaphoreGive(xCanTransmitSemaphore);
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <CANCommunicationTask+0xe4>)
 8001d28:	6818      	ldr	r0, [r3, #0]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2100      	movs	r1, #0
 8001d30:	f005 fbb2 	bl	8007498 <xQueueGenericSend>

			vTaskDelay(pdMS_TO_TICKS(150));
 8001d34:	2096      	movs	r0, #150	; 0x96
 8001d36:	f006 f865 	bl	8007e04 <vTaskDelay>
		if (xSemaphoreTake(xCanTransmitSemaphore, 0) == pdTRUE) {
 8001d3a:	e791      	b.n	8001c60 <CANCommunicationTask+0x8>
 8001d3c:	20000640 	.word	0x20000640
 8001d40:	2000052c 	.word	0x2000052c
 8001d44:	42340000 	.word	0x42340000
 8001d48:	43340000 	.word	0x43340000
 8001d4c:	200006c8 	.word	0x200006c8
 8001d50:	20000574 	.word	0x20000574
 8001d54:	20000024 	.word	0x20000024
 8001d58:	0800ce00 	.word	0x0800ce00

08001d5c <CANStatusCommTask>:
		}
	}
}

void CANStatusCommTask(void *argument) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b092      	sub	sp, #72	; 0x48
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
    uint8_t buffer[MAX_MESSAGE_SIZE];  // Adjust the buffer size according to your needs
    size_t message_length;

	for (;;)
	{
		feedback_combined.status.lock_motors = lock_motors;
 8001d64:	4b37      	ldr	r3, [pc, #220]	; (8001e44 <CANStatusCommTask+0xe8>)
 8001d66:	781a      	ldrb	r2, [r3, #0]
 8001d68:	4b37      	ldr	r3, [pc, #220]	; (8001e48 <CANStatusCommTask+0xec>)
 8001d6a:	745a      	strb	r2, [r3, #17]
		feedback_combined.status.fire_laser = fire_laser;
 8001d6c:	4b37      	ldr	r3, [pc, #220]	; (8001e4c <CANStatusCommTask+0xf0>)
 8001d6e:	781a      	ldrb	r2, [r3, #0]
 8001d70:	4b35      	ldr	r3, [pc, #212]	; (8001e48 <CANStatusCommTask+0xec>)
 8001d72:	749a      	strb	r2, [r3, #18]
		feedback_combined.status.motor_mode = motor_mode;  // True for scanning and False for manual
 8001d74:	4b36      	ldr	r3, [pc, #216]	; (8001e50 <CANStatusCommTask+0xf4>)
 8001d76:	781a      	ldrb	r2, [r3, #0]
 8001d78:	4b33      	ldr	r3, [pc, #204]	; (8001e48 <CANStatusCommTask+0xec>)
 8001d7a:	74da      	strb	r2, [r3, #19]
		feedback_combined.servo_data.distance = (float)(Distance); // UltraSound distance
 8001d7c:	4b35      	ldr	r3, [pc, #212]	; (8001e54 <CANStatusCommTask+0xf8>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	ee07 3a90 	vmov	s15, r3
 8001d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d88:	4b2f      	ldr	r3, [pc, #188]	; (8001e48 <CANStatusCommTask+0xec>)
 8001d8a:	edc3 7a03 	vstr	s15, [r3, #12]
		feedback_combined.servo_data.position_1 = ((float)(htim3.Instance->CCR1 - PWM_MIN) / (PWM_MAX - PWM_MIN)) * 180.0f;  //  Calculating motor 1 angle from ccr value
 8001d8e:	4b32      	ldr	r3, [pc, #200]	; (8001e58 <CANStatusCommTask+0xfc>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d94:	ee07 3a90 	vmov	s15, r3
 8001d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d9c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001da0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001da4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001e5c <CANStatusCommTask+0x100>
 8001da8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dac:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001e60 <CANStatusCommTask+0x104>
 8001db0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db4:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <CANStatusCommTask+0xec>)
 8001db6:	edc3 7a01 	vstr	s15, [r3, #4]
		feedback_combined.servo_data.position_2 = ((float)(htim4.Instance->CCR1 - PWM_MIN) / (PWM_MAX - PWM_MIN)) * 180.0f;  //  Calculating motor 2 angle from ccr value
 8001dba:	4b2a      	ldr	r3, [pc, #168]	; (8001e64 <CANStatusCommTask+0x108>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc0:	ee07 3a90 	vmov	s15, r3
 8001dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001dcc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001dd0:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001e5c <CANStatusCommTask+0x100>
 8001dd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dd8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001e60 <CANStatusCommTask+0x104>
 8001ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001de0:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <CANStatusCommTask+0xec>)
 8001de2:	edc3 7a02 	vstr	s15, [r3, #8]

		feedback_combined.has_servo_data = true;
 8001de6:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <CANStatusCommTask+0xec>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
		feedback_combined.has_status = true;
 8001dec:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <CANStatusCommTask+0xec>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	741a      	strb	r2, [r3, #16]

	    pb_ostream_t stream = pb_ostream_from_buffer(buffer, sizeof(buffer));
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	f107 0120 	add.w	r1, r7, #32
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f009 fc71 	bl	800b6e4 <pb_ostream_from_buffer>
	    bool status = pb_encode(&stream, CombinedData_fields, &feedback_combined);
 8001e02:	f107 030c 	add.w	r3, r7, #12
 8001e06:	4a10      	ldr	r2, [pc, #64]	; (8001e48 <CANStatusCommTask+0xec>)
 8001e08:	4917      	ldr	r1, [pc, #92]	; (8001e68 <CANStatusCommTask+0x10c>)
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f00a f8d7 	bl	800bfbe <pb_encode>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	    message_length = stream.bytes_written;
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	643b      	str	r3, [r7, #64]	; 0x40

	    if (!status) {
 8001e1a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e1e:	f083 0301 	eor.w	r3, r3, #1
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <CANStatusCommTask+0xd0>
	        Error_Handler();  // Handle encoding error
 8001e28:	f000 f905 	bl	8002036 <Error_Handler>
	    }

		/// Send the data
	    SendCANMessage(buffer, message_length, CAN_ID_STATUS);
 8001e2c:	f107 0320 	add.w	r3, r7, #32
 8001e30:	f240 4241 	movw	r2, #1089	; 0x441
 8001e34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff f888 	bl	8000f4c <SendCANMessage>

		vTaskDelay(pdMS_TO_TICKS(20));
 8001e3c:	2014      	movs	r0, #20
 8001e3e:	f005 ffe1 	bl	8007e04 <vTaskDelay>
	{
 8001e42:	e78f      	b.n	8001d64 <CANStatusCommTask+0x8>
 8001e44:	2000068c 	.word	0x2000068c
 8001e48:	200006b4 	.word	0x200006b4
 8001e4c:	2000068d 	.word	0x2000068d
 8001e50:	2000068e 	.word	0x2000068e
 8001e54:	20000024 	.word	0x20000024
 8001e58:	2000052c 	.word	0x2000052c
 8001e5c:	42340000 	.word	0x42340000
 8001e60:	43340000 	.word	0x43340000
 8001e64:	20000574 	.word	0x20000574
 8001e68:	0800ce64 	.word	0x0800ce64

08001e6c <CommandProcessorTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_CommandProcessorTask */
void CommandProcessorTask(void const * argument)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t ulNotificationValue;
	bool ultraTrig = false;
 8001e74:	2300      	movs	r3, #0
 8001e76:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
	for(;;){
		lock_motors = received_combined.status.lock_motors || !HAL_GPIO_ReadPin(laserTrig_GPIO_Port, laserTrig_Pin);
 8001e78:	4b5d      	ldr	r3, [pc, #372]	; (8001ff0 <CommandProcessorTask+0x184>)
 8001e7a:	7c5b      	ldrb	r3, [r3, #17]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d106      	bne.n	8001e8e <CommandProcessorTask+0x22>
 8001e80:	2104      	movs	r1, #4
 8001e82:	485c      	ldr	r0, [pc, #368]	; (8001ff4 <CommandProcessorTask+0x188>)
 8001e84:	f002 fc9a 	bl	80047bc <HAL_GPIO_ReadPin>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <CommandProcessorTask+0x26>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <CommandProcessorTask+0x28>
 8001e92:	2300      	movs	r3, #0
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4b57      	ldr	r3, [pc, #348]	; (8001ff8 <CommandProcessorTask+0x18c>)
 8001e9c:	701a      	strb	r2, [r3, #0]
		fire_laser = received_combined.status.fire_laser || !HAL_GPIO_ReadPin(laserTrig_GPIO_Port, laserTrig_Pin) || ultraTrig;
 8001e9e:	4b54      	ldr	r3, [pc, #336]	; (8001ff0 <CommandProcessorTask+0x184>)
 8001ea0:	7c9b      	ldrb	r3, [r3, #18]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d109      	bne.n	8001eba <CommandProcessorTask+0x4e>
 8001ea6:	2104      	movs	r1, #4
 8001ea8:	4852      	ldr	r0, [pc, #328]	; (8001ff4 <CommandProcessorTask+0x188>)
 8001eaa:	f002 fc87 	bl	80047bc <HAL_GPIO_ReadPin>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <CommandProcessorTask+0x4e>
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <CommandProcessorTask+0x52>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <CommandProcessorTask+0x54>
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4b4d      	ldr	r3, [pc, #308]	; (8001ffc <CommandProcessorTask+0x190>)
 8001ec8:	701a      	strb	r2, [r3, #0]
		motor_mode = received_combined.status.motor_mode;
 8001eca:	4b49      	ldr	r3, [pc, #292]	; (8001ff0 <CommandProcessorTask+0x184>)
 8001ecc:	7cda      	ldrb	r2, [r3, #19]
 8001ece:	4b4c      	ldr	r3, [pc, #304]	; (8002000 <CommandProcessorTask+0x194>)
 8001ed0:	701a      	strb	r2, [r3, #0]

		if (xTaskNotifyWait(0, 0xFFFFFFFF, &ulNotificationValue, 0) == pdTRUE) {
 8001ed2:	f107 0208 	add.w	r2, r7, #8
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001edc:	2000      	movs	r0, #0
 8001ede:	f006 fd93 	bl	8008a08 <xTaskNotifyWait>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d10e      	bne.n	8001f06 <CommandProcessorTask+0x9a>

			if (ulNotificationValue & (1 << 0)) {
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <CommandProcessorTask+0x8c>
				ultraTrig = true; // Ultrasound noti, object close
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
 8001ef6:	e006      	b.n	8001f06 <CommandProcessorTask+0x9a>
			}
			else if (ulNotificationValue & (1 << 1)) {
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <CommandProcessorTask+0x9a>
				ultraTrig = false; // Ultrasound noti, object far
 8001f02:	2300      	movs	r3, #0
 8001f04:	73fb      	strb	r3, [r7, #15]
			}
		}


		if (fire_laser)
 8001f06:	4b3d      	ldr	r3, [pc, #244]	; (8001ffc <CommandProcessorTask+0x190>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d012      	beq.n	8001f34 <CommandProcessorTask+0xc8>
		{
			xSemaphoreGive(xLaserSemaphore);
 8001f0e:	4b3d      	ldr	r3, [pc, #244]	; (8002004 <CommandProcessorTask+0x198>)
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	2300      	movs	r3, #0
 8001f14:	2200      	movs	r2, #0
 8001f16:	2100      	movs	r1, #0
 8001f18:	f005 fabe 	bl	8007498 <xQueueGenericSend>

			if (lock_motors) {
 8001f1c:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <CommandProcessorTask+0x18c>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d013      	beq.n	8001f4c <CommandProcessorTask+0xe0>
				xSemaphoreGive(xCanTransmitSemaphore);
 8001f24:	4b38      	ldr	r3, [pc, #224]	; (8002008 <CommandProcessorTask+0x19c>)
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	2300      	movs	r3, #0
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	f005 fab3 	bl	8007498 <xQueueGenericSend>
 8001f32:	e00b      	b.n	8001f4c <CommandProcessorTask+0xe0>
			}
		} else {
			xSemaphoreTake(xLaserSemaphore, 0);
 8001f34:	4b33      	ldr	r3, [pc, #204]	; (8002004 <CommandProcessorTask+0x198>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f005 fbaa 	bl	8007694 <xQueueSemaphoreTake>
			xSemaphoreTake(xCanTransmitSemaphore, 0);
 8001f40:	4b31      	ldr	r3, [pc, #196]	; (8002008 <CommandProcessorTask+0x19c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2100      	movs	r1, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f005 fba4 	bl	8007694 <xQueueSemaphoreTake>
		}

		if (lock_motors) {
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <CommandProcessorTask+0x18c>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00b      	beq.n	8001f6c <CommandProcessorTask+0x100>
			xSemaphoreTake(xManualModeSemaphore, 0);
 8001f54:	4b2d      	ldr	r3, [pc, #180]	; (800200c <CommandProcessorTask+0x1a0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f005 fb9a 	bl	8007694 <xQueueSemaphoreTake>
			xSemaphoreTake(xScanModeSemaphore, 0);
 8001f60:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <CommandProcessorTask+0x1a4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f005 fb94 	bl	8007694 <xQueueSemaphoreTake>
		}

		if (motor_mode && !lock_motors) // IF BUTTON IS BEING PRESSED, IT IS IN SCANNING MODE
 8001f6c:	4b24      	ldr	r3, [pc, #144]	; (8002000 <CommandProcessorTask+0x194>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d019      	beq.n	8001fa8 <CommandProcessorTask+0x13c>
 8001f74:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <CommandProcessorTask+0x18c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	f083 0301 	eor.w	r3, r3, #1
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d012      	beq.n	8001fa8 <CommandProcessorTask+0x13c>
		{
			HAL_GPIO_WritePin(testLED1_GPIO_Port, testLED1_Pin, GPIO_PIN_SET);
 8001f82:	2201      	movs	r2, #1
 8001f84:	2101      	movs	r1, #1
 8001f86:	4823      	ldr	r0, [pc, #140]	; (8002014 <CommandProcessorTask+0x1a8>)
 8001f88:	f002 fc30 	bl	80047ec <HAL_GPIO_WritePin>
			xSemaphoreTake(xManualModeSemaphore, 0);
 8001f8c:	4b1f      	ldr	r3, [pc, #124]	; (800200c <CommandProcessorTask+0x1a0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2100      	movs	r1, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f005 fb7e 	bl	8007694 <xQueueSemaphoreTake>
			xSemaphoreGive(xScanModeSemaphore);
 8001f98:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <CommandProcessorTask+0x1a4>)
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	f005 fa79 	bl	8007498 <xQueueGenericSend>
 8001fa6:	e01f      	b.n	8001fe8 <CommandProcessorTask+0x17c>
		} else if (!motor_mode && !lock_motors) {
 8001fa8:	4b15      	ldr	r3, [pc, #84]	; (8002000 <CommandProcessorTask+0x194>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	f083 0301 	eor.w	r3, r3, #1
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d018      	beq.n	8001fe8 <CommandProcessorTask+0x17c>
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <CommandProcessorTask+0x18c>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	f083 0301 	eor.w	r3, r3, #1
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d011      	beq.n	8001fe8 <CommandProcessorTask+0x17c>
			xSemaphoreTake(xScanModeSemaphore, 0);
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <CommandProcessorTask+0x1a4>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f005 fb62 	bl	8007694 <xQueueSemaphoreTake>
			xSemaphoreGive(xManualModeSemaphore);
 8001fd0:	4b0e      	ldr	r3, [pc, #56]	; (800200c <CommandProcessorTask+0x1a0>)
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2100      	movs	r1, #0
 8001fda:	f005 fa5d 	bl	8007498 <xQueueGenericSend>
			HAL_GPIO_WritePin(testLED1_GPIO_Port, testLED1_Pin, GPIO_PIN_RESET);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	480c      	ldr	r0, [pc, #48]	; (8002014 <CommandProcessorTask+0x1a8>)
 8001fe4:	f002 fc02 	bl	80047ec <HAL_GPIO_WritePin>
		}

		vTaskDelay(pdMS_TO_TICKS(60));
 8001fe8:	203c      	movs	r0, #60	; 0x3c
 8001fea:	f005 ff0b 	bl	8007e04 <vTaskDelay>
		lock_motors = received_combined.status.lock_motors || !HAL_GPIO_ReadPin(laserTrig_GPIO_Port, laserTrig_Pin);
 8001fee:	e743      	b.n	8001e78 <CommandProcessorTask+0xc>
 8001ff0:	200006a0 	.word	0x200006a0
 8001ff4:	40020c00 	.word	0x40020c00
 8001ff8:	2000068c 	.word	0x2000068c
 8001ffc:	2000068d 	.word	0x2000068d
 8002000:	2000068e 	.word	0x2000068e
 8002004:	20000634 	.word	0x20000634
 8002008:	20000640 	.word	0x20000640
 800200c:	20000638 	.word	0x20000638
 8002010:	2000063c 	.word	0x2000063c
 8002014:	40020800 	.word	0x40020800

08002018 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002028:	d101      	bne.n	800202e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800202a:	f000 fbd5 	bl	80027d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800203a:	b672      	cpsid	i
}
 800203c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800203e:	e7fe      	b.n	800203e <Error_Handler+0x8>

08002040 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_MspInit+0x54>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	4a11      	ldr	r2, [pc, #68]	; (8002094 <HAL_MspInit+0x54>)
 8002050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002054:	6453      	str	r3, [r2, #68]	; 0x44
 8002056:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <HAL_MspInit+0x54>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	603b      	str	r3, [r7, #0]
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_MspInit+0x54>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <HAL_MspInit+0x54>)
 800206c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002070:	6413      	str	r3, [r2, #64]	; 0x40
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_MspInit+0x54>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	210f      	movs	r1, #15
 8002082:	f06f 0001 	mvn.w	r0, #1
 8002086:	f001 fef1 	bl	8003e6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800

08002098 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08c      	sub	sp, #48	; 0x30
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 031c 	add.w	r3, r7, #28
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a5d      	ldr	r2, [pc, #372]	; (800222c <HAL_ADC_MspInit+0x194>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d157      	bne.n	800216a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	4b5c      	ldr	r3, [pc, #368]	; (8002230 <HAL_ADC_MspInit+0x198>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	4a5b      	ldr	r2, [pc, #364]	; (8002230 <HAL_ADC_MspInit+0x198>)
 80020c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ca:	4b59      	ldr	r3, [pc, #356]	; (8002230 <HAL_ADC_MspInit+0x198>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d2:	61bb      	str	r3, [r7, #24]
 80020d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	4b55      	ldr	r3, [pc, #340]	; (8002230 <HAL_ADC_MspInit+0x198>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a54      	ldr	r2, [pc, #336]	; (8002230 <HAL_ADC_MspInit+0x198>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b52      	ldr	r3, [pc, #328]	; (8002230 <HAL_ADC_MspInit+0x198>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020f2:	2301      	movs	r3, #1
 80020f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020f6:	2303      	movs	r3, #3
 80020f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fe:	f107 031c 	add.w	r3, r7, #28
 8002102:	4619      	mov	r1, r3
 8002104:	484b      	ldr	r0, [pc, #300]	; (8002234 <HAL_ADC_MspInit+0x19c>)
 8002106:	f002 f9c5 	bl	8004494 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800210a:	4b4b      	ldr	r3, [pc, #300]	; (8002238 <HAL_ADC_MspInit+0x1a0>)
 800210c:	4a4b      	ldr	r2, [pc, #300]	; (800223c <HAL_ADC_MspInit+0x1a4>)
 800210e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002110:	4b49      	ldr	r3, [pc, #292]	; (8002238 <HAL_ADC_MspInit+0x1a0>)
 8002112:	2200      	movs	r2, #0
 8002114:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002116:	4b48      	ldr	r3, [pc, #288]	; (8002238 <HAL_ADC_MspInit+0x1a0>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800211c:	4b46      	ldr	r3, [pc, #280]	; (8002238 <HAL_ADC_MspInit+0x1a0>)
 800211e:	2200      	movs	r2, #0
 8002120:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002122:	4b45      	ldr	r3, [pc, #276]	; (8002238 <HAL_ADC_MspInit+0x1a0>)
 8002124:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002128:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800212a:	4b43      	ldr	r3, [pc, #268]	; (8002238 <HAL_ADC_MspInit+0x1a0>)
 800212c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002130:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002132:	4b41      	ldr	r3, [pc, #260]	; (8002238 <HAL_ADC_MspInit+0x1a0>)
 8002134:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002138:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800213a:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <HAL_ADC_MspInit+0x1a0>)
 800213c:	2200      	movs	r2, #0
 800213e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002140:	4b3d      	ldr	r3, [pc, #244]	; (8002238 <HAL_ADC_MspInit+0x1a0>)
 8002142:	2200      	movs	r2, #0
 8002144:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002146:	4b3c      	ldr	r3, [pc, #240]	; (8002238 <HAL_ADC_MspInit+0x1a0>)
 8002148:	2200      	movs	r2, #0
 800214a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800214c:	483a      	ldr	r0, [pc, #232]	; (8002238 <HAL_ADC_MspInit+0x1a0>)
 800214e:	f001 feb7 	bl	8003ec0 <HAL_DMA_Init>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002158:	f7ff ff6d 	bl	8002036 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a36      	ldr	r2, [pc, #216]	; (8002238 <HAL_ADC_MspInit+0x1a0>)
 8002160:	639a      	str	r2, [r3, #56]	; 0x38
 8002162:	4a35      	ldr	r2, [pc, #212]	; (8002238 <HAL_ADC_MspInit+0x1a0>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002168:	e05c      	b.n	8002224 <HAL_ADC_MspInit+0x18c>
  else if(hadc->Instance==ADC2)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a34      	ldr	r2, [pc, #208]	; (8002240 <HAL_ADC_MspInit+0x1a8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d157      	bne.n	8002224 <HAL_ADC_MspInit+0x18c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	4b2d      	ldr	r3, [pc, #180]	; (8002230 <HAL_ADC_MspInit+0x198>)
 800217a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217c:	4a2c      	ldr	r2, [pc, #176]	; (8002230 <HAL_ADC_MspInit+0x198>)
 800217e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002182:	6453      	str	r3, [r2, #68]	; 0x44
 8002184:	4b2a      	ldr	r3, [pc, #168]	; (8002230 <HAL_ADC_MspInit+0x198>)
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002188:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	4b26      	ldr	r3, [pc, #152]	; (8002230 <HAL_ADC_MspInit+0x198>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	4a25      	ldr	r2, [pc, #148]	; (8002230 <HAL_ADC_MspInit+0x198>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6313      	str	r3, [r2, #48]	; 0x30
 80021a0:	4b23      	ldr	r3, [pc, #140]	; (8002230 <HAL_ADC_MspInit+0x198>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80021ac:	2302      	movs	r3, #2
 80021ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021b0:	2303      	movs	r3, #3
 80021b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b8:	f107 031c 	add.w	r3, r7, #28
 80021bc:	4619      	mov	r1, r3
 80021be:	481d      	ldr	r0, [pc, #116]	; (8002234 <HAL_ADC_MspInit+0x19c>)
 80021c0:	f002 f968 	bl	8004494 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80021c4:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <HAL_ADC_MspInit+0x1ac>)
 80021c6:	4a20      	ldr	r2, [pc, #128]	; (8002248 <HAL_ADC_MspInit+0x1b0>)
 80021c8:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80021ca:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <HAL_ADC_MspInit+0x1ac>)
 80021cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021d0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021d2:	4b1c      	ldr	r3, [pc, #112]	; (8002244 <HAL_ADC_MspInit+0x1ac>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80021d8:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <HAL_ADC_MspInit+0x1ac>)
 80021da:	2200      	movs	r2, #0
 80021dc:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80021de:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_ADC_MspInit+0x1ac>)
 80021e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021e4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021e6:	4b17      	ldr	r3, [pc, #92]	; (8002244 <HAL_ADC_MspInit+0x1ac>)
 80021e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021ec:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <HAL_ADC_MspInit+0x1ac>)
 80021f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021f4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <HAL_ADC_MspInit+0x1ac>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <HAL_ADC_MspInit+0x1ac>)
 80021fe:	2200      	movs	r2, #0
 8002200:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <HAL_ADC_MspInit+0x1ac>)
 8002204:	2200      	movs	r2, #0
 8002206:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002208:	480e      	ldr	r0, [pc, #56]	; (8002244 <HAL_ADC_MspInit+0x1ac>)
 800220a:	f001 fe59 	bl	8003ec0 <HAL_DMA_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_ADC_MspInit+0x180>
      Error_Handler();
 8002214:	f7ff ff0f 	bl	8002036 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <HAL_ADC_MspInit+0x1ac>)
 800221c:	639a      	str	r2, [r3, #56]	; 0x38
 800221e:	4a09      	ldr	r2, [pc, #36]	; (8002244 <HAL_ADC_MspInit+0x1ac>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002224:	bf00      	nop
 8002226:	3730      	adds	r7, #48	; 0x30
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40012000 	.word	0x40012000
 8002230:	40023800 	.word	0x40023800
 8002234:	40020000 	.word	0x40020000
 8002238:	200003fc 	.word	0x200003fc
 800223c:	40026410 	.word	0x40026410
 8002240:	40012100 	.word	0x40012100
 8002244:	2000045c 	.word	0x2000045c
 8002248:	40026440 	.word	0x40026440

0800224c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	; 0x28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a1d      	ldr	r2, [pc, #116]	; (80022e0 <HAL_CAN_MspInit+0x94>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d134      	bne.n	80022d8 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <HAL_CAN_MspInit+0x98>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	4a1b      	ldr	r2, [pc, #108]	; (80022e4 <HAL_CAN_MspInit+0x98>)
 8002278:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800227c:	6413      	str	r3, [r2, #64]	; 0x40
 800227e:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <HAL_CAN_MspInit+0x98>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <HAL_CAN_MspInit+0x98>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	4a14      	ldr	r2, [pc, #80]	; (80022e4 <HAL_CAN_MspInit+0x98>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6313      	str	r3, [r2, #48]	; 0x30
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_CAN_MspInit+0x98>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80022a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80022aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ac:	2302      	movs	r3, #2
 80022ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b4:	2303      	movs	r3, #3
 80022b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80022b8:	2309      	movs	r3, #9
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	4619      	mov	r1, r3
 80022c2:	4809      	ldr	r0, [pc, #36]	; (80022e8 <HAL_CAN_MspInit+0x9c>)
 80022c4:	f002 f8e6 	bl	8004494 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80022c8:	2200      	movs	r2, #0
 80022ca:	2105      	movs	r1, #5
 80022cc:	2014      	movs	r0, #20
 80022ce:	f001 fdcd 	bl	8003e6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80022d2:	2014      	movs	r0, #20
 80022d4:	f001 fde6 	bl	8003ea4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80022d8:	bf00      	nop
 80022da:	3728      	adds	r7, #40	; 0x28
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40006400 	.word	0x40006400
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40020000 	.word	0x40020000

080022ec <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 0314 	add.w	r3, r7, #20
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a1d      	ldr	r2, [pc, #116]	; (8002380 <HAL_TIM_IC_MspInit+0x94>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d134      	bne.n	8002378 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <HAL_TIM_IC_MspInit+0x98>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	4a1b      	ldr	r2, [pc, #108]	; (8002384 <HAL_TIM_IC_MspInit+0x98>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6453      	str	r3, [r2, #68]	; 0x44
 800231e:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_TIM_IC_MspInit+0x98>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	4b15      	ldr	r3, [pc, #84]	; (8002384 <HAL_TIM_IC_MspInit+0x98>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a14      	ldr	r2, [pc, #80]	; (8002384 <HAL_TIM_IC_MspInit+0x98>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_TIM_IC_MspInit+0x98>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 8002346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800234a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234c:	2302      	movs	r3, #2
 800234e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002354:	2300      	movs	r3, #0
 8002356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002358:	2301      	movs	r3, #1
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	4619      	mov	r1, r3
 8002362:	4809      	ldr	r0, [pc, #36]	; (8002388 <HAL_TIM_IC_MspInit+0x9c>)
 8002364:	f002 f896 	bl	8004494 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002368:	2200      	movs	r2, #0
 800236a:	2105      	movs	r1, #5
 800236c:	201b      	movs	r0, #27
 800236e:	f001 fd7d 	bl	8003e6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002372:	201b      	movs	r0, #27
 8002374:	f001 fd96 	bl	8003ea4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002378:	bf00      	nop
 800237a:	3728      	adds	r7, #40	; 0x28
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40010000 	.word	0x40010000
 8002384:	40023800 	.word	0x40023800
 8002388:	40020000 	.word	0x40020000

0800238c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a1c      	ldr	r2, [pc, #112]	; (800240c <HAL_TIM_Base_MspInit+0x80>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d116      	bne.n	80023cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <HAL_TIM_Base_MspInit+0x84>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	4a1a      	ldr	r2, [pc, #104]	; (8002410 <HAL_TIM_Base_MspInit+0x84>)
 80023a8:	f043 0302 	orr.w	r3, r3, #2
 80023ac:	6413      	str	r3, [r2, #64]	; 0x40
 80023ae:	4b18      	ldr	r3, [pc, #96]	; (8002410 <HAL_TIM_Base_MspInit+0x84>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80023ba:	2200      	movs	r2, #0
 80023bc:	2105      	movs	r1, #5
 80023be:	201d      	movs	r0, #29
 80023c0:	f001 fd54 	bl	8003e6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023c4:	201d      	movs	r0, #29
 80023c6:	f001 fd6d 	bl	8003ea4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80023ca:	e01a      	b.n	8002402 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a10      	ldr	r2, [pc, #64]	; (8002414 <HAL_TIM_Base_MspInit+0x88>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d115      	bne.n	8002402 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <HAL_TIM_Base_MspInit+0x84>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	4a0c      	ldr	r2, [pc, #48]	; (8002410 <HAL_TIM_Base_MspInit+0x84>)
 80023e0:	f043 0304 	orr.w	r3, r3, #4
 80023e4:	6413      	str	r3, [r2, #64]	; 0x40
 80023e6:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <HAL_TIM_Base_MspInit+0x84>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2105      	movs	r1, #5
 80023f6:	201e      	movs	r0, #30
 80023f8:	f001 fd38 	bl	8003e6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80023fc:	201e      	movs	r0, #30
 80023fe:	f001 fd51 	bl	8003ea4 <HAL_NVIC_EnableIRQ>
}
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40000400 	.word	0x40000400
 8002410:	40023800 	.word	0x40023800
 8002414:	40000800 	.word	0x40000800

08002418 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	; 0x28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a24      	ldr	r2, [pc, #144]	; (80024c8 <HAL_TIM_MspPostInit+0xb0>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d11e      	bne.n	8002478 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	4b23      	ldr	r3, [pc, #140]	; (80024cc <HAL_TIM_MspPostInit+0xb4>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a22      	ldr	r2, [pc, #136]	; (80024cc <HAL_TIM_MspPostInit+0xb4>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b20      	ldr	r3, [pc, #128]	; (80024cc <HAL_TIM_MspPostInit+0xb4>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002456:	2340      	movs	r3, #64	; 0x40
 8002458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245a:	2302      	movs	r3, #2
 800245c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002462:	2300      	movs	r3, #0
 8002464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002466:	2302      	movs	r3, #2
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246a:	f107 0314 	add.w	r3, r7, #20
 800246e:	4619      	mov	r1, r3
 8002470:	4817      	ldr	r0, [pc, #92]	; (80024d0 <HAL_TIM_MspPostInit+0xb8>)
 8002472:	f002 f80f 	bl	8004494 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002476:	e022      	b.n	80024be <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a15      	ldr	r2, [pc, #84]	; (80024d4 <HAL_TIM_MspPostInit+0xbc>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d11d      	bne.n	80024be <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	4b11      	ldr	r3, [pc, #68]	; (80024cc <HAL_TIM_MspPostInit+0xb4>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a10      	ldr	r2, [pc, #64]	; (80024cc <HAL_TIM_MspPostInit+0xb4>)
 800248c:	f043 0302 	orr.w	r3, r3, #2
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <HAL_TIM_MspPostInit+0xb4>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a2:	2302      	movs	r3, #2
 80024a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024aa:	2300      	movs	r3, #0
 80024ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024ae:	2302      	movs	r3, #2
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b2:	f107 0314 	add.w	r3, r7, #20
 80024b6:	4619      	mov	r1, r3
 80024b8:	4807      	ldr	r0, [pc, #28]	; (80024d8 <HAL_TIM_MspPostInit+0xc0>)
 80024ba:	f001 ffeb 	bl	8004494 <HAL_GPIO_Init>
}
 80024be:	bf00      	nop
 80024c0:	3728      	adds	r7, #40	; 0x28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40000400 	.word	0x40000400
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40020000 	.word	0x40020000
 80024d4:	40000800 	.word	0x40000800
 80024d8:	40020400 	.word	0x40020400

080024dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	; 0x28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
 80024f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a19      	ldr	r2, [pc, #100]	; (8002560 <HAL_UART_MspInit+0x84>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d12b      	bne.n	8002556 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	4b18      	ldr	r3, [pc, #96]	; (8002564 <HAL_UART_MspInit+0x88>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	4a17      	ldr	r2, [pc, #92]	; (8002564 <HAL_UART_MspInit+0x88>)
 8002508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800250c:	6413      	str	r3, [r2, #64]	; 0x40
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <HAL_UART_MspInit+0x88>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_UART_MspInit+0x88>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4a10      	ldr	r2, [pc, #64]	; (8002564 <HAL_UART_MspInit+0x88>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <HAL_UART_MspInit+0x88>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002536:	230c      	movs	r3, #12
 8002538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253a:	2302      	movs	r3, #2
 800253c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002542:	2303      	movs	r3, #3
 8002544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002546:	2307      	movs	r3, #7
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254a:	f107 0314 	add.w	r3, r7, #20
 800254e:	4619      	mov	r1, r3
 8002550:	4805      	ldr	r0, [pc, #20]	; (8002568 <HAL_UART_MspInit+0x8c>)
 8002552:	f001 ff9f 	bl	8004494 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002556:	bf00      	nop
 8002558:	3728      	adds	r7, #40	; 0x28
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40004400 	.word	0x40004400
 8002564:	40023800 	.word	0x40023800
 8002568:	40020000 	.word	0x40020000

0800256c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08e      	sub	sp, #56	; 0x38
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	4b34      	ldr	r3, [pc, #208]	; (8002654 <HAL_InitTick+0xe8>)
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	4a33      	ldr	r2, [pc, #204]	; (8002654 <HAL_InitTick+0xe8>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6413      	str	r3, [r2, #64]	; 0x40
 800258c:	4b31      	ldr	r3, [pc, #196]	; (8002654 <HAL_InitTick+0xe8>)
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002598:	f107 0210 	add.w	r2, r7, #16
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	4611      	mov	r1, r2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f002 faa6 	bl	8004af4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80025ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d103      	bne.n	80025ba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80025b2:	f002 fa77 	bl	8004aa4 <HAL_RCC_GetPCLK1Freq>
 80025b6:	6378      	str	r0, [r7, #52]	; 0x34
 80025b8:	e004      	b.n	80025c4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80025ba:	f002 fa73 	bl	8004aa4 <HAL_RCC_GetPCLK1Freq>
 80025be:	4603      	mov	r3, r0
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c6:	4a24      	ldr	r2, [pc, #144]	; (8002658 <HAL_InitTick+0xec>)
 80025c8:	fba2 2303 	umull	r2, r3, r2, r3
 80025cc:	0c9b      	lsrs	r3, r3, #18
 80025ce:	3b01      	subs	r3, #1
 80025d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80025d2:	4b22      	ldr	r3, [pc, #136]	; (800265c <HAL_InitTick+0xf0>)
 80025d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <HAL_InitTick+0xf0>)
 80025dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025e0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80025e2:	4a1e      	ldr	r2, [pc, #120]	; (800265c <HAL_InitTick+0xf0>)
 80025e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80025e8:	4b1c      	ldr	r3, [pc, #112]	; (800265c <HAL_InitTick+0xf0>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ee:	4b1b      	ldr	r3, [pc, #108]	; (800265c <HAL_InitTick+0xf0>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f4:	4b19      	ldr	r3, [pc, #100]	; (800265c <HAL_InitTick+0xf0>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80025fa:	4818      	ldr	r0, [pc, #96]	; (800265c <HAL_InitTick+0xf0>)
 80025fc:	f002 fef4 	bl	80053e8 <HAL_TIM_Base_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002606:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800260a:	2b00      	cmp	r3, #0
 800260c:	d11b      	bne.n	8002646 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800260e:	4813      	ldr	r0, [pc, #76]	; (800265c <HAL_InitTick+0xf0>)
 8002610:	f002 ff3a 	bl	8005488 <HAL_TIM_Base_Start_IT>
 8002614:	4603      	mov	r3, r0
 8002616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800261a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800261e:	2b00      	cmp	r3, #0
 8002620:	d111      	bne.n	8002646 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002622:	201c      	movs	r0, #28
 8002624:	f001 fc3e 	bl	8003ea4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b0f      	cmp	r3, #15
 800262c:	d808      	bhi.n	8002640 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800262e:	2200      	movs	r2, #0
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	201c      	movs	r0, #28
 8002634:	f001 fc1a 	bl	8003e6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002638:	4a09      	ldr	r2, [pc, #36]	; (8002660 <HAL_InitTick+0xf4>)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e002      	b.n	8002646 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002646:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800264a:	4618      	mov	r0, r3
 800264c:	3738      	adds	r7, #56	; 0x38
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800
 8002658:	431bde83 	.word	0x431bde83
 800265c:	200006dc 	.word	0x200006dc
 8002660:	2000002c 	.word	0x2000002c

08002664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002668:	e7fe      	b.n	8002668 <NMI_Handler+0x4>

0800266a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800266e:	e7fe      	b.n	800266e <HardFault_Handler+0x4>

08002670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002674:	e7fe      	b.n	8002674 <MemManage_Handler+0x4>

08002676 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800267a:	e7fe      	b.n	800267a <BusFault_Handler+0x4>

0800267c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002680:	e7fe      	b.n	8002680 <UsageFault_Handler+0x4>

08002682 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002694:	4802      	ldr	r0, [pc, #8]	; (80026a0 <CAN1_RX0_IRQHandler+0x10>)
 8002696:	f001 f902 	bl	800389e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	200004bc 	.word	0x200004bc

080026a4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <TIM1_CC_IRQHandler+0x10>)
 80026aa:	f003 f9f7 	bl	8005a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	200004e4 	.word	0x200004e4

080026b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <TIM2_IRQHandler+0x10>)
 80026be:	f003 f9ed 	bl	8005a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	200006dc 	.word	0x200006dc

080026cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026d0:	4802      	ldr	r0, [pc, #8]	; (80026dc <TIM3_IRQHandler+0x10>)
 80026d2:	f003 f9e3 	bl	8005a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	2000052c 	.word	0x2000052c

080026e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80026e4:	4802      	ldr	r0, [pc, #8]	; (80026f0 <TIM4_IRQHandler+0x10>)
 80026e6:	f003 f9d9 	bl	8005a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000574 	.word	0x20000574

080026f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026f8:	4802      	ldr	r0, [pc, #8]	; (8002704 <DMA2_Stream0_IRQHandler+0x10>)
 80026fa:	f001 fc8f 	bl	800401c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	200003fc 	.word	0x200003fc

08002708 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800270c:	4802      	ldr	r0, [pc, #8]	; (8002718 <DMA2_Stream2_IRQHandler+0x10>)
 800270e:	f001 fc85 	bl	800401c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	2000045c 	.word	0x2000045c

0800271c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <SystemInit+0x20>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002726:	4a05      	ldr	r2, [pc, #20]	; (800273c <SystemInit+0x20>)
 8002728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800272c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002778 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002744:	480d      	ldr	r0, [pc, #52]	; (800277c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002746:	490e      	ldr	r1, [pc, #56]	; (8002780 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002748:	4a0e      	ldr	r2, [pc, #56]	; (8002784 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800274a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800274c:	e002      	b.n	8002754 <LoopCopyDataInit>

0800274e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800274e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002752:	3304      	adds	r3, #4

08002754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002758:	d3f9      	bcc.n	800274e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800275a:	4a0b      	ldr	r2, [pc, #44]	; (8002788 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800275c:	4c0b      	ldr	r4, [pc, #44]	; (800278c <LoopFillZerobss+0x26>)
  movs r3, #0
 800275e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002760:	e001      	b.n	8002766 <LoopFillZerobss>

08002762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002764:	3204      	adds	r2, #4

08002766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002768:	d3fb      	bcc.n	8002762 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800276a:	f7ff ffd7 	bl	800271c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800276e:	f00a f87d 	bl	800c86c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002772:	f7fe fc5b 	bl	800102c <main>
  bx  lr    
 8002776:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002778:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800277c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002780:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002784:	0800cf0c 	.word	0x0800cf0c
  ldr r2, =_sbss
 8002788:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 800278c:	20004484 	.word	0x20004484

08002790 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002790:	e7fe      	b.n	8002790 <ADC_IRQHandler>
	...

08002794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002798:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <HAL_Init+0x40>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0d      	ldr	r2, [pc, #52]	; (80027d4 <HAL_Init+0x40>)
 800279e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_Init+0x40>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <HAL_Init+0x40>)
 80027aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027b0:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <HAL_Init+0x40>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a07      	ldr	r2, [pc, #28]	; (80027d4 <HAL_Init+0x40>)
 80027b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027bc:	2003      	movs	r0, #3
 80027be:	f001 fb4a 	bl	8003e56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027c2:	200f      	movs	r0, #15
 80027c4:	f7ff fed2 	bl	800256c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027c8:	f7ff fc3a 	bl	8002040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023c00 	.word	0x40023c00

080027d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_IncTick+0x20>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_IncTick+0x24>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4413      	add	r3, r2
 80027e8:	4a04      	ldr	r2, [pc, #16]	; (80027fc <HAL_IncTick+0x24>)
 80027ea:	6013      	str	r3, [r2, #0]
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000030 	.word	0x20000030
 80027fc:	20000724 	.word	0x20000724

08002800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return uwTick;
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <HAL_GetTick+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	20000724 	.word	0x20000724

08002818 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e033      	b.n	8002896 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff fc2e 	bl	8002098 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b00      	cmp	r3, #0
 8002854:	d118      	bne.n	8002888 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800285e:	f023 0302 	bic.w	r3, r3, #2
 8002862:	f043 0202 	orr.w	r2, r3, #2
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fae8 	bl	8002e40 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f023 0303 	bic.w	r3, r3, #3
 800287e:	f043 0201 	orr.w	r2, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	641a      	str	r2, [r3, #64]	; 0x40
 8002886:	e001      	b.n	800288c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002894:	7bfb      	ldrb	r3, [r7, #15]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_ADC_Start+0x1a>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e0b2      	b.n	8002a20 <HAL_ADC_Start+0x180>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d018      	beq.n	8002902 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028e0:	4b52      	ldr	r3, [pc, #328]	; (8002a2c <HAL_ADC_Start+0x18c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a52      	ldr	r2, [pc, #328]	; (8002a30 <HAL_ADC_Start+0x190>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	0c9a      	lsrs	r2, r3, #18
 80028ec:	4613      	mov	r3, r2
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	4413      	add	r3, r2
 80028f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80028f4:	e002      	b.n	80028fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	3b01      	subs	r3, #1
 80028fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f9      	bne.n	80028f6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b01      	cmp	r3, #1
 800290e:	d17a      	bne.n	8002a06 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002918:	f023 0301 	bic.w	r3, r3, #1
 800291c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292e:	2b00      	cmp	r3, #0
 8002930:	d007      	beq.n	8002942 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800293a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800294a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800294e:	d106      	bne.n	800295e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002954:	f023 0206 	bic.w	r2, r3, #6
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	645a      	str	r2, [r3, #68]	; 0x44
 800295c:	e002      	b.n	8002964 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800296c:	4b31      	ldr	r3, [pc, #196]	; (8002a34 <HAL_ADC_Start+0x194>)
 800296e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002978:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	2b00      	cmp	r3, #0
 8002984:	d12a      	bne.n	80029dc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a2b      	ldr	r2, [pc, #172]	; (8002a38 <HAL_ADC_Start+0x198>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d015      	beq.n	80029bc <HAL_ADC_Start+0x11c>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a29      	ldr	r2, [pc, #164]	; (8002a3c <HAL_ADC_Start+0x19c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d105      	bne.n	80029a6 <HAL_ADC_Start+0x106>
 800299a:	4b26      	ldr	r3, [pc, #152]	; (8002a34 <HAL_ADC_Start+0x194>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 031f 	and.w	r3, r3, #31
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00a      	beq.n	80029bc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a25      	ldr	r2, [pc, #148]	; (8002a40 <HAL_ADC_Start+0x1a0>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d136      	bne.n	8002a1e <HAL_ADC_Start+0x17e>
 80029b0:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <HAL_ADC_Start+0x194>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d130      	bne.n	8002a1e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d129      	bne.n	8002a1e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	e020      	b.n	8002a1e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a15      	ldr	r2, [pc, #84]	; (8002a38 <HAL_ADC_Start+0x198>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d11b      	bne.n	8002a1e <HAL_ADC_Start+0x17e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d114      	bne.n	8002a1e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	e00b      	b.n	8002a1e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f043 0210 	orr.w	r2, r3, #16
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	f043 0201 	orr.w	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	20000028 	.word	0x20000028
 8002a30:	431bde83 	.word	0x431bde83
 8002a34:	40012300 	.word	0x40012300
 8002a38:	40012000 	.word	0x40012000
 8002a3c:	40012100 	.word	0x40012100
 8002a40:	40012200 	.word	0x40012200

08002a44 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_ADC_Stop+0x16>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e021      	b.n	8002a9e <HAL_ADC_Stop+0x5a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0201 	bic.w	r2, r2, #1
 8002a70:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d109      	bne.n	8002a94 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a88:	f023 0301 	bic.w	r3, r3, #1
 8002a8c:	f043 0201 	orr.w	r2, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac6:	d113      	bne.n	8002af0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad6:	d10b      	bne.n	8002af0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	f043 0220 	orr.w	r2, r3, #32
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e063      	b.n	8002bb8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002af0:	f7ff fe86 	bl	8002800 <HAL_GetTick>
 8002af4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002af6:	e021      	b.n	8002b3c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002afe:	d01d      	beq.n	8002b3c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d007      	beq.n	8002b16 <HAL_ADC_PollForConversion+0x6c>
 8002b06:	f7ff fe7b 	bl	8002800 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d212      	bcs.n	8002b3c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d00b      	beq.n	8002b3c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	f043 0204 	orr.w	r2, r3, #4
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e03d      	b.n	8002bb8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d1d6      	bne.n	8002af8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f06f 0212 	mvn.w	r2, #18
 8002b52:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d123      	bne.n	8002bb6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d11f      	bne.n	8002bb6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d006      	beq.n	8002b92 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d111      	bne.n	8002bb6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d105      	bne.n	8002bb6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f043 0201 	orr.w	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x1c>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e113      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x244>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b09      	cmp	r3, #9
 8002c06:	d925      	bls.n	8002c54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68d9      	ldr	r1, [r3, #12]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	4613      	mov	r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3b1e      	subs	r3, #30
 8002c1e:	2207      	movs	r2, #7
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43da      	mvns	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	400a      	ands	r2, r1
 8002c2c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68d9      	ldr	r1, [r3, #12]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	4618      	mov	r0, r3
 8002c40:	4603      	mov	r3, r0
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	4403      	add	r3, r0
 8002c46:	3b1e      	subs	r3, #30
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	e022      	b.n	8002c9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6919      	ldr	r1, [r3, #16]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	461a      	mov	r2, r3
 8002c62:	4613      	mov	r3, r2
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	4413      	add	r3, r2
 8002c68:	2207      	movs	r2, #7
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43da      	mvns	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	400a      	ands	r2, r1
 8002c76:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6919      	ldr	r1, [r3, #16]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	4618      	mov	r0, r3
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	4403      	add	r3, r0
 8002c90:	409a      	lsls	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b06      	cmp	r3, #6
 8002ca0:	d824      	bhi.n	8002cec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3b05      	subs	r3, #5
 8002cb4:	221f      	movs	r2, #31
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	400a      	ands	r2, r1
 8002cc2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	3b05      	subs	r3, #5
 8002cde:	fa00 f203 	lsl.w	r2, r0, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	635a      	str	r2, [r3, #52]	; 0x34
 8002cea:	e04c      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b0c      	cmp	r3, #12
 8002cf2:	d824      	bhi.n	8002d3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	3b23      	subs	r3, #35	; 0x23
 8002d06:	221f      	movs	r2, #31
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43da      	mvns	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	400a      	ands	r2, r1
 8002d14:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	4618      	mov	r0, r3
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3b23      	subs	r3, #35	; 0x23
 8002d30:	fa00 f203 	lsl.w	r2, r0, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d3c:	e023      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3b41      	subs	r3, #65	; 0x41
 8002d50:	221f      	movs	r2, #31
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43da      	mvns	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	400a      	ands	r2, r1
 8002d5e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	3b41      	subs	r3, #65	; 0x41
 8002d7a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d86:	4b29      	ldr	r3, [pc, #164]	; (8002e2c <HAL_ADC_ConfigChannel+0x250>)
 8002d88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a28      	ldr	r2, [pc, #160]	; (8002e30 <HAL_ADC_ConfigChannel+0x254>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d10f      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x1d8>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b12      	cmp	r3, #18
 8002d9a:	d10b      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a1d      	ldr	r2, [pc, #116]	; (8002e30 <HAL_ADC_ConfigChannel+0x254>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d12b      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x23a>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a1c      	ldr	r2, [pc, #112]	; (8002e34 <HAL_ADC_ConfigChannel+0x258>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d003      	beq.n	8002dd0 <HAL_ADC_ConfigChannel+0x1f4>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b11      	cmp	r3, #17
 8002dce:	d122      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a11      	ldr	r2, [pc, #68]	; (8002e34 <HAL_ADC_ConfigChannel+0x258>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d111      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002df2:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <HAL_ADC_ConfigChannel+0x25c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a11      	ldr	r2, [pc, #68]	; (8002e3c <HAL_ADC_ConfigChannel+0x260>)
 8002df8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfc:	0c9a      	lsrs	r2, r3, #18
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e08:	e002      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f9      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	40012300 	.word	0x40012300
 8002e30:	40012000 	.word	0x40012000
 8002e34:	10000012 	.word	0x10000012
 8002e38:	20000028 	.word	0x20000028
 8002e3c:	431bde83 	.word	0x431bde83

08002e40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e48:	4b79      	ldr	r3, [pc, #484]	; (8003030 <ADC_Init+0x1f0>)
 8002e4a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	431a      	orrs	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6859      	ldr	r1, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	021a      	lsls	r2, r3, #8
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6859      	ldr	r1, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6899      	ldr	r1, [r3, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed2:	4a58      	ldr	r2, [pc, #352]	; (8003034 <ADC_Init+0x1f4>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d022      	beq.n	8002f1e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ee6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6899      	ldr	r1, [r3, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6899      	ldr	r1, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	e00f      	b.n	8002f3e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0202 	bic.w	r2, r2, #2
 8002f4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6899      	ldr	r1, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	7e1b      	ldrb	r3, [r3, #24]
 8002f58:	005a      	lsls	r2, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d01b      	beq.n	8002fa4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f7a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f8a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6859      	ldr	r1, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	3b01      	subs	r3, #1
 8002f98:	035a      	lsls	r2, r3, #13
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	e007      	b.n	8002fb4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	051a      	lsls	r2, r3, #20
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fe8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6899      	ldr	r1, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ff6:	025a      	lsls	r2, r3, #9
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800300e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6899      	ldr	r1, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	029a      	lsls	r2, r3, #10
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	609a      	str	r2, [r3, #8]
}
 8003024:	bf00      	nop
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	40012300 	.word	0x40012300
 8003034:	0f000001 	.word	0x0f000001

08003038 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e0ed      	b.n	8003226 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d102      	bne.n	800305c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff f8f8 	bl	800224c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800306c:	f7ff fbc8 	bl	8002800 <HAL_GetTick>
 8003070:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003072:	e012      	b.n	800309a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003074:	f7ff fbc4 	bl	8002800 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b0a      	cmp	r3, #10
 8003080:	d90b      	bls.n	800309a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2205      	movs	r2, #5
 8003092:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e0c5      	b.n	8003226 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0e5      	beq.n	8003074 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0202 	bic.w	r2, r2, #2
 80030b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030b8:	f7ff fba2 	bl	8002800 <HAL_GetTick>
 80030bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030be:	e012      	b.n	80030e6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030c0:	f7ff fb9e 	bl	8002800 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b0a      	cmp	r3, #10
 80030cc:	d90b      	bls.n	80030e6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2205      	movs	r2, #5
 80030de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e09f      	b.n	8003226 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1e5      	bne.n	80030c0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	7e1b      	ldrb	r3, [r3, #24]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d108      	bne.n	800310e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	e007      	b.n	800311e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800311c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	7e5b      	ldrb	r3, [r3, #25]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d108      	bne.n	8003138 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	e007      	b.n	8003148 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003146:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	7e9b      	ldrb	r3, [r3, #26]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d108      	bne.n	8003162 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0220 	orr.w	r2, r2, #32
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	e007      	b.n	8003172 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0220 	bic.w	r2, r2, #32
 8003170:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	7edb      	ldrb	r3, [r3, #27]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d108      	bne.n	800318c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0210 	bic.w	r2, r2, #16
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	e007      	b.n	800319c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0210 	orr.w	r2, r2, #16
 800319a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	7f1b      	ldrb	r3, [r3, #28]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d108      	bne.n	80031b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0208 	orr.w	r2, r2, #8
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	e007      	b.n	80031c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0208 	bic.w	r2, r2, #8
 80031c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	7f5b      	ldrb	r3, [r3, #29]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d108      	bne.n	80031e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f042 0204 	orr.w	r2, r2, #4
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	e007      	b.n	80031f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0204 	bic.w	r2, r2, #4
 80031ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	ea42 0103 	orr.w	r1, r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	1e5a      	subs	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003246:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003248:	7cfb      	ldrb	r3, [r7, #19]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d003      	beq.n	8003256 <HAL_CAN_ConfigFilter+0x26>
 800324e:	7cfb      	ldrb	r3, [r7, #19]
 8003250:	2b02      	cmp	r3, #2
 8003252:	f040 80be 	bne.w	80033d2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003256:	4b65      	ldr	r3, [pc, #404]	; (80033ec <HAL_CAN_ConfigFilter+0x1bc>)
 8003258:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003260:	f043 0201 	orr.w	r2, r3, #1
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003270:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	021b      	lsls	r3, r3, #8
 8003286:	431a      	orrs	r2, r3
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	f003 031f 	and.w	r3, r3, #31
 8003296:	2201      	movs	r2, #1
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	43db      	mvns	r3, r3
 80032a8:	401a      	ands	r2, r3
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d123      	bne.n	8003300 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	401a      	ands	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80032da:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	3248      	adds	r2, #72	; 0x48
 80032e0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032f4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032f6:	6979      	ldr	r1, [r7, #20]
 80032f8:	3348      	adds	r3, #72	; 0x48
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	440b      	add	r3, r1
 80032fe:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d122      	bne.n	800334e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	431a      	orrs	r2, r3
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003328:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	3248      	adds	r2, #72	; 0x48
 800332e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003342:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003344:	6979      	ldr	r1, [r7, #20]
 8003346:	3348      	adds	r3, #72	; 0x48
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	440b      	add	r3, r1
 800334c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d109      	bne.n	800336a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	43db      	mvns	r3, r3
 8003360:	401a      	ands	r2, r3
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003368:	e007      	b.n	800337a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	431a      	orrs	r2, r3
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d109      	bne.n	8003396 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	43db      	mvns	r3, r3
 800338c:	401a      	ands	r2, r3
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003394:	e007      	b.n	80033a6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	431a      	orrs	r2, r3
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d107      	bne.n	80033be <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033c4:	f023 0201 	bic.w	r2, r3, #1
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	e006      	b.n	80033e0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
  }
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	371c      	adds	r7, #28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	40006400 	.word	0x40006400

080033f0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	d12e      	bne.n	8003462 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800341c:	f7ff f9f0 	bl	8002800 <HAL_GetTick>
 8003420:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003422:	e012      	b.n	800344a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003424:	f7ff f9ec 	bl	8002800 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b0a      	cmp	r3, #10
 8003430:	d90b      	bls.n	800344a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2205      	movs	r2, #5
 8003442:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e012      	b.n	8003470 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e5      	bne.n	8003424 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	e006      	b.n	8003470 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
  }
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003478:	b480      	push	{r7}
 800347a:	b089      	sub	sp, #36	; 0x24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 3020 	ldrb.w	r3, [r3, #32]
 800348c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003496:	7ffb      	ldrb	r3, [r7, #31]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d003      	beq.n	80034a4 <HAL_CAN_AddTxMessage+0x2c>
 800349c:	7ffb      	ldrb	r3, [r7, #31]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	f040 80b8 	bne.w	8003614 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10a      	bne.n	80034c4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d105      	bne.n	80034c4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80a0 	beq.w	8003604 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	0e1b      	lsrs	r3, r3, #24
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d907      	bls.n	80034e4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e09e      	b.n	8003622 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80034e4:	2201      	movs	r2, #1
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	409a      	lsls	r2, r3
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10d      	bne.n	8003512 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003500:	68f9      	ldr	r1, [r7, #12]
 8003502:	6809      	ldr	r1, [r1, #0]
 8003504:	431a      	orrs	r2, r3
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	3318      	adds	r3, #24
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	440b      	add	r3, r1
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	e00f      	b.n	8003532 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800351c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003522:	68f9      	ldr	r1, [r7, #12]
 8003524:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003526:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	3318      	adds	r3, #24
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	440b      	add	r3, r1
 8003530:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6819      	ldr	r1, [r3, #0]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	691a      	ldr	r2, [r3, #16]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	3318      	adds	r3, #24
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	440b      	add	r3, r1
 8003542:	3304      	adds	r3, #4
 8003544:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	7d1b      	ldrb	r3, [r3, #20]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d111      	bne.n	8003572 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	3318      	adds	r3, #24
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	4413      	add	r3, r2
 800355a:	3304      	adds	r3, #4
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	6811      	ldr	r1, [r2, #0]
 8003562:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	3318      	adds	r3, #24
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	440b      	add	r3, r1
 800356e:	3304      	adds	r3, #4
 8003570:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3307      	adds	r3, #7
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	061a      	lsls	r2, r3, #24
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3306      	adds	r3, #6
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	041b      	lsls	r3, r3, #16
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3305      	adds	r3, #5
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	021b      	lsls	r3, r3, #8
 800358c:	4313      	orrs	r3, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	3204      	adds	r2, #4
 8003592:	7812      	ldrb	r2, [r2, #0]
 8003594:	4610      	mov	r0, r2
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	6811      	ldr	r1, [r2, #0]
 800359a:	ea43 0200 	orr.w	r2, r3, r0
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	440b      	add	r3, r1
 80035a4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80035a8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3303      	adds	r3, #3
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	061a      	lsls	r2, r3, #24
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3302      	adds	r3, #2
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	041b      	lsls	r3, r3, #16
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3301      	adds	r3, #1
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	021b      	lsls	r3, r3, #8
 80035c4:	4313      	orrs	r3, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	7812      	ldrb	r2, [r2, #0]
 80035ca:	4610      	mov	r0, r2
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	6811      	ldr	r1, [r2, #0]
 80035d0:	ea43 0200 	orr.w	r2, r3, r0
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	440b      	add	r3, r1
 80035da:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80035de:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	3318      	adds	r3, #24
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	4413      	add	r3, r2
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	6811      	ldr	r1, [r2, #0]
 80035f2:	f043 0201 	orr.w	r2, r3, #1
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	3318      	adds	r3, #24
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	440b      	add	r3, r1
 80035fe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	e00e      	b.n	8003622 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e006      	b.n	8003622 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
  }
}
 8003622:	4618      	mov	r0, r3
 8003624:	3724      	adds	r7, #36	; 0x24
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800362e:	b480      	push	{r7}
 8003630:	b087      	sub	sp, #28
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	607a      	str	r2, [r7, #4]
 800363a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003642:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003644:	7dfb      	ldrb	r3, [r7, #23]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d003      	beq.n	8003652 <HAL_CAN_GetRxMessage+0x24>
 800364a:	7dfb      	ldrb	r3, [r7, #23]
 800364c:	2b02      	cmp	r3, #2
 800364e:	f040 80f3 	bne.w	8003838 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10e      	bne.n	8003676 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d116      	bne.n	8003694 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e0e7      	b.n	8003846 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d107      	bne.n	8003694 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0d8      	b.n	8003846 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	331b      	adds	r3, #27
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	4413      	add	r3, r2
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0204 	and.w	r2, r3, #4
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10c      	bne.n	80036cc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	331b      	adds	r3, #27
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	4413      	add	r3, r2
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	0d5b      	lsrs	r3, r3, #21
 80036c2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	e00b      	b.n	80036e4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	331b      	adds	r3, #27
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	4413      	add	r3, r2
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	08db      	lsrs	r3, r3, #3
 80036dc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	331b      	adds	r3, #27
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	4413      	add	r3, r2
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0202 	and.w	r2, r3, #2
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	331b      	adds	r3, #27
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	4413      	add	r3, r2
 8003706:	3304      	adds	r3, #4
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 020f 	and.w	r2, r3, #15
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	331b      	adds	r3, #27
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	4413      	add	r3, r2
 800371e:	3304      	adds	r3, #4
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	0a1b      	lsrs	r3, r3, #8
 8003724:	b2da      	uxtb	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	331b      	adds	r3, #27
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	4413      	add	r3, r2
 8003736:	3304      	adds	r3, #4
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	0c1b      	lsrs	r3, r3, #16
 800373c:	b29a      	uxth	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	4413      	add	r3, r2
 800374c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	b2da      	uxtb	r2, r3
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	4413      	add	r3, r2
 8003762:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	0a1a      	lsrs	r2, r3, #8
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	3301      	adds	r3, #1
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	4413      	add	r3, r2
 800377c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	0c1a      	lsrs	r2, r3, #16
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	3302      	adds	r3, #2
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	4413      	add	r3, r2
 8003796:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	0e1a      	lsrs	r2, r3, #24
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	3303      	adds	r3, #3
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	3304      	adds	r3, #4
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	0a1a      	lsrs	r2, r3, #8
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	3305      	adds	r3, #5
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	0c1a      	lsrs	r2, r3, #16
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	3306      	adds	r3, #6
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	0e1a      	lsrs	r2, r3, #24
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	3307      	adds	r3, #7
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d108      	bne.n	8003824 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0220 	orr.w	r2, r2, #32
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	e007      	b.n	8003834 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691a      	ldr	r2, [r3, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0220 	orr.w	r2, r2, #32
 8003832:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	e006      	b.n	8003846 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
  }
}
 8003846:	4618      	mov	r0, r3
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003852:	b480      	push	{r7}
 8003854:	b085      	sub	sp, #20
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003862:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d002      	beq.n	8003870 <HAL_CAN_ActivateNotification+0x1e>
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	2b02      	cmp	r3, #2
 800386e:	d109      	bne.n	8003884 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6959      	ldr	r1, [r3, #20]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	e006      	b.n	8003892 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
  }
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b08a      	sub	sp, #40	; 0x28
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80038a6:	2300      	movs	r3, #0
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d07c      	beq.n	80039de <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d023      	beq.n	8003936 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2201      	movs	r2, #1
 80038f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f983 	bl	8003c0c <HAL_CAN_TxMailbox0CompleteCallback>
 8003906:	e016      	b.n	8003936 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	d004      	beq.n	800391c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
 800391a:	e00c      	b.n	8003936 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d004      	beq.n	8003930 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
 800392e:	e002      	b.n	8003936 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f989 	bl	8003c48 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d024      	beq.n	800398a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003948:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f963 	bl	8003c20 <HAL_CAN_TxMailbox1CompleteCallback>
 800395a:	e016      	b.n	800398a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003962:	2b00      	cmp	r3, #0
 8003964:	d004      	beq.n	8003970 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
 800396e:	e00c      	b.n	800398a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003976:	2b00      	cmp	r3, #0
 8003978:	d004      	beq.n	8003984 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
 8003982:	e002      	b.n	800398a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f969 	bl	8003c5c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d024      	beq.n	80039de <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800399c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f943 	bl	8003c34 <HAL_CAN_TxMailbox2CompleteCallback>
 80039ae:	e016      	b.n	80039de <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d004      	beq.n	80039c4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
 80039c2:	e00c      	b.n	80039de <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d004      	beq.n	80039d8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
 80039d6:	e002      	b.n	80039de <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f949 	bl	8003c70 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00c      	beq.n	8003a02 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f003 0310 	and.w	r3, r3, #16
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d007      	beq.n	8003a02 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2210      	movs	r2, #16
 8003a00:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00b      	beq.n	8003a24 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d006      	beq.n	8003a24 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2208      	movs	r2, #8
 8003a1c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f930 	bl	8003c84 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7fd fa13 	bl	8000e68 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00c      	beq.n	8003a66 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f003 0310 	and.w	r3, r3, #16
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d007      	beq.n	8003a66 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2210      	movs	r2, #16
 8003a64:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	f003 0320 	and.w	r3, r3, #32
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00b      	beq.n	8003a88 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d006      	beq.n	8003a88 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2208      	movs	r2, #8
 8003a80:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f912 	bl	8003cac <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f003 0303 	and.w	r3, r3, #3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f8f9 	bl	8003c98 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00b      	beq.n	8003ac8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f003 0310 	and.w	r3, r3, #16
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d006      	beq.n	8003ac8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2210      	movs	r2, #16
 8003ac0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f8fc 	bl	8003cc0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00b      	beq.n	8003aea <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d006      	beq.n	8003aea <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2208      	movs	r2, #8
 8003ae2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f8f5 	bl	8003cd4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d07b      	beq.n	8003bec <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d072      	beq.n	8003be4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d008      	beq.n	8003b36 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	f043 0302 	orr.w	r3, r3, #2
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	f043 0304 	orr.w	r3, r3, #4
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d043      	beq.n	8003be4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d03e      	beq.n	8003be4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b6c:	2b60      	cmp	r3, #96	; 0x60
 8003b6e:	d02b      	beq.n	8003bc8 <HAL_CAN_IRQHandler+0x32a>
 8003b70:	2b60      	cmp	r3, #96	; 0x60
 8003b72:	d82e      	bhi.n	8003bd2 <HAL_CAN_IRQHandler+0x334>
 8003b74:	2b50      	cmp	r3, #80	; 0x50
 8003b76:	d022      	beq.n	8003bbe <HAL_CAN_IRQHandler+0x320>
 8003b78:	2b50      	cmp	r3, #80	; 0x50
 8003b7a:	d82a      	bhi.n	8003bd2 <HAL_CAN_IRQHandler+0x334>
 8003b7c:	2b40      	cmp	r3, #64	; 0x40
 8003b7e:	d019      	beq.n	8003bb4 <HAL_CAN_IRQHandler+0x316>
 8003b80:	2b40      	cmp	r3, #64	; 0x40
 8003b82:	d826      	bhi.n	8003bd2 <HAL_CAN_IRQHandler+0x334>
 8003b84:	2b30      	cmp	r3, #48	; 0x30
 8003b86:	d010      	beq.n	8003baa <HAL_CAN_IRQHandler+0x30c>
 8003b88:	2b30      	cmp	r3, #48	; 0x30
 8003b8a:	d822      	bhi.n	8003bd2 <HAL_CAN_IRQHandler+0x334>
 8003b8c:	2b10      	cmp	r3, #16
 8003b8e:	d002      	beq.n	8003b96 <HAL_CAN_IRQHandler+0x2f8>
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d005      	beq.n	8003ba0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003b94:	e01d      	b.n	8003bd2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	f043 0308 	orr.w	r3, r3, #8
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b9e:	e019      	b.n	8003bd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	f043 0310 	orr.w	r3, r3, #16
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ba8:	e014      	b.n	8003bd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	f043 0320 	orr.w	r3, r3, #32
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bb2:	e00f      	b.n	8003bd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bbc:	e00a      	b.n	8003bd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bc6:	e005      	b.n	8003bd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bd0:	e000      	b.n	8003bd4 <HAL_CAN_IRQHandler+0x336>
            break;
 8003bd2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699a      	ldr	r2, [r3, #24]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003be2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2204      	movs	r2, #4
 8003bea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d008      	beq.n	8003c04 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f872 	bl	8003ce8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003c04:	bf00      	nop
 8003c06:	3728      	adds	r7, #40	; 0x28
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d0c:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <__NVIC_SetPriorityGrouping+0x44>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d18:	4013      	ands	r3, r2
 8003d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d2e:	4a04      	ldr	r2, [pc, #16]	; (8003d40 <__NVIC_SetPriorityGrouping+0x44>)
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	60d3      	str	r3, [r2, #12]
}
 8003d34:	bf00      	nop
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	e000ed00 	.word	0xe000ed00

08003d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d48:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <__NVIC_GetPriorityGrouping+0x18>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	0a1b      	lsrs	r3, r3, #8
 8003d4e:	f003 0307 	and.w	r3, r3, #7
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	e000ed00 	.word	0xe000ed00

08003d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	db0b      	blt.n	8003d8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	f003 021f 	and.w	r2, r3, #31
 8003d78:	4907      	ldr	r1, [pc, #28]	; (8003d98 <__NVIC_EnableIRQ+0x38>)
 8003d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	2001      	movs	r0, #1
 8003d82:	fa00 f202 	lsl.w	r2, r0, r2
 8003d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	e000e100 	.word	0xe000e100

08003d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	4603      	mov	r3, r0
 8003da4:	6039      	str	r1, [r7, #0]
 8003da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	db0a      	blt.n	8003dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	490c      	ldr	r1, [pc, #48]	; (8003de8 <__NVIC_SetPriority+0x4c>)
 8003db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dba:	0112      	lsls	r2, r2, #4
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dc4:	e00a      	b.n	8003ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	4908      	ldr	r1, [pc, #32]	; (8003dec <__NVIC_SetPriority+0x50>)
 8003dcc:	79fb      	ldrb	r3, [r7, #7]
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	3b04      	subs	r3, #4
 8003dd4:	0112      	lsls	r2, r2, #4
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	440b      	add	r3, r1
 8003dda:	761a      	strb	r2, [r3, #24]
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	e000e100 	.word	0xe000e100
 8003dec:	e000ed00 	.word	0xe000ed00

08003df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b089      	sub	sp, #36	; 0x24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f1c3 0307 	rsb	r3, r3, #7
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	bf28      	it	cs
 8003e0e:	2304      	movcs	r3, #4
 8003e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	3304      	adds	r3, #4
 8003e16:	2b06      	cmp	r3, #6
 8003e18:	d902      	bls.n	8003e20 <NVIC_EncodePriority+0x30>
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	3b03      	subs	r3, #3
 8003e1e:	e000      	b.n	8003e22 <NVIC_EncodePriority+0x32>
 8003e20:	2300      	movs	r3, #0
 8003e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	43da      	mvns	r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	401a      	ands	r2, r3
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e42:	43d9      	mvns	r1, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e48:	4313      	orrs	r3, r2
         );
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3724      	adds	r7, #36	; 0x24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7ff ff4c 	bl	8003cfc <__NVIC_SetPriorityGrouping>
}
 8003e64:	bf00      	nop
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	4603      	mov	r3, r0
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e7e:	f7ff ff61 	bl	8003d44 <__NVIC_GetPriorityGrouping>
 8003e82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	68b9      	ldr	r1, [r7, #8]
 8003e88:	6978      	ldr	r0, [r7, #20]
 8003e8a:	f7ff ffb1 	bl	8003df0 <NVIC_EncodePriority>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e94:	4611      	mov	r1, r2
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff ff80 	bl	8003d9c <__NVIC_SetPriority>
}
 8003e9c:	bf00      	nop
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff ff54 	bl	8003d60 <__NVIC_EnableIRQ>
}
 8003eb8:	bf00      	nop
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ecc:	f7fe fc98 	bl	8002800 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e099      	b.n	8004010 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0201 	bic.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003efc:	e00f      	b.n	8003f1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003efe:	f7fe fc7f 	bl	8002800 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b05      	cmp	r3, #5
 8003f0a:	d908      	bls.n	8003f1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2203      	movs	r2, #3
 8003f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e078      	b.n	8004010 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1e8      	bne.n	8003efe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	4b38      	ldr	r3, [pc, #224]	; (8004018 <HAL_DMA_Init+0x158>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d107      	bne.n	8003f88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	4313      	orrs	r3, r2
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f023 0307 	bic.w	r3, r3, #7
 8003f9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d117      	bne.n	8003fe2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00e      	beq.n	8003fe2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f9e9 	bl	800439c <DMA_CheckFifoParam>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d008      	beq.n	8003fe2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2240      	movs	r2, #64	; 0x40
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e016      	b.n	8004010 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f9a0 	bl	8004330 <DMA_CalcBaseAndBitshift>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff8:	223f      	movs	r2, #63	; 0x3f
 8003ffa:	409a      	lsls	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	f010803f 	.word	0xf010803f

0800401c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004028:	4b8e      	ldr	r3, [pc, #568]	; (8004264 <HAL_DMA_IRQHandler+0x248>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a8e      	ldr	r2, [pc, #568]	; (8004268 <HAL_DMA_IRQHandler+0x24c>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	0a9b      	lsrs	r3, r3, #10
 8004034:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004046:	2208      	movs	r2, #8
 8004048:	409a      	lsls	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4013      	ands	r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d01a      	beq.n	8004088 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d013      	beq.n	8004088 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0204 	bic.w	r2, r2, #4
 800406e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004074:	2208      	movs	r2, #8
 8004076:	409a      	lsls	r2, r3
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004080:	f043 0201 	orr.w	r2, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408c:	2201      	movs	r2, #1
 800408e:	409a      	lsls	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4013      	ands	r3, r2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d012      	beq.n	80040be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00b      	beq.n	80040be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040aa:	2201      	movs	r2, #1
 80040ac:	409a      	lsls	r2, r3
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	f043 0202 	orr.w	r2, r3, #2
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c2:	2204      	movs	r2, #4
 80040c4:	409a      	lsls	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d012      	beq.n	80040f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00b      	beq.n	80040f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e0:	2204      	movs	r2, #4
 80040e2:	409a      	lsls	r2, r3
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ec:	f043 0204 	orr.w	r2, r3, #4
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f8:	2210      	movs	r2, #16
 80040fa:	409a      	lsls	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4013      	ands	r3, r2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d043      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d03c      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004116:	2210      	movs	r2, #16
 8004118:	409a      	lsls	r2, r3
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d018      	beq.n	800415e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d108      	bne.n	800414c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	2b00      	cmp	r3, #0
 8004140:	d024      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	4798      	blx	r3
 800414a:	e01f      	b.n	800418c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01b      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	4798      	blx	r3
 800415c:	e016      	b.n	800418c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004168:	2b00      	cmp	r3, #0
 800416a:	d107      	bne.n	800417c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0208 	bic.w	r2, r2, #8
 800417a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004190:	2220      	movs	r2, #32
 8004192:	409a      	lsls	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 808f 	beq.w	80042bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 8087 	beq.w	80042bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b2:	2220      	movs	r2, #32
 80041b4:	409a      	lsls	r2, r3
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b05      	cmp	r3, #5
 80041c4:	d136      	bne.n	8004234 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0216 	bic.w	r2, r2, #22
 80041d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695a      	ldr	r2, [r3, #20]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d103      	bne.n	80041f6 <HAL_DMA_IRQHandler+0x1da>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d007      	beq.n	8004206 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0208 	bic.w	r2, r2, #8
 8004204:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420a:	223f      	movs	r2, #63	; 0x3f
 800420c:	409a      	lsls	r2, r3
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004226:	2b00      	cmp	r3, #0
 8004228:	d07e      	beq.n	8004328 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	4798      	blx	r3
        }
        return;
 8004232:	e079      	b.n	8004328 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d01d      	beq.n	800427e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10d      	bne.n	800426c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004254:	2b00      	cmp	r3, #0
 8004256:	d031      	beq.n	80042bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	4798      	blx	r3
 8004260:	e02c      	b.n	80042bc <HAL_DMA_IRQHandler+0x2a0>
 8004262:	bf00      	nop
 8004264:	20000028 	.word	0x20000028
 8004268:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004270:	2b00      	cmp	r3, #0
 8004272:	d023      	beq.n	80042bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	4798      	blx	r3
 800427c:	e01e      	b.n	80042bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10f      	bne.n	80042ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0210 	bic.w	r2, r2, #16
 800429a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d032      	beq.n	800432a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d022      	beq.n	8004316 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2205      	movs	r2, #5
 80042d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0201 	bic.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	3301      	adds	r3, #1
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d307      	bcc.n	8004304 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f2      	bne.n	80042e8 <HAL_DMA_IRQHandler+0x2cc>
 8004302:	e000      	b.n	8004306 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004304:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431a:	2b00      	cmp	r3, #0
 800431c:	d005      	beq.n	800432a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	4798      	blx	r3
 8004326:	e000      	b.n	800432a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004328:	bf00      	nop
    }
  }
}
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	3b10      	subs	r3, #16
 8004340:	4a14      	ldr	r2, [pc, #80]	; (8004394 <DMA_CalcBaseAndBitshift+0x64>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	091b      	lsrs	r3, r3, #4
 8004348:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800434a:	4a13      	ldr	r2, [pc, #76]	; (8004398 <DMA_CalcBaseAndBitshift+0x68>)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4413      	add	r3, r2
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b03      	cmp	r3, #3
 800435c:	d909      	bls.n	8004372 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004366:	f023 0303 	bic.w	r3, r3, #3
 800436a:	1d1a      	adds	r2, r3, #4
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	659a      	str	r2, [r3, #88]	; 0x58
 8004370:	e007      	b.n	8004382 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800437a:	f023 0303 	bic.w	r3, r3, #3
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	aaaaaaab 	.word	0xaaaaaaab
 8004398:	0800ce94 	.word	0x0800ce94

0800439c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d11f      	bne.n	80043f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d856      	bhi.n	800446a <DMA_CheckFifoParam+0xce>
 80043bc:	a201      	add	r2, pc, #4	; (adr r2, 80043c4 <DMA_CheckFifoParam+0x28>)
 80043be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c2:	bf00      	nop
 80043c4:	080043d5 	.word	0x080043d5
 80043c8:	080043e7 	.word	0x080043e7
 80043cc:	080043d5 	.word	0x080043d5
 80043d0:	0800446b 	.word	0x0800446b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d046      	beq.n	800446e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043e4:	e043      	b.n	800446e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043ee:	d140      	bne.n	8004472 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f4:	e03d      	b.n	8004472 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043fe:	d121      	bne.n	8004444 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b03      	cmp	r3, #3
 8004404:	d837      	bhi.n	8004476 <DMA_CheckFifoParam+0xda>
 8004406:	a201      	add	r2, pc, #4	; (adr r2, 800440c <DMA_CheckFifoParam+0x70>)
 8004408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440c:	0800441d 	.word	0x0800441d
 8004410:	08004423 	.word	0x08004423
 8004414:	0800441d 	.word	0x0800441d
 8004418:	08004435 	.word	0x08004435
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
      break;
 8004420:	e030      	b.n	8004484 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d025      	beq.n	800447a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004432:	e022      	b.n	800447a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800443c:	d11f      	bne.n	800447e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004442:	e01c      	b.n	800447e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2b02      	cmp	r3, #2
 8004448:	d903      	bls.n	8004452 <DMA_CheckFifoParam+0xb6>
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b03      	cmp	r3, #3
 800444e:	d003      	beq.n	8004458 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004450:	e018      	b.n	8004484 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	73fb      	strb	r3, [r7, #15]
      break;
 8004456:	e015      	b.n	8004484 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00e      	beq.n	8004482 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	73fb      	strb	r3, [r7, #15]
      break;
 8004468:	e00b      	b.n	8004482 <DMA_CheckFifoParam+0xe6>
      break;
 800446a:	bf00      	nop
 800446c:	e00a      	b.n	8004484 <DMA_CheckFifoParam+0xe8>
      break;
 800446e:	bf00      	nop
 8004470:	e008      	b.n	8004484 <DMA_CheckFifoParam+0xe8>
      break;
 8004472:	bf00      	nop
 8004474:	e006      	b.n	8004484 <DMA_CheckFifoParam+0xe8>
      break;
 8004476:	bf00      	nop
 8004478:	e004      	b.n	8004484 <DMA_CheckFifoParam+0xe8>
      break;
 800447a:	bf00      	nop
 800447c:	e002      	b.n	8004484 <DMA_CheckFifoParam+0xe8>
      break;   
 800447e:	bf00      	nop
 8004480:	e000      	b.n	8004484 <DMA_CheckFifoParam+0xe8>
      break;
 8004482:	bf00      	nop
    }
  } 
  
  return status; 
 8004484:	7bfb      	ldrb	r3, [r7, #15]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop

08004494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004494:	b480      	push	{r7}
 8004496:	b089      	sub	sp, #36	; 0x24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800449e:	2300      	movs	r3, #0
 80044a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044aa:	2300      	movs	r3, #0
 80044ac:	61fb      	str	r3, [r7, #28]
 80044ae:	e165      	b.n	800477c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044b0:	2201      	movs	r2, #1
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4013      	ands	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	f040 8154 	bne.w	8004776 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d005      	beq.n	80044e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d130      	bne.n	8004548 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	2203      	movs	r2, #3
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	43db      	mvns	r3, r3
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	4013      	ands	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	4313      	orrs	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800451c:	2201      	movs	r2, #1
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	43db      	mvns	r3, r3
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	4013      	ands	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	f003 0201 	and.w	r2, r3, #1
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	4313      	orrs	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	2b03      	cmp	r3, #3
 8004552:	d017      	beq.n	8004584 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	2203      	movs	r2, #3
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	43db      	mvns	r3, r3
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4013      	ands	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4313      	orrs	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d123      	bne.n	80045d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	08da      	lsrs	r2, r3, #3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3208      	adds	r2, #8
 8004598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800459c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	220f      	movs	r2, #15
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	43db      	mvns	r3, r3
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4013      	ands	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	08da      	lsrs	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3208      	adds	r2, #8
 80045d2:	69b9      	ldr	r1, [r7, #24]
 80045d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	2203      	movs	r2, #3
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	43db      	mvns	r3, r3
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	4013      	ands	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f003 0203 	and.w	r2, r3, #3
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	4313      	orrs	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 80ae 	beq.w	8004776 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	4b5d      	ldr	r3, [pc, #372]	; (8004794 <HAL_GPIO_Init+0x300>)
 8004620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004622:	4a5c      	ldr	r2, [pc, #368]	; (8004794 <HAL_GPIO_Init+0x300>)
 8004624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004628:	6453      	str	r3, [r2, #68]	; 0x44
 800462a:	4b5a      	ldr	r3, [pc, #360]	; (8004794 <HAL_GPIO_Init+0x300>)
 800462c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004636:	4a58      	ldr	r2, [pc, #352]	; (8004798 <HAL_GPIO_Init+0x304>)
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	089b      	lsrs	r3, r3, #2
 800463c:	3302      	adds	r3, #2
 800463e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	220f      	movs	r2, #15
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	43db      	mvns	r3, r3
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	4013      	ands	r3, r2
 8004658:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a4f      	ldr	r2, [pc, #316]	; (800479c <HAL_GPIO_Init+0x308>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d025      	beq.n	80046ae <HAL_GPIO_Init+0x21a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a4e      	ldr	r2, [pc, #312]	; (80047a0 <HAL_GPIO_Init+0x30c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d01f      	beq.n	80046aa <HAL_GPIO_Init+0x216>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a4d      	ldr	r2, [pc, #308]	; (80047a4 <HAL_GPIO_Init+0x310>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d019      	beq.n	80046a6 <HAL_GPIO_Init+0x212>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a4c      	ldr	r2, [pc, #304]	; (80047a8 <HAL_GPIO_Init+0x314>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d013      	beq.n	80046a2 <HAL_GPIO_Init+0x20e>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a4b      	ldr	r2, [pc, #300]	; (80047ac <HAL_GPIO_Init+0x318>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00d      	beq.n	800469e <HAL_GPIO_Init+0x20a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a4a      	ldr	r2, [pc, #296]	; (80047b0 <HAL_GPIO_Init+0x31c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d007      	beq.n	800469a <HAL_GPIO_Init+0x206>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a49      	ldr	r2, [pc, #292]	; (80047b4 <HAL_GPIO_Init+0x320>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d101      	bne.n	8004696 <HAL_GPIO_Init+0x202>
 8004692:	2306      	movs	r3, #6
 8004694:	e00c      	b.n	80046b0 <HAL_GPIO_Init+0x21c>
 8004696:	2307      	movs	r3, #7
 8004698:	e00a      	b.n	80046b0 <HAL_GPIO_Init+0x21c>
 800469a:	2305      	movs	r3, #5
 800469c:	e008      	b.n	80046b0 <HAL_GPIO_Init+0x21c>
 800469e:	2304      	movs	r3, #4
 80046a0:	e006      	b.n	80046b0 <HAL_GPIO_Init+0x21c>
 80046a2:	2303      	movs	r3, #3
 80046a4:	e004      	b.n	80046b0 <HAL_GPIO_Init+0x21c>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e002      	b.n	80046b0 <HAL_GPIO_Init+0x21c>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <HAL_GPIO_Init+0x21c>
 80046ae:	2300      	movs	r3, #0
 80046b0:	69fa      	ldr	r2, [r7, #28]
 80046b2:	f002 0203 	and.w	r2, r2, #3
 80046b6:	0092      	lsls	r2, r2, #2
 80046b8:	4093      	lsls	r3, r2
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	4313      	orrs	r3, r2
 80046be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046c0:	4935      	ldr	r1, [pc, #212]	; (8004798 <HAL_GPIO_Init+0x304>)
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	089b      	lsrs	r3, r3, #2
 80046c6:	3302      	adds	r3, #2
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046ce:	4b3a      	ldr	r3, [pc, #232]	; (80047b8 <HAL_GPIO_Init+0x324>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	43db      	mvns	r3, r3
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	4013      	ands	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046f2:	4a31      	ldr	r2, [pc, #196]	; (80047b8 <HAL_GPIO_Init+0x324>)
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046f8:	4b2f      	ldr	r3, [pc, #188]	; (80047b8 <HAL_GPIO_Init+0x324>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	43db      	mvns	r3, r3
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4013      	ands	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800471c:	4a26      	ldr	r2, [pc, #152]	; (80047b8 <HAL_GPIO_Init+0x324>)
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004722:	4b25      	ldr	r3, [pc, #148]	; (80047b8 <HAL_GPIO_Init+0x324>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	43db      	mvns	r3, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4013      	ands	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004746:	4a1c      	ldr	r2, [pc, #112]	; (80047b8 <HAL_GPIO_Init+0x324>)
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800474c:	4b1a      	ldr	r3, [pc, #104]	; (80047b8 <HAL_GPIO_Init+0x324>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	43db      	mvns	r3, r3
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4013      	ands	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004770:	4a11      	ldr	r2, [pc, #68]	; (80047b8 <HAL_GPIO_Init+0x324>)
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	3301      	adds	r3, #1
 800477a:	61fb      	str	r3, [r7, #28]
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	2b0f      	cmp	r3, #15
 8004780:	f67f ae96 	bls.w	80044b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004784:	bf00      	nop
 8004786:	bf00      	nop
 8004788:	3724      	adds	r7, #36	; 0x24
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800
 8004798:	40013800 	.word	0x40013800
 800479c:	40020000 	.word	0x40020000
 80047a0:	40020400 	.word	0x40020400
 80047a4:	40020800 	.word	0x40020800
 80047a8:	40020c00 	.word	0x40020c00
 80047ac:	40021000 	.word	0x40021000
 80047b0:	40021400 	.word	0x40021400
 80047b4:	40021800 	.word	0x40021800
 80047b8:	40013c00 	.word	0x40013c00

080047bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	887b      	ldrh	r3, [r7, #2]
 80047ce:	4013      	ands	r3, r2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047d4:	2301      	movs	r3, #1
 80047d6:	73fb      	strb	r3, [r7, #15]
 80047d8:	e001      	b.n	80047de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047da:	2300      	movs	r3, #0
 80047dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047de:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	807b      	strh	r3, [r7, #2]
 80047f8:	4613      	mov	r3, r2
 80047fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047fc:	787b      	ldrb	r3, [r7, #1]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004802:	887a      	ldrh	r2, [r7, #2]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004808:	e003      	b.n	8004812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800480a:	887b      	ldrh	r3, [r7, #2]
 800480c:	041a      	lsls	r2, r3, #16
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	619a      	str	r2, [r3, #24]
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
	...

08004820 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800482a:	2300      	movs	r3, #0
 800482c:	603b      	str	r3, [r7, #0]
 800482e:	4b20      	ldr	r3, [pc, #128]	; (80048b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	4a1f      	ldr	r2, [pc, #124]	; (80048b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004838:	6413      	str	r3, [r2, #64]	; 0x40
 800483a:	4b1d      	ldr	r3, [pc, #116]	; (80048b0 <HAL_PWREx_EnableOverDrive+0x90>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004842:	603b      	str	r3, [r7, #0]
 8004844:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004846:	4b1b      	ldr	r3, [pc, #108]	; (80048b4 <HAL_PWREx_EnableOverDrive+0x94>)
 8004848:	2201      	movs	r2, #1
 800484a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800484c:	f7fd ffd8 	bl	8002800 <HAL_GetTick>
 8004850:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004852:	e009      	b.n	8004868 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004854:	f7fd ffd4 	bl	8002800 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004862:	d901      	bls.n	8004868 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e01f      	b.n	80048a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004868:	4b13      	ldr	r3, [pc, #76]	; (80048b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004874:	d1ee      	bne.n	8004854 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004876:	4b11      	ldr	r3, [pc, #68]	; (80048bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004878:	2201      	movs	r2, #1
 800487a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800487c:	f7fd ffc0 	bl	8002800 <HAL_GetTick>
 8004880:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004882:	e009      	b.n	8004898 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004884:	f7fd ffbc 	bl	8002800 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004892:	d901      	bls.n	8004898 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e007      	b.n	80048a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004898:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048a4:	d1ee      	bne.n	8004884 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40023800 	.word	0x40023800
 80048b4:	420e0040 	.word	0x420e0040
 80048b8:	40007000 	.word	0x40007000
 80048bc:	420e0044 	.word	0x420e0044

080048c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0cc      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048d4:	4b68      	ldr	r3, [pc, #416]	; (8004a78 <HAL_RCC_ClockConfig+0x1b8>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 030f 	and.w	r3, r3, #15
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d90c      	bls.n	80048fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048e2:	4b65      	ldr	r3, [pc, #404]	; (8004a78 <HAL_RCC_ClockConfig+0x1b8>)
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ea:	4b63      	ldr	r3, [pc, #396]	; (8004a78 <HAL_RCC_ClockConfig+0x1b8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d001      	beq.n	80048fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e0b8      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d020      	beq.n	800494a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b00      	cmp	r3, #0
 8004912:	d005      	beq.n	8004920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004914:	4b59      	ldr	r3, [pc, #356]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	4a58      	ldr	r2, [pc, #352]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800491e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800492c:	4b53      	ldr	r3, [pc, #332]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	4a52      	ldr	r2, [pc, #328]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004938:	4b50      	ldr	r3, [pc, #320]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	494d      	ldr	r1, [pc, #308]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	4313      	orrs	r3, r2
 8004948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d044      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d107      	bne.n	800496e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495e:	4b47      	ldr	r3, [pc, #284]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d119      	bne.n	800499e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e07f      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d003      	beq.n	800497e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800497a:	2b03      	cmp	r3, #3
 800497c:	d107      	bne.n	800498e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800497e:	4b3f      	ldr	r3, [pc, #252]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e06f      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800498e:	4b3b      	ldr	r3, [pc, #236]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e067      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800499e:	4b37      	ldr	r3, [pc, #220]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f023 0203 	bic.w	r2, r3, #3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	4934      	ldr	r1, [pc, #208]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049b0:	f7fd ff26 	bl	8002800 <HAL_GetTick>
 80049b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b6:	e00a      	b.n	80049ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b8:	f7fd ff22 	bl	8002800 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e04f      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ce:	4b2b      	ldr	r3, [pc, #172]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 020c 	and.w	r2, r3, #12
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	429a      	cmp	r2, r3
 80049de:	d1eb      	bne.n	80049b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049e0:	4b25      	ldr	r3, [pc, #148]	; (8004a78 <HAL_RCC_ClockConfig+0x1b8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d20c      	bcs.n	8004a08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ee:	4b22      	ldr	r3, [pc, #136]	; (8004a78 <HAL_RCC_ClockConfig+0x1b8>)
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	b2d2      	uxtb	r2, r2
 80049f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f6:	4b20      	ldr	r3, [pc, #128]	; (8004a78 <HAL_RCC_ClockConfig+0x1b8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d001      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e032      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d008      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a14:	4b19      	ldr	r3, [pc, #100]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	4916      	ldr	r1, [pc, #88]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d009      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a32:	4b12      	ldr	r3, [pc, #72]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	490e      	ldr	r1, [pc, #56]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a46:	f000 f887 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	091b      	lsrs	r3, r3, #4
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	490a      	ldr	r1, [pc, #40]	; (8004a80 <HAL_RCC_ClockConfig+0x1c0>)
 8004a58:	5ccb      	ldrb	r3, [r1, r3]
 8004a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5e:	4a09      	ldr	r2, [pc, #36]	; (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 8004a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a62:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <HAL_RCC_ClockConfig+0x1c8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fd fd80 	bl	800256c <HAL_InitTick>

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40023c00 	.word	0x40023c00
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	0800ce7c 	.word	0x0800ce7c
 8004a84:	20000028 	.word	0x20000028
 8004a88:	2000002c 	.word	0x2000002c

08004a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a90:	4b03      	ldr	r3, [pc, #12]	; (8004aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a92:	681b      	ldr	r3, [r3, #0]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	20000028 	.word	0x20000028

08004aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004aa8:	f7ff fff0 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
 8004aac:	4602      	mov	r2, r0
 8004aae:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	0a9b      	lsrs	r3, r3, #10
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	4903      	ldr	r1, [pc, #12]	; (8004ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aba:	5ccb      	ldrb	r3, [r1, r3]
 8004abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	0800ce8c 	.word	0x0800ce8c

08004acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ad0:	f7ff ffdc 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	4b05      	ldr	r3, [pc, #20]	; (8004aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	0b5b      	lsrs	r3, r3, #13
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	4903      	ldr	r1, [pc, #12]	; (8004af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ae2:	5ccb      	ldrb	r3, [r1, r3]
 8004ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40023800 	.word	0x40023800
 8004af0:	0800ce8c 	.word	0x0800ce8c

08004af4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	220f      	movs	r2, #15
 8004b02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b04:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <HAL_RCC_GetClockConfig+0x5c>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 0203 	and.w	r2, r3, #3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b10:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <HAL_RCC_GetClockConfig+0x5c>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b1c:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <HAL_RCC_GetClockConfig+0x5c>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b28:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <HAL_RCC_GetClockConfig+0x5c>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	08db      	lsrs	r3, r3, #3
 8004b2e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b36:	4b07      	ldr	r3, [pc, #28]	; (8004b54 <HAL_RCC_GetClockConfig+0x60>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 020f 	and.w	r2, r3, #15
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	601a      	str	r2, [r3, #0]
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40023800 	.word	0x40023800
 8004b54:	40023c00 	.word	0x40023c00

08004b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b5c:	b0a6      	sub	sp, #152	; 0x98
 8004b5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b7e:	4bc8      	ldr	r3, [pc, #800]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 030c 	and.w	r3, r3, #12
 8004b86:	2b0c      	cmp	r3, #12
 8004b88:	f200 817e 	bhi.w	8004e88 <HAL_RCC_GetSysClockFreq+0x330>
 8004b8c:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b92:	bf00      	nop
 8004b94:	08004bc9 	.word	0x08004bc9
 8004b98:	08004e89 	.word	0x08004e89
 8004b9c:	08004e89 	.word	0x08004e89
 8004ba0:	08004e89 	.word	0x08004e89
 8004ba4:	08004bd1 	.word	0x08004bd1
 8004ba8:	08004e89 	.word	0x08004e89
 8004bac:	08004e89 	.word	0x08004e89
 8004bb0:	08004e89 	.word	0x08004e89
 8004bb4:	08004bd9 	.word	0x08004bd9
 8004bb8:	08004e89 	.word	0x08004e89
 8004bbc:	08004e89 	.word	0x08004e89
 8004bc0:	08004e89 	.word	0x08004e89
 8004bc4:	08004d43 	.word	0x08004d43
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bc8:	4bb6      	ldr	r3, [pc, #728]	; (8004ea4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004bca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8004bce:	e15f      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bd0:	4bb5      	ldr	r3, [pc, #724]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x350>)
 8004bd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004bd6:	e15b      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bd8:	4bb1      	ldr	r3, [pc, #708]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004be0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004be4:	4bae      	ldr	r3, [pc, #696]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d031      	beq.n	8004c54 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bf0:	4bab      	ldr	r3, [pc, #684]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	099b      	lsrs	r3, r3, #6
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c02:	663b      	str	r3, [r7, #96]	; 0x60
 8004c04:	2300      	movs	r3, #0
 8004c06:	667b      	str	r3, [r7, #100]	; 0x64
 8004c08:	4ba7      	ldr	r3, [pc, #668]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x350>)
 8004c0a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004c0e:	462a      	mov	r2, r5
 8004c10:	fb03 f202 	mul.w	r2, r3, r2
 8004c14:	2300      	movs	r3, #0
 8004c16:	4621      	mov	r1, r4
 8004c18:	fb01 f303 	mul.w	r3, r1, r3
 8004c1c:	4413      	add	r3, r2
 8004c1e:	4aa2      	ldr	r2, [pc, #648]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x350>)
 8004c20:	4621      	mov	r1, r4
 8004c22:	fba1 1202 	umull	r1, r2, r1, r2
 8004c26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c28:	460a      	mov	r2, r1
 8004c2a:	67ba      	str	r2, [r7, #120]	; 0x78
 8004c2c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004c2e:	4413      	add	r3, r2
 8004c30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c36:	2200      	movs	r2, #0
 8004c38:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c3a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004c3c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c40:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004c44:	f7fb fed2 	bl	80009ec <__aeabi_uldivmod>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c52:	e064      	b.n	8004d1e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c54:	4b92      	ldr	r3, [pc, #584]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	099b      	lsrs	r3, r3, #6
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	653b      	str	r3, [r7, #80]	; 0x50
 8004c5e:	657a      	str	r2, [r7, #84]	; 0x54
 8004c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c66:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c68:	2300      	movs	r3, #0
 8004c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c6c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004c70:	4622      	mov	r2, r4
 8004c72:	462b      	mov	r3, r5
 8004c74:	f04f 0000 	mov.w	r0, #0
 8004c78:	f04f 0100 	mov.w	r1, #0
 8004c7c:	0159      	lsls	r1, r3, #5
 8004c7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c82:	0150      	lsls	r0, r2, #5
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	4621      	mov	r1, r4
 8004c8a:	1a51      	subs	r1, r2, r1
 8004c8c:	6139      	str	r1, [r7, #16]
 8004c8e:	4629      	mov	r1, r5
 8004c90:	eb63 0301 	sbc.w	r3, r3, r1
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	f04f 0300 	mov.w	r3, #0
 8004c9e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ca2:	4659      	mov	r1, fp
 8004ca4:	018b      	lsls	r3, r1, #6
 8004ca6:	4651      	mov	r1, sl
 8004ca8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cac:	4651      	mov	r1, sl
 8004cae:	018a      	lsls	r2, r1, #6
 8004cb0:	4651      	mov	r1, sl
 8004cb2:	ebb2 0801 	subs.w	r8, r2, r1
 8004cb6:	4659      	mov	r1, fp
 8004cb8:	eb63 0901 	sbc.w	r9, r3, r1
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cc8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ccc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cd0:	4690      	mov	r8, r2
 8004cd2:	4699      	mov	r9, r3
 8004cd4:	4623      	mov	r3, r4
 8004cd6:	eb18 0303 	adds.w	r3, r8, r3
 8004cda:	60bb      	str	r3, [r7, #8]
 8004cdc:	462b      	mov	r3, r5
 8004cde:	eb49 0303 	adc.w	r3, r9, r3
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	028b      	lsls	r3, r1, #10
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	028a      	lsls	r2, r1, #10
 8004cfe:	4610      	mov	r0, r2
 8004d00:	4619      	mov	r1, r3
 8004d02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d06:	2200      	movs	r2, #0
 8004d08:	643b      	str	r3, [r7, #64]	; 0x40
 8004d0a:	647a      	str	r2, [r7, #68]	; 0x44
 8004d0c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d10:	f7fb fe6c 	bl	80009ec <__aeabi_uldivmod>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4613      	mov	r3, r2
 8004d1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d1e:	4b60      	ldr	r3, [pc, #384]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	0c1b      	lsrs	r3, r3, #16
 8004d24:	f003 0303 	and.w	r3, r3, #3
 8004d28:	3301      	adds	r3, #1
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004d30:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004d40:	e0a6      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d42:	4b57      	ldr	r3, [pc, #348]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d4e:	4b54      	ldr	r3, [pc, #336]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d02a      	beq.n	8004db0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5a:	4b51      	ldr	r3, [pc, #324]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	099b      	lsrs	r3, r3, #6
 8004d60:	2200      	movs	r2, #0
 8004d62:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	4b4e      	ldr	r3, [pc, #312]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x350>)
 8004d70:	fb03 f201 	mul.w	r2, r3, r1
 8004d74:	2300      	movs	r3, #0
 8004d76:	fb00 f303 	mul.w	r3, r0, r3
 8004d7a:	4413      	add	r3, r2
 8004d7c:	4a4a      	ldr	r2, [pc, #296]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x350>)
 8004d7e:	fba0 1202 	umull	r1, r2, r0, r2
 8004d82:	677a      	str	r2, [r7, #116]	; 0x74
 8004d84:	460a      	mov	r2, r1
 8004d86:	673a      	str	r2, [r7, #112]	; 0x70
 8004d88:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004d8a:	4413      	add	r3, r2
 8004d8c:	677b      	str	r3, [r7, #116]	; 0x74
 8004d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d92:	2200      	movs	r2, #0
 8004d94:	633b      	str	r3, [r7, #48]	; 0x30
 8004d96:	637a      	str	r2, [r7, #52]	; 0x34
 8004d98:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004d9c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004da0:	f7fb fe24 	bl	80009ec <__aeabi_uldivmod>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4613      	mov	r3, r2
 8004daa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004dae:	e05b      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004db0:	4b3b      	ldr	r3, [pc, #236]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	099b      	lsrs	r3, r3, #6
 8004db6:	2200      	movs	r2, #0
 8004db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc2:	623b      	str	r3, [r7, #32]
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004dcc:	4642      	mov	r2, r8
 8004dce:	464b      	mov	r3, r9
 8004dd0:	f04f 0000 	mov.w	r0, #0
 8004dd4:	f04f 0100 	mov.w	r1, #0
 8004dd8:	0159      	lsls	r1, r3, #5
 8004dda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dde:	0150      	lsls	r0, r2, #5
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	4641      	mov	r1, r8
 8004de6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004dea:	4649      	mov	r1, r9
 8004dec:	eb63 0b01 	sbc.w	fp, r3, r1
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	f04f 0300 	mov.w	r3, #0
 8004df8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004dfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e04:	ebb2 040a 	subs.w	r4, r2, sl
 8004e08:	eb63 050b 	sbc.w	r5, r3, fp
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	00eb      	lsls	r3, r5, #3
 8004e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e1a:	00e2      	lsls	r2, r4, #3
 8004e1c:	4614      	mov	r4, r2
 8004e1e:	461d      	mov	r5, r3
 8004e20:	4643      	mov	r3, r8
 8004e22:	18e3      	adds	r3, r4, r3
 8004e24:	603b      	str	r3, [r7, #0]
 8004e26:	464b      	mov	r3, r9
 8004e28:	eb45 0303 	adc.w	r3, r5, r3
 8004e2c:	607b      	str	r3, [r7, #4]
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	f04f 0300 	mov.w	r3, #0
 8004e36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	028b      	lsls	r3, r1, #10
 8004e3e:	4621      	mov	r1, r4
 8004e40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e44:	4621      	mov	r1, r4
 8004e46:	028a      	lsls	r2, r1, #10
 8004e48:	4610      	mov	r0, r2
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e50:	2200      	movs	r2, #0
 8004e52:	61bb      	str	r3, [r7, #24]
 8004e54:	61fa      	str	r2, [r7, #28]
 8004e56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e5a:	f7fb fdc7 	bl	80009ec <__aeabi_uldivmod>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4613      	mov	r3, r2
 8004e64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e68:	4b0d      	ldr	r3, [pc, #52]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	0f1b      	lsrs	r3, r3, #28
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8004e76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004e86:	e003      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e88:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004e8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004e8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3798      	adds	r7, #152	; 0x98
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	00f42400 	.word	0x00f42400
 8004ea8:	017d7840 	.word	0x017d7840

08004eac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e28d      	b.n	80053da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 8083 	beq.w	8004fd2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ecc:	4b94      	ldr	r3, [pc, #592]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f003 030c 	and.w	r3, r3, #12
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d019      	beq.n	8004f0c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ed8:	4b91      	ldr	r3, [pc, #580]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d106      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ee4:	4b8e      	ldr	r3, [pc, #568]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ef0:	d00c      	beq.n	8004f0c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ef2:	4b8b      	ldr	r3, [pc, #556]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004efa:	2b0c      	cmp	r3, #12
 8004efc:	d112      	bne.n	8004f24 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004efe:	4b88      	ldr	r3, [pc, #544]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f0a:	d10b      	bne.n	8004f24 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f0c:	4b84      	ldr	r3, [pc, #528]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d05b      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x124>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d157      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e25a      	b.n	80053da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f2c:	d106      	bne.n	8004f3c <HAL_RCC_OscConfig+0x90>
 8004f2e:	4b7c      	ldr	r3, [pc, #496]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a7b      	ldr	r2, [pc, #492]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8004f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	e01d      	b.n	8004f78 <HAL_RCC_OscConfig+0xcc>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f44:	d10c      	bne.n	8004f60 <HAL_RCC_OscConfig+0xb4>
 8004f46:	4b76      	ldr	r3, [pc, #472]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a75      	ldr	r2, [pc, #468]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8004f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f50:	6013      	str	r3, [r2, #0]
 8004f52:	4b73      	ldr	r3, [pc, #460]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a72      	ldr	r2, [pc, #456]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8004f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f5c:	6013      	str	r3, [r2, #0]
 8004f5e:	e00b      	b.n	8004f78 <HAL_RCC_OscConfig+0xcc>
 8004f60:	4b6f      	ldr	r3, [pc, #444]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a6e      	ldr	r2, [pc, #440]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8004f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	4b6c      	ldr	r3, [pc, #432]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a6b      	ldr	r2, [pc, #428]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8004f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d013      	beq.n	8004fa8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f80:	f7fd fc3e 	bl	8002800 <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f88:	f7fd fc3a 	bl	8002800 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b64      	cmp	r3, #100	; 0x64
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e21f      	b.n	80053da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f9a:	4b61      	ldr	r3, [pc, #388]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0f0      	beq.n	8004f88 <HAL_RCC_OscConfig+0xdc>
 8004fa6:	e014      	b.n	8004fd2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa8:	f7fd fc2a 	bl	8002800 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fb0:	f7fd fc26 	bl	8002800 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b64      	cmp	r3, #100	; 0x64
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e20b      	b.n	80053da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fc2:	4b57      	ldr	r3, [pc, #348]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f0      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x104>
 8004fce:	e000      	b.n	8004fd2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d06f      	beq.n	80050be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004fde:	4b50      	ldr	r3, [pc, #320]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 030c 	and.w	r3, r3, #12
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d017      	beq.n	800501a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004fea:	4b4d      	ldr	r3, [pc, #308]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004ff2:	2b08      	cmp	r3, #8
 8004ff4:	d105      	bne.n	8005002 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ff6:	4b4a      	ldr	r3, [pc, #296]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00b      	beq.n	800501a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005002:	4b47      	ldr	r3, [pc, #284]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800500a:	2b0c      	cmp	r3, #12
 800500c:	d11c      	bne.n	8005048 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800500e:	4b44      	ldr	r3, [pc, #272]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d116      	bne.n	8005048 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800501a:	4b41      	ldr	r3, [pc, #260]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d005      	beq.n	8005032 <HAL_RCC_OscConfig+0x186>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d001      	beq.n	8005032 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e1d3      	b.n	80053da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005032:	4b3b      	ldr	r3, [pc, #236]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	4937      	ldr	r1, [pc, #220]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8005042:	4313      	orrs	r3, r2
 8005044:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005046:	e03a      	b.n	80050be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d020      	beq.n	8005092 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005050:	4b34      	ldr	r3, [pc, #208]	; (8005124 <HAL_RCC_OscConfig+0x278>)
 8005052:	2201      	movs	r2, #1
 8005054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005056:	f7fd fbd3 	bl	8002800 <HAL_GetTick>
 800505a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800505c:	e008      	b.n	8005070 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800505e:	f7fd fbcf 	bl	8002800 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d901      	bls.n	8005070 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e1b4      	b.n	80053da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005070:	4b2b      	ldr	r3, [pc, #172]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0f0      	beq.n	800505e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800507c:	4b28      	ldr	r3, [pc, #160]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	4925      	ldr	r1, [pc, #148]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 800508c:	4313      	orrs	r3, r2
 800508e:	600b      	str	r3, [r1, #0]
 8005090:	e015      	b.n	80050be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005092:	4b24      	ldr	r3, [pc, #144]	; (8005124 <HAL_RCC_OscConfig+0x278>)
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005098:	f7fd fbb2 	bl	8002800 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050a0:	f7fd fbae 	bl	8002800 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e193      	b.n	80053da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050b2:	4b1b      	ldr	r3, [pc, #108]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f0      	bne.n	80050a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d036      	beq.n	8005138 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d016      	beq.n	8005100 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050d2:	4b15      	ldr	r3, [pc, #84]	; (8005128 <HAL_RCC_OscConfig+0x27c>)
 80050d4:	2201      	movs	r2, #1
 80050d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d8:	f7fd fb92 	bl	8002800 <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050e0:	f7fd fb8e 	bl	8002800 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e173      	b.n	80053da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050f2:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 80050f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0f0      	beq.n	80050e0 <HAL_RCC_OscConfig+0x234>
 80050fe:	e01b      	b.n	8005138 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005100:	4b09      	ldr	r3, [pc, #36]	; (8005128 <HAL_RCC_OscConfig+0x27c>)
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005106:	f7fd fb7b 	bl	8002800 <HAL_GetTick>
 800510a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800510c:	e00e      	b.n	800512c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800510e:	f7fd fb77 	bl	8002800 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d907      	bls.n	800512c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e15c      	b.n	80053da <HAL_RCC_OscConfig+0x52e>
 8005120:	40023800 	.word	0x40023800
 8005124:	42470000 	.word	0x42470000
 8005128:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800512c:	4b8a      	ldr	r3, [pc, #552]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 800512e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1ea      	bne.n	800510e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 8097 	beq.w	8005274 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005146:	2300      	movs	r3, #0
 8005148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800514a:	4b83      	ldr	r3, [pc, #524]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10f      	bne.n	8005176 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005156:	2300      	movs	r3, #0
 8005158:	60bb      	str	r3, [r7, #8]
 800515a:	4b7f      	ldr	r3, [pc, #508]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	4a7e      	ldr	r2, [pc, #504]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 8005160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005164:	6413      	str	r3, [r2, #64]	; 0x40
 8005166:	4b7c      	ldr	r3, [pc, #496]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800516e:	60bb      	str	r3, [r7, #8]
 8005170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005172:	2301      	movs	r3, #1
 8005174:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005176:	4b79      	ldr	r3, [pc, #484]	; (800535c <HAL_RCC_OscConfig+0x4b0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517e:	2b00      	cmp	r3, #0
 8005180:	d118      	bne.n	80051b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005182:	4b76      	ldr	r3, [pc, #472]	; (800535c <HAL_RCC_OscConfig+0x4b0>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a75      	ldr	r2, [pc, #468]	; (800535c <HAL_RCC_OscConfig+0x4b0>)
 8005188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800518c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800518e:	f7fd fb37 	bl	8002800 <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005194:	e008      	b.n	80051a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005196:	f7fd fb33 	bl	8002800 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d901      	bls.n	80051a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e118      	b.n	80053da <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a8:	4b6c      	ldr	r3, [pc, #432]	; (800535c <HAL_RCC_OscConfig+0x4b0>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0f0      	beq.n	8005196 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d106      	bne.n	80051ca <HAL_RCC_OscConfig+0x31e>
 80051bc:	4b66      	ldr	r3, [pc, #408]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 80051be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c0:	4a65      	ldr	r2, [pc, #404]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 80051c2:	f043 0301 	orr.w	r3, r3, #1
 80051c6:	6713      	str	r3, [r2, #112]	; 0x70
 80051c8:	e01c      	b.n	8005204 <HAL_RCC_OscConfig+0x358>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	2b05      	cmp	r3, #5
 80051d0:	d10c      	bne.n	80051ec <HAL_RCC_OscConfig+0x340>
 80051d2:	4b61      	ldr	r3, [pc, #388]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 80051d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d6:	4a60      	ldr	r2, [pc, #384]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 80051d8:	f043 0304 	orr.w	r3, r3, #4
 80051dc:	6713      	str	r3, [r2, #112]	; 0x70
 80051de:	4b5e      	ldr	r3, [pc, #376]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 80051e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e2:	4a5d      	ldr	r2, [pc, #372]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 80051e4:	f043 0301 	orr.w	r3, r3, #1
 80051e8:	6713      	str	r3, [r2, #112]	; 0x70
 80051ea:	e00b      	b.n	8005204 <HAL_RCC_OscConfig+0x358>
 80051ec:	4b5a      	ldr	r3, [pc, #360]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 80051ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f0:	4a59      	ldr	r2, [pc, #356]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 80051f2:	f023 0301 	bic.w	r3, r3, #1
 80051f6:	6713      	str	r3, [r2, #112]	; 0x70
 80051f8:	4b57      	ldr	r3, [pc, #348]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 80051fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fc:	4a56      	ldr	r2, [pc, #344]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 80051fe:	f023 0304 	bic.w	r3, r3, #4
 8005202:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d015      	beq.n	8005238 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800520c:	f7fd faf8 	bl	8002800 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005212:	e00a      	b.n	800522a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005214:	f7fd faf4 	bl	8002800 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005222:	4293      	cmp	r3, r2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e0d7      	b.n	80053da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800522a:	4b4b      	ldr	r3, [pc, #300]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 800522c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0ee      	beq.n	8005214 <HAL_RCC_OscConfig+0x368>
 8005236:	e014      	b.n	8005262 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005238:	f7fd fae2 	bl	8002800 <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800523e:	e00a      	b.n	8005256 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005240:	f7fd fade 	bl	8002800 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	f241 3288 	movw	r2, #5000	; 0x1388
 800524e:	4293      	cmp	r3, r2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e0c1      	b.n	80053da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005256:	4b40      	ldr	r3, [pc, #256]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 8005258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1ee      	bne.n	8005240 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005262:	7dfb      	ldrb	r3, [r7, #23]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d105      	bne.n	8005274 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005268:	4b3b      	ldr	r3, [pc, #236]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	4a3a      	ldr	r2, [pc, #232]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 800526e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005272:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 80ad 	beq.w	80053d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800527e:	4b36      	ldr	r3, [pc, #216]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 030c 	and.w	r3, r3, #12
 8005286:	2b08      	cmp	r3, #8
 8005288:	d060      	beq.n	800534c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	2b02      	cmp	r3, #2
 8005290:	d145      	bne.n	800531e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005292:	4b33      	ldr	r3, [pc, #204]	; (8005360 <HAL_RCC_OscConfig+0x4b4>)
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005298:	f7fd fab2 	bl	8002800 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a0:	f7fd faae 	bl	8002800 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e093      	b.n	80053da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052b2:	4b29      	ldr	r3, [pc, #164]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1f0      	bne.n	80052a0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69da      	ldr	r2, [r3, #28]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	019b      	lsls	r3, r3, #6
 80052ce:	431a      	orrs	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d4:	085b      	lsrs	r3, r3, #1
 80052d6:	3b01      	subs	r3, #1
 80052d8:	041b      	lsls	r3, r3, #16
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e0:	061b      	lsls	r3, r3, #24
 80052e2:	431a      	orrs	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e8:	071b      	lsls	r3, r3, #28
 80052ea:	491b      	ldr	r1, [pc, #108]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052f0:	4b1b      	ldr	r3, [pc, #108]	; (8005360 <HAL_RCC_OscConfig+0x4b4>)
 80052f2:	2201      	movs	r2, #1
 80052f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f6:	f7fd fa83 	bl	8002800 <HAL_GetTick>
 80052fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052fc:	e008      	b.n	8005310 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052fe:	f7fd fa7f 	bl	8002800 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e064      	b.n	80053da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005310:	4b11      	ldr	r3, [pc, #68]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0f0      	beq.n	80052fe <HAL_RCC_OscConfig+0x452>
 800531c:	e05c      	b.n	80053d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800531e:	4b10      	ldr	r3, [pc, #64]	; (8005360 <HAL_RCC_OscConfig+0x4b4>)
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005324:	f7fd fa6c 	bl	8002800 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800532c:	f7fd fa68 	bl	8002800 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e04d      	b.n	80053da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800533e:	4b06      	ldr	r3, [pc, #24]	; (8005358 <HAL_RCC_OscConfig+0x4ac>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1f0      	bne.n	800532c <HAL_RCC_OscConfig+0x480>
 800534a:	e045      	b.n	80053d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d107      	bne.n	8005364 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e040      	b.n	80053da <HAL_RCC_OscConfig+0x52e>
 8005358:	40023800 	.word	0x40023800
 800535c:	40007000 	.word	0x40007000
 8005360:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005364:	4b1f      	ldr	r3, [pc, #124]	; (80053e4 <HAL_RCC_OscConfig+0x538>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d030      	beq.n	80053d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800537c:	429a      	cmp	r2, r3
 800537e:	d129      	bne.n	80053d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800538a:	429a      	cmp	r2, r3
 800538c:	d122      	bne.n	80053d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005394:	4013      	ands	r3, r2
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800539a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800539c:	4293      	cmp	r3, r2
 800539e:	d119      	bne.n	80053d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	085b      	lsrs	r3, r3, #1
 80053ac:	3b01      	subs	r3, #1
 80053ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d10f      	bne.n	80053d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d107      	bne.n	80053d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d001      	beq.n	80053d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e000      	b.n	80053da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	40023800 	.word	0x40023800

080053e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e041      	b.n	800547e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fc ffbc 	bl	800238c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3304      	adds	r3, #4
 8005424:	4619      	mov	r1, r3
 8005426:	4610      	mov	r0, r2
 8005428:	f000 fec8 	bl	80061bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
	...

08005488 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b01      	cmp	r3, #1
 800549a:	d001      	beq.n	80054a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e04e      	b.n	800553e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a23      	ldr	r2, [pc, #140]	; (800554c <HAL_TIM_Base_Start_IT+0xc4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d022      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0x80>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ca:	d01d      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0x80>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a1f      	ldr	r2, [pc, #124]	; (8005550 <HAL_TIM_Base_Start_IT+0xc8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d018      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0x80>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a1e      	ldr	r2, [pc, #120]	; (8005554 <HAL_TIM_Base_Start_IT+0xcc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d013      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0x80>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a1c      	ldr	r2, [pc, #112]	; (8005558 <HAL_TIM_Base_Start_IT+0xd0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00e      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0x80>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a1b      	ldr	r2, [pc, #108]	; (800555c <HAL_TIM_Base_Start_IT+0xd4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d009      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0x80>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a19      	ldr	r2, [pc, #100]	; (8005560 <HAL_TIM_Base_Start_IT+0xd8>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d004      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0x80>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a18      	ldr	r2, [pc, #96]	; (8005564 <HAL_TIM_Base_Start_IT+0xdc>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d111      	bne.n	800552c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b06      	cmp	r3, #6
 8005518:	d010      	beq.n	800553c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f042 0201 	orr.w	r2, r2, #1
 8005528:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800552a:	e007      	b.n	800553c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0201 	orr.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40010000 	.word	0x40010000
 8005550:	40000400 	.word	0x40000400
 8005554:	40000800 	.word	0x40000800
 8005558:	40000c00 	.word	0x40000c00
 800555c:	40010400 	.word	0x40010400
 8005560:	40014000 	.word	0x40014000
 8005564:	40001800 	.word	0x40001800

08005568 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e041      	b.n	80055fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d106      	bne.n	8005594 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f839 	bl	8005606 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3304      	adds	r3, #4
 80055a4:	4619      	mov	r1, r3
 80055a6:	4610      	mov	r0, r2
 80055a8:	f000 fe08 	bl	80061bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
	...

0800561c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d109      	bne.n	8005640 <HAL_TIM_PWM_Start+0x24>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b01      	cmp	r3, #1
 8005636:	bf14      	ite	ne
 8005638:	2301      	movne	r3, #1
 800563a:	2300      	moveq	r3, #0
 800563c:	b2db      	uxtb	r3, r3
 800563e:	e022      	b.n	8005686 <HAL_TIM_PWM_Start+0x6a>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2b04      	cmp	r3, #4
 8005644:	d109      	bne.n	800565a <HAL_TIM_PWM_Start+0x3e>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b01      	cmp	r3, #1
 8005650:	bf14      	ite	ne
 8005652:	2301      	movne	r3, #1
 8005654:	2300      	moveq	r3, #0
 8005656:	b2db      	uxtb	r3, r3
 8005658:	e015      	b.n	8005686 <HAL_TIM_PWM_Start+0x6a>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b08      	cmp	r3, #8
 800565e:	d109      	bne.n	8005674 <HAL_TIM_PWM_Start+0x58>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b01      	cmp	r3, #1
 800566a:	bf14      	ite	ne
 800566c:	2301      	movne	r3, #1
 800566e:	2300      	moveq	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	e008      	b.n	8005686 <HAL_TIM_PWM_Start+0x6a>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b01      	cmp	r3, #1
 800567e:	bf14      	ite	ne
 8005680:	2301      	movne	r3, #1
 8005682:	2300      	moveq	r3, #0
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e07c      	b.n	8005788 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d104      	bne.n	800569e <HAL_TIM_PWM_Start+0x82>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800569c:	e013      	b.n	80056c6 <HAL_TIM_PWM_Start+0xaa>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b04      	cmp	r3, #4
 80056a2:	d104      	bne.n	80056ae <HAL_TIM_PWM_Start+0x92>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056ac:	e00b      	b.n	80056c6 <HAL_TIM_PWM_Start+0xaa>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d104      	bne.n	80056be <HAL_TIM_PWM_Start+0xa2>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056bc:	e003      	b.n	80056c6 <HAL_TIM_PWM_Start+0xaa>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2201      	movs	r2, #1
 80056cc:	6839      	ldr	r1, [r7, #0]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f001 f988 	bl	80069e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a2d      	ldr	r2, [pc, #180]	; (8005790 <HAL_TIM_PWM_Start+0x174>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d004      	beq.n	80056e8 <HAL_TIM_PWM_Start+0xcc>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a2c      	ldr	r2, [pc, #176]	; (8005794 <HAL_TIM_PWM_Start+0x178>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d101      	bne.n	80056ec <HAL_TIM_PWM_Start+0xd0>
 80056e8:	2301      	movs	r3, #1
 80056ea:	e000      	b.n	80056ee <HAL_TIM_PWM_Start+0xd2>
 80056ec:	2300      	movs	r3, #0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d007      	beq.n	8005702 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005700:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a22      	ldr	r2, [pc, #136]	; (8005790 <HAL_TIM_PWM_Start+0x174>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d022      	beq.n	8005752 <HAL_TIM_PWM_Start+0x136>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005714:	d01d      	beq.n	8005752 <HAL_TIM_PWM_Start+0x136>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a1f      	ldr	r2, [pc, #124]	; (8005798 <HAL_TIM_PWM_Start+0x17c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d018      	beq.n	8005752 <HAL_TIM_PWM_Start+0x136>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a1d      	ldr	r2, [pc, #116]	; (800579c <HAL_TIM_PWM_Start+0x180>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d013      	beq.n	8005752 <HAL_TIM_PWM_Start+0x136>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a1c      	ldr	r2, [pc, #112]	; (80057a0 <HAL_TIM_PWM_Start+0x184>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d00e      	beq.n	8005752 <HAL_TIM_PWM_Start+0x136>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a16      	ldr	r2, [pc, #88]	; (8005794 <HAL_TIM_PWM_Start+0x178>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d009      	beq.n	8005752 <HAL_TIM_PWM_Start+0x136>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a18      	ldr	r2, [pc, #96]	; (80057a4 <HAL_TIM_PWM_Start+0x188>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d004      	beq.n	8005752 <HAL_TIM_PWM_Start+0x136>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a16      	ldr	r2, [pc, #88]	; (80057a8 <HAL_TIM_PWM_Start+0x18c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d111      	bne.n	8005776 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b06      	cmp	r3, #6
 8005762:	d010      	beq.n	8005786 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0201 	orr.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005774:	e007      	b.n	8005786 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f042 0201 	orr.w	r2, r2, #1
 8005784:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40010000 	.word	0x40010000
 8005794:	40010400 	.word	0x40010400
 8005798:	40000400 	.word	0x40000400
 800579c:	40000800 	.word	0x40000800
 80057a0:	40000c00 	.word	0x40000c00
 80057a4:	40014000 	.word	0x40014000
 80057a8:	40001800 	.word	0x40001800

080057ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e041      	b.n	8005842 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d106      	bne.n	80057d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fc fd8a 	bl	80022ec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3304      	adds	r3, #4
 80057e8:	4619      	mov	r1, r3
 80057ea:	4610      	mov	r0, r2
 80057ec:	f000 fce6 	bl	80061bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
	...

0800584c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d104      	bne.n	800586a <HAL_TIM_IC_Start_IT+0x1e>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005866:	b2db      	uxtb	r3, r3
 8005868:	e013      	b.n	8005892 <HAL_TIM_IC_Start_IT+0x46>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b04      	cmp	r3, #4
 800586e:	d104      	bne.n	800587a <HAL_TIM_IC_Start_IT+0x2e>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005876:	b2db      	uxtb	r3, r3
 8005878:	e00b      	b.n	8005892 <HAL_TIM_IC_Start_IT+0x46>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b08      	cmp	r3, #8
 800587e:	d104      	bne.n	800588a <HAL_TIM_IC_Start_IT+0x3e>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005886:	b2db      	uxtb	r3, r3
 8005888:	e003      	b.n	8005892 <HAL_TIM_IC_Start_IT+0x46>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005890:	b2db      	uxtb	r3, r3
 8005892:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d104      	bne.n	80058a4 <HAL_TIM_IC_Start_IT+0x58>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	e013      	b.n	80058cc <HAL_TIM_IC_Start_IT+0x80>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d104      	bne.n	80058b4 <HAL_TIM_IC_Start_IT+0x68>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	e00b      	b.n	80058cc <HAL_TIM_IC_Start_IT+0x80>
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	2b08      	cmp	r3, #8
 80058b8:	d104      	bne.n	80058c4 <HAL_TIM_IC_Start_IT+0x78>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	e003      	b.n	80058cc <HAL_TIM_IC_Start_IT+0x80>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80058ce:	7bbb      	ldrb	r3, [r7, #14]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d102      	bne.n	80058da <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80058d4:	7b7b      	ldrb	r3, [r7, #13]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d001      	beq.n	80058de <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e0cc      	b.n	8005a78 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d104      	bne.n	80058ee <HAL_TIM_IC_Start_IT+0xa2>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058ec:	e013      	b.n	8005916 <HAL_TIM_IC_Start_IT+0xca>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b04      	cmp	r3, #4
 80058f2:	d104      	bne.n	80058fe <HAL_TIM_IC_Start_IT+0xb2>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058fc:	e00b      	b.n	8005916 <HAL_TIM_IC_Start_IT+0xca>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b08      	cmp	r3, #8
 8005902:	d104      	bne.n	800590e <HAL_TIM_IC_Start_IT+0xc2>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800590c:	e003      	b.n	8005916 <HAL_TIM_IC_Start_IT+0xca>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2202      	movs	r2, #2
 8005912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <HAL_TIM_IC_Start_IT+0xda>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005924:	e013      	b.n	800594e <HAL_TIM_IC_Start_IT+0x102>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b04      	cmp	r3, #4
 800592a:	d104      	bne.n	8005936 <HAL_TIM_IC_Start_IT+0xea>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005934:	e00b      	b.n	800594e <HAL_TIM_IC_Start_IT+0x102>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b08      	cmp	r3, #8
 800593a:	d104      	bne.n	8005946 <HAL_TIM_IC_Start_IT+0xfa>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005944:	e003      	b.n	800594e <HAL_TIM_IC_Start_IT+0x102>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2202      	movs	r2, #2
 800594a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b0c      	cmp	r3, #12
 8005952:	d841      	bhi.n	80059d8 <HAL_TIM_IC_Start_IT+0x18c>
 8005954:	a201      	add	r2, pc, #4	; (adr r2, 800595c <HAL_TIM_IC_Start_IT+0x110>)
 8005956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595a:	bf00      	nop
 800595c:	08005991 	.word	0x08005991
 8005960:	080059d9 	.word	0x080059d9
 8005964:	080059d9 	.word	0x080059d9
 8005968:	080059d9 	.word	0x080059d9
 800596c:	080059a3 	.word	0x080059a3
 8005970:	080059d9 	.word	0x080059d9
 8005974:	080059d9 	.word	0x080059d9
 8005978:	080059d9 	.word	0x080059d9
 800597c:	080059b5 	.word	0x080059b5
 8005980:	080059d9 	.word	0x080059d9
 8005984:	080059d9 	.word	0x080059d9
 8005988:	080059d9 	.word	0x080059d9
 800598c:	080059c7 	.word	0x080059c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0202 	orr.w	r2, r2, #2
 800599e:	60da      	str	r2, [r3, #12]
      break;
 80059a0:	e01d      	b.n	80059de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68da      	ldr	r2, [r3, #12]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f042 0204 	orr.w	r2, r2, #4
 80059b0:	60da      	str	r2, [r3, #12]
      break;
 80059b2:	e014      	b.n	80059de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0208 	orr.w	r2, r2, #8
 80059c2:	60da      	str	r2, [r3, #12]
      break;
 80059c4:	e00b      	b.n	80059de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f042 0210 	orr.w	r2, r2, #16
 80059d4:	60da      	str	r2, [r3, #12]
      break;
 80059d6:	e002      	b.n	80059de <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	73fb      	strb	r3, [r7, #15]
      break;
 80059dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80059de:	7bfb      	ldrb	r3, [r7, #15]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d148      	bne.n	8005a76 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2201      	movs	r2, #1
 80059ea:	6839      	ldr	r1, [r7, #0]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 fff9 	bl	80069e4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a22      	ldr	r2, [pc, #136]	; (8005a80 <HAL_TIM_IC_Start_IT+0x234>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d022      	beq.n	8005a42 <HAL_TIM_IC_Start_IT+0x1f6>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a04:	d01d      	beq.n	8005a42 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a1e      	ldr	r2, [pc, #120]	; (8005a84 <HAL_TIM_IC_Start_IT+0x238>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d018      	beq.n	8005a42 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a1c      	ldr	r2, [pc, #112]	; (8005a88 <HAL_TIM_IC_Start_IT+0x23c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d013      	beq.n	8005a42 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a1b      	ldr	r2, [pc, #108]	; (8005a8c <HAL_TIM_IC_Start_IT+0x240>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d00e      	beq.n	8005a42 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a19      	ldr	r2, [pc, #100]	; (8005a90 <HAL_TIM_IC_Start_IT+0x244>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d009      	beq.n	8005a42 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a18      	ldr	r2, [pc, #96]	; (8005a94 <HAL_TIM_IC_Start_IT+0x248>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d004      	beq.n	8005a42 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a16      	ldr	r2, [pc, #88]	; (8005a98 <HAL_TIM_IC_Start_IT+0x24c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d111      	bne.n	8005a66 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b06      	cmp	r3, #6
 8005a52:	d010      	beq.n	8005a76 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a64:	e007      	b.n	8005a76 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f042 0201 	orr.w	r2, r2, #1
 8005a74:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40010000 	.word	0x40010000
 8005a84:	40000400 	.word	0x40000400
 8005a88:	40000800 	.word	0x40000800
 8005a8c:	40000c00 	.word	0x40000c00
 8005a90:	40010400 	.word	0x40010400
 8005a94:	40014000 	.word	0x40014000
 8005a98:	40001800 	.word	0x40001800

08005a9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d122      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d11b      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f06f 0202 	mvn.w	r2, #2
 8005ac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	f003 0303 	and.w	r3, r3, #3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7fb f922 	bl	8000d28 <HAL_TIM_IC_CaptureCallback>
 8005ae4:	e005      	b.n	8005af2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fb4a 	bl	8006180 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fb51 	bl	8006194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f003 0304 	and.w	r3, r3, #4
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	d122      	bne.n	8005b4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d11b      	bne.n	8005b4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f06f 0204 	mvn.w	r2, #4
 8005b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2202      	movs	r2, #2
 8005b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7fb f8f8 	bl	8000d28 <HAL_TIM_IC_CaptureCallback>
 8005b38:	e005      	b.n	8005b46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fb20 	bl	8006180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 fb27 	bl	8006194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f003 0308 	and.w	r3, r3, #8
 8005b56:	2b08      	cmp	r3, #8
 8005b58:	d122      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f003 0308 	and.w	r3, r3, #8
 8005b64:	2b08      	cmp	r3, #8
 8005b66:	d11b      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f06f 0208 	mvn.w	r2, #8
 8005b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2204      	movs	r2, #4
 8005b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	f003 0303 	and.w	r3, r3, #3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7fb f8ce 	bl	8000d28 <HAL_TIM_IC_CaptureCallback>
 8005b8c:	e005      	b.n	8005b9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 faf6 	bl	8006180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 fafd 	bl	8006194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	f003 0310 	and.w	r3, r3, #16
 8005baa:	2b10      	cmp	r3, #16
 8005bac:	d122      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f003 0310 	and.w	r3, r3, #16
 8005bb8:	2b10      	cmp	r3, #16
 8005bba:	d11b      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0210 	mvn.w	r2, #16
 8005bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2208      	movs	r2, #8
 8005bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7fb f8a4 	bl	8000d28 <HAL_TIM_IC_CaptureCallback>
 8005be0:	e005      	b.n	8005bee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 facc 	bl	8006180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fad3 	bl	8006194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d10e      	bne.n	8005c20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d107      	bne.n	8005c20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f06f 0201 	mvn.w	r2, #1
 8005c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7fc f9fc 	bl	8002018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2a:	2b80      	cmp	r3, #128	; 0x80
 8005c2c:	d10e      	bne.n	8005c4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c38:	2b80      	cmp	r3, #128	; 0x80
 8005c3a:	d107      	bne.n	8005c4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 ff78 	bl	8006b3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c56:	2b40      	cmp	r3, #64	; 0x40
 8005c58:	d10e      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c64:	2b40      	cmp	r3, #64	; 0x40
 8005c66:	d107      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fa98 	bl	80061a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f003 0320 	and.w	r3, r3, #32
 8005c82:	2b20      	cmp	r3, #32
 8005c84:	d10e      	bne.n	8005ca4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f003 0320 	and.w	r3, r3, #32
 8005c90:	2b20      	cmp	r3, #32
 8005c92:	d107      	bne.n	8005ca4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f06f 0220 	mvn.w	r2, #32
 8005c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 ff42 	bl	8006b28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ca4:	bf00      	nop
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d101      	bne.n	8005cca <HAL_TIM_IC_ConfigChannel+0x1e>
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	e088      	b.n	8005ddc <HAL_TIM_IC_ConfigChannel+0x130>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d11b      	bne.n	8005d10 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6818      	ldr	r0, [r3, #0]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	6819      	ldr	r1, [r3, #0]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f000 fcb8 	bl	800665c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	699a      	ldr	r2, [r3, #24]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f022 020c 	bic.w	r2, r2, #12
 8005cfa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6999      	ldr	r1, [r3, #24]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	619a      	str	r2, [r3, #24]
 8005d0e:	e060      	b.n	8005dd2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	d11c      	bne.n	8005d50 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	6819      	ldr	r1, [r3, #0]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f000 fd3c 	bl	80067a2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	699a      	ldr	r2, [r3, #24]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005d38:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6999      	ldr	r1, [r3, #24]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	021a      	lsls	r2, r3, #8
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	619a      	str	r2, [r3, #24]
 8005d4e:	e040      	b.n	8005dd2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b08      	cmp	r3, #8
 8005d54:	d11b      	bne.n	8005d8e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6818      	ldr	r0, [r3, #0]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	6819      	ldr	r1, [r3, #0]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	f000 fd89 	bl	800687c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69da      	ldr	r2, [r3, #28]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 020c 	bic.w	r2, r2, #12
 8005d78:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69d9      	ldr	r1, [r3, #28]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	61da      	str	r2, [r3, #28]
 8005d8c:	e021      	b.n	8005dd2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b0c      	cmp	r3, #12
 8005d92:	d11c      	bne.n	8005dce <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6818      	ldr	r0, [r3, #0]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	6819      	ldr	r1, [r3, #0]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f000 fda6 	bl	80068f4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69da      	ldr	r2, [r3, #28]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005db6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	69d9      	ldr	r1, [r3, #28]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	021a      	lsls	r2, r3, #8
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	61da      	str	r2, [r3, #28]
 8005dcc:	e001      	b.n	8005dd2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d101      	bne.n	8005e02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e0ae      	b.n	8005f60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b0c      	cmp	r3, #12
 8005e0e:	f200 809f 	bhi.w	8005f50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e12:	a201      	add	r2, pc, #4	; (adr r2, 8005e18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e18:	08005e4d 	.word	0x08005e4d
 8005e1c:	08005f51 	.word	0x08005f51
 8005e20:	08005f51 	.word	0x08005f51
 8005e24:	08005f51 	.word	0x08005f51
 8005e28:	08005e8d 	.word	0x08005e8d
 8005e2c:	08005f51 	.word	0x08005f51
 8005e30:	08005f51 	.word	0x08005f51
 8005e34:	08005f51 	.word	0x08005f51
 8005e38:	08005ecf 	.word	0x08005ecf
 8005e3c:	08005f51 	.word	0x08005f51
 8005e40:	08005f51 	.word	0x08005f51
 8005e44:	08005f51 	.word	0x08005f51
 8005e48:	08005f0f 	.word	0x08005f0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68b9      	ldr	r1, [r7, #8]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 fa52 	bl	80062fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f042 0208 	orr.w	r2, r2, #8
 8005e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	699a      	ldr	r2, [r3, #24]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 0204 	bic.w	r2, r2, #4
 8005e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6999      	ldr	r1, [r3, #24]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	691a      	ldr	r2, [r3, #16]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	619a      	str	r2, [r3, #24]
      break;
 8005e8a:	e064      	b.n	8005f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68b9      	ldr	r1, [r7, #8]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 faa2 	bl	80063dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699a      	ldr	r2, [r3, #24]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699a      	ldr	r2, [r3, #24]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6999      	ldr	r1, [r3, #24]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	021a      	lsls	r2, r3, #8
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	619a      	str	r2, [r3, #24]
      break;
 8005ecc:	e043      	b.n	8005f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 faf7 	bl	80064c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69da      	ldr	r2, [r3, #28]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f042 0208 	orr.w	r2, r2, #8
 8005ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	69da      	ldr	r2, [r3, #28]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0204 	bic.w	r2, r2, #4
 8005ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69d9      	ldr	r1, [r3, #28]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	691a      	ldr	r2, [r3, #16]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	61da      	str	r2, [r3, #28]
      break;
 8005f0c:	e023      	b.n	8005f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68b9      	ldr	r1, [r7, #8]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 fb4b 	bl	80065b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69da      	ldr	r2, [r3, #28]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	69da      	ldr	r2, [r3, #28]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	69d9      	ldr	r1, [r3, #28]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	021a      	lsls	r2, r3, #8
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	61da      	str	r2, [r3, #28]
      break;
 8005f4e:	e002      	b.n	8005f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	75fb      	strb	r3, [r7, #23]
      break;
 8005f54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_TIM_ConfigClockSource+0x1c>
 8005f80:	2302      	movs	r3, #2
 8005f82:	e0b4      	b.n	80060ee <HAL_TIM_ConfigClockSource+0x186>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005faa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fbc:	d03e      	beq.n	800603c <HAL_TIM_ConfigClockSource+0xd4>
 8005fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc2:	f200 8087 	bhi.w	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fca:	f000 8086 	beq.w	80060da <HAL_TIM_ConfigClockSource+0x172>
 8005fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fd2:	d87f      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fd4:	2b70      	cmp	r3, #112	; 0x70
 8005fd6:	d01a      	beq.n	800600e <HAL_TIM_ConfigClockSource+0xa6>
 8005fd8:	2b70      	cmp	r3, #112	; 0x70
 8005fda:	d87b      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fdc:	2b60      	cmp	r3, #96	; 0x60
 8005fde:	d050      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x11a>
 8005fe0:	2b60      	cmp	r3, #96	; 0x60
 8005fe2:	d877      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fe4:	2b50      	cmp	r3, #80	; 0x50
 8005fe6:	d03c      	beq.n	8006062 <HAL_TIM_ConfigClockSource+0xfa>
 8005fe8:	2b50      	cmp	r3, #80	; 0x50
 8005fea:	d873      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fec:	2b40      	cmp	r3, #64	; 0x40
 8005fee:	d058      	beq.n	80060a2 <HAL_TIM_ConfigClockSource+0x13a>
 8005ff0:	2b40      	cmp	r3, #64	; 0x40
 8005ff2:	d86f      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ff4:	2b30      	cmp	r3, #48	; 0x30
 8005ff6:	d064      	beq.n	80060c2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ff8:	2b30      	cmp	r3, #48	; 0x30
 8005ffa:	d86b      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ffc:	2b20      	cmp	r3, #32
 8005ffe:	d060      	beq.n	80060c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006000:	2b20      	cmp	r3, #32
 8006002:	d867      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8006004:	2b00      	cmp	r3, #0
 8006006:	d05c      	beq.n	80060c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006008:	2b10      	cmp	r3, #16
 800600a:	d05a      	beq.n	80060c2 <HAL_TIM_ConfigClockSource+0x15a>
 800600c:	e062      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6818      	ldr	r0, [r3, #0]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	6899      	ldr	r1, [r3, #8]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f000 fcc1 	bl	80069a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006030:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	609a      	str	r2, [r3, #8]
      break;
 800603a:	e04f      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6818      	ldr	r0, [r3, #0]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	6899      	ldr	r1, [r3, #8]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f000 fcaa 	bl	80069a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689a      	ldr	r2, [r3, #8]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800605e:	609a      	str	r2, [r3, #8]
      break;
 8006060:	e03c      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	6859      	ldr	r1, [r3, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	461a      	mov	r2, r3
 8006070:	f000 fb68 	bl	8006744 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2150      	movs	r1, #80	; 0x50
 800607a:	4618      	mov	r0, r3
 800607c:	f000 fc77 	bl	800696e <TIM_ITRx_SetConfig>
      break;
 8006080:	e02c      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6818      	ldr	r0, [r3, #0]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	6859      	ldr	r1, [r3, #4]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	461a      	mov	r2, r3
 8006090:	f000 fbc4 	bl	800681c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2160      	movs	r1, #96	; 0x60
 800609a:	4618      	mov	r0, r3
 800609c:	f000 fc67 	bl	800696e <TIM_ITRx_SetConfig>
      break;
 80060a0:	e01c      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6818      	ldr	r0, [r3, #0]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	6859      	ldr	r1, [r3, #4]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	461a      	mov	r2, r3
 80060b0:	f000 fb48 	bl	8006744 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2140      	movs	r1, #64	; 0x40
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 fc57 	bl	800696e <TIM_ITRx_SetConfig>
      break;
 80060c0:	e00c      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4619      	mov	r1, r3
 80060cc:	4610      	mov	r0, r2
 80060ce:	f000 fc4e 	bl	800696e <TIM_ITRx_SetConfig>
      break;
 80060d2:	e003      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	73fb      	strb	r3, [r7, #15]
      break;
 80060d8:	e000      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80060da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006102:	2300      	movs	r3, #0
 8006104:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b0c      	cmp	r3, #12
 800610a:	d831      	bhi.n	8006170 <HAL_TIM_ReadCapturedValue+0x78>
 800610c:	a201      	add	r2, pc, #4	; (adr r2, 8006114 <HAL_TIM_ReadCapturedValue+0x1c>)
 800610e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006112:	bf00      	nop
 8006114:	08006149 	.word	0x08006149
 8006118:	08006171 	.word	0x08006171
 800611c:	08006171 	.word	0x08006171
 8006120:	08006171 	.word	0x08006171
 8006124:	08006153 	.word	0x08006153
 8006128:	08006171 	.word	0x08006171
 800612c:	08006171 	.word	0x08006171
 8006130:	08006171 	.word	0x08006171
 8006134:	0800615d 	.word	0x0800615d
 8006138:	08006171 	.word	0x08006171
 800613c:	08006171 	.word	0x08006171
 8006140:	08006171 	.word	0x08006171
 8006144:	08006167 	.word	0x08006167
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614e:	60fb      	str	r3, [r7, #12]

      break;
 8006150:	e00f      	b.n	8006172 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006158:	60fb      	str	r3, [r7, #12]

      break;
 800615a:	e00a      	b.n	8006172 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006162:	60fb      	str	r3, [r7, #12]

      break;
 8006164:	e005      	b.n	8006172 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616c:	60fb      	str	r3, [r7, #12]

      break;
 800616e:	e000      	b.n	8006172 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006170:	bf00      	nop
  }

  return tmpreg;
 8006172:	68fb      	ldr	r3, [r7, #12]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a40      	ldr	r2, [pc, #256]	; (80062d0 <TIM_Base_SetConfig+0x114>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d013      	beq.n	80061fc <TIM_Base_SetConfig+0x40>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061da:	d00f      	beq.n	80061fc <TIM_Base_SetConfig+0x40>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a3d      	ldr	r2, [pc, #244]	; (80062d4 <TIM_Base_SetConfig+0x118>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d00b      	beq.n	80061fc <TIM_Base_SetConfig+0x40>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a3c      	ldr	r2, [pc, #240]	; (80062d8 <TIM_Base_SetConfig+0x11c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d007      	beq.n	80061fc <TIM_Base_SetConfig+0x40>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a3b      	ldr	r2, [pc, #236]	; (80062dc <TIM_Base_SetConfig+0x120>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d003      	beq.n	80061fc <TIM_Base_SetConfig+0x40>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a3a      	ldr	r2, [pc, #232]	; (80062e0 <TIM_Base_SetConfig+0x124>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d108      	bne.n	800620e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	4313      	orrs	r3, r2
 800620c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a2f      	ldr	r2, [pc, #188]	; (80062d0 <TIM_Base_SetConfig+0x114>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d02b      	beq.n	800626e <TIM_Base_SetConfig+0xb2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621c:	d027      	beq.n	800626e <TIM_Base_SetConfig+0xb2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a2c      	ldr	r2, [pc, #176]	; (80062d4 <TIM_Base_SetConfig+0x118>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d023      	beq.n	800626e <TIM_Base_SetConfig+0xb2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a2b      	ldr	r2, [pc, #172]	; (80062d8 <TIM_Base_SetConfig+0x11c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d01f      	beq.n	800626e <TIM_Base_SetConfig+0xb2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a2a      	ldr	r2, [pc, #168]	; (80062dc <TIM_Base_SetConfig+0x120>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d01b      	beq.n	800626e <TIM_Base_SetConfig+0xb2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a29      	ldr	r2, [pc, #164]	; (80062e0 <TIM_Base_SetConfig+0x124>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d017      	beq.n	800626e <TIM_Base_SetConfig+0xb2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a28      	ldr	r2, [pc, #160]	; (80062e4 <TIM_Base_SetConfig+0x128>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d013      	beq.n	800626e <TIM_Base_SetConfig+0xb2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a27      	ldr	r2, [pc, #156]	; (80062e8 <TIM_Base_SetConfig+0x12c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d00f      	beq.n	800626e <TIM_Base_SetConfig+0xb2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a26      	ldr	r2, [pc, #152]	; (80062ec <TIM_Base_SetConfig+0x130>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d00b      	beq.n	800626e <TIM_Base_SetConfig+0xb2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a25      	ldr	r2, [pc, #148]	; (80062f0 <TIM_Base_SetConfig+0x134>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d007      	beq.n	800626e <TIM_Base_SetConfig+0xb2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a24      	ldr	r2, [pc, #144]	; (80062f4 <TIM_Base_SetConfig+0x138>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d003      	beq.n	800626e <TIM_Base_SetConfig+0xb2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a23      	ldr	r2, [pc, #140]	; (80062f8 <TIM_Base_SetConfig+0x13c>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d108      	bne.n	8006280 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	4313      	orrs	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	689a      	ldr	r2, [r3, #8]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a0a      	ldr	r2, [pc, #40]	; (80062d0 <TIM_Base_SetConfig+0x114>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d003      	beq.n	80062b4 <TIM_Base_SetConfig+0xf8>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a0c      	ldr	r2, [pc, #48]	; (80062e0 <TIM_Base_SetConfig+0x124>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d103      	bne.n	80062bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	691a      	ldr	r2, [r3, #16]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	615a      	str	r2, [r3, #20]
}
 80062c2:	bf00      	nop
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40010000 	.word	0x40010000
 80062d4:	40000400 	.word	0x40000400
 80062d8:	40000800 	.word	0x40000800
 80062dc:	40000c00 	.word	0x40000c00
 80062e0:	40010400 	.word	0x40010400
 80062e4:	40014000 	.word	0x40014000
 80062e8:	40014400 	.word	0x40014400
 80062ec:	40014800 	.word	0x40014800
 80062f0:	40001800 	.word	0x40001800
 80062f4:	40001c00 	.word	0x40001c00
 80062f8:	40002000 	.word	0x40002000

080062fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	f023 0201 	bic.w	r2, r3, #1
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 0303 	bic.w	r3, r3, #3
 8006332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f023 0302 	bic.w	r3, r3, #2
 8006344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	4313      	orrs	r3, r2
 800634e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a20      	ldr	r2, [pc, #128]	; (80063d4 <TIM_OC1_SetConfig+0xd8>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d003      	beq.n	8006360 <TIM_OC1_SetConfig+0x64>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a1f      	ldr	r2, [pc, #124]	; (80063d8 <TIM_OC1_SetConfig+0xdc>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d10c      	bne.n	800637a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f023 0308 	bic.w	r3, r3, #8
 8006366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f023 0304 	bic.w	r3, r3, #4
 8006378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a15      	ldr	r2, [pc, #84]	; (80063d4 <TIM_OC1_SetConfig+0xd8>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d003      	beq.n	800638a <TIM_OC1_SetConfig+0x8e>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a14      	ldr	r2, [pc, #80]	; (80063d8 <TIM_OC1_SetConfig+0xdc>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d111      	bne.n	80063ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	621a      	str	r2, [r3, #32]
}
 80063c8:	bf00      	nop
 80063ca:	371c      	adds	r7, #28
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	40010000 	.word	0x40010000
 80063d8:	40010400 	.word	0x40010400

080063dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	f023 0210 	bic.w	r2, r3, #16
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800640a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006412:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	021b      	lsls	r3, r3, #8
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	4313      	orrs	r3, r2
 800641e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f023 0320 	bic.w	r3, r3, #32
 8006426:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	011b      	lsls	r3, r3, #4
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a22      	ldr	r2, [pc, #136]	; (80064c0 <TIM_OC2_SetConfig+0xe4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d003      	beq.n	8006444 <TIM_OC2_SetConfig+0x68>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a21      	ldr	r2, [pc, #132]	; (80064c4 <TIM_OC2_SetConfig+0xe8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d10d      	bne.n	8006460 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800644a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	011b      	lsls	r3, r3, #4
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800645e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a17      	ldr	r2, [pc, #92]	; (80064c0 <TIM_OC2_SetConfig+0xe4>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d003      	beq.n	8006470 <TIM_OC2_SetConfig+0x94>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a16      	ldr	r2, [pc, #88]	; (80064c4 <TIM_OC2_SetConfig+0xe8>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d113      	bne.n	8006498 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006476:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800647e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	4313      	orrs	r3, r2
 800648a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	4313      	orrs	r3, r2
 8006496:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	621a      	str	r2, [r3, #32]
}
 80064b2:	bf00      	nop
 80064b4:	371c      	adds	r7, #28
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	40010000 	.word	0x40010000
 80064c4:	40010400 	.word	0x40010400

080064c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 0303 	bic.w	r3, r3, #3
 80064fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	4313      	orrs	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	021b      	lsls	r3, r3, #8
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	4313      	orrs	r3, r2
 800651c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a21      	ldr	r2, [pc, #132]	; (80065a8 <TIM_OC3_SetConfig+0xe0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d003      	beq.n	800652e <TIM_OC3_SetConfig+0x66>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a20      	ldr	r2, [pc, #128]	; (80065ac <TIM_OC3_SetConfig+0xe4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d10d      	bne.n	800654a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006534:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	021b      	lsls	r3, r3, #8
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	4313      	orrs	r3, r2
 8006540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a16      	ldr	r2, [pc, #88]	; (80065a8 <TIM_OC3_SetConfig+0xe0>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d003      	beq.n	800655a <TIM_OC3_SetConfig+0x92>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a15      	ldr	r2, [pc, #84]	; (80065ac <TIM_OC3_SetConfig+0xe4>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d113      	bne.n	8006582 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	011b      	lsls	r3, r3, #4
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	4313      	orrs	r3, r2
 8006574:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	011b      	lsls	r3, r3, #4
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	4313      	orrs	r3, r2
 8006580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	621a      	str	r2, [r3, #32]
}
 800659c:	bf00      	nop
 800659e:	371c      	adds	r7, #28
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	40010000 	.word	0x40010000
 80065ac:	40010400 	.word	0x40010400

080065b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	021b      	lsls	r3, r3, #8
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	031b      	lsls	r3, r3, #12
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	4313      	orrs	r3, r2
 8006606:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a12      	ldr	r2, [pc, #72]	; (8006654 <TIM_OC4_SetConfig+0xa4>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d003      	beq.n	8006618 <TIM_OC4_SetConfig+0x68>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a11      	ldr	r2, [pc, #68]	; (8006658 <TIM_OC4_SetConfig+0xa8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d109      	bne.n	800662c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800661e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	019b      	lsls	r3, r3, #6
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	4313      	orrs	r3, r2
 800662a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	621a      	str	r2, [r3, #32]
}
 8006646:	bf00      	nop
 8006648:	371c      	adds	r7, #28
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	40010000 	.word	0x40010000
 8006658:	40010400 	.word	0x40010400

0800665c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800665c:	b480      	push	{r7}
 800665e:	b087      	sub	sp, #28
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
 8006668:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	f023 0201 	bic.w	r2, r3, #1
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4a28      	ldr	r2, [pc, #160]	; (8006728 <TIM_TI1_SetConfig+0xcc>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d01b      	beq.n	80066c2 <TIM_TI1_SetConfig+0x66>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006690:	d017      	beq.n	80066c2 <TIM_TI1_SetConfig+0x66>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	4a25      	ldr	r2, [pc, #148]	; (800672c <TIM_TI1_SetConfig+0xd0>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d013      	beq.n	80066c2 <TIM_TI1_SetConfig+0x66>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	4a24      	ldr	r2, [pc, #144]	; (8006730 <TIM_TI1_SetConfig+0xd4>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d00f      	beq.n	80066c2 <TIM_TI1_SetConfig+0x66>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4a23      	ldr	r2, [pc, #140]	; (8006734 <TIM_TI1_SetConfig+0xd8>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d00b      	beq.n	80066c2 <TIM_TI1_SetConfig+0x66>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	4a22      	ldr	r2, [pc, #136]	; (8006738 <TIM_TI1_SetConfig+0xdc>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d007      	beq.n	80066c2 <TIM_TI1_SetConfig+0x66>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	4a21      	ldr	r2, [pc, #132]	; (800673c <TIM_TI1_SetConfig+0xe0>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d003      	beq.n	80066c2 <TIM_TI1_SetConfig+0x66>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4a20      	ldr	r2, [pc, #128]	; (8006740 <TIM_TI1_SetConfig+0xe4>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d101      	bne.n	80066c6 <TIM_TI1_SetConfig+0x6a>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <TIM_TI1_SetConfig+0x6c>
 80066c6:	2300      	movs	r3, #0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d008      	beq.n	80066de <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f023 0303 	bic.w	r3, r3, #3
 80066d2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4313      	orrs	r3, r2
 80066da:	617b      	str	r3, [r7, #20]
 80066dc:	e003      	b.n	80066e6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f043 0301 	orr.w	r3, r3, #1
 80066e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	011b      	lsls	r3, r3, #4
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f023 030a 	bic.w	r3, r3, #10
 8006700:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	f003 030a 	and.w	r3, r3, #10
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	4313      	orrs	r3, r2
 800670c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	621a      	str	r2, [r3, #32]
}
 800671a:	bf00      	nop
 800671c:	371c      	adds	r7, #28
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	40010000 	.word	0x40010000
 800672c:	40000400 	.word	0x40000400
 8006730:	40000800 	.word	0x40000800
 8006734:	40000c00 	.word	0x40000c00
 8006738:	40010400 	.word	0x40010400
 800673c:	40014000 	.word	0x40014000
 8006740:	40001800 	.word	0x40001800

08006744 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	f023 0201 	bic.w	r2, r3, #1
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800676e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	011b      	lsls	r3, r3, #4
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	4313      	orrs	r3, r2
 8006778:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f023 030a 	bic.w	r3, r3, #10
 8006780:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4313      	orrs	r3, r2
 8006788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	621a      	str	r2, [r3, #32]
}
 8006796:	bf00      	nop
 8006798:	371c      	adds	r7, #28
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b087      	sub	sp, #28
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	60f8      	str	r0, [r7, #12]
 80067aa:	60b9      	str	r1, [r7, #8]
 80067ac:	607a      	str	r2, [r7, #4]
 80067ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	f023 0210 	bic.w	r2, r3, #16
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	021b      	lsls	r3, r3, #8
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	031b      	lsls	r3, r3, #12
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	011b      	lsls	r3, r3, #4
 80067fa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	4313      	orrs	r3, r2
 8006802:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	621a      	str	r2, [r3, #32]
}
 8006810:	bf00      	nop
 8006812:	371c      	adds	r7, #28
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	f023 0210 	bic.w	r2, r3, #16
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006846:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	031b      	lsls	r3, r3, #12
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	4313      	orrs	r3, r2
 8006850:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006858:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	011b      	lsls	r3, r3, #4
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	4313      	orrs	r3, r2
 8006862:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	621a      	str	r2, [r3, #32]
}
 8006870:	bf00      	nop
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f023 0303 	bic.w	r3, r3, #3
 80068a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80068cc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	021b      	lsls	r3, r3, #8
 80068d2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	621a      	str	r2, [r3, #32]
}
 80068e8:	bf00      	nop
 80068ea:	371c      	adds	r7, #28
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6a1b      	ldr	r3, [r3, #32]
 8006918:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006920:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	021b      	lsls	r3, r3, #8
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	4313      	orrs	r3, r2
 800692a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006932:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	031b      	lsls	r3, r3, #12
 8006938:	b29b      	uxth	r3, r3
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	4313      	orrs	r3, r2
 800693e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006946:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	031b      	lsls	r3, r3, #12
 800694c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	4313      	orrs	r3, r2
 8006954:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	621a      	str	r2, [r3, #32]
}
 8006962:	bf00      	nop
 8006964:	371c      	adds	r7, #28
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800696e:	b480      	push	{r7}
 8006970:	b085      	sub	sp, #20
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006984:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4313      	orrs	r3, r2
 800698c:	f043 0307 	orr.w	r3, r3, #7
 8006990:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	609a      	str	r2, [r3, #8]
}
 8006998:	bf00      	nop
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	021a      	lsls	r2, r3, #8
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	431a      	orrs	r2, r3
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	609a      	str	r2, [r3, #8]
}
 80069d8:	bf00      	nop
 80069da:	371c      	adds	r7, #28
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f003 031f 	and.w	r3, r3, #31
 80069f6:	2201      	movs	r2, #1
 80069f8:	fa02 f303 	lsl.w	r3, r2, r3
 80069fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6a1a      	ldr	r2, [r3, #32]
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	43db      	mvns	r3, r3
 8006a06:	401a      	ands	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6a1a      	ldr	r2, [r3, #32]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f003 031f 	and.w	r3, r3, #31
 8006a16:	6879      	ldr	r1, [r7, #4]
 8006a18:	fa01 f303 	lsl.w	r3, r1, r3
 8006a1c:	431a      	orrs	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	621a      	str	r2, [r3, #32]
}
 8006a22:	bf00      	nop
 8006a24:	371c      	adds	r7, #28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
	...

08006a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a44:	2302      	movs	r3, #2
 8006a46:	e05a      	b.n	8006afe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2202      	movs	r2, #2
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a21      	ldr	r2, [pc, #132]	; (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d022      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a94:	d01d      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a1d      	ldr	r2, [pc, #116]	; (8006b10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d018      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a1b      	ldr	r2, [pc, #108]	; (8006b14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d013      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a1a      	ldr	r2, [pc, #104]	; (8006b18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d00e      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a18      	ldr	r2, [pc, #96]	; (8006b1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d009      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a17      	ldr	r2, [pc, #92]	; (8006b20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d004      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a15      	ldr	r2, [pc, #84]	; (8006b24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d10c      	bne.n	8006aec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ad8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	40010000 	.word	0x40010000
 8006b10:	40000400 	.word	0x40000400
 8006b14:	40000800 	.word	0x40000800
 8006b18:	40000c00 	.word	0x40000c00
 8006b1c:	40010400 	.word	0x40010400
 8006b20:	40014000 	.word	0x40014000
 8006b24:	40001800 	.word	0x40001800

08006b28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e03f      	b.n	8006be2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d106      	bne.n	8006b7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7fb fcb0 	bl	80024dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2224      	movs	r2, #36	; 0x24
 8006b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68da      	ldr	r2, [r3, #12]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f829 	bl	8006bec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	691a      	ldr	r2, [r3, #16]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ba8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	695a      	ldr	r2, [r3, #20]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68da      	ldr	r2, [r3, #12]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bf0:	b0c0      	sub	sp, #256	; 0x100
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c08:	68d9      	ldr	r1, [r3, #12]
 8006c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	ea40 0301 	orr.w	r3, r0, r1
 8006c14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1a:	689a      	ldr	r2, [r3, #8]
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	431a      	orrs	r2, r3
 8006c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c44:	f021 010c 	bic.w	r1, r1, #12
 8006c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c52:	430b      	orrs	r3, r1
 8006c54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c66:	6999      	ldr	r1, [r3, #24]
 8006c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	ea40 0301 	orr.w	r3, r0, r1
 8006c72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	4b8f      	ldr	r3, [pc, #572]	; (8006eb8 <UART_SetConfig+0x2cc>)
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d005      	beq.n	8006c8c <UART_SetConfig+0xa0>
 8006c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	4b8d      	ldr	r3, [pc, #564]	; (8006ebc <UART_SetConfig+0x2d0>)
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d104      	bne.n	8006c96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c8c:	f7fd ff1e 	bl	8004acc <HAL_RCC_GetPCLK2Freq>
 8006c90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c94:	e003      	b.n	8006c9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c96:	f7fd ff05 	bl	8004aa4 <HAL_RCC_GetPCLK1Freq>
 8006c9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ca8:	f040 810c 	bne.w	8006ec4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006cb6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006cba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006cbe:	4622      	mov	r2, r4
 8006cc0:	462b      	mov	r3, r5
 8006cc2:	1891      	adds	r1, r2, r2
 8006cc4:	65b9      	str	r1, [r7, #88]	; 0x58
 8006cc6:	415b      	adcs	r3, r3
 8006cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006cce:	4621      	mov	r1, r4
 8006cd0:	eb12 0801 	adds.w	r8, r2, r1
 8006cd4:	4629      	mov	r1, r5
 8006cd6:	eb43 0901 	adc.w	r9, r3, r1
 8006cda:	f04f 0200 	mov.w	r2, #0
 8006cde:	f04f 0300 	mov.w	r3, #0
 8006ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cee:	4690      	mov	r8, r2
 8006cf0:	4699      	mov	r9, r3
 8006cf2:	4623      	mov	r3, r4
 8006cf4:	eb18 0303 	adds.w	r3, r8, r3
 8006cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cfc:	462b      	mov	r3, r5
 8006cfe:	eb49 0303 	adc.w	r3, r9, r3
 8006d02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006d16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	18db      	adds	r3, r3, r3
 8006d1e:	653b      	str	r3, [r7, #80]	; 0x50
 8006d20:	4613      	mov	r3, r2
 8006d22:	eb42 0303 	adc.w	r3, r2, r3
 8006d26:	657b      	str	r3, [r7, #84]	; 0x54
 8006d28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d30:	f7f9 fe5c 	bl	80009ec <__aeabi_uldivmod>
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	4b61      	ldr	r3, [pc, #388]	; (8006ec0 <UART_SetConfig+0x2d4>)
 8006d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d3e:	095b      	lsrs	r3, r3, #5
 8006d40:	011c      	lsls	r4, r3, #4
 8006d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d46:	2200      	movs	r2, #0
 8006d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d54:	4642      	mov	r2, r8
 8006d56:	464b      	mov	r3, r9
 8006d58:	1891      	adds	r1, r2, r2
 8006d5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d5c:	415b      	adcs	r3, r3
 8006d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d64:	4641      	mov	r1, r8
 8006d66:	eb12 0a01 	adds.w	sl, r2, r1
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	eb43 0b01 	adc.w	fp, r3, r1
 8006d70:	f04f 0200 	mov.w	r2, #0
 8006d74:	f04f 0300 	mov.w	r3, #0
 8006d78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d84:	4692      	mov	sl, r2
 8006d86:	469b      	mov	fp, r3
 8006d88:	4643      	mov	r3, r8
 8006d8a:	eb1a 0303 	adds.w	r3, sl, r3
 8006d8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d92:	464b      	mov	r3, r9
 8006d94:	eb4b 0303 	adc.w	r3, fp, r3
 8006d98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006da8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006dac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006db0:	460b      	mov	r3, r1
 8006db2:	18db      	adds	r3, r3, r3
 8006db4:	643b      	str	r3, [r7, #64]	; 0x40
 8006db6:	4613      	mov	r3, r2
 8006db8:	eb42 0303 	adc.w	r3, r2, r3
 8006dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8006dbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006dc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006dc6:	f7f9 fe11 	bl	80009ec <__aeabi_uldivmod>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	4611      	mov	r1, r2
 8006dd0:	4b3b      	ldr	r3, [pc, #236]	; (8006ec0 <UART_SetConfig+0x2d4>)
 8006dd2:	fba3 2301 	umull	r2, r3, r3, r1
 8006dd6:	095b      	lsrs	r3, r3, #5
 8006dd8:	2264      	movs	r2, #100	; 0x64
 8006dda:	fb02 f303 	mul.w	r3, r2, r3
 8006dde:	1acb      	subs	r3, r1, r3
 8006de0:	00db      	lsls	r3, r3, #3
 8006de2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006de6:	4b36      	ldr	r3, [pc, #216]	; (8006ec0 <UART_SetConfig+0x2d4>)
 8006de8:	fba3 2302 	umull	r2, r3, r3, r2
 8006dec:	095b      	lsrs	r3, r3, #5
 8006dee:	005b      	lsls	r3, r3, #1
 8006df0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006df4:	441c      	add	r4, r3
 8006df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006e04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006e08:	4642      	mov	r2, r8
 8006e0a:	464b      	mov	r3, r9
 8006e0c:	1891      	adds	r1, r2, r2
 8006e0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e10:	415b      	adcs	r3, r3
 8006e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e18:	4641      	mov	r1, r8
 8006e1a:	1851      	adds	r1, r2, r1
 8006e1c:	6339      	str	r1, [r7, #48]	; 0x30
 8006e1e:	4649      	mov	r1, r9
 8006e20:	414b      	adcs	r3, r1
 8006e22:	637b      	str	r3, [r7, #52]	; 0x34
 8006e24:	f04f 0200 	mov.w	r2, #0
 8006e28:	f04f 0300 	mov.w	r3, #0
 8006e2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e30:	4659      	mov	r1, fp
 8006e32:	00cb      	lsls	r3, r1, #3
 8006e34:	4651      	mov	r1, sl
 8006e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e3a:	4651      	mov	r1, sl
 8006e3c:	00ca      	lsls	r2, r1, #3
 8006e3e:	4610      	mov	r0, r2
 8006e40:	4619      	mov	r1, r3
 8006e42:	4603      	mov	r3, r0
 8006e44:	4642      	mov	r2, r8
 8006e46:	189b      	adds	r3, r3, r2
 8006e48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e4c:	464b      	mov	r3, r9
 8006e4e:	460a      	mov	r2, r1
 8006e50:	eb42 0303 	adc.w	r3, r2, r3
 8006e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	18db      	adds	r3, r3, r3
 8006e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e72:	4613      	mov	r3, r2
 8006e74:	eb42 0303 	adc.w	r3, r2, r3
 8006e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e82:	f7f9 fdb3 	bl	80009ec <__aeabi_uldivmod>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4b0d      	ldr	r3, [pc, #52]	; (8006ec0 <UART_SetConfig+0x2d4>)
 8006e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e90:	095b      	lsrs	r3, r3, #5
 8006e92:	2164      	movs	r1, #100	; 0x64
 8006e94:	fb01 f303 	mul.w	r3, r1, r3
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	00db      	lsls	r3, r3, #3
 8006e9c:	3332      	adds	r3, #50	; 0x32
 8006e9e:	4a08      	ldr	r2, [pc, #32]	; (8006ec0 <UART_SetConfig+0x2d4>)
 8006ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea4:	095b      	lsrs	r3, r3, #5
 8006ea6:	f003 0207 	and.w	r2, r3, #7
 8006eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4422      	add	r2, r4
 8006eb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006eb4:	e105      	b.n	80070c2 <UART_SetConfig+0x4d6>
 8006eb6:	bf00      	nop
 8006eb8:	40011000 	.word	0x40011000
 8006ebc:	40011400 	.word	0x40011400
 8006ec0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ece:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ed2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006ed6:	4642      	mov	r2, r8
 8006ed8:	464b      	mov	r3, r9
 8006eda:	1891      	adds	r1, r2, r2
 8006edc:	6239      	str	r1, [r7, #32]
 8006ede:	415b      	adcs	r3, r3
 8006ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ee6:	4641      	mov	r1, r8
 8006ee8:	1854      	adds	r4, r2, r1
 8006eea:	4649      	mov	r1, r9
 8006eec:	eb43 0501 	adc.w	r5, r3, r1
 8006ef0:	f04f 0200 	mov.w	r2, #0
 8006ef4:	f04f 0300 	mov.w	r3, #0
 8006ef8:	00eb      	lsls	r3, r5, #3
 8006efa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006efe:	00e2      	lsls	r2, r4, #3
 8006f00:	4614      	mov	r4, r2
 8006f02:	461d      	mov	r5, r3
 8006f04:	4643      	mov	r3, r8
 8006f06:	18e3      	adds	r3, r4, r3
 8006f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f0c:	464b      	mov	r3, r9
 8006f0e:	eb45 0303 	adc.w	r3, r5, r3
 8006f12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f26:	f04f 0200 	mov.w	r2, #0
 8006f2a:	f04f 0300 	mov.w	r3, #0
 8006f2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f32:	4629      	mov	r1, r5
 8006f34:	008b      	lsls	r3, r1, #2
 8006f36:	4621      	mov	r1, r4
 8006f38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	008a      	lsls	r2, r1, #2
 8006f40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f44:	f7f9 fd52 	bl	80009ec <__aeabi_uldivmod>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4b60      	ldr	r3, [pc, #384]	; (80070d0 <UART_SetConfig+0x4e4>)
 8006f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f52:	095b      	lsrs	r3, r3, #5
 8006f54:	011c      	lsls	r4, r3, #4
 8006f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f68:	4642      	mov	r2, r8
 8006f6a:	464b      	mov	r3, r9
 8006f6c:	1891      	adds	r1, r2, r2
 8006f6e:	61b9      	str	r1, [r7, #24]
 8006f70:	415b      	adcs	r3, r3
 8006f72:	61fb      	str	r3, [r7, #28]
 8006f74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f78:	4641      	mov	r1, r8
 8006f7a:	1851      	adds	r1, r2, r1
 8006f7c:	6139      	str	r1, [r7, #16]
 8006f7e:	4649      	mov	r1, r9
 8006f80:	414b      	adcs	r3, r1
 8006f82:	617b      	str	r3, [r7, #20]
 8006f84:	f04f 0200 	mov.w	r2, #0
 8006f88:	f04f 0300 	mov.w	r3, #0
 8006f8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f90:	4659      	mov	r1, fp
 8006f92:	00cb      	lsls	r3, r1, #3
 8006f94:	4651      	mov	r1, sl
 8006f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f9a:	4651      	mov	r1, sl
 8006f9c:	00ca      	lsls	r2, r1, #3
 8006f9e:	4610      	mov	r0, r2
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	4642      	mov	r2, r8
 8006fa6:	189b      	adds	r3, r3, r2
 8006fa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fac:	464b      	mov	r3, r9
 8006fae:	460a      	mov	r2, r1
 8006fb0:	eb42 0303 	adc.w	r3, r2, r3
 8006fb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006fc4:	f04f 0200 	mov.w	r2, #0
 8006fc8:	f04f 0300 	mov.w	r3, #0
 8006fcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006fd0:	4649      	mov	r1, r9
 8006fd2:	008b      	lsls	r3, r1, #2
 8006fd4:	4641      	mov	r1, r8
 8006fd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fda:	4641      	mov	r1, r8
 8006fdc:	008a      	lsls	r2, r1, #2
 8006fde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006fe2:	f7f9 fd03 	bl	80009ec <__aeabi_uldivmod>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4b39      	ldr	r3, [pc, #228]	; (80070d0 <UART_SetConfig+0x4e4>)
 8006fec:	fba3 1302 	umull	r1, r3, r3, r2
 8006ff0:	095b      	lsrs	r3, r3, #5
 8006ff2:	2164      	movs	r1, #100	; 0x64
 8006ff4:	fb01 f303 	mul.w	r3, r1, r3
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	011b      	lsls	r3, r3, #4
 8006ffc:	3332      	adds	r3, #50	; 0x32
 8006ffe:	4a34      	ldr	r2, [pc, #208]	; (80070d0 <UART_SetConfig+0x4e4>)
 8007000:	fba2 2303 	umull	r2, r3, r2, r3
 8007004:	095b      	lsrs	r3, r3, #5
 8007006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800700a:	441c      	add	r4, r3
 800700c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007010:	2200      	movs	r2, #0
 8007012:	673b      	str	r3, [r7, #112]	; 0x70
 8007014:	677a      	str	r2, [r7, #116]	; 0x74
 8007016:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800701a:	4642      	mov	r2, r8
 800701c:	464b      	mov	r3, r9
 800701e:	1891      	adds	r1, r2, r2
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	415b      	adcs	r3, r3
 8007024:	60fb      	str	r3, [r7, #12]
 8007026:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800702a:	4641      	mov	r1, r8
 800702c:	1851      	adds	r1, r2, r1
 800702e:	6039      	str	r1, [r7, #0]
 8007030:	4649      	mov	r1, r9
 8007032:	414b      	adcs	r3, r1
 8007034:	607b      	str	r3, [r7, #4]
 8007036:	f04f 0200 	mov.w	r2, #0
 800703a:	f04f 0300 	mov.w	r3, #0
 800703e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007042:	4659      	mov	r1, fp
 8007044:	00cb      	lsls	r3, r1, #3
 8007046:	4651      	mov	r1, sl
 8007048:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800704c:	4651      	mov	r1, sl
 800704e:	00ca      	lsls	r2, r1, #3
 8007050:	4610      	mov	r0, r2
 8007052:	4619      	mov	r1, r3
 8007054:	4603      	mov	r3, r0
 8007056:	4642      	mov	r2, r8
 8007058:	189b      	adds	r3, r3, r2
 800705a:	66bb      	str	r3, [r7, #104]	; 0x68
 800705c:	464b      	mov	r3, r9
 800705e:	460a      	mov	r2, r1
 8007060:	eb42 0303 	adc.w	r3, r2, r3
 8007064:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	663b      	str	r3, [r7, #96]	; 0x60
 8007070:	667a      	str	r2, [r7, #100]	; 0x64
 8007072:	f04f 0200 	mov.w	r2, #0
 8007076:	f04f 0300 	mov.w	r3, #0
 800707a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800707e:	4649      	mov	r1, r9
 8007080:	008b      	lsls	r3, r1, #2
 8007082:	4641      	mov	r1, r8
 8007084:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007088:	4641      	mov	r1, r8
 800708a:	008a      	lsls	r2, r1, #2
 800708c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007090:	f7f9 fcac 	bl	80009ec <__aeabi_uldivmod>
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4b0d      	ldr	r3, [pc, #52]	; (80070d0 <UART_SetConfig+0x4e4>)
 800709a:	fba3 1302 	umull	r1, r3, r3, r2
 800709e:	095b      	lsrs	r3, r3, #5
 80070a0:	2164      	movs	r1, #100	; 0x64
 80070a2:	fb01 f303 	mul.w	r3, r1, r3
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	011b      	lsls	r3, r3, #4
 80070aa:	3332      	adds	r3, #50	; 0x32
 80070ac:	4a08      	ldr	r2, [pc, #32]	; (80070d0 <UART_SetConfig+0x4e4>)
 80070ae:	fba2 2303 	umull	r2, r3, r2, r3
 80070b2:	095b      	lsrs	r3, r3, #5
 80070b4:	f003 020f 	and.w	r2, r3, #15
 80070b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4422      	add	r2, r4
 80070c0:	609a      	str	r2, [r3, #8]
}
 80070c2:	bf00      	nop
 80070c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80070c8:	46bd      	mov	sp, r7
 80070ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070ce:	bf00      	nop
 80070d0:	51eb851f 	.word	0x51eb851f

080070d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	4603      	mov	r3, r0
 80070dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80070e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070e6:	2b84      	cmp	r3, #132	; 0x84
 80070e8:	d005      	beq.n	80070f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80070ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	4413      	add	r3, r2
 80070f2:	3303      	adds	r3, #3
 80070f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80070f6:	68fb      	ldr	r3, [r7, #12]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007108:	f000 feb0 	bl	8007e6c <vTaskStartScheduler>
  
  return osOK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	bd80      	pop	{r7, pc}

08007112 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007112:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007114:	b089      	sub	sp, #36	; 0x24
 8007116:	af04      	add	r7, sp, #16
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d020      	beq.n	8007166 <osThreadCreate+0x54>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d01c      	beq.n	8007166 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685c      	ldr	r4, [r3, #4]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681d      	ldr	r5, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	691e      	ldr	r6, [r3, #16]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800713e:	4618      	mov	r0, r3
 8007140:	f7ff ffc8 	bl	80070d4 <makeFreeRtosPriority>
 8007144:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800714e:	9202      	str	r2, [sp, #8]
 8007150:	9301      	str	r3, [sp, #4]
 8007152:	9100      	str	r1, [sp, #0]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	4632      	mov	r2, r6
 8007158:	4629      	mov	r1, r5
 800715a:	4620      	mov	r0, r4
 800715c:	f000 fca8 	bl	8007ab0 <xTaskCreateStatic>
 8007160:	4603      	mov	r3, r0
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	e01c      	b.n	80071a0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685c      	ldr	r4, [r3, #4]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007172:	b29e      	uxth	r6, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800717a:	4618      	mov	r0, r3
 800717c:	f7ff ffaa 	bl	80070d4 <makeFreeRtosPriority>
 8007180:	4602      	mov	r2, r0
 8007182:	f107 030c 	add.w	r3, r7, #12
 8007186:	9301      	str	r3, [sp, #4]
 8007188:	9200      	str	r2, [sp, #0]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	4632      	mov	r2, r6
 800718e:	4629      	mov	r1, r5
 8007190:	4620      	mov	r0, r4
 8007192:	f000 fcea 	bl	8007b6a <xTaskCreate>
 8007196:	4603      	mov	r3, r0
 8007198:	2b01      	cmp	r3, #1
 800719a:	d001      	beq.n	80071a0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800719c:	2300      	movs	r3, #0
 800719e:	e000      	b.n	80071a2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80071a0:	68fb      	ldr	r3, [r7, #12]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071aa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80071aa:	b480      	push	{r7}
 80071ac:	b083      	sub	sp, #12
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f103 0208 	add.w	r2, r3, #8
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071c2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f103 0208 	add.w	r2, r3, #8
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f103 0208 	add.w	r2, r3, #8
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071de:	bf00      	nop
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071ea:	b480      	push	{r7}
 80071ec:	b083      	sub	sp, #12
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	689a      	ldr	r2, [r3, #8]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	601a      	str	r2, [r3, #0]
}
 8007240:	bf00      	nop
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007262:	d103      	bne.n	800726c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	60fb      	str	r3, [r7, #12]
 800726a:	e00c      	b.n	8007286 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	3308      	adds	r3, #8
 8007270:	60fb      	str	r3, [r7, #12]
 8007272:	e002      	b.n	800727a <vListInsert+0x2e>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	60fb      	str	r3, [r7, #12]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	429a      	cmp	r2, r3
 8007284:	d2f6      	bcs.n	8007274 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	685a      	ldr	r2, [r3, #4]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	601a      	str	r2, [r3, #0]
}
 80072b2:	bf00      	nop
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80072be:	b480      	push	{r7}
 80072c0:	b085      	sub	sp, #20
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	6892      	ldr	r2, [r2, #8]
 80072d4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	6852      	ldr	r2, [r2, #4]
 80072de:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d103      	bne.n	80072f2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	689a      	ldr	r2, [r3, #8]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	1e5a      	subs	r2, r3, #1
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
	...

08007314 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10a      	bne.n	800733e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800733a:	bf00      	nop
 800733c:	e7fe      	b.n	800733c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800733e:	f001 fe11 	bl	8008f64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734a:	68f9      	ldr	r1, [r7, #12]
 800734c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800734e:	fb01 f303 	mul.w	r3, r1, r3
 8007352:	441a      	add	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800736e:	3b01      	subs	r3, #1
 8007370:	68f9      	ldr	r1, [r7, #12]
 8007372:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007374:	fb01 f303 	mul.w	r3, r1, r3
 8007378:	441a      	add	r2, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	22ff      	movs	r2, #255	; 0xff
 8007382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	22ff      	movs	r2, #255	; 0xff
 800738a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d114      	bne.n	80073be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d01a      	beq.n	80073d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	3310      	adds	r3, #16
 80073a0:	4618      	mov	r0, r3
 80073a2:	f000 ffb5 	bl	8008310 <xTaskRemoveFromEventList>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d012      	beq.n	80073d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80073ac:	4b0c      	ldr	r3, [pc, #48]	; (80073e0 <xQueueGenericReset+0xcc>)
 80073ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	e009      	b.n	80073d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	3310      	adds	r3, #16
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7ff fef1 	bl	80071aa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	3324      	adds	r3, #36	; 0x24
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7ff feec 	bl	80071aa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80073d2:	f001 fdf7 	bl	8008fc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80073d6:	2301      	movs	r3, #1
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	e000ed04 	.word	0xe000ed04

080073e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b08a      	sub	sp, #40	; 0x28
 80073e8:	af02      	add	r7, sp, #8
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	4613      	mov	r3, r2
 80073f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10a      	bne.n	800740e <xQueueGenericCreate+0x2a>
	__asm volatile
 80073f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	613b      	str	r3, [r7, #16]
}
 800740a:	bf00      	nop
 800740c:	e7fe      	b.n	800740c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	fb02 f303 	mul.w	r3, r2, r3
 8007416:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	3348      	adds	r3, #72	; 0x48
 800741c:	4618      	mov	r0, r3
 800741e:	f001 fe83 	bl	8009128 <pvPortMalloc>
 8007422:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d011      	beq.n	800744e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	3348      	adds	r3, #72	; 0x48
 8007432:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800743c:	79fa      	ldrb	r2, [r7, #7]
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	4613      	mov	r3, r2
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	68b9      	ldr	r1, [r7, #8]
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f000 f805 	bl	8007458 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800744e:	69bb      	ldr	r3, [r7, #24]
	}
 8007450:	4618      	mov	r0, r3
 8007452:	3720      	adds	r7, #32
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
 8007464:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d103      	bne.n	8007474 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	e002      	b.n	800747a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007486:	2101      	movs	r1, #1
 8007488:	69b8      	ldr	r0, [r7, #24]
 800748a:	f7ff ff43 	bl	8007314 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800748e:	bf00      	nop
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b08e      	sub	sp, #56	; 0x38
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80074a6:	2300      	movs	r3, #0
 80074a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80074ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10a      	bne.n	80074ca <xQueueGenericSend+0x32>
	__asm volatile
 80074b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b8:	f383 8811 	msr	BASEPRI, r3
 80074bc:	f3bf 8f6f 	isb	sy
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80074c6:	bf00      	nop
 80074c8:	e7fe      	b.n	80074c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d103      	bne.n	80074d8 <xQueueGenericSend+0x40>
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <xQueueGenericSend+0x44>
 80074d8:	2301      	movs	r3, #1
 80074da:	e000      	b.n	80074de <xQueueGenericSend+0x46>
 80074dc:	2300      	movs	r3, #0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10a      	bne.n	80074f8 <xQueueGenericSend+0x60>
	__asm volatile
 80074e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e6:	f383 8811 	msr	BASEPRI, r3
 80074ea:	f3bf 8f6f 	isb	sy
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80074f4:	bf00      	nop
 80074f6:	e7fe      	b.n	80074f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d103      	bne.n	8007506 <xQueueGenericSend+0x6e>
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007502:	2b01      	cmp	r3, #1
 8007504:	d101      	bne.n	800750a <xQueueGenericSend+0x72>
 8007506:	2301      	movs	r3, #1
 8007508:	e000      	b.n	800750c <xQueueGenericSend+0x74>
 800750a:	2300      	movs	r3, #0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10a      	bne.n	8007526 <xQueueGenericSend+0x8e>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	623b      	str	r3, [r7, #32]
}
 8007522:	bf00      	nop
 8007524:	e7fe      	b.n	8007524 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007526:	f001 f8b3 	bl	8008690 <xTaskGetSchedulerState>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d102      	bne.n	8007536 <xQueueGenericSend+0x9e>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <xQueueGenericSend+0xa2>
 8007536:	2301      	movs	r3, #1
 8007538:	e000      	b.n	800753c <xQueueGenericSend+0xa4>
 800753a:	2300      	movs	r3, #0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10a      	bne.n	8007556 <xQueueGenericSend+0xbe>
	__asm volatile
 8007540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007544:	f383 8811 	msr	BASEPRI, r3
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	61fb      	str	r3, [r7, #28]
}
 8007552:	bf00      	nop
 8007554:	e7fe      	b.n	8007554 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007556:	f001 fd05 	bl	8008f64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800755a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007562:	429a      	cmp	r2, r3
 8007564:	d302      	bcc.n	800756c <xQueueGenericSend+0xd4>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b02      	cmp	r3, #2
 800756a:	d129      	bne.n	80075c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	68b9      	ldr	r1, [r7, #8]
 8007570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007572:	f000 f9b3 	bl	80078dc <prvCopyDataToQueue>
 8007576:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757c:	2b00      	cmp	r3, #0
 800757e:	d010      	beq.n	80075a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007582:	3324      	adds	r3, #36	; 0x24
 8007584:	4618      	mov	r0, r3
 8007586:	f000 fec3 	bl	8008310 <xTaskRemoveFromEventList>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d013      	beq.n	80075b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007590:	4b3f      	ldr	r3, [pc, #252]	; (8007690 <xQueueGenericSend+0x1f8>)
 8007592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	e00a      	b.n	80075b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d007      	beq.n	80075b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80075a8:	4b39      	ldr	r3, [pc, #228]	; (8007690 <xQueueGenericSend+0x1f8>)
 80075aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80075b8:	f001 fd04 	bl	8008fc4 <vPortExitCritical>
				return pdPASS;
 80075bc:	2301      	movs	r3, #1
 80075be:	e063      	b.n	8007688 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d103      	bne.n	80075ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075c6:	f001 fcfd 	bl	8008fc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80075ca:	2300      	movs	r3, #0
 80075cc:	e05c      	b.n	8007688 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d106      	bne.n	80075e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075d4:	f107 0314 	add.w	r3, r7, #20
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 fefb 	bl	80083d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075de:	2301      	movs	r3, #1
 80075e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075e2:	f001 fcef 	bl	8008fc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075e6:	f000 fcab 	bl	8007f40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075ea:	f001 fcbb 	bl	8008f64 <vPortEnterCritical>
 80075ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075f4:	b25b      	sxtb	r3, r3
 80075f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075fa:	d103      	bne.n	8007604 <xQueueGenericSend+0x16c>
 80075fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007606:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800760a:	b25b      	sxtb	r3, r3
 800760c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007610:	d103      	bne.n	800761a <xQueueGenericSend+0x182>
 8007612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800761a:	f001 fcd3 	bl	8008fc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800761e:	1d3a      	adds	r2, r7, #4
 8007620:	f107 0314 	add.w	r3, r7, #20
 8007624:	4611      	mov	r1, r2
 8007626:	4618      	mov	r0, r3
 8007628:	f000 feea 	bl	8008400 <xTaskCheckForTimeOut>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d124      	bne.n	800767c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007634:	f000 fa24 	bl	8007a80 <prvIsQueueFull>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d018      	beq.n	8007670 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	3310      	adds	r3, #16
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	4611      	mov	r1, r2
 8007646:	4618      	mov	r0, r3
 8007648:	f000 fe3e 	bl	80082c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800764c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800764e:	f000 f9af 	bl	80079b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007652:	f000 fc83 	bl	8007f5c <xTaskResumeAll>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	f47f af7c 	bne.w	8007556 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800765e:	4b0c      	ldr	r3, [pc, #48]	; (8007690 <xQueueGenericSend+0x1f8>)
 8007660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007664:	601a      	str	r2, [r3, #0]
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	e772      	b.n	8007556 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007672:	f000 f99d 	bl	80079b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007676:	f000 fc71 	bl	8007f5c <xTaskResumeAll>
 800767a:	e76c      	b.n	8007556 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800767c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800767e:	f000 f997 	bl	80079b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007682:	f000 fc6b 	bl	8007f5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007686:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007688:	4618      	mov	r0, r3
 800768a:	3738      	adds	r7, #56	; 0x38
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	e000ed04 	.word	0xe000ed04

08007694 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b08e      	sub	sp, #56	; 0x38
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800769e:	2300      	movs	r3, #0
 80076a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80076a6:	2300      	movs	r3, #0
 80076a8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80076aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10a      	bne.n	80076c6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	623b      	str	r3, [r7, #32]
}
 80076c2:	bf00      	nop
 80076c4:	e7fe      	b.n	80076c4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80076c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00a      	beq.n	80076e4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80076ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	61fb      	str	r3, [r7, #28]
}
 80076e0:	bf00      	nop
 80076e2:	e7fe      	b.n	80076e2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076e4:	f000 ffd4 	bl	8008690 <xTaskGetSchedulerState>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d102      	bne.n	80076f4 <xQueueSemaphoreTake+0x60>
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <xQueueSemaphoreTake+0x64>
 80076f4:	2301      	movs	r3, #1
 80076f6:	e000      	b.n	80076fa <xQueueSemaphoreTake+0x66>
 80076f8:	2300      	movs	r3, #0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10a      	bne.n	8007714 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80076fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	61bb      	str	r3, [r7, #24]
}
 8007710:	bf00      	nop
 8007712:	e7fe      	b.n	8007712 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007714:	f001 fc26 	bl	8008f64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800771e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007720:	2b00      	cmp	r3, #0
 8007722:	d024      	beq.n	800776e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007726:	1e5a      	subs	r2, r3, #1
 8007728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800772c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d104      	bne.n	800773e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007734:	f001 f954 	bl	80089e0 <pvTaskIncrementMutexHeldCount>
 8007738:	4602      	mov	r2, r0
 800773a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800773e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00f      	beq.n	8007766 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007748:	3310      	adds	r3, #16
 800774a:	4618      	mov	r0, r3
 800774c:	f000 fde0 	bl	8008310 <xTaskRemoveFromEventList>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d007      	beq.n	8007766 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007756:	4b54      	ldr	r3, [pc, #336]	; (80078a8 <xQueueSemaphoreTake+0x214>)
 8007758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007766:	f001 fc2d 	bl	8008fc4 <vPortExitCritical>
				return pdPASS;
 800776a:	2301      	movs	r3, #1
 800776c:	e097      	b.n	800789e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d111      	bne.n	8007798 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800777a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	617b      	str	r3, [r7, #20]
}
 800778c:	bf00      	nop
 800778e:	e7fe      	b.n	800778e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007790:	f001 fc18 	bl	8008fc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007794:	2300      	movs	r3, #0
 8007796:	e082      	b.n	800789e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779a:	2b00      	cmp	r3, #0
 800779c:	d106      	bne.n	80077ac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800779e:	f107 030c 	add.w	r3, r7, #12
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 fe16 	bl	80083d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077a8:	2301      	movs	r3, #1
 80077aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077ac:	f001 fc0a 	bl	8008fc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077b0:	f000 fbc6 	bl	8007f40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077b4:	f001 fbd6 	bl	8008f64 <vPortEnterCritical>
 80077b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077be:	b25b      	sxtb	r3, r3
 80077c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077c4:	d103      	bne.n	80077ce <xQueueSemaphoreTake+0x13a>
 80077c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077d4:	b25b      	sxtb	r3, r3
 80077d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077da:	d103      	bne.n	80077e4 <xQueueSemaphoreTake+0x150>
 80077dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077e4:	f001 fbee 	bl	8008fc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077e8:	463a      	mov	r2, r7
 80077ea:	f107 030c 	add.w	r3, r7, #12
 80077ee:	4611      	mov	r1, r2
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 fe05 	bl	8008400 <xTaskCheckForTimeOut>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d132      	bne.n	8007862 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077fe:	f000 f929 	bl	8007a54 <prvIsQueueEmpty>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d026      	beq.n	8007856 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d109      	bne.n	8007824 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007810:	f001 fba8 	bl	8008f64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	4618      	mov	r0, r3
 800781a:	f000 ff57 	bl	80086cc <xTaskPriorityInherit>
 800781e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007820:	f001 fbd0 	bl	8008fc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007826:	3324      	adds	r3, #36	; 0x24
 8007828:	683a      	ldr	r2, [r7, #0]
 800782a:	4611      	mov	r1, r2
 800782c:	4618      	mov	r0, r3
 800782e:	f000 fd4b 	bl	80082c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007832:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007834:	f000 f8bc 	bl	80079b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007838:	f000 fb90 	bl	8007f5c <xTaskResumeAll>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	f47f af68 	bne.w	8007714 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007844:	4b18      	ldr	r3, [pc, #96]	; (80078a8 <xQueueSemaphoreTake+0x214>)
 8007846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800784a:	601a      	str	r2, [r3, #0]
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	f3bf 8f6f 	isb	sy
 8007854:	e75e      	b.n	8007714 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007856:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007858:	f000 f8aa 	bl	80079b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800785c:	f000 fb7e 	bl	8007f5c <xTaskResumeAll>
 8007860:	e758      	b.n	8007714 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007862:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007864:	f000 f8a4 	bl	80079b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007868:	f000 fb78 	bl	8007f5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800786c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800786e:	f000 f8f1 	bl	8007a54 <prvIsQueueEmpty>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	f43f af4d 	beq.w	8007714 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800787a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00d      	beq.n	800789c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007880:	f001 fb70 	bl	8008f64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007884:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007886:	f000 f811 	bl	80078ac <prvGetDisinheritPriorityAfterTimeout>
 800788a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800788c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007892:	4618      	mov	r0, r3
 8007894:	f001 f816 	bl	80088c4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007898:	f001 fb94 	bl	8008fc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800789c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3738      	adds	r7, #56	; 0x38
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	e000ed04 	.word	0xe000ed04

080078ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d006      	beq.n	80078ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f1c3 0307 	rsb	r3, r3, #7
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	e001      	b.n	80078ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80078ca:	2300      	movs	r3, #0
 80078cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80078ce:	68fb      	ldr	r3, [r7, #12]
	}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3714      	adds	r7, #20
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80078e8:	2300      	movs	r3, #0
 80078ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10d      	bne.n	8007916 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d14d      	bne.n	800799e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	4618      	mov	r0, r3
 8007908:	f000 ff56 	bl	80087b8 <xTaskPriorityDisinherit>
 800790c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	609a      	str	r2, [r3, #8]
 8007914:	e043      	b.n	800799e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d119      	bne.n	8007950 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6858      	ldr	r0, [r3, #4]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007924:	461a      	mov	r2, r3
 8007926:	68b9      	ldr	r1, [r7, #8]
 8007928:	f004 ffc6 	bl	800c8b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	685a      	ldr	r2, [r3, #4]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007934:	441a      	add	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	429a      	cmp	r2, r3
 8007944:	d32b      	bcc.n	800799e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	605a      	str	r2, [r3, #4]
 800794e:	e026      	b.n	800799e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	68d8      	ldr	r0, [r3, #12]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007958:	461a      	mov	r2, r3
 800795a:	68b9      	ldr	r1, [r7, #8]
 800795c:	f004 ffac 	bl	800c8b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	68da      	ldr	r2, [r3, #12]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007968:	425b      	negs	r3, r3
 800796a:	441a      	add	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	68da      	ldr	r2, [r3, #12]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	429a      	cmp	r2, r3
 800797a:	d207      	bcs.n	800798c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007984:	425b      	negs	r3, r3
 8007986:	441a      	add	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2b02      	cmp	r3, #2
 8007990:	d105      	bne.n	800799e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d002      	beq.n	800799e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	3b01      	subs	r3, #1
 800799c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	1c5a      	adds	r2, r3, #1
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80079a6:	697b      	ldr	r3, [r7, #20]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3718      	adds	r7, #24
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80079b8:	f001 fad4 	bl	8008f64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079c4:	e011      	b.n	80079ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d012      	beq.n	80079f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	3324      	adds	r3, #36	; 0x24
 80079d2:	4618      	mov	r0, r3
 80079d4:	f000 fc9c 	bl	8008310 <xTaskRemoveFromEventList>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80079de:	f000 fd71 	bl	80084c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
 80079e4:	3b01      	subs	r3, #1
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	dce9      	bgt.n	80079c6 <prvUnlockQueue+0x16>
 80079f2:	e000      	b.n	80079f6 <prvUnlockQueue+0x46>
					break;
 80079f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	22ff      	movs	r2, #255	; 0xff
 80079fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80079fe:	f001 fae1 	bl	8008fc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007a02:	f001 faaf 	bl	8008f64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a0e:	e011      	b.n	8007a34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d012      	beq.n	8007a3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	3310      	adds	r3, #16
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f000 fc77 	bl	8008310 <xTaskRemoveFromEventList>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d001      	beq.n	8007a2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007a28:	f000 fd4c 	bl	80084c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	dce9      	bgt.n	8007a10 <prvUnlockQueue+0x60>
 8007a3c:	e000      	b.n	8007a40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007a3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	22ff      	movs	r2, #255	; 0xff
 8007a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007a48:	f001 fabc 	bl	8008fc4 <vPortExitCritical>
}
 8007a4c:	bf00      	nop
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a5c:	f001 fa82 	bl	8008f64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d102      	bne.n	8007a6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	e001      	b.n	8007a72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a72:	f001 faa7 	bl	8008fc4 <vPortExitCritical>

	return xReturn;
 8007a76:	68fb      	ldr	r3, [r7, #12]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a88:	f001 fa6c 	bl	8008f64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d102      	bne.n	8007a9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	60fb      	str	r3, [r7, #12]
 8007a9c:	e001      	b.n	8007aa2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007aa2:	f001 fa8f 	bl	8008fc4 <vPortExitCritical>

	return xReturn;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b08e      	sub	sp, #56	; 0x38
 8007ab4:	af04      	add	r7, sp, #16
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
 8007abc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10a      	bne.n	8007ada <xTaskCreateStatic+0x2a>
	__asm volatile
 8007ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac8:	f383 8811 	msr	BASEPRI, r3
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	623b      	str	r3, [r7, #32]
}
 8007ad6:	bf00      	nop
 8007ad8:	e7fe      	b.n	8007ad8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10a      	bne.n	8007af6 <xTaskCreateStatic+0x46>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	61fb      	str	r3, [r7, #28]
}
 8007af2:	bf00      	nop
 8007af4:	e7fe      	b.n	8007af4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007af6:	23b4      	movs	r3, #180	; 0xb4
 8007af8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	2bb4      	cmp	r3, #180	; 0xb4
 8007afe:	d00a      	beq.n	8007b16 <xTaskCreateStatic+0x66>
	__asm volatile
 8007b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b04:	f383 8811 	msr	BASEPRI, r3
 8007b08:	f3bf 8f6f 	isb	sy
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	61bb      	str	r3, [r7, #24]
}
 8007b12:	bf00      	nop
 8007b14:	e7fe      	b.n	8007b14 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007b16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d01e      	beq.n	8007b5c <xTaskCreateStatic+0xac>
 8007b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d01b      	beq.n	8007b5c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b30:	2202      	movs	r2, #2
 8007b32:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b36:	2300      	movs	r3, #0
 8007b38:	9303      	str	r3, [sp, #12]
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3c:	9302      	str	r3, [sp, #8]
 8007b3e:	f107 0314 	add.w	r3, r7, #20
 8007b42:	9301      	str	r3, [sp, #4]
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	68b9      	ldr	r1, [r7, #8]
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f000 f850 	bl	8007bf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b56:	f000 f8eb 	bl	8007d30 <prvAddNewTaskToReadyList>
 8007b5a:	e001      	b.n	8007b60 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b60:	697b      	ldr	r3, [r7, #20]
	}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3728      	adds	r7, #40	; 0x28
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b08c      	sub	sp, #48	; 0x30
 8007b6e:	af04      	add	r7, sp, #16
 8007b70:	60f8      	str	r0, [r7, #12]
 8007b72:	60b9      	str	r1, [r7, #8]
 8007b74:	603b      	str	r3, [r7, #0]
 8007b76:	4613      	mov	r3, r2
 8007b78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007b7a:	88fb      	ldrh	r3, [r7, #6]
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f001 fad2 	bl	8009128 <pvPortMalloc>
 8007b84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00e      	beq.n	8007baa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007b8c:	20b4      	movs	r0, #180	; 0xb4
 8007b8e:	f001 facb 	bl	8009128 <pvPortMalloc>
 8007b92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d003      	beq.n	8007ba2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	631a      	str	r2, [r3, #48]	; 0x30
 8007ba0:	e005      	b.n	8007bae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ba2:	6978      	ldr	r0, [r7, #20]
 8007ba4:	f001 fb8c 	bl	80092c0 <vPortFree>
 8007ba8:	e001      	b.n	8007bae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007baa:	2300      	movs	r3, #0
 8007bac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d017      	beq.n	8007be4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007bbc:	88fa      	ldrh	r2, [r7, #6]
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	9303      	str	r3, [sp, #12]
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	9302      	str	r3, [sp, #8]
 8007bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc8:	9301      	str	r3, [sp, #4]
 8007bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	68b9      	ldr	r1, [r7, #8]
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f000 f80e 	bl	8007bf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bd8:	69f8      	ldr	r0, [r7, #28]
 8007bda:	f000 f8a9 	bl	8007d30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007bde:	2301      	movs	r3, #1
 8007be0:	61bb      	str	r3, [r7, #24]
 8007be2:	e002      	b.n	8007bea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007be4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007be8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007bea:	69bb      	ldr	r3, [r7, #24]
	}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3720      	adds	r7, #32
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b088      	sub	sp, #32
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
 8007c00:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	f023 0307 	bic.w	r3, r3, #7
 8007c1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	f003 0307 	and.w	r3, r3, #7
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00a      	beq.n	8007c3c <prvInitialiseNewTask+0x48>
	__asm volatile
 8007c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2a:	f383 8811 	msr	BASEPRI, r3
 8007c2e:	f3bf 8f6f 	isb	sy
 8007c32:	f3bf 8f4f 	dsb	sy
 8007c36:	617b      	str	r3, [r7, #20]
}
 8007c38:	bf00      	nop
 8007c3a:	e7fe      	b.n	8007c3a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d01f      	beq.n	8007c82 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c42:	2300      	movs	r3, #0
 8007c44:	61fb      	str	r3, [r7, #28]
 8007c46:	e012      	b.n	8007c6e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	7819      	ldrb	r1, [r3, #0]
 8007c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	4413      	add	r3, r2
 8007c56:	3334      	adds	r3, #52	; 0x34
 8007c58:	460a      	mov	r2, r1
 8007c5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	4413      	add	r3, r2
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d006      	beq.n	8007c76 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	61fb      	str	r3, [r7, #28]
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	2b0f      	cmp	r3, #15
 8007c72:	d9e9      	bls.n	8007c48 <prvInitialiseNewTask+0x54>
 8007c74:	e000      	b.n	8007c78 <prvInitialiseNewTask+0x84>
			{
				break;
 8007c76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c80:	e003      	b.n	8007c8a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8c:	2b06      	cmp	r3, #6
 8007c8e:	d901      	bls.n	8007c94 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c90:	2306      	movs	r3, #6
 8007c92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c9e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca8:	3304      	adds	r3, #4
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7ff fa9d 	bl	80071ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb2:	3318      	adds	r3, #24
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7ff fa98 	bl	80071ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc2:	f1c3 0207 	rsb	r2, r3, #7
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce2:	334c      	adds	r3, #76	; 0x4c
 8007ce4:	2260      	movs	r2, #96	; 0x60
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f004 fdf3 	bl	800c8d4 <memset>
 8007cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf0:	4a0c      	ldr	r2, [pc, #48]	; (8007d24 <prvInitialiseNewTask+0x130>)
 8007cf2:	651a      	str	r2, [r3, #80]	; 0x50
 8007cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf6:	4a0c      	ldr	r2, [pc, #48]	; (8007d28 <prvInitialiseNewTask+0x134>)
 8007cf8:	655a      	str	r2, [r3, #84]	; 0x54
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfc:	4a0b      	ldr	r2, [pc, #44]	; (8007d2c <prvInitialiseNewTask+0x138>)
 8007cfe:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	68f9      	ldr	r1, [r7, #12]
 8007d04:	69b8      	ldr	r0, [r7, #24]
 8007d06:	f001 f803 	bl	8008d10 <pxPortInitialiseStack>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d002      	beq.n	8007d1c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d1c:	bf00      	nop
 8007d1e:	3720      	adds	r7, #32
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	0800cebc 	.word	0x0800cebc
 8007d28:	0800cedc 	.word	0x0800cedc
 8007d2c:	0800ce9c 	.word	0x0800ce9c

08007d30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d38:	f001 f914 	bl	8008f64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d3c:	4b2a      	ldr	r3, [pc, #168]	; (8007de8 <prvAddNewTaskToReadyList+0xb8>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3301      	adds	r3, #1
 8007d42:	4a29      	ldr	r2, [pc, #164]	; (8007de8 <prvAddNewTaskToReadyList+0xb8>)
 8007d44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d46:	4b29      	ldr	r3, [pc, #164]	; (8007dec <prvAddNewTaskToReadyList+0xbc>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d109      	bne.n	8007d62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d4e:	4a27      	ldr	r2, [pc, #156]	; (8007dec <prvAddNewTaskToReadyList+0xbc>)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d54:	4b24      	ldr	r3, [pc, #144]	; (8007de8 <prvAddNewTaskToReadyList+0xb8>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d110      	bne.n	8007d7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d5c:	f000 fbd6 	bl	800850c <prvInitialiseTaskLists>
 8007d60:	e00d      	b.n	8007d7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d62:	4b23      	ldr	r3, [pc, #140]	; (8007df0 <prvAddNewTaskToReadyList+0xc0>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d109      	bne.n	8007d7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d6a:	4b20      	ldr	r3, [pc, #128]	; (8007dec <prvAddNewTaskToReadyList+0xbc>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d802      	bhi.n	8007d7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d78:	4a1c      	ldr	r2, [pc, #112]	; (8007dec <prvAddNewTaskToReadyList+0xbc>)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d7e:	4b1d      	ldr	r3, [pc, #116]	; (8007df4 <prvAddNewTaskToReadyList+0xc4>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	3301      	adds	r3, #1
 8007d84:	4a1b      	ldr	r2, [pc, #108]	; (8007df4 <prvAddNewTaskToReadyList+0xc4>)
 8007d86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	409a      	lsls	r2, r3
 8007d90:	4b19      	ldr	r3, [pc, #100]	; (8007df8 <prvAddNewTaskToReadyList+0xc8>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	4a18      	ldr	r2, [pc, #96]	; (8007df8 <prvAddNewTaskToReadyList+0xc8>)
 8007d98:	6013      	str	r3, [r2, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d9e:	4613      	mov	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4a15      	ldr	r2, [pc, #84]	; (8007dfc <prvAddNewTaskToReadyList+0xcc>)
 8007da8:	441a      	add	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	3304      	adds	r3, #4
 8007dae:	4619      	mov	r1, r3
 8007db0:	4610      	mov	r0, r2
 8007db2:	f7ff fa27 	bl	8007204 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007db6:	f001 f905 	bl	8008fc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007dba:	4b0d      	ldr	r3, [pc, #52]	; (8007df0 <prvAddNewTaskToReadyList+0xc0>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00e      	beq.n	8007de0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007dc2:	4b0a      	ldr	r3, [pc, #40]	; (8007dec <prvAddNewTaskToReadyList+0xbc>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d207      	bcs.n	8007de0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007dd0:	4b0b      	ldr	r3, [pc, #44]	; (8007e00 <prvAddNewTaskToReadyList+0xd0>)
 8007dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007de0:	bf00      	nop
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	20000828 	.word	0x20000828
 8007dec:	20000728 	.word	0x20000728
 8007df0:	20000834 	.word	0x20000834
 8007df4:	20000844 	.word	0x20000844
 8007df8:	20000830 	.word	0x20000830
 8007dfc:	2000072c 	.word	0x2000072c
 8007e00:	e000ed04 	.word	0xe000ed04

08007e04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d017      	beq.n	8007e46 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e16:	4b13      	ldr	r3, [pc, #76]	; (8007e64 <vTaskDelay+0x60>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00a      	beq.n	8007e34 <vTaskDelay+0x30>
	__asm volatile
 8007e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	60bb      	str	r3, [r7, #8]
}
 8007e30:	bf00      	nop
 8007e32:	e7fe      	b.n	8007e32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e34:	f000 f884 	bl	8007f40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e38:	2100      	movs	r1, #0
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 ff02 	bl	8008c44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e40:	f000 f88c 	bl	8007f5c <xTaskResumeAll>
 8007e44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d107      	bne.n	8007e5c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007e4c:	4b06      	ldr	r3, [pc, #24]	; (8007e68 <vTaskDelay+0x64>)
 8007e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e5c:	bf00      	nop
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	20000850 	.word	0x20000850
 8007e68:	e000ed04 	.word	0xe000ed04

08007e6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b08a      	sub	sp, #40	; 0x28
 8007e70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e72:	2300      	movs	r3, #0
 8007e74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e76:	2300      	movs	r3, #0
 8007e78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e7a:	463a      	mov	r2, r7
 8007e7c:	1d39      	adds	r1, r7, #4
 8007e7e:	f107 0308 	add.w	r3, r7, #8
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7f8 ff34 	bl	8000cf0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	9202      	str	r2, [sp, #8]
 8007e90:	9301      	str	r3, [sp, #4]
 8007e92:	2300      	movs	r3, #0
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	2300      	movs	r3, #0
 8007e98:	460a      	mov	r2, r1
 8007e9a:	4921      	ldr	r1, [pc, #132]	; (8007f20 <vTaskStartScheduler+0xb4>)
 8007e9c:	4821      	ldr	r0, [pc, #132]	; (8007f24 <vTaskStartScheduler+0xb8>)
 8007e9e:	f7ff fe07 	bl	8007ab0 <xTaskCreateStatic>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	4a20      	ldr	r2, [pc, #128]	; (8007f28 <vTaskStartScheduler+0xbc>)
 8007ea6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ea8:	4b1f      	ldr	r3, [pc, #124]	; (8007f28 <vTaskStartScheduler+0xbc>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	617b      	str	r3, [r7, #20]
 8007eb4:	e001      	b.n	8007eba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d11b      	bne.n	8007ef8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	613b      	str	r3, [r7, #16]
}
 8007ed2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ed4:	4b15      	ldr	r3, [pc, #84]	; (8007f2c <vTaskStartScheduler+0xc0>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	334c      	adds	r3, #76	; 0x4c
 8007eda:	4a15      	ldr	r2, [pc, #84]	; (8007f30 <vTaskStartScheduler+0xc4>)
 8007edc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ede:	4b15      	ldr	r3, [pc, #84]	; (8007f34 <vTaskStartScheduler+0xc8>)
 8007ee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ee4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ee6:	4b14      	ldr	r3, [pc, #80]	; (8007f38 <vTaskStartScheduler+0xcc>)
 8007ee8:	2201      	movs	r2, #1
 8007eea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007eec:	4b13      	ldr	r3, [pc, #76]	; (8007f3c <vTaskStartScheduler+0xd0>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ef2:	f000 ff95 	bl	8008e20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ef6:	e00e      	b.n	8007f16 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007efe:	d10a      	bne.n	8007f16 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	60fb      	str	r3, [r7, #12]
}
 8007f12:	bf00      	nop
 8007f14:	e7fe      	b.n	8007f14 <vTaskStartScheduler+0xa8>
}
 8007f16:	bf00      	nop
 8007f18:	3718      	adds	r7, #24
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	0800cb20 	.word	0x0800cb20
 8007f24:	080084dd 	.word	0x080084dd
 8007f28:	2000084c 	.word	0x2000084c
 8007f2c:	20000728 	.word	0x20000728
 8007f30:	20000038 	.word	0x20000038
 8007f34:	20000848 	.word	0x20000848
 8007f38:	20000834 	.word	0x20000834
 8007f3c:	2000082c 	.word	0x2000082c

08007f40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f40:	b480      	push	{r7}
 8007f42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007f44:	4b04      	ldr	r3, [pc, #16]	; (8007f58 <vTaskSuspendAll+0x18>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	4a03      	ldr	r2, [pc, #12]	; (8007f58 <vTaskSuspendAll+0x18>)
 8007f4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007f4e:	bf00      	nop
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	20000850 	.word	0x20000850

08007f5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f62:	2300      	movs	r3, #0
 8007f64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f66:	2300      	movs	r3, #0
 8007f68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f6a:	4b41      	ldr	r3, [pc, #260]	; (8008070 <xTaskResumeAll+0x114>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10a      	bne.n	8007f88 <xTaskResumeAll+0x2c>
	__asm volatile
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	603b      	str	r3, [r7, #0]
}
 8007f84:	bf00      	nop
 8007f86:	e7fe      	b.n	8007f86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f88:	f000 ffec 	bl	8008f64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f8c:	4b38      	ldr	r3, [pc, #224]	; (8008070 <xTaskResumeAll+0x114>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3b01      	subs	r3, #1
 8007f92:	4a37      	ldr	r2, [pc, #220]	; (8008070 <xTaskResumeAll+0x114>)
 8007f94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f96:	4b36      	ldr	r3, [pc, #216]	; (8008070 <xTaskResumeAll+0x114>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d161      	bne.n	8008062 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f9e:	4b35      	ldr	r3, [pc, #212]	; (8008074 <xTaskResumeAll+0x118>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d05d      	beq.n	8008062 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fa6:	e02e      	b.n	8008006 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fa8:	4b33      	ldr	r3, [pc, #204]	; (8008078 <xTaskResumeAll+0x11c>)
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	3318      	adds	r3, #24
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7ff f982 	bl	80072be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7ff f97d 	bl	80072be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc8:	2201      	movs	r2, #1
 8007fca:	409a      	lsls	r2, r3
 8007fcc:	4b2b      	ldr	r3, [pc, #172]	; (800807c <xTaskResumeAll+0x120>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	4a2a      	ldr	r2, [pc, #168]	; (800807c <xTaskResumeAll+0x120>)
 8007fd4:	6013      	str	r3, [r2, #0]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fda:	4613      	mov	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4413      	add	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4a27      	ldr	r2, [pc, #156]	; (8008080 <xTaskResumeAll+0x124>)
 8007fe4:	441a      	add	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	3304      	adds	r3, #4
 8007fea:	4619      	mov	r1, r3
 8007fec:	4610      	mov	r0, r2
 8007fee:	f7ff f909 	bl	8007204 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff6:	4b23      	ldr	r3, [pc, #140]	; (8008084 <xTaskResumeAll+0x128>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d302      	bcc.n	8008006 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008000:	4b21      	ldr	r3, [pc, #132]	; (8008088 <xTaskResumeAll+0x12c>)
 8008002:	2201      	movs	r2, #1
 8008004:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008006:	4b1c      	ldr	r3, [pc, #112]	; (8008078 <xTaskResumeAll+0x11c>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d1cc      	bne.n	8007fa8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008014:	f000 fb1c 	bl	8008650 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008018:	4b1c      	ldr	r3, [pc, #112]	; (800808c <xTaskResumeAll+0x130>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d010      	beq.n	8008046 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008024:	f000 f836 	bl	8008094 <xTaskIncrementTick>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d002      	beq.n	8008034 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800802e:	4b16      	ldr	r3, [pc, #88]	; (8008088 <xTaskResumeAll+0x12c>)
 8008030:	2201      	movs	r2, #1
 8008032:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	3b01      	subs	r3, #1
 8008038:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1f1      	bne.n	8008024 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008040:	4b12      	ldr	r3, [pc, #72]	; (800808c <xTaskResumeAll+0x130>)
 8008042:	2200      	movs	r2, #0
 8008044:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008046:	4b10      	ldr	r3, [pc, #64]	; (8008088 <xTaskResumeAll+0x12c>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d009      	beq.n	8008062 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800804e:	2301      	movs	r3, #1
 8008050:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008052:	4b0f      	ldr	r3, [pc, #60]	; (8008090 <xTaskResumeAll+0x134>)
 8008054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008058:	601a      	str	r2, [r3, #0]
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008062:	f000 ffaf 	bl	8008fc4 <vPortExitCritical>

	return xAlreadyYielded;
 8008066:	68bb      	ldr	r3, [r7, #8]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	20000850 	.word	0x20000850
 8008074:	20000828 	.word	0x20000828
 8008078:	200007e8 	.word	0x200007e8
 800807c:	20000830 	.word	0x20000830
 8008080:	2000072c 	.word	0x2000072c
 8008084:	20000728 	.word	0x20000728
 8008088:	2000083c 	.word	0x2000083c
 800808c:	20000838 	.word	0x20000838
 8008090:	e000ed04 	.word	0xe000ed04

08008094 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800809a:	2300      	movs	r3, #0
 800809c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800809e:	4b4e      	ldr	r3, [pc, #312]	; (80081d8 <xTaskIncrementTick+0x144>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f040 808e 	bne.w	80081c4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80080a8:	4b4c      	ldr	r3, [pc, #304]	; (80081dc <xTaskIncrementTick+0x148>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3301      	adds	r3, #1
 80080ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80080b0:	4a4a      	ldr	r2, [pc, #296]	; (80081dc <xTaskIncrementTick+0x148>)
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d120      	bne.n	80080fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80080bc:	4b48      	ldr	r3, [pc, #288]	; (80081e0 <xTaskIncrementTick+0x14c>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00a      	beq.n	80080dc <xTaskIncrementTick+0x48>
	__asm volatile
 80080c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ca:	f383 8811 	msr	BASEPRI, r3
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	f3bf 8f4f 	dsb	sy
 80080d6:	603b      	str	r3, [r7, #0]
}
 80080d8:	bf00      	nop
 80080da:	e7fe      	b.n	80080da <xTaskIncrementTick+0x46>
 80080dc:	4b40      	ldr	r3, [pc, #256]	; (80081e0 <xTaskIncrementTick+0x14c>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	60fb      	str	r3, [r7, #12]
 80080e2:	4b40      	ldr	r3, [pc, #256]	; (80081e4 <xTaskIncrementTick+0x150>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a3e      	ldr	r2, [pc, #248]	; (80081e0 <xTaskIncrementTick+0x14c>)
 80080e8:	6013      	str	r3, [r2, #0]
 80080ea:	4a3e      	ldr	r2, [pc, #248]	; (80081e4 <xTaskIncrementTick+0x150>)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6013      	str	r3, [r2, #0]
 80080f0:	4b3d      	ldr	r3, [pc, #244]	; (80081e8 <xTaskIncrementTick+0x154>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	3301      	adds	r3, #1
 80080f6:	4a3c      	ldr	r2, [pc, #240]	; (80081e8 <xTaskIncrementTick+0x154>)
 80080f8:	6013      	str	r3, [r2, #0]
 80080fa:	f000 faa9 	bl	8008650 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80080fe:	4b3b      	ldr	r3, [pc, #236]	; (80081ec <xTaskIncrementTick+0x158>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	429a      	cmp	r2, r3
 8008106:	d348      	bcc.n	800819a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008108:	4b35      	ldr	r3, [pc, #212]	; (80081e0 <xTaskIncrementTick+0x14c>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d104      	bne.n	800811c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008112:	4b36      	ldr	r3, [pc, #216]	; (80081ec <xTaskIncrementTick+0x158>)
 8008114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008118:	601a      	str	r2, [r3, #0]
					break;
 800811a:	e03e      	b.n	800819a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800811c:	4b30      	ldr	r3, [pc, #192]	; (80081e0 <xTaskIncrementTick+0x14c>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800812c:	693a      	ldr	r2, [r7, #16]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	429a      	cmp	r2, r3
 8008132:	d203      	bcs.n	800813c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008134:	4a2d      	ldr	r2, [pc, #180]	; (80081ec <xTaskIncrementTick+0x158>)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800813a:	e02e      	b.n	800819a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	3304      	adds	r3, #4
 8008140:	4618      	mov	r0, r3
 8008142:	f7ff f8bc 	bl	80072be <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814a:	2b00      	cmp	r3, #0
 800814c:	d004      	beq.n	8008158 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	3318      	adds	r3, #24
 8008152:	4618      	mov	r0, r3
 8008154:	f7ff f8b3 	bl	80072be <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815c:	2201      	movs	r2, #1
 800815e:	409a      	lsls	r2, r3
 8008160:	4b23      	ldr	r3, [pc, #140]	; (80081f0 <xTaskIncrementTick+0x15c>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4313      	orrs	r3, r2
 8008166:	4a22      	ldr	r2, [pc, #136]	; (80081f0 <xTaskIncrementTick+0x15c>)
 8008168:	6013      	str	r3, [r2, #0]
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800816e:	4613      	mov	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4413      	add	r3, r2
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	4a1f      	ldr	r2, [pc, #124]	; (80081f4 <xTaskIncrementTick+0x160>)
 8008178:	441a      	add	r2, r3
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	3304      	adds	r3, #4
 800817e:	4619      	mov	r1, r3
 8008180:	4610      	mov	r0, r2
 8008182:	f7ff f83f 	bl	8007204 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800818a:	4b1b      	ldr	r3, [pc, #108]	; (80081f8 <xTaskIncrementTick+0x164>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008190:	429a      	cmp	r2, r3
 8008192:	d3b9      	bcc.n	8008108 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008194:	2301      	movs	r3, #1
 8008196:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008198:	e7b6      	b.n	8008108 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800819a:	4b17      	ldr	r3, [pc, #92]	; (80081f8 <xTaskIncrementTick+0x164>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a0:	4914      	ldr	r1, [pc, #80]	; (80081f4 <xTaskIncrementTick+0x160>)
 80081a2:	4613      	mov	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4413      	add	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	440b      	add	r3, r1
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d901      	bls.n	80081b6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80081b2:	2301      	movs	r3, #1
 80081b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80081b6:	4b11      	ldr	r3, [pc, #68]	; (80081fc <xTaskIncrementTick+0x168>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d007      	beq.n	80081ce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80081be:	2301      	movs	r3, #1
 80081c0:	617b      	str	r3, [r7, #20]
 80081c2:	e004      	b.n	80081ce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80081c4:	4b0e      	ldr	r3, [pc, #56]	; (8008200 <xTaskIncrementTick+0x16c>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	3301      	adds	r3, #1
 80081ca:	4a0d      	ldr	r2, [pc, #52]	; (8008200 <xTaskIncrementTick+0x16c>)
 80081cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80081ce:	697b      	ldr	r3, [r7, #20]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	20000850 	.word	0x20000850
 80081dc:	2000082c 	.word	0x2000082c
 80081e0:	200007e0 	.word	0x200007e0
 80081e4:	200007e4 	.word	0x200007e4
 80081e8:	20000840 	.word	0x20000840
 80081ec:	20000848 	.word	0x20000848
 80081f0:	20000830 	.word	0x20000830
 80081f4:	2000072c 	.word	0x2000072c
 80081f8:	20000728 	.word	0x20000728
 80081fc:	2000083c 	.word	0x2000083c
 8008200:	20000838 	.word	0x20000838

08008204 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008204:	b480      	push	{r7}
 8008206:	b087      	sub	sp, #28
 8008208:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800820a:	4b29      	ldr	r3, [pc, #164]	; (80082b0 <vTaskSwitchContext+0xac>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d003      	beq.n	800821a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008212:	4b28      	ldr	r3, [pc, #160]	; (80082b4 <vTaskSwitchContext+0xb0>)
 8008214:	2201      	movs	r2, #1
 8008216:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008218:	e044      	b.n	80082a4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800821a:	4b26      	ldr	r3, [pc, #152]	; (80082b4 <vTaskSwitchContext+0xb0>)
 800821c:	2200      	movs	r2, #0
 800821e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008220:	4b25      	ldr	r3, [pc, #148]	; (80082b8 <vTaskSwitchContext+0xb4>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	fab3 f383 	clz	r3, r3
 800822c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800822e:	7afb      	ldrb	r3, [r7, #11]
 8008230:	f1c3 031f 	rsb	r3, r3, #31
 8008234:	617b      	str	r3, [r7, #20]
 8008236:	4921      	ldr	r1, [pc, #132]	; (80082bc <vTaskSwitchContext+0xb8>)
 8008238:	697a      	ldr	r2, [r7, #20]
 800823a:	4613      	mov	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	440b      	add	r3, r1
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10a      	bne.n	8008260 <vTaskSwitchContext+0x5c>
	__asm volatile
 800824a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824e:	f383 8811 	msr	BASEPRI, r3
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	607b      	str	r3, [r7, #4]
}
 800825c:	bf00      	nop
 800825e:	e7fe      	b.n	800825e <vTaskSwitchContext+0x5a>
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	4613      	mov	r3, r2
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	4a14      	ldr	r2, [pc, #80]	; (80082bc <vTaskSwitchContext+0xb8>)
 800826c:	4413      	add	r3, r2
 800826e:	613b      	str	r3, [r7, #16]
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	685a      	ldr	r2, [r3, #4]
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	605a      	str	r2, [r3, #4]
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	685a      	ldr	r2, [r3, #4]
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	3308      	adds	r3, #8
 8008282:	429a      	cmp	r2, r3
 8008284:	d104      	bne.n	8008290 <vTaskSwitchContext+0x8c>
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	605a      	str	r2, [r3, #4]
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	4a0a      	ldr	r2, [pc, #40]	; (80082c0 <vTaskSwitchContext+0xbc>)
 8008298:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800829a:	4b09      	ldr	r3, [pc, #36]	; (80082c0 <vTaskSwitchContext+0xbc>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	334c      	adds	r3, #76	; 0x4c
 80082a0:	4a08      	ldr	r2, [pc, #32]	; (80082c4 <vTaskSwitchContext+0xc0>)
 80082a2:	6013      	str	r3, [r2, #0]
}
 80082a4:	bf00      	nop
 80082a6:	371c      	adds	r7, #28
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr
 80082b0:	20000850 	.word	0x20000850
 80082b4:	2000083c 	.word	0x2000083c
 80082b8:	20000830 	.word	0x20000830
 80082bc:	2000072c 	.word	0x2000072c
 80082c0:	20000728 	.word	0x20000728
 80082c4:	20000038 	.word	0x20000038

080082c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10a      	bne.n	80082ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80082d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082dc:	f383 8811 	msr	BASEPRI, r3
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	60fb      	str	r3, [r7, #12]
}
 80082ea:	bf00      	nop
 80082ec:	e7fe      	b.n	80082ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80082ee:	4b07      	ldr	r3, [pc, #28]	; (800830c <vTaskPlaceOnEventList+0x44>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	3318      	adds	r3, #24
 80082f4:	4619      	mov	r1, r3
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7fe ffa8 	bl	800724c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80082fc:	2101      	movs	r1, #1
 80082fe:	6838      	ldr	r0, [r7, #0]
 8008300:	f000 fca0 	bl	8008c44 <prvAddCurrentTaskToDelayedList>
}
 8008304:	bf00      	nop
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	20000728 	.word	0x20000728

08008310 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10a      	bne.n	800833c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	60fb      	str	r3, [r7, #12]
}
 8008338:	bf00      	nop
 800833a:	e7fe      	b.n	800833a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	3318      	adds	r3, #24
 8008340:	4618      	mov	r0, r3
 8008342:	f7fe ffbc 	bl	80072be <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008346:	4b1d      	ldr	r3, [pc, #116]	; (80083bc <xTaskRemoveFromEventList+0xac>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d11c      	bne.n	8008388 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	3304      	adds	r3, #4
 8008352:	4618      	mov	r0, r3
 8008354:	f7fe ffb3 	bl	80072be <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835c:	2201      	movs	r2, #1
 800835e:	409a      	lsls	r2, r3
 8008360:	4b17      	ldr	r3, [pc, #92]	; (80083c0 <xTaskRemoveFromEventList+0xb0>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4313      	orrs	r3, r2
 8008366:	4a16      	ldr	r2, [pc, #88]	; (80083c0 <xTaskRemoveFromEventList+0xb0>)
 8008368:	6013      	str	r3, [r2, #0]
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800836e:	4613      	mov	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4413      	add	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4a13      	ldr	r2, [pc, #76]	; (80083c4 <xTaskRemoveFromEventList+0xb4>)
 8008378:	441a      	add	r2, r3
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	3304      	adds	r3, #4
 800837e:	4619      	mov	r1, r3
 8008380:	4610      	mov	r0, r2
 8008382:	f7fe ff3f 	bl	8007204 <vListInsertEnd>
 8008386:	e005      	b.n	8008394 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	3318      	adds	r3, #24
 800838c:	4619      	mov	r1, r3
 800838e:	480e      	ldr	r0, [pc, #56]	; (80083c8 <xTaskRemoveFromEventList+0xb8>)
 8008390:	f7fe ff38 	bl	8007204 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008398:	4b0c      	ldr	r3, [pc, #48]	; (80083cc <xTaskRemoveFromEventList+0xbc>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839e:	429a      	cmp	r2, r3
 80083a0:	d905      	bls.n	80083ae <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80083a2:	2301      	movs	r3, #1
 80083a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80083a6:	4b0a      	ldr	r3, [pc, #40]	; (80083d0 <xTaskRemoveFromEventList+0xc0>)
 80083a8:	2201      	movs	r2, #1
 80083aa:	601a      	str	r2, [r3, #0]
 80083ac:	e001      	b.n	80083b2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80083ae:	2300      	movs	r3, #0
 80083b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80083b2:	697b      	ldr	r3, [r7, #20]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3718      	adds	r7, #24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	20000850 	.word	0x20000850
 80083c0:	20000830 	.word	0x20000830
 80083c4:	2000072c 	.word	0x2000072c
 80083c8:	200007e8 	.word	0x200007e8
 80083cc:	20000728 	.word	0x20000728
 80083d0:	2000083c 	.word	0x2000083c

080083d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80083dc:	4b06      	ldr	r3, [pc, #24]	; (80083f8 <vTaskInternalSetTimeOutState+0x24>)
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80083e4:	4b05      	ldr	r3, [pc, #20]	; (80083fc <vTaskInternalSetTimeOutState+0x28>)
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	605a      	str	r2, [r3, #4]
}
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
 80083f8:	20000840 	.word	0x20000840
 80083fc:	2000082c 	.word	0x2000082c

08008400 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b088      	sub	sp, #32
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10a      	bne.n	8008426 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	613b      	str	r3, [r7, #16]
}
 8008422:	bf00      	nop
 8008424:	e7fe      	b.n	8008424 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d10a      	bne.n	8008442 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800842c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008430:	f383 8811 	msr	BASEPRI, r3
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	60fb      	str	r3, [r7, #12]
}
 800843e:	bf00      	nop
 8008440:	e7fe      	b.n	8008440 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008442:	f000 fd8f 	bl	8008f64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008446:	4b1d      	ldr	r3, [pc, #116]	; (80084bc <xTaskCheckForTimeOut+0xbc>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	69ba      	ldr	r2, [r7, #24]
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800845e:	d102      	bne.n	8008466 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008460:	2300      	movs	r3, #0
 8008462:	61fb      	str	r3, [r7, #28]
 8008464:	e023      	b.n	80084ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	4b15      	ldr	r3, [pc, #84]	; (80084c0 <xTaskCheckForTimeOut+0xc0>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	429a      	cmp	r2, r3
 8008470:	d007      	beq.n	8008482 <xTaskCheckForTimeOut+0x82>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	69ba      	ldr	r2, [r7, #24]
 8008478:	429a      	cmp	r2, r3
 800847a:	d302      	bcc.n	8008482 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800847c:	2301      	movs	r3, #1
 800847e:	61fb      	str	r3, [r7, #28]
 8008480:	e015      	b.n	80084ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	697a      	ldr	r2, [r7, #20]
 8008488:	429a      	cmp	r2, r3
 800848a:	d20b      	bcs.n	80084a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	1ad2      	subs	r2, r2, r3
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7ff ff9b 	bl	80083d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800849e:	2300      	movs	r3, #0
 80084a0:	61fb      	str	r3, [r7, #28]
 80084a2:	e004      	b.n	80084ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	2200      	movs	r2, #0
 80084a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80084aa:	2301      	movs	r3, #1
 80084ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80084ae:	f000 fd89 	bl	8008fc4 <vPortExitCritical>

	return xReturn;
 80084b2:	69fb      	ldr	r3, [r7, #28]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3720      	adds	r7, #32
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	2000082c 	.word	0x2000082c
 80084c0:	20000840 	.word	0x20000840

080084c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80084c4:	b480      	push	{r7}
 80084c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80084c8:	4b03      	ldr	r3, [pc, #12]	; (80084d8 <vTaskMissedYield+0x14>)
 80084ca:	2201      	movs	r2, #1
 80084cc:	601a      	str	r2, [r3, #0]
}
 80084ce:	bf00      	nop
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr
 80084d8:	2000083c 	.word	0x2000083c

080084dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80084e4:	f000 f852 	bl	800858c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80084e8:	4b06      	ldr	r3, [pc, #24]	; (8008504 <prvIdleTask+0x28>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d9f9      	bls.n	80084e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80084f0:	4b05      	ldr	r3, [pc, #20]	; (8008508 <prvIdleTask+0x2c>)
 80084f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f6:	601a      	str	r2, [r3, #0]
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008500:	e7f0      	b.n	80084e4 <prvIdleTask+0x8>
 8008502:	bf00      	nop
 8008504:	2000072c 	.word	0x2000072c
 8008508:	e000ed04 	.word	0xe000ed04

0800850c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008512:	2300      	movs	r3, #0
 8008514:	607b      	str	r3, [r7, #4]
 8008516:	e00c      	b.n	8008532 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	4613      	mov	r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4413      	add	r3, r2
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	4a12      	ldr	r2, [pc, #72]	; (800856c <prvInitialiseTaskLists+0x60>)
 8008524:	4413      	add	r3, r2
 8008526:	4618      	mov	r0, r3
 8008528:	f7fe fe3f 	bl	80071aa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	3301      	adds	r3, #1
 8008530:	607b      	str	r3, [r7, #4]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2b06      	cmp	r3, #6
 8008536:	d9ef      	bls.n	8008518 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008538:	480d      	ldr	r0, [pc, #52]	; (8008570 <prvInitialiseTaskLists+0x64>)
 800853a:	f7fe fe36 	bl	80071aa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800853e:	480d      	ldr	r0, [pc, #52]	; (8008574 <prvInitialiseTaskLists+0x68>)
 8008540:	f7fe fe33 	bl	80071aa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008544:	480c      	ldr	r0, [pc, #48]	; (8008578 <prvInitialiseTaskLists+0x6c>)
 8008546:	f7fe fe30 	bl	80071aa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800854a:	480c      	ldr	r0, [pc, #48]	; (800857c <prvInitialiseTaskLists+0x70>)
 800854c:	f7fe fe2d 	bl	80071aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008550:	480b      	ldr	r0, [pc, #44]	; (8008580 <prvInitialiseTaskLists+0x74>)
 8008552:	f7fe fe2a 	bl	80071aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008556:	4b0b      	ldr	r3, [pc, #44]	; (8008584 <prvInitialiseTaskLists+0x78>)
 8008558:	4a05      	ldr	r2, [pc, #20]	; (8008570 <prvInitialiseTaskLists+0x64>)
 800855a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800855c:	4b0a      	ldr	r3, [pc, #40]	; (8008588 <prvInitialiseTaskLists+0x7c>)
 800855e:	4a05      	ldr	r2, [pc, #20]	; (8008574 <prvInitialiseTaskLists+0x68>)
 8008560:	601a      	str	r2, [r3, #0]
}
 8008562:	bf00      	nop
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	2000072c 	.word	0x2000072c
 8008570:	200007b8 	.word	0x200007b8
 8008574:	200007cc 	.word	0x200007cc
 8008578:	200007e8 	.word	0x200007e8
 800857c:	200007fc 	.word	0x200007fc
 8008580:	20000814 	.word	0x20000814
 8008584:	200007e0 	.word	0x200007e0
 8008588:	200007e4 	.word	0x200007e4

0800858c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008592:	e019      	b.n	80085c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008594:	f000 fce6 	bl	8008f64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008598:	4b10      	ldr	r3, [pc, #64]	; (80085dc <prvCheckTasksWaitingTermination+0x50>)
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	3304      	adds	r3, #4
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fe fe8a 	bl	80072be <uxListRemove>
				--uxCurrentNumberOfTasks;
 80085aa:	4b0d      	ldr	r3, [pc, #52]	; (80085e0 <prvCheckTasksWaitingTermination+0x54>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3b01      	subs	r3, #1
 80085b0:	4a0b      	ldr	r2, [pc, #44]	; (80085e0 <prvCheckTasksWaitingTermination+0x54>)
 80085b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80085b4:	4b0b      	ldr	r3, [pc, #44]	; (80085e4 <prvCheckTasksWaitingTermination+0x58>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	3b01      	subs	r3, #1
 80085ba:	4a0a      	ldr	r2, [pc, #40]	; (80085e4 <prvCheckTasksWaitingTermination+0x58>)
 80085bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80085be:	f000 fd01 	bl	8008fc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f810 	bl	80085e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80085c8:	4b06      	ldr	r3, [pc, #24]	; (80085e4 <prvCheckTasksWaitingTermination+0x58>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1e1      	bne.n	8008594 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80085d0:	bf00      	nop
 80085d2:	bf00      	nop
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	200007fc 	.word	0x200007fc
 80085e0:	20000828 	.word	0x20000828
 80085e4:	20000810 	.word	0x20000810

080085e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	334c      	adds	r3, #76	; 0x4c
 80085f4:	4618      	mov	r0, r3
 80085f6:	f004 f983 	bl	800c900 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008600:	2b00      	cmp	r3, #0
 8008602:	d108      	bne.n	8008616 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008608:	4618      	mov	r0, r3
 800860a:	f000 fe59 	bl	80092c0 <vPortFree>
				vPortFree( pxTCB );
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fe56 	bl	80092c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008614:	e018      	b.n	8008648 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800861c:	2b01      	cmp	r3, #1
 800861e:	d103      	bne.n	8008628 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fe4d 	bl	80092c0 <vPortFree>
	}
 8008626:	e00f      	b.n	8008648 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800862e:	2b02      	cmp	r3, #2
 8008630:	d00a      	beq.n	8008648 <prvDeleteTCB+0x60>
	__asm volatile
 8008632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008636:	f383 8811 	msr	BASEPRI, r3
 800863a:	f3bf 8f6f 	isb	sy
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	60fb      	str	r3, [r7, #12]
}
 8008644:	bf00      	nop
 8008646:	e7fe      	b.n	8008646 <prvDeleteTCB+0x5e>
	}
 8008648:	bf00      	nop
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008656:	4b0c      	ldr	r3, [pc, #48]	; (8008688 <prvResetNextTaskUnblockTime+0x38>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d104      	bne.n	800866a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008660:	4b0a      	ldr	r3, [pc, #40]	; (800868c <prvResetNextTaskUnblockTime+0x3c>)
 8008662:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008666:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008668:	e008      	b.n	800867c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800866a:	4b07      	ldr	r3, [pc, #28]	; (8008688 <prvResetNextTaskUnblockTime+0x38>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	4a04      	ldr	r2, [pc, #16]	; (800868c <prvResetNextTaskUnblockTime+0x3c>)
 800867a:	6013      	str	r3, [r2, #0]
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr
 8008688:	200007e0 	.word	0x200007e0
 800868c:	20000848 	.word	0x20000848

08008690 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008696:	4b0b      	ldr	r3, [pc, #44]	; (80086c4 <xTaskGetSchedulerState+0x34>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d102      	bne.n	80086a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800869e:	2301      	movs	r3, #1
 80086a0:	607b      	str	r3, [r7, #4]
 80086a2:	e008      	b.n	80086b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086a4:	4b08      	ldr	r3, [pc, #32]	; (80086c8 <xTaskGetSchedulerState+0x38>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d102      	bne.n	80086b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80086ac:	2302      	movs	r3, #2
 80086ae:	607b      	str	r3, [r7, #4]
 80086b0:	e001      	b.n	80086b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80086b2:	2300      	movs	r3, #0
 80086b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80086b6:	687b      	ldr	r3, [r7, #4]
	}
 80086b8:	4618      	mov	r0, r3
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr
 80086c4:	20000834 	.word	0x20000834
 80086c8:	20000850 	.word	0x20000850

080086cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80086d8:	2300      	movs	r3, #0
 80086da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d05e      	beq.n	80087a0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e6:	4b31      	ldr	r3, [pc, #196]	; (80087ac <xTaskPriorityInherit+0xe0>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d24e      	bcs.n	800878e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	db06      	blt.n	8008706 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086f8:	4b2c      	ldr	r3, [pc, #176]	; (80087ac <xTaskPriorityInherit+0xe0>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fe:	f1c3 0207 	rsb	r2, r3, #7
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	6959      	ldr	r1, [r3, #20]
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800870e:	4613      	mov	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4a26      	ldr	r2, [pc, #152]	; (80087b0 <xTaskPriorityInherit+0xe4>)
 8008718:	4413      	add	r3, r2
 800871a:	4299      	cmp	r1, r3
 800871c:	d12f      	bne.n	800877e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	3304      	adds	r3, #4
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe fdcb 	bl	80072be <uxListRemove>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10a      	bne.n	8008744 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008732:	2201      	movs	r2, #1
 8008734:	fa02 f303 	lsl.w	r3, r2, r3
 8008738:	43da      	mvns	r2, r3
 800873a:	4b1e      	ldr	r3, [pc, #120]	; (80087b4 <xTaskPriorityInherit+0xe8>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4013      	ands	r3, r2
 8008740:	4a1c      	ldr	r2, [pc, #112]	; (80087b4 <xTaskPriorityInherit+0xe8>)
 8008742:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008744:	4b19      	ldr	r3, [pc, #100]	; (80087ac <xTaskPriorityInherit+0xe0>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008752:	2201      	movs	r2, #1
 8008754:	409a      	lsls	r2, r3
 8008756:	4b17      	ldr	r3, [pc, #92]	; (80087b4 <xTaskPriorityInherit+0xe8>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4313      	orrs	r3, r2
 800875c:	4a15      	ldr	r2, [pc, #84]	; (80087b4 <xTaskPriorityInherit+0xe8>)
 800875e:	6013      	str	r3, [r2, #0]
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008764:	4613      	mov	r3, r2
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4413      	add	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4a10      	ldr	r2, [pc, #64]	; (80087b0 <xTaskPriorityInherit+0xe4>)
 800876e:	441a      	add	r2, r3
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	3304      	adds	r3, #4
 8008774:	4619      	mov	r1, r3
 8008776:	4610      	mov	r0, r2
 8008778:	f7fe fd44 	bl	8007204 <vListInsertEnd>
 800877c:	e004      	b.n	8008788 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800877e:	4b0b      	ldr	r3, [pc, #44]	; (80087ac <xTaskPriorityInherit+0xe0>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008788:	2301      	movs	r3, #1
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	e008      	b.n	80087a0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008792:	4b06      	ldr	r3, [pc, #24]	; (80087ac <xTaskPriorityInherit+0xe0>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008798:	429a      	cmp	r2, r3
 800879a:	d201      	bcs.n	80087a0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800879c:	2301      	movs	r3, #1
 800879e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80087a0:	68fb      	ldr	r3, [r7, #12]
	}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	20000728 	.word	0x20000728
 80087b0:	2000072c 	.word	0x2000072c
 80087b4:	20000830 	.word	0x20000830

080087b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80087c4:	2300      	movs	r3, #0
 80087c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d06e      	beq.n	80088ac <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80087ce:	4b3a      	ldr	r3, [pc, #232]	; (80088b8 <xTaskPriorityDisinherit+0x100>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	693a      	ldr	r2, [r7, #16]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d00a      	beq.n	80087ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80087d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087dc:	f383 8811 	msr	BASEPRI, r3
 80087e0:	f3bf 8f6f 	isb	sy
 80087e4:	f3bf 8f4f 	dsb	sy
 80087e8:	60fb      	str	r3, [r7, #12]
}
 80087ea:	bf00      	nop
 80087ec:	e7fe      	b.n	80087ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d10a      	bne.n	800880c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80087f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fa:	f383 8811 	msr	BASEPRI, r3
 80087fe:	f3bf 8f6f 	isb	sy
 8008802:	f3bf 8f4f 	dsb	sy
 8008806:	60bb      	str	r3, [r7, #8]
}
 8008808:	bf00      	nop
 800880a:	e7fe      	b.n	800880a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008810:	1e5a      	subs	r2, r3, #1
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800881e:	429a      	cmp	r2, r3
 8008820:	d044      	beq.n	80088ac <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008826:	2b00      	cmp	r3, #0
 8008828:	d140      	bne.n	80088ac <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	3304      	adds	r3, #4
 800882e:	4618      	mov	r0, r3
 8008830:	f7fe fd45 	bl	80072be <uxListRemove>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d115      	bne.n	8008866 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800883e:	491f      	ldr	r1, [pc, #124]	; (80088bc <xTaskPriorityDisinherit+0x104>)
 8008840:	4613      	mov	r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	4413      	add	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	440b      	add	r3, r1
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10a      	bne.n	8008866 <xTaskPriorityDisinherit+0xae>
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008854:	2201      	movs	r2, #1
 8008856:	fa02 f303 	lsl.w	r3, r2, r3
 800885a:	43da      	mvns	r2, r3
 800885c:	4b18      	ldr	r3, [pc, #96]	; (80088c0 <xTaskPriorityDisinherit+0x108>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4013      	ands	r3, r2
 8008862:	4a17      	ldr	r2, [pc, #92]	; (80088c0 <xTaskPriorityDisinherit+0x108>)
 8008864:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008872:	f1c3 0207 	rsb	r2, r3, #7
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887e:	2201      	movs	r2, #1
 8008880:	409a      	lsls	r2, r3
 8008882:	4b0f      	ldr	r3, [pc, #60]	; (80088c0 <xTaskPriorityDisinherit+0x108>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4313      	orrs	r3, r2
 8008888:	4a0d      	ldr	r2, [pc, #52]	; (80088c0 <xTaskPriorityDisinherit+0x108>)
 800888a:	6013      	str	r3, [r2, #0]
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008890:	4613      	mov	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4413      	add	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	4a08      	ldr	r2, [pc, #32]	; (80088bc <xTaskPriorityDisinherit+0x104>)
 800889a:	441a      	add	r2, r3
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	3304      	adds	r3, #4
 80088a0:	4619      	mov	r1, r3
 80088a2:	4610      	mov	r0, r2
 80088a4:	f7fe fcae 	bl	8007204 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80088a8:	2301      	movs	r3, #1
 80088aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80088ac:	697b      	ldr	r3, [r7, #20]
	}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3718      	adds	r7, #24
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	20000728 	.word	0x20000728
 80088bc:	2000072c 	.word	0x2000072c
 80088c0:	20000830 	.word	0x20000830

080088c4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b088      	sub	sp, #32
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80088d2:	2301      	movs	r3, #1
 80088d4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d077      	beq.n	80089cc <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d10a      	bne.n	80088fa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80088e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e8:	f383 8811 	msr	BASEPRI, r3
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f3bf 8f4f 	dsb	sy
 80088f4:	60fb      	str	r3, [r7, #12]
}
 80088f6:	bf00      	nop
 80088f8:	e7fe      	b.n	80088f8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	429a      	cmp	r2, r3
 8008902:	d902      	bls.n	800890a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	61fb      	str	r3, [r7, #28]
 8008908:	e002      	b.n	8008910 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800890e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008914:	69fa      	ldr	r2, [r7, #28]
 8008916:	429a      	cmp	r2, r3
 8008918:	d058      	beq.n	80089cc <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800891e:	697a      	ldr	r2, [r7, #20]
 8008920:	429a      	cmp	r2, r3
 8008922:	d153      	bne.n	80089cc <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008924:	4b2b      	ldr	r3, [pc, #172]	; (80089d4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	69ba      	ldr	r2, [r7, #24]
 800892a:	429a      	cmp	r2, r3
 800892c:	d10a      	bne.n	8008944 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800892e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	60bb      	str	r3, [r7, #8]
}
 8008940:	bf00      	nop
 8008942:	e7fe      	b.n	8008942 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008948:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	69fa      	ldr	r2, [r7, #28]
 800894e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	699b      	ldr	r3, [r3, #24]
 8008954:	2b00      	cmp	r3, #0
 8008956:	db04      	blt.n	8008962 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	f1c3 0207 	rsb	r2, r3, #7
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	6959      	ldr	r1, [r3, #20]
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	4613      	mov	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	4413      	add	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4a19      	ldr	r2, [pc, #100]	; (80089d8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008972:	4413      	add	r3, r2
 8008974:	4299      	cmp	r1, r3
 8008976:	d129      	bne.n	80089cc <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	3304      	adds	r3, #4
 800897c:	4618      	mov	r0, r3
 800897e:	f7fe fc9e 	bl	80072be <uxListRemove>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10a      	bne.n	800899e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898c:	2201      	movs	r2, #1
 800898e:	fa02 f303 	lsl.w	r3, r2, r3
 8008992:	43da      	mvns	r2, r3
 8008994:	4b11      	ldr	r3, [pc, #68]	; (80089dc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4013      	ands	r3, r2
 800899a:	4a10      	ldr	r2, [pc, #64]	; (80089dc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800899c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a2:	2201      	movs	r2, #1
 80089a4:	409a      	lsls	r2, r3
 80089a6:	4b0d      	ldr	r3, [pc, #52]	; (80089dc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	4a0b      	ldr	r2, [pc, #44]	; (80089dc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80089ae:	6013      	str	r3, [r2, #0]
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b4:	4613      	mov	r3, r2
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4413      	add	r3, r2
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	4a06      	ldr	r2, [pc, #24]	; (80089d8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80089be:	441a      	add	r2, r3
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	3304      	adds	r3, #4
 80089c4:	4619      	mov	r1, r3
 80089c6:	4610      	mov	r0, r2
 80089c8:	f7fe fc1c 	bl	8007204 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089cc:	bf00      	nop
 80089ce:	3720      	adds	r7, #32
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	20000728 	.word	0x20000728
 80089d8:	2000072c 	.word	0x2000072c
 80089dc:	20000830 	.word	0x20000830

080089e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80089e0:	b480      	push	{r7}
 80089e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80089e4:	4b07      	ldr	r3, [pc, #28]	; (8008a04 <pvTaskIncrementMutexHeldCount+0x24>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d004      	beq.n	80089f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80089ec:	4b05      	ldr	r3, [pc, #20]	; (8008a04 <pvTaskIncrementMutexHeldCount+0x24>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089f2:	3201      	adds	r2, #1
 80089f4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80089f6:	4b03      	ldr	r3, [pc, #12]	; (8008a04 <pvTaskIncrementMutexHeldCount+0x24>)
 80089f8:	681b      	ldr	r3, [r3, #0]
	}
 80089fa:	4618      	mov	r0, r3
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	20000728 	.word	0x20000728

08008a08 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]
 8008a14:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8008a16:	f000 faa5 	bl	8008f64 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008a1a:	4b29      	ldr	r3, [pc, #164]	; (8008ac0 <xTaskNotifyWait+0xb8>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d01c      	beq.n	8008a62 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008a28:	4b25      	ldr	r3, [pc, #148]	; (8008ac0 <xTaskNotifyWait+0xb8>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	43d2      	mvns	r2, r2
 8008a34:	400a      	ands	r2, r1
 8008a36:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008a3a:	4b21      	ldr	r3, [pc, #132]	; (8008ac0 <xTaskNotifyWait+0xb8>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00b      	beq.n	8008a62 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a4a:	2101      	movs	r1, #1
 8008a4c:	6838      	ldr	r0, [r7, #0]
 8008a4e:	f000 f8f9 	bl	8008c44 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008a52:	4b1c      	ldr	r3, [pc, #112]	; (8008ac4 <xTaskNotifyWait+0xbc>)
 8008a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a58:	601a      	str	r2, [r3, #0]
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008a62:	f000 faaf 	bl	8008fc4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8008a66:	f000 fa7d 	bl	8008f64 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d005      	beq.n	8008a7c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008a70:	4b13      	ldr	r3, [pc, #76]	; (8008ac0 <xTaskNotifyWait+0xb8>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008a7c:	4b10      	ldr	r3, [pc, #64]	; (8008ac0 <xTaskNotifyWait+0xb8>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d002      	beq.n	8008a90 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	617b      	str	r3, [r7, #20]
 8008a8e:	e00a      	b.n	8008aa6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008a90:	4b0b      	ldr	r3, [pc, #44]	; (8008ac0 <xTaskNotifyWait+0xb8>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	43d2      	mvns	r2, r2
 8008a9c:	400a      	ands	r2, r1
 8008a9e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008aa6:	4b06      	ldr	r3, [pc, #24]	; (8008ac0 <xTaskNotifyWait+0xb8>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8008ab0:	f000 fa88 	bl	8008fc4 <vPortExitCritical>

		return xReturn;
 8008ab4:	697b      	ldr	r3, [r7, #20]
	}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3718      	adds	r7, #24
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	20000728 	.word	0x20000728
 8008ac4:	e000ed04 	.word	0xe000ed04

08008ac8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b08a      	sub	sp, #40	; 0x28
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	603b      	str	r3, [r7, #0]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10a      	bne.n	8008af8 <xTaskGenericNotify+0x30>
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	61bb      	str	r3, [r7, #24]
}
 8008af4:	bf00      	nop
 8008af6:	e7fe      	b.n	8008af6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8008afc:	f000 fa32 	bl	8008f64 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d004      	beq.n	8008b10 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008b06:	6a3b      	ldr	r3, [r7, #32]
 8008b08:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008b10:	6a3b      	ldr	r3, [r7, #32]
 8008b12:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008b16:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008b18:	6a3b      	ldr	r3, [r7, #32]
 8008b1a:	2202      	movs	r2, #2
 8008b1c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8008b20:	79fb      	ldrb	r3, [r7, #7]
 8008b22:	2b04      	cmp	r3, #4
 8008b24:	d82d      	bhi.n	8008b82 <xTaskGenericNotify+0xba>
 8008b26:	a201      	add	r2, pc, #4	; (adr r2, 8008b2c <xTaskGenericNotify+0x64>)
 8008b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2c:	08008ba5 	.word	0x08008ba5
 8008b30:	08008b41 	.word	0x08008b41
 8008b34:	08008b53 	.word	0x08008b53
 8008b38:	08008b63 	.word	0x08008b63
 8008b3c:	08008b6d 	.word	0x08008b6d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008b40:	6a3b      	ldr	r3, [r7, #32]
 8008b42:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	431a      	orrs	r2, r3
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8008b50:	e02b      	b.n	8008baa <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b58:	1c5a      	adds	r2, r3, #1
 8008b5a:	6a3b      	ldr	r3, [r7, #32]
 8008b5c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8008b60:	e023      	b.n	8008baa <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008b62:	6a3b      	ldr	r3, [r7, #32]
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8008b6a:	e01e      	b.n	8008baa <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008b6c:	7ffb      	ldrb	r3, [r7, #31]
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d004      	beq.n	8008b7c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008b7a:	e016      	b.n	8008baa <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8008b80:	e013      	b.n	8008baa <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008b82:	6a3b      	ldr	r3, [r7, #32]
 8008b84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b8c:	d00c      	beq.n	8008ba8 <xTaskGenericNotify+0xe0>
	__asm volatile
 8008b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	617b      	str	r3, [r7, #20]
}
 8008ba0:	bf00      	nop
 8008ba2:	e7fe      	b.n	8008ba2 <xTaskGenericNotify+0xda>
					break;
 8008ba4:	bf00      	nop
 8008ba6:	e000      	b.n	8008baa <xTaskGenericNotify+0xe2>

					break;
 8008ba8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008baa:	7ffb      	ldrb	r3, [r7, #31]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d139      	bne.n	8008c24 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bb0:	6a3b      	ldr	r3, [r7, #32]
 8008bb2:	3304      	adds	r3, #4
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fe fb82 	bl	80072be <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8008bba:	6a3b      	ldr	r3, [r7, #32]
 8008bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	409a      	lsls	r2, r3
 8008bc2:	4b1c      	ldr	r3, [pc, #112]	; (8008c34 <xTaskGenericNotify+0x16c>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	4a1a      	ldr	r2, [pc, #104]	; (8008c34 <xTaskGenericNotify+0x16c>)
 8008bca:	6013      	str	r3, [r2, #0]
 8008bcc:	6a3b      	ldr	r3, [r7, #32]
 8008bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4413      	add	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4a17      	ldr	r2, [pc, #92]	; (8008c38 <xTaskGenericNotify+0x170>)
 8008bda:	441a      	add	r2, r3
 8008bdc:	6a3b      	ldr	r3, [r7, #32]
 8008bde:	3304      	adds	r3, #4
 8008be0:	4619      	mov	r1, r3
 8008be2:	4610      	mov	r0, r2
 8008be4:	f7fe fb0e 	bl	8007204 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008be8:	6a3b      	ldr	r3, [r7, #32]
 8008bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00a      	beq.n	8008c06 <xTaskGenericNotify+0x13e>
	__asm volatile
 8008bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf4:	f383 8811 	msr	BASEPRI, r3
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	613b      	str	r3, [r7, #16]
}
 8008c02:	bf00      	nop
 8008c04:	e7fe      	b.n	8008c04 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c0a:	4b0c      	ldr	r3, [pc, #48]	; (8008c3c <xTaskGenericNotify+0x174>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d907      	bls.n	8008c24 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8008c14:	4b0a      	ldr	r3, [pc, #40]	; (8008c40 <xTaskGenericNotify+0x178>)
 8008c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c1a:	601a      	str	r2, [r3, #0]
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008c24:	f000 f9ce 	bl	8008fc4 <vPortExitCritical>

		return xReturn;
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3728      	adds	r7, #40	; 0x28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	20000830 	.word	0x20000830
 8008c38:	2000072c 	.word	0x2000072c
 8008c3c:	20000728 	.word	0x20000728
 8008c40:	e000ed04 	.word	0xe000ed04

08008c44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c4e:	4b29      	ldr	r3, [pc, #164]	; (8008cf4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c54:	4b28      	ldr	r3, [pc, #160]	; (8008cf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	3304      	adds	r3, #4
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7fe fb2f 	bl	80072be <uxListRemove>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10b      	bne.n	8008c7e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008c66:	4b24      	ldr	r3, [pc, #144]	; (8008cf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c72:	43da      	mvns	r2, r3
 8008c74:	4b21      	ldr	r3, [pc, #132]	; (8008cfc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4013      	ands	r3, r2
 8008c7a:	4a20      	ldr	r2, [pc, #128]	; (8008cfc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c7c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c84:	d10a      	bne.n	8008c9c <prvAddCurrentTaskToDelayedList+0x58>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d007      	beq.n	8008c9c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c8c:	4b1a      	ldr	r3, [pc, #104]	; (8008cf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	3304      	adds	r3, #4
 8008c92:	4619      	mov	r1, r3
 8008c94:	481a      	ldr	r0, [pc, #104]	; (8008d00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008c96:	f7fe fab5 	bl	8007204 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008c9a:	e026      	b.n	8008cea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ca4:	4b14      	ldr	r3, [pc, #80]	; (8008cf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68ba      	ldr	r2, [r7, #8]
 8008caa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d209      	bcs.n	8008cc8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cb4:	4b13      	ldr	r3, [pc, #76]	; (8008d04 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	4b0f      	ldr	r3, [pc, #60]	; (8008cf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	f7fe fac3 	bl	800724c <vListInsert>
}
 8008cc6:	e010      	b.n	8008cea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cc8:	4b0f      	ldr	r3, [pc, #60]	; (8008d08 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	4b0a      	ldr	r3, [pc, #40]	; (8008cf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	3304      	adds	r3, #4
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	4610      	mov	r0, r2
 8008cd6:	f7fe fab9 	bl	800724c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008cda:	4b0c      	ldr	r3, [pc, #48]	; (8008d0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d202      	bcs.n	8008cea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008ce4:	4a09      	ldr	r2, [pc, #36]	; (8008d0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	6013      	str	r3, [r2, #0]
}
 8008cea:	bf00      	nop
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	2000082c 	.word	0x2000082c
 8008cf8:	20000728 	.word	0x20000728
 8008cfc:	20000830 	.word	0x20000830
 8008d00:	20000814 	.word	0x20000814
 8008d04:	200007e4 	.word	0x200007e4
 8008d08:	200007e0 	.word	0x200007e0
 8008d0c:	20000848 	.word	0x20000848

08008d10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	3b04      	subs	r3, #4
 8008d20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008d28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	3b04      	subs	r3, #4
 8008d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	f023 0201 	bic.w	r2, r3, #1
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	3b04      	subs	r3, #4
 8008d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d40:	4a0c      	ldr	r2, [pc, #48]	; (8008d74 <pxPortInitialiseStack+0x64>)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	3b14      	subs	r3, #20
 8008d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	3b04      	subs	r3, #4
 8008d56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f06f 0202 	mvn.w	r2, #2
 8008d5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	3b20      	subs	r3, #32
 8008d64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d66:	68fb      	ldr	r3, [r7, #12]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3714      	adds	r7, #20
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr
 8008d74:	08008d79 	.word	0x08008d79

08008d78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d82:	4b12      	ldr	r3, [pc, #72]	; (8008dcc <prvTaskExitError+0x54>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d8a:	d00a      	beq.n	8008da2 <prvTaskExitError+0x2a>
	__asm volatile
 8008d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d90:	f383 8811 	msr	BASEPRI, r3
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	60fb      	str	r3, [r7, #12]
}
 8008d9e:	bf00      	nop
 8008da0:	e7fe      	b.n	8008da0 <prvTaskExitError+0x28>
	__asm volatile
 8008da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da6:	f383 8811 	msr	BASEPRI, r3
 8008daa:	f3bf 8f6f 	isb	sy
 8008dae:	f3bf 8f4f 	dsb	sy
 8008db2:	60bb      	str	r3, [r7, #8]
}
 8008db4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008db6:	bf00      	nop
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d0fc      	beq.n	8008db8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008dbe:	bf00      	nop
 8008dc0:	bf00      	nop
 8008dc2:	3714      	adds	r7, #20
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr
 8008dcc:	20000034 	.word	0x20000034

08008dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008dd0:	4b07      	ldr	r3, [pc, #28]	; (8008df0 <pxCurrentTCBConst2>)
 8008dd2:	6819      	ldr	r1, [r3, #0]
 8008dd4:	6808      	ldr	r0, [r1, #0]
 8008dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dda:	f380 8809 	msr	PSP, r0
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	f04f 0000 	mov.w	r0, #0
 8008de6:	f380 8811 	msr	BASEPRI, r0
 8008dea:	4770      	bx	lr
 8008dec:	f3af 8000 	nop.w

08008df0 <pxCurrentTCBConst2>:
 8008df0:	20000728 	.word	0x20000728
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008df4:	bf00      	nop
 8008df6:	bf00      	nop

08008df8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008df8:	4808      	ldr	r0, [pc, #32]	; (8008e1c <prvPortStartFirstTask+0x24>)
 8008dfa:	6800      	ldr	r0, [r0, #0]
 8008dfc:	6800      	ldr	r0, [r0, #0]
 8008dfe:	f380 8808 	msr	MSP, r0
 8008e02:	f04f 0000 	mov.w	r0, #0
 8008e06:	f380 8814 	msr	CONTROL, r0
 8008e0a:	b662      	cpsie	i
 8008e0c:	b661      	cpsie	f
 8008e0e:	f3bf 8f4f 	dsb	sy
 8008e12:	f3bf 8f6f 	isb	sy
 8008e16:	df00      	svc	0
 8008e18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e1a:	bf00      	nop
 8008e1c:	e000ed08 	.word	0xe000ed08

08008e20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e26:	4b46      	ldr	r3, [pc, #280]	; (8008f40 <xPortStartScheduler+0x120>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a46      	ldr	r2, [pc, #280]	; (8008f44 <xPortStartScheduler+0x124>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d10a      	bne.n	8008e46 <xPortStartScheduler+0x26>
	__asm volatile
 8008e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e34:	f383 8811 	msr	BASEPRI, r3
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	613b      	str	r3, [r7, #16]
}
 8008e42:	bf00      	nop
 8008e44:	e7fe      	b.n	8008e44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e46:	4b3e      	ldr	r3, [pc, #248]	; (8008f40 <xPortStartScheduler+0x120>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a3f      	ldr	r2, [pc, #252]	; (8008f48 <xPortStartScheduler+0x128>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d10a      	bne.n	8008e66 <xPortStartScheduler+0x46>
	__asm volatile
 8008e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e54:	f383 8811 	msr	BASEPRI, r3
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	60fb      	str	r3, [r7, #12]
}
 8008e62:	bf00      	nop
 8008e64:	e7fe      	b.n	8008e64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e66:	4b39      	ldr	r3, [pc, #228]	; (8008f4c <xPortStartScheduler+0x12c>)
 8008e68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	22ff      	movs	r2, #255	; 0xff
 8008e76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e80:	78fb      	ldrb	r3, [r7, #3]
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e88:	b2da      	uxtb	r2, r3
 8008e8a:	4b31      	ldr	r3, [pc, #196]	; (8008f50 <xPortStartScheduler+0x130>)
 8008e8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e8e:	4b31      	ldr	r3, [pc, #196]	; (8008f54 <xPortStartScheduler+0x134>)
 8008e90:	2207      	movs	r2, #7
 8008e92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e94:	e009      	b.n	8008eaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008e96:	4b2f      	ldr	r3, [pc, #188]	; (8008f54 <xPortStartScheduler+0x134>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	4a2d      	ldr	r2, [pc, #180]	; (8008f54 <xPortStartScheduler+0x134>)
 8008e9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ea0:	78fb      	ldrb	r3, [r7, #3]
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	005b      	lsls	r3, r3, #1
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008eaa:	78fb      	ldrb	r3, [r7, #3]
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eb2:	2b80      	cmp	r3, #128	; 0x80
 8008eb4:	d0ef      	beq.n	8008e96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008eb6:	4b27      	ldr	r3, [pc, #156]	; (8008f54 <xPortStartScheduler+0x134>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f1c3 0307 	rsb	r3, r3, #7
 8008ebe:	2b04      	cmp	r3, #4
 8008ec0:	d00a      	beq.n	8008ed8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	60bb      	str	r3, [r7, #8]
}
 8008ed4:	bf00      	nop
 8008ed6:	e7fe      	b.n	8008ed6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ed8:	4b1e      	ldr	r3, [pc, #120]	; (8008f54 <xPortStartScheduler+0x134>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	021b      	lsls	r3, r3, #8
 8008ede:	4a1d      	ldr	r2, [pc, #116]	; (8008f54 <xPortStartScheduler+0x134>)
 8008ee0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ee2:	4b1c      	ldr	r3, [pc, #112]	; (8008f54 <xPortStartScheduler+0x134>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008eea:	4a1a      	ldr	r2, [pc, #104]	; (8008f54 <xPortStartScheduler+0x134>)
 8008eec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	b2da      	uxtb	r2, r3
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ef6:	4b18      	ldr	r3, [pc, #96]	; (8008f58 <xPortStartScheduler+0x138>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a17      	ldr	r2, [pc, #92]	; (8008f58 <xPortStartScheduler+0x138>)
 8008efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f02:	4b15      	ldr	r3, [pc, #84]	; (8008f58 <xPortStartScheduler+0x138>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a14      	ldr	r2, [pc, #80]	; (8008f58 <xPortStartScheduler+0x138>)
 8008f08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f0e:	f000 f8dd 	bl	80090cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f12:	4b12      	ldr	r3, [pc, #72]	; (8008f5c <xPortStartScheduler+0x13c>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008f18:	f000 f8fc 	bl	8009114 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f1c:	4b10      	ldr	r3, [pc, #64]	; (8008f60 <xPortStartScheduler+0x140>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a0f      	ldr	r2, [pc, #60]	; (8008f60 <xPortStartScheduler+0x140>)
 8008f22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008f26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008f28:	f7ff ff66 	bl	8008df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008f2c:	f7ff f96a 	bl	8008204 <vTaskSwitchContext>
	prvTaskExitError();
 8008f30:	f7ff ff22 	bl	8008d78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3718      	adds	r7, #24
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	e000ed00 	.word	0xe000ed00
 8008f44:	410fc271 	.word	0x410fc271
 8008f48:	410fc270 	.word	0x410fc270
 8008f4c:	e000e400 	.word	0xe000e400
 8008f50:	20000854 	.word	0x20000854
 8008f54:	20000858 	.word	0x20000858
 8008f58:	e000ed20 	.word	0xe000ed20
 8008f5c:	20000034 	.word	0x20000034
 8008f60:	e000ef34 	.word	0xe000ef34

08008f64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
	__asm volatile
 8008f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	607b      	str	r3, [r7, #4]
}
 8008f7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f7e:	4b0f      	ldr	r3, [pc, #60]	; (8008fbc <vPortEnterCritical+0x58>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	3301      	adds	r3, #1
 8008f84:	4a0d      	ldr	r2, [pc, #52]	; (8008fbc <vPortEnterCritical+0x58>)
 8008f86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f88:	4b0c      	ldr	r3, [pc, #48]	; (8008fbc <vPortEnterCritical+0x58>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d10f      	bne.n	8008fb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f90:	4b0b      	ldr	r3, [pc, #44]	; (8008fc0 <vPortEnterCritical+0x5c>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00a      	beq.n	8008fb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	603b      	str	r3, [r7, #0]
}
 8008fac:	bf00      	nop
 8008fae:	e7fe      	b.n	8008fae <vPortEnterCritical+0x4a>
	}
}
 8008fb0:	bf00      	nop
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr
 8008fbc:	20000034 	.word	0x20000034
 8008fc0:	e000ed04 	.word	0xe000ed04

08008fc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008fca:	4b12      	ldr	r3, [pc, #72]	; (8009014 <vPortExitCritical+0x50>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d10a      	bne.n	8008fe8 <vPortExitCritical+0x24>
	__asm volatile
 8008fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	607b      	str	r3, [r7, #4]
}
 8008fe4:	bf00      	nop
 8008fe6:	e7fe      	b.n	8008fe6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008fe8:	4b0a      	ldr	r3, [pc, #40]	; (8009014 <vPortExitCritical+0x50>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	3b01      	subs	r3, #1
 8008fee:	4a09      	ldr	r2, [pc, #36]	; (8009014 <vPortExitCritical+0x50>)
 8008ff0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ff2:	4b08      	ldr	r3, [pc, #32]	; (8009014 <vPortExitCritical+0x50>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d105      	bne.n	8009006 <vPortExitCritical+0x42>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009004:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009006:	bf00      	nop
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	20000034 	.word	0x20000034
	...

08009020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009020:	f3ef 8009 	mrs	r0, PSP
 8009024:	f3bf 8f6f 	isb	sy
 8009028:	4b15      	ldr	r3, [pc, #84]	; (8009080 <pxCurrentTCBConst>)
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	f01e 0f10 	tst.w	lr, #16
 8009030:	bf08      	it	eq
 8009032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800903a:	6010      	str	r0, [r2, #0]
 800903c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009044:	f380 8811 	msr	BASEPRI, r0
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f7ff f8d8 	bl	8008204 <vTaskSwitchContext>
 8009054:	f04f 0000 	mov.w	r0, #0
 8009058:	f380 8811 	msr	BASEPRI, r0
 800905c:	bc09      	pop	{r0, r3}
 800905e:	6819      	ldr	r1, [r3, #0]
 8009060:	6808      	ldr	r0, [r1, #0]
 8009062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009066:	f01e 0f10 	tst.w	lr, #16
 800906a:	bf08      	it	eq
 800906c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009070:	f380 8809 	msr	PSP, r0
 8009074:	f3bf 8f6f 	isb	sy
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop
 800907c:	f3af 8000 	nop.w

08009080 <pxCurrentTCBConst>:
 8009080:	20000728 	.word	0x20000728
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009084:	bf00      	nop
 8009086:	bf00      	nop

08009088 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
	__asm volatile
 800908e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009092:	f383 8811 	msr	BASEPRI, r3
 8009096:	f3bf 8f6f 	isb	sy
 800909a:	f3bf 8f4f 	dsb	sy
 800909e:	607b      	str	r3, [r7, #4]
}
 80090a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80090a2:	f7fe fff7 	bl	8008094 <xTaskIncrementTick>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d003      	beq.n	80090b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80090ac:	4b06      	ldr	r3, [pc, #24]	; (80090c8 <SysTick_Handler+0x40>)
 80090ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090b2:	601a      	str	r2, [r3, #0]
 80090b4:	2300      	movs	r3, #0
 80090b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	f383 8811 	msr	BASEPRI, r3
}
 80090be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80090c0:	bf00      	nop
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	e000ed04 	.word	0xe000ed04

080090cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80090cc:	b480      	push	{r7}
 80090ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80090d0:	4b0b      	ldr	r3, [pc, #44]	; (8009100 <vPortSetupTimerInterrupt+0x34>)
 80090d2:	2200      	movs	r2, #0
 80090d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80090d6:	4b0b      	ldr	r3, [pc, #44]	; (8009104 <vPortSetupTimerInterrupt+0x38>)
 80090d8:	2200      	movs	r2, #0
 80090da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80090dc:	4b0a      	ldr	r3, [pc, #40]	; (8009108 <vPortSetupTimerInterrupt+0x3c>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a0a      	ldr	r2, [pc, #40]	; (800910c <vPortSetupTimerInterrupt+0x40>)
 80090e2:	fba2 2303 	umull	r2, r3, r2, r3
 80090e6:	099b      	lsrs	r3, r3, #6
 80090e8:	4a09      	ldr	r2, [pc, #36]	; (8009110 <vPortSetupTimerInterrupt+0x44>)
 80090ea:	3b01      	subs	r3, #1
 80090ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80090ee:	4b04      	ldr	r3, [pc, #16]	; (8009100 <vPortSetupTimerInterrupt+0x34>)
 80090f0:	2207      	movs	r2, #7
 80090f2:	601a      	str	r2, [r3, #0]
}
 80090f4:	bf00      	nop
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	e000e010 	.word	0xe000e010
 8009104:	e000e018 	.word	0xe000e018
 8009108:	20000028 	.word	0x20000028
 800910c:	10624dd3 	.word	0x10624dd3
 8009110:	e000e014 	.word	0xe000e014

08009114 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009114:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009124 <vPortEnableVFP+0x10>
 8009118:	6801      	ldr	r1, [r0, #0]
 800911a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800911e:	6001      	str	r1, [r0, #0]
 8009120:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009122:	bf00      	nop
 8009124:	e000ed88 	.word	0xe000ed88

08009128 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b08a      	sub	sp, #40	; 0x28
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009130:	2300      	movs	r3, #0
 8009132:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009134:	f7fe ff04 	bl	8007f40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009138:	4b5b      	ldr	r3, [pc, #364]	; (80092a8 <pvPortMalloc+0x180>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009140:	f000 f920 	bl	8009384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009144:	4b59      	ldr	r3, [pc, #356]	; (80092ac <pvPortMalloc+0x184>)
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4013      	ands	r3, r2
 800914c:	2b00      	cmp	r3, #0
 800914e:	f040 8093 	bne.w	8009278 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d01d      	beq.n	8009194 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009158:	2208      	movs	r2, #8
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4413      	add	r3, r2
 800915e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f003 0307 	and.w	r3, r3, #7
 8009166:	2b00      	cmp	r3, #0
 8009168:	d014      	beq.n	8009194 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f023 0307 	bic.w	r3, r3, #7
 8009170:	3308      	adds	r3, #8
 8009172:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f003 0307 	and.w	r3, r3, #7
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00a      	beq.n	8009194 <pvPortMalloc+0x6c>
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	617b      	str	r3, [r7, #20]
}
 8009190:	bf00      	nop
 8009192:	e7fe      	b.n	8009192 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d06e      	beq.n	8009278 <pvPortMalloc+0x150>
 800919a:	4b45      	ldr	r3, [pc, #276]	; (80092b0 <pvPortMalloc+0x188>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d869      	bhi.n	8009278 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80091a4:	4b43      	ldr	r3, [pc, #268]	; (80092b4 <pvPortMalloc+0x18c>)
 80091a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80091a8:	4b42      	ldr	r3, [pc, #264]	; (80092b4 <pvPortMalloc+0x18c>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091ae:	e004      	b.n	80091ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80091b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80091b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d903      	bls.n	80091cc <pvPortMalloc+0xa4>
 80091c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1f1      	bne.n	80091b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80091cc:	4b36      	ldr	r3, [pc, #216]	; (80092a8 <pvPortMalloc+0x180>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d050      	beq.n	8009278 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80091d6:	6a3b      	ldr	r3, [r7, #32]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2208      	movs	r2, #8
 80091dc:	4413      	add	r3, r2
 80091de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80091e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	6a3b      	ldr	r3, [r7, #32]
 80091e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80091e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ea:	685a      	ldr	r2, [r3, #4]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	1ad2      	subs	r2, r2, r3
 80091f0:	2308      	movs	r3, #8
 80091f2:	005b      	lsls	r3, r3, #1
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d91f      	bls.n	8009238 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80091f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4413      	add	r3, r2
 80091fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	f003 0307 	and.w	r3, r3, #7
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00a      	beq.n	8009220 <pvPortMalloc+0xf8>
	__asm volatile
 800920a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920e:	f383 8811 	msr	BASEPRI, r3
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	613b      	str	r3, [r7, #16]
}
 800921c:	bf00      	nop
 800921e:	e7fe      	b.n	800921e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	1ad2      	subs	r2, r2, r3
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009232:	69b8      	ldr	r0, [r7, #24]
 8009234:	f000 f908 	bl	8009448 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009238:	4b1d      	ldr	r3, [pc, #116]	; (80092b0 <pvPortMalloc+0x188>)
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	4a1b      	ldr	r2, [pc, #108]	; (80092b0 <pvPortMalloc+0x188>)
 8009244:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009246:	4b1a      	ldr	r3, [pc, #104]	; (80092b0 <pvPortMalloc+0x188>)
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	4b1b      	ldr	r3, [pc, #108]	; (80092b8 <pvPortMalloc+0x190>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	429a      	cmp	r2, r3
 8009250:	d203      	bcs.n	800925a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009252:	4b17      	ldr	r3, [pc, #92]	; (80092b0 <pvPortMalloc+0x188>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a18      	ldr	r2, [pc, #96]	; (80092b8 <pvPortMalloc+0x190>)
 8009258:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800925a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925c:	685a      	ldr	r2, [r3, #4]
 800925e:	4b13      	ldr	r3, [pc, #76]	; (80092ac <pvPortMalloc+0x184>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	431a      	orrs	r2, r3
 8009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009266:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926a:	2200      	movs	r2, #0
 800926c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800926e:	4b13      	ldr	r3, [pc, #76]	; (80092bc <pvPortMalloc+0x194>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	3301      	adds	r3, #1
 8009274:	4a11      	ldr	r2, [pc, #68]	; (80092bc <pvPortMalloc+0x194>)
 8009276:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009278:	f7fe fe70 	bl	8007f5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	f003 0307 	and.w	r3, r3, #7
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00a      	beq.n	800929c <pvPortMalloc+0x174>
	__asm volatile
 8009286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928a:	f383 8811 	msr	BASEPRI, r3
 800928e:	f3bf 8f6f 	isb	sy
 8009292:	f3bf 8f4f 	dsb	sy
 8009296:	60fb      	str	r3, [r7, #12]
}
 8009298:	bf00      	nop
 800929a:	e7fe      	b.n	800929a <pvPortMalloc+0x172>
	return pvReturn;
 800929c:	69fb      	ldr	r3, [r7, #28]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3728      	adds	r7, #40	; 0x28
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	20004464 	.word	0x20004464
 80092ac:	20004478 	.word	0x20004478
 80092b0:	20004468 	.word	0x20004468
 80092b4:	2000445c 	.word	0x2000445c
 80092b8:	2000446c 	.word	0x2000446c
 80092bc:	20004470 	.word	0x20004470

080092c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b086      	sub	sp, #24
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d04d      	beq.n	800936e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80092d2:	2308      	movs	r3, #8
 80092d4:	425b      	negs	r3, r3
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	4413      	add	r3, r2
 80092da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	685a      	ldr	r2, [r3, #4]
 80092e4:	4b24      	ldr	r3, [pc, #144]	; (8009378 <vPortFree+0xb8>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4013      	ands	r3, r2
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10a      	bne.n	8009304 <vPortFree+0x44>
	__asm volatile
 80092ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f2:	f383 8811 	msr	BASEPRI, r3
 80092f6:	f3bf 8f6f 	isb	sy
 80092fa:	f3bf 8f4f 	dsb	sy
 80092fe:	60fb      	str	r3, [r7, #12]
}
 8009300:	bf00      	nop
 8009302:	e7fe      	b.n	8009302 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00a      	beq.n	8009322 <vPortFree+0x62>
	__asm volatile
 800930c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009310:	f383 8811 	msr	BASEPRI, r3
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	60bb      	str	r3, [r7, #8]
}
 800931e:	bf00      	nop
 8009320:	e7fe      	b.n	8009320 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	685a      	ldr	r2, [r3, #4]
 8009326:	4b14      	ldr	r3, [pc, #80]	; (8009378 <vPortFree+0xb8>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4013      	ands	r3, r2
 800932c:	2b00      	cmp	r3, #0
 800932e:	d01e      	beq.n	800936e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d11a      	bne.n	800936e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	685a      	ldr	r2, [r3, #4]
 800933c:	4b0e      	ldr	r3, [pc, #56]	; (8009378 <vPortFree+0xb8>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	43db      	mvns	r3, r3
 8009342:	401a      	ands	r2, r3
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009348:	f7fe fdfa 	bl	8007f40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	685a      	ldr	r2, [r3, #4]
 8009350:	4b0a      	ldr	r3, [pc, #40]	; (800937c <vPortFree+0xbc>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4413      	add	r3, r2
 8009356:	4a09      	ldr	r2, [pc, #36]	; (800937c <vPortFree+0xbc>)
 8009358:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800935a:	6938      	ldr	r0, [r7, #16]
 800935c:	f000 f874 	bl	8009448 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009360:	4b07      	ldr	r3, [pc, #28]	; (8009380 <vPortFree+0xc0>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	3301      	adds	r3, #1
 8009366:	4a06      	ldr	r2, [pc, #24]	; (8009380 <vPortFree+0xc0>)
 8009368:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800936a:	f7fe fdf7 	bl	8007f5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800936e:	bf00      	nop
 8009370:	3718      	adds	r7, #24
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	20004478 	.word	0x20004478
 800937c:	20004468 	.word	0x20004468
 8009380:	20004474 	.word	0x20004474

08009384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009384:	b480      	push	{r7}
 8009386:	b085      	sub	sp, #20
 8009388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800938a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800938e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009390:	4b27      	ldr	r3, [pc, #156]	; (8009430 <prvHeapInit+0xac>)
 8009392:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f003 0307 	and.w	r3, r3, #7
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00c      	beq.n	80093b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3307      	adds	r3, #7
 80093a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f023 0307 	bic.w	r3, r3, #7
 80093aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	4a1f      	ldr	r2, [pc, #124]	; (8009430 <prvHeapInit+0xac>)
 80093b4:	4413      	add	r3, r2
 80093b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093bc:	4a1d      	ldr	r2, [pc, #116]	; (8009434 <prvHeapInit+0xb0>)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80093c2:	4b1c      	ldr	r3, [pc, #112]	; (8009434 <prvHeapInit+0xb0>)
 80093c4:	2200      	movs	r2, #0
 80093c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	4413      	add	r3, r2
 80093ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80093d0:	2208      	movs	r2, #8
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	1a9b      	subs	r3, r3, r2
 80093d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f023 0307 	bic.w	r3, r3, #7
 80093de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	4a15      	ldr	r2, [pc, #84]	; (8009438 <prvHeapInit+0xb4>)
 80093e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80093e6:	4b14      	ldr	r3, [pc, #80]	; (8009438 <prvHeapInit+0xb4>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2200      	movs	r2, #0
 80093ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80093ee:	4b12      	ldr	r3, [pc, #72]	; (8009438 <prvHeapInit+0xb4>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2200      	movs	r2, #0
 80093f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	1ad2      	subs	r2, r2, r3
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009404:	4b0c      	ldr	r3, [pc, #48]	; (8009438 <prvHeapInit+0xb4>)
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	4a0a      	ldr	r2, [pc, #40]	; (800943c <prvHeapInit+0xb8>)
 8009412:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	4a09      	ldr	r2, [pc, #36]	; (8009440 <prvHeapInit+0xbc>)
 800941a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800941c:	4b09      	ldr	r3, [pc, #36]	; (8009444 <prvHeapInit+0xc0>)
 800941e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009422:	601a      	str	r2, [r3, #0]
}
 8009424:	bf00      	nop
 8009426:	3714      	adds	r7, #20
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr
 8009430:	2000085c 	.word	0x2000085c
 8009434:	2000445c 	.word	0x2000445c
 8009438:	20004464 	.word	0x20004464
 800943c:	2000446c 	.word	0x2000446c
 8009440:	20004468 	.word	0x20004468
 8009444:	20004478 	.word	0x20004478

08009448 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009450:	4b28      	ldr	r3, [pc, #160]	; (80094f4 <prvInsertBlockIntoFreeList+0xac>)
 8009452:	60fb      	str	r3, [r7, #12]
 8009454:	e002      	b.n	800945c <prvInsertBlockIntoFreeList+0x14>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	60fb      	str	r3, [r7, #12]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	429a      	cmp	r2, r3
 8009464:	d8f7      	bhi.n	8009456 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	4413      	add	r3, r2
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	429a      	cmp	r2, r3
 8009476:	d108      	bne.n	800948a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	685a      	ldr	r2, [r3, #4]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	441a      	add	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	441a      	add	r2, r3
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	429a      	cmp	r2, r3
 800949c:	d118      	bne.n	80094d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	4b15      	ldr	r3, [pc, #84]	; (80094f8 <prvInsertBlockIntoFreeList+0xb0>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d00d      	beq.n	80094c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	685a      	ldr	r2, [r3, #4]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	441a      	add	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	601a      	str	r2, [r3, #0]
 80094c4:	e008      	b.n	80094d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80094c6:	4b0c      	ldr	r3, [pc, #48]	; (80094f8 <prvInsertBlockIntoFreeList+0xb0>)
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	601a      	str	r2, [r3, #0]
 80094ce:	e003      	b.n	80094d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d002      	beq.n	80094e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094e6:	bf00      	nop
 80094e8:	3714      	adds	r7, #20
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	2000445c 	.word	0x2000445c
 80094f8:	20004464 	.word	0x20004464

080094fc <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b08f      	sub	sp, #60	; 0x3c
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	891a      	ldrh	r2, [r3, #8]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	8a1b      	ldrh	r3, [r3, #16]
 800950e:	429a      	cmp	r2, r3
 8009510:	d301      	bcc.n	8009516 <load_descriptor_values+0x1a>
        return false;
 8009512:	2300      	movs	r3, #0
 8009514:	e156      	b.n	80097c4 <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	895b      	ldrh	r3, [r3, #10]
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	62fb      	str	r3, [r7, #44]	; 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 8009528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800952a:	0a1b      	lsrs	r3, r3, #8
 800952c:	b2da      	uxtb	r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 8009532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009534:	f003 0303 	and.w	r3, r3, #3
 8009538:	2b02      	cmp	r3, #2
 800953a:	d05a      	beq.n	80095f2 <load_descriptor_values+0xf6>
 800953c:	2b02      	cmp	r3, #2
 800953e:	f200 8094 	bhi.w	800966a <load_descriptor_values+0x16e>
 8009542:	2b00      	cmp	r3, #0
 8009544:	d002      	beq.n	800954c <load_descriptor_values+0x50>
 8009546:	2b01      	cmp	r3, #1
 8009548:	d01f      	beq.n	800958a <load_descriptor_values+0x8e>
 800954a:	e08e      	b.n	800966a <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 8009552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009554:	089b      	lsrs	r3, r3, #2
 8009556:	b29b      	uxth	r3, r3
 8009558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800955c:	b29a      	uxth	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 8009562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009564:	0e1b      	lsrs	r3, r3, #24
 8009566:	b25b      	sxtb	r3, r3
 8009568:	f003 030f 	and.w	r3, r3, #15
 800956c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = (word0 >> 16) & 0xFF;
 8009570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009572:	0c1b      	lsrs	r3, r3, #16
 8009574:	b2db      	uxtb	r3, r3
 8009576:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 8009578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957a:	0f1b      	lsrs	r3, r3, #28
 800957c:	b29b      	uxth	r3, r3
 800957e:	f003 030f 	and.w	r3, r3, #15
 8009582:	b29a      	uxth	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	825a      	strh	r2, [r3, #18]
            break;
 8009588:	e0b4      	b.n	80096f4 <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	895b      	ldrh	r3, [r3, #10]
 8009594:	3301      	adds	r3, #1
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	4413      	add	r3, r2
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 800959e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a0:	0c1b      	lsrs	r3, r3, #16
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 80095ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b0:	089b      	lsrs	r3, r3, #2
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095b8:	b29a      	uxth	r2, r3
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	0f1b      	lsrs	r3, r3, #28
 80095be:	b29b      	uxth	r3, r3
 80095c0:	019b      	lsls	r3, r3, #6
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	4313      	orrs	r3, r2
 80095c6:	b29a      	uxth	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 80095cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ce:	0f1b      	lsrs	r3, r3, #28
 80095d0:	b25b      	sxtb	r3, r3
 80095d2:	f003 030f 	and.w	r3, r3, #15
 80095d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word1 & 0xFFFF;
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	b29b      	uxth	r3, r3
 80095de:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	0c1b      	lsrs	r3, r3, #16
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	825a      	strh	r2, [r3, #18]
            break;
 80095f0:	e080      	b.n	80096f4 <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	895b      	ldrh	r3, [r3, #10]
 80095fc:	3301      	adds	r3, #1
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4413      	add	r3, r2
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	62bb      	str	r3, [r7, #40]	; 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	895b      	ldrh	r3, [r3, #10]
 8009610:	3302      	adds	r3, #2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4413      	add	r3, r2
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	627b      	str	r3, [r7, #36]	; 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	895b      	ldrh	r3, [r3, #10]
 8009624:	3303      	adds	r3, #3
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	4413      	add	r3, r2
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 800962e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009630:	0c1b      	lsrs	r3, r3, #16
 8009632:	b29a      	uxth	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8009638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963a:	089b      	lsrs	r3, r3, #2
 800963c:	b29b      	uxth	r3, r3
 800963e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009642:	b29a      	uxth	r2, r3
 8009644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009646:	0a1b      	lsrs	r3, r3, #8
 8009648:	b29b      	uxth	r3, r3
 800964a:	019b      	lsls	r3, r3, #6
 800964c:	b29b      	uxth	r3, r3
 800964e:	4313      	orrs	r3, r2
 8009650:	b29a      	uxth	r2, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8009656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009658:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 800965c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965e:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 8009660:	6a3b      	ldr	r3, [r7, #32]
 8009662:	b29a      	uxth	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	825a      	strh	r2, [r3, #18]
            break;
 8009668:	e044      	b.n	80096f4 <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	895b      	ldrh	r3, [r3, #10]
 8009674:	3301      	adds	r3, #1
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4413      	add	r3, r2
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	895b      	ldrh	r3, [r3, #10]
 8009688:	3302      	adds	r3, #2
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	4413      	add	r3, r2
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	895b      	ldrh	r3, [r3, #10]
 800969c:	3303      	adds	r3, #3
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	4413      	add	r3, r2
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	895b      	ldrh	r3, [r3, #10]
 80096b0:	3304      	adds	r3, #4
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	4413      	add	r3, r2
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	b29a      	uxth	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 80096c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c4:	089b      	lsrs	r3, r3, #2
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	0a1b      	lsrs	r3, r3, #8
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	019b      	lsls	r3, r3, #6
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	4313      	orrs	r3, r2
 80096da:	b29a      	uxth	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	825a      	strh	r2, [r3, #18]
            break;
 80096f2:	bf00      	nop
        }
    }

    if (!iter->message)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d106      	bne.n	800970a <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	621a      	str	r2, [r3, #32]
 8009708:	e041      	b.n	800978e <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	685a      	ldr	r2, [r3, #4]
 800970e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009710:	441a      	add	r2, r3
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	619a      	str	r2, [r3, #24]

        if (size_offset)
 8009716:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800971a:	2b00      	cmp	r3, #0
 800971c:	d008      	beq.n	8009730 <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	699a      	ldr	r2, [r3, #24]
 8009722:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009726:	425b      	negs	r3, r3
 8009728:	441a      	add	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	621a      	str	r2, [r3, #32]
 800972e:	e01a      	b.n	8009766 <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	7d9b      	ldrb	r3, [r3, #22]
 8009734:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009738:	2b20      	cmp	r3, #32
 800973a:	d111      	bne.n	8009760 <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	7d9b      	ldrb	r3, [r3, #22]
 8009740:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8009744:	2b00      	cmp	r3, #0
 8009746:	d005      	beq.n	8009754 <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	7d9b      	ldrb	r3, [r3, #22]
 800974c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8009750:	2b80      	cmp	r3, #128	; 0x80
 8009752:	d105      	bne.n	8009760 <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f103 0214 	add.w	r2, r3, #20
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	621a      	str	r2, [r3, #32]
 800975e:	e002      	b.n	8009766 <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	7d9b      	ldrb	r3, [r3, #22]
 800976a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800976e:	2b80      	cmp	r3, #128	; 0x80
 8009770:	d109      	bne.n	8009786 <load_descriptor_values+0x28a>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	699b      	ldr	r3, [r3, #24]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d005      	beq.n	8009786 <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	699b      	ldr	r3, [r3, #24]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	61da      	str	r2, [r3, #28]
 8009784:	e003      	b.n	800978e <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	699a      	ldr	r2, [r3, #24]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	7d9b      	ldrb	r3, [r3, #22]
 8009792:	f003 030f 	and.w	r3, r3, #15
 8009796:	2b08      	cmp	r3, #8
 8009798:	d005      	beq.n	80097a6 <load_descriptor_values+0x2aa>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	7d9b      	ldrb	r3, [r3, #22]
 800979e:	f003 030f 	and.w	r3, r3, #15
 80097a2:	2b09      	cmp	r3, #9
 80097a4:	d10a      	bne.n	80097bc <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	685a      	ldr	r2, [r3, #4]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	89db      	ldrh	r3, [r3, #14]
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4413      	add	r3, r2
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	625a      	str	r2, [r3, #36]	; 0x24
 80097ba:	e002      	b.n	80097c2 <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return true;
 80097c2:	2301      	movs	r3, #1
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	373c      	adds	r7, #60	; 0x3c
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b085      	sub	sp, #20
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
    iter->index++;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	891b      	ldrh	r3, [r3, #8]
 80097dc:	3301      	adds	r3, #1
 80097de:	b29a      	uxth	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	891a      	ldrh	r2, [r3, #8]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	8a1b      	ldrh	r3, [r3, #16]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d30c      	bcc.n	800980c <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 800980a:	e03c      	b.n	8009886 <advance_iterator+0xb6>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	895b      	ldrh	r3, [r3, #10]
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	4413      	add	r3, r2
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	0a1b      	lsrs	r3, r3, #8
 8009822:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f003 0303 	and.w	r3, r3, #3
 800982a:	2201      	movs	r2, #1
 800982c:	fa02 f303 	lsl.w	r3, r2, r3
 8009830:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	895a      	ldrh	r2, [r3, #10]
 8009836:	893b      	ldrh	r3, [r7, #8]
 8009838:	4413      	add	r3, r2
 800983a:	b29a      	uxth	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	899a      	ldrh	r2, [r3, #12]
 8009844:	7afb      	ldrb	r3, [r7, #11]
 8009846:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800984a:	2b00      	cmp	r3, #0
 800984c:	bf0c      	ite	eq
 800984e:	2301      	moveq	r3, #1
 8009850:	2300      	movne	r3, #0
 8009852:	b2db      	uxtb	r3, r3
 8009854:	b29b      	uxth	r3, r3
 8009856:	4413      	add	r3, r2
 8009858:	b29a      	uxth	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	89da      	ldrh	r2, [r3, #14]
 8009862:	7afb      	ldrb	r3, [r7, #11]
 8009864:	f003 030f 	and.w	r3, r3, #15
 8009868:	2b08      	cmp	r3, #8
 800986a:	d004      	beq.n	8009876 <advance_iterator+0xa6>
 800986c:	7afb      	ldrb	r3, [r7, #11]
 800986e:	f003 030f 	and.w	r3, r3, #15
 8009872:	2b09      	cmp	r3, #9
 8009874:	d101      	bne.n	800987a <advance_iterator+0xaa>
 8009876:	2301      	movs	r3, #1
 8009878:	e000      	b.n	800987c <advance_iterator+0xac>
 800987a:	2300      	movs	r3, #0
 800987c:	b29b      	uxth	r3, r3
 800987e:	4413      	add	r3, r2
 8009880:	b29a      	uxth	r2, r3
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	81da      	strh	r2, [r3, #14]
}
 8009886:	bf00      	nop
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr

08009892 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b084      	sub	sp, #16
 8009896:	af00      	add	r7, sp, #0
 8009898:	60f8      	str	r0, [r7, #12]
 800989a:	60b9      	str	r1, [r7, #8]
 800989c:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 800989e:	2228      	movs	r2, #40	; 0x28
 80098a0:	2100      	movs	r1, #0
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f003 f816 	bl	800c8d4 <memset>

    iter->descriptor = desc;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	601a      	str	r2, [r3, #0]
    iter->message = message;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 80098b4:	68f8      	ldr	r0, [r7, #12]
 80098b6:	f7ff fe21 	bl	80094fc <load_descriptor_values>
 80098ba:	4603      	mov	r3, r0
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	0a1b      	lsrs	r3, r3, #8
 80098e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80098e6:	2b80      	cmp	r3, #128	; 0x80
 80098e8:	d109      	bne.n	80098fe <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	3304      	adds	r3, #4
 80098ee:	461a      	mov	r2, r3
 80098f0:	6939      	ldr	r1, [r7, #16]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f7ff ffcd 	bl	8009892 <pb_field_iter_begin>
 80098f8:	4603      	mov	r3, r0
 80098fa:	75fb      	strb	r3, [r7, #23]
 80098fc:	e008      	b.n	8009910 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	461a      	mov	r2, r3
 8009904:	6939      	ldr	r1, [r7, #16]
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f7ff ffc3 	bl	8009892 <pb_field_iter_begin>
 800990c:	4603      	mov	r3, r0
 800990e:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	f103 020c 	add.w	r2, r3, #12
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	621a      	str	r2, [r3, #32]
    return status;
 800991a:	7dfb      	ldrb	r3, [r7, #23]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3718      	adds	r7, #24
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f7ff ff4f 	bl	80097d0 <advance_iterator>
    (void)load_descriptor_values(iter);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f7ff fde2 	bl	80094fc <load_descriptor_values>
    return iter->index != 0;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	891b      	ldrh	r3, [r3, #8]
 800993c:	2b00      	cmp	r3, #0
 800993e:	bf14      	ite	ne
 8009940:	2301      	movne	r3, #1
 8009942:	2300      	moveq	r3, #0
 8009944:	b2db      	uxtb	r3, r3
}
 8009946:	4618      	mov	r0, r3
 8009948:	3708      	adds	r7, #8
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b084      	sub	sp, #16
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
 8009956:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	8a1b      	ldrh	r3, [r3, #16]
 800995c:	461a      	mov	r2, r3
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	4293      	cmp	r3, r2
 8009962:	d101      	bne.n	8009968 <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 8009964:	2301      	movs	r3, #1
 8009966:	e044      	b.n	80099f2 <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	8a9b      	ldrh	r3, [r3, #20]
 800996e:	461a      	mov	r2, r3
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	4293      	cmp	r3, r2
 8009974:	d901      	bls.n	800997a <pb_field_iter_find+0x2c>
    {
        return false;
 8009976:	2300      	movs	r3, #0
 8009978:	e03b      	b.n	80099f2 <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	891b      	ldrh	r3, [r3, #8]
 800997e:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	8a1b      	ldrh	r3, [r3, #16]
 8009984:	461a      	mov	r2, r3
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	4293      	cmp	r3, r2
 800998a:	d204      	bcs.n	8009996 <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	8a1a      	ldrh	r2, [r3, #16]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7ff ff1a 	bl	80097d0 <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	895b      	ldrh	r3, [r3, #10]
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	4413      	add	r3, r2
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	089a      	lsrs	r2, r3, #2
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	4053      	eors	r3, r2
 80099b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d110      	bne.n	80099e0 <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f7ff fd9c 	bl	80094fc <load_descriptor_values>

                if (iter->tag == tag &&
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	8a1b      	ldrh	r3, [r3, #16]
 80099c8:	461a      	mov	r2, r3
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d107      	bne.n	80099e0 <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	7d9b      	ldrb	r3, [r3, #22]
 80099d4:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 80099d8:	2b0a      	cmp	r3, #10
 80099da:	d001      	beq.n	80099e0 <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 80099dc:	2301      	movs	r3, #1
 80099de:	e008      	b.n	80099f2 <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	891b      	ldrh	r3, [r3, #8]
 80099e4:	89fa      	ldrh	r2, [r7, #14]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d1d5      	bne.n	8009996 <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f7ff fd86 	bl	80094fc <load_descriptor_values>
        return false;
 80099f0:	2300      	movs	r3, #0
    }
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b084      	sub	sp, #16
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	7d9b      	ldrb	r3, [r3, #22]
 8009a06:	f003 030f 	and.w	r3, r3, #15
 8009a0a:	2b0a      	cmp	r3, #10
 8009a0c:	d101      	bne.n	8009a12 <pb_field_iter_find_extension+0x18>
    {
        return true;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e022      	b.n	8009a58 <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	891b      	ldrh	r3, [r3, #8]
 8009a16:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f7ff fed9 	bl	80097d0 <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	895b      	ldrh	r3, [r3, #10]
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	4413      	add	r3, r2
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	0a1b      	lsrs	r3, r3, #8
 8009a34:	f003 030f 	and.w	r3, r3, #15
 8009a38:	2b0a      	cmp	r3, #10
 8009a3a:	d104      	bne.n	8009a46 <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f7ff fd5d 	bl	80094fc <load_descriptor_values>
 8009a42:	4603      	mov	r3, r0
 8009a44:	e008      	b.n	8009a58 <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	891b      	ldrh	r3, [r3, #8]
 8009a4a:	89fa      	ldrh	r2, [r7, #14]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d1e3      	bne.n	8009a18 <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f7ff fd53 	bl	80094fc <load_descriptor_values>
        return false;
 8009a56:	2300      	movs	r3, #0
    }
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3710      	adds	r7, #16
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <pb_const_cast>:

static void *pb_const_cast(const void *p)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
     * to avoid spurious compiler warnings. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	60fb      	str	r3, [r7, #12]
    return t.p1;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3714      	adds	r7, #20
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr

08009a7a <pb_field_iter_begin_const>:

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b084      	sub	sp, #16
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	60f8      	str	r0, [r7, #12]
 8009a82:	60b9      	str	r1, [r7, #8]
 8009a84:	607a      	str	r2, [r7, #4]
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7ff ffea 	bl	8009a60 <pb_const_cast>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	461a      	mov	r2, r3
 8009a90:	68b9      	ldr	r1, [r7, #8]
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f7ff fefd 	bl	8009892 <pb_field_iter_begin>
 8009a98:	4603      	mov	r3, r0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <pb_field_iter_begin_extension_const>:

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b082      	sub	sp, #8
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	6039      	str	r1, [r7, #0]
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
 8009aac:	6838      	ldr	r0, [r7, #0]
 8009aae:	f7ff ffd7 	bl	8009a60 <pb_const_cast>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f7ff ff04 	bl	80098c4 <pb_field_iter_begin_extension>
 8009abc:	4603      	mov	r3, r0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <pb_default_field_callback>:

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b086      	sub	sp, #24
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	60f8      	str	r0, [r7, #12]
 8009ace:	60b9      	str	r1, [r7, #8]
 8009ad0:	607a      	str	r2, [r7, #4]
    if (field->data_size == sizeof(pb_callback_t))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	8a5b      	ldrh	r3, [r3, #18]
 8009ad6:	2b08      	cmp	r3, #8
 8009ad8:	d125      	bne.n	8009b26 <pb_default_field_callback+0x60>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	69db      	ldr	r3, [r3, #28]
 8009ade:	617b      	str	r3, [r7, #20]

        if (pCallback != NULL)
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d01f      	beq.n	8009b26 <pb_default_field_callback+0x60>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00c      	beq.n	8009b06 <pb_default_field_callback+0x40>
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d008      	beq.n	8009b06 <pb_default_field_callback+0x40>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	3204      	adds	r2, #4
 8009afc:	6879      	ldr	r1, [r7, #4]
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	4798      	blx	r3
 8009b02:	4603      	mov	r3, r0
 8009b04:	e010      	b.n	8009b28 <pb_default_field_callback+0x62>
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00c      	beq.n	8009b26 <pb_default_field_callback+0x60>
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d008      	beq.n	8009b26 <pb_default_field_callback+0x60>
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	697a      	ldr	r2, [r7, #20]
 8009b1a:	3204      	adds	r2, #4
 8009b1c:	6879      	ldr	r1, [r7, #4]
 8009b1e:	68b8      	ldr	r0, [r7, #8]
 8009b20:	4798      	blx	r3
 8009b22:	4603      	mov	r3, r0
 8009b24:	e000      	b.n	8009b28 <pb_default_field_callback+0x62>
            }
        }
    }

    return true; /* Success, but didn't do anything */
 8009b26:	2301      	movs	r3, #1

}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3718      	adds	r7, #24
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	685a      	ldr	r2, [r3, #4]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	441a      	add	r2, r3
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d004      	beq.n	8009b5e <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	6979      	ldr	r1, [r7, #20]
 8009b58:	68b8      	ldr	r0, [r7, #8]
 8009b5a:	f002 fead 	bl	800c8b8 <memcpy>
    }
    
    return true;
 8009b5e:	2301      	movs	r3, #1
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3718      	adds	r7, #24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b088      	sub	sp, #32
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
    if (count == 0)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d101      	bne.n	8009b7e <pb_read+0x16>
        return true;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e05f      	b.n	8009c3e <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d123      	bne.n	8009bcc <pb_read+0x64>
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a2f      	ldr	r2, [pc, #188]	; (8009c48 <pb_read+0xe0>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d01e      	beq.n	8009bcc <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 8009b8e:	e011      	b.n	8009bb4 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 8009b90:	f107 0310 	add.w	r3, r7, #16
 8009b94:	2210      	movs	r2, #16
 8009b96:	4619      	mov	r1, r3
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f7ff ffe5 	bl	8009b68 <pb_read>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	f083 0301 	eor.w	r3, r3, #1
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d001      	beq.n	8009bae <pb_read+0x46>
				return false;
 8009baa:	2300      	movs	r3, #0
 8009bac:	e047      	b.n	8009c3e <pb_read+0xd6>
			
			count -= 16;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	3b10      	subs	r3, #16
 8009bb2:	607b      	str	r3, [r7, #4]
		while (count > 16)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b10      	cmp	r3, #16
 8009bb8:	d8ea      	bhi.n	8009b90 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 8009bba:	f107 0310 	add.w	r3, r7, #16
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f7ff ffd0 	bl	8009b68 <pb_read>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	e038      	b.n	8009c3e <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d90b      	bls.n	8009bee <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d002      	beq.n	8009be4 <pb_read+0x7c>
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	e000      	b.n	8009be6 <pb_read+0x7e>
 8009be4:	4b19      	ldr	r3, [pc, #100]	; (8009c4c <pb_read+0xe4>)
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	60d3      	str	r3, [r2, #12]
 8009bea:	2300      	movs	r3, #0
 8009bec:	e027      	b.n	8009c3e <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	68b9      	ldr	r1, [r7, #8]
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	4798      	blx	r3
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	f083 0301 	eor.w	r3, r3, #1
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00b      	beq.n	8009c1e <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d002      	beq.n	8009c14 <pb_read+0xac>
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	e000      	b.n	8009c16 <pb_read+0xae>
 8009c14:	4b0e      	ldr	r3, [pc, #56]	; (8009c50 <pb_read+0xe8>)
 8009c16:	68fa      	ldr	r2, [r7, #12]
 8009c18:	60d3      	str	r3, [r2, #12]
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	e00f      	b.n	8009c3e <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d903      	bls.n	8009c30 <pb_read+0xc8>
        stream->bytes_left = 0;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	609a      	str	r2, [r3, #8]
 8009c2e:	e005      	b.n	8009c3c <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	689a      	ldr	r2, [r3, #8]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	1ad2      	subs	r2, r2, r3
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	609a      	str	r2, [r3, #8]

    return true;
 8009c3c:	2301      	movs	r3, #1
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3720      	adds	r7, #32
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	08009b31 	.word	0x08009b31
 8009c4c:	0800cb28 	.word	0x0800cb28
 8009c50:	0800cb38 	.word	0x0800cb38

08009c54 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d10b      	bne.n	8009c7e <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d002      	beq.n	8009c74 <pb_readbyte+0x20>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	e000      	b.n	8009c76 <pb_readbyte+0x22>
 8009c74:	4b13      	ldr	r3, [pc, #76]	; (8009cc4 <pb_readbyte+0x70>)
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	60d3      	str	r3, [r2, #12]
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	e01d      	b.n	8009cba <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2201      	movs	r2, #1
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	4798      	blx	r3
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	f083 0301 	eor.w	r3, r3, #1
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00b      	beq.n	8009cae <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d002      	beq.n	8009ca4 <pb_readbyte+0x50>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	e000      	b.n	8009ca6 <pb_readbyte+0x52>
 8009ca4:	4b08      	ldr	r3, [pc, #32]	; (8009cc8 <pb_readbyte+0x74>)
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	60d3      	str	r3, [r2, #12]
 8009caa:	2300      	movs	r3, #0
 8009cac:	e005      	b.n	8009cba <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	1e5a      	subs	r2, r3, #1
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	609a      	str	r2, [r3, #8]
    
    return true;    
 8009cb8:	2301      	movs	r3, #1
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3708      	adds	r7, #8
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	0800cb28 	.word	0x0800cb28
 8009cc8:	0800cb38 	.word	0x0800cb38

08009ccc <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 8009ccc:	b490      	push	{r4, r7}
 8009cce:	b08a      	sub	sp, #40	; 0x28
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 8009cd8:	4b0a      	ldr	r3, [pc, #40]	; (8009d04 <pb_istream_from_buffer+0x38>)
 8009cda:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	461c      	mov	r4, r3
 8009cf0:	f107 0318 	add.w	r3, r7, #24
 8009cf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009cf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	3728      	adds	r7, #40	; 0x28
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bc90      	pop	{r4, r7}
 8009d02:	4770      	bx	lr
 8009d04:	08009b31 	.word	0x08009b31

08009d08 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b088      	sub	sp, #32
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8009d14:	f107 0315 	add.w	r3, r7, #21
 8009d18:	4619      	mov	r1, r3
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f7ff ff9a 	bl	8009c54 <pb_readbyte>
 8009d20:	4603      	mov	r3, r0
 8009d22:	f083 0301 	eor.w	r3, r3, #1
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d00b      	beq.n	8009d44 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d105      	bne.n	8009d40 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d002      	beq.n	8009d40 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 8009d40:	2300      	movs	r3, #0
 8009d42:	e084      	b.n	8009e4e <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 8009d44:	7d7b      	ldrb	r3, [r7, #21]
 8009d46:	b25b      	sxtb	r3, r3
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	db02      	blt.n	8009d52 <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 8009d4c:	7d7b      	ldrb	r3, [r7, #21]
 8009d4e:	61fb      	str	r3, [r7, #28]
 8009d50:	e079      	b.n	8009e46 <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 8009d52:	2307      	movs	r3, #7
 8009d54:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 8009d56:	7d7b      	ldrb	r3, [r7, #21]
 8009d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d5c:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 8009d5e:	f107 0315 	add.w	r3, r7, #21
 8009d62:	4619      	mov	r1, r3
 8009d64:	68f8      	ldr	r0, [r7, #12]
 8009d66:	f7ff ff75 	bl	8009c54 <pb_readbyte>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	f083 0301 	eor.w	r3, r3, #1
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <pb_decode_varint32_eof+0x72>
                return false;
 8009d76:	2300      	movs	r3, #0
 8009d78:	e069      	b.n	8009e4e <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	2b1f      	cmp	r3, #31
 8009d7e:	d92f      	bls.n	8009de0 <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	2b3e      	cmp	r3, #62	; 0x3e
 8009d84:	d801      	bhi.n	8009d8a <pb_decode_varint32_eof+0x82>
 8009d86:	23ff      	movs	r3, #255	; 0xff
 8009d88:	e000      	b.n	8009d8c <pb_decode_varint32_eof+0x84>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8009d8e:	7d7b      	ldrb	r3, [r7, #21]
 8009d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d006      	beq.n	8009da6 <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 8009d98:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	da05      	bge.n	8009daa <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 8009d9e:	7d7b      	ldrb	r3, [r7, #21]
 8009da0:	7dfa      	ldrb	r2, [r7, #23]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d101      	bne.n	8009daa <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8009da6:	2301      	movs	r3, #1
 8009da8:	e000      	b.n	8009dac <pb_decode_varint32_eof+0xa4>
 8009daa:	2300      	movs	r3, #0
 8009dac:	75bb      	strb	r3, [r7, #22]
 8009dae:	7dbb      	ldrb	r3, [r7, #22]
 8009db0:	f003 0301 	and.w	r3, r3, #1
 8009db4:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	2b3f      	cmp	r3, #63	; 0x3f
 8009dba:	d805      	bhi.n	8009dc8 <pb_decode_varint32_eof+0xc0>
 8009dbc:	7dbb      	ldrb	r3, [r7, #22]
 8009dbe:	f083 0301 	eor.w	r3, r3, #1
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d037      	beq.n	8009e38 <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d002      	beq.n	8009dd6 <pb_decode_varint32_eof+0xce>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	e000      	b.n	8009dd8 <pb_decode_varint32_eof+0xd0>
 8009dd6:	4b20      	ldr	r3, [pc, #128]	; (8009e58 <pb_decode_varint32_eof+0x150>)
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	60d3      	str	r3, [r2, #12]
 8009ddc:	2300      	movs	r3, #0
 8009dde:	e036      	b.n	8009e4e <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	2b1c      	cmp	r3, #28
 8009de4:	d11f      	bne.n	8009e26 <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 8009de6:	7d7b      	ldrb	r3, [r7, #21]
 8009de8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d010      	beq.n	8009e12 <pb_decode_varint32_eof+0x10a>
 8009df0:	7d7b      	ldrb	r3, [r7, #21]
 8009df2:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8009df6:	2b78      	cmp	r3, #120	; 0x78
 8009df8:	d00b      	beq.n	8009e12 <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d002      	beq.n	8009e08 <pb_decode_varint32_eof+0x100>
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	e000      	b.n	8009e0a <pb_decode_varint32_eof+0x102>
 8009e08:	4b13      	ldr	r3, [pc, #76]	; (8009e58 <pb_decode_varint32_eof+0x150>)
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	60d3      	str	r3, [r2, #12]
 8009e0e:	2300      	movs	r3, #0
 8009e10:	e01d      	b.n	8009e4e <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 8009e12:	7d7b      	ldrb	r3, [r7, #21]
 8009e14:	f003 020f 	and.w	r2, r3, #15
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e1e:	69fa      	ldr	r2, [r7, #28]
 8009e20:	4313      	orrs	r3, r2
 8009e22:	61fb      	str	r3, [r7, #28]
 8009e24:	e008      	b.n	8009e38 <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8009e26:	7d7b      	ldrb	r3, [r7, #21]
 8009e28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e32:	69fa      	ldr	r2, [r7, #28]
 8009e34:	4313      	orrs	r3, r2
 8009e36:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	3307      	adds	r3, #7
 8009e3c:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 8009e3e:	7d7b      	ldrb	r3, [r7, #21]
 8009e40:	b25b      	sxtb	r3, r3
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	db8b      	blt.n	8009d5e <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	69fa      	ldr	r2, [r7, #28]
 8009e4a:	601a      	str	r2, [r3, #0]
   return true;
 8009e4c:	2301      	movs	r3, #1
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3720      	adds	r7, #32
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	0800cb44 	.word	0x0800cb44

08009e5c <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 8009e66:	2200      	movs	r2, #0
 8009e68:	6839      	ldr	r1, [r7, #0]
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f7ff ff4c 	bl	8009d08 <pb_decode_varint32_eof>
 8009e70:	4603      	mov	r3, r0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
	...

08009e7c <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 8009e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e80:	b08a      	sub	sp, #40	; 0x28
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	60f8      	str	r0, [r7, #12]
 8009e86:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	627b      	str	r3, [r7, #36]	; 0x24
    uint64_t result = 0;
 8009e8c:	f04f 0200 	mov.w	r2, #0
 8009e90:	f04f 0300 	mov.w	r3, #0
 8009e94:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 8009e98:	f107 0317 	add.w	r3, r7, #23
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	68f8      	ldr	r0, [r7, #12]
 8009ea0:	f7ff fed8 	bl	8009c54 <pb_readbyte>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	f083 0301 	eor.w	r3, r3, #1
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d001      	beq.n	8009eb4 <pb_decode_varint+0x38>
            return false;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	e041      	b.n	8009f38 <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb6:	2b3e      	cmp	r3, #62	; 0x3e
 8009eb8:	d910      	bls.n	8009edc <pb_decode_varint+0x60>
 8009eba:	7dfb      	ldrb	r3, [r7, #23]
 8009ebc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d00b      	beq.n	8009edc <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d002      	beq.n	8009ed2 <pb_decode_varint+0x56>
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	e000      	b.n	8009ed4 <pb_decode_varint+0x58>
 8009ed2:	4b1c      	ldr	r3, [pc, #112]	; (8009f44 <pb_decode_varint+0xc8>)
 8009ed4:	68fa      	ldr	r2, [r7, #12]
 8009ed6:	60d3      	str	r3, [r2, #12]
 8009ed8:	2300      	movs	r3, #0
 8009eda:	e02d      	b.n	8009f38 <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8009edc:	7dfb      	ldrb	r3, [r7, #23]
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	603b      	str	r3, [r7, #0]
 8009ee4:	607a      	str	r2, [r7, #4]
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	f003 087f 	and.w	r8, r3, #127	; 0x7f
 8009eec:	f04f 0900 	mov.w	r9, #0
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef2:	f1a3 0120 	sub.w	r1, r3, #32
 8009ef6:	f1c3 0220 	rsb	r2, r3, #32
 8009efa:	fa09 f503 	lsl.w	r5, r9, r3
 8009efe:	fa08 f101 	lsl.w	r1, r8, r1
 8009f02:	430d      	orrs	r5, r1
 8009f04:	fa28 f202 	lsr.w	r2, r8, r2
 8009f08:	4315      	orrs	r5, r2
 8009f0a:	fa08 f403 	lsl.w	r4, r8, r3
 8009f0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f12:	ea42 0a04 	orr.w	sl, r2, r4
 8009f16:	ea43 0b05 	orr.w	fp, r3, r5
 8009f1a:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 8009f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f20:	3307      	adds	r3, #7
 8009f22:	627b      	str	r3, [r7, #36]	; 0x24
    } while (byte & 0x80);
 8009f24:	7dfb      	ldrb	r3, [r7, #23]
 8009f26:	b25b      	sxtb	r3, r3
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	dbb5      	blt.n	8009e98 <pb_decode_varint+0x1c>
    
    *dest = result;
 8009f2c:	68b9      	ldr	r1, [r7, #8]
 8009f2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f32:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 8009f36:	2301      	movs	r3, #1
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3728      	adds	r7, #40	; 0x28
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f42:	bf00      	nop
 8009f44:	0800cb44 	.word	0x0800cb44

08009f48 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 8009f50:	f107 030f 	add.w	r3, r7, #15
 8009f54:	2201      	movs	r2, #1
 8009f56:	4619      	mov	r1, r3
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f7ff fe05 	bl	8009b68 <pb_read>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	f083 0301 	eor.w	r3, r3, #1
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d001      	beq.n	8009f6e <pb_skip_varint+0x26>
            return false;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	e004      	b.n	8009f78 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 8009f6e:	7bfb      	ldrb	r3, [r7, #15]
 8009f70:	b25b      	sxtb	r3, r3
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	dbec      	blt.n	8009f50 <pb_skip_varint+0x8>
    return true;
 8009f76:	2301      	movs	r3, #1
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 8009f88:	f107 030c 	add.w	r3, r7, #12
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f7ff ff64 	bl	8009e5c <pb_decode_varint32>
 8009f94:	4603      	mov	r3, r0
 8009f96:	f083 0301 	eor.w	r3, r3, #1
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d001      	beq.n	8009fa4 <pb_skip_string+0x24>
        return false;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	e006      	b.n	8009fb2 <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	2100      	movs	r1, #0
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f7ff fddc 	bl	8009b68 <pb_read>
 8009fb0:	4603      	mov	r3, r0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b086      	sub	sp, #24
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	60f8      	str	r0, [r7, #12]
 8009fc2:	60b9      	str	r1, [r7, #8]
 8009fc4:	607a      	str	r2, [r7, #4]
 8009fc6:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8009fda:	f107 0314 	add.w	r3, r7, #20
 8009fde:	683a      	ldr	r2, [r7, #0]
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	68f8      	ldr	r0, [r7, #12]
 8009fe4:	f7ff fe90 	bl	8009d08 <pb_decode_varint32_eof>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	f083 0301 	eor.w	r3, r3, #1
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d001      	beq.n	8009ff8 <pb_decode_tag+0x3e>
    {
        return false;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	e00b      	b.n	800a010 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	08da      	lsrs	r2, r3, #3
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	b2db      	uxtb	r3, r3
 800a004:	f003 0307 	and.w	r3, r3, #7
 800a008:	b2da      	uxtb	r2, r3
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	701a      	strb	r2, [r3, #0]
    return true;
 800a00e:	2301      	movs	r3, #1
}
 800a010:	4618      	mov	r0, r3
 800a012:	3718      	adds	r7, #24
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	460b      	mov	r3, r1
 800a022:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 800a024:	78fb      	ldrb	r3, [r7, #3]
 800a026:	2b05      	cmp	r3, #5
 800a028:	d826      	bhi.n	800a078 <pb_skip_field+0x60>
 800a02a:	a201      	add	r2, pc, #4	; (adr r2, 800a030 <pb_skip_field+0x18>)
 800a02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a030:	0800a049 	.word	0x0800a049
 800a034:	0800a053 	.word	0x0800a053
 800a038:	0800a061 	.word	0x0800a061
 800a03c:	0800a079 	.word	0x0800a079
 800a040:	0800a079 	.word	0x0800a079
 800a044:	0800a06b 	.word	0x0800a06b
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f7ff ff7d 	bl	8009f48 <pb_skip_varint>
 800a04e:	4603      	mov	r3, r0
 800a050:	e01d      	b.n	800a08e <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 800a052:	2208      	movs	r2, #8
 800a054:	2100      	movs	r1, #0
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f7ff fd86 	bl	8009b68 <pb_read>
 800a05c:	4603      	mov	r3, r0
 800a05e:	e016      	b.n	800a08e <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f7ff ff8d 	bl	8009f80 <pb_skip_string>
 800a066:	4603      	mov	r3, r0
 800a068:	e011      	b.n	800a08e <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 800a06a:	2204      	movs	r2, #4
 800a06c:	2100      	movs	r1, #0
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f7ff fd7a 	bl	8009b68 <pb_read>
 800a074:	4603      	mov	r3, r0
 800a076:	e00a      	b.n	800a08e <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d002      	beq.n	800a086 <pb_skip_field+0x6e>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	e000      	b.n	800a088 <pb_skip_field+0x70>
 800a086:	4b04      	ldr	r3, [pc, #16]	; (800a098 <pb_skip_field+0x80>)
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	60d3      	str	r3, [r2, #12]
 800a08c:	2300      	movs	r3, #0
    }
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3708      	adds	r7, #8
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	0800cb54 	.word	0x0800cb54

0800a09c <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b086      	sub	sp, #24
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	607a      	str	r2, [r7, #4]
 800a0a6:	603b      	str	r3, [r7, #0]
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 800a0b2:	7afb      	ldrb	r3, [r7, #11]
 800a0b4:	2b05      	cmp	r3, #5
 800a0b6:	d03f      	beq.n	800a138 <read_raw_value+0x9c>
 800a0b8:	2b05      	cmp	r3, #5
 800a0ba:	dc47      	bgt.n	800a14c <read_raw_value+0xb0>
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d002      	beq.n	800a0c6 <read_raw_value+0x2a>
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d02f      	beq.n	800a124 <read_raw_value+0x88>
 800a0c4:	e042      	b.n	800a14c <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	1c5a      	adds	r2, r3, #1
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	697a      	ldr	r2, [r7, #20]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d20b      	bcs.n	800a0f8 <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d002      	beq.n	800a0ee <read_raw_value+0x52>
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	e000      	b.n	800a0f0 <read_raw_value+0x54>
 800a0ee:	4b1f      	ldr	r3, [pc, #124]	; (800a16c <read_raw_value+0xd0>)
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	60d3      	str	r3, [r2, #12]
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	e034      	b.n	800a162 <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	6879      	ldr	r1, [r7, #4]
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f7ff fd33 	bl	8009b68 <pb_read>
 800a102:	4603      	mov	r3, r0
 800a104:	f083 0301 	eor.w	r3, r3, #1
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d001      	beq.n	800a112 <read_raw_value+0x76>
                    return false;
 800a10e:	2300      	movs	r3, #0
 800a110:	e027      	b.n	800a162 <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	1c5a      	adds	r2, r3, #1
 800a116:	607a      	str	r2, [r7, #4]
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	b25b      	sxtb	r3, r3
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	dbd5      	blt.n	800a0cc <read_raw_value+0x30>
            return true;
 800a120:	2301      	movs	r3, #1
 800a122:	e01e      	b.n	800a162 <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	2208      	movs	r2, #8
 800a128:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 800a12a:	2208      	movs	r2, #8
 800a12c:	6879      	ldr	r1, [r7, #4]
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f7ff fd1a 	bl	8009b68 <pb_read>
 800a134:	4603      	mov	r3, r0
 800a136:	e014      	b.n	800a162 <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	2204      	movs	r2, #4
 800a13c:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 800a13e:	2204      	movs	r2, #4
 800a140:	6879      	ldr	r1, [r7, #4]
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	f7ff fd10 	bl	8009b68 <pb_read>
 800a148:	4603      	mov	r3, r0
 800a14a:	e00a      	b.n	800a162 <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d002      	beq.n	800a15a <read_raw_value+0xbe>
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	e000      	b.n	800a15c <read_raw_value+0xc0>
 800a15a:	4b05      	ldr	r3, [pc, #20]	; (800a170 <read_raw_value+0xd4>)
 800a15c:	68fa      	ldr	r2, [r7, #12]
 800a15e:	60d3      	str	r3, [r2, #12]
 800a160:	2300      	movs	r3, #0
    }
}
 800a162:	4618      	mov	r0, r3
 800a164:	3718      	adds	r7, #24
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	0800cb44 	.word	0x0800cb44
 800a170:	0800cb54 	.word	0x0800cb54

0800a174 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 800a174:	b590      	push	{r4, r7, lr}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 800a17e:	f107 030c 	add.w	r3, r7, #12
 800a182:	4619      	mov	r1, r3
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f7ff fe69 	bl	8009e5c <pb_decode_varint32>
 800a18a:	4603      	mov	r3, r0
 800a18c:	f083 0301 	eor.w	r3, r3, #1
 800a190:	b2db      	uxtb	r3, r3
 800a192:	2b00      	cmp	r3, #0
 800a194:	d001      	beq.n	800a19a <pb_make_string_substream+0x26>
        return false;
 800a196:	2300      	movs	r3, #0
 800a198:	e020      	b.n	800a1dc <pb_make_string_substream+0x68>
    
    *substream = *stream;
 800a19a:	683a      	ldr	r2, [r7, #0]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4614      	mov	r4, r2
 800a1a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a1a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	689a      	ldr	r2, [r3, #8]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d20b      	bcs.n	800a1c8 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d002      	beq.n	800a1be <pb_make_string_substream+0x4a>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	e000      	b.n	800a1c0 <pb_make_string_substream+0x4c>
 800a1be:	4b09      	ldr	r3, [pc, #36]	; (800a1e4 <pb_make_string_substream+0x70>)
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	60d3      	str	r3, [r2, #12]
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	e009      	b.n	800a1dc <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	689a      	ldr	r2, [r3, #8]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	1ad2      	subs	r2, r2, r3
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	609a      	str	r2, [r3, #8]
    return true;
 800a1da:	2301      	movs	r3, #1
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3714      	adds	r7, #20
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd90      	pop	{r4, r7, pc}
 800a1e4:	0800cb68 	.word	0x0800cb68

0800a1e8 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00e      	beq.n	800a218 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	461a      	mov	r2, r3
 800a200:	2100      	movs	r1, #0
 800a202:	6838      	ldr	r0, [r7, #0]
 800a204:	f7ff fcb0 	bl	8009b68 <pb_read>
 800a208:	4603      	mov	r3, r0
 800a20a:	f083 0301 	eor.w	r3, r3, #1
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	2b00      	cmp	r3, #0
 800a212:	d001      	beq.n	800a218 <pb_close_string_substream+0x30>
            return false;
 800a214:	2300      	movs	r3, #0
 800a216:	e008      	b.n	800a22a <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	685a      	ldr	r2, [r3, #4]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	68da      	ldr	r2, [r3, #12]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	60da      	str	r2, [r3, #12]
#endif
    return true;
 800a228:	2301      	movs	r3, #1
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3708      	adds	r7, #8
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
	...

0800a234 <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	460b      	mov	r3, r1
 800a23e:	607a      	str	r2, [r7, #4]
 800a240:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	7d9b      	ldrb	r3, [r3, #22]
 800a246:	f003 030f 	and.w	r3, r3, #15
 800a24a:	2b0b      	cmp	r3, #11
 800a24c:	f200 80d4 	bhi.w	800a3f8 <decode_basic_field+0x1c4>
 800a250:	a201      	add	r2, pc, #4	; (adr r2, 800a258 <decode_basic_field+0x24>)
 800a252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a256:	bf00      	nop
 800a258:	0800a289 	.word	0x0800a289
 800a25c:	0800a2b9 	.word	0x0800a2b9
 800a260:	0800a2b9 	.word	0x0800a2b9
 800a264:	0800a2b9 	.word	0x0800a2b9
 800a268:	0800a2e9 	.word	0x0800a2e9
 800a26c:	0800a31d 	.word	0x0800a31d
 800a270:	0800a351 	.word	0x0800a351
 800a274:	0800a37b 	.word	0x0800a37b
 800a278:	0800a3a5 	.word	0x0800a3a5
 800a27c:	0800a3a5 	.word	0x0800a3a5
 800a280:	0800a3f9 	.word	0x0800a3f9
 800a284:	0800a3cf 	.word	0x0800a3cf
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 800a288:	7afb      	ldrb	r3, [r7, #11]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00e      	beq.n	800a2ac <decode_basic_field+0x78>
 800a28e:	7afb      	ldrb	r3, [r7, #11]
 800a290:	2bff      	cmp	r3, #255	; 0xff
 800a292:	d00b      	beq.n	800a2ac <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d002      	beq.n	800a2a2 <decode_basic_field+0x6e>
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	e000      	b.n	800a2a4 <decode_basic_field+0x70>
 800a2a2:	4b5d      	ldr	r3, [pc, #372]	; (800a418 <decode_basic_field+0x1e4>)
 800a2a4:	68fa      	ldr	r2, [r7, #12]
 800a2a6:	60d3      	str	r3, [r2, #12]
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	e0b0      	b.n	800a40e <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 800a2ac:	6879      	ldr	r1, [r7, #4]
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f000 fef6 	bl	800b0a0 <pb_dec_bool>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	e0aa      	b.n	800a40e <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 800a2b8:	7afb      	ldrb	r3, [r7, #11]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00e      	beq.n	800a2dc <decode_basic_field+0xa8>
 800a2be:	7afb      	ldrb	r3, [r7, #11]
 800a2c0:	2bff      	cmp	r3, #255	; 0xff
 800a2c2:	d00b      	beq.n	800a2dc <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d002      	beq.n	800a2d2 <decode_basic_field+0x9e>
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	e000      	b.n	800a2d4 <decode_basic_field+0xa0>
 800a2d2:	4b51      	ldr	r3, [pc, #324]	; (800a418 <decode_basic_field+0x1e4>)
 800a2d4:	68fa      	ldr	r2, [r7, #12]
 800a2d6:	60d3      	str	r3, [r2, #12]
 800a2d8:	2300      	movs	r3, #0
 800a2da:	e098      	b.n	800a40e <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 800a2dc:	6879      	ldr	r1, [r7, #4]
 800a2de:	68f8      	ldr	r0, [r7, #12]
 800a2e0:	f000 feee 	bl	800b0c0 <pb_dec_varint>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	e092      	b.n	800a40e <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 800a2e8:	7afb      	ldrb	r3, [r7, #11]
 800a2ea:	2b05      	cmp	r3, #5
 800a2ec:	d00e      	beq.n	800a30c <decode_basic_field+0xd8>
 800a2ee:	7afb      	ldrb	r3, [r7, #11]
 800a2f0:	2bff      	cmp	r3, #255	; 0xff
 800a2f2:	d00b      	beq.n	800a30c <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d002      	beq.n	800a302 <decode_basic_field+0xce>
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	e000      	b.n	800a304 <decode_basic_field+0xd0>
 800a302:	4b45      	ldr	r3, [pc, #276]	; (800a418 <decode_basic_field+0x1e4>)
 800a304:	68fa      	ldr	r2, [r7, #12]
 800a306:	60d3      	str	r3, [r2, #12]
 800a308:	2300      	movs	r3, #0
 800a30a:	e080      	b.n	800a40e <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	69db      	ldr	r3, [r3, #28]
 800a310:	4619      	mov	r1, r3
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f000 fe8a 	bl	800b02c <pb_decode_fixed32>
 800a318:	4603      	mov	r3, r0
 800a31a:	e078      	b.n	800a40e <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 800a31c:	7afb      	ldrb	r3, [r7, #11]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d00e      	beq.n	800a340 <decode_basic_field+0x10c>
 800a322:	7afb      	ldrb	r3, [r7, #11]
 800a324:	2bff      	cmp	r3, #255	; 0xff
 800a326:	d00b      	beq.n	800a340 <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d002      	beq.n	800a336 <decode_basic_field+0x102>
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	e000      	b.n	800a338 <decode_basic_field+0x104>
 800a336:	4b38      	ldr	r3, [pc, #224]	; (800a418 <decode_basic_field+0x1e4>)
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	60d3      	str	r3, [r2, #12]
 800a33c:	2300      	movs	r3, #0
 800a33e:	e066      	b.n	800a40e <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	69db      	ldr	r3, [r3, #28]
 800a344:	4619      	mov	r1, r3
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	f000 fe8c 	bl	800b064 <pb_decode_fixed64>
 800a34c:	4603      	mov	r3, r0
 800a34e:	e05e      	b.n	800a40e <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 800a350:	7afb      	ldrb	r3, [r7, #11]
 800a352:	2b02      	cmp	r3, #2
 800a354:	d00b      	beq.n	800a36e <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d002      	beq.n	800a364 <decode_basic_field+0x130>
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	e000      	b.n	800a366 <decode_basic_field+0x132>
 800a364:	4b2c      	ldr	r3, [pc, #176]	; (800a418 <decode_basic_field+0x1e4>)
 800a366:	68fa      	ldr	r2, [r7, #12]
 800a368:	60d3      	str	r3, [r2, #12]
 800a36a:	2300      	movs	r3, #0
 800a36c:	e04f      	b.n	800a40e <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 800a36e:	6879      	ldr	r1, [r7, #4]
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f000 ffd1 	bl	800b318 <pb_dec_bytes>
 800a376:	4603      	mov	r3, r0
 800a378:	e049      	b.n	800a40e <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 800a37a:	7afb      	ldrb	r3, [r7, #11]
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	d00b      	beq.n	800a398 <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d002      	beq.n	800a38e <decode_basic_field+0x15a>
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	e000      	b.n	800a390 <decode_basic_field+0x15c>
 800a38e:	4b22      	ldr	r3, [pc, #136]	; (800a418 <decode_basic_field+0x1e4>)
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	60d3      	str	r3, [r2, #12]
 800a394:	2300      	movs	r3, #0
 800a396:	e03a      	b.n	800a40e <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 800a398:	6879      	ldr	r1, [r7, #4]
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f001 f830 	bl	800b400 <pb_dec_string>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	e034      	b.n	800a40e <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 800a3a4:	7afb      	ldrb	r3, [r7, #11]
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d00b      	beq.n	800a3c2 <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d002      	beq.n	800a3b8 <decode_basic_field+0x184>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	68db      	ldr	r3, [r3, #12]
 800a3b6:	e000      	b.n	800a3ba <decode_basic_field+0x186>
 800a3b8:	4b17      	ldr	r3, [pc, #92]	; (800a418 <decode_basic_field+0x1e4>)
 800a3ba:	68fa      	ldr	r2, [r7, #12]
 800a3bc:	60d3      	str	r3, [r2, #12]
 800a3be:	2300      	movs	r3, #0
 800a3c0:	e025      	b.n	800a40e <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 800a3c2:	6879      	ldr	r1, [r7, #4]
 800a3c4:	68f8      	ldr	r0, [r7, #12]
 800a3c6:	f001 f897 	bl	800b4f8 <pb_dec_submessage>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	e01f      	b.n	800a40e <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 800a3ce:	7afb      	ldrb	r3, [r7, #11]
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	d00b      	beq.n	800a3ec <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d002      	beq.n	800a3e2 <decode_basic_field+0x1ae>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	e000      	b.n	800a3e4 <decode_basic_field+0x1b0>
 800a3e2:	4b0d      	ldr	r3, [pc, #52]	; (800a418 <decode_basic_field+0x1e4>)
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	60d3      	str	r3, [r2, #12]
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	e010      	b.n	800a40e <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 800a3ec:	6879      	ldr	r1, [r7, #4]
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f001 f90c 	bl	800b60c <pb_dec_fixed_length_bytes>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	e00a      	b.n	800a40e <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d002      	beq.n	800a406 <decode_basic_field+0x1d2>
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	68db      	ldr	r3, [r3, #12]
 800a404:	e000      	b.n	800a408 <decode_basic_field+0x1d4>
 800a406:	4b05      	ldr	r3, [pc, #20]	; (800a41c <decode_basic_field+0x1e8>)
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	60d3      	str	r3, [r2, #12]
 800a40c:	2300      	movs	r3, #0
    }
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	0800cb80 	.word	0x0800cb80
 800a41c:	0800cb90 	.word	0x0800cb90

0800a420 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b096      	sub	sp, #88	; 0x58
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	460b      	mov	r3, r1
 800a42a:	607a      	str	r2, [r7, #4]
 800a42c:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	7d9b      	ldrb	r3, [r3, #22]
 800a432:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a436:	2b30      	cmp	r3, #48	; 0x30
 800a438:	f000 80c2 	beq.w	800a5c0 <decode_static_field+0x1a0>
 800a43c:	2b30      	cmp	r3, #48	; 0x30
 800a43e:	f200 811a 	bhi.w	800a676 <decode_static_field+0x256>
 800a442:	2b20      	cmp	r3, #32
 800a444:	d01f      	beq.n	800a486 <decode_static_field+0x66>
 800a446:	2b20      	cmp	r3, #32
 800a448:	f200 8115 	bhi.w	800a676 <decode_static_field+0x256>
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d002      	beq.n	800a456 <decode_static_field+0x36>
 800a450:	2b10      	cmp	r3, #16
 800a452:	d008      	beq.n	800a466 <decode_static_field+0x46>
 800a454:	e10f      	b.n	800a676 <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 800a456:	7afb      	ldrb	r3, [r7, #11]
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	4619      	mov	r1, r3
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f7ff fee9 	bl	800a234 <decode_basic_field>
 800a462:	4603      	mov	r3, r0
 800a464:	e112      	b.n	800a68c <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6a1b      	ldr	r3, [r3, #32]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d003      	beq.n	800a476 <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a1b      	ldr	r3, [r3, #32]
 800a472:	2201      	movs	r2, #1
 800a474:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 800a476:	7afb      	ldrb	r3, [r7, #11]
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	4619      	mov	r1, r3
 800a47c:	68f8      	ldr	r0, [r7, #12]
 800a47e:	f7ff fed9 	bl	800a234 <decode_basic_field>
 800a482:	4603      	mov	r3, r0
 800a484:	e102      	b.n	800a68c <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 800a486:	7afb      	ldrb	r3, [r7, #11]
 800a488:	2b02      	cmp	r3, #2
 800a48a:	d16c      	bne.n	800a566 <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	7d9b      	ldrb	r3, [r3, #22]
 800a490:	f003 030f 	and.w	r3, r3, #15
 800a494:	2b05      	cmp	r3, #5
 800a496:	d866      	bhi.n	800a566 <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 800a498:	2301      	movs	r3, #1
 800a49a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6a1b      	ldr	r3, [r3, #32]
 800a4a2:	653b      	str	r3, [r7, #80]	; 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	699b      	ldr	r3, [r3, #24]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	8a52      	ldrh	r2, [r2, #18]
 800a4ac:	4611      	mov	r1, r2
 800a4ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a4b0:	8812      	ldrh	r2, [r2, #0]
 800a4b2:	fb01 f202 	mul.w	r2, r1, r2
 800a4b6:	441a      	add	r2, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 800a4bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	68f8      	ldr	r0, [r7, #12]
 800a4c4:	f7ff fe56 	bl	800a174 <pb_make_string_substream>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	f083 0301 	eor.w	r3, r3, #1
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d01f      	beq.n	800a514 <decode_static_field+0xf4>
                    return false;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	e0d9      	b.n	800a68c <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 800a4d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	21ff      	movs	r1, #255	; 0xff
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7ff fea7 	bl	800a234 <decode_basic_field>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	f083 0301 	eor.w	r3, r3, #1
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d003      	beq.n	800a4fa <decode_static_field+0xda>
                    {
                        status = false;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 800a4f8:	e015      	b.n	800a526 <decode_static_field+0x106>
                    }
                    (*size)++;
 800a4fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4fc:	881b      	ldrh	r3, [r3, #0]
 800a4fe:	3301      	adds	r3, #1
 800a500:	b29a      	uxth	r2, r3
 800a502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a504:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	69db      	ldr	r3, [r3, #28]
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	8a52      	ldrh	r2, [r2, #18]
 800a50e:	441a      	add	r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 800a514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a516:	2b00      	cmp	r3, #0
 800a518:	d005      	beq.n	800a526 <decode_static_field+0x106>
 800a51a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a51c:	881a      	ldrh	r2, [r3, #0]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	8a9b      	ldrh	r3, [r3, #20]
 800a522:	429a      	cmp	r2, r3
 800a524:	d3d8      	bcc.n	800a4d8 <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 800a526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d00b      	beq.n	800a544 <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d002      	beq.n	800a53a <decode_static_field+0x11a>
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	e000      	b.n	800a53c <decode_static_field+0x11c>
 800a53a:	4b56      	ldr	r3, [pc, #344]	; (800a694 <decode_static_field+0x274>)
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	60d3      	str	r3, [r2, #12]
 800a540:	2300      	movs	r3, #0
 800a542:	e0a3      	b.n	800a68c <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 800a544:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a548:	4619      	mov	r1, r3
 800a54a:	68f8      	ldr	r0, [r7, #12]
 800a54c:	f7ff fe4c 	bl	800a1e8 <pb_close_string_substream>
 800a550:	4603      	mov	r3, r0
 800a552:	f083 0301 	eor.w	r3, r3, #1
 800a556:	b2db      	uxtb	r3, r3
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d001      	beq.n	800a560 <decode_static_field+0x140>
                    return false;
 800a55c:	2300      	movs	r3, #0
 800a55e:	e095      	b.n	800a68c <decode_static_field+0x26c>

                return status;
 800a560:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a564:	e092      	b.n	800a68c <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a1b      	ldr	r3, [r3, #32]
 800a56a:	64fb      	str	r3, [r7, #76]	; 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	699b      	ldr	r3, [r3, #24]
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	8a52      	ldrh	r2, [r2, #18]
 800a574:	4611      	mov	r1, r2
 800a576:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a578:	8812      	ldrh	r2, [r2, #0]
 800a57a:	fb01 f202 	mul.w	r2, r1, r2
 800a57e:	441a      	add	r2, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 800a584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a586:	881b      	ldrh	r3, [r3, #0]
 800a588:	1c5a      	adds	r2, r3, #1
 800a58a:	b291      	uxth	r1, r2
 800a58c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a58e:	8011      	strh	r1, [r2, #0]
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	8a92      	ldrh	r2, [r2, #20]
 800a594:	4293      	cmp	r3, r2
 800a596:	d30b      	bcc.n	800a5b0 <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d002      	beq.n	800a5a6 <decode_static_field+0x186>
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	e000      	b.n	800a5a8 <decode_static_field+0x188>
 800a5a6:	4b3b      	ldr	r3, [pc, #236]	; (800a694 <decode_static_field+0x274>)
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	60d3      	str	r3, [r2, #12]
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	e06d      	b.n	800a68c <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 800a5b0:	7afb      	ldrb	r3, [r7, #11]
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f7ff fe3c 	bl	800a234 <decode_basic_field>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	e065      	b.n	800a68c <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	7d9b      	ldrb	r3, [r3, #22]
 800a5c4:	f003 030f 	and.w	r3, r3, #15
 800a5c8:	2b08      	cmp	r3, #8
 800a5ca:	d005      	beq.n	800a5d8 <decode_static_field+0x1b8>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	7d9b      	ldrb	r3, [r3, #22]
 800a5d0:	f003 030f 	and.w	r3, r3, #15
 800a5d4:	2b09      	cmp	r3, #9
 800a5d6:	d141      	bne.n	800a65c <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6a1b      	ldr	r3, [r3, #32]
 800a5dc:	881a      	ldrh	r2, [r3, #0]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d03a      	beq.n	800a65c <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	69d8      	ldr	r0, [r3, #28]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	8a5b      	ldrh	r3, [r3, #18]
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	f002 f96f 	bl	800c8d4 <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d10a      	bne.n	800a616 <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a604:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 800a606:	2b00      	cmp	r3, #0
 800a608:	d105      	bne.n	800a616 <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 800a612:	2b00      	cmp	r3, #0
 800a614:	d022      	beq.n	800a65c <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	69da      	ldr	r2, [r3, #28]
 800a61e:	f107 0314 	add.w	r3, r7, #20
 800a622:	4618      	mov	r0, r3
 800a624:	f7ff f935 	bl	8009892 <pb_field_iter_begin>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d016      	beq.n	800a65c <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 800a62e:	f107 0314 	add.w	r3, r7, #20
 800a632:	4618      	mov	r0, r3
 800a634:	f000 fa4d 	bl	800aad2 <pb_message_set_to_defaults>
 800a638:	4603      	mov	r3, r0
 800a63a:	f083 0301 	eor.w	r3, r3, #1
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	2b00      	cmp	r3, #0
 800a642:	d00b      	beq.n	800a65c <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d002      	beq.n	800a652 <decode_static_field+0x232>
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	e000      	b.n	800a654 <decode_static_field+0x234>
 800a652:	4b11      	ldr	r3, [pc, #68]	; (800a698 <decode_static_field+0x278>)
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	60d3      	str	r3, [r2, #12]
 800a658:	2300      	movs	r3, #0
 800a65a:	e017      	b.n	800a68c <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a1b      	ldr	r3, [r3, #32]
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	8a12      	ldrh	r2, [r2, #16]
 800a664:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 800a666:	7afb      	ldrb	r3, [r7, #11]
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	4619      	mov	r1, r3
 800a66c:	68f8      	ldr	r0, [r7, #12]
 800a66e:	f7ff fde1 	bl	800a234 <decode_basic_field>
 800a672:	4603      	mov	r3, r0
 800a674:	e00a      	b.n	800a68c <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d002      	beq.n	800a684 <decode_static_field+0x264>
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	e000      	b.n	800a686 <decode_static_field+0x266>
 800a684:	4b05      	ldr	r3, [pc, #20]	; (800a69c <decode_static_field+0x27c>)
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	60d3      	str	r3, [r2, #12]
 800a68a:	2300      	movs	r3, #0
    }
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3758      	adds	r7, #88	; 0x58
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	0800cba4 	.word	0x0800cba4
 800a698:	0800cbb4 	.word	0x0800cbb4
 800a69c:	0800cb90 	.word	0x0800cb90

0800a6a0 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	607a      	str	r2, [r7, #4]
 800a6ac:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	68db      	ldr	r3, [r3, #12]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d002      	beq.n	800a6bc <decode_pointer_field+0x1c>
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	e000      	b.n	800a6be <decode_pointer_field+0x1e>
 800a6bc:	4b04      	ldr	r3, [pc, #16]	; (800a6d0 <decode_pointer_field+0x30>)
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	60d3      	str	r3, [r2, #12]
 800a6c2:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3714      	adds	r7, #20
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr
 800a6d0:	0800cbcc 	.word	0x0800cbcc

0800a6d4 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 800a6d4:	b590      	push	{r4, r7, lr}
 800a6d6:	b097      	sub	sp, #92	; 0x5c
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	61f8      	str	r0, [r7, #28]
 800a6dc:	460b      	mov	r3, r1
 800a6de:	617a      	str	r2, [r7, #20]
 800a6e0:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d106      	bne.n	800a6fa <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 800a6ec:	7efb      	ldrb	r3, [r7, #27]
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	69f8      	ldr	r0, [r7, #28]
 800a6f2:	f7ff fc91 	bl	800a018 <pb_skip_field>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	e070      	b.n	800a7dc <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 800a6fa:	7efb      	ldrb	r3, [r7, #27]
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	d145      	bne.n	800a78c <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 800a700:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a704:	4619      	mov	r1, r3
 800a706:	69f8      	ldr	r0, [r7, #28]
 800a708:	f7ff fd34 	bl	800a174 <pb_make_string_substream>
 800a70c:	4603      	mov	r3, r0
 800a70e:	f083 0301 	eor.w	r3, r3, #1
 800a712:	b2db      	uxtb	r3, r3
 800a714:	2b00      	cmp	r3, #0
 800a716:	d001      	beq.n	800a71c <decode_callback_field+0x48>
            return false;
 800a718:	2300      	movs	r3, #0
 800a71a:	e05f      	b.n	800a7dc <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 800a71c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a71e:	657b      	str	r3, [r7, #84]	; 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800a72a:	697a      	ldr	r2, [r7, #20]
 800a72c:	2100      	movs	r1, #0
 800a72e:	4798      	blx	r3
 800a730:	4603      	mov	r3, r0
 800a732:	f083 0301 	eor.w	r3, r3, #1
 800a736:	b2db      	uxtb	r3, r3
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d010      	beq.n	800a75e <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d002      	beq.n	800a74a <decode_callback_field+0x76>
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	e005      	b.n	800a756 <decode_callback_field+0x82>
 800a74a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d001      	beq.n	800a754 <decode_callback_field+0x80>
 800a750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a752:	e000      	b.n	800a756 <decode_callback_field+0x82>
 800a754:	4b23      	ldr	r3, [pc, #140]	; (800a7e4 <decode_callback_field+0x110>)
 800a756:	69fa      	ldr	r2, [r7, #28]
 800a758:	60d3      	str	r3, [r2, #12]
                return false;
 800a75a:	2300      	movs	r3, #0
 800a75c:	e03e      	b.n	800a7dc <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 800a75e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a760:	2b00      	cmp	r3, #0
 800a762:	d003      	beq.n	800a76c <decode_callback_field+0x98>
 800a764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a766:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a768:	429a      	cmp	r2, r3
 800a76a:	d8d7      	bhi.n	800a71c <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 800a76c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a770:	4619      	mov	r1, r3
 800a772:	69f8      	ldr	r0, [r7, #28]
 800a774:	f7ff fd38 	bl	800a1e8 <pb_close_string_substream>
 800a778:	4603      	mov	r3, r0
 800a77a:	f083 0301 	eor.w	r3, r3, #1
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	2b00      	cmp	r3, #0
 800a782:	d001      	beq.n	800a788 <decode_callback_field+0xb4>
            return false;
 800a784:	2300      	movs	r3, #0
 800a786:	e029      	b.n	800a7dc <decode_callback_field+0x108>

        return true;
 800a788:	2301      	movs	r3, #1
 800a78a:	e027      	b.n	800a7dc <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 800a78c:	230a      	movs	r3, #10
 800a78e:	627b      	str	r3, [r7, #36]	; 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 800a790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a794:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a798:	7ef9      	ldrb	r1, [r7, #27]
 800a79a:	69f8      	ldr	r0, [r7, #28]
 800a79c:	f7ff fc7e 	bl	800a09c <read_raw_value>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	f083 0301 	eor.w	r3, r3, #1
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d001      	beq.n	800a7b0 <decode_callback_field+0xdc>
            return false;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	e015      	b.n	800a7dc <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 800a7b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7b2:	463b      	mov	r3, r7
 800a7b4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7ff fa87 	bl	8009ccc <pb_istream_from_buffer>
 800a7be:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800a7c2:	463b      	mov	r3, r7
 800a7c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a7c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800a7d4:	697a      	ldr	r2, [r7, #20]
 800a7d6:	2100      	movs	r1, #0
 800a7d8:	4798      	blx	r3
 800a7da:	4603      	mov	r3, r0
    }
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	375c      	adds	r7, #92	; 0x5c
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd90      	pop	{r4, r7, pc}
 800a7e4:	0800cbe0 	.word	0x0800cbe0

0800a7e8 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	607a      	str	r2, [r7, #4]
 800a7f4:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	7d9b      	ldrb	r3, [r3, #22]
 800a7fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a7fe:	2b80      	cmp	r3, #128	; 0x80
 800a800:	d00e      	beq.n	800a820 <decode_field+0x38>
 800a802:	2b80      	cmp	r3, #128	; 0x80
 800a804:	d81c      	bhi.n	800a840 <decode_field+0x58>
 800a806:	2b00      	cmp	r3, #0
 800a808:	d002      	beq.n	800a810 <decode_field+0x28>
 800a80a:	2b40      	cmp	r3, #64	; 0x40
 800a80c:	d010      	beq.n	800a830 <decode_field+0x48>
 800a80e:	e017      	b.n	800a840 <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 800a810:	7afb      	ldrb	r3, [r7, #11]
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	4619      	mov	r1, r3
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	f7ff fe02 	bl	800a420 <decode_static_field>
 800a81c:	4603      	mov	r3, r0
 800a81e:	e01a      	b.n	800a856 <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 800a820:	7afb      	ldrb	r3, [r7, #11]
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	4619      	mov	r1, r3
 800a826:	68f8      	ldr	r0, [r7, #12]
 800a828:	f7ff ff3a 	bl	800a6a0 <decode_pointer_field>
 800a82c:	4603      	mov	r3, r0
 800a82e:	e012      	b.n	800a856 <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 800a830:	7afb      	ldrb	r3, [r7, #11]
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	4619      	mov	r1, r3
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	f7ff ff4c 	bl	800a6d4 <decode_callback_field>
 800a83c:	4603      	mov	r3, r0
 800a83e:	e00a      	b.n	800a856 <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d002      	beq.n	800a84e <decode_field+0x66>
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	e000      	b.n	800a850 <decode_field+0x68>
 800a84e:	4b04      	ldr	r3, [pc, #16]	; (800a860 <decode_field+0x78>)
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	60d3      	str	r3, [r2, #12]
 800a854:	2300      	movs	r3, #0
    }
}
 800a856:	4618      	mov	r0, r3
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	0800cb90 	.word	0x0800cb90

0800a864 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b08e      	sub	sp, #56	; 0x38
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	60b9      	str	r1, [r7, #8]
 800a86e:	607a      	str	r2, [r7, #4]
 800a870:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 800a872:	f107 0310 	add.w	r3, r7, #16
 800a876:	68b9      	ldr	r1, [r7, #8]
 800a878:	4618      	mov	r0, r3
 800a87a:	f7ff f823 	bl	80098c4 <pb_field_iter_begin_extension>
 800a87e:	4603      	mov	r3, r0
 800a880:	f083 0301 	eor.w	r3, r3, #1
 800a884:	b2db      	uxtb	r3, r3
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00b      	beq.n	800a8a2 <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d002      	beq.n	800a898 <default_extension_decoder+0x34>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	e000      	b.n	800a89a <default_extension_decoder+0x36>
 800a898:	4b0e      	ldr	r3, [pc, #56]	; (800a8d4 <default_extension_decoder+0x70>)
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	60d3      	str	r3, [r2, #12]
 800a89e:	2300      	movs	r3, #0
 800a8a0:	e014      	b.n	800a8cc <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 800a8a2:	8c3b      	ldrh	r3, [r7, #32]
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d102      	bne.n	800a8b2 <default_extension_decoder+0x4e>
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d101      	bne.n	800a8b6 <default_extension_decoder+0x52>
        return true;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e00a      	b.n	800a8cc <default_extension_decoder+0x68>

    extension->found = true;
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 800a8bc:	f107 0210 	add.w	r2, r7, #16
 800a8c0:	78fb      	ldrb	r3, [r7, #3]
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f7ff ff8f 	bl	800a7e8 <decode_field>
 800a8ca:	4603      	mov	r3, r0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3738      	adds	r7, #56	; 0x38
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	0800cbf0 	.word	0x0800cbf0

0800a8d8 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 800a8d8:	b590      	push	{r4, r7, lr}
 800a8da:	b087      	sub	sp, #28
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	60b9      	str	r1, [r7, #8]
 800a8e2:	603b      	str	r3, [r7, #0]
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 800a8ee:	e022      	b.n	800a936 <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00a      	beq.n	800a910 <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681c      	ldr	r4, [r3, #0]
 800a900:	79fb      	ldrb	r3, [r7, #7]
 800a902:	68ba      	ldr	r2, [r7, #8]
 800a904:	6839      	ldr	r1, [r7, #0]
 800a906:	68f8      	ldr	r0, [r7, #12]
 800a908:	47a0      	blx	r4
 800a90a:	4603      	mov	r3, r0
 800a90c:	75fb      	strb	r3, [r7, #23]
 800a90e:	e007      	b.n	800a920 <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 800a910:	79fb      	ldrb	r3, [r7, #7]
 800a912:	68ba      	ldr	r2, [r7, #8]
 800a914:	6839      	ldr	r1, [r7, #0]
 800a916:	68f8      	ldr	r0, [r7, #12]
 800a918:	f7ff ffa4 	bl	800a864 <default_extension_decoder>
 800a91c:	4603      	mov	r3, r0
 800a91e:	75fb      	strb	r3, [r7, #23]

        if (!status)
 800a920:	7dfb      	ldrb	r3, [r7, #23]
 800a922:	f083 0301 	eor.w	r3, r3, #1
 800a926:	b2db      	uxtb	r3, r3
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d001      	beq.n	800a930 <decode_extension+0x58>
            return false;
 800a92c:	2300      	movs	r3, #0
 800a92e:	e00b      	b.n	800a948 <decode_extension+0x70>
        
        extension = extension->next;
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d004      	beq.n	800a946 <decode_extension+0x6e>
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	693a      	ldr	r2, [r7, #16]
 800a942:	429a      	cmp	r2, r3
 800a944:	d0d4      	beq.n	800a8f0 <decode_extension+0x18>
    }
    
    return true;
 800a946:	2301      	movs	r3, #1
}
 800a948:	4618      	mov	r0, r3
 800a94a:	371c      	adds	r7, #28
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd90      	pop	{r4, r7, pc}

0800a950 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b08e      	sub	sp, #56	; 0x38
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	7d9b      	ldrb	r3, [r3, #22]
 800a95c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 800a960:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a964:	f003 030f 	and.w	r3, r3, #15
 800a968:	2b0a      	cmp	r3, #10
 800a96a:	d124      	bne.n	800a9b6 <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	69db      	ldr	r3, [r3, #28]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 800a974:	e01b      	b.n	800a9ae <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 800a976:	f107 0308 	add.w	r3, r7, #8
 800a97a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7fe ffa1 	bl	80098c4 <pb_field_iter_begin_extension>
 800a982:	4603      	mov	r3, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00f      	beq.n	800a9a8 <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 800a988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a98a:	2200      	movs	r2, #0
 800a98c:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 800a98e:	f107 0308 	add.w	r3, r7, #8
 800a992:	4618      	mov	r0, r3
 800a994:	f000 f89d 	bl	800aad2 <pb_message_set_to_defaults>
 800a998:	4603      	mov	r3, r0
 800a99a:	f083 0301 	eor.w	r3, r3, #1
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d001      	beq.n	800a9a8 <pb_field_set_to_default+0x58>
                    return false;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	e090      	b.n	800aaca <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 800a9a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 800a9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d1e0      	bne.n	800a976 <pb_field_set_to_default+0x26>
 800a9b4:	e088      	b.n	800aac8 <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800a9b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a9ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d166      	bne.n	800aa90 <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 800a9c8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a9cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a9d0:	2b10      	cmp	r3, #16
 800a9d2:	d108      	bne.n	800a9e6 <pb_field_set_to_default+0x96>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a1b      	ldr	r3, [r3, #32]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d004      	beq.n	800a9e6 <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6a1b      	ldr	r3, [r3, #32]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	701a      	strb	r2, [r3, #0]
 800a9e4:	e012      	b.n	800aa0c <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800a9e6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a9ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a9ee:	2b20      	cmp	r3, #32
 800a9f0:	d005      	beq.n	800a9fe <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800a9f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a9f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800a9fa:	2b30      	cmp	r3, #48	; 0x30
 800a9fc:	d106      	bne.n	800aa0c <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6a1b      	ldr	r3, [r3, #32]
 800aa02:	2200      	movs	r2, #0
 800aa04:	801a      	strh	r2, [r3, #0]
            init_data = false;
 800aa06:	2300      	movs	r3, #0
 800aa08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        if (init_data)
 800aa0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d059      	beq.n	800aac8 <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	7d9b      	ldrb	r3, [r3, #22]
 800aa18:	f003 030f 	and.w	r3, r3, #15
 800aa1c:	2b08      	cmp	r3, #8
 800aa1e:	d005      	beq.n	800aa2c <pb_field_set_to_default+0xdc>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	7d9b      	ldrb	r3, [r3, #22]
 800aa24:	f003 030f 	and.w	r3, r3, #15
 800aa28:	2b09      	cmp	r3, #9
 800aa2a:	d128      	bne.n	800aa7e <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa30:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d10a      	bne.n	800aa4c <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3a:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d105      	bne.n	800aa4c <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d018      	beq.n	800aa7e <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	69da      	ldr	r2, [r3, #28]
 800aa54:	f107 0308 	add.w	r3, r7, #8
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7fe ff1a 	bl	8009892 <pb_field_iter_begin>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d030      	beq.n	800aac6 <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 800aa64:	f107 0308 	add.w	r3, r7, #8
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f000 f832 	bl	800aad2 <pb_message_set_to_defaults>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	f083 0301 	eor.w	r3, r3, #1
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d025      	beq.n	800aac6 <pb_field_set_to_default+0x176>
                        return false;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	e025      	b.n	800aaca <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	69d8      	ldr	r0, [r3, #28]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	8a5b      	ldrh	r3, [r3, #18]
 800aa86:	461a      	mov	r2, r3
 800aa88:	2100      	movs	r1, #0
 800aa8a:	f001 ff23 	bl	800c8d4 <memset>
 800aa8e:	e01b      	b.n	800aac8 <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 800aa90:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aa94:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aa98:	2b80      	cmp	r3, #128	; 0x80
 800aa9a:	d115      	bne.n	800aac8 <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	699b      	ldr	r3, [r3, #24]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800aaa4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aaa8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800aaac:	2b20      	cmp	r3, #32
 800aaae:	d005      	beq.n	800aabc <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800aab0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aab4:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800aab8:	2b30      	cmp	r3, #48	; 0x30
 800aaba:	d105      	bne.n	800aac8 <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6a1b      	ldr	r3, [r3, #32]
 800aac0:	2200      	movs	r2, #0
 800aac2:	801a      	strh	r2, [r3, #0]
 800aac4:	e000      	b.n	800aac8 <pb_field_set_to_default+0x178>
            {
 800aac6:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 800aac8:	2301      	movs	r3, #1
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3738      	adds	r7, #56	; 0x38
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 800aad2:	b590      	push	{r4, r7, lr}
 800aad4:	b08d      	sub	sp, #52	; 0x34
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 800aada:	f107 0320 	add.w	r3, r7, #32
 800aade:	2200      	movs	r2, #0
 800aae0:	601a      	str	r2, [r3, #0]
 800aae2:	605a      	str	r2, [r3, #4]
 800aae4:	609a      	str	r2, [r3, #8]
 800aae6:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 800aae8:	2300      	movs	r3, #0
 800aaea:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 800aaec:	2300      	movs	r3, #0
 800aaee:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d020      	beq.n	800ab3c <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	6899      	ldr	r1, [r3, #8]
 800ab00:	463b      	mov	r3, r7
 800ab02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7ff f8e0 	bl	8009ccc <pb_istream_from_buffer>
 800ab0c:	f107 0420 	add.w	r4, r7, #32
 800ab10:	463b      	mov	r3, r7
 800ab12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ab14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 800ab18:	f107 031a 	add.w	r3, r7, #26
 800ab1c:	f107 021c 	add.w	r2, r7, #28
 800ab20:	f107 011b 	add.w	r1, r7, #27
 800ab24:	f107 0020 	add.w	r0, r7, #32
 800ab28:	f7ff fa47 	bl	8009fba <pb_decode_tag>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	f083 0301 	eor.w	r3, r3, #1
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d001      	beq.n	800ab3c <pb_message_set_to_defaults+0x6a>
            return false;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	e043      	b.n	800abc4 <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 800ab3c:	6978      	ldr	r0, [r7, #20]
 800ab3e:	f7ff ff07 	bl	800a950 <pb_field_set_to_default>
 800ab42:	4603      	mov	r3, r0
 800ab44:	f083 0301 	eor.w	r3, r3, #1
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d001      	beq.n	800ab52 <pb_message_set_to_defaults+0x80>
            return false;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	e038      	b.n	800abc4 <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d02e      	beq.n	800abb6 <pb_message_set_to_defaults+0xe4>
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	8a1b      	ldrh	r3, [r3, #16]
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d128      	bne.n	800abb6 <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 800ab64:	7ef9      	ldrb	r1, [r7, #27]
 800ab66:	f107 0320 	add.w	r3, r7, #32
 800ab6a:	697a      	ldr	r2, [r7, #20]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7ff fe3b 	bl	800a7e8 <decode_field>
 800ab72:	4603      	mov	r3, r0
 800ab74:	f083 0301 	eor.w	r3, r3, #1
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d001      	beq.n	800ab82 <pb_message_set_to_defaults+0xb0>
                return false;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	e020      	b.n	800abc4 <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 800ab82:	f107 031a 	add.w	r3, r7, #26
 800ab86:	f107 021c 	add.w	r2, r7, #28
 800ab8a:	f107 011b 	add.w	r1, r7, #27
 800ab8e:	f107 0020 	add.w	r0, r7, #32
 800ab92:	f7ff fa12 	bl	8009fba <pb_decode_tag>
 800ab96:	4603      	mov	r3, r0
 800ab98:	f083 0301 	eor.w	r3, r3, #1
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d001      	beq.n	800aba6 <pb_message_set_to_defaults+0xd4>
                return false;
 800aba2:	2300      	movs	r3, #0
 800aba4:	e00e      	b.n	800abc4 <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	6a1b      	ldr	r3, [r3, #32]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d003      	beq.n	800abb6 <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	6a1b      	ldr	r3, [r3, #32]
 800abb2:	2200      	movs	r2, #0
 800abb4:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 800abb6:	6978      	ldr	r0, [r7, #20]
 800abb8:	f7fe feb4 	bl	8009924 <pb_field_iter_next>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d1bc      	bne.n	800ab3c <pb_message_set_to_defaults+0x6a>

    return true;
 800abc2:	2301      	movs	r3, #1
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3734      	adds	r7, #52	; 0x34
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd90      	pop	{r4, r7, pc}

0800abcc <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b09a      	sub	sp, #104	; 0x68
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	607a      	str	r2, [r7, #4]
 800abd8:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 800abda:	2300      	movs	r3, #0
 800abdc:	667b      	str	r3, [r7, #100]	; 0x64
    pb_extension_t *extensions = NULL;
 800abde:	2300      	movs	r3, #0
 800abe0:	663b      	str	r3, [r7, #96]	; 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 800abe2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800abe6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    pb_size_t fixed_count_size = 0;
 800abea:	2300      	movs	r3, #0
 800abec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    pb_size_t fixed_count_total_size = 0;
 800abf0:	2300      	movs	r3, #0
 800abf2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 800abf6:	2300      	movs	r3, #0
 800abf8:	643b      	str	r3, [r7, #64]	; 0x40
 800abfa:	2300      	movs	r3, #0
 800abfc:	647b      	str	r3, [r7, #68]	; 0x44
    const uint32_t allbits = ~(uint32_t)0;
 800abfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac02:	657b      	str	r3, [r7, #84]	; 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 800ac04:	f107 0318 	add.w	r3, r7, #24
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	68b9      	ldr	r1, [r7, #8]
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7fe fe40 	bl	8009892 <pb_field_iter_begin>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	f000 8102 	beq.w	800ae1e <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	f003 0301 	and.w	r3, r3, #1
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f040 80fc 	bne.w	800ae1e <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 800ac26:	f107 0318 	add.w	r3, r7, #24
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7ff ff51 	bl	800aad2 <pb_message_set_to_defaults>
 800ac30:	4603      	mov	r3, r0
 800ac32:	f083 0301 	eor.w	r3, r3, #1
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f000 80f0 	beq.w	800ae1e <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d002      	beq.n	800ac4c <pb_decode_inner+0x80>
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	e000      	b.n	800ac4e <pb_decode_inner+0x82>
 800ac4c:	4b99      	ldr	r3, [pc, #612]	; (800aeb4 <pb_decode_inner+0x2e8>)
 800ac4e:	68fa      	ldr	r2, [r7, #12]
 800ac50:	60d3      	str	r3, [r2, #12]
 800ac52:	2300      	movs	r3, #0
 800ac54:	e16d      	b.n	800af32 <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 800ac56:	f107 0312 	add.w	r3, r7, #18
 800ac5a:	f107 0214 	add.w	r2, r7, #20
 800ac5e:	f107 0113 	add.w	r1, r7, #19
 800ac62:	68f8      	ldr	r0, [r7, #12]
 800ac64:	f7ff f9a9 	bl	8009fba <pb_decode_tag>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	f083 0301 	eor.w	r3, r3, #1
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d005      	beq.n	800ac80 <pb_decode_inner+0xb4>
        {
            if (eof)
 800ac74:	7cbb      	ldrb	r3, [r7, #18]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	f040 80d7 	bne.w	800ae2a <pb_decode_inner+0x25e>
                break;
            else
                return false;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	e158      	b.n	800af32 <pb_decode_inner+0x366>
        }

        if (tag == 0)
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d111      	bne.n	800acaa <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	f003 0304 	and.w	r3, r3, #4
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	f040 80ce 	bne.w	800ae2e <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d002      	beq.n	800aca0 <pb_decode_inner+0xd4>
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	68db      	ldr	r3, [r3, #12]
 800ac9e:	e000      	b.n	800aca2 <pb_decode_inner+0xd6>
 800aca0:	4b85      	ldr	r3, [pc, #532]	; (800aeb8 <pb_decode_inner+0x2ec>)
 800aca2:	68fa      	ldr	r2, [r7, #12]
 800aca4:	60d3      	str	r3, [r2, #12]
 800aca6:	2300      	movs	r3, #0
 800aca8:	e143      	b.n	800af32 <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 800acaa:	697a      	ldr	r2, [r7, #20]
 800acac:	f107 0318 	add.w	r3, r7, #24
 800acb0:	4611      	mov	r1, r2
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7fe fe4b 	bl	800994e <pb_field_iter_find>
 800acb8:	4603      	mov	r3, r0
 800acba:	f083 0301 	eor.w	r3, r3, #1
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d105      	bne.n	800acd0 <pb_decode_inner+0x104>
 800acc4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800acc8:	f003 030f 	and.w	r3, r3, #15
 800accc:	2b0a      	cmp	r3, #10
 800acce:	d13c      	bne.n	800ad4a <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 800acd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d112      	bne.n	800acfc <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 800acd6:	f107 0318 	add.w	r3, r7, #24
 800acda:	4618      	mov	r0, r3
 800acdc:	f7fe fe8d 	bl	80099fa <pb_field_iter_find_extension>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d004      	beq.n	800acf0 <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 800ace6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	663b      	str	r3, [r7, #96]	; 0x60
                    extension_range_start = iter.tag;
 800acec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800acee:	667b      	str	r3, [r7, #100]	; 0x64
                }

                if (!extensions)
 800acf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d102      	bne.n	800acfc <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 800acf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800acfa:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            if (tag >= extension_range_start)
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d815      	bhi.n	800ad30 <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	689b      	ldr	r3, [r3, #8]
 800ad08:	64fb      	str	r3, [r7, #76]	; 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 800ad0a:	6979      	ldr	r1, [r7, #20]
 800ad0c:	7cfa      	ldrb	r2, [r7, #19]
 800ad0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	f7ff fde1 	bl	800a8d8 <decode_extension>
 800ad16:	4603      	mov	r3, r0
 800ad18:	f083 0301 	eor.w	r3, r3, #1
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d001      	beq.n	800ad26 <pb_decode_inner+0x15a>
                    return false;
 800ad22:	2300      	movs	r3, #0
 800ad24:	e105      	b.n	800af32 <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d173      	bne.n	800ae18 <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 800ad30:	7cfb      	ldrb	r3, [r7, #19]
 800ad32:	4619      	mov	r1, r3
 800ad34:	68f8      	ldr	r0, [r7, #12]
 800ad36:	f7ff f96f 	bl	800a018 <pb_skip_field>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	f083 0301 	eor.w	r3, r3, #1
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d06a      	beq.n	800ae1c <pb_decode_inner+0x250>
                return false;
 800ad46:	2300      	movs	r3, #0
 800ad48:	e0f3      	b.n	800af32 <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 800ad4a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ad4e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ad52:	2b20      	cmp	r3, #32
 800ad54:	d12e      	bne.n	800adb4 <pb_decode_inner+0x1e8>
 800ad56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad58:	f107 0318 	add.w	r3, r7, #24
 800ad5c:	3314      	adds	r3, #20
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d128      	bne.n	800adb4 <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 800ad62:	8c3b      	ldrh	r3, [r7, #32]
 800ad64:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d020      	beq.n	800adae <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 800ad6c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800ad70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d011      	beq.n	800ad9c <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 800ad78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 800ad7c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d00b      	beq.n	800ad9c <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d002      	beq.n	800ad92 <pb_decode_inner+0x1c6>
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	e000      	b.n	800ad94 <pb_decode_inner+0x1c8>
 800ad92:	4b4a      	ldr	r3, [pc, #296]	; (800aebc <pb_decode_inner+0x2f0>)
 800ad94:	68fa      	ldr	r2, [r7, #12]
 800ad96:	60d3      	str	r3, [r2, #12]
 800ad98:	2300      	movs	r3, #0
 800ad9a:	e0ca      	b.n	800af32 <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 800ad9c:	8c3b      	ldrh	r3, [r7, #32]
 800ad9e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                fixed_count_size = 0;
 800ada2:	2300      	movs	r3, #0
 800ada4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                fixed_count_total_size = iter.array_size;
 800ada8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800adaa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }

            iter.pSize = &fixed_count_size;
 800adae:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 800adb2:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 800adb4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800adb8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d11c      	bne.n	800adfa <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 800adc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800adc2:	2b3f      	cmp	r3, #63	; 0x3f
 800adc4:	d819      	bhi.n	800adfa <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 800adc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800adc8:	f003 031f 	and.w	r3, r3, #31
 800adcc:	2201      	movs	r2, #1
 800adce:	fa02 f303 	lsl.w	r3, r2, r3
 800add2:	653b      	str	r3, [r7, #80]	; 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 800add4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800add6:	095b      	lsrs	r3, r3, #5
 800add8:	b29b      	uxth	r3, r3
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	3368      	adds	r3, #104	; 0x68
 800adde:	443b      	add	r3, r7
 800ade0:	f853 2c28 	ldr.w	r2, [r3, #-40]
 800ade4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ade6:	095b      	lsrs	r3, r3, #5
 800ade8:	b29b      	uxth	r3, r3
 800adea:	4619      	mov	r1, r3
 800adec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adee:	431a      	orrs	r2, r3
 800adf0:	008b      	lsls	r3, r1, #2
 800adf2:	3368      	adds	r3, #104	; 0x68
 800adf4:	443b      	add	r3, r7
 800adf6:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 800adfa:	7cfb      	ldrb	r3, [r7, #19]
 800adfc:	f107 0218 	add.w	r2, r7, #24
 800ae00:	4619      	mov	r1, r3
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	f7ff fcf0 	bl	800a7e8 <decode_field>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	f083 0301 	eor.w	r3, r3, #1
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d004      	beq.n	800ae1e <pb_decode_inner+0x252>
            return false;
 800ae14:	2300      	movs	r3, #0
 800ae16:	e08c      	b.n	800af32 <pb_decode_inner+0x366>
                    continue;
 800ae18:	bf00      	nop
 800ae1a:	e000      	b.n	800ae1e <pb_decode_inner+0x252>
            continue;
 800ae1c:	bf00      	nop
    while (stream->bytes_left)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	689b      	ldr	r3, [r3, #8]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	f47f af17 	bne.w	800ac56 <pb_decode_inner+0x8a>
 800ae28:	e002      	b.n	800ae30 <pb_decode_inner+0x264>
                break;
 800ae2a:	bf00      	nop
 800ae2c:	e000      	b.n	800ae30 <pb_decode_inner+0x264>
            break;
 800ae2e:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 800ae30:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800ae34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d011      	beq.n	800ae60 <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 800ae3c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 800ae40:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d00b      	beq.n	800ae60 <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d002      	beq.n	800ae56 <pb_decode_inner+0x28a>
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	e000      	b.n	800ae58 <pb_decode_inner+0x28c>
 800ae56:	4b19      	ldr	r3, [pc, #100]	; (800aebc <pb_decode_inner+0x2f0>)
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	60d3      	str	r3, [r2, #12]
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	e068      	b.n	800af32 <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 800ae60:	69bb      	ldr	r3, [r7, #24]
 800ae62:	8a5b      	ldrh	r3, [r3, #18]
 800ae64:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

        if (req_field_count > 0)
 800ae68:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d05f      	beq.n	800af30 <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 800ae70:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800ae74:	2b40      	cmp	r3, #64	; 0x40
 800ae76:	d902      	bls.n	800ae7e <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 800ae78:	2340      	movs	r3, #64	; 0x40
 800ae7a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 800ae7e:	2300      	movs	r3, #0
 800ae80:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800ae84:	e023      	b.n	800aece <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 800ae86:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	3368      	adds	r3, #104	; 0x68
 800ae8e:	443b      	add	r3, r7
 800ae90:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800ae94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d014      	beq.n	800aec4 <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d002      	beq.n	800aea8 <pb_decode_inner+0x2dc>
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	e000      	b.n	800aeaa <pb_decode_inner+0x2de>
 800aea8:	4b05      	ldr	r3, [pc, #20]	; (800aec0 <pb_decode_inner+0x2f4>)
 800aeaa:	68fa      	ldr	r2, [r7, #12]
 800aeac:	60d3      	str	r3, [r2, #12]
 800aeae:	2300      	movs	r3, #0
 800aeb0:	e03f      	b.n	800af32 <pb_decode_inner+0x366>
 800aeb2:	bf00      	nop
 800aeb4:	0800cbb4 	.word	0x0800cbb4
 800aeb8:	0800cc04 	.word	0x0800cc04
 800aebc:	0800cc10 	.word	0x0800cc10
 800aec0:	0800cc34 	.word	0x0800cc34
            for (i = 0; i < (req_field_count >> 5); i++)
 800aec4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800aec8:	3301      	adds	r3, #1
 800aeca:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800aece:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800aed2:	095b      	lsrs	r3, r3, #5
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d3d3      	bcc.n	800ae86 <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 800aede:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800aee2:	f003 031f 	and.w	r3, r3, #31
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d022      	beq.n	800af30 <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 800aeea:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800aeee:	095b      	lsrs	r3, r3, #5
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	3368      	adds	r3, #104	; 0x68
 800aef6:	443b      	add	r3, r7
 800aef8:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 800aefc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800af00:	b2db      	uxtb	r3, r3
 800af02:	f003 031f 	and.w	r3, r3, #31
 800af06:	b2db      	uxtb	r3, r3
 800af08:	f1c3 0320 	rsb	r3, r3, #32
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	4619      	mov	r1, r3
 800af10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af12:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 800af14:	429a      	cmp	r2, r3
 800af16:	d00b      	beq.n	800af30 <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d002      	beq.n	800af26 <pb_decode_inner+0x35a>
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	e000      	b.n	800af28 <pb_decode_inner+0x35c>
 800af26:	4b05      	ldr	r3, [pc, #20]	; (800af3c <pb_decode_inner+0x370>)
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	60d3      	str	r3, [r2, #12]
 800af2c:	2300      	movs	r3, #0
 800af2e:	e000      	b.n	800af32 <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 800af30:	2301      	movs	r3, #1
}
 800af32:	4618      	mov	r0, r3
 800af34:	3768      	adds	r7, #104	; 0x68
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	0800cc34 	.word	0x0800cc34

0800af40 <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b086      	sub	sp, #24
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 800af4c:	2300      	movs	r3, #0
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	68b9      	ldr	r1, [r7, #8]
 800af52:	68f8      	ldr	r0, [r7, #12]
 800af54:	f7ff fe3a 	bl	800abcc <pb_decode_inner>
 800af58:	4603      	mov	r3, r0
 800af5a:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 800af5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3718      	adds	r7, #24
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b084      	sub	sp, #16
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
 800af6e:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 800af70:	f107 030c 	add.w	r3, r7, #12
 800af74:	4619      	mov	r1, r3
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f7fe ff70 	bl	8009e5c <pb_decode_varint32>
 800af7c:	4603      	mov	r3, r0
 800af7e:	f083 0301 	eor.w	r3, r3, #1
 800af82:	b2db      	uxtb	r3, r3
 800af84:	2b00      	cmp	r3, #0
 800af86:	d001      	beq.n	800af8c <pb_decode_bool+0x26>
        return false;
 800af88:	2300      	movs	r3, #0
 800af8a:	e008      	b.n	800af9e <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	bf14      	ite	ne
 800af92:	2301      	movne	r3, #1
 800af94:	2300      	moveq	r3, #0
 800af96:	b2da      	uxtb	r2, r3
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	701a      	strb	r2, [r3, #0]
    return true;
 800af9c:	2301      	movs	r3, #1
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3710      	adds	r7, #16
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}

0800afa6 <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 800afa6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 800afb2:	f107 0308 	add.w	r3, r7, #8
 800afb6:	4619      	mov	r1, r3
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f7fe ff5f 	bl	8009e7c <pb_decode_varint>
 800afbe:	4603      	mov	r3, r0
 800afc0:	f083 0301 	eor.w	r3, r3, #1
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d001      	beq.n	800afce <pb_decode_svarint+0x28>
        return false;
 800afca:	2300      	movs	r3, #0
 800afcc:	e029      	b.n	800b022 <pb_decode_svarint+0x7c>
    
    if (value & 1)
 800afce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800afd2:	f002 0401 	and.w	r4, r2, #1
 800afd6:	2500      	movs	r5, #0
 800afd8:	ea54 0305 	orrs.w	r3, r4, r5
 800afdc:	d013      	beq.n	800b006 <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 800afde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800afe2:	f04f 0200 	mov.w	r2, #0
 800afe6:	f04f 0300 	mov.w	r3, #0
 800afea:	0842      	lsrs	r2, r0, #1
 800afec:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800aff0:	084b      	lsrs	r3, r1, #1
 800aff2:	ea6f 0802 	mvn.w	r8, r2
 800aff6:	ea6f 0903 	mvn.w	r9, r3
 800affa:	4642      	mov	r2, r8
 800affc:	464b      	mov	r3, r9
 800affe:	6839      	ldr	r1, [r7, #0]
 800b000:	e9c1 2300 	strd	r2, r3, [r1]
 800b004:	e00c      	b.n	800b020 <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 800b006:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b00a:	f04f 0200 	mov.w	r2, #0
 800b00e:	f04f 0300 	mov.w	r3, #0
 800b012:	0842      	lsrs	r2, r0, #1
 800b014:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800b018:	084b      	lsrs	r3, r1, #1
 800b01a:	6839      	ldr	r1, [r7, #0]
 800b01c:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 800b020:	2301      	movs	r3, #1
}
 800b022:	4618      	mov	r0, r3
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800b02c <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 800b036:	f107 030c 	add.w	r3, r7, #12
 800b03a:	2204      	movs	r2, #4
 800b03c:	4619      	mov	r1, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f7fe fd92 	bl	8009b68 <pb_read>
 800b044:	4603      	mov	r3, r0
 800b046:	f083 0301 	eor.w	r3, r3, #1
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d001      	beq.n	800b054 <pb_decode_fixed32+0x28>
        return false;
 800b050:	2300      	movs	r3, #0
 800b052:	e003      	b.n	800b05c <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 800b054:	68fa      	ldr	r2, [r7, #12]
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 800b05a:	2301      	movs	r3, #1
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 800b06e:	f107 0308 	add.w	r3, r7, #8
 800b072:	2208      	movs	r2, #8
 800b074:	4619      	mov	r1, r3
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f7fe fd76 	bl	8009b68 <pb_read>
 800b07c:	4603      	mov	r3, r0
 800b07e:	f083 0301 	eor.w	r3, r3, #1
 800b082:	b2db      	uxtb	r3, r3
 800b084:	2b00      	cmp	r3, #0
 800b086:	d001      	beq.n	800b08c <pb_decode_fixed64+0x28>
        return false;
 800b088:	2300      	movs	r3, #0
 800b08a:	e005      	b.n	800b098 <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 800b08c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b090:	6839      	ldr	r1, [r7, #0]
 800b092:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 800b096:	2301      	movs	r3, #1
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3710      	adds	r7, #16
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	69db      	ldr	r3, [r3, #28]
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f7ff ff58 	bl	800af66 <pb_decode_bool>
 800b0b6:	4603      	mov	r3, r0
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3708      	adds	r7, #8
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 800b0c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0c4:	b094      	sub	sp, #80	; 0x50
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6278      	str	r0, [r7, #36]	; 0x24
 800b0ca:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 800b0cc:	6a3b      	ldr	r3, [r7, #32]
 800b0ce:	7d9b      	ldrb	r3, [r3, #22]
 800b0d0:	f003 030f 	and.w	r3, r3, #15
 800b0d4:	2b02      	cmp	r3, #2
 800b0d6:	d179      	bne.n	800b1cc <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 800b0d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b0dc:	4619      	mov	r1, r3
 800b0de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0e0:	f7fe fecc 	bl	8009e7c <pb_decode_varint>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	f083 0301 	eor.w	r3, r3, #1
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d001      	beq.n	800b0f4 <pb_dec_varint+0x34>
            return false;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	e107      	b.n	800b304 <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 800b0f4:	6a3b      	ldr	r3, [r7, #32]
 800b0f6:	8a5b      	ldrh	r3, [r3, #18]
 800b0f8:	2b08      	cmp	r3, #8
 800b0fa:	d10a      	bne.n	800b112 <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 800b0fc:	6a3b      	ldr	r3, [r7, #32]
 800b0fe:	69d9      	ldr	r1, [r3, #28]
 800b100:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b104:	e9c1 2300 	strd	r2, r3, [r1]
 800b108:	e9d1 2300 	ldrd	r2, r3, [r1]
 800b10c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800b110:	e046      	b.n	800b1a0 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 800b112:	6a3b      	ldr	r3, [r7, #32]
 800b114:	8a5b      	ldrh	r3, [r3, #18]
 800b116:	2b04      	cmp	r3, #4
 800b118:	d10e      	bne.n	800b138 <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 800b11a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800b11e:	6a3b      	ldr	r3, [r7, #32]
 800b120:	69db      	ldr	r3, [r3, #28]
 800b122:	4602      	mov	r2, r0
 800b124:	601a      	str	r2, [r3, #0]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2200      	movs	r2, #0
 800b12a:	613b      	str	r3, [r7, #16]
 800b12c:	617a      	str	r2, [r7, #20]
 800b12e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b132:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 800b136:	e033      	b.n	800b1a0 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 800b138:	6a3b      	ldr	r3, [r7, #32]
 800b13a:	8a5b      	ldrh	r3, [r3, #18]
 800b13c:	2b02      	cmp	r3, #2
 800b13e:	d10f      	bne.n	800b160 <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 800b140:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800b144:	6a3b      	ldr	r3, [r7, #32]
 800b146:	69db      	ldr	r3, [r3, #28]
 800b148:	b282      	uxth	r2, r0
 800b14a:	801a      	strh	r2, [r3, #0]
 800b14c:	881b      	ldrh	r3, [r3, #0]
 800b14e:	b29b      	uxth	r3, r3
 800b150:	2200      	movs	r2, #0
 800b152:	60bb      	str	r3, [r7, #8]
 800b154:	60fa      	str	r2, [r7, #12]
 800b156:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800b15a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 800b15e:	e01f      	b.n	800b1a0 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 800b160:	6a3b      	ldr	r3, [r7, #32]
 800b162:	8a5b      	ldrh	r3, [r3, #18]
 800b164:	2b01      	cmp	r3, #1
 800b166:	d10f      	bne.n	800b188 <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 800b168:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800b16c:	6a3b      	ldr	r3, [r7, #32]
 800b16e:	69db      	ldr	r3, [r3, #28]
 800b170:	b2c2      	uxtb	r2, r0
 800b172:	701a      	strb	r2, [r3, #0]
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	b2db      	uxtb	r3, r3
 800b178:	2200      	movs	r2, #0
 800b17a:	603b      	str	r3, [r7, #0]
 800b17c:	607a      	str	r2, [r7, #4]
 800b17e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b182:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 800b186:	e00b      	b.n	800b1a0 <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800b188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d002      	beq.n	800b196 <pb_dec_varint+0xd6>
 800b190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	e000      	b.n	800b198 <pb_dec_varint+0xd8>
 800b196:	4b5e      	ldr	r3, [pc, #376]	; (800b310 <pb_dec_varint+0x250>)
 800b198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b19a:	60d3      	str	r3, [r2, #12]
 800b19c:	2300      	movs	r3, #0
 800b19e:	e0b1      	b.n	800b304 <pb_dec_varint+0x244>

        if (clamped != value)
 800b1a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b1a4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b1a8:	4299      	cmp	r1, r3
 800b1aa:	bf08      	it	eq
 800b1ac:	4290      	cmpeq	r0, r2
 800b1ae:	d00b      	beq.n	800b1c8 <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d002      	beq.n	800b1be <pb_dec_varint+0xfe>
 800b1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ba:	68db      	ldr	r3, [r3, #12]
 800b1bc:	e000      	b.n	800b1c0 <pb_dec_varint+0x100>
 800b1be:	4b55      	ldr	r3, [pc, #340]	; (800b314 <pb_dec_varint+0x254>)
 800b1c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1c2:	60d3      	str	r3, [r2, #12]
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	e09d      	b.n	800b304 <pb_dec_varint+0x244>

        return true;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e09b      	b.n	800b304 <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 800b1cc:	6a3b      	ldr	r3, [r7, #32]
 800b1ce:	7d9b      	ldrb	r3, [r3, #22]
 800b1d0:	f003 030f 	and.w	r3, r3, #15
 800b1d4:	2b03      	cmp	r3, #3
 800b1d6:	d10d      	bne.n	800b1f4 <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 800b1d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b1dc:	4619      	mov	r1, r3
 800b1de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1e0:	f7ff fee1 	bl	800afa6 <pb_decode_svarint>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	f083 0301 	eor.w	r3, r3, #1
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d022      	beq.n	800b236 <pb_dec_varint+0x176>
                return false;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	e087      	b.n	800b304 <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 800b1f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1fc:	f7fe fe3e 	bl	8009e7c <pb_decode_varint>
 800b200:	4603      	mov	r3, r0
 800b202:	f083 0301 	eor.w	r3, r3, #1
 800b206:	b2db      	uxtb	r3, r3
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d001      	beq.n	800b210 <pb_dec_varint+0x150>
                return false;
 800b20c:	2300      	movs	r3, #0
 800b20e:	e079      	b.n	800b304 <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 800b210:	6a3b      	ldr	r3, [r7, #32]
 800b212:	8a5b      	ldrh	r3, [r3, #18]
 800b214:	2b08      	cmp	r3, #8
 800b216:	d104      	bne.n	800b222 <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 800b218:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b21c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800b220:	e009      	b.n	800b236 <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 800b222:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b226:	4613      	mov	r3, r2
 800b228:	17da      	asrs	r2, r3, #31
 800b22a:	61bb      	str	r3, [r7, #24]
 800b22c:	61fa      	str	r2, [r7, #28]
 800b22e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b232:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 800b236:	6a3b      	ldr	r3, [r7, #32]
 800b238:	8a5b      	ldrh	r3, [r3, #18]
 800b23a:	2b08      	cmp	r3, #8
 800b23c:	d10a      	bne.n	800b254 <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 800b23e:	6a3b      	ldr	r3, [r7, #32]
 800b240:	69d9      	ldr	r1, [r3, #28]
 800b242:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b246:	e9c1 2300 	strd	r2, r3, [r1]
 800b24a:	e9d1 2300 	ldrd	r2, r3, [r1]
 800b24e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800b252:	e042      	b.n	800b2da <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 800b254:	6a3b      	ldr	r3, [r7, #32]
 800b256:	8a5b      	ldrh	r3, [r3, #18]
 800b258:	2b04      	cmp	r3, #4
 800b25a:	d10c      	bne.n	800b276 <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 800b25c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b260:	6a3b      	ldr	r3, [r7, #32]
 800b262:	69db      	ldr	r3, [r3, #28]
 800b264:	4602      	mov	r2, r0
 800b266:	601a      	str	r2, [r3, #0]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	17da      	asrs	r2, r3, #31
 800b26c:	469a      	mov	sl, r3
 800b26e:	4693      	mov	fp, r2
 800b270:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
 800b274:	e031      	b.n	800b2da <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 800b276:	6a3b      	ldr	r3, [r7, #32]
 800b278:	8a5b      	ldrh	r3, [r3, #18]
 800b27a:	2b02      	cmp	r3, #2
 800b27c:	d10e      	bne.n	800b29c <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 800b27e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b282:	6a3b      	ldr	r3, [r7, #32]
 800b284:	69db      	ldr	r3, [r3, #28]
 800b286:	b202      	sxth	r2, r0
 800b288:	801a      	strh	r2, [r3, #0]
 800b28a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b28e:	b21b      	sxth	r3, r3
 800b290:	17da      	asrs	r2, r3, #31
 800b292:	4698      	mov	r8, r3
 800b294:	4691      	mov	r9, r2
 800b296:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
 800b29a:	e01e      	b.n	800b2da <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 800b29c:	6a3b      	ldr	r3, [r7, #32]
 800b29e:	8a5b      	ldrh	r3, [r3, #18]
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d10e      	bne.n	800b2c2 <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 800b2a4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b2a8:	6a3b      	ldr	r3, [r7, #32]
 800b2aa:	69db      	ldr	r3, [r3, #28]
 800b2ac:	b242      	sxtb	r2, r0
 800b2ae:	701a      	strb	r2, [r3, #0]
 800b2b0:	f993 3000 	ldrsb.w	r3, [r3]
 800b2b4:	b25b      	sxtb	r3, r3
 800b2b6:	17da      	asrs	r2, r3, #31
 800b2b8:	461c      	mov	r4, r3
 800b2ba:	4615      	mov	r5, r2
 800b2bc:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 800b2c0:	e00b      	b.n	800b2da <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800b2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d002      	beq.n	800b2d0 <pb_dec_varint+0x210>
 800b2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	e000      	b.n	800b2d2 <pb_dec_varint+0x212>
 800b2d0:	4b0f      	ldr	r3, [pc, #60]	; (800b310 <pb_dec_varint+0x250>)
 800b2d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2d4:	60d3      	str	r3, [r2, #12]
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	e014      	b.n	800b304 <pb_dec_varint+0x244>

        if (clamped != svalue)
 800b2da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b2de:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800b2e2:	4299      	cmp	r1, r3
 800b2e4:	bf08      	it	eq
 800b2e6:	4290      	cmpeq	r0, r2
 800b2e8:	d00b      	beq.n	800b302 <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 800b2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ec:	68db      	ldr	r3, [r3, #12]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d002      	beq.n	800b2f8 <pb_dec_varint+0x238>
 800b2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	e000      	b.n	800b2fa <pb_dec_varint+0x23a>
 800b2f8:	4b06      	ldr	r3, [pc, #24]	; (800b314 <pb_dec_varint+0x254>)
 800b2fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2fc:	60d3      	str	r3, [r2, #12]
 800b2fe:	2300      	movs	r3, #0
 800b300:	e000      	b.n	800b304 <pb_dec_varint+0x244>

        return true;
 800b302:	2301      	movs	r3, #1
    }
}
 800b304:	4618      	mov	r0, r3
 800b306:	3750      	adds	r7, #80	; 0x50
 800b308:	46bd      	mov	sp, r7
 800b30a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b30e:	bf00      	nop
 800b310:	0800cc4c 	.word	0x0800cc4c
 800b314:	0800cc60 	.word	0x0800cc60

0800b318 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b086      	sub	sp, #24
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 800b322:	f107 030c 	add.w	r3, r7, #12
 800b326:	4619      	mov	r1, r3
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f7fe fd97 	bl	8009e5c <pb_decode_varint32>
 800b32e:	4603      	mov	r3, r0
 800b330:	f083 0301 	eor.w	r3, r3, #1
 800b334:	b2db      	uxtb	r3, r3
 800b336:	2b00      	cmp	r3, #0
 800b338:	d001      	beq.n	800b33e <pb_dec_bytes+0x26>
        return false;
 800b33a:	2300      	movs	r3, #0
 800b33c:	e055      	b.n	800b3ea <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b344:	d30b      	bcc.n	800b35e <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d002      	beq.n	800b354 <pb_dec_bytes+0x3c>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	68db      	ldr	r3, [r3, #12]
 800b352:	e000      	b.n	800b356 <pb_dec_bytes+0x3e>
 800b354:	4b27      	ldr	r3, [pc, #156]	; (800b3f4 <pb_dec_bytes+0xdc>)
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	60d3      	str	r3, [r2, #12]
 800b35a:	2300      	movs	r3, #0
 800b35c:	e045      	b.n	800b3ea <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	3302      	adds	r3, #2
 800b362:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	697a      	ldr	r2, [r7, #20]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d20b      	bcs.n	800b384 <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d002      	beq.n	800b37a <pb_dec_bytes+0x62>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	e000      	b.n	800b37c <pb_dec_bytes+0x64>
 800b37a:	4b1f      	ldr	r3, [pc, #124]	; (800b3f8 <pb_dec_bytes+0xe0>)
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	60d3      	str	r3, [r2, #12]
 800b380:	2300      	movs	r3, #0
 800b382:	e032      	b.n	800b3ea <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	7d9b      	ldrb	r3, [r3, #22]
 800b388:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b38c:	2b80      	cmp	r3, #128	; 0x80
 800b38e:	d10b      	bne.n	800b3a8 <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d002      	beq.n	800b39e <pb_dec_bytes+0x86>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	68db      	ldr	r3, [r3, #12]
 800b39c:	e000      	b.n	800b3a0 <pb_dec_bytes+0x88>
 800b39e:	4b17      	ldr	r3, [pc, #92]	; (800b3fc <pb_dec_bytes+0xe4>)
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	60d3      	str	r3, [r2, #12]
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	e020      	b.n	800b3ea <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	8a5b      	ldrh	r3, [r3, #18]
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d90b      	bls.n	800b3cc <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d002      	beq.n	800b3c2 <pb_dec_bytes+0xaa>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	e000      	b.n	800b3c4 <pb_dec_bytes+0xac>
 800b3c2:	4b0c      	ldr	r3, [pc, #48]	; (800b3f4 <pb_dec_bytes+0xdc>)
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	60d3      	str	r3, [r2, #12]
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	e00e      	b.n	800b3ea <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	69db      	ldr	r3, [r3, #28]
 800b3d0:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	b29a      	uxth	r2, r3
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	3302      	adds	r3, #2
 800b3de:	68fa      	ldr	r2, [r7, #12]
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f7fe fbc0 	bl	8009b68 <pb_read>
 800b3e8:	4603      	mov	r3, r0
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3718      	adds	r7, #24
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	0800cc74 	.word	0x0800cc74
 800b3f8:	0800cc84 	.word	0x0800cc84
 800b3fc:	0800cbcc 	.word	0x0800cbcc

0800b400 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b086      	sub	sp, #24
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	69db      	ldr	r3, [r3, #28]
 800b40e:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 800b410:	f107 030c 	add.w	r3, r7, #12
 800b414:	4619      	mov	r1, r3
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f7fe fd20 	bl	8009e5c <pb_decode_varint32>
 800b41c:	4603      	mov	r3, r0
 800b41e:	f083 0301 	eor.w	r3, r3, #1
 800b422:	b2db      	uxtb	r3, r3
 800b424:	2b00      	cmp	r3, #0
 800b426:	d001      	beq.n	800b42c <pb_dec_string+0x2c>
        return false;
 800b428:	2300      	movs	r3, #0
 800b42a:	e05a      	b.n	800b4e2 <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b432:	d10b      	bne.n	800b44c <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d002      	beq.n	800b442 <pb_dec_string+0x42>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	e000      	b.n	800b444 <pb_dec_string+0x44>
 800b442:	4b2a      	ldr	r3, [pc, #168]	; (800b4ec <pb_dec_string+0xec>)
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	60d3      	str	r3, [r2, #12]
 800b448:	2300      	movs	r3, #0
 800b44a:	e04a      	b.n	800b4e2 <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	3301      	adds	r3, #1
 800b450:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	693a      	ldr	r2, [r7, #16]
 800b456:	429a      	cmp	r2, r3
 800b458:	d20b      	bcs.n	800b472 <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d002      	beq.n	800b468 <pb_dec_string+0x68>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	e000      	b.n	800b46a <pb_dec_string+0x6a>
 800b468:	4b20      	ldr	r3, [pc, #128]	; (800b4ec <pb_dec_string+0xec>)
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	60d3      	str	r3, [r2, #12]
 800b46e:	2300      	movs	r3, #0
 800b470:	e037      	b.n	800b4e2 <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	7d9b      	ldrb	r3, [r3, #22]
 800b476:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b47a:	2b80      	cmp	r3, #128	; 0x80
 800b47c:	d10b      	bne.n	800b496 <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d002      	beq.n	800b48c <pb_dec_string+0x8c>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	e000      	b.n	800b48e <pb_dec_string+0x8e>
 800b48c:	4b18      	ldr	r3, [pc, #96]	; (800b4f0 <pb_dec_string+0xf0>)
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	60d3      	str	r3, [r2, #12]
 800b492:	2300      	movs	r3, #0
 800b494:	e025      	b.n	800b4e2 <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	8a5b      	ldrh	r3, [r3, #18]
 800b49a:	461a      	mov	r2, r3
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d90b      	bls.n	800b4ba <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	68db      	ldr	r3, [r3, #12]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d002      	beq.n	800b4b0 <pb_dec_string+0xb0>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	68db      	ldr	r3, [r3, #12]
 800b4ae:	e000      	b.n	800b4b2 <pb_dec_string+0xb2>
 800b4b0:	4b10      	ldr	r3, [pc, #64]	; (800b4f4 <pb_dec_string+0xf4>)
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	60d3      	str	r3, [r2, #12]
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	e013      	b.n	800b4e2 <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	697a      	ldr	r2, [r7, #20]
 800b4be:	4413      	add	r3, r2
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	6979      	ldr	r1, [r7, #20]
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f7fe fb4c 	bl	8009b68 <pb_read>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	f083 0301 	eor.w	r3, r3, #1
 800b4d6:	b2db      	uxtb	r3, r3
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d001      	beq.n	800b4e0 <pb_dec_string+0xe0>
        return false;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	e000      	b.n	800b4e2 <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 800b4e0:	2301      	movs	r3, #1
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3718      	adds	r7, #24
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	0800cc84 	.word	0x0800cc84
 800b4f0:	0800cbcc 	.word	0x0800cbcc
 800b4f4:	0800cc94 	.word	0x0800cc94

0800b4f8 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b08a      	sub	sp, #40	; 0x28
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
    bool status = true;
 800b502:	2301      	movs	r3, #1
 800b504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool submsg_consumed = false;
 800b508:	2300      	movs	r3, #0
 800b50a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 800b50e:	f107 030c 	add.w	r3, r7, #12
 800b512:	4619      	mov	r1, r3
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f7fe fe2d 	bl	800a174 <pb_make_string_substream>
 800b51a:	4603      	mov	r3, r0
 800b51c:	f083 0301 	eor.w	r3, r3, #1
 800b520:	b2db      	uxtb	r3, r3
 800b522:	2b00      	cmp	r3, #0
 800b524:	d001      	beq.n	800b52a <pb_dec_submessage+0x32>
        return false;
 800b526:	2300      	movs	r3, #0
 800b528:	e069      	b.n	800b5fe <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d10b      	bne.n	800b54a <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d002      	beq.n	800b540 <pb_dec_submessage+0x48>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	68db      	ldr	r3, [r3, #12]
 800b53e:	e000      	b.n	800b542 <pb_dec_submessage+0x4a>
 800b540:	4b31      	ldr	r3, [pc, #196]	; (800b608 <pb_dec_submessage+0x110>)
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	60d3      	str	r3, [r2, #12]
 800b546:	2300      	movs	r3, #0
 800b548:	e059      	b.n	800b5fe <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	7d9b      	ldrb	r3, [r3, #22]
 800b54e:	f003 030f 	and.w	r3, r3, #15
 800b552:	2b09      	cmp	r3, #9
 800b554:	d11c      	bne.n	800b590 <pb_dec_submessage+0x98>
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	6a1b      	ldr	r3, [r3, #32]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d018      	beq.n	800b590 <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	6a1b      	ldr	r3, [r3, #32]
 800b562:	3b08      	subs	r3, #8
 800b564:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d010      	beq.n	800b590 <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	69fa      	ldr	r2, [r7, #28]
 800b574:	3204      	adds	r2, #4
 800b576:	f107 000c 	add.w	r0, r7, #12
 800b57a:	6839      	ldr	r1, [r7, #0]
 800b57c:	4798      	blx	r3
 800b57e:	4603      	mov	r3, r0
 800b580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if (substream.bytes_left == 0)
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d102      	bne.n	800b590 <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 800b58a:	2301      	movs	r3, #1
 800b58c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 800b590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b594:	2b00      	cmp	r3, #0
 800b596:	d022      	beq.n	800b5de <pb_dec_submessage+0xe6>
 800b598:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b59c:	f083 0301 	eor.w	r3, r3, #1
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d01b      	beq.n	800b5de <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	7d9b      	ldrb	r3, [r3, #22]
 800b5ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d107      	bne.n	800b5c6 <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	7d9b      	ldrb	r3, [r3, #22]
 800b5ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800b5be:	2b20      	cmp	r3, #32
 800b5c0:	d001      	beq.n	800b5c6 <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	69da      	ldr	r2, [r3, #28]
 800b5ce:	f107 000c 	add.w	r0, r7, #12
 800b5d2:	6a3b      	ldr	r3, [r7, #32]
 800b5d4:	f7ff fafa 	bl	800abcc <pb_decode_inner>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 800b5de:	f107 030c 	add.w	r3, r7, #12
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f7fe fdff 	bl	800a1e8 <pb_close_string_substream>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	f083 0301 	eor.w	r3, r3, #1
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d001      	beq.n	800b5fa <pb_dec_submessage+0x102>
        return false;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	e001      	b.n	800b5fe <pb_dec_submessage+0x106>

    return status;
 800b5fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3728      	adds	r7, #40	; 0x28
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	0800cca4 	.word	0x0800cca4

0800b60c <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 800b616:	f107 030c 	add.w	r3, r7, #12
 800b61a:	4619      	mov	r1, r3
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f7fe fc1d 	bl	8009e5c <pb_decode_varint32>
 800b622:	4603      	mov	r3, r0
 800b624:	f083 0301 	eor.w	r3, r3, #1
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d001      	beq.n	800b632 <pb_dec_fixed_length_bytes+0x26>
        return false;
 800b62e:	2300      	movs	r3, #0
 800b630:	e037      	b.n	800b6a2 <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b638:	d30b      	bcc.n	800b652 <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d002      	beq.n	800b648 <pb_dec_fixed_length_bytes+0x3c>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	68db      	ldr	r3, [r3, #12]
 800b646:	e000      	b.n	800b64a <pb_dec_fixed_length_bytes+0x3e>
 800b648:	4b18      	ldr	r3, [pc, #96]	; (800b6ac <pb_dec_fixed_length_bytes+0xa0>)
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	60d3      	str	r3, [r2, #12]
 800b64e:	2300      	movs	r3, #0
 800b650:	e027      	b.n	800b6a2 <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d109      	bne.n	800b66c <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	69d8      	ldr	r0, [r3, #28]
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	8a5b      	ldrh	r3, [r3, #18]
 800b660:	461a      	mov	r2, r3
 800b662:	2100      	movs	r1, #0
 800b664:	f001 f936 	bl	800c8d4 <memset>
        return true;
 800b668:	2301      	movs	r3, #1
 800b66a:	e01a      	b.n	800b6a2 <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	8a5b      	ldrh	r3, [r3, #18]
 800b670:	461a      	mov	r2, r3
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	429a      	cmp	r2, r3
 800b676:	d00b      	beq.n	800b690 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	68db      	ldr	r3, [r3, #12]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d002      	beq.n	800b686 <pb_dec_fixed_length_bytes+0x7a>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	e000      	b.n	800b688 <pb_dec_fixed_length_bytes+0x7c>
 800b686:	4b0a      	ldr	r3, [pc, #40]	; (800b6b0 <pb_dec_fixed_length_bytes+0xa4>)
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	60d3      	str	r3, [r2, #12]
 800b68c:	2300      	movs	r3, #0
 800b68e:	e008      	b.n	800b6a2 <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	69d9      	ldr	r1, [r3, #28]
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	8a5b      	ldrh	r3, [r3, #18]
 800b698:	461a      	mov	r2, r3
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f7fe fa64 	bl	8009b68 <pb_read>
 800b6a0:	4603      	mov	r3, r0
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3710      	adds	r7, #16
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	0800cc74 	.word	0x0800cc74
 800b6b0:	0800ccc0 	.word	0x0800ccc0

0800b6b4 <buf_write>:
/*******************************
 * pb_ostream_t implementation *
 *******************************/

static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
    pb_byte_t *dest = (pb_byte_t*)stream->state;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	617b      	str	r3, [r7, #20]
    stream->state = dest + count;
 800b6c6:	697a      	ldr	r2, [r7, #20]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	441a      	add	r2, r3
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	605a      	str	r2, [r3, #4]
    
    memcpy(dest, buf, count * sizeof(pb_byte_t));
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	68b9      	ldr	r1, [r7, #8]
 800b6d4:	6978      	ldr	r0, [r7, #20]
 800b6d6:	f001 f8ef 	bl	800c8b8 <memcpy>
    
    return true;
 800b6da:	2301      	movs	r3, #1
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3718      	adds	r7, #24
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <pb_ostream_from_buffer>:

pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
{
 800b6e4:	b4b0      	push	{r4, r5, r7}
 800b6e6:	b08b      	sub	sp, #44	; 0x2c
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	60f8      	str	r0, [r7, #12]
 800b6ec:	60b9      	str	r1, [r7, #8]
 800b6ee:	607a      	str	r2, [r7, #4]
     * NULL pointer marks a sizing field, so put a non-NULL value to mark a buffer stream.
     */
    static const int marker = 0;
    stream.callback = &marker;
#else
    stream.callback = &buf_write;
 800b6f0:	4b0b      	ldr	r3, [pc, #44]	; (800b720 <pb_ostream_from_buffer+0x3c>)
 800b6f2:	617b      	str	r3, [r7, #20]
#endif
    stream.state = buf;
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	61bb      	str	r3, [r7, #24]
    stream.max_size = bufsize;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	61fb      	str	r3, [r7, #28]
    stream.bytes_written = 0;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 800b700:	2300      	movs	r3, #0
 800b702:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	461d      	mov	r5, r3
 800b708:	f107 0414 	add.w	r4, r7, #20
 800b70c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b70e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b710:	6823      	ldr	r3, [r4, #0]
 800b712:	602b      	str	r3, [r5, #0]
}
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	372c      	adds	r7, #44	; 0x2c
 800b718:	46bd      	mov	sp, r7
 800b71a:	bcb0      	pop	{r4, r5, r7}
 800b71c:	4770      	bx	lr
 800b71e:	bf00      	nop
 800b720:	0800b6b5 	.word	0x0800b6b5

0800b724 <pb_write>:

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
    if (count > 0 && stream->callback != NULL)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d037      	beq.n	800b7a6 <pb_write+0x82>
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d033      	beq.n	800b7a6 <pb_write+0x82>
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	68da      	ldr	r2, [r3, #12]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	441a      	add	r2, r3
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d307      	bcc.n	800b75e <pb_write+0x3a>
            stream->bytes_written + count > stream->max_size)
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	68da      	ldr	r2, [r3, #12]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	441a      	add	r2, r3
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	689b      	ldr	r3, [r3, #8]
        if (stream->bytes_written + count < stream->bytes_written ||
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d90b      	bls.n	800b776 <pb_write+0x52>
        {
            PB_RETURN_ERROR(stream, "stream full");
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	691b      	ldr	r3, [r3, #16]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d002      	beq.n	800b76c <pb_write+0x48>
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	691b      	ldr	r3, [r3, #16]
 800b76a:	e000      	b.n	800b76e <pb_write+0x4a>
 800b76c:	4b13      	ldr	r3, [pc, #76]	; (800b7bc <pb_write+0x98>)
 800b76e:	68fa      	ldr	r2, [r7, #12]
 800b770:	6113      	str	r3, [r2, #16]
 800b772:	2300      	movs	r3, #0
 800b774:	e01e      	b.n	800b7b4 <pb_write+0x90>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	68b9      	ldr	r1, [r7, #8]
 800b77e:	68f8      	ldr	r0, [r7, #12]
 800b780:	4798      	blx	r3
 800b782:	4603      	mov	r3, r0
 800b784:	f083 0301 	eor.w	r3, r3, #1
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d00b      	beq.n	800b7a6 <pb_write+0x82>
            PB_RETURN_ERROR(stream, "io error");
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d002      	beq.n	800b79c <pb_write+0x78>
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	691b      	ldr	r3, [r3, #16]
 800b79a:	e000      	b.n	800b79e <pb_write+0x7a>
 800b79c:	4b08      	ldr	r3, [pc, #32]	; (800b7c0 <pb_write+0x9c>)
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	6113      	str	r3, [r2, #16]
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	e006      	b.n	800b7b4 <pb_write+0x90>
#endif
    }
    
    stream->bytes_written += count;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	68da      	ldr	r2, [r3, #12]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	441a      	add	r2, r3
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	60da      	str	r2, [r3, #12]
    return true;
 800b7b2:	2301      	movs	r3, #1
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3710      	adds	r7, #16
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	0800cce4 	.word	0x0800cce4
 800b7c0:	0800ccf0 	.word	0x0800ccf0

0800b7c4 <safe_read_bool>:
/* Read a bool value without causing undefined behavior even if the value
 * is invalid. See issue #434 and
 * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 */
static bool safe_read_bool(const void *pSize)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
    const char *p = (const char *)pSize;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	60bb      	str	r3, [r7, #8]
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	60fb      	str	r3, [r7, #12]
 800b7d4:	e00a      	b.n	800b7ec <safe_read_bool+0x28>
    {
        if (p[i] != 0)
 800b7d6:	68ba      	ldr	r2, [r7, #8]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	4413      	add	r3, r2
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d001      	beq.n	800b7e6 <safe_read_bool+0x22>
            return true;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e006      	b.n	800b7f4 <safe_read_bool+0x30>
    for (i = 0; i < sizeof(bool); i++)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	60fb      	str	r3, [r7, #12]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d0f1      	beq.n	800b7d6 <safe_read_bool+0x12>
    }
    return false;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3714      	adds	r7, #20
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <encode_array>:

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
{
 800b800:	b5b0      	push	{r4, r5, r7, lr}
 800b802:	b08c      	sub	sp, #48	; 0x30
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
    pb_size_t count;
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    size_t size;
#endif

    count = *(pb_size_t*)field->pSize;
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	6a1b      	ldr	r3, [r3, #32]
 800b80e:	881b      	ldrh	r3, [r3, #0]
 800b810:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (count == 0)
 800b812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b814:	2b00      	cmp	r3, #0
 800b816:	d101      	bne.n	800b81c <encode_array+0x1c>
        return true;
 800b818:	2301      	movs	r3, #1
 800b81a:	e13d      	b.n	800ba98 <encode_array+0x298>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	7d9b      	ldrb	r3, [r3, #22]
 800b820:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b824:	2b80      	cmp	r3, #128	; 0x80
 800b826:	d010      	beq.n	800b84a <encode_array+0x4a>
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	8a9b      	ldrh	r3, [r3, #20]
 800b82c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b82e:	429a      	cmp	r2, r3
 800b830:	d90b      	bls.n	800b84a <encode_array+0x4a>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	691b      	ldr	r3, [r3, #16]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d002      	beq.n	800b840 <encode_array+0x40>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	691b      	ldr	r3, [r3, #16]
 800b83e:	e000      	b.n	800b842 <encode_array+0x42>
 800b840:	4b97      	ldr	r3, [pc, #604]	; (800baa0 <encode_array+0x2a0>)
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	6113      	str	r3, [r2, #16]
 800b846:	2300      	movs	r3, #0
 800b848:	e126      	b.n	800ba98 <encode_array+0x298>
    
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	7d9b      	ldrb	r3, [r3, #22]
 800b84e:	f003 030f 	and.w	r3, r3, #15
 800b852:	2b05      	cmp	r3, #5
 800b854:	f200 80b3 	bhi.w	800b9be <encode_array+0x1be>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	8a1b      	ldrh	r3, [r3, #16]
 800b85c:	461a      	mov	r2, r3
 800b85e:	2102      	movs	r1, #2
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f000 fcdd 	bl	800c220 <pb_encode_tag>
 800b866:	4603      	mov	r3, r0
 800b868:	f083 0301 	eor.w	r3, r3, #1
 800b86c:	b2db      	uxtb	r3, r3
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d001      	beq.n	800b876 <encode_array+0x76>
            return false;
 800b872:	2300      	movs	r3, #0
 800b874:	e110      	b.n	800ba98 <encode_array+0x298>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	7d9b      	ldrb	r3, [r3, #22]
 800b87a:	f003 030f 	and.w	r3, r3, #15
 800b87e:	2b04      	cmp	r3, #4
 800b880:	d103      	bne.n	800b88a <encode_array+0x8a>
        {
            size = 4 * (size_t)count;
 800b882:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	62bb      	str	r3, [r7, #40]	; 0x28
 800b888:	e047      	b.n	800b91a <encode_array+0x11a>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	7d9b      	ldrb	r3, [r3, #22]
 800b88e:	f003 030f 	and.w	r3, r3, #15
 800b892:	2b05      	cmp	r3, #5
 800b894:	d103      	bne.n	800b89e <encode_array+0x9e>
        {
            size = 8 * (size_t)count;
 800b896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b898:	00db      	lsls	r3, r3, #3
 800b89a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b89c:	e03d      	b.n	800b91a <encode_array+0x11a>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 800b89e:	f107 0308 	add.w	r3, r7, #8
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	601a      	str	r2, [r3, #0]
 800b8a6:	605a      	str	r2, [r3, #4]
 800b8a8:	609a      	str	r2, [r3, #8]
 800b8aa:	60da      	str	r2, [r3, #12]
 800b8ac:	611a      	str	r2, [r3, #16]
            void *pData_orig = field->pData;
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	69db      	ldr	r3, [r3, #28]
 800b8b2:	61fb      	str	r3, [r7, #28]
            for (i = 0; i < count; i++)
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b8b8:	e026      	b.n	800b908 <encode_array+0x108>
            {
                if (!pb_enc_varint(&sizestream, field))
 800b8ba:	f107 0308 	add.w	r3, r7, #8
 800b8be:	6839      	ldr	r1, [r7, #0]
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f000 fdef 	bl	800c4a4 <pb_enc_varint>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	f083 0301 	eor.w	r3, r3, #1
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d010      	beq.n	800b8f4 <encode_array+0xf4>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	691b      	ldr	r3, [r3, #16]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d002      	beq.n	800b8e0 <encode_array+0xe0>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	691b      	ldr	r3, [r3, #16]
 800b8de:	e005      	b.n	800b8ec <encode_array+0xec>
 800b8e0:	69bb      	ldr	r3, [r7, #24]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d001      	beq.n	800b8ea <encode_array+0xea>
 800b8e6:	69bb      	ldr	r3, [r7, #24]
 800b8e8:	e000      	b.n	800b8ec <encode_array+0xec>
 800b8ea:	4b6e      	ldr	r3, [pc, #440]	; (800baa4 <encode_array+0x2a4>)
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	6113      	str	r3, [r2, #16]
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	e0d1      	b.n	800ba98 <encode_array+0x298>
                field->pData = (char*)field->pData + field->data_size;
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	69db      	ldr	r3, [r3, #28]
 800b8f8:	683a      	ldr	r2, [r7, #0]
 800b8fa:	8a52      	ldrh	r2, [r2, #18]
 800b8fc:	441a      	add	r2, r3
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	61da      	str	r2, [r3, #28]
            for (i = 0; i < count; i++)
 800b902:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b904:	3301      	adds	r3, #1
 800b906:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b908:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b90a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d3d4      	bcc.n	800b8ba <encode_array+0xba>
            }
            field->pData = pData_orig;
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	69fa      	ldr	r2, [r7, #28]
 800b914:	61da      	str	r2, [r3, #28]
            size = sizestream.bytes_written;
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800b91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91c:	2200      	movs	r2, #0
 800b91e:	461c      	mov	r4, r3
 800b920:	4615      	mov	r5, r2
 800b922:	4622      	mov	r2, r4
 800b924:	462b      	mov	r3, r5
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 fbf7 	bl	800c11a <pb_encode_varint>
 800b92c:	4603      	mov	r3, r0
 800b92e:	f083 0301 	eor.w	r3, r3, #1
 800b932:	b2db      	uxtb	r3, r3
 800b934:	2b00      	cmp	r3, #0
 800b936:	d001      	beq.n	800b93c <encode_array+0x13c>
            return false;
 800b938:	2300      	movs	r3, #0
 800b93a:	e0ad      	b.n	800ba98 <encode_array+0x298>
        
        if (stream->callback == NULL)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d106      	bne.n	800b952 <encode_array+0x152>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 800b944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b946:	2100      	movs	r1, #0
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f7ff feeb 	bl	800b724 <pb_write>
 800b94e:	4603      	mov	r3, r0
 800b950:	e0a2      	b.n	800ba98 <encode_array+0x298>
        
        /* Write the data */
        for (i = 0; i < count; i++)
 800b952:	2300      	movs	r3, #0
 800b954:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b956:	e02d      	b.n	800b9b4 <encode_array+0x1b4>
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	7d9b      	ldrb	r3, [r3, #22]
 800b95c:	f003 030f 	and.w	r3, r3, #15
 800b960:	2b04      	cmp	r3, #4
 800b962:	d005      	beq.n	800b970 <encode_array+0x170>
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	7d9b      	ldrb	r3, [r3, #22]
 800b968:	f003 030f 	and.w	r3, r3, #15
 800b96c:	2b05      	cmp	r3, #5
 800b96e:	d10b      	bne.n	800b988 <encode_array+0x188>
            {
                if (!pb_enc_fixed(stream, field))
 800b970:	6839      	ldr	r1, [r7, #0]
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f000 fe58 	bl	800c628 <pb_enc_fixed>
 800b978:	4603      	mov	r3, r0
 800b97a:	f083 0301 	eor.w	r3, r3, #1
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	2b00      	cmp	r3, #0
 800b982:	d00d      	beq.n	800b9a0 <encode_array+0x1a0>
                    return false;
 800b984:	2300      	movs	r3, #0
 800b986:	e087      	b.n	800ba98 <encode_array+0x298>
            }
            else
            {
                if (!pb_enc_varint(stream, field))
 800b988:	6839      	ldr	r1, [r7, #0]
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 fd8a 	bl	800c4a4 <pb_enc_varint>
 800b990:	4603      	mov	r3, r0
 800b992:	f083 0301 	eor.w	r3, r3, #1
 800b996:	b2db      	uxtb	r3, r3
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d001      	beq.n	800b9a0 <encode_array+0x1a0>
                    return false;
 800b99c:	2300      	movs	r3, #0
 800b99e:	e07b      	b.n	800ba98 <encode_array+0x298>
            }

            field->pData = (char*)field->pData + field->data_size;
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	69db      	ldr	r3, [r3, #28]
 800b9a4:	683a      	ldr	r2, [r7, #0]
 800b9a6:	8a52      	ldrh	r2, [r2, #18]
 800b9a8:	441a      	add	r2, r3
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 800b9ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b9b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b9b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d3cd      	bcc.n	800b958 <encode_array+0x158>
 800b9bc:	e06b      	b.n	800ba96 <encode_array+0x296>
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 800b9be:	2300      	movs	r3, #0
 800b9c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b9c2:	e064      	b.n	800ba8e <encode_array+0x28e>
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	7d9b      	ldrb	r3, [r3, #22]
 800b9c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b9cc:	2b80      	cmp	r3, #128	; 0x80
 800b9ce:	d147      	bne.n	800ba60 <encode_array+0x260>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	7d9b      	ldrb	r3, [r3, #22]
 800b9d4:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800b9d8:	2b07      	cmp	r3, #7
 800b9da:	d005      	beq.n	800b9e8 <encode_array+0x1e8>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	7d9b      	ldrb	r3, [r3, #22]
 800b9e0:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800b9e4:	2b06      	cmp	r3, #6
 800b9e6:	d13b      	bne.n	800ba60 <encode_array+0x260>
            {
                bool status;
                void *pData_orig = field->pData;
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	69db      	ldr	r3, [r3, #28]
 800b9ec:	623b      	str	r3, [r7, #32]
                field->pData = *(void* const*)field->pData;
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	69db      	ldr	r3, [r3, #28]
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	61da      	str	r2, [r3, #28]

                if (!field->pData)
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	69db      	ldr	r3, [r3, #28]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d11c      	bne.n	800ba3a <encode_array+0x23a>
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 800ba00:	6839      	ldr	r1, [r7, #0]
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 fc36 	bl	800c274 <pb_encode_tag_for_field>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d00b      	beq.n	800ba26 <encode_array+0x226>
                             pb_encode_varint(stream, 0);
 800ba0e:	f04f 0200 	mov.w	r2, #0
 800ba12:	f04f 0300 	mov.w	r3, #0
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 fb7f 	bl	800c11a <pb_encode_varint>
 800ba1c:	4603      	mov	r3, r0
                    status = pb_encode_tag_for_field(stream, field) &&
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d001      	beq.n	800ba26 <encode_array+0x226>
 800ba22:	2301      	movs	r3, #1
 800ba24:	e000      	b.n	800ba28 <encode_array+0x228>
 800ba26:	2300      	movs	r3, #0
 800ba28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ba2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba30:	f003 0301 	and.w	r3, r3, #1
 800ba34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ba38:	e006      	b.n	800ba48 <encode_array+0x248>
                }
                else
                {
                    status = encode_basic_field(stream, field);
 800ba3a:	6839      	ldr	r1, [r7, #0]
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 f951 	bl	800bce4 <encode_basic_field>
 800ba42:	4603      	mov	r3, r0
 800ba44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }

                field->pData = pData_orig;
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	6a3a      	ldr	r2, [r7, #32]
 800ba4c:	61da      	str	r2, [r3, #28]

                if (!status)
 800ba4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba52:	f083 0301 	eor.w	r3, r3, #1
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d00d      	beq.n	800ba78 <encode_array+0x278>
                    return false;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	e01b      	b.n	800ba98 <encode_array+0x298>
            }
            else
            {
                if (!encode_basic_field(stream, field))
 800ba60:	6839      	ldr	r1, [r7, #0]
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 f93e 	bl	800bce4 <encode_basic_field>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	f083 0301 	eor.w	r3, r3, #1
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d002      	beq.n	800ba7a <encode_array+0x27a>
                    return false;
 800ba74:	2300      	movs	r3, #0
 800ba76:	e00f      	b.n	800ba98 <encode_array+0x298>
            {
 800ba78:	bf00      	nop
            }
            field->pData = (char*)field->pData + field->data_size;
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	69db      	ldr	r3, [r3, #28]
 800ba7e:	683a      	ldr	r2, [r7, #0]
 800ba80:	8a52      	ldrh	r2, [r2, #18]
 800ba82:	441a      	add	r2, r3
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 800ba88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ba8e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ba90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d396      	bcc.n	800b9c4 <encode_array+0x1c4>
        }
    }
    
    return true;
 800ba96:	2301      	movs	r3, #1
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3730      	adds	r7, #48	; 0x30
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bdb0      	pop	{r4, r5, r7, pc}
 800baa0:	0800ccfc 	.word	0x0800ccfc
 800baa4:	0800cd14 	.word	0x0800cd14

0800baa8 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b092      	sub	sp, #72	; 0x48
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
    pb_type_t type = field->type;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	7d9b      	ldrb	r3, [r3, #22]
 800bab4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800bab8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800babc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f040 80c9 	bne.w	800bc58 <pb_check_proto3_default_value+0x1b0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 800bac6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800baca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d101      	bne.n	800bad6 <pb_check_proto3_default_value+0x2e>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
 800bad2:	2300      	movs	r3, #0
 800bad4:	e100      	b.n	800bcd8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 800bad6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800bada:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bade:	2b20      	cmp	r3, #32
 800bae0:	d108      	bne.n	800baf4 <pb_check_proto3_default_value+0x4c>
        {
            /* Repeated fields inside proto3 submessage: present if count != 0 */
            return *(const pb_size_t*)field->pSize == 0;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6a1b      	ldr	r3, [r3, #32]
 800bae6:	881b      	ldrh	r3, [r3, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	bf0c      	ite	eq
 800baec:	2301      	moveq	r3, #1
 800baee:	2300      	movne	r3, #0
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	e0f1      	b.n	800bcd8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800baf4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800baf8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bafc:	2b30      	cmp	r3, #48	; 0x30
 800bafe:	d108      	bne.n	800bb12 <pb_check_proto3_default_value+0x6a>
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6a1b      	ldr	r3, [r3, #32]
 800bb04:	881b      	ldrh	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	bf0c      	ite	eq
 800bb0a:	2301      	moveq	r3, #1
 800bb0c:	2300      	movne	r3, #0
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	e0e2      	b.n	800bcd8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 800bb12:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800bb16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bb1a:	2b10      	cmp	r3, #16
 800bb1c:	d115      	bne.n	800bb4a <pb_check_proto3_default_value+0xa2>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6a1b      	ldr	r3, [r3, #32]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d011      	beq.n	800bb4a <pb_check_proto3_default_value+0xa2>
        {
            /* Proto2 optional fields inside proto3 message, or proto3
             * submessage fields. */
            return safe_read_bool(field->pSize) == false;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a1b      	ldr	r3, [r3, #32]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7ff fe4a 	bl	800b7c4 <safe_read_bool>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	bf14      	ite	ne
 800bb36:	2301      	movne	r3, #1
 800bb38:	2300      	moveq	r3, #0
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	f083 0301 	eor.w	r3, r3, #1
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	f003 0301 	and.w	r3, r3, #1
 800bb46:	b2db      	uxtb	r3, r3
 800bb48:	e0c6      	b.n	800bcd8 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->default_value)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	689b      	ldr	r3, [r3, #8]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d001      	beq.n	800bb58 <pb_check_proto3_default_value+0xb0>
            /* Proto3 messages do not have default values, but proto2 messages
             * can contain optional fields without has_fields (generator option 'proto3').
             * In this case they must always be encoded, to make sure that the
             * non-zero default value is overwritten.
             */
            return false;
 800bb54:	2300      	movs	r3, #0
 800bb56:	e0bf      	b.n	800bcd8 <pb_check_proto3_default_value+0x230>
        }

        /* Rest is proto3 singular fields */
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 800bb58:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800bb5c:	f003 030f 	and.w	r3, r3, #15
 800bb60:	2b05      	cmp	r3, #5
 800bb62:	d81c      	bhi.n	800bb9e <pb_check_proto3_default_value+0xf6>
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	69db      	ldr	r3, [r3, #28]
 800bb68:	637b      	str	r3, [r7, #52]	; 0x34
            for (i = 0; i < field->data_size; i++)
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800bb70:	e00d      	b.n	800bb8e <pb_check_proto3_default_value+0xe6>
            {
                if (p[i] != 0)
 800bb72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800bb76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb78:	4413      	add	r3, r2
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d001      	beq.n	800bb84 <pb_check_proto3_default_value+0xdc>
                {
                    return false;
 800bb80:	2300      	movs	r3, #0
 800bb82:	e0a9      	b.n	800bcd8 <pb_check_proto3_default_value+0x230>
            for (i = 0; i < field->data_size; i++)
 800bb84:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800bb88:	3301      	adds	r3, #1
 800bb8a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	8a5b      	ldrh	r3, [r3, #18]
 800bb92:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d3eb      	bcc.n	800bb72 <pb_check_proto3_default_value+0xca>
                }
            }

            return true;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e09c      	b.n	800bcd8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 800bb9e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800bba2:	f003 030f 	and.w	r3, r3, #15
 800bba6:	2b06      	cmp	r3, #6
 800bba8:	d10a      	bne.n	800bbc0 <pb_check_proto3_default_value+0x118>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	69db      	ldr	r3, [r3, #28]
 800bbae:	63bb      	str	r3, [r7, #56]	; 0x38
            return bytes->size == 0;
 800bbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb2:	881b      	ldrh	r3, [r3, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	bf0c      	ite	eq
 800bbb8:	2301      	moveq	r3, #1
 800bbba:	2300      	movne	r3, #0
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	e08b      	b.n	800bcd8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 800bbc0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800bbc4:	f003 030f 	and.w	r3, r3, #15
 800bbc8:	2b07      	cmp	r3, #7
 800bbca:	d108      	bne.n	800bbde <pb_check_proto3_default_value+0x136>
        {
            return *(const char*)field->pData == '\0';
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	69db      	ldr	r3, [r3, #28]
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	bf0c      	ite	eq
 800bbd6:	2301      	moveq	r3, #1
 800bbd8:	2300      	movne	r3, #0
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	e07c      	b.n	800bcd8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 800bbde:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800bbe2:	f003 030f 	and.w	r3, r3, #15
 800bbe6:	2b0b      	cmp	r3, #11
 800bbe8:	d107      	bne.n	800bbfa <pb_check_proto3_default_value+0x152>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	8a5b      	ldrh	r3, [r3, #18]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	bf0c      	ite	eq
 800bbf2:	2301      	moveq	r3, #1
 800bbf4:	2300      	movne	r3, #0
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	e06e      	b.n	800bcd8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE_IS_SUBMSG(type))
 800bbfa:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800bbfe:	f003 030f 	and.w	r3, r3, #15
 800bc02:	2b08      	cmp	r3, #8
 800bc04:	d005      	beq.n	800bc12 <pb_check_proto3_default_value+0x16a>
 800bc06:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800bc0a:	f003 030f 	and.w	r3, r3, #15
 800bc0e:	2b09      	cmp	r3, #9
 800bc10:	d161      	bne.n	800bcd6 <pb_check_proto3_default_value+0x22e>
             * because the C struct may contain padding bytes that must
             * be skipped. Note that usually proto3 submessages have
             * a separate has_field that is checked earlier in this if.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	69da      	ldr	r2, [r3, #28]
 800bc1a:	f107 030c 	add.w	r3, r7, #12
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fd fe37 	bl	8009892 <pb_field_iter_begin>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d014      	beq.n	800bc54 <pb_check_proto3_default_value+0x1ac>
            {
                do
                {
                    if (!pb_check_proto3_default_value(&iter))
 800bc2a:	f107 030c 	add.w	r3, r7, #12
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7ff ff3a 	bl	800baa8 <pb_check_proto3_default_value>
 800bc34:	4603      	mov	r3, r0
 800bc36:	f083 0301 	eor.w	r3, r3, #1
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d001      	beq.n	800bc44 <pb_check_proto3_default_value+0x19c>
                    {
                        return false;
 800bc40:	2300      	movs	r3, #0
 800bc42:	e049      	b.n	800bcd8 <pb_check_proto3_default_value+0x230>
                    }
                } while (pb_field_iter_next(&iter));
 800bc44:	f107 030c 	add.w	r3, r7, #12
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7fd fe6b 	bl	8009924 <pb_field_iter_next>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d1ea      	bne.n	800bc2a <pb_check_proto3_default_value+0x182>
            }
            return true;
 800bc54:	2301      	movs	r3, #1
 800bc56:	e03f      	b.n	800bcd8 <pb_check_proto3_default_value+0x230>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 800bc58:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800bc5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bc60:	2b80      	cmp	r3, #128	; 0x80
 800bc62:	d107      	bne.n	800bc74 <pb_check_proto3_default_value+0x1cc>
    {
        return field->pData == NULL;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	69db      	ldr	r3, [r3, #28]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	bf0c      	ite	eq
 800bc6c:	2301      	moveq	r3, #1
 800bc6e:	2300      	movne	r3, #0
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	e031      	b.n	800bcd8 <pb_check_proto3_default_value+0x230>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
 800bc74:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800bc78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bc7c:	2b40      	cmp	r3, #64	; 0x40
 800bc7e:	d12a      	bne.n	800bcd6 <pb_check_proto3_default_value+0x22e>
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 800bc80:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800bc84:	f003 030f 	and.w	r3, r3, #15
 800bc88:	2b0a      	cmp	r3, #10
 800bc8a:	d10a      	bne.n	800bca2 <pb_check_proto3_default_value+0x1fa>
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	69db      	ldr	r3, [r3, #28]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	63fb      	str	r3, [r7, #60]	; 0x3c
            return extension == NULL;
 800bc94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	bf0c      	ite	eq
 800bc9a:	2301      	moveq	r3, #1
 800bc9c:	2300      	movne	r3, #0
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	e01a      	b.n	800bcd8 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->field_callback == pb_default_field_callback)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	4a0d      	ldr	r2, [pc, #52]	; (800bce0 <pb_check_proto3_default_value+0x238>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d10a      	bne.n	800bcc4 <pb_check_proto3_default_value+0x21c>
        {
            pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	69db      	ldr	r3, [r3, #28]
 800bcb2:	643b      	str	r3, [r7, #64]	; 0x40
            return pCallback->funcs.encode == NULL;
 800bcb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	bf0c      	ite	eq
 800bcbc:	2301      	moveq	r3, #1
 800bcbe:	2300      	movne	r3, #0
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	e009      	b.n	800bcd8 <pb_check_proto3_default_value+0x230>
        }
        else
        {
            return field->descriptor->field_callback == NULL;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	68db      	ldr	r3, [r3, #12]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	bf0c      	ite	eq
 800bcce:	2301      	moveq	r3, #1
 800bcd0:	2300      	movne	r3, #0
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	e000      	b.n	800bcd8 <pb_check_proto3_default_value+0x230>
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
 800bcd6:	2300      	movs	r3, #0
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3748      	adds	r7, #72	; 0x48
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	08009ac7 	.word	0x08009ac7

0800bce4 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	6039      	str	r1, [r7, #0]
    if (!field->pData)
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	69db      	ldr	r3, [r3, #28]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d101      	bne.n	800bcfa <encode_basic_field+0x16>
    {
        /* Missing pointer field */
        return true;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	e061      	b.n	800bdbe <encode_basic_field+0xda>
    }

    if (!pb_encode_tag_for_field(stream, field))
 800bcfa:	6839      	ldr	r1, [r7, #0]
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f000 fab9 	bl	800c274 <pb_encode_tag_for_field>
 800bd02:	4603      	mov	r3, r0
 800bd04:	f083 0301 	eor.w	r3, r3, #1
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d001      	beq.n	800bd12 <encode_basic_field+0x2e>
        return false;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	e055      	b.n	800bdbe <encode_basic_field+0xda>

    switch (PB_LTYPE(field->type))
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	7d9b      	ldrb	r3, [r3, #22]
 800bd16:	f003 030f 	and.w	r3, r3, #15
 800bd1a:	2b0b      	cmp	r3, #11
 800bd1c:	d844      	bhi.n	800bda8 <encode_basic_field+0xc4>
 800bd1e:	a201      	add	r2, pc, #4	; (adr r2, 800bd24 <encode_basic_field+0x40>)
 800bd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd24:	0800bd55 	.word	0x0800bd55
 800bd28:	0800bd61 	.word	0x0800bd61
 800bd2c:	0800bd61 	.word	0x0800bd61
 800bd30:	0800bd61 	.word	0x0800bd61
 800bd34:	0800bd6d 	.word	0x0800bd6d
 800bd38:	0800bd6d 	.word	0x0800bd6d
 800bd3c:	0800bd79 	.word	0x0800bd79
 800bd40:	0800bd85 	.word	0x0800bd85
 800bd44:	0800bd91 	.word	0x0800bd91
 800bd48:	0800bd91 	.word	0x0800bd91
 800bd4c:	0800bda9 	.word	0x0800bda9
 800bd50:	0800bd9d 	.word	0x0800bd9d
    {
        case PB_LTYPE_BOOL:
            return pb_enc_bool(stream, field);
 800bd54:	6839      	ldr	r1, [r7, #0]
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 fb8a 	bl	800c470 <pb_enc_bool>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	e02e      	b.n	800bdbe <encode_basic_field+0xda>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_enc_varint(stream, field);
 800bd60:	6839      	ldr	r1, [r7, #0]
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 fb9e 	bl	800c4a4 <pb_enc_varint>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	e028      	b.n	800bdbe <encode_basic_field+0xda>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_enc_fixed(stream, field);
 800bd6c:	6839      	ldr	r1, [r7, #0]
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 fc5a 	bl	800c628 <pb_enc_fixed>
 800bd74:	4603      	mov	r3, r0
 800bd76:	e022      	b.n	800bdbe <encode_basic_field+0xda>

        case PB_LTYPE_BYTES:
            return pb_enc_bytes(stream, field);
 800bd78:	6839      	ldr	r1, [r7, #0]
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f000 fc82 	bl	800c684 <pb_enc_bytes>
 800bd80:	4603      	mov	r3, r0
 800bd82:	e01c      	b.n	800bdbe <encode_basic_field+0xda>

        case PB_LTYPE_STRING:
            return pb_enc_string(stream, field);
 800bd84:	6839      	ldr	r1, [r7, #0]
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 fcba 	bl	800c700 <pb_enc_string>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	e016      	b.n	800bdbe <encode_basic_field+0xda>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_enc_submessage(stream, field);
 800bd90:	6839      	ldr	r1, [r7, #0]
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 fd12 	bl	800c7bc <pb_enc_submessage>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	e010      	b.n	800bdbe <encode_basic_field+0xda>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_enc_fixed_length_bytes(stream, field);
 800bd9c:	6839      	ldr	r1, [r7, #0]
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 fd52 	bl	800c848 <pb_enc_fixed_length_bytes>
 800bda4:	4603      	mov	r3, r0
 800bda6:	e00a      	b.n	800bdbe <encode_basic_field+0xda>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	691b      	ldr	r3, [r3, #16]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d002      	beq.n	800bdb6 <encode_basic_field+0xd2>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	691b      	ldr	r3, [r3, #16]
 800bdb4:	e000      	b.n	800bdb8 <encode_basic_field+0xd4>
 800bdb6:	4b04      	ldr	r3, [pc, #16]	; (800bdc8 <encode_basic_field+0xe4>)
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	6113      	str	r3, [r2, #16]
 800bdbc:	2300      	movs	r3, #0
    }
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3708      	adds	r7, #8
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	0800cd1c 	.word	0x0800cd1c

0800bdcc <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	6039      	str	r1, [r7, #0]
    if (field->descriptor->field_callback != NULL)
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d018      	beq.n	800be12 <encode_callback_field+0x46>
    {
        if (!field->descriptor->field_callback(NULL, stream, field))
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	68db      	ldr	r3, [r3, #12]
 800bde6:	683a      	ldr	r2, [r7, #0]
 800bde8:	6879      	ldr	r1, [r7, #4]
 800bdea:	2000      	movs	r0, #0
 800bdec:	4798      	blx	r3
 800bdee:	4603      	mov	r3, r0
 800bdf0:	f083 0301 	eor.w	r3, r3, #1
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d00b      	beq.n	800be12 <encode_callback_field+0x46>
            PB_RETURN_ERROR(stream, "callback error");
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	691b      	ldr	r3, [r3, #16]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d002      	beq.n	800be08 <encode_callback_field+0x3c>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	691b      	ldr	r3, [r3, #16]
 800be06:	e000      	b.n	800be0a <encode_callback_field+0x3e>
 800be08:	4b04      	ldr	r3, [pc, #16]	; (800be1c <encode_callback_field+0x50>)
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	6113      	str	r3, [r2, #16]
 800be0e:	2300      	movs	r3, #0
 800be10:	e000      	b.n	800be14 <encode_callback_field+0x48>
    }
    return true;
 800be12:	2301      	movs	r3, #1
}
 800be14:	4618      	mov	r0, r3
 800be16:	3708      	adds	r7, #8
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	0800cd30 	.word	0x0800cd30

0800be20 <encode_field>:

/* Encode a single field of any callback, pointer or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
    /* Check field presence */
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	7d9b      	ldrb	r3, [r3, #22]
 800be2e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800be32:	2b30      	cmp	r3, #48	; 0x30
 800be34:	d108      	bne.n	800be48 <encode_field+0x28>
    {
        if (*(const pb_size_t*)field->pSize != field->tag)
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	6a1b      	ldr	r3, [r3, #32]
 800be3a:	881a      	ldrh	r2, [r3, #0]
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	8a1b      	ldrh	r3, [r3, #16]
 800be40:	429a      	cmp	r2, r3
 800be42:	d026      	beq.n	800be92 <encode_field+0x72>
        {
            /* Different type oneof field */
            return true;
 800be44:	2301      	movs	r3, #1
 800be46:	e059      	b.n	800befc <encode_field+0xdc>
        }
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	7d9b      	ldrb	r3, [r3, #22]
 800be4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800be50:	2b10      	cmp	r3, #16
 800be52:	d11e      	bne.n	800be92 <encode_field+0x72>
    {
        if (field->pSize)
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	6a1b      	ldr	r3, [r3, #32]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d00c      	beq.n	800be76 <encode_field+0x56>
        {
            if (safe_read_bool(field->pSize) == false)
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	6a1b      	ldr	r3, [r3, #32]
 800be60:	4618      	mov	r0, r3
 800be62:	f7ff fcaf 	bl	800b7c4 <safe_read_bool>
 800be66:	4603      	mov	r3, r0
 800be68:	f083 0301 	eor.w	r3, r3, #1
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d00f      	beq.n	800be92 <encode_field+0x72>
            {
                /* Missing optional field */
                return true;
 800be72:	2301      	movs	r3, #1
 800be74:	e042      	b.n	800befc <encode_field+0xdc>
            }
        }
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	7d9b      	ldrb	r3, [r3, #22]
 800be7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d107      	bne.n	800be92 <encode_field+0x72>
        {
            /* Proto3 singular field */
            if (pb_check_proto3_default_value(field))
 800be82:	6838      	ldr	r0, [r7, #0]
 800be84:	f7ff fe10 	bl	800baa8 <pb_check_proto3_default_value>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d001      	beq.n	800be92 <encode_field+0x72>
                return true;
 800be8e:	2301      	movs	r3, #1
 800be90:	e034      	b.n	800befc <encode_field+0xdc>
        }
    }

    if (!field->pData)
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	69db      	ldr	r3, [r3, #28]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d113      	bne.n	800bec2 <encode_field+0xa2>
    {
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	7d9b      	ldrb	r3, [r3, #22]
 800be9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d10b      	bne.n	800bebe <encode_field+0x9e>
            PB_RETURN_ERROR(stream, "missing required field");
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	691b      	ldr	r3, [r3, #16]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d002      	beq.n	800beb4 <encode_field+0x94>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	691b      	ldr	r3, [r3, #16]
 800beb2:	e000      	b.n	800beb6 <encode_field+0x96>
 800beb4:	4b13      	ldr	r3, [pc, #76]	; (800bf04 <encode_field+0xe4>)
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	6113      	str	r3, [r2, #16]
 800beba:	2300      	movs	r3, #0
 800bebc:	e01e      	b.n	800befc <encode_field+0xdc>

        /* Pointer field set to NULL */
        return true;
 800bebe:	2301      	movs	r3, #1
 800bec0:	e01c      	b.n	800befc <encode_field+0xdc>
    }

    /* Then encode field contents */
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	7d9b      	ldrb	r3, [r3, #22]
 800bec6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800beca:	2b40      	cmp	r3, #64	; 0x40
 800becc:	d105      	bne.n	800beda <encode_field+0xba>
    {
        return encode_callback_field(stream, field);
 800bece:	6839      	ldr	r1, [r7, #0]
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f7ff ff7b 	bl	800bdcc <encode_callback_field>
 800bed6:	4603      	mov	r3, r0
 800bed8:	e010      	b.n	800befc <encode_field+0xdc>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	7d9b      	ldrb	r3, [r3, #22]
 800bede:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bee2:	2b20      	cmp	r3, #32
 800bee4:	d105      	bne.n	800bef2 <encode_field+0xd2>
    {
        return encode_array(stream, field);
 800bee6:	6839      	ldr	r1, [r7, #0]
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f7ff fc89 	bl	800b800 <encode_array>
 800beee:	4603      	mov	r3, r0
 800bef0:	e004      	b.n	800befc <encode_field+0xdc>
    }
    else
    {
        return encode_basic_field(stream, field);
 800bef2:	6839      	ldr	r1, [r7, #0]
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f7ff fef5 	bl	800bce4 <encode_basic_field>
 800befa:	4603      	mov	r3, r0
    }
}
 800befc:	4618      	mov	r0, r3
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	0800cd40 	.word	0x0800cd40

0800bf08 <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *extension)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b08c      	sub	sp, #48	; 0x30
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension_const(&iter, extension))
 800bf12:	f107 0308 	add.w	r3, r7, #8
 800bf16:	6839      	ldr	r1, [r7, #0]
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7fd fdc2 	bl	8009aa2 <pb_field_iter_begin_extension_const>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	f083 0301 	eor.w	r3, r3, #1
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00b      	beq.n	800bf42 <default_extension_encoder+0x3a>
        PB_RETURN_ERROR(stream, "invalid extension");
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	691b      	ldr	r3, [r3, #16]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d002      	beq.n	800bf38 <default_extension_encoder+0x30>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	e000      	b.n	800bf3a <default_extension_encoder+0x32>
 800bf38:	4b07      	ldr	r3, [pc, #28]	; (800bf58 <default_extension_encoder+0x50>)
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	6113      	str	r3, [r2, #16]
 800bf3e:	2300      	movs	r3, #0
 800bf40:	e006      	b.n	800bf50 <default_extension_encoder+0x48>

    return encode_field(stream, &iter);
 800bf42:	f107 0308 	add.w	r3, r7, #8
 800bf46:	4619      	mov	r1, r3
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f7ff ff69 	bl	800be20 <encode_field>
 800bf4e:	4603      	mov	r3, r0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3730      	adds	r7, #48	; 0x30
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	0800cd58 	.word	0x0800cd58

0800bf5c <encode_extension_field>:


/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	69db      	ldr	r3, [r3, #28]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	60fb      	str	r3, [r7, #12]

    while (extension)
 800bf6e:	e01e      	b.n	800bfae <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d008      	beq.n	800bf8c <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	68f9      	ldr	r1, [r7, #12]
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	4798      	blx	r3
 800bf86:	4603      	mov	r3, r0
 800bf88:	72fb      	strb	r3, [r7, #11]
 800bf8a:	e005      	b.n	800bf98 <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 800bf8c:	68f9      	ldr	r1, [r7, #12]
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f7ff ffba 	bl	800bf08 <default_extension_encoder>
 800bf94:	4603      	mov	r3, r0
 800bf96:	72fb      	strb	r3, [r7, #11]

        if (!status)
 800bf98:	7afb      	ldrb	r3, [r7, #11]
 800bf9a:	f083 0301 	eor.w	r3, r3, #1
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d001      	beq.n	800bfa8 <encode_extension_field+0x4c>
            return false;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	e006      	b.n	800bfb6 <encode_extension_field+0x5a>
        
        extension = extension->next;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	689b      	ldr	r3, [r3, #8]
 800bfac:	60fb      	str	r3, [r7, #12]
    while (extension)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d1dd      	bne.n	800bf70 <encode_extension_field+0x14>
    }
    
    return true;
 800bfb4:	2301      	movs	r3, #1
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3710      	adds	r7, #16
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}

0800bfbe <pb_encode>:
/*********************
 * Encode all fields *
 *********************/

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 800bfbe:	b580      	push	{r7, lr}
 800bfc0:	b08e      	sub	sp, #56	; 0x38
 800bfc2:	af00      	add	r7, sp, #0
 800bfc4:	60f8      	str	r0, [r7, #12]
 800bfc6:	60b9      	str	r1, [r7, #8]
 800bfc8:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 800bfca:	f107 0310 	add.w	r3, r7, #16
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	68b9      	ldr	r1, [r7, #8]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7fd fd51 	bl	8009a7a <pb_field_iter_begin_const>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	f083 0301 	eor.w	r3, r3, #1
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d001      	beq.n	800bfe8 <pb_encode+0x2a>
        return true; /* Empty message type */
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	e02a      	b.n	800c03e <pb_encode+0x80>
    
    do {
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 800bfe8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bfec:	f003 030f 	and.w	r3, r3, #15
 800bff0:	2b0a      	cmp	r3, #10
 800bff2:	d10d      	bne.n	800c010 <pb_encode+0x52>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, &iter))
 800bff4:	f107 0310 	add.w	r3, r7, #16
 800bff8:	4619      	mov	r1, r3
 800bffa:	68f8      	ldr	r0, [r7, #12]
 800bffc:	f7ff ffae 	bl	800bf5c <encode_extension_field>
 800c000:	4603      	mov	r3, r0
 800c002:	f083 0301 	eor.w	r3, r3, #1
 800c006:	b2db      	uxtb	r3, r3
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00f      	beq.n	800c02c <pb_encode+0x6e>
                return false;
 800c00c:	2300      	movs	r3, #0
 800c00e:	e016      	b.n	800c03e <pb_encode+0x80>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, &iter))
 800c010:	f107 0310 	add.w	r3, r7, #16
 800c014:	4619      	mov	r1, r3
 800c016:	68f8      	ldr	r0, [r7, #12]
 800c018:	f7ff ff02 	bl	800be20 <encode_field>
 800c01c:	4603      	mov	r3, r0
 800c01e:	f083 0301 	eor.w	r3, r3, #1
 800c022:	b2db      	uxtb	r3, r3
 800c024:	2b00      	cmp	r3, #0
 800c026:	d001      	beq.n	800c02c <pb_encode+0x6e>
                return false;
 800c028:	2300      	movs	r3, #0
 800c02a:	e008      	b.n	800c03e <pb_encode+0x80>
        }
    } while (pb_field_iter_next(&iter));
 800c02c:	f107 0310 	add.w	r3, r7, #16
 800c030:	4618      	mov	r0, r3
 800c032:	f7fd fc77 	bl	8009924 <pb_field_iter_next>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d1d5      	bne.n	800bfe8 <pb_encode+0x2a>
    
    return true;
 800c03c:	2301      	movs	r3, #1
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3738      	adds	r7, #56	; 0x38
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <pb_encode_varint_32>:
 * Helper functions *
 ********************/

/* This function avoids 64-bit shifts as they are quite slow on many platforms. */
static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
{
 800c046:	b580      	push	{r7, lr}
 800c048:	b088      	sub	sp, #32
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	60f8      	str	r0, [r7, #12]
 800c04e:	60b9      	str	r1, [r7, #8]
 800c050:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 800c052:	2300      	movs	r3, #0
 800c054:	61fb      	str	r3, [r7, #28]
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c05e:	76fb      	strb	r3, [r7, #27]
    low >>= 7;
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	09db      	lsrs	r3, r3, #7
 800c064:	60bb      	str	r3, [r7, #8]

    while (i < 4 && (low != 0 || high != 0))
 800c066:	e013      	b.n	800c090 <pb_encode_varint_32+0x4a>
    {
        byte |= 0x80;
 800c068:	7efb      	ldrb	r3, [r7, #27]
 800c06a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c06e:	76fb      	strb	r3, [r7, #27]
        buffer[i++] = byte;
 800c070:	69fb      	ldr	r3, [r7, #28]
 800c072:	1c5a      	adds	r2, r3, #1
 800c074:	61fa      	str	r2, [r7, #28]
 800c076:	3320      	adds	r3, #32
 800c078:	443b      	add	r3, r7
 800c07a:	7efa      	ldrb	r2, [r7, #27]
 800c07c:	f803 2c10 	strb.w	r2, [r3, #-16]
        byte = (pb_byte_t)(low & 0x7F);
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	b2db      	uxtb	r3, r3
 800c084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c088:	76fb      	strb	r3, [r7, #27]
        low >>= 7;
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	09db      	lsrs	r3, r3, #7
 800c08e:	60bb      	str	r3, [r7, #8]
    while (i < 4 && (low != 0 || high != 0))
 800c090:	69fb      	ldr	r3, [r7, #28]
 800c092:	2b03      	cmp	r3, #3
 800c094:	d805      	bhi.n	800c0a2 <pb_encode_varint_32+0x5c>
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d1e5      	bne.n	800c068 <pb_encode_varint_32+0x22>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d1e2      	bne.n	800c068 <pb_encode_varint_32+0x22>
    }

    if (high)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d024      	beq.n	800c0f2 <pb_encode_varint_32+0xac>
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	011b      	lsls	r3, r3, #4
 800c0ae:	b2db      	uxtb	r3, r3
 800c0b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c0b4:	b2da      	uxtb	r2, r3
 800c0b6:	7efb      	ldrb	r3, [r7, #27]
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	76fb      	strb	r3, [r7, #27]
        high >>= 3;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	08db      	lsrs	r3, r3, #3
 800c0c0:	607b      	str	r3, [r7, #4]

        while (high)
 800c0c2:	e013      	b.n	800c0ec <pb_encode_varint_32+0xa6>
        {
            byte |= 0x80;
 800c0c4:	7efb      	ldrb	r3, [r7, #27]
 800c0c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c0ca:	76fb      	strb	r3, [r7, #27]
            buffer[i++] = byte;
 800c0cc:	69fb      	ldr	r3, [r7, #28]
 800c0ce:	1c5a      	adds	r2, r3, #1
 800c0d0:	61fa      	str	r2, [r7, #28]
 800c0d2:	3320      	adds	r3, #32
 800c0d4:	443b      	add	r3, r7
 800c0d6:	7efa      	ldrb	r2, [r7, #27]
 800c0d8:	f803 2c10 	strb.w	r2, [r3, #-16]
            byte = (pb_byte_t)(high & 0x7F);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0e4:	76fb      	strb	r3, [r7, #27]
            high >>= 7;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	09db      	lsrs	r3, r3, #7
 800c0ea:	607b      	str	r3, [r7, #4]
        while (high)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d1e8      	bne.n	800c0c4 <pb_encode_varint_32+0x7e>
        }
    }

    buffer[i++] = byte;
 800c0f2:	69fb      	ldr	r3, [r7, #28]
 800c0f4:	1c5a      	adds	r2, r3, #1
 800c0f6:	61fa      	str	r2, [r7, #28]
 800c0f8:	3320      	adds	r3, #32
 800c0fa:	443b      	add	r3, r7
 800c0fc:	7efa      	ldrb	r2, [r7, #27]
 800c0fe:	f803 2c10 	strb.w	r2, [r3, #-16]

    return pb_write(stream, buffer, i);
 800c102:	f107 0310 	add.w	r3, r7, #16
 800c106:	69fa      	ldr	r2, [r7, #28]
 800c108:	4619      	mov	r1, r3
 800c10a:	68f8      	ldr	r0, [r7, #12]
 800c10c:	f7ff fb0a 	bl	800b724 <pb_write>
 800c110:	4603      	mov	r3, r0
}
 800c112:	4618      	mov	r0, r3
 800c114:	3720      	adds	r7, #32
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}

0800c11a <pb_encode_varint>:

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 800c11a:	b590      	push	{r4, r7, lr}
 800c11c:	b087      	sub	sp, #28
 800c11e:	af00      	add	r7, sp, #0
 800c120:	60f8      	str	r0, [r7, #12]
 800c122:	e9c7 2300 	strd	r2, r3, [r7]
    if (value <= 0x7F)
 800c126:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c12a:	2a80      	cmp	r2, #128	; 0x80
 800c12c:	f173 0300 	sbcs.w	r3, r3, #0
 800c130:	d20a      	bcs.n	800c148 <pb_encode_varint+0x2e>
    {
        /* Fast path: single byte */
        pb_byte_t byte = (pb_byte_t)value;
 800c132:	783b      	ldrb	r3, [r7, #0]
 800c134:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &byte, 1);
 800c136:	f107 0317 	add.w	r3, r7, #23
 800c13a:	2201      	movs	r2, #1
 800c13c:	4619      	mov	r1, r3
 800c13e:	68f8      	ldr	r0, [r7, #12]
 800c140:	f7ff faf0 	bl	800b724 <pb_write>
 800c144:	4603      	mov	r3, r0
 800c146:	e00f      	b.n	800c168 <pb_encode_varint+0x4e>
    else
    {
#ifdef PB_WITHOUT_64BIT
        return pb_encode_varint_32(stream, value, 0);
#else
        return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 800c148:	683c      	ldr	r4, [r7, #0]
 800c14a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c14e:	f04f 0200 	mov.w	r2, #0
 800c152:	f04f 0300 	mov.w	r3, #0
 800c156:	000a      	movs	r2, r1
 800c158:	2300      	movs	r3, #0
 800c15a:	4613      	mov	r3, r2
 800c15c:	461a      	mov	r2, r3
 800c15e:	4621      	mov	r1, r4
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f7ff ff70 	bl	800c046 <pb_encode_varint_32>
 800c166:	4603      	mov	r3, r0
#endif
    }
}
 800c168:	4618      	mov	r0, r3
 800c16a:	371c      	adds	r7, #28
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd90      	pop	{r4, r7, pc}

0800c170 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 800c170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c174:	b08a      	sub	sp, #40	; 0x28
 800c176:	af00      	add	r7, sp, #0
 800c178:	6178      	str	r0, [r7, #20]
 800c17a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    pb_uint64_t zigzagged;
    pb_uint64_t mask = ((pb_uint64_t)-1) >> 1; /* Satisfy clang -fsanitize=integer */
 800c17e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c182:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c186:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (value < 0)
 800c18a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	da15      	bge.n	800c1be <pb_encode_svarint+0x4e>
        zigzagged = ~(((pb_uint64_t)value & mask) << 1);
 800c192:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c196:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c19a:	ea00 0402 	and.w	r4, r0, r2
 800c19e:	ea01 0503 	and.w	r5, r1, r3
 800c1a2:	1923      	adds	r3, r4, r4
 800c1a4:	603b      	str	r3, [r7, #0]
 800c1a6:	eb45 0305 	adc.w	r3, r5, r5
 800c1aa:	607b      	str	r3, [r7, #4]
 800c1ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1b0:	ea6f 0a02 	mvn.w	sl, r2
 800c1b4:	ea6f 0b03 	mvn.w	fp, r3
 800c1b8:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 800c1bc:	e007      	b.n	800c1ce <pb_encode_svarint+0x5e>
    else
        zigzagged = (pb_uint64_t)value << 1;
 800c1be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c1c2:	eb12 0802 	adds.w	r8, r2, r2
 800c1c6:	eb43 0903 	adc.w	r9, r3, r3
 800c1ca:	e9c7 8908 	strd	r8, r9, [r7, #32]
    
    return pb_encode_varint(stream, zigzagged);
 800c1ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c1d2:	6978      	ldr	r0, [r7, #20]
 800c1d4:	f7ff ffa1 	bl	800c11a <pb_encode_varint>
 800c1d8:	4603      	mov	r3, r0
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3728      	adds	r7, #40	; 0x28
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c1e4 <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 4);
 800c1ee:	2204      	movs	r2, #4
 800c1f0:	6839      	ldr	r1, [r7, #0]
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f7ff fa96 	bl	800b724 <pb_write>
 800c1f8:	4603      	mov	r3, r0
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
    return pb_write(stream, bytes, 4);
#endif
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3708      	adds	r7, #8
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 800c202:	b580      	push	{r7, lr}
 800c204:	b082      	sub	sp, #8
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
 800c20a:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 8);
 800c20c:	2208      	movs	r2, #8
 800c20e:	6839      	ldr	r1, [r7, #0]
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f7ff fa87 	bl	800b724 <pb_write>
 800c216:	4603      	mov	r3, r0
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
    return pb_write(stream, bytes, 8);
#endif
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3708      	adds	r7, #8
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 800c220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c224:	b088      	sub	sp, #32
 800c226:	af00      	add	r7, sp, #0
 800c228:	6178      	str	r0, [r7, #20]
 800c22a:	460b      	mov	r3, r1
 800c22c:	60fa      	str	r2, [r7, #12]
 800c22e:	74fb      	strb	r3, [r7, #19]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2200      	movs	r2, #0
 800c234:	469a      	mov	sl, r3
 800c236:	4693      	mov	fp, r2
 800c238:	ea4f 755a 	mov.w	r5, sl, lsr #29
 800c23c:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 800c240:	7cfb      	ldrb	r3, [r7, #19]
 800c242:	2200      	movs	r2, #0
 800c244:	4698      	mov	r8, r3
 800c246:	4691      	mov	r9, r2
 800c248:	ea44 0308 	orr.w	r3, r4, r8
 800c24c:	603b      	str	r3, [r7, #0]
 800c24e:	ea45 0309 	orr.w	r3, r5, r9
 800c252:	607b      	str	r3, [r7, #4]
 800c254:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c258:	e9c7 3406 	strd	r3, r4, [r7, #24]
    return pb_encode_varint(stream, tag);
 800c25c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c260:	6978      	ldr	r0, [r7, #20]
 800c262:	f7ff ff5a 	bl	800c11a <pb_encode_varint>
 800c266:	4603      	mov	r3, r0
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3720      	adds	r7, #32
 800c26c:	46bd      	mov	sp, r7
 800c26e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800c274 <pb_encode_tag_for_field>:

bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b084      	sub	sp, #16
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	7d9b      	ldrb	r3, [r3, #22]
 800c282:	f003 030f 	and.w	r3, r3, #15
 800c286:	2b0b      	cmp	r3, #11
 800c288:	d826      	bhi.n	800c2d8 <pb_encode_tag_for_field+0x64>
 800c28a:	a201      	add	r2, pc, #4	; (adr r2, 800c290 <pb_encode_tag_for_field+0x1c>)
 800c28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c290:	0800c2c1 	.word	0x0800c2c1
 800c294:	0800c2c1 	.word	0x0800c2c1
 800c298:	0800c2c1 	.word	0x0800c2c1
 800c29c:	0800c2c1 	.word	0x0800c2c1
 800c2a0:	0800c2c7 	.word	0x0800c2c7
 800c2a4:	0800c2cd 	.word	0x0800c2cd
 800c2a8:	0800c2d3 	.word	0x0800c2d3
 800c2ac:	0800c2d3 	.word	0x0800c2d3
 800c2b0:	0800c2d3 	.word	0x0800c2d3
 800c2b4:	0800c2d3 	.word	0x0800c2d3
 800c2b8:	0800c2d9 	.word	0x0800c2d9
 800c2bc:	0800c2d3 	.word	0x0800c2d3
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	73fb      	strb	r3, [r7, #15]
            break;
 800c2c4:	e014      	b.n	800c2f0 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 800c2c6:	2305      	movs	r3, #5
 800c2c8:	73fb      	strb	r3, [r7, #15]
            break;
 800c2ca:	e011      	b.n	800c2f0 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	73fb      	strb	r3, [r7, #15]
            break;
 800c2d0:	e00e      	b.n	800c2f0 <pb_encode_tag_for_field+0x7c>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 800c2d2:	2302      	movs	r3, #2
 800c2d4:	73fb      	strb	r3, [r7, #15]
            break;
 800c2d6:	e00b      	b.n	800c2f0 <pb_encode_tag_for_field+0x7c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	691b      	ldr	r3, [r3, #16]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d002      	beq.n	800c2e6 <pb_encode_tag_for_field+0x72>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	691b      	ldr	r3, [r3, #16]
 800c2e4:	e000      	b.n	800c2e8 <pb_encode_tag_for_field+0x74>
 800c2e6:	4b09      	ldr	r3, [pc, #36]	; (800c30c <pb_encode_tag_for_field+0x98>)
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	6113      	str	r3, [r2, #16]
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	e008      	b.n	800c302 <pb_encode_tag_for_field+0x8e>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	8a1b      	ldrh	r3, [r3, #16]
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	7bfb      	ldrb	r3, [r7, #15]
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f7ff ff90 	bl	800c220 <pb_encode_tag>
 800c300:	4603      	mov	r3, r0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	0800cd1c 	.word	0x0800cd1c

0800c310 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 800c310:	b5b0      	push	{r4, r5, r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2200      	movs	r2, #0
 800c320:	461c      	mov	r4, r3
 800c322:	4615      	mov	r5, r2
 800c324:	4622      	mov	r2, r4
 800c326:	462b      	mov	r3, r5
 800c328:	68f8      	ldr	r0, [r7, #12]
 800c32a:	f7ff fef6 	bl	800c11a <pb_encode_varint>
 800c32e:	4603      	mov	r3, r0
 800c330:	f083 0301 	eor.w	r3, r3, #1
 800c334:	b2db      	uxtb	r3, r3
 800c336:	2b00      	cmp	r3, #0
 800c338:	d001      	beq.n	800c33e <pb_encode_string+0x2e>
        return false;
 800c33a:	2300      	movs	r3, #0
 800c33c:	e005      	b.n	800c34a <pb_encode_string+0x3a>
    
    return pb_write(stream, buffer, size);
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	68b9      	ldr	r1, [r7, #8]
 800c342:	68f8      	ldr	r0, [r7, #12]
 800c344:	f7ff f9ee 	bl	800b724 <pb_write>
 800c348:	4603      	mov	r3, r0
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3710      	adds	r7, #16
 800c34e:	46bd      	mov	sp, r7
 800c350:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c354 <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 800c354:	b5b0      	push	{r4, r5, r7, lr}
 800c356:	b08c      	sub	sp, #48	; 0x30
 800c358:	af00      	add	r7, sp, #0
 800c35a:	60f8      	str	r0, [r7, #12]
 800c35c:	60b9      	str	r1, [r7, #8]
 800c35e:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 800c360:	f107 0314 	add.w	r3, r7, #20
 800c364:	2200      	movs	r2, #0
 800c366:	601a      	str	r2, [r3, #0]
 800c368:	605a      	str	r2, [r3, #4]
 800c36a:	609a      	str	r2, [r3, #8]
 800c36c:	60da      	str	r2, [r3, #12]
 800c36e:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 800c370:	f107 0314 	add.w	r3, r7, #20
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	68b9      	ldr	r1, [r7, #8]
 800c378:	4618      	mov	r0, r3
 800c37a:	f7ff fe20 	bl	800bfbe <pb_encode>
 800c37e:	4603      	mov	r3, r0
 800c380:	f083 0301 	eor.w	r3, r3, #1
 800c384:	b2db      	uxtb	r3, r3
 800c386:	2b00      	cmp	r3, #0
 800c388:	d004      	beq.n	800c394 <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 800c38a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	611a      	str	r2, [r3, #16]
#endif
        return false;
 800c390:	2300      	movs	r3, #0
 800c392:	e065      	b.n	800c460 <pb_encode_submessage+0x10c>
    }
    
    size = substream.bytes_written;
 800c394:	6a3b      	ldr	r3, [r7, #32]
 800c396:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800c398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39a:	2200      	movs	r2, #0
 800c39c:	461c      	mov	r4, r3
 800c39e:	4615      	mov	r5, r2
 800c3a0:	4622      	mov	r2, r4
 800c3a2:	462b      	mov	r3, r5
 800c3a4:	68f8      	ldr	r0, [r7, #12]
 800c3a6:	f7ff feb8 	bl	800c11a <pb_encode_varint>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	f083 0301 	eor.w	r3, r3, #1
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d001      	beq.n	800c3ba <pb_encode_submessage+0x66>
        return false;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	e052      	b.n	800c460 <pb_encode_submessage+0x10c>
    
    if (stream->callback == NULL)
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d106      	bne.n	800c3d0 <pb_encode_submessage+0x7c>
        return pb_write(stream, NULL, size); /* Just sizing */
 800c3c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3c4:	2100      	movs	r1, #0
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	f7ff f9ac 	bl	800b724 <pb_write>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	e047      	b.n	800c460 <pb_encode_submessage+0x10c>
    
    if (stream->bytes_written + size > stream->max_size)
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	68da      	ldr	r2, [r3, #12]
 800c3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d6:	441a      	add	r2, r3
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	689b      	ldr	r3, [r3, #8]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d90b      	bls.n	800c3f8 <pb_encode_submessage+0xa4>
        PB_RETURN_ERROR(stream, "stream full");
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	691b      	ldr	r3, [r3, #16]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d002      	beq.n	800c3ee <pb_encode_submessage+0x9a>
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	691b      	ldr	r3, [r3, #16]
 800c3ec:	e000      	b.n	800c3f0 <pb_encode_submessage+0x9c>
 800c3ee:	4b1e      	ldr	r3, [pc, #120]	; (800c468 <pb_encode_submessage+0x114>)
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	6113      	str	r3, [r2, #16]
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	e033      	b.n	800c460 <pb_encode_submessage+0x10c>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 800c404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c406:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 800c408:	2300      	movs	r3, #0
 800c40a:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 800c40c:	2300      	movs	r3, #0
 800c40e:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 800c410:	f107 0314 	add.w	r3, r7, #20
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	68b9      	ldr	r1, [r7, #8]
 800c418:	4618      	mov	r0, r3
 800c41a:	f7ff fdd0 	bl	800bfbe <pb_encode>
 800c41e:	4603      	mov	r3, r0
 800c420:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    
    stream->bytes_written += substream.bytes_written;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	68da      	ldr	r2, [r3, #12]
 800c428:	6a3b      	ldr	r3, [r7, #32]
 800c42a:	441a      	add	r2, r3
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 800c430:	69ba      	ldr	r2, [r7, #24]
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 800c436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 800c43c:	6a3b      	ldr	r3, [r7, #32]
 800c43e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c440:	429a      	cmp	r2, r3
 800c442:	d00b      	beq.n	800c45c <pb_encode_submessage+0x108>
        PB_RETURN_ERROR(stream, "submsg size changed");
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	691b      	ldr	r3, [r3, #16]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d002      	beq.n	800c452 <pb_encode_submessage+0xfe>
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	691b      	ldr	r3, [r3, #16]
 800c450:	e000      	b.n	800c454 <pb_encode_submessage+0x100>
 800c452:	4b06      	ldr	r3, [pc, #24]	; (800c46c <pb_encode_submessage+0x118>)
 800c454:	68fa      	ldr	r2, [r7, #12]
 800c456:	6113      	str	r3, [r2, #16]
 800c458:	2300      	movs	r3, #0
 800c45a:	e001      	b.n	800c460 <pb_encode_submessage+0x10c>
    
    return status;
 800c45c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c460:	4618      	mov	r0, r3
 800c462:	3730      	adds	r7, #48	; 0x30
 800c464:	46bd      	mov	sp, r7
 800c466:	bdb0      	pop	{r4, r5, r7, pc}
 800c468:	0800cce4 	.word	0x0800cce4
 800c46c:	0800cd6c 	.word	0x0800cd6c

0800c470 <pb_enc_bool>:

/* Field encoders */

static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800c470:	b5b0      	push	{r4, r5, r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
    uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	69db      	ldr	r3, [r3, #28]
 800c47e:	4618      	mov	r0, r3
 800c480:	f7ff f9a0 	bl	800b7c4 <safe_read_bool>
 800c484:	4603      	mov	r3, r0
 800c486:	60fb      	str	r3, [r7, #12]
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2200      	movs	r2, #0
 800c48c:	461c      	mov	r4, r3
 800c48e:	4615      	mov	r5, r2
 800c490:	4622      	mov	r2, r4
 800c492:	462b      	mov	r3, r5
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f7ff fe40 	bl	800c11a <pb_encode_varint>
 800c49a:	4603      	mov	r3, r0
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3710      	adds	r7, #16
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bdb0      	pop	{r4, r5, r7, pc}

0800c4a4 <pb_enc_varint>:

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800c4a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c4a8:	b08c      	sub	sp, #48	; 0x30
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	61f8      	str	r0, [r7, #28]
 800c4ae:	61b9      	str	r1, [r7, #24]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	7d9b      	ldrb	r3, [r3, #22]
 800c4b4:	f003 030f 	and.w	r3, r3, #15
 800c4b8:	2b02      	cmp	r3, #2
 800c4ba:	d152      	bne.n	800c562 <pb_enc_varint+0xbe>
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;
 800c4bc:	f04f 0200 	mov.w	r2, #0
 800c4c0:	f04f 0300 	mov.w	r3, #0
 800c4c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

        if (field->data_size == sizeof(uint_least8_t))
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	8a5b      	ldrh	r3, [r3, #18]
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d10b      	bne.n	800c4e8 <pb_enc_varint+0x44>
            value = *(const uint_least8_t*)field->pData;
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	69db      	ldr	r3, [r3, #28]
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	2200      	movs	r2, #0
 800c4da:	613b      	str	r3, [r7, #16]
 800c4dc:	617a      	str	r2, [r7, #20]
 800c4de:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c4e2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 800c4e6:	e035      	b.n	800c554 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint_least16_t))
 800c4e8:	69bb      	ldr	r3, [r7, #24]
 800c4ea:	8a5b      	ldrh	r3, [r3, #18]
 800c4ec:	2b02      	cmp	r3, #2
 800c4ee:	d10b      	bne.n	800c508 <pb_enc_varint+0x64>
            value = *(const uint_least16_t*)field->pData;
 800c4f0:	69bb      	ldr	r3, [r7, #24]
 800c4f2:	69db      	ldr	r3, [r3, #28]
 800c4f4:	881b      	ldrh	r3, [r3, #0]
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	60bb      	str	r3, [r7, #8]
 800c4fc:	60fa      	str	r2, [r7, #12]
 800c4fe:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c502:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 800c506:	e025      	b.n	800c554 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint32_t))
 800c508:	69bb      	ldr	r3, [r7, #24]
 800c50a:	8a5b      	ldrh	r3, [r3, #18]
 800c50c:	2b04      	cmp	r3, #4
 800c50e:	d10a      	bne.n	800c526 <pb_enc_varint+0x82>
            value = *(const uint32_t*)field->pData;
 800c510:	69bb      	ldr	r3, [r7, #24]
 800c512:	69db      	ldr	r3, [r3, #28]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2200      	movs	r2, #0
 800c518:	603b      	str	r3, [r7, #0]
 800c51a:	607a      	str	r2, [r7, #4]
 800c51c:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c520:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 800c524:	e016      	b.n	800c554 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(pb_uint64_t))
 800c526:	69bb      	ldr	r3, [r7, #24]
 800c528:	8a5b      	ldrh	r3, [r3, #18]
 800c52a:	2b08      	cmp	r3, #8
 800c52c:	d106      	bne.n	800c53c <pb_enc_varint+0x98>
            value = *(const pb_uint64_t*)field->pData;
 800c52e:	69bb      	ldr	r3, [r7, #24]
 800c530:	69db      	ldr	r3, [r3, #28]
 800c532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c536:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800c53a:	e00b      	b.n	800c554 <pb_enc_varint+0xb0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800c53c:	69fb      	ldr	r3, [r7, #28]
 800c53e:	691b      	ldr	r3, [r3, #16]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d002      	beq.n	800c54a <pb_enc_varint+0xa6>
 800c544:	69fb      	ldr	r3, [r7, #28]
 800c546:	691b      	ldr	r3, [r3, #16]
 800c548:	e000      	b.n	800c54c <pb_enc_varint+0xa8>
 800c54a:	4b36      	ldr	r3, [pc, #216]	; (800c624 <pb_enc_varint+0x180>)
 800c54c:	69fa      	ldr	r2, [r7, #28]
 800c54e:	6113      	str	r3, [r2, #16]
 800c550:	2300      	movs	r3, #0
 800c552:	e061      	b.n	800c618 <pb_enc_varint+0x174>

        return pb_encode_varint(stream, value);
 800c554:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c558:	69f8      	ldr	r0, [r7, #28]
 800c55a:	f7ff fdde 	bl	800c11a <pb_encode_varint>
 800c55e:	4603      	mov	r3, r0
 800c560:	e05a      	b.n	800c618 <pb_enc_varint+0x174>
    }
    else
    {
        /* Perform signed integer extension */
        pb_int64_t value = 0;
 800c562:	f04f 0200 	mov.w	r2, #0
 800c566:	f04f 0300 	mov.w	r3, #0
 800c56a:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (field->data_size == sizeof(int_least8_t))
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	8a5b      	ldrh	r3, [r3, #18]
 800c572:	2b01      	cmp	r3, #1
 800c574:	d10a      	bne.n	800c58c <pb_enc_varint+0xe8>
            value = *(const int_least8_t*)field->pData;
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	69db      	ldr	r3, [r3, #28]
 800c57a:	f993 3000 	ldrsb.w	r3, [r3]
 800c57e:	b25b      	sxtb	r3, r3
 800c580:	17da      	asrs	r2, r3, #31
 800c582:	469a      	mov	sl, r3
 800c584:	4693      	mov	fp, r2
 800c586:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 800c58a:	e032      	b.n	800c5f2 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int_least16_t))
 800c58c:	69bb      	ldr	r3, [r7, #24]
 800c58e:	8a5b      	ldrh	r3, [r3, #18]
 800c590:	2b02      	cmp	r3, #2
 800c592:	d10a      	bne.n	800c5aa <pb_enc_varint+0x106>
            value = *(const int_least16_t*)field->pData;
 800c594:	69bb      	ldr	r3, [r7, #24]
 800c596:	69db      	ldr	r3, [r3, #28]
 800c598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c59c:	b21b      	sxth	r3, r3
 800c59e:	17da      	asrs	r2, r3, #31
 800c5a0:	4698      	mov	r8, r3
 800c5a2:	4691      	mov	r9, r2
 800c5a4:	e9c7 8908 	strd	r8, r9, [r7, #32]
 800c5a8:	e023      	b.n	800c5f2 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int32_t))
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	8a5b      	ldrh	r3, [r3, #18]
 800c5ae:	2b04      	cmp	r3, #4
 800c5b0:	d108      	bne.n	800c5c4 <pb_enc_varint+0x120>
            value = *(const int32_t*)field->pData;
 800c5b2:	69bb      	ldr	r3, [r7, #24]
 800c5b4:	69db      	ldr	r3, [r3, #28]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	17da      	asrs	r2, r3, #31
 800c5ba:	461c      	mov	r4, r3
 800c5bc:	4615      	mov	r5, r2
 800c5be:	e9c7 4508 	strd	r4, r5, [r7, #32]
 800c5c2:	e016      	b.n	800c5f2 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(pb_int64_t))
 800c5c4:	69bb      	ldr	r3, [r7, #24]
 800c5c6:	8a5b      	ldrh	r3, [r3, #18]
 800c5c8:	2b08      	cmp	r3, #8
 800c5ca:	d106      	bne.n	800c5da <pb_enc_varint+0x136>
            value = *(const pb_int64_t*)field->pData;
 800c5cc:	69bb      	ldr	r3, [r7, #24]
 800c5ce:	69db      	ldr	r3, [r3, #28]
 800c5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800c5d8:	e00b      	b.n	800c5f2 <pb_enc_varint+0x14e>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800c5da:	69fb      	ldr	r3, [r7, #28]
 800c5dc:	691b      	ldr	r3, [r3, #16]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d002      	beq.n	800c5e8 <pb_enc_varint+0x144>
 800c5e2:	69fb      	ldr	r3, [r7, #28]
 800c5e4:	691b      	ldr	r3, [r3, #16]
 800c5e6:	e000      	b.n	800c5ea <pb_enc_varint+0x146>
 800c5e8:	4b0e      	ldr	r3, [pc, #56]	; (800c624 <pb_enc_varint+0x180>)
 800c5ea:	69fa      	ldr	r2, [r7, #28]
 800c5ec:	6113      	str	r3, [r2, #16]
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	e012      	b.n	800c618 <pb_enc_varint+0x174>

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 800c5f2:	69bb      	ldr	r3, [r7, #24]
 800c5f4:	7d9b      	ldrb	r3, [r3, #22]
 800c5f6:	f003 030f 	and.w	r3, r3, #15
 800c5fa:	2b03      	cmp	r3, #3
 800c5fc:	d106      	bne.n	800c60c <pb_enc_varint+0x168>
            return pb_encode_svarint(stream, value);
 800c5fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c602:	69f8      	ldr	r0, [r7, #28]
 800c604:	f7ff fdb4 	bl	800c170 <pb_encode_svarint>
 800c608:	4603      	mov	r3, r0
 800c60a:	e005      	b.n	800c618 <pb_enc_varint+0x174>
#ifdef PB_WITHOUT_64BIT
        else if (value < 0)
            return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);
 800c60c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c610:	69f8      	ldr	r0, [r7, #28]
 800c612:	f7ff fd82 	bl	800c11a <pb_encode_varint>
 800c616:	4603      	mov	r3, r0

    }
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3730      	adds	r7, #48	; 0x30
 800c61c:	46bd      	mov	sp, r7
 800c61e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c622:	bf00      	nop
 800c624:	0800cd80 	.word	0x0800cd80

0800c628 <pb_enc_fixed>:

static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	6039      	str	r1, [r7, #0]
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	8a5b      	ldrh	r3, [r3, #18]
 800c636:	2b04      	cmp	r3, #4
 800c638:	d107      	bne.n	800c64a <pb_enc_fixed+0x22>
    {
        return pb_encode_fixed32(stream, field->pData);
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	69db      	ldr	r3, [r3, #28]
 800c63e:	4619      	mov	r1, r3
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f7ff fdcf 	bl	800c1e4 <pb_encode_fixed32>
 800c646:	4603      	mov	r3, r0
 800c648:	e016      	b.n	800c678 <pb_enc_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	8a5b      	ldrh	r3, [r3, #18]
 800c64e:	2b08      	cmp	r3, #8
 800c650:	d107      	bne.n	800c662 <pb_enc_fixed+0x3a>
    {
        return pb_encode_fixed64(stream, field->pData);
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	69db      	ldr	r3, [r3, #28]
 800c656:	4619      	mov	r1, r3
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f7ff fdd2 	bl	800c202 <pb_encode_fixed64>
 800c65e:	4603      	mov	r3, r0
 800c660:	e00a      	b.n	800c678 <pb_enc_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	691b      	ldr	r3, [r3, #16]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d002      	beq.n	800c670 <pb_enc_fixed+0x48>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	691b      	ldr	r3, [r3, #16]
 800c66e:	e000      	b.n	800c672 <pb_enc_fixed+0x4a>
 800c670:	4b03      	ldr	r3, [pc, #12]	; (800c680 <pb_enc_fixed+0x58>)
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	6113      	str	r3, [r2, #16]
 800c676:	2300      	movs	r3, #0
    }
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3708      	adds	r7, #8
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	0800cd80 	.word	0x0800cd80

0800c684 <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
    const pb_bytes_array_t *bytes = NULL;
 800c68e:	2300      	movs	r3, #0
 800c690:	60fb      	str	r3, [r7, #12]

    bytes = (const pb_bytes_array_t*)field->pData;
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	69db      	ldr	r3, [r3, #28]
 800c696:	60fb      	str	r3, [r7, #12]
    
    if (bytes == NULL)
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d106      	bne.n	800c6ac <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 800c69e:	2200      	movs	r2, #0
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f7ff fe34 	bl	800c310 <pb_encode_string>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	e022      	b.n	800c6f2 <pb_enc_bytes+0x6e>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	7d9b      	ldrb	r3, [r3, #22]
 800c6b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d113      	bne.n	800c6e0 <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	881b      	ldrh	r3, [r3, #0]
 800c6bc:	461a      	mov	r2, r3
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	8a5b      	ldrh	r3, [r3, #18]
 800c6c2:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d90b      	bls.n	800c6e0 <pb_enc_bytes+0x5c>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	691b      	ldr	r3, [r3, #16]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d002      	beq.n	800c6d6 <pb_enc_bytes+0x52>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	691b      	ldr	r3, [r3, #16]
 800c6d4:	e000      	b.n	800c6d8 <pb_enc_bytes+0x54>
 800c6d6:	4b09      	ldr	r3, [pc, #36]	; (800c6fc <pb_enc_bytes+0x78>)
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	6113      	str	r3, [r2, #16]
 800c6dc:	2300      	movs	r3, #0
 800c6de:	e008      	b.n	800c6f2 <pb_enc_bytes+0x6e>
    }
    
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	1c99      	adds	r1, r3, #2
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	881b      	ldrh	r3, [r3, #0]
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f7ff fe10 	bl	800c310 <pb_encode_string>
 800c6f0:	4603      	mov	r3, r0
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3710      	adds	r7, #16
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	0800cd94 	.word	0x0800cd94

0800c700 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b086      	sub	sp, #24
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 800c70a:	2300      	movs	r3, #0
 800c70c:	617b      	str	r3, [r7, #20]
    size_t max_size = (size_t)field->data_size;
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	8a5b      	ldrh	r3, [r3, #18]
 800c712:	613b      	str	r3, [r7, #16]
    const char *str = (const char*)field->pData;
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	69db      	ldr	r3, [r3, #28]
 800c718:	60bb      	str	r3, [r7, #8]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	7d9b      	ldrb	r3, [r3, #22]
 800c71e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c722:	2b80      	cmp	r3, #128	; 0x80
 800c724:	d103      	bne.n	800c72e <pb_enc_string+0x2e>
    {
        max_size = (size_t)-1;
 800c726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c72a:	613b      	str	r3, [r7, #16]
 800c72c:	e011      	b.n	800c752 <pb_enc_string+0x52>
        /* pb_dec_string() assumes string fields end with a null
         * terminator when the type isn't PB_ATYPE_POINTER, so we
         * shouldn't allow more than max-1 bytes to be written to
         * allow space for the null terminator.
         */
        if (max_size == 0)
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d10b      	bne.n	800c74c <pb_enc_string+0x4c>
            PB_RETURN_ERROR(stream, "zero-length string");
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	691b      	ldr	r3, [r3, #16]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d002      	beq.n	800c742 <pb_enc_string+0x42>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	691b      	ldr	r3, [r3, #16]
 800c740:	e000      	b.n	800c744 <pb_enc_string+0x44>
 800c742:	4b1c      	ldr	r3, [pc, #112]	; (800c7b4 <pb_enc_string+0xb4>)
 800c744:	687a      	ldr	r2, [r7, #4]
 800c746:	6113      	str	r3, [r2, #16]
 800c748:	2300      	movs	r3, #0
 800c74a:	e02f      	b.n	800c7ac <pb_enc_string+0xac>

        max_size -= 1;
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	3b01      	subs	r3, #1
 800c750:	613b      	str	r3, [r7, #16]
    }


    if (str == NULL)
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d102      	bne.n	800c75e <pb_enc_string+0x5e>
    {
        size = 0; /* Treat null pointer as an empty string */
 800c758:	2300      	movs	r3, #0
 800c75a:	617b      	str	r3, [r7, #20]
 800c75c:	e020      	b.n	800c7a0 <pb_enc_string+0xa0>
    }
    else
    {
        const char *p = str;
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	60fb      	str	r3, [r7, #12]

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 800c762:	e005      	b.n	800c770 <pb_enc_string+0x70>
        {
            size++;
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	3301      	adds	r3, #1
 800c768:	617b      	str	r3, [r7, #20]
            p++;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	3301      	adds	r3, #1
 800c76e:	60fb      	str	r3, [r7, #12]
        while (size < max_size && *p != '\0')
 800c770:	697a      	ldr	r2, [r7, #20]
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	429a      	cmp	r2, r3
 800c776:	d203      	bcs.n	800c780 <pb_enc_string+0x80>
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d1f1      	bne.n	800c764 <pb_enc_string+0x64>
        }

        if (*p != '\0')
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d00b      	beq.n	800c7a0 <pb_enc_string+0xa0>
        {
            PB_RETURN_ERROR(stream, "unterminated string");
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	691b      	ldr	r3, [r3, #16]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d002      	beq.n	800c796 <pb_enc_string+0x96>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	691b      	ldr	r3, [r3, #16]
 800c794:	e000      	b.n	800c798 <pb_enc_string+0x98>
 800c796:	4b08      	ldr	r3, [pc, #32]	; (800c7b8 <pb_enc_string+0xb8>)
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	6113      	str	r3, [r2, #16]
 800c79c:	2300      	movs	r3, #0
 800c79e:	e005      	b.n	800c7ac <pb_enc_string+0xac>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
 800c7a0:	697a      	ldr	r2, [r7, #20]
 800c7a2:	68b9      	ldr	r1, [r7, #8]
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7ff fdb3 	bl	800c310 <pb_encode_string>
 800c7aa:	4603      	mov	r3, r0
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3718      	adds	r7, #24
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}
 800c7b4:	0800cda8 	.word	0x0800cda8
 800c7b8:	0800cdbc 	.word	0x0800cdbc

0800c7bc <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
    if (field->submsg_desc == NULL)
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d10b      	bne.n	800c7e6 <pb_enc_submessage+0x2a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	691b      	ldr	r3, [r3, #16]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d002      	beq.n	800c7dc <pb_enc_submessage+0x20>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	691b      	ldr	r3, [r3, #16]
 800c7da:	e000      	b.n	800c7de <pb_enc_submessage+0x22>
 800c7dc:	4b19      	ldr	r3, [pc, #100]	; (800c844 <pb_enc_submessage+0x88>)
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	6113      	str	r3, [r2, #16]
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	e029      	b.n	800c83a <pb_enc_submessage+0x7e>

    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	7d9b      	ldrb	r3, [r3, #22]
 800c7ea:	f003 030f 	and.w	r3, r3, #15
 800c7ee:	2b09      	cmp	r3, #9
 800c7f0:	d11a      	bne.n	800c828 <pb_enc_submessage+0x6c>
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	6a1b      	ldr	r3, [r3, #32]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d016      	beq.n	800c828 <pb_enc_submessage+0x6c>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	6a1b      	ldr	r3, [r3, #32]
 800c7fe:	3b08      	subs	r3, #8
 800c800:	60fb      	str	r3, [r7, #12]
        if (callback->funcs.encode)
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d00e      	beq.n	800c828 <pb_enc_submessage+0x6c>
        {
            if (!callback->funcs.encode(stream, field, &callback->arg))
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	68fa      	ldr	r2, [r7, #12]
 800c810:	3204      	adds	r2, #4
 800c812:	6839      	ldr	r1, [r7, #0]
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	4798      	blx	r3
 800c818:	4603      	mov	r3, r0
 800c81a:	f083 0301 	eor.w	r3, r3, #1
 800c81e:	b2db      	uxtb	r3, r3
 800c820:	2b00      	cmp	r3, #0
 800c822:	d001      	beq.n	800c828 <pb_enc_submessage+0x6c>
                return false;
 800c824:	2300      	movs	r3, #0
 800c826:	e008      	b.n	800c83a <pb_enc_submessage+0x7e>
        }
    }
    
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	69db      	ldr	r3, [r3, #28]
 800c830:	461a      	mov	r2, r3
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f7ff fd8e 	bl	800c354 <pb_encode_submessage>
 800c838:	4603      	mov	r3, r0
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3710      	adds	r7, #16
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	0800cdd0 	.word	0x0800cdd0

0800c848 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	69d9      	ldr	r1, [r3, #28]
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	8a5b      	ldrh	r3, [r3, #18]
 800c85a:	461a      	mov	r2, r3
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f7ff fd57 	bl	800c310 <pb_encode_string>
 800c862:	4603      	mov	r3, r0
}
 800c864:	4618      	mov	r0, r3
 800c866:	3708      	adds	r7, #8
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <__libc_init_array>:
 800c86c:	b570      	push	{r4, r5, r6, lr}
 800c86e:	4d0d      	ldr	r5, [pc, #52]	; (800c8a4 <__libc_init_array+0x38>)
 800c870:	4c0d      	ldr	r4, [pc, #52]	; (800c8a8 <__libc_init_array+0x3c>)
 800c872:	1b64      	subs	r4, r4, r5
 800c874:	10a4      	asrs	r4, r4, #2
 800c876:	2600      	movs	r6, #0
 800c878:	42a6      	cmp	r6, r4
 800c87a:	d109      	bne.n	800c890 <__libc_init_array+0x24>
 800c87c:	4d0b      	ldr	r5, [pc, #44]	; (800c8ac <__libc_init_array+0x40>)
 800c87e:	4c0c      	ldr	r4, [pc, #48]	; (800c8b0 <__libc_init_array+0x44>)
 800c880:	f000 f8f2 	bl	800ca68 <_init>
 800c884:	1b64      	subs	r4, r4, r5
 800c886:	10a4      	asrs	r4, r4, #2
 800c888:	2600      	movs	r6, #0
 800c88a:	42a6      	cmp	r6, r4
 800c88c:	d105      	bne.n	800c89a <__libc_init_array+0x2e>
 800c88e:	bd70      	pop	{r4, r5, r6, pc}
 800c890:	f855 3b04 	ldr.w	r3, [r5], #4
 800c894:	4798      	blx	r3
 800c896:	3601      	adds	r6, #1
 800c898:	e7ee      	b.n	800c878 <__libc_init_array+0xc>
 800c89a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c89e:	4798      	blx	r3
 800c8a0:	3601      	adds	r6, #1
 800c8a2:	e7f2      	b.n	800c88a <__libc_init_array+0x1e>
 800c8a4:	0800cf04 	.word	0x0800cf04
 800c8a8:	0800cf04 	.word	0x0800cf04
 800c8ac:	0800cf04 	.word	0x0800cf04
 800c8b0:	0800cf08 	.word	0x0800cf08

0800c8b4 <__retarget_lock_acquire_recursive>:
 800c8b4:	4770      	bx	lr

0800c8b6 <__retarget_lock_release_recursive>:
 800c8b6:	4770      	bx	lr

0800c8b8 <memcpy>:
 800c8b8:	440a      	add	r2, r1
 800c8ba:	4291      	cmp	r1, r2
 800c8bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c8c0:	d100      	bne.n	800c8c4 <memcpy+0xc>
 800c8c2:	4770      	bx	lr
 800c8c4:	b510      	push	{r4, lr}
 800c8c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8ce:	4291      	cmp	r1, r2
 800c8d0:	d1f9      	bne.n	800c8c6 <memcpy+0xe>
 800c8d2:	bd10      	pop	{r4, pc}

0800c8d4 <memset>:
 800c8d4:	4402      	add	r2, r0
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d100      	bne.n	800c8de <memset+0xa>
 800c8dc:	4770      	bx	lr
 800c8de:	f803 1b01 	strb.w	r1, [r3], #1
 800c8e2:	e7f9      	b.n	800c8d8 <memset+0x4>

0800c8e4 <cleanup_glue>:
 800c8e4:	b538      	push	{r3, r4, r5, lr}
 800c8e6:	460c      	mov	r4, r1
 800c8e8:	6809      	ldr	r1, [r1, #0]
 800c8ea:	4605      	mov	r5, r0
 800c8ec:	b109      	cbz	r1, 800c8f2 <cleanup_glue+0xe>
 800c8ee:	f7ff fff9 	bl	800c8e4 <cleanup_glue>
 800c8f2:	4621      	mov	r1, r4
 800c8f4:	4628      	mov	r0, r5
 800c8f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8fa:	f000 b869 	b.w	800c9d0 <_free_r>
	...

0800c900 <_reclaim_reent>:
 800c900:	4b2c      	ldr	r3, [pc, #176]	; (800c9b4 <_reclaim_reent+0xb4>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	4283      	cmp	r3, r0
 800c906:	b570      	push	{r4, r5, r6, lr}
 800c908:	4604      	mov	r4, r0
 800c90a:	d051      	beq.n	800c9b0 <_reclaim_reent+0xb0>
 800c90c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c90e:	b143      	cbz	r3, 800c922 <_reclaim_reent+0x22>
 800c910:	68db      	ldr	r3, [r3, #12]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d14a      	bne.n	800c9ac <_reclaim_reent+0xac>
 800c916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c918:	6819      	ldr	r1, [r3, #0]
 800c91a:	b111      	cbz	r1, 800c922 <_reclaim_reent+0x22>
 800c91c:	4620      	mov	r0, r4
 800c91e:	f000 f857 	bl	800c9d0 <_free_r>
 800c922:	6961      	ldr	r1, [r4, #20]
 800c924:	b111      	cbz	r1, 800c92c <_reclaim_reent+0x2c>
 800c926:	4620      	mov	r0, r4
 800c928:	f000 f852 	bl	800c9d0 <_free_r>
 800c92c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c92e:	b111      	cbz	r1, 800c936 <_reclaim_reent+0x36>
 800c930:	4620      	mov	r0, r4
 800c932:	f000 f84d 	bl	800c9d0 <_free_r>
 800c936:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c938:	b111      	cbz	r1, 800c940 <_reclaim_reent+0x40>
 800c93a:	4620      	mov	r0, r4
 800c93c:	f000 f848 	bl	800c9d0 <_free_r>
 800c940:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c942:	b111      	cbz	r1, 800c94a <_reclaim_reent+0x4a>
 800c944:	4620      	mov	r0, r4
 800c946:	f000 f843 	bl	800c9d0 <_free_r>
 800c94a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c94c:	b111      	cbz	r1, 800c954 <_reclaim_reent+0x54>
 800c94e:	4620      	mov	r0, r4
 800c950:	f000 f83e 	bl	800c9d0 <_free_r>
 800c954:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c956:	b111      	cbz	r1, 800c95e <_reclaim_reent+0x5e>
 800c958:	4620      	mov	r0, r4
 800c95a:	f000 f839 	bl	800c9d0 <_free_r>
 800c95e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c960:	b111      	cbz	r1, 800c968 <_reclaim_reent+0x68>
 800c962:	4620      	mov	r0, r4
 800c964:	f000 f834 	bl	800c9d0 <_free_r>
 800c968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c96a:	b111      	cbz	r1, 800c972 <_reclaim_reent+0x72>
 800c96c:	4620      	mov	r0, r4
 800c96e:	f000 f82f 	bl	800c9d0 <_free_r>
 800c972:	69a3      	ldr	r3, [r4, #24]
 800c974:	b1e3      	cbz	r3, 800c9b0 <_reclaim_reent+0xb0>
 800c976:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c978:	4620      	mov	r0, r4
 800c97a:	4798      	blx	r3
 800c97c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c97e:	b1b9      	cbz	r1, 800c9b0 <_reclaim_reent+0xb0>
 800c980:	4620      	mov	r0, r4
 800c982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c986:	f7ff bfad 	b.w	800c8e4 <cleanup_glue>
 800c98a:	5949      	ldr	r1, [r1, r5]
 800c98c:	b941      	cbnz	r1, 800c9a0 <_reclaim_reent+0xa0>
 800c98e:	3504      	adds	r5, #4
 800c990:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c992:	2d80      	cmp	r5, #128	; 0x80
 800c994:	68d9      	ldr	r1, [r3, #12]
 800c996:	d1f8      	bne.n	800c98a <_reclaim_reent+0x8a>
 800c998:	4620      	mov	r0, r4
 800c99a:	f000 f819 	bl	800c9d0 <_free_r>
 800c99e:	e7ba      	b.n	800c916 <_reclaim_reent+0x16>
 800c9a0:	680e      	ldr	r6, [r1, #0]
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	f000 f814 	bl	800c9d0 <_free_r>
 800c9a8:	4631      	mov	r1, r6
 800c9aa:	e7ef      	b.n	800c98c <_reclaim_reent+0x8c>
 800c9ac:	2500      	movs	r5, #0
 800c9ae:	e7ef      	b.n	800c990 <_reclaim_reent+0x90>
 800c9b0:	bd70      	pop	{r4, r5, r6, pc}
 800c9b2:	bf00      	nop
 800c9b4:	20000038 	.word	0x20000038

0800c9b8 <__malloc_lock>:
 800c9b8:	4801      	ldr	r0, [pc, #4]	; (800c9c0 <__malloc_lock+0x8>)
 800c9ba:	f7ff bf7b 	b.w	800c8b4 <__retarget_lock_acquire_recursive>
 800c9be:	bf00      	nop
 800c9c0:	2000447c 	.word	0x2000447c

0800c9c4 <__malloc_unlock>:
 800c9c4:	4801      	ldr	r0, [pc, #4]	; (800c9cc <__malloc_unlock+0x8>)
 800c9c6:	f7ff bf76 	b.w	800c8b6 <__retarget_lock_release_recursive>
 800c9ca:	bf00      	nop
 800c9cc:	2000447c 	.word	0x2000447c

0800c9d0 <_free_r>:
 800c9d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9d2:	2900      	cmp	r1, #0
 800c9d4:	d044      	beq.n	800ca60 <_free_r+0x90>
 800c9d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9da:	9001      	str	r0, [sp, #4]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	f1a1 0404 	sub.w	r4, r1, #4
 800c9e2:	bfb8      	it	lt
 800c9e4:	18e4      	addlt	r4, r4, r3
 800c9e6:	f7ff ffe7 	bl	800c9b8 <__malloc_lock>
 800c9ea:	4a1e      	ldr	r2, [pc, #120]	; (800ca64 <_free_r+0x94>)
 800c9ec:	9801      	ldr	r0, [sp, #4]
 800c9ee:	6813      	ldr	r3, [r2, #0]
 800c9f0:	b933      	cbnz	r3, 800ca00 <_free_r+0x30>
 800c9f2:	6063      	str	r3, [r4, #4]
 800c9f4:	6014      	str	r4, [r2, #0]
 800c9f6:	b003      	add	sp, #12
 800c9f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9fc:	f7ff bfe2 	b.w	800c9c4 <__malloc_unlock>
 800ca00:	42a3      	cmp	r3, r4
 800ca02:	d908      	bls.n	800ca16 <_free_r+0x46>
 800ca04:	6825      	ldr	r5, [r4, #0]
 800ca06:	1961      	adds	r1, r4, r5
 800ca08:	428b      	cmp	r3, r1
 800ca0a:	bf01      	itttt	eq
 800ca0c:	6819      	ldreq	r1, [r3, #0]
 800ca0e:	685b      	ldreq	r3, [r3, #4]
 800ca10:	1949      	addeq	r1, r1, r5
 800ca12:	6021      	streq	r1, [r4, #0]
 800ca14:	e7ed      	b.n	800c9f2 <_free_r+0x22>
 800ca16:	461a      	mov	r2, r3
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	b10b      	cbz	r3, 800ca20 <_free_r+0x50>
 800ca1c:	42a3      	cmp	r3, r4
 800ca1e:	d9fa      	bls.n	800ca16 <_free_r+0x46>
 800ca20:	6811      	ldr	r1, [r2, #0]
 800ca22:	1855      	adds	r5, r2, r1
 800ca24:	42a5      	cmp	r5, r4
 800ca26:	d10b      	bne.n	800ca40 <_free_r+0x70>
 800ca28:	6824      	ldr	r4, [r4, #0]
 800ca2a:	4421      	add	r1, r4
 800ca2c:	1854      	adds	r4, r2, r1
 800ca2e:	42a3      	cmp	r3, r4
 800ca30:	6011      	str	r1, [r2, #0]
 800ca32:	d1e0      	bne.n	800c9f6 <_free_r+0x26>
 800ca34:	681c      	ldr	r4, [r3, #0]
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	6053      	str	r3, [r2, #4]
 800ca3a:	4421      	add	r1, r4
 800ca3c:	6011      	str	r1, [r2, #0]
 800ca3e:	e7da      	b.n	800c9f6 <_free_r+0x26>
 800ca40:	d902      	bls.n	800ca48 <_free_r+0x78>
 800ca42:	230c      	movs	r3, #12
 800ca44:	6003      	str	r3, [r0, #0]
 800ca46:	e7d6      	b.n	800c9f6 <_free_r+0x26>
 800ca48:	6825      	ldr	r5, [r4, #0]
 800ca4a:	1961      	adds	r1, r4, r5
 800ca4c:	428b      	cmp	r3, r1
 800ca4e:	bf04      	itt	eq
 800ca50:	6819      	ldreq	r1, [r3, #0]
 800ca52:	685b      	ldreq	r3, [r3, #4]
 800ca54:	6063      	str	r3, [r4, #4]
 800ca56:	bf04      	itt	eq
 800ca58:	1949      	addeq	r1, r1, r5
 800ca5a:	6021      	streq	r1, [r4, #0]
 800ca5c:	6054      	str	r4, [r2, #4]
 800ca5e:	e7ca      	b.n	800c9f6 <_free_r+0x26>
 800ca60:	b003      	add	sp, #12
 800ca62:	bd30      	pop	{r4, r5, pc}
 800ca64:	20004480 	.word	0x20004480

0800ca68 <_init>:
 800ca68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca6a:	bf00      	nop
 800ca6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca6e:	bc08      	pop	{r3}
 800ca70:	469e      	mov	lr, r3
 800ca72:	4770      	bx	lr

0800ca74 <_fini>:
 800ca74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca76:	bf00      	nop
 800ca78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca7a:	bc08      	pop	{r3}
 800ca7c:	469e      	mov	lr, r3
 800ca7e:	4770      	bx	lr
