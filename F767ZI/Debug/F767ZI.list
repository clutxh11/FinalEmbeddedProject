
F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c38c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d420  0801c590  0801c590  0002c590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080299b0  080299b0  00040344  2**0
                  CONTENTS
  4 .ARM          00000008  080299b0  080299b0  000399b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080299b8  080299b8  00040344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080299b8  080299b8  000399b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080299bc  080299bc  000399bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  080299c0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000204  08029bc4  00040204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200002a4  08029c64  000402a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000112a8  20000344  08029d04  00040344  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200115ec  08029d04  000415ec  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00040344  2**0
                  CONTENTS, READONLY
 14 .debug_info   00034120  00000000  00000000  00040372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000839c  00000000  00000000  00074492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002610  00000000  00000000  0007c830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002470  00000000  00000000  0007ee40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a553  00000000  00000000  000812b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003a95c  00000000  00000000  000bb803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001240ba  00000000  00000000  000f615f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0021a219  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ab78  00000000  00000000  0021a26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000344 	.word	0x20000344
 800021c:	00000000 	.word	0x00000000
 8000220:	0801c574 	.word	0x0801c574

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000348 	.word	0x20000348
 800023c:	0801c574 	.word	0x0801c574

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4a07      	ldr	r2, [pc, #28]	; (8000640 <vApplicationGetIdleTaskMemory+0x2c>)
 8000624:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <vApplicationGetIdleTaskMemory+0x30>)
 800062a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000632:	bf00      	nop
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20000360 	.word	0x20000360
 8000644:	200003b4 	.word	0x200003b4

08000648 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800064c:	f3bf 8f4f 	dsb	sy
}
 8000650:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000652:	f3bf 8f6f 	isb	sy
}
 8000656:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <SCB_EnableICache+0x48>)
 800065a:	2200      	movs	r2, #0
 800065c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000660:	f3bf 8f4f 	dsb	sy
}
 8000664:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000666:	f3bf 8f6f 	isb	sy
}
 800066a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <SCB_EnableICache+0x48>)
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	4a07      	ldr	r2, [pc, #28]	; (8000690 <SCB_EnableICache+0x48>)
 8000672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000676:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000678:	f3bf 8f4f 	dsb	sy
}
 800067c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800067e:	f3bf 8f6f 	isb	sy
}
 8000682:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800069a:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <SCB_EnableDCache+0x84>)
 800069c:	2200      	movs	r2, #0
 800069e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006a2:	f3bf 8f4f 	dsb	sy
}
 80006a6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <SCB_EnableDCache+0x84>)
 80006aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006ae:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	0b5b      	lsrs	r3, r3, #13
 80006b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006b8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	08db      	lsrs	r3, r3, #3
 80006be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006c2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	015a      	lsls	r2, r3, #5
 80006c8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80006cc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006d2:	4911      	ldr	r1, [pc, #68]	; (8000718 <SCB_EnableDCache+0x84>)
 80006d4:	4313      	orrs	r3, r2
 80006d6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	1e5a      	subs	r2, r3, #1
 80006de:	60ba      	str	r2, [r7, #8]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d1ef      	bne.n	80006c4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	1e5a      	subs	r2, r3, #1
 80006e8:	60fa      	str	r2, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d1e5      	bne.n	80006ba <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80006ee:	f3bf 8f4f 	dsb	sy
}
 80006f2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <SCB_EnableDCache+0x84>)
 80006f6:	695b      	ldr	r3, [r3, #20]
 80006f8:	4a07      	ldr	r2, [pc, #28]	; (8000718 <SCB_EnableDCache+0x84>)
 80006fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006fe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000700:	f3bf 8f4f 	dsb	sy
}
 8000704:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000706:	f3bf 8f6f 	isb	sy
}
 800070a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800070c:	bf00      	nop
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <HAL_CAN_RxFifo1MsgPendingCallback>:

uint8_t totalBytesReceived = 0;
size_t expectedMessageSize = 0;

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
    // Get the received message
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK) {
 8000724:	4b38      	ldr	r3, [pc, #224]	; (8000808 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 8000726:	4a39      	ldr	r2, [pc, #228]	; (800080c <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 8000728:	2101      	movs	r1, #1
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f001 fb5c 	bl	8001de8 <HAL_CAN_GetRxMessage>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <HAL_CAN_RxFifo1MsgPendingCallback+0x1e>
        Error_Handler();  // Handle reception error
 8000736:	f000 fcce 	bl	80010d6 <Error_Handler>
    }

    if (totalBytesReceived == 0) {
 800073a:	4b35      	ldr	r3, [pc, #212]	; (8000810 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d115      	bne.n	800076e <HAL_CAN_RxFifo1MsgPendingCallback+0x52>
        // The first byte of the first frame tells us the total message length
        expectedMessageSize = RxData[0];
 8000742:	4b31      	ldr	r3, [pc, #196]	; (8000808 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	461a      	mov	r2, r3
 8000748:	4b32      	ldr	r3, [pc, #200]	; (8000814 <HAL_CAN_RxFifo1MsgPendingCallback+0xf8>)
 800074a:	601a      	str	r2, [r3, #0]
        // Copy the remaining 7 bytes to the buffer
        memcpy(&fullRxBuffer[totalBytesReceived], &RxData[1], CAN_FIRST_FRAME_SIZE);
 800074c:	4b30      	ldr	r3, [pc, #192]	; (8000810 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	461a      	mov	r2, r3
 8000752:	4b31      	ldr	r3, [pc, #196]	; (8000818 <HAL_CAN_RxFifo1MsgPendingCallback+0xfc>)
 8000754:	4413      	add	r3, r2
 8000756:	2207      	movs	r2, #7
 8000758:	4930      	ldr	r1, [pc, #192]	; (800081c <HAL_CAN_RxFifo1MsgPendingCallback+0x100>)
 800075a:	4618      	mov	r0, r3
 800075c:	f019 f844 	bl	80197e8 <memcpy>
        totalBytesReceived += CAN_FIRST_FRAME_SIZE;
 8000760:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	3307      	adds	r3, #7
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 800076a:	701a      	strb	r2, [r3, #0]
 800076c:	e014      	b.n	8000798 <HAL_CAN_RxFifo1MsgPendingCallback+0x7c>
    } else {
        // Copy the full data as usual
        size_t datalength = RxHeader.DLC;
 800076e:	4b27      	ldr	r3, [pc, #156]	; (800080c <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 8000770:	691b      	ldr	r3, [r3, #16]
 8000772:	61fb      	str	r3, [r7, #28]
        memcpy(&fullRxBuffer[totalBytesReceived], RxData, datalength);
 8000774:	4b26      	ldr	r3, [pc, #152]	; (8000810 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	461a      	mov	r2, r3
 800077a:	4b27      	ldr	r3, [pc, #156]	; (8000818 <HAL_CAN_RxFifo1MsgPendingCallback+0xfc>)
 800077c:	4413      	add	r3, r2
 800077e:	69fa      	ldr	r2, [r7, #28]
 8000780:	4921      	ldr	r1, [pc, #132]	; (8000808 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>)
 8000782:	4618      	mov	r0, r3
 8000784:	f019 f830 	bl	80197e8 <memcpy>
        totalBytesReceived += datalength;
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b20      	ldr	r3, [pc, #128]	; (8000810 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	4413      	add	r3, r2
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8000796:	701a      	strb	r2, [r3, #0]
    }

    // Check if the full message has been received
    if (totalBytesReceived >= expectedMessageSize) {
 8000798:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	461a      	mov	r2, r3
 800079e:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <HAL_CAN_RxFifo1MsgPendingCallback+0xf8>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d32c      	bcc.n	8000800 <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>
        // Decode the received message from the complete buffer
        pb_istream_t stream = pb_istream_from_buffer(fullRxBuffer, totalBytesReceived);
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	461a      	mov	r2, r3
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	4919      	ldr	r1, [pc, #100]	; (8000818 <HAL_CAN_RxFifo1MsgPendingCallback+0xfc>)
 80007b2:	4618      	mov	r0, r3
 80007b4:	f016 fa14 	bl	8016be0 <pb_istream_from_buffer>
        bool status = pb_decode(&stream, CombinedData_fields, &received_combined);
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	4a18      	ldr	r2, [pc, #96]	; (8000820 <HAL_CAN_RxFifo1MsgPendingCallback+0x104>)
 80007be:	4919      	ldr	r1, [pc, #100]	; (8000824 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>)
 80007c0:	4618      	mov	r0, r3
 80007c2:	f017 fb47 	bl	8017e54 <pb_decode>
 80007c6:	4603      	mov	r3, r0
 80007c8:	76fb      	strb	r3, [r7, #27]

        if (!status) {
//            Error_Handler();  // Handle decoding error
        }

        lock_motors = received_combined.status.lock_motors;
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <HAL_CAN_RxFifo1MsgPendingCallback+0x104>)
 80007cc:	7c5a      	ldrb	r2, [r3, #17]
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <HAL_CAN_RxFifo1MsgPendingCallback+0x10c>)
 80007d0:	701a      	strb	r2, [r3, #0]
		fire_laser = received_combined.status.fire_laser;
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <HAL_CAN_RxFifo1MsgPendingCallback+0x104>)
 80007d4:	7c9a      	ldrb	r2, [r3, #18]
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <HAL_CAN_RxFifo1MsgPendingCallback+0x110>)
 80007d8:	701a      	strb	r2, [r3, #0]
		motor_mode = received_combined.status.motor_mode;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <HAL_CAN_RxFifo1MsgPendingCallback+0x104>)
 80007dc:	7cda      	ldrb	r2, [r3, #19]
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80007e0:	701a      	strb	r2, [r3, #0]
		motor_angle = received_combined.servo_data.position_1;
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <HAL_CAN_RxFifo1MsgPendingCallback+0x104>)
 80007e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80007e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007ec:	ee17 2a90 	vmov	r2, s15
 80007f0:	4b10      	ldr	r3, [pc, #64]	; (8000834 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 80007f2:	601a      	str	r2, [r3, #0]

        // Reset for next message
        totalBytesReceived = 0;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
        expectedMessageSize = 0;
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_CAN_RxFifo1MsgPendingCallback+0xf8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
    }
}
 8000800:	bf00      	nop
 8000802:	3720      	adds	r7, #32
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000620 	.word	0x20000620
 800080c:	20000604 	.word	0x20000604
 8000810:	2000067c 	.word	0x2000067c
 8000814:	20000680 	.word	0x20000680
 8000818:	20000634 	.word	0x20000634
 800081c:	20000621 	.word	0x20000621
 8000820:	20000654 	.word	0x20000654
 8000824:	0801ff88 	.word	0x0801ff88
 8000828:	200005e8 	.word	0x200005e8
 800082c:	200005e9 	.word	0x200005e9
 8000830:	200005ea 	.word	0x200005ea
 8000834:	20000000 	.word	0x20000000

08000838 <SendCANMessage>:

void SendCANMessage(uint8_t* buffer, size_t message_length, uint32_t ide) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b08c      	sub	sp, #48	; 0x30
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
    size_t bytesSent = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t frameIndex = 0; // To keep track of the frames
 8000848:	2300      	movs	r3, #0
 800084a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    while (bytesSent < message_length) {
 800084e:	e059      	b.n	8000904 <SendCANMessage+0xcc>
        uint8_t TxData[8] = {0}; // Initialize with zeros
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]

        if (frameIndex == 0) {
 8000858:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800085c:	2b00      	cmp	r3, #0
 800085e:	d11a      	bne.n	8000896 <SendCANMessage+0x5e>
            // First frame: include the message length in the first byte
            TxData[0] = (uint8_t)message_length; // Store the total message length in the first byte
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	753b      	strb	r3, [r7, #20]
            size_t bytesToSend = (message_length < CAN_FIRST_FRAME_SIZE) ? message_length : CAN_FIRST_FRAME_SIZE;
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	2b07      	cmp	r3, #7
 800086a:	bf28      	it	cs
 800086c:	2307      	movcs	r3, #7
 800086e:	623b      	str	r3, [r7, #32]
            memcpy(&TxData[1], &buffer[bytesSent], bytesToSend);
 8000870:	68fa      	ldr	r2, [r7, #12]
 8000872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000874:	18d1      	adds	r1, r2, r3
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	3301      	adds	r3, #1
 800087c:	6a3a      	ldr	r2, [r7, #32]
 800087e:	4618      	mov	r0, r3
 8000880:	f018 ffb2 	bl	80197e8 <memcpy>
            TxHeader.DLC = bytesToSend + 1; // DLC is the number of bytes in this frame
 8000884:	6a3b      	ldr	r3, [r7, #32]
 8000886:	3301      	adds	r3, #1
 8000888:	4a23      	ldr	r2, [pc, #140]	; (8000918 <SendCANMessage+0xe0>)
 800088a:	6113      	str	r3, [r2, #16]
            bytesSent += bytesToSend;
 800088c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800088e:	6a3b      	ldr	r3, [r7, #32]
 8000890:	4413      	add	r3, r2
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000894:	e016      	b.n	80008c4 <SendCANMessage+0x8c>
        } else {
            // Subsequent frames
            size_t bytesToSend = (message_length - bytesSent > CAN_MAX_FRAME_SIZE) ? CAN_MAX_FRAME_SIZE : (message_length - bytesSent);
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	2b08      	cmp	r3, #8
 800089e:	bf28      	it	cs
 80008a0:	2308      	movcs	r3, #8
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
            memcpy(TxData, &buffer[bytesSent], bytesToSend);
 80008a4:	68fa      	ldr	r2, [r7, #12]
 80008a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a8:	18d1      	adds	r1, r2, r3
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008b0:	4618      	mov	r0, r3
 80008b2:	f018 ff99 	bl	80197e8 <memcpy>
            TxHeader.DLC = bytesToSend; // DLC is the number of bytes in this frame
 80008b6:	4a18      	ldr	r2, [pc, #96]	; (8000918 <SendCANMessage+0xe0>)
 80008b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ba:	6113      	str	r3, [r2, #16]
            bytesSent += bytesToSend;
 80008bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c0:	4413      	add	r3, r2
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        TxHeader.IDE = CAN_ID_STD;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <SendCANMessage+0xe0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
        TxHeader.RTR = CAN_RTR_DATA;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <SendCANMessage+0xe0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
        TxHeader.StdId = ide;
 80008d0:	4a11      	ldr	r2, [pc, #68]	; (8000918 <SendCANMessage+0xe0>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6013      	str	r3, [r2, #0]

        HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox[frameIndex]);
 80008d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	4a0f      	ldr	r2, [pc, #60]	; (800091c <SendCANMessage+0xe4>)
 80008de:	4413      	add	r3, r2
 80008e0:	f107 0214 	add.w	r2, r7, #20
 80008e4:	490c      	ldr	r1, [pc, #48]	; (8000918 <SendCANMessage+0xe0>)
 80008e6:	480e      	ldr	r0, [pc, #56]	; (8000920 <SendCANMessage+0xe8>)
 80008e8:	f001 f9ae 	bl	8001c48 <HAL_CAN_AddTxMessage>
 80008ec:	4603      	mov	r3, r0
 80008ee:	77fb      	strb	r3, [r7, #31]
        if (status != HAL_OK) {
 80008f0:	7ffb      	ldrb	r3, [r7, #31]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SendCANMessage+0xc2>
            Error_Handler();  // Handle transmission error
 80008f6:	f000 fbee 	bl	80010d6 <Error_Handler>
        }

        frameIndex++;
 80008fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80008fe:	3301      	adds	r3, #1
 8000900:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    while (bytesSent < message_length) {
 8000904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	429a      	cmp	r2, r3
 800090a:	d3a1      	bcc.n	8000850 <SendCANMessage+0x18>
    }
}
 800090c:	bf00      	nop
 800090e:	bf00      	nop
 8000910:	3730      	adds	r7, #48	; 0x30
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200005ec 	.word	0x200005ec
 800091c:	20000628 	.word	0x20000628
 8000920:	200005b4 	.word	0x200005b4

08000924 <http_server>:

bool http_server(struct netconn *conn)
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b0cb      	sub	sp, #300	; 0x12c
 8000928:	af04      	add	r7, sp, #16
 800092a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800092e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000932:	6018      	str	r0, [r3, #0]
    struct netbuf *inbuf;
    err_t recv_err;
    char* buf;
    u16_t buflen;

    bool statusChanged = false;
 8000934:	2300      	movs	r3, #0
 8000936:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

    /* Read the data from the port, blocking if nothing yet there */
    recv_err = netconn_recv(conn, &inbuf);
 800093a:	f507 7282 	add.w	r2, r7, #260	; 0x104
 800093e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000942:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000946:	4611      	mov	r1, r2
 8000948:	6818      	ldr	r0, [r3, #0]
 800094a:	f008 fd43 	bl	80093d4 <netconn_recv>
 800094e:	4603      	mov	r3, r0
 8000950:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

    if (recv_err == ERR_OK)
 8000954:	f997 3116 	ldrsb.w	r3, [r7, #278]	; 0x116
 8000958:	2b00      	cmp	r3, #0
 800095a:	f040 8120 	bne.w	8000b9e <http_server+0x27a>
    {
        if (netconn_err(conn) == ERR_OK)
 800095e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000962:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	f008 febd 	bl	80096e6 <netconn_err>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	f040 8115 	bne.w	8000b9e <http_server+0x27a>
        {
            /* Get the data pointer and length of the data inside a netbuf */
            netbuf_data(inbuf, (void**)&buf, &buflen);
 8000974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000978:	f107 02fe 	add.w	r2, r7, #254	; 0xfe
 800097c:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8000980:	4618      	mov	r0, r3
 8000982:	f00a fac7 	bl	800af14 <netbuf_data>

            /* Check if request to get the index.html */
            if (strncmp((char const *)buf,"GET /index.html",15) == 0)
 8000986:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800098a:	220f      	movs	r2, #15
 800098c:	498d      	ldr	r1, [pc, #564]	; (8000bc4 <http_server+0x2a0>)
 800098e:	4618      	mov	r0, r3
 8000990:	f019 fc26 	bl	801a1e0 <strncmp>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d119      	bne.n	80009ce <http_server+0xaa>
            {
                struct fs_file file;
                fs_open(&file, "/index.html");
 800099a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800099e:	498a      	ldr	r1, [pc, #552]	; (8000bc8 <http_server+0x2a4>)
 80009a0:	4618      	mov	r0, r3
 80009a2:	f00a fcb9 	bl	800b318 <fs_open>
                netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 80009a6:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80009aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80009ae:	461a      	mov	r2, r3
 80009b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009b4:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80009b8:	2300      	movs	r3, #0
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2300      	movs	r3, #0
 80009be:	6800      	ldr	r0, [r0, #0]
 80009c0:	f008 fd82 	bl	80094c8 <netconn_write_partly>
                fs_close(&file);
 80009c4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80009c8:	4618      	mov	r0, r3
 80009ca:	f00a fce3 	bl	800b394 <fs_close>
            }
            if (strncmp((char const *)buf, "GET /laser", 10) == 0)
 80009ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80009d2:	220a      	movs	r2, #10
 80009d4:	497d      	ldr	r1, [pc, #500]	; (8000bcc <http_server+0x2a8>)
 80009d6:	4618      	mov	r0, r3
 80009d8:	f019 fc02 	bl	801a1e0 <strncmp>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d125      	bne.n	8000a2e <http_server+0x10a>
            {
                // Handle laser control
            	fire_laser = !fire_laser;
 80009e2:	4b7b      	ldr	r3, [pc, #492]	; (8000bd0 <http_server+0x2ac>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	bf14      	ite	ne
 80009ea:	2301      	movne	r3, #1
 80009ec:	2300      	moveq	r3, #0
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	f083 0301 	eor.w	r3, r3, #1
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b74      	ldr	r3, [pc, #464]	; (8000bd0 <http_server+0x2ac>)
 80009fe:	701a      	strb	r2, [r3, #0]
                const char *response = "Laser toggled";
 8000a00:	4b74      	ldr	r3, [pc, #464]	; (8000bd4 <http_server+0x2b0>)
 8000a02:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
                netconn_write(conn, response, strlen(response), NETCONN_NOCOPY);
 8000a06:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8000a0a:	f7ff fc23 	bl	8000254 <strlen>
 8000a0e:	4602      	mov	r2, r0
 8000a10:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a14:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8000a18:	2300      	movs	r3, #0
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8000a22:	6800      	ldr	r0, [r0, #0]
 8000a24:	f008 fd50 	bl	80094c8 <netconn_write_partly>

                statusChanged = true;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            }
            if (strncmp((char const *)buf, "GET /motor", 10) == 0)
 8000a2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000a32:	220a      	movs	r2, #10
 8000a34:	4968      	ldr	r1, [pc, #416]	; (8000bd8 <http_server+0x2b4>)
 8000a36:	4618      	mov	r0, r3
 8000a38:	f019 fbd2 	bl	801a1e0 <strncmp>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d125      	bne.n	8000a8e <http_server+0x16a>
            {
                // Handle motor control
                lock_motors = !lock_motors;
 8000a42:	4b66      	ldr	r3, [pc, #408]	; (8000bdc <http_server+0x2b8>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	bf14      	ite	ne
 8000a4a:	2301      	movne	r3, #1
 8000a4c:	2300      	moveq	r3, #0
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	f083 0301 	eor.w	r3, r3, #1
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	4b5f      	ldr	r3, [pc, #380]	; (8000bdc <http_server+0x2b8>)
 8000a5e:	701a      	strb	r2, [r3, #0]
                const char *response = "Motor locked";
 8000a60:	4b5f      	ldr	r3, [pc, #380]	; (8000be0 <http_server+0x2bc>)
 8000a62:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                netconn_write(conn, response, strlen(response), NETCONN_NOCOPY);
 8000a66:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8000a6a:	f7ff fbf3 	bl	8000254 <strlen>
 8000a6e:	4602      	mov	r2, r0
 8000a70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a74:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8000a78:	2300      	movs	r3, #0
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8000a82:	6800      	ldr	r0, [r0, #0]
 8000a84:	f008 fd20 	bl	80094c8 <netconn_write_partly>

                statusChanged = true;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            }
            if (strncmp((char const *)buf, "GET /mode", 9) == 0)
 8000a8e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000a92:	2209      	movs	r2, #9
 8000a94:	4953      	ldr	r1, [pc, #332]	; (8000be4 <http_server+0x2c0>)
 8000a96:	4618      	mov	r0, r3
 8000a98:	f019 fba2 	bl	801a1e0 <strncmp>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d125      	bne.n	8000aee <http_server+0x1ca>
            {
                // Handle mode change
            	motor_mode = !motor_mode;
 8000aa2:	4b51      	ldr	r3, [pc, #324]	; (8000be8 <http_server+0x2c4>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	bf14      	ite	ne
 8000aaa:	2301      	movne	r3, #1
 8000aac:	2300      	moveq	r3, #0
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	f083 0301 	eor.w	r3, r3, #1
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	4b4a      	ldr	r3, [pc, #296]	; (8000be8 <http_server+0x2c4>)
 8000abe:	701a      	strb	r2, [r3, #0]
                const char *response = "Mode changed";
 8000ac0:	4b4a      	ldr	r3, [pc, #296]	; (8000bec <http_server+0x2c8>)
 8000ac2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                netconn_write(conn, response, strlen(response), NETCONN_NOCOPY);
 8000ac6:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8000aca:	f7ff fbc3 	bl	8000254 <strlen>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ad4:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8000ad8:	2300      	movs	r3, #0
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	2300      	movs	r3, #0
 8000ade:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8000ae2:	6800      	ldr	r0, [r0, #0]
 8000ae4:	f008 fcf0 	bl	80094c8 <netconn_write_partly>

                statusChanged = true;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            }
            if (strncmp((char const *)buf, "GET /status", 11) == 0)
 8000aee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000af2:	220b      	movs	r2, #11
 8000af4:	493e      	ldr	r1, [pc, #248]	; (8000bf0 <http_server+0x2cc>)
 8000af6:	4618      	mov	r0, r3
 8000af8:	f019 fb72 	bl	801a1e0 <strncmp>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d133      	bne.n	8000b6a <http_server+0x246>
            {
                // Return the status in JSON format
                char status_response[200];
                snprintf(status_response, sizeof(status_response),
                    "{\"laser\":\"%s\",\"motor_angle\":\"%d\",\"mode\":\"%s\",\"motor_locked\":\"%s\"}",
                    fire_laser ? "On" : "Off",
 8000b02:	4b33      	ldr	r3, [pc, #204]	; (8000bd0 <http_server+0x2ac>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
                snprintf(status_response, sizeof(status_response),
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <http_server+0x1ea>
 8000b0a:	4c3a      	ldr	r4, [pc, #232]	; (8000bf4 <http_server+0x2d0>)
 8000b0c:	e000      	b.n	8000b10 <http_server+0x1ec>
 8000b0e:	4c3a      	ldr	r4, [pc, #232]	; (8000bf8 <http_server+0x2d4>)
 8000b10:	4b3a      	ldr	r3, [pc, #232]	; (8000bfc <http_server+0x2d8>)
 8000b12:	681b      	ldr	r3, [r3, #0]
                    motor_angle,
                    motor_mode ? "Automatic" : "Manual",
 8000b14:	4a34      	ldr	r2, [pc, #208]	; (8000be8 <http_server+0x2c4>)
 8000b16:	7812      	ldrb	r2, [r2, #0]
                snprintf(status_response, sizeof(status_response),
 8000b18:	2a00      	cmp	r2, #0
 8000b1a:	d001      	beq.n	8000b20 <http_server+0x1fc>
 8000b1c:	4a38      	ldr	r2, [pc, #224]	; (8000c00 <http_server+0x2dc>)
 8000b1e:	e000      	b.n	8000b22 <http_server+0x1fe>
 8000b20:	4a38      	ldr	r2, [pc, #224]	; (8000c04 <http_server+0x2e0>)
                    lock_motors ? "Locked" : "Unlocked");
 8000b22:	492e      	ldr	r1, [pc, #184]	; (8000bdc <http_server+0x2b8>)
 8000b24:	7809      	ldrb	r1, [r1, #0]
                snprintf(status_response, sizeof(status_response),
 8000b26:	2900      	cmp	r1, #0
 8000b28:	d001      	beq.n	8000b2e <http_server+0x20a>
 8000b2a:	4937      	ldr	r1, [pc, #220]	; (8000c08 <http_server+0x2e4>)
 8000b2c:	e000      	b.n	8000b30 <http_server+0x20c>
 8000b2e:	4937      	ldr	r1, [pc, #220]	; (8000c0c <http_server+0x2e8>)
 8000b30:	f107 000c 	add.w	r0, r7, #12
 8000b34:	9102      	str	r1, [sp, #8]
 8000b36:	9201      	str	r2, [sp, #4]
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	4623      	mov	r3, r4
 8000b3c:	4a34      	ldr	r2, [pc, #208]	; (8000c10 <http_server+0x2ec>)
 8000b3e:	21c8      	movs	r1, #200	; 0xc8
 8000b40:	f019 fb1a 	bl	801a178 <sniprintf>

                netconn_write(conn, status_response, strlen(status_response), NETCONN_NOCOPY);
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fb83 	bl	8000254 <strlen>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	f107 010c 	add.w	r1, r7, #12
 8000b54:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000b58:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2300      	movs	r3, #0
 8000b62:	6800      	ldr	r0, [r0, #0]
 8000b64:	f008 fcb0 	bl	80094c8 <netconn_write_partly>
 8000b68:	e019      	b.n	8000b9e <http_server+0x27a>
            }
            else
            {
                /* Load Error page */
                struct fs_file file;
                fs_open(&file, "/404.html");
 8000b6a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b6e:	4929      	ldr	r1, [pc, #164]	; (8000c14 <http_server+0x2f0>)
 8000b70:	4618      	mov	r0, r3
 8000b72:	f00a fbd1 	bl	800b318 <fs_open>
                netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000b76:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8000b7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000b7e:	461a      	mov	r2, r3
 8000b80:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000b84:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8000b88:	2300      	movs	r3, #0
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	6800      	ldr	r0, [r0, #0]
 8000b90:	f008 fc9a 	bl	80094c8 <netconn_write_partly>
                fs_close(&file);
 8000b94:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f00a fbfb 	bl	800b394 <fs_close>
            }
        }
    }
    /* Close the connection (server closes in HTTP) */
    netconn_close(conn);
 8000b9e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ba2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000ba6:	6818      	ldr	r0, [r3, #0]
 8000ba8:	f008 fd90 	bl	80096cc <netconn_close>

    /* Delete the buffer (netconn_recv gives us ownership,
   so we have to make sure to deallocate the buffer) */
    netbuf_delete(inbuf);
 8000bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f00a f98f 	bl	800aed4 <netbuf_delete>

    return statusChanged;
 8000bb6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd90      	pop	{r4, r7, pc}
 8000bc4:	0801c5a4 	.word	0x0801c5a4
 8000bc8:	0801c5b4 	.word	0x0801c5b4
 8000bcc:	0801c5c0 	.word	0x0801c5c0
 8000bd0:	200005e9 	.word	0x200005e9
 8000bd4:	0801c5cc 	.word	0x0801c5cc
 8000bd8:	0801c5dc 	.word	0x0801c5dc
 8000bdc:	200005e8 	.word	0x200005e8
 8000be0:	0801c5e8 	.word	0x0801c5e8
 8000be4:	0801c5f8 	.word	0x0801c5f8
 8000be8:	200005ea 	.word	0x200005ea
 8000bec:	0801c604 	.word	0x0801c604
 8000bf0:	0801c614 	.word	0x0801c614
 8000bf4:	0801c620 	.word	0x0801c620
 8000bf8:	0801c624 	.word	0x0801c624
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	0801c628 	.word	0x0801c628
 8000c04:	0801c634 	.word	0x0801c634
 8000c08:	0801c63c 	.word	0x0801c63c
 8000c0c:	0801c644 	.word	0x0801c644
 8000c10:	0801c650 	.word	0x0801c650
 8000c14:	0801c694 	.word	0x0801c694

08000c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c18:	b5b0      	push	{r4, r5, r7, lr}
 8000c1a:	b08e      	sub	sp, #56	; 0x38
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000c1e:	f7ff fd13 	bl	8000648 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000c22:	f7ff fd37 	bl	8000694 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c26:	f000 fd89 	bl	800173c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2a:	f000 f843 	bl	8000cb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2e:	f000 f905 	bl	8000e3c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000c32:	f000 f8af 	bl	8000d94 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 8000c36:	4819      	ldr	r0, [pc, #100]	; (8000c9c <main+0x84>)
 8000c38:	f000 ffc2 	bl	8001bc0 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000c3c:	2110      	movs	r1, #16
 8000c3e:	4817      	ldr	r0, [pc, #92]	; (8000c9c <main+0x84>)
 8000c40:	f001 f9f4 	bl	800202c <HAL_CAN_ActivateNotification>

  xEventGroup = xEventGroupCreate();
 8000c44:	f005 fa51 	bl	80060ea <xEventGroupCreate>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	4a15      	ldr	r2, [pc, #84]	; (8000ca0 <main+0x88>)
 8000c4c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of HTTP */
  osThreadDef(HTTP, HTTP_Task, osPriorityAboveNormal, 0, 512);
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <main+0x8c>)
 8000c50:	f107 041c 	add.w	r4, r7, #28
 8000c54:	461d      	mov	r5, r3
 8000c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HTTPHandle = osThreadCreate(osThread(HTTP), NULL);
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f004 ff73 	bl	8005b54 <osThreadCreate>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4a0d      	ldr	r2, [pc, #52]	; (8000ca8 <main+0x90>)
 8000c72:	6013      	str	r3, [r2, #0]

  /* definition and creation of TCPServer */
  osThreadDef(TCPServer, TCP_Server_Task, osPriorityNormal, 0, 512);
 8000c74:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <main+0x94>)
 8000c76:	463c      	mov	r4, r7
 8000c78:	461d      	mov	r5, r3
 8000c7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TCPServerHandle = osThreadCreate(osThread(TCPServer), NULL);
 8000c86:	463b      	mov	r3, r7
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f004 ff62 	bl	8005b54 <osThreadCreate>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <main+0x98>)
 8000c94:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c96:	f004 ff46 	bl	8005b26 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <main+0x82>
 8000c9c:	200005b4 	.word	0x200005b4
 8000ca0:	200005e4 	.word	0x200005e4
 8000ca4:	0801c6a0 	.word	0x0801c6a0
 8000ca8:	200005dc 	.word	0x200005dc
 8000cac:	0801c6bc 	.word	0x0801c6bc
 8000cb0:	200005e0 	.word	0x200005e0

08000cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b094      	sub	sp, #80	; 0x50
 8000cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	2234      	movs	r2, #52	; 0x34
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f018 fdb8 	bl	8019838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc8:	f107 0308 	add.w	r3, r7, #8
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd8:	4b2c      	ldr	r3, [pc, #176]	; (8000d8c <SystemClock_Config+0xd8>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	4a2b      	ldr	r2, [pc, #172]	; (8000d8c <SystemClock_Config+0xd8>)
 8000cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce4:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <SystemClock_Config+0xd8>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cf0:	4b27      	ldr	r3, [pc, #156]	; (8000d90 <SystemClock_Config+0xdc>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a26      	ldr	r2, [pc, #152]	; (8000d90 <SystemClock_Config+0xdc>)
 8000cf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cfa:	6013      	str	r3, [r2, #0]
 8000cfc:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <SystemClock_Config+0xdc>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d10:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d12:	2302      	movs	r3, #2
 8000d14:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d1c:	2319      	movs	r3, #25
 8000d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000d20:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000d24:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d26:	2302      	movs	r3, #2
 8000d28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	4618      	mov	r0, r3
 8000d38:	f003 f914 	bl	8003f64 <HAL_RCC_OscConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d42:	f000 f9c8 	bl	80010d6 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d46:	f003 f8bd 	bl	8003ec4 <HAL_PWREx_EnableOverDrive>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000d50:	f000 f9c1 	bl	80010d6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d54:	230f      	movs	r3, #15
 8000d56:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d6c:	f107 0308 	add.w	r3, r7, #8
 8000d70:	2107      	movs	r1, #7
 8000d72:	4618      	mov	r0, r3
 8000d74:	f003 fba4 	bl	80044c0 <HAL_RCC_ClockConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000d7e:	f000 f9aa 	bl	80010d6 <Error_Handler>
  }
}
 8000d82:	bf00      	nop
 8000d84:	3750      	adds	r7, #80	; 0x50
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40007000 	.word	0x40007000

08000d94 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000d9a:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <MX_CAN1_Init+0xa0>)
 8000d9c:	4a26      	ldr	r2, [pc, #152]	; (8000e38 <MX_CAN1_Init+0xa4>)
 8000d9e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000da0:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <MX_CAN1_Init+0xa0>)
 8000da2:	220c      	movs	r2, #12
 8000da4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000da6:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <MX_CAN1_Init+0xa0>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000dac:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <MX_CAN1_Init+0xa0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000db2:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <MX_CAN1_Init+0xa0>)
 8000db4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000db8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000dba:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <MX_CAN1_Init+0xa0>)
 8000dbc:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000dc0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_CAN1_Init+0xa0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_CAN1_Init+0xa0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <MX_CAN1_Init+0xa0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <MX_CAN1_Init+0xa0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <MX_CAN1_Init+0xa0>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_CAN1_Init+0xa0>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000de6:	4813      	ldr	r0, [pc, #76]	; (8000e34 <MX_CAN1_Init+0xa0>)
 8000de8:	f000 fd02 	bl	80017f0 <HAL_CAN_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000df2:	f000 f970 	bl	80010d6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000df6:	2301      	movs	r3, #1
 8000df8:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8000dfa:	230a      	movs	r3, #10
 8000dfc:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x441<<5;
 8000e02:	f648 0320 	movw	r3, #34848	; 0x8820
 8000e06:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x441<<5;
 8000e0c:	f648 0320 	movw	r3, #34848	; 0x8820
 8000e10:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;  // how many filters to assign to the CAN1 (master can)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000e22:	463b      	mov	r3, r7
 8000e24:	4619      	mov	r1, r3
 8000e26:	4803      	ldr	r0, [pc, #12]	; (8000e34 <MX_CAN1_Init+0xa0>)
 8000e28:	f000 fdde 	bl	80019e8 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	200005b4 	.word	0x200005b4
 8000e38:	40006400 	.word	0x40006400

08000e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b087      	sub	sp, #28
 8000e40:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <MX_GPIO_Init+0x8c>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a20      	ldr	r2, [pc, #128]	; (8000ec8 <MX_GPIO_Init+0x8c>)
 8000e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <MX_GPIO_Init+0x8c>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <MX_GPIO_Init+0x8c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a1a      	ldr	r2, [pc, #104]	; (8000ec8 <MX_GPIO_Init+0x8c>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <MX_GPIO_Init+0x8c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_GPIO_Init+0x8c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a14      	ldr	r2, [pc, #80]	; (8000ec8 <MX_GPIO_Init+0x8c>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <MX_GPIO_Init+0x8c>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_GPIO_Init+0x8c>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <MX_GPIO_Init+0x8c>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_GPIO_Init+0x8c>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_GPIO_Init+0x8c>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <MX_GPIO_Init+0x8c>)
 8000ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_GPIO_Init+0x8c>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]

}
 8000eba:	bf00      	nop
 8000ebc:	371c      	adds	r7, #28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800

08000ecc <HTTP_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_HTTP_Task */
void HTTP_Task(void const * argument)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b094      	sub	sp, #80	; 0x50
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000ed4:	f003 ffcc 	bl	8004e70 <MX_LWIP_Init>

  uint8_t buffer[MAX_MESSAGE_SIZE];  // Adjust the buffer size according to your needs
  size_t message_length;

  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2100      	movs	r1, #0
 8000edc:	2010      	movs	r0, #16
 8000ede:	f007 ff53 	bl	8008d88 <netconn_new_with_proto_and_callback>
 8000ee2:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (conn!= NULL)
 8000ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d068      	beq.n	8000fbc <HTTP_Task+0xf0>
  {
    /* Bind to port 80 (HTTP) with default IP address */
    err = netconn_bind(conn, IP_ADDR_ANY, 80);
 8000eea:	2250      	movs	r2, #80	; 0x50
 8000eec:	4937      	ldr	r1, [pc, #220]	; (8000fcc <HTTP_Task+0x100>)
 8000eee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000ef0:	f008 f804 	bl	8008efc <netconn_bind>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

    if (err == ERR_OK)
 8000efa:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d15c      	bne.n	8000fbc <HTTP_Task+0xf0>
    {
      /* Put the connection into LISTEN state */
      netconn_listen(conn);
 8000f02:	21ff      	movs	r1, #255	; 0xff
 8000f04:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f06:	f008 f831 	bl	8008f6c <netconn_listen_with_backlog>

      while(1)
      {
        /* accept any incoming connection */
        accept_err = netconn_accept(conn, &newconn);
 8000f0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f0e:	4619      	mov	r1, r3
 8000f10:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f12:	f008 f857 	bl	8008fc4 <netconn_accept>
 8000f16:	4603      	mov	r3, r0
 8000f18:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
        if(accept_err == ERR_OK)
 8000f1c:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d147      	bne.n	8000fb4 <HTTP_Task+0xe8>
        {
          /* serve connection */
          if (http_server(newconn)) {
 8000f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fcfc 	bl	8000924 <http_server>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d03c      	beq.n	8000fac <HTTP_Task+0xe0>
        	  xEventGroupSetBits(xEventGroup, BIT_0);
 8000f32:	4b27      	ldr	r3, [pc, #156]	; (8000fd0 <HTTP_Task+0x104>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2101      	movs	r1, #1
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f005 f8f0 	bl	800611e <xEventGroupSetBits>

    		  feedback_combined.status.lock_motors = lock_motors;
 8000f3e:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <HTTP_Task+0x108>)
 8000f40:	781a      	ldrb	r2, [r3, #0]
 8000f42:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <HTTP_Task+0x10c>)
 8000f44:	745a      	strb	r2, [r3, #17]
    		  feedback_combined.status.fire_laser = fire_laser;
 8000f46:	4b25      	ldr	r3, [pc, #148]	; (8000fdc <HTTP_Task+0x110>)
 8000f48:	781a      	ldrb	r2, [r3, #0]
 8000f4a:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <HTTP_Task+0x10c>)
 8000f4c:	749a      	strb	r2, [r3, #18]
    		  feedback_combined.status.motor_mode = motor_mode;  // True for scanning and False for manual
 8000f4e:	4b24      	ldr	r3, [pc, #144]	; (8000fe0 <HTTP_Task+0x114>)
 8000f50:	781a      	ldrb	r2, [r3, #0]
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <HTTP_Task+0x10c>)
 8000f54:	74da      	strb	r2, [r3, #19]
    		  feedback_combined.has_status = true;
 8000f56:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <HTTP_Task+0x10c>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	741a      	strb	r2, [r3, #16]
    		  feedback_combined.has_servo_data = false;
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <HTTP_Task+0x10c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]

    		  pb_ostream_t stream = pb_ostream_from_buffer(buffer, sizeof(buffer));
 8000f62:	f107 030c 	add.w	r3, r7, #12
 8000f66:	f107 0120 	add.w	r1, r7, #32
 8000f6a:	2220      	movs	r2, #32
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f017 fb43 	bl	80185f8 <pb_ostream_from_buffer>
    		  bool status = pb_encode(&stream, CombinedData_fields, &feedback_combined);
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	4a18      	ldr	r2, [pc, #96]	; (8000fd8 <HTTP_Task+0x10c>)
 8000f78:	491a      	ldr	r1, [pc, #104]	; (8000fe4 <HTTP_Task+0x118>)
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f017 ffa9 	bl	8018ed2 <pb_encode>
 8000f80:	4603      	mov	r3, r0
 8000f82:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    		  message_length = stream.bytes_written;
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	647b      	str	r3, [r7, #68]	; 0x44

    		  if (!status) {
 8000f8a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000f8e:	f083 0301 	eor.w	r3, r3, #1
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <HTTP_Task+0xd0>
    			  Error_Handler();  // Handle encoding error
 8000f98:	f000 f89d 	bl	80010d6 <Error_Handler>
    		  }

    		  // Send the data over CAN
    		  SendCANMessage(buffer, message_length, 0x441);
 8000f9c:	f107 0320 	add.w	r3, r7, #32
 8000fa0:	f240 4241 	movw	r2, #1089	; 0x441
 8000fa4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fc46 	bl	8000838 <SendCANMessage>
          }

          /* delete connection */
          netconn_delete(newconn);
 8000fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f007 ff88 	bl	8008ec4 <netconn_delete>
        }
        vTaskDelay(pdMS_TO_TICKS(20));  // 10 ms delay
 8000fb4:	2014      	movs	r0, #20
 8000fb6:	f006 fb9f 	bl	80076f8 <vTaskDelay>
        accept_err = netconn_accept(conn, &newconn);
 8000fba:	e7a6      	b.n	8000f0a <HTTP_Task+0x3e>
      }
    }
  }

  vTaskDelay(pdMS_TO_TICKS(10));
 8000fbc:	200a      	movs	r0, #10
 8000fbe:	f006 fb9b 	bl	80076f8 <vTaskDelay>
  /* USER CODE END 5 */
}
 8000fc2:	bf00      	nop
 8000fc4:	3750      	adds	r7, #80	; 0x50
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	08029558 	.word	0x08029558
 8000fd0:	200005e4 	.word	0x200005e4
 8000fd4:	200005e8 	.word	0x200005e8
 8000fd8:	20000668 	.word	0x20000668
 8000fdc:	200005e9 	.word	0x200005e9
 8000fe0:	200005ea 	.word	0x200005ea
 8000fe4:	0801ff88 	.word	0x0801ff88

08000fe8 <TCP_Server_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TCP_Server_Task */
void TCP_Server_Task(void const * argument)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b0ac      	sub	sp, #176	; 0xb0
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TCP_Server_Task */
    err_t err, accept_err;
    struct netconn *conn, *newconn;

    conn = netconn_new(NETCONN_TCP);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2010      	movs	r0, #16
 8000ff6:	f007 fec7 	bl	8008d88 <netconn_new_with_proto_and_callback>
 8000ffa:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

    if (conn != NULL)
 8000ffe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001002:	2b00      	cmp	r3, #0
 8001004:	d04d      	beq.n	80010a2 <TCP_Server_Task+0xba>
    {
        err = netconn_bind(conn, IP_ADDR_ANY, 7); // Port 7
 8001006:	2207      	movs	r2, #7
 8001008:	4928      	ldr	r1, [pc, #160]	; (80010ac <TCP_Server_Task+0xc4>)
 800100a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800100e:	f007 ff75 	bl	8008efc <netconn_bind>
 8001012:	4603      	mov	r3, r0
 8001014:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        if (err == ERR_OK)
 8001018:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d13c      	bne.n	800109a <TCP_Server_Task+0xb2>
        {
            netconn_listen(conn);
 8001020:	21ff      	movs	r1, #255	; 0xff
 8001022:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8001026:	f007 ffa1 	bl	8008f6c <netconn_listen_with_backlog>
            while (1)
            {
                accept_err = netconn_accept(conn, &newconn);
 800102a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800102e:	4619      	mov	r1, r3
 8001030:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8001034:	f007 ffc6 	bl	8008fc4 <netconn_accept>
 8001038:	4603      	mov	r3, r0
 800103a:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
                if (accept_err == ERR_OK)
 800103e:	f997 30a2 	ldrsb.w	r3, [r7, #162]	; 0xa2
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f1      	bne.n	800102a <TCP_Server_Task+0x42>
                {
                    while (1) // Keep the connection open to keep sending data
                    {
                        // Serialize the received_combined protobuf message
                        uint8_t buffer[128]; // Buffer size can be adjusted based on your message size
                        pb_ostream_t stream = pb_ostream_from_buffer(buffer, sizeof(buffer));
 8001046:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800104a:	f107 0108 	add.w	r1, r7, #8
 800104e:	2280      	movs	r2, #128	; 0x80
 8001050:	4618      	mov	r0, r3
 8001052:	f017 fad1 	bl	80185f8 <pb_ostream_from_buffer>
                        bool status = pb_encode(&stream, CombinedData_fields, &received_combined);
 8001056:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800105a:	4a15      	ldr	r2, [pc, #84]	; (80010b0 <TCP_Server_Task+0xc8>)
 800105c:	4915      	ldr	r1, [pc, #84]	; (80010b4 <TCP_Server_Task+0xcc>)
 800105e:	4618      	mov	r0, r3
 8001060:	f017 ff37 	bl	8018ed2 <pb_encode>
 8001064:	4603      	mov	r3, r0
 8001066:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1

                        if (!status) {
 800106a:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 800106e:	f083 0301 	eor.w	r3, r3, #1
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d10e      	bne.n	8001096 <TCP_Server_Task+0xae>
                            // Handle the encoding error if needed
                            continue;
                        }

                        // Send the serialized message to the client
                        netconn_write(newconn, buffer, stream.bytes_written, NETCONN_COPY);
 8001078:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800107c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001080:	f107 0108 	add.w	r1, r7, #8
 8001084:	2300      	movs	r3, #0
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2301      	movs	r3, #1
 800108a:	f008 fa1d 	bl	80094c8 <netconn_write_partly>

                        // Delay to simulate continuous data sending
                        vTaskDelay(pdMS_TO_TICKS(20));  // 1-second delay
 800108e:	2014      	movs	r0, #20
 8001090:	f006 fb32 	bl	80076f8 <vTaskDelay>
 8001094:	e7d7      	b.n	8001046 <TCP_Server_Task+0x5e>
                            continue;
 8001096:	bf00      	nop
                    {
 8001098:	e7d5      	b.n	8001046 <TCP_Server_Task+0x5e>
                }
            }
        }
        else
        {
            netconn_delete(conn);
 800109a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800109e:	f007 ff11 	bl	8008ec4 <netconn_delete>
        }
    }
  /* USER CODE END TCP_Server_Task */
}
 80010a2:	bf00      	nop
 80010a4:	37a8      	adds	r7, #168	; 0xa8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	08029558 	.word	0x08029558
 80010b0:	20000654 	.word	0x20000654
 80010b4:	0801ff88 	.word	0x0801ff88

080010b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010c8:	d101      	bne.n	80010ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010ca:	f000 fb4d 	bl	8001768 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010da:	b672      	cpsid	i
}
 80010dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010de:	e7fe      	b.n	80010de <Error_Handler+0x8>

080010e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_MspInit+0x4c>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	4a10      	ldr	r2, [pc, #64]	; (800112c <HAL_MspInit+0x4c>)
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f0:	6413      	str	r3, [r2, #64]	; 0x40
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_MspInit+0x4c>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_MspInit+0x4c>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <HAL_MspInit+0x4c>)
 8001104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <HAL_MspInit+0x4c>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	210f      	movs	r1, #15
 800111a:	f06f 0001 	mvn.w	r0, #1
 800111e:	f001 fa93 	bl	8002648 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800

08001130 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a1b      	ldr	r2, [pc, #108]	; (80011bc <HAL_CAN_MspInit+0x8c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d130      	bne.n	80011b4 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001152:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <HAL_CAN_MspInit+0x90>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	4a1a      	ldr	r2, [pc, #104]	; (80011c0 <HAL_CAN_MspInit+0x90>)
 8001158:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800115c:	6413      	str	r3, [r2, #64]	; 0x40
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <HAL_CAN_MspInit+0x90>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_CAN_MspInit+0x90>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <HAL_CAN_MspInit+0x90>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_CAN_MspInit+0x90>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001182:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001194:	2309      	movs	r3, #9
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	4809      	ldr	r0, [pc, #36]	; (80011c4 <HAL_CAN_MspInit+0x94>)
 80011a0:	f002 fce4 	bl	8003b6c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2105      	movs	r1, #5
 80011a8:	2015      	movs	r0, #21
 80011aa:	f001 fa4d 	bl	8002648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80011ae:	2015      	movs	r0, #21
 80011b0:	f001 fa66 	bl	8002680 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40006400 	.word	0x40006400
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020000 	.word	0x40020000

080011c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08e      	sub	sp, #56	; 0x38
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80011d8:	4b34      	ldr	r3, [pc, #208]	; (80012ac <HAL_InitTick+0xe4>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	4a33      	ldr	r2, [pc, #204]	; (80012ac <HAL_InitTick+0xe4>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6413      	str	r3, [r2, #64]	; 0x40
 80011e4:	4b31      	ldr	r3, [pc, #196]	; (80012ac <HAL_InitTick+0xe4>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011f0:	f107 0210 	add.w	r2, r7, #16
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4611      	mov	r1, r2
 80011fa:	4618      	mov	r0, r3
 80011fc:	f003 fb32 	bl	8004864 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001206:	2b00      	cmp	r3, #0
 8001208:	d103      	bne.n	8001212 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800120a:	f003 fb17 	bl	800483c <HAL_RCC_GetPCLK1Freq>
 800120e:	6378      	str	r0, [r7, #52]	; 0x34
 8001210:	e004      	b.n	800121c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001212:	f003 fb13 	bl	800483c <HAL_RCC_GetPCLK1Freq>
 8001216:	4603      	mov	r3, r0
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800121c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800121e:	4a24      	ldr	r2, [pc, #144]	; (80012b0 <HAL_InitTick+0xe8>)
 8001220:	fba2 2303 	umull	r2, r3, r2, r3
 8001224:	0c9b      	lsrs	r3, r3, #18
 8001226:	3b01      	subs	r3, #1
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800122a:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <HAL_InitTick+0xec>)
 800122c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001230:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <HAL_InitTick+0xec>)
 8001234:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001238:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800123a:	4a1e      	ldr	r2, [pc, #120]	; (80012b4 <HAL_InitTick+0xec>)
 800123c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <HAL_InitTick+0xec>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <HAL_InitTick+0xec>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <HAL_InitTick+0xec>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001252:	4818      	ldr	r0, [pc, #96]	; (80012b4 <HAL_InitTick+0xec>)
 8001254:	f003 fb38 	bl	80048c8 <HAL_TIM_Base_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800125e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001262:	2b00      	cmp	r3, #0
 8001264:	d11b      	bne.n	800129e <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001266:	4813      	ldr	r0, [pc, #76]	; (80012b4 <HAL_InitTick+0xec>)
 8001268:	f003 fb90 	bl	800498c <HAL_TIM_Base_Start_IT>
 800126c:	4603      	mov	r3, r0
 800126e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001272:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001276:	2b00      	cmp	r3, #0
 8001278:	d111      	bne.n	800129e <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800127a:	201c      	movs	r0, #28
 800127c:	f001 fa00 	bl	8002680 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b0f      	cmp	r3, #15
 8001284:	d808      	bhi.n	8001298 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001286:	2200      	movs	r2, #0
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	201c      	movs	r0, #28
 800128c:	f001 f9dc 	bl	8002648 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001290:	4a09      	ldr	r2, [pc, #36]	; (80012b8 <HAL_InitTick+0xf0>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e002      	b.n	800129e <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800129e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3738      	adds	r7, #56	; 0x38
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	431bde83 	.word	0x431bde83
 80012b4:	20000684 	.word	0x20000684
 80012b8:	20000008 	.word	0x20000008

080012bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <NMI_Handler+0x4>

080012c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <HardFault_Handler+0x4>

080012c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <MemManage_Handler+0x4>

080012ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <BusFault_Handler+0x4>

080012d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <UsageFault_Handler+0x4>

080012da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <CAN1_RX1_IRQHandler+0x10>)
 80012ee:	f000 fec3 	bl	8002078 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200005b4 	.word	0x200005b4

080012fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <TIM2_IRQHandler+0x10>)
 8001302:	f003 fbbb 	bl	8004a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000684 	.word	0x20000684

08001310 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <ETH_IRQHandler+0x10>)
 8001316:	f001 fd4f 	bl	8002db8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200050b8 	.word	0x200050b8

08001324 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return 1;
 8001328:	2301      	movs	r3, #1
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <_kill>:

int _kill(int pid, int sig)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800133e:	4b05      	ldr	r3, [pc, #20]	; (8001354 <_kill+0x20>)
 8001340:	2216      	movs	r2, #22
 8001342:	601a      	str	r2, [r3, #0]
  return -1;
 8001344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	200115d8 	.word	0x200115d8

08001358 <_exit>:

void _exit (int status)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001360:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ffe5 	bl	8001334 <_kill>
  while (1) {}    /* Make sure we hang here */
 800136a:	e7fe      	b.n	800136a <_exit+0x12>

0800136c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	e00a      	b.n	8001394 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800137e:	f3af 8000 	nop.w
 8001382:	4601      	mov	r1, r0
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	60ba      	str	r2, [r7, #8]
 800138a:	b2ca      	uxtb	r2, r1
 800138c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	3301      	adds	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	429a      	cmp	r2, r3
 800139a:	dbf0      	blt.n	800137e <_read+0x12>
  }

  return len;
 800139c:	687b      	ldr	r3, [r7, #4]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	e009      	b.n	80013cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	60ba      	str	r2, [r7, #8]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	3301      	adds	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	dbf1      	blt.n	80013b8 <_write+0x12>
  }
  return len;
 80013d4:	687b      	ldr	r3, [r7, #4]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <_close>:

int _close(int file)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001406:	605a      	str	r2, [r3, #4]
  return 0;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <_isatty>:

int _isatty(int file)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800141e:	2301      	movs	r3, #1
}
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001448:	b480      	push	{r7}
 800144a:	b087      	sub	sp, #28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001450:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <_sbrk+0x5c>)
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <_sbrk+0x60>)
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <_sbrk+0x64>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d102      	bne.n	800146a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <_sbrk+0x64>)
 8001466:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <_sbrk+0x68>)
 8001468:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	429a      	cmp	r2, r3
 8001476:	d205      	bcs.n	8001484 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001478:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <_sbrk+0x6c>)
 800147a:	220c      	movs	r2, #12
 800147c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001482:	e009      	b.n	8001498 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	4a06      	ldr	r2, [pc, #24]	; (80014ac <_sbrk+0x64>)
 8001494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	371c      	adds	r7, #28
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	20080000 	.word	0x20080000
 80014a8:	00000400 	.word	0x00000400
 80014ac:	200006d0 	.word	0x200006d0
 80014b0:	200115f0 	.word	0x200115f0
 80014b4:	200115d8 	.word	0x200115d8

080014b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <SystemInit+0x20>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <SystemInit+0x20>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001514 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014e0:	f7ff ffea 	bl	80014b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e4:	480c      	ldr	r0, [pc, #48]	; (8001518 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014e6:	490d      	ldr	r1, [pc, #52]	; (800151c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ec:	e002      	b.n	80014f4 <LoopCopyDataInit>

080014ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f2:	3304      	adds	r3, #4

080014f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f8:	d3f9      	bcc.n	80014ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014fc:	4c0a      	ldr	r4, [pc, #40]	; (8001528 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001500:	e001      	b.n	8001506 <LoopFillZerobss>

08001502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001504:	3204      	adds	r2, #4

08001506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001508:	d3fb      	bcc.n	8001502 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800150a:	f018 f939 	bl	8019780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800150e:	f7ff fb83 	bl	8000c18 <main>
  bx  lr    
 8001512:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001514:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800151c:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8001520:	080299c0 	.word	0x080299c0
  ldr r2, =_sbss
 8001524:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8001528:	200115ec 	.word	0x200115ec

0800152c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800152c:	e7fe      	b.n	800152c <ADC_IRQHandler>

0800152e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00b      	beq.n	8001556 <LAN8742_RegisterBusIO+0x28>
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d007      	beq.n	8001556 <LAN8742_RegisterBusIO+0x28>
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <LAN8742_RegisterBusIO+0x28>
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d102      	bne.n	800155c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800155a:	e014      	b.n	8001586 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	691a      	ldr	r2, [r3, #16]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001592:	b580      	push	{r7, lr}
 8001594:	b086      	sub	sp, #24
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d139      	bne.n	8001622 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2220      	movs	r2, #32
 80015c0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	e01c      	b.n	8001602 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	f107 020c 	add.w	r2, r7, #12
 80015d0:	2112      	movs	r1, #18
 80015d2:	6978      	ldr	r0, [r7, #20]
 80015d4:	4798      	blx	r3
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	da03      	bge.n	80015e4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80015dc:	f06f 0304 	mvn.w	r3, #4
 80015e0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80015e2:	e00b      	b.n	80015fc <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 031f 	and.w	r3, r3, #31
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d105      	bne.n	80015fc <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
         break;
 80015fa:	e005      	b.n	8001608 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	3301      	adds	r3, #1
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	2b1f      	cmp	r3, #31
 8001606:	d9df      	bls.n	80015c8 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b1f      	cmp	r3, #31
 800160e:	d902      	bls.n	8001616 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001610:	f06f 0302 	mvn.w	r3, #2
 8001614:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001622:	693b      	ldr	r3, [r7, #16]
 }
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6810      	ldr	r0, [r2, #0]
 8001640:	f107 020c 	add.w	r2, r7, #12
 8001644:	2101      	movs	r1, #1
 8001646:	4798      	blx	r3
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	da02      	bge.n	8001654 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800164e:	f06f 0304 	mvn.w	r3, #4
 8001652:	e06e      	b.n	8001732 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6810      	ldr	r0, [r2, #0]
 800165c:	f107 020c 	add.w	r2, r7, #12
 8001660:	2101      	movs	r1, #1
 8001662:	4798      	blx	r3
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	da02      	bge.n	8001670 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800166a:	f06f 0304 	mvn.w	r3, #4
 800166e:	e060      	b.n	8001732 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800167a:	2301      	movs	r3, #1
 800167c:	e059      	b.n	8001732 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6810      	ldr	r0, [r2, #0]
 8001686:	f107 020c 	add.w	r2, r7, #12
 800168a:	2100      	movs	r1, #0
 800168c:	4798      	blx	r3
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	da02      	bge.n	800169a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001694:	f06f 0304 	mvn.w	r3, #4
 8001698:	e04b      	b.n	8001732 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d11b      	bne.n	80016dc <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d006      	beq.n	80016bc <LAN8742_GetLinkState+0x90>
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80016b8:	2302      	movs	r3, #2
 80016ba:	e03a      	b.n	8001732 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e033      	b.n	8001732 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80016d4:	2304      	movs	r3, #4
 80016d6:	e02c      	b.n	8001732 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80016d8:	2305      	movs	r3, #5
 80016da:	e02a      	b.n	8001732 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6810      	ldr	r0, [r2, #0]
 80016e4:	f107 020c 	add.w	r2, r7, #12
 80016e8:	211f      	movs	r1, #31
 80016ea:	4798      	blx	r3
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	da02      	bge.n	80016f8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80016f2:	f06f 0304 	mvn.w	r3, #4
 80016f6:	e01c      	b.n	8001732 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001702:	2306      	movs	r3, #6
 8001704:	e015      	b.n	8001732 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f003 031c 	and.w	r3, r3, #28
 800170c:	2b18      	cmp	r3, #24
 800170e:	d101      	bne.n	8001714 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001710:	2302      	movs	r3, #2
 8001712:	e00e      	b.n	8001732 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 031c 	and.w	r3, r3, #28
 800171a:	2b08      	cmp	r3, #8
 800171c:	d101      	bne.n	8001722 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800171e:	2303      	movs	r3, #3
 8001720:	e007      	b.n	8001732 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f003 031c 	and.w	r3, r3, #28
 8001728:	2b14      	cmp	r3, #20
 800172a:	d101      	bne.n	8001730 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800172c:	2304      	movs	r3, #4
 800172e:	e000      	b.n	8001732 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001730:	2305      	movs	r3, #5
    }
  }
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_Init+0x28>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <HAL_Init+0x28>)
 8001746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174c:	2003      	movs	r0, #3
 800174e:	f000 ff70 	bl	8002632 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001752:	200f      	movs	r0, #15
 8001754:	f7ff fd38 	bl	80011c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001758:	f7ff fcc2 	bl	80010e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023c00 	.word	0x40023c00

08001768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_IncTick+0x20>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_IncTick+0x24>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_IncTick+0x24>)
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	2000000c 	.word	0x2000000c
 800178c:	200006d4 	.word	0x200006d4

08001790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <HAL_GetTick+0x14>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	200006d4 	.word	0x200006d4

080017a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b0:	f7ff ffee 	bl	8001790 <HAL_GetTick>
 80017b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017c0:	d005      	beq.n	80017ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_Delay+0x44>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4413      	add	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ce:	bf00      	nop
 80017d0:	f7ff ffde 	bl	8001790 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d8f7      	bhi.n	80017d0 <HAL_Delay+0x28>
  {
  }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2000000c 	.word	0x2000000c

080017f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e0ed      	b.n	80019de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d102      	bne.n	8001814 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff fc8e 	bl	8001130 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 0201 	orr.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001824:	f7ff ffb4 	bl	8001790 <HAL_GetTick>
 8001828:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800182a:	e012      	b.n	8001852 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800182c:	f7ff ffb0 	bl	8001790 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b0a      	cmp	r3, #10
 8001838:	d90b      	bls.n	8001852 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2205      	movs	r2, #5
 800184a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e0c5      	b.n	80019de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0e5      	beq.n	800182c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 0202 	bic.w	r2, r2, #2
 800186e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001870:	f7ff ff8e 	bl	8001790 <HAL_GetTick>
 8001874:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001876:	e012      	b.n	800189e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001878:	f7ff ff8a 	bl	8001790 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b0a      	cmp	r3, #10
 8001884:	d90b      	bls.n	800189e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2205      	movs	r2, #5
 8001896:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e09f      	b.n	80019de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1e5      	bne.n	8001878 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7e1b      	ldrb	r3, [r3, #24]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d108      	bne.n	80018c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	e007      	b.n	80018d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	7e5b      	ldrb	r3, [r3, #25]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d108      	bne.n	80018f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	e007      	b.n	8001900 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	7e9b      	ldrb	r3, [r3, #26]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d108      	bne.n	800191a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0220 	orr.w	r2, r2, #32
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	e007      	b.n	800192a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0220 	bic.w	r2, r2, #32
 8001928:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	7edb      	ldrb	r3, [r3, #27]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d108      	bne.n	8001944 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0210 	bic.w	r2, r2, #16
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	e007      	b.n	8001954 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0210 	orr.w	r2, r2, #16
 8001952:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	7f1b      	ldrb	r3, [r3, #28]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d108      	bne.n	800196e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0208 	orr.w	r2, r2, #8
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	e007      	b.n	800197e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0208 	bic.w	r2, r2, #8
 800197c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	7f5b      	ldrb	r3, [r3, #29]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d108      	bne.n	8001998 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0204 	orr.w	r2, r2, #4
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	e007      	b.n	80019a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0204 	bic.w	r2, r2, #4
 80019a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	ea42 0103 	orr.w	r1, r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	1e5a      	subs	r2, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019fe:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a00:	7cfb      	ldrb	r3, [r7, #19]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d003      	beq.n	8001a0e <HAL_CAN_ConfigFilter+0x26>
 8001a06:	7cfb      	ldrb	r3, [r7, #19]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	f040 80c7 	bne.w	8001b9c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a69      	ldr	r2, [pc, #420]	; (8001bb8 <HAL_CAN_ConfigFilter+0x1d0>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d001      	beq.n	8001a1c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001a18:	4b68      	ldr	r3, [pc, #416]	; (8001bbc <HAL_CAN_ConfigFilter+0x1d4>)
 8001a1a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a22:	f043 0201 	orr.w	r2, r3, #1
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	4a63      	ldr	r2, [pc, #396]	; (8001bbc <HAL_CAN_ConfigFilter+0x1d4>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d111      	bne.n	8001a58 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a3a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	021b      	lsls	r3, r3, #8
 8001a50:	431a      	orrs	r2, r3
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	f003 031f 	and.w	r3, r3, #31
 8001a60:	2201      	movs	r2, #1
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	401a      	ands	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d123      	bne.n	8001aca <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001aa4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3248      	adds	r2, #72	; 0x48
 8001aaa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001abe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ac0:	6979      	ldr	r1, [r7, #20]
 8001ac2:	3348      	adds	r3, #72	; 0x48
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	440b      	add	r3, r1
 8001ac8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d122      	bne.n	8001b18 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	431a      	orrs	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001af2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	3248      	adds	r2, #72	; 0x48
 8001af8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b0c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b0e:	6979      	ldr	r1, [r7, #20]
 8001b10:	3348      	adds	r3, #72	; 0x48
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	440b      	add	r3, r1
 8001b16:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d109      	bne.n	8001b34 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001b32:	e007      	b.n	8001b44 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	401a      	ands	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001b5e:	e007      	b.n	8001b70 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d107      	bne.n	8001b88 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	431a      	orrs	r2, r3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b8e:	f023 0201 	bic.w	r2, r3, #1
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e006      	b.n	8001baa <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
  }
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	371c      	adds	r7, #28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40003400 	.word	0x40003400
 8001bbc:	40006400 	.word	0x40006400

08001bc0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d12e      	bne.n	8001c32 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0201 	bic.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001bec:	f7ff fdd0 	bl	8001790 <HAL_GetTick>
 8001bf0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bf2:	e012      	b.n	8001c1a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bf4:	f7ff fdcc 	bl	8001790 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b0a      	cmp	r3, #10
 8001c00:	d90b      	bls.n	8001c1a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2205      	movs	r2, #5
 8001c12:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e012      	b.n	8001c40 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1e5      	bne.n	8001bf4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e006      	b.n	8001c40 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
  }
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b089      	sub	sp, #36	; 0x24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c5c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c66:	7ffb      	ldrb	r3, [r7, #31]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d003      	beq.n	8001c74 <HAL_CAN_AddTxMessage+0x2c>
 8001c6c:	7ffb      	ldrb	r3, [r7, #31]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	f040 80ad 	bne.w	8001dce <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10a      	bne.n	8001c94 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d105      	bne.n	8001c94 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 8095 	beq.w	8001dbe <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	0e1b      	lsrs	r3, r3, #24
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10d      	bne.n	8001ccc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001cba:	68f9      	ldr	r1, [r7, #12]
 8001cbc:	6809      	ldr	r1, [r1, #0]
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	3318      	adds	r3, #24
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	440b      	add	r3, r1
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	e00f      	b.n	8001cec <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cd6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cdc:	68f9      	ldr	r1, [r7, #12]
 8001cde:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001ce0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	3318      	adds	r3, #24
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	440b      	add	r3, r1
 8001cea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6819      	ldr	r1, [r3, #0]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	3318      	adds	r3, #24
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	440b      	add	r3, r1
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	7d1b      	ldrb	r3, [r3, #20]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d111      	bne.n	8001d2c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3318      	adds	r3, #24
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	4413      	add	r3, r2
 8001d14:	3304      	adds	r3, #4
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	6811      	ldr	r1, [r2, #0]
 8001d1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3318      	adds	r3, #24
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	440b      	add	r3, r1
 8001d28:	3304      	adds	r3, #4
 8001d2a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3307      	adds	r3, #7
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	061a      	lsls	r2, r3, #24
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3306      	adds	r3, #6
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	041b      	lsls	r3, r3, #16
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3305      	adds	r3, #5
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	4313      	orrs	r3, r2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	3204      	adds	r2, #4
 8001d4c:	7812      	ldrb	r2, [r2, #0]
 8001d4e:	4610      	mov	r0, r2
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	6811      	ldr	r1, [r2, #0]
 8001d54:	ea43 0200 	orr.w	r2, r3, r0
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	440b      	add	r3, r1
 8001d5e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001d62:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3303      	adds	r3, #3
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	061a      	lsls	r2, r3, #24
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3302      	adds	r3, #2
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	041b      	lsls	r3, r3, #16
 8001d74:	431a      	orrs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	021b      	lsls	r3, r3, #8
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	7812      	ldrb	r2, [r2, #0]
 8001d84:	4610      	mov	r0, r2
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	6811      	ldr	r1, [r2, #0]
 8001d8a:	ea43 0200 	orr.w	r2, r3, r0
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	440b      	add	r3, r1
 8001d94:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001d98:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	3318      	adds	r3, #24
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	4413      	add	r3, r2
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	6811      	ldr	r1, [r2, #0]
 8001dac:	f043 0201 	orr.w	r2, r3, #1
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3318      	adds	r3, #24
 8001db4:	011b      	lsls	r3, r3, #4
 8001db6:	440b      	add	r3, r1
 8001db8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e00e      	b.n	8001ddc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e006      	b.n	8001ddc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
  }
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3724      	adds	r7, #36	; 0x24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001de8:	b480      	push	{r7}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dfc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001dfe:	7dfb      	ldrb	r3, [r7, #23]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d003      	beq.n	8001e0c <HAL_CAN_GetRxMessage+0x24>
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	f040 8103 	bne.w	8002012 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10e      	bne.n	8001e30 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d116      	bne.n	8001e4e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0f7      	b.n	8002020 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d107      	bne.n	8001e4e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e0e8      	b.n	8002020 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	331b      	adds	r3, #27
 8001e56:	011b      	lsls	r3, r3, #4
 8001e58:	4413      	add	r3, r2
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0204 	and.w	r2, r3, #4
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10c      	bne.n	8001e86 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	331b      	adds	r3, #27
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	4413      	add	r3, r2
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	0d5b      	lsrs	r3, r3, #21
 8001e7c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	e00b      	b.n	8001e9e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	331b      	adds	r3, #27
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	4413      	add	r3, r2
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	08db      	lsrs	r3, r3, #3
 8001e96:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	331b      	adds	r3, #27
 8001ea6:	011b      	lsls	r3, r3, #4
 8001ea8:	4413      	add	r3, r2
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0202 	and.w	r2, r3, #2
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	331b      	adds	r3, #27
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2208      	movs	r2, #8
 8001ed0:	611a      	str	r2, [r3, #16]
 8001ed2:	e00b      	b.n	8001eec <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	331b      	adds	r3, #27
 8001edc:	011b      	lsls	r3, r3, #4
 8001ede:	4413      	add	r3, r2
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 020f 	and.w	r2, r3, #15
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	331b      	adds	r3, #27
 8001ef4:	011b      	lsls	r3, r3, #4
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3304      	adds	r3, #4
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	331b      	adds	r3, #27
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	4413      	add	r3, r2
 8001f10:	3304      	adds	r3, #4
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0c1b      	lsrs	r3, r3, #16
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	011b      	lsls	r3, r3, #4
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	0a1a      	lsrs	r2, r3, #8
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	3301      	adds	r3, #1
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	0c1a      	lsrs	r2, r3, #16
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	3302      	adds	r3, #2
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	0e1a      	lsrs	r2, r3, #24
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	3303      	adds	r3, #3
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	3304      	adds	r3, #4
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	0a1a      	lsrs	r2, r3, #8
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	3305      	adds	r3, #5
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	0c1a      	lsrs	r2, r3, #16
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	3306      	adds	r3, #6
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0e1a      	lsrs	r2, r3, #24
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	3307      	adds	r3, #7
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d108      	bne.n	8001ffe <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0220 	orr.w	r2, r2, #32
 8001ffa:	60da      	str	r2, [r3, #12]
 8001ffc:	e007      	b.n	800200e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f042 0220 	orr.w	r2, r2, #32
 800200c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800200e:	2300      	movs	r3, #0
 8002010:	e006      	b.n	8002020 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
  }
}
 8002020:	4618      	mov	r0, r3
 8002022:	371c      	adds	r7, #28
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3020 	ldrb.w	r3, [r3, #32]
 800203c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d002      	beq.n	800204a <HAL_CAN_ActivateNotification+0x1e>
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d109      	bne.n	800205e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6959      	ldr	r1, [r3, #20]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	e006      	b.n	800206c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
  }
}
 800206c:	4618      	mov	r0, r3
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	; 0x28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002080:	2300      	movs	r3, #0
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d07c      	beq.n	80021b8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d023      	beq.n	8002110 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2201      	movs	r2, #1
 80020ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f983 	bl	80023e6 <HAL_CAN_TxMailbox0CompleteCallback>
 80020e0:	e016      	b.n	8002110 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d004      	beq.n	80020f6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
 80020f4:	e00c      	b.n	8002110 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d004      	beq.n	800210a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
 8002108:	e002      	b.n	8002110 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f989 	bl	8002422 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d024      	beq.n	8002164 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002122:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f963 	bl	80023fa <HAL_CAN_TxMailbox1CompleteCallback>
 8002134:	e016      	b.n	8002164 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213c:	2b00      	cmp	r3, #0
 800213e:	d004      	beq.n	800214a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
 8002148:	e00c      	b.n	8002164 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002150:	2b00      	cmp	r3, #0
 8002152:	d004      	beq.n	800215e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
 800215c:	e002      	b.n	8002164 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f969 	bl	8002436 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d024      	beq.n	80021b8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002176:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f943 	bl	800240e <HAL_CAN_TxMailbox2CompleteCallback>
 8002188:	e016      	b.n	80021b8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d004      	beq.n	800219e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
 800219c:	e00c      	b.n	80021b8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d004      	beq.n	80021b2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
 80021b0:	e002      	b.n	80021b8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f949 	bl	800244a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80021b8:	6a3b      	ldr	r3, [r7, #32]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00c      	beq.n	80021dc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f003 0310 	and.w	r3, r3, #16
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d007      	beq.n	80021dc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2210      	movs	r2, #16
 80021da:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d006      	beq.n	80021fe <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2208      	movs	r2, #8
 80021f6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f93a 	bl	8002472 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d009      	beq.n	800221c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f921 	bl	800245e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00c      	beq.n	8002240 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f003 0310 	and.w	r3, r3, #16
 800222c:	2b00      	cmp	r3, #0
 800222e:	d007      	beq.n	8002240 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002236:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2210      	movs	r2, #16
 800223e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	f003 0320 	and.w	r3, r3, #32
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00b      	beq.n	8002262 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d006      	beq.n	8002262 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2208      	movs	r2, #8
 800225a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f912 	bl	8002486 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b00      	cmp	r3, #0
 800226a:	d009      	beq.n	8002280 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7fe fa4e 	bl	800071c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00b      	beq.n	80022a2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	2b00      	cmp	r3, #0
 8002292:	d006      	beq.n	80022a2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2210      	movs	r2, #16
 800229a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f8fc 	bl	800249a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80022a2:	6a3b      	ldr	r3, [r7, #32]
 80022a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00b      	beq.n	80022c4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d006      	beq.n	80022c4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2208      	movs	r2, #8
 80022bc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f8f5 	bl	80024ae <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d07b      	beq.n	80023c6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d072      	beq.n	80023be <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022d8:	6a3b      	ldr	r3, [r7, #32]
 80022da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d008      	beq.n	80022f4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d008      	beq.n	8002310 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	f043 0302 	orr.w	r3, r3, #2
 800230e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002316:	2b00      	cmp	r3, #0
 8002318:	d008      	beq.n	800232c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	f043 0304 	orr.w	r3, r3, #4
 800232a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002332:	2b00      	cmp	r3, #0
 8002334:	d043      	beq.n	80023be <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800233c:	2b00      	cmp	r3, #0
 800233e:	d03e      	beq.n	80023be <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002346:	2b60      	cmp	r3, #96	; 0x60
 8002348:	d02b      	beq.n	80023a2 <HAL_CAN_IRQHandler+0x32a>
 800234a:	2b60      	cmp	r3, #96	; 0x60
 800234c:	d82e      	bhi.n	80023ac <HAL_CAN_IRQHandler+0x334>
 800234e:	2b50      	cmp	r3, #80	; 0x50
 8002350:	d022      	beq.n	8002398 <HAL_CAN_IRQHandler+0x320>
 8002352:	2b50      	cmp	r3, #80	; 0x50
 8002354:	d82a      	bhi.n	80023ac <HAL_CAN_IRQHandler+0x334>
 8002356:	2b40      	cmp	r3, #64	; 0x40
 8002358:	d019      	beq.n	800238e <HAL_CAN_IRQHandler+0x316>
 800235a:	2b40      	cmp	r3, #64	; 0x40
 800235c:	d826      	bhi.n	80023ac <HAL_CAN_IRQHandler+0x334>
 800235e:	2b30      	cmp	r3, #48	; 0x30
 8002360:	d010      	beq.n	8002384 <HAL_CAN_IRQHandler+0x30c>
 8002362:	2b30      	cmp	r3, #48	; 0x30
 8002364:	d822      	bhi.n	80023ac <HAL_CAN_IRQHandler+0x334>
 8002366:	2b10      	cmp	r3, #16
 8002368:	d002      	beq.n	8002370 <HAL_CAN_IRQHandler+0x2f8>
 800236a:	2b20      	cmp	r3, #32
 800236c:	d005      	beq.n	800237a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800236e:	e01d      	b.n	80023ac <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	f043 0308 	orr.w	r3, r3, #8
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002378:	e019      	b.n	80023ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	f043 0310 	orr.w	r3, r3, #16
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002382:	e014      	b.n	80023ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	f043 0320 	orr.w	r3, r3, #32
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800238c:	e00f      	b.n	80023ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002396:	e00a      	b.n	80023ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023a0:	e005      	b.n	80023ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023aa:	e000      	b.n	80023ae <HAL_CAN_IRQHandler+0x336>
            break;
 80023ac:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699a      	ldr	r2, [r3, #24]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023bc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2204      	movs	r2, #4
 80023c4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d008      	beq.n	80023de <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f872 	bl	80024c2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80023de:	bf00      	nop
 80023e0:	3728      	adds	r7, #40	; 0x28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <__NVIC_SetPriorityGrouping>:
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <__NVIC_SetPriorityGrouping+0x40>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024f4:	4013      	ands	r3, r2
 80024f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <__NVIC_SetPriorityGrouping+0x44>)
 8002502:	4313      	orrs	r3, r2
 8002504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002506:	4a04      	ldr	r2, [pc, #16]	; (8002518 <__NVIC_SetPriorityGrouping+0x40>)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	60d3      	str	r3, [r2, #12]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000ed00 	.word	0xe000ed00
 800251c:	05fa0000 	.word	0x05fa0000

08002520 <__NVIC_GetPriorityGrouping>:
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002524:	4b04      	ldr	r3, [pc, #16]	; (8002538 <__NVIC_GetPriorityGrouping+0x18>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	0a1b      	lsrs	r3, r3, #8
 800252a:	f003 0307 	and.w	r3, r3, #7
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <__NVIC_EnableIRQ>:
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	2b00      	cmp	r3, #0
 800254c:	db0b      	blt.n	8002566 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	f003 021f 	and.w	r2, r3, #31
 8002554:	4907      	ldr	r1, [pc, #28]	; (8002574 <__NVIC_EnableIRQ+0x38>)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	2001      	movs	r0, #1
 800255e:	fa00 f202 	lsl.w	r2, r0, r2
 8002562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	e000e100 	.word	0xe000e100

08002578 <__NVIC_SetPriority>:
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	6039      	str	r1, [r7, #0]
 8002582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002588:	2b00      	cmp	r3, #0
 800258a:	db0a      	blt.n	80025a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	490c      	ldr	r1, [pc, #48]	; (80025c4 <__NVIC_SetPriority+0x4c>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	0112      	lsls	r2, r2, #4
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	440b      	add	r3, r1
 800259c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80025a0:	e00a      	b.n	80025b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4908      	ldr	r1, [pc, #32]	; (80025c8 <__NVIC_SetPriority+0x50>)
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	3b04      	subs	r3, #4
 80025b0:	0112      	lsls	r2, r2, #4
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	440b      	add	r3, r1
 80025b6:	761a      	strb	r2, [r3, #24]
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000e100 	.word	0xe000e100
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <NVIC_EncodePriority>:
{
 80025cc:	b480      	push	{r7}
 80025ce:	b089      	sub	sp, #36	; 0x24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f1c3 0307 	rsb	r3, r3, #7
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	bf28      	it	cs
 80025ea:	2304      	movcs	r3, #4
 80025ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3304      	adds	r3, #4
 80025f2:	2b06      	cmp	r3, #6
 80025f4:	d902      	bls.n	80025fc <NVIC_EncodePriority+0x30>
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3b03      	subs	r3, #3
 80025fa:	e000      	b.n	80025fe <NVIC_EncodePriority+0x32>
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43da      	mvns	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	401a      	ands	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002614:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	43d9      	mvns	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002624:	4313      	orrs	r3, r2
}
 8002626:	4618      	mov	r0, r3
 8002628:	3724      	adds	r7, #36	; 0x24
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff ff4c 	bl	80024d8 <__NVIC_SetPriorityGrouping>
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800265a:	f7ff ff61 	bl	8002520 <__NVIC_GetPriorityGrouping>
 800265e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	6978      	ldr	r0, [r7, #20]
 8002666:	f7ff ffb1 	bl	80025cc <NVIC_EncodePriority>
 800266a:	4602      	mov	r2, r0
 800266c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff ff80 	bl	8002578 <__NVIC_SetPriority>
}
 8002678:	bf00      	nop
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff ff54 	bl	800253c <__NVIC_EnableIRQ>
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e086      	b.n	80027bc <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d106      	bne.n	80026c6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2223      	movs	r2, #35	; 0x23
 80026bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f002 ffed 	bl	80056a0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	4b3f      	ldr	r3, [pc, #252]	; (80027c4 <HAL_ETH_Init+0x128>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	4a3e      	ldr	r2, [pc, #248]	; (80027c4 <HAL_ETH_Init+0x128>)
 80026cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d0:	6453      	str	r3, [r2, #68]	; 0x44
 80026d2:	4b3c      	ldr	r3, [pc, #240]	; (80027c4 <HAL_ETH_Init+0x128>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80026de:	4b3a      	ldr	r3, [pc, #232]	; (80027c8 <HAL_ETH_Init+0x12c>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4a39      	ldr	r2, [pc, #228]	; (80027c8 <HAL_ETH_Init+0x12c>)
 80026e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80026e8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80026ea:	4b37      	ldr	r3, [pc, #220]	; (80027c8 <HAL_ETH_Init+0x12c>)
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	4935      	ldr	r1, [pc, #212]	; (80027c8 <HAL_ETH_Init+0x12c>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80026f8:	4b33      	ldr	r3, [pc, #204]	; (80027c8 <HAL_ETH_Init+0x12c>)
 80026fa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002712:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002714:	f7ff f83c 	bl	8001790 <HAL_GetTick>
 8002718:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800271a:	e011      	b.n	8002740 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800271c:	f7ff f838 	bl	8001790 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800272a:	d909      	bls.n	8002740 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2204      	movs	r2, #4
 8002730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	22e0      	movs	r2, #224	; 0xe0
 8002738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e03d      	b.n	80027bc <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1e4      	bne.n	800271c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 ff4e 	bl	80035f4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 fff9 	bl	8003750 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f001 f84f 	bl	8003802 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	461a      	mov	r2, r3
 800276a:	2100      	movs	r1, #0
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 ffb7 	bl	80036e0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8002780:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <HAL_ETH_Init+0x130>)
 8002790:	430b      	orrs	r3, r1
 8002792:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80027a6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2210      	movs	r2, #16
 80027b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40013800 	.word	0x40013800
 80027cc:	00020060 	.word	0x00020060

080027d0 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027de:	2b10      	cmp	r3, #16
 80027e0:	d15f      	bne.n	80028a2 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2223      	movs	r2, #35	; 0x23
 80027e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2204      	movs	r2, #4
 80027f4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f9f6 	bl	8002be8 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002804:	2001      	movs	r0, #1
 8002806:	f7fe ffcf 	bl	80017a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002824:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002828:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	f043 0302 	orr.w	r3, r3, #2
 800283c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002840:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fd73 	bl	800332e <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0208 	orr.w	r2, r2, #8
 8002856:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002860:	2001      	movs	r0, #1
 8002862:	f7fe ffa1 	bl	80017a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f042 0204 	orr.w	r2, r2, #4
 800287c:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002886:	69d9      	ldr	r1, [r3, #28]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4b07      	ldr	r3, [pc, #28]	; (80028ac <HAL_ETH_Start_IT+0xdc>)
 800288e:	430b      	orrs	r3, r1
 8002890:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002894:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2223      	movs	r2, #35	; 0x23
 800289a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	e000      	b.n	80028a4 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
  }
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	0001a0c1 	.word	0x0001a0c1

080028b0 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028be:	2b23      	cmp	r3, #35	; 0x23
 80028c0:	d16e      	bne.n	80029a0 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2223      	movs	r2, #35	; 0x23
 80028c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d2:	69d9      	ldr	r1, [r3, #28]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4b34      	ldr	r3, [pc, #208]	; (80029ac <HAL_ETH_Stop_IT+0xfc>)
 80028da:	400b      	ands	r3, r1
 80028dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028e0:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028f8:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	f023 0302 	bic.w	r3, r3, #2
 800290c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002910:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0204 	bic.w	r2, r2, #4
 8002920:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800292a:	2001      	movs	r0, #1
 800292c:	f7fe ff3c 	bl	80017a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 fcf8 	bl	800332e <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0208 	bic.w	r2, r2, #8
 800294c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002956:	2001      	movs	r0, #1
 8002958:	f7fe ff26 	bl	80017a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	e00e      	b.n	8002988 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	3212      	adds	r2, #18
 8002970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002974:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	3301      	adds	r3, #1
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2b03      	cmp	r3, #3
 800298c:	d9ed      	bls.n	800296a <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2210      	movs	r2, #16
 8002998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	e000      	b.n	80029a2 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
  }
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	fffe5f3e 	.word	0xfffe5f3e

080029b0 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d109      	bne.n	80029d4 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	f043 0201 	orr.w	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e045      	b.n	8002a60 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029da:	2b23      	cmp	r3, #35	; 0x23
 80029dc:	d13f      	bne.n	8002a5e <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80029e6:	2201      	movs	r2, #1
 80029e8:	6839      	ldr	r1, [r7, #0]
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 ff78 	bl	80038e0 <ETH_Prepare_Tx_Descriptors>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d009      	beq.n	8002a0a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fc:	f043 0202 	orr.w	r2, r3, #2
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e02a      	b.n	8002a60 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8002a0a:	f3bf 8f4f 	dsb	sy
}
 8002a0e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	629a      	str	r2, [r3, #40]	; 0x28
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d904      	bls.n	8002a2c <HAL_ETH_Transmit_IT+0x7c>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a26:	1f1a      	subs	r2, r3, #4
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00d      	beq.n	8002a5a <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a46:	461a      	mov	r2, r3
 8002a48:	2304      	movs	r3, #4
 8002a4a:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a54:	461a      	mov	r2, r3
 8002a56:	2300      	movs	r3, #0
 8002a58:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e000      	b.n	8002a60 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
  }
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d109      	bne.n	8002a94 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a86:	f043 0201 	orr.w	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0a4      	b.n	8002bde <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a9a:	2b23      	cmp	r3, #35	; 0x23
 8002a9c:	d001      	beq.n	8002aa2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e09d      	b.n	8002bde <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69fa      	ldr	r2, [r7, #28]
 8002aac:	3212      	adds	r2, #18
 8002aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ab8:	f1c3 0304 	rsb	r3, r3, #4
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002abe:	e066      	b.n	8002b8e <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d007      	beq.n	8002adc <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	69da      	ldr	r2, [r3, #28]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	699a      	ldr	r2, [r3, #24]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d103      	bne.n	8002af0 <HAL_ETH_ReadData+0x88>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d03c      	beq.n	8002b6a <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	0c1b      	lsrs	r3, r3, #16
 8002b0e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002b12:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002b44:	461a      	mov	r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	f002 ff75 	bl	8005a38 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	441a      	add	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	2200      	movs	r2, #0
 8002b68:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	61fb      	str	r3, [r7, #28]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d902      	bls.n	8002b7c <HAL_ETH_ReadData+0x114>
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	3b04      	subs	r3, #4
 8002b7a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69fa      	ldr	r2, [r7, #28]
 8002b80:	3212      	adds	r2, #18
 8002b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b86:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	db06      	blt.n	8002ba4 <HAL_ETH_ReadData+0x13c>
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d202      	bcs.n	8002ba4 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8002b9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d08d      	beq.n	8002ac0 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	441a      	add	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f815 	bl	8002be8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69fa      	ldr	r2, [r7, #28]
 8002bc2:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002bc4:	7cfb      	ldrb	r3, [r7, #19]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d108      	bne.n	8002bdc <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e000      	b.n	8002bde <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3720      	adds	r7, #32
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bfc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	3212      	adds	r2, #18
 8002c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c08:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c0e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002c10:	e042      	b.n	8002c98 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d112      	bne.n	8002c40 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002c1a:	f107 0308 	add.w	r3, r7, #8
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f002 feda 	bl	80059d8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d102      	bne.n	8002c30 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	74fb      	strb	r3, [r7, #19]
 8002c2e:	e007      	b.n	8002c40 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	461a      	mov	r2, r3
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002c40:	7cfb      	ldrb	r3, [r7, #19]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d028      	beq.n	8002c98 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	4b26      	ldr	r3, [pc, #152]	; (8002cec <ETH_UpdateDescriptor+0x104>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	6053      	str	r3, [r2, #4]
 8002c5a:	e005      	b.n	8002c68 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	3301      	adds	r3, #1
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d902      	bls.n	8002c86 <ETH_UpdateDescriptor+0x9e>
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	3b04      	subs	r3, #4
 8002c84:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	3212      	adds	r2, #18
 8002c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c90:	617b      	str	r3, [r7, #20]
      desccount--;
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <ETH_UpdateDescriptor+0xbc>
 8002c9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1b6      	bne.n	8002c12 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d01a      	beq.n	8002ce4 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002cb8:	f3bf 8f5f 	dmb	sy
}
 8002cbc:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6919      	ldr	r1, [r3, #16]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	18ca      	adds	r2, r1, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cd6:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	3720      	adds	r7, #32
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	80004000 	.word	0x80004000

08002cf0 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3318      	adds	r3, #24
 8002cfc:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002d0e:	e047      	b.n	8002da0 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8002d10:	2301      	movs	r3, #1
 8002d12:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10a      	bne.n	8002d40 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	d902      	bls.n	8002d3c <HAL_ETH_ReleaseTxPacket+0x4c>
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	3b04      	subs	r3, #4
 8002d3a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002d40:	7bbb      	ldrb	r3, [r7, #14]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d02c      	beq.n	8002da0 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68d9      	ldr	r1, [r3, #12]
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	440b      	add	r3, r1
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	db1f      	blt.n	8002d9c <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	3304      	adds	r3, #4
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f002 fea7 	bl	8005abc <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	3304      	adds	r3, #4
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	2200      	movs	r2, #0
 8002d7a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d902      	bls.n	8002d8e <HAL_ETH_ReleaseTxPacket+0x9e>
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	3b04      	subs	r3, #4
 8002d8c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d9a:	e001      	b.n	8002da0 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <HAL_ETH_ReleaseTxPacket+0xbc>
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1b1      	bne.n	8002d10 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc6:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002de0:	4b4b      	ldr	r3, [pc, #300]	; (8002f10 <HAL_ETH_IRQHandler+0x158>)
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00e      	beq.n	8002e0e <HAL_ETH_IRQHandler+0x56>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e02:	461a      	mov	r2, r3
 8002e04:	4b43      	ldr	r3, [pc, #268]	; (8002f14 <HAL_ETH_IRQHandler+0x15c>)
 8002e06:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f002 f9ad 	bl	8005168 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00f      	beq.n	8002e38 <HAL_ETH_IRQHandler+0x80>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002e30:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f002 f9a8 	bl	8005188 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d042      	beq.n	8002ec8 <HAL_ETH_IRQHandler+0x110>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d03d      	beq.n	8002ec8 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e52:	f043 0208 	orr.w	r2, r3, #8
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d01a      	beq.n	8002e9c <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	4b29      	ldr	r3, [pc, #164]	; (8002f18 <HAL_ETH_IRQHandler+0x160>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002e8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e90:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	22e0      	movs	r2, #224	; 0xe0
 8002e96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002e9a:	e012      	b.n	8002ec2 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	f248 6380 	movw	r3, #34432	; 0x8680
 8002eaa:	4013      	ands	r3, r2
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f248 6380 	movw	r3, #34432	; 0x8680
 8002ec0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f002 f970 	bl	80051a8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00e      	beq.n	8002ef0 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f81a 	bl	8002f1c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d006      	beq.n	8002f08 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002efa:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <HAL_ETH_IRQHandler+0x158>)
 8002efc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002f00:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f814 	bl	8002f30 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002f08:	bf00      	nop
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40013c00 	.word	0x40013c00
 8002f14:	00010040 	.word	0x00010040
 8002f18:	007e2000 	.word	0x007e2000

08002f1c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
 8002f50:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f003 031c 	and.w	r3, r3, #28
 8002f60:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	02db      	lsls	r3, r3, #11
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	019b      	lsls	r3, r3, #6
 8002f72:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f023 0302 	bic.w	r3, r3, #2
 8002f82:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002f94:	f7fe fbfc 	bl	8001790 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f9a:	e00d      	b.n	8002fb8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002f9c:	f7fe fbf8 	bl	8001790 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002faa:	d301      	bcc.n	8002fb0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e010      	b.n	8002fd2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1ec      	bne.n	8002f9c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	461a      	mov	r2, r3
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b086      	sub	sp, #24
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
 8002fe6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f003 031c 	and.w	r3, r3, #28
 8002ff6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	02db      	lsls	r3, r3, #11
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	4313      	orrs	r3, r2
 8003002:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	019b      	lsls	r3, r3, #6
 8003008:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f043 0302 	orr.w	r3, r3, #2
 8003018:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003034:	f7fe fbac 	bl	8001790 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800303a:	e00d      	b.n	8003058 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800303c:	f7fe fba8 	bl	8001790 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800304a:	d301      	bcc.n	8003050 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e009      	b.n	8003064 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1ec      	bne.n	800303c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0e6      	b.n	800324e <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	2b00      	cmp	r3, #0
 800308c:	bf14      	ite	ne
 800308e:	2301      	movne	r3, #1
 8003090:	2300      	moveq	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bf0c      	ite	eq
 80030b8:	2301      	moveq	r3, #1
 80030ba:	2300      	movne	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	461a      	mov	r2, r3
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bf14      	ite	ne
 80030d4:	2301      	movne	r3, #1
 80030d6:	2300      	moveq	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	bf0c      	ite	eq
 80030ee:	2301      	moveq	r3, #1
 80030f0:	2300      	movne	r3, #0
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	461a      	mov	r2, r3
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003104:	2b00      	cmp	r3, #0
 8003106:	bf14      	ite	ne
 8003108:	2301      	movne	r3, #1
 800310a:	2300      	moveq	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	461a      	mov	r2, r3
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313a:	2b00      	cmp	r3, #0
 800313c:	bf0c      	ite	eq
 800313e:	2301      	moveq	r3, #1
 8003140:	2300      	movne	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	461a      	mov	r2, r3
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf0c      	ite	eq
 8003158:	2301      	moveq	r3, #1
 800315a:	2300      	movne	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	461a      	mov	r2, r3
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316e:	2b00      	cmp	r3, #0
 8003170:	bf14      	ite	ne
 8003172:	2301      	movne	r3, #1
 8003174:	2300      	moveq	r3, #0
 8003176:	b2db      	uxtb	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003196:	2b00      	cmp	r3, #0
 8003198:	bf14      	ite	ne
 800319a:	2301      	movne	r3, #1
 800319c:	2300      	moveq	r3, #0
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	461a      	mov	r2, r3
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	bf14      	ite	ne
 80031b4:	2301      	movne	r3, #1
 80031b6:	2300      	moveq	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	461a      	mov	r2, r3
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	bf14      	ite	ne
 80031ce:	2301      	movne	r3, #1
 80031d0:	2300      	moveq	r3, #0
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	bf0c      	ite	eq
 80031ea:	2301      	moveq	r3, #1
 80031ec:	2300      	movne	r3, #0
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	461a      	mov	r2, r3
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	0c1b      	lsrs	r3, r3, #16
 800320e:	b29a      	uxth	r2, r3
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b00      	cmp	r3, #0
 8003220:	bf14      	ite	ne
 8003222:	2301      	movne	r3, #1
 8003224:	2300      	moveq	r3, #0
 8003226:	b2db      	uxtb	r3, r3
 8003228:	461a      	mov	r2, r3
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800323a:	2b00      	cmp	r3, #0
 800323c:	bf14      	ite	ne
 800323e:	2301      	movne	r3, #1
 8003240:	2300      	moveq	r3, #0
 8003242:	b2db      	uxtb	r3, r3
 8003244:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e00b      	b.n	8003286 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003274:	2b10      	cmp	r3, #16
 8003276:	d105      	bne.n	8003284 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003278:	6839      	ldr	r1, [r7, #0]
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f87c 	bl	8003378 <ETH_SetMACConfig>

    return HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	e000      	b.n	8003286 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
  }
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 031c 	bic.w	r3, r3, #28
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80032a8:	f001 fabc 	bl	8004824 <HAL_RCC_GetHCLKFreq>
 80032ac:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4a14      	ldr	r2, [pc, #80]	; (8003304 <HAL_ETH_SetMDIOClockRange+0x74>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d804      	bhi.n	80032c0 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f043 0308 	orr.w	r3, r3, #8
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	e019      	b.n	80032f4 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	4a11      	ldr	r2, [pc, #68]	; (8003308 <HAL_ETH_SetMDIOClockRange+0x78>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d204      	bcs.n	80032d2 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f043 030c 	orr.w	r3, r3, #12
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	e010      	b.n	80032f4 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	4a0d      	ldr	r2, [pc, #52]	; (800330c <HAL_ETH_SetMDIOClockRange+0x7c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d90c      	bls.n	80032f4 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	4a0c      	ldr	r2, [pc, #48]	; (8003310 <HAL_ETH_SetMDIOClockRange+0x80>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d804      	bhi.n	80032ec <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f043 0304 	orr.w	r3, r3, #4
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	e003      	b.n	80032f4 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f043 0310 	orr.w	r3, r3, #16
 80032f2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	611a      	str	r2, [r3, #16]
}
 80032fc:	bf00      	nop
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	02160ebf 	.word	0x02160ebf
 8003308:	03938700 	.word	0x03938700
 800330c:	05f5e0ff 	.word	0x05f5e0ff
 8003310:	08f0d17f 	.word	0x08f0d17f

08003314 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b084      	sub	sp, #16
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6812      	ldr	r2, [r2, #0]
 8003348:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800334c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003350:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800335e:	2001      	movs	r0, #1
 8003360:	f7fe fa22 	bl	80017a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800336e:	6193      	str	r3, [r2, #24]
}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4b53      	ldr	r3, [pc, #332]	; (80034dc <ETH_SetMACConfig+0x164>)
 800338e:	4013      	ands	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	7b9b      	ldrb	r3, [r3, #14]
 8003396:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	7c12      	ldrb	r2, [r2, #16]
 800339c:	2a00      	cmp	r2, #0
 800339e:	d102      	bne.n	80033a6 <ETH_SetMACConfig+0x2e>
 80033a0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80033a4:	e000      	b.n	80033a8 <ETH_SetMACConfig+0x30>
 80033a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80033a8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	7c52      	ldrb	r2, [r2, #17]
 80033ae:	2a00      	cmp	r2, #0
 80033b0:	d102      	bne.n	80033b8 <ETH_SetMACConfig+0x40>
 80033b2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80033b6:	e000      	b.n	80033ba <ETH_SetMACConfig+0x42>
 80033b8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80033ba:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80033c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	7fdb      	ldrb	r3, [r3, #31]
 80033c6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80033c8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80033ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	7f92      	ldrb	r2, [r2, #30]
 80033d4:	2a00      	cmp	r2, #0
 80033d6:	d102      	bne.n	80033de <ETH_SetMACConfig+0x66>
 80033d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033dc:	e000      	b.n	80033e0 <ETH_SetMACConfig+0x68>
 80033de:	2200      	movs	r2, #0
                        macconf->Speed |
 80033e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	7f1b      	ldrb	r3, [r3, #28]
 80033e6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80033e8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80033ee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	791b      	ldrb	r3, [r3, #4]
 80033f4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80033f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80033fe:	2a00      	cmp	r2, #0
 8003400:	d102      	bne.n	8003408 <ETH_SetMACConfig+0x90>
 8003402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003406:	e000      	b.n	800340a <ETH_SetMACConfig+0x92>
 8003408:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800340a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	7bdb      	ldrb	r3, [r3, #15]
 8003410:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003412:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003418:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003420:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003422:	4313      	orrs	r3, r2
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	4313      	orrs	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800343a:	2001      	movs	r0, #1
 800343c:	f7fe f9b4 	bl	80017a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003456:	4013      	ands	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800345e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003466:	2a00      	cmp	r2, #0
 8003468:	d101      	bne.n	800346e <ETH_SetMACConfig+0xf6>
 800346a:	2280      	movs	r2, #128	; 0x80
 800346c:	e000      	b.n	8003470 <ETH_SetMACConfig+0xf8>
 800346e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003470:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003476:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800347e:	2a01      	cmp	r2, #1
 8003480:	d101      	bne.n	8003486 <ETH_SetMACConfig+0x10e>
 8003482:	2208      	movs	r2, #8
 8003484:	e000      	b.n	8003488 <ETH_SetMACConfig+0x110>
 8003486:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003488:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003490:	2a01      	cmp	r2, #1
 8003492:	d101      	bne.n	8003498 <ETH_SetMACConfig+0x120>
 8003494:	2204      	movs	r2, #4
 8003496:	e000      	b.n	800349a <ETH_SetMACConfig+0x122>
 8003498:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800349a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80034a2:	2a01      	cmp	r2, #1
 80034a4:	d101      	bne.n	80034aa <ETH_SetMACConfig+0x132>
 80034a6:	2202      	movs	r2, #2
 80034a8:	e000      	b.n	80034ac <ETH_SetMACConfig+0x134>
 80034aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80034ac:	4313      	orrs	r3, r2
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034c4:	2001      	movs	r0, #1
 80034c6:	f7fe f96f 	bl	80017a8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	619a      	str	r2, [r3, #24]
}
 80034d2:	bf00      	nop
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	fd20810f 	.word	0xfd20810f

080034e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	4b3d      	ldr	r3, [pc, #244]	; (80035f0 <ETH_SetDMAConfig+0x110>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	7b1b      	ldrb	r3, [r3, #12]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d102      	bne.n	800350c <ETH_SetDMAConfig+0x2c>
 8003506:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800350a:	e000      	b.n	800350e <ETH_SetDMAConfig+0x2e>
 800350c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	7b5b      	ldrb	r3, [r3, #13]
 8003512:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003514:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	7f52      	ldrb	r2, [r2, #29]
 800351a:	2a00      	cmp	r2, #0
 800351c:	d102      	bne.n	8003524 <ETH_SetDMAConfig+0x44>
 800351e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003522:	e000      	b.n	8003526 <ETH_SetDMAConfig+0x46>
 8003524:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003526:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	7b9b      	ldrb	r3, [r3, #14]
 800352c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800352e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003534:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	7f1b      	ldrb	r3, [r3, #28]
 800353a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800353c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	7f9b      	ldrb	r3, [r3, #30]
 8003542:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003544:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800354a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003552:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003554:	4313      	orrs	r3, r2
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4313      	orrs	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003564:	461a      	mov	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003576:	2001      	movs	r0, #1
 8003578:	f7fe f916 	bl	80017a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003584:	461a      	mov	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	791b      	ldrb	r3, [r3, #4]
 800358e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003594:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800359a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80035a0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035a8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80035aa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80035b2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80035b8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035c6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035d4:	2001      	movs	r0, #1
 80035d6:	f7fe f8e7 	bl	80017a8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e2:	461a      	mov	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6013      	str	r3, [r2, #0]
}
 80035e8:	bf00      	nop
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	f8de3f23 	.word	0xf8de3f23

080035f4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b0a6      	sub	sp, #152	; 0x98
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80035fc:	2301      	movs	r3, #1
 80035fe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003602:	2301      	movs	r3, #1
 8003604:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003608:	2300      	movs	r3, #0
 800360a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800360c:	2300      	movs	r3, #0
 800360e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003612:	2301      	movs	r3, #1
 8003614:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003618:	2300      	movs	r3, #0
 800361a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800361e:	2301      	movs	r3, #1
 8003620:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003624:	2301      	movs	r3, #1
 8003626:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800362a:	2300      	movs	r3, #0
 800362c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003630:	2300      	movs	r3, #0
 8003632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003636:	2300      	movs	r3, #0
 8003638:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800363a:	2300      	movs	r3, #0
 800363c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003640:	2300      	movs	r3, #0
 8003642:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003644:	2300      	movs	r3, #0
 8003646:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800364a:	2300      	movs	r3, #0
 800364c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003650:	2300      	movs	r3, #0
 8003652:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003656:	2300      	movs	r3, #0
 8003658:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800365c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003660:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003662:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003666:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003668:	2300      	movs	r3, #0
 800366a:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800366e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003672:	4619      	mov	r1, r3
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff fe7f 	bl	8003378 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800367a:	2301      	movs	r3, #1
 800367c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800367e:	2301      	movs	r3, #1
 8003680:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003682:	2301      	movs	r3, #1
 8003684:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003688:	2301      	movs	r3, #1
 800368a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800368c:	2300      	movs	r3, #0
 800368e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003690:	2300      	movs	r3, #0
 8003692:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003696:	2300      	movs	r3, #0
 8003698:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800369c:	2300      	movs	r3, #0
 800369e:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80036a0:	2301      	movs	r3, #1
 80036a2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80036a6:	2301      	movs	r3, #1
 80036a8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80036aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036ae:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80036b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036b4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80036b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036ba:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80036c6:	2300      	movs	r3, #0
 80036c8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80036ca:	f107 0308 	add.w	r3, r7, #8
 80036ce:	4619      	mov	r1, r3
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff ff05 	bl	80034e0 <ETH_SetDMAConfig>
}
 80036d6:	bf00      	nop
 80036d8:	3798      	adds	r7, #152	; 0x98
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3305      	adds	r3, #5
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	021b      	lsls	r3, r3, #8
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	3204      	adds	r2, #4
 80036f8:	7812      	ldrb	r2, [r2, #0]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	4b11      	ldr	r3, [pc, #68]	; (8003748 <ETH_MACAddressConfig+0x68>)
 8003702:	4413      	add	r3, r2
 8003704:	461a      	mov	r2, r3
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3303      	adds	r3, #3
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	061a      	lsls	r2, r3, #24
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3302      	adds	r3, #2
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	041b      	lsls	r3, r3, #16
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3301      	adds	r3, #1
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	4313      	orrs	r3, r2
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	7812      	ldrb	r2, [r2, #0]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	4b06      	ldr	r3, [pc, #24]	; (800374c <ETH_MACAddressConfig+0x6c>)
 8003732:	4413      	add	r3, r2
 8003734:	461a      	mov	r2, r3
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	6013      	str	r3, [r2, #0]
}
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40028040 	.word	0x40028040
 800374c:	40028044 	.word	0x40028044

08003750 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	e03e      	b.n	80037dc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68d9      	ldr	r1, [r3, #12]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	440b      	add	r3, r1
 800376e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2200      	movs	r2, #0
 800377a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2200      	movs	r2, #0
 8003786:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003788:	68b9      	ldr	r1, [r7, #8]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	3206      	adds	r2, #6
 8003790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d80c      	bhi.n	80037c0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68d9      	ldr	r1, [r3, #12]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	440b      	add	r3, r1
 80037b8:	461a      	mov	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	60da      	str	r2, [r3, #12]
 80037be:	e004      	b.n	80037ca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	461a      	mov	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	3301      	adds	r3, #1
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d9bd      	bls.n	800375e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037f4:	611a      	str	r2, [r3, #16]
}
 80037f6:	bf00      	nop
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003802:	b480      	push	{r7}
 8003804:	b085      	sub	sp, #20
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	e048      	b.n	80038a2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6919      	ldr	r1, [r3, #16]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	440b      	add	r3, r1
 8003820:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2200      	movs	r2, #0
 800382c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2200      	movs	r2, #0
 8003832:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2200      	movs	r2, #0
 8003838:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2200      	movs	r2, #0
 800383e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2200      	movs	r2, #0
 8003844:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800384c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003866:	68b9      	ldr	r1, [r7, #8]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	3212      	adds	r2, #18
 800386e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d80c      	bhi.n	8003892 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6919      	ldr	r1, [r3, #16]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	440b      	add	r3, r1
 800388a:	461a      	mov	r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	60da      	str	r2, [r3, #12]
 8003890:	e004      	b.n	800389c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	461a      	mov	r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3301      	adds	r3, #1
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	d9b3      	bls.n	8003810 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d2:	60da      	str	r2, [r3, #12]
}
 80038d4:	bf00      	nop
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b091      	sub	sp, #68	; 0x44
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	3318      	adds	r3, #24
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800390a:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800391e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003922:	d007      	beq.n	8003934 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003928:	3304      	adds	r3, #4
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003934:	2302      	movs	r3, #2
 8003936:	e111      	b.n	8003b5c <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8003938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393a:	3301      	adds	r3, #1
 800393c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003946:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	4b86      	ldr	r3, [pc, #536]	; (8003b68 <ETH_Prepare_Tx_Descriptors+0x288>)
 800394e:	4013      	ands	r3, r2
 8003950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003952:	6852      	ldr	r2, [r2, #4]
 8003954:	431a      	orrs	r2, r3
 8003956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003958:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	431a      	orrs	r2, r3
 8003974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003976:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	431a      	orrs	r2, r3
 8003992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003994:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d005      	beq.n	80039ae <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80039a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80039aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ac:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80039ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80039b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b8:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80039ba:	e082      	b.n	8003ac2 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80039bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80039c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c6:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d006      	beq.n	80039dc <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	e005      	b.n	80039e8 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80039dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e6:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80039e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ea:	3301      	adds	r3, #1
 80039ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d902      	bls.n	80039fa <ETH_Prepare_Tx_Descriptors+0x11a>
 80039f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f6:	3b04      	subs	r3, #4
 80039f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a02:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a10:	d007      	beq.n	8003a22 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a16:	3304      	adds	r3, #4
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d029      	beq.n	8003a76 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a2e:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003a30:	2300      	movs	r3, #0
 8003a32:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a34:	e019      	b.n	8003a6a <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8003a36:	f3bf 8f5f 	dmb	sy
}
 8003a3a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d902      	bls.n	8003a5a <ETH_Prepare_Tx_Descriptors+0x17a>
 8003a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a56:	3b04      	subs	r3, #4
 8003a58:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a62:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a66:	3301      	adds	r3, #1
 8003a68:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d3e1      	bcc.n	8003a36 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8003a72:	2302      	movs	r3, #2
 8003a74:	e072      	b.n	8003b5c <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a84:	3301      	adds	r3, #1
 8003a86:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a96:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	4b32      	ldr	r3, [pc, #200]	; (8003b68 <ETH_Prepare_Tx_Descriptors+0x288>)
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aa2:	6852      	ldr	r2, [r2, #4]
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa8:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aac:	3301      	adds	r3, #1
 8003aae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003ab0:	f3bf 8f5f 	dmb	sy
}
 8003ab4:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac0:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f47f af78 	bne.w	80039bc <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d006      	beq.n	8003ae0 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	e005      	b.n	8003aec <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af6:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	6a3a      	ldr	r2, [r7, #32]
 8003afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b00:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003b02:	f3bf 8f5f 	dmb	sy
}
 8003b06:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b12:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b28:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b2e:	613b      	str	r3, [r7, #16]
  return(result);
 8003b30:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003b32:	61fb      	str	r3, [r7, #28]
 8003b34:	2301      	movs	r3, #1
 8003b36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f383 8810 	msr	PRIMASK, r3
}
 8003b3e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	4413      	add	r3, r2
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	629a      	str	r2, [r3, #40]	; 0x28
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	f383 8810 	msr	PRIMASK, r3
}
 8003b58:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3744      	adds	r7, #68	; 0x44
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	ffffe000 	.word	0xffffe000

08003b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b089      	sub	sp, #36	; 0x24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003b82:	2300      	movs	r3, #0
 8003b84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003b86:	2300      	movs	r3, #0
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	e175      	b.n	8003e78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	f040 8164 	bne.w	8003e72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d005      	beq.n	8003bc2 <HAL_GPIO_Init+0x56>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d130      	bne.n	8003c24 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	2203      	movs	r2, #3
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	4013      	ands	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	091b      	lsrs	r3, r3, #4
 8003c0e:	f003 0201 	and.w	r2, r3, #1
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 0303 	and.w	r3, r3, #3
 8003c2c:	2b03      	cmp	r3, #3
 8003c2e:	d017      	beq.n	8003c60 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	43db      	mvns	r3, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4013      	ands	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d123      	bne.n	8003cb4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	08da      	lsrs	r2, r3, #3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3208      	adds	r2, #8
 8003c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	220f      	movs	r2, #15
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	08da      	lsrs	r2, r3, #3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3208      	adds	r2, #8
 8003cae:	69b9      	ldr	r1, [r7, #24]
 8003cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 0203 	and.w	r2, r3, #3
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 80be 	beq.w	8003e72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cf6:	4b66      	ldr	r3, [pc, #408]	; (8003e90 <HAL_GPIO_Init+0x324>)
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfa:	4a65      	ldr	r2, [pc, #404]	; (8003e90 <HAL_GPIO_Init+0x324>)
 8003cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d00:	6453      	str	r3, [r2, #68]	; 0x44
 8003d02:	4b63      	ldr	r3, [pc, #396]	; (8003e90 <HAL_GPIO_Init+0x324>)
 8003d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003d0e:	4a61      	ldr	r2, [pc, #388]	; (8003e94 <HAL_GPIO_Init+0x328>)
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	089b      	lsrs	r3, r3, #2
 8003d14:	3302      	adds	r3, #2
 8003d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	220f      	movs	r2, #15
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a58      	ldr	r2, [pc, #352]	; (8003e98 <HAL_GPIO_Init+0x32c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d037      	beq.n	8003daa <HAL_GPIO_Init+0x23e>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a57      	ldr	r2, [pc, #348]	; (8003e9c <HAL_GPIO_Init+0x330>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d031      	beq.n	8003da6 <HAL_GPIO_Init+0x23a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a56      	ldr	r2, [pc, #344]	; (8003ea0 <HAL_GPIO_Init+0x334>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d02b      	beq.n	8003da2 <HAL_GPIO_Init+0x236>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a55      	ldr	r2, [pc, #340]	; (8003ea4 <HAL_GPIO_Init+0x338>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d025      	beq.n	8003d9e <HAL_GPIO_Init+0x232>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a54      	ldr	r2, [pc, #336]	; (8003ea8 <HAL_GPIO_Init+0x33c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d01f      	beq.n	8003d9a <HAL_GPIO_Init+0x22e>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a53      	ldr	r2, [pc, #332]	; (8003eac <HAL_GPIO_Init+0x340>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d019      	beq.n	8003d96 <HAL_GPIO_Init+0x22a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a52      	ldr	r2, [pc, #328]	; (8003eb0 <HAL_GPIO_Init+0x344>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d013      	beq.n	8003d92 <HAL_GPIO_Init+0x226>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a51      	ldr	r2, [pc, #324]	; (8003eb4 <HAL_GPIO_Init+0x348>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00d      	beq.n	8003d8e <HAL_GPIO_Init+0x222>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a50      	ldr	r2, [pc, #320]	; (8003eb8 <HAL_GPIO_Init+0x34c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d007      	beq.n	8003d8a <HAL_GPIO_Init+0x21e>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a4f      	ldr	r2, [pc, #316]	; (8003ebc <HAL_GPIO_Init+0x350>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d101      	bne.n	8003d86 <HAL_GPIO_Init+0x21a>
 8003d82:	2309      	movs	r3, #9
 8003d84:	e012      	b.n	8003dac <HAL_GPIO_Init+0x240>
 8003d86:	230a      	movs	r3, #10
 8003d88:	e010      	b.n	8003dac <HAL_GPIO_Init+0x240>
 8003d8a:	2308      	movs	r3, #8
 8003d8c:	e00e      	b.n	8003dac <HAL_GPIO_Init+0x240>
 8003d8e:	2307      	movs	r3, #7
 8003d90:	e00c      	b.n	8003dac <HAL_GPIO_Init+0x240>
 8003d92:	2306      	movs	r3, #6
 8003d94:	e00a      	b.n	8003dac <HAL_GPIO_Init+0x240>
 8003d96:	2305      	movs	r3, #5
 8003d98:	e008      	b.n	8003dac <HAL_GPIO_Init+0x240>
 8003d9a:	2304      	movs	r3, #4
 8003d9c:	e006      	b.n	8003dac <HAL_GPIO_Init+0x240>
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e004      	b.n	8003dac <HAL_GPIO_Init+0x240>
 8003da2:	2302      	movs	r3, #2
 8003da4:	e002      	b.n	8003dac <HAL_GPIO_Init+0x240>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <HAL_GPIO_Init+0x240>
 8003daa:	2300      	movs	r3, #0
 8003dac:	69fa      	ldr	r2, [r7, #28]
 8003dae:	f002 0203 	and.w	r2, r2, #3
 8003db2:	0092      	lsls	r2, r2, #2
 8003db4:	4093      	lsls	r3, r2
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003dbc:	4935      	ldr	r1, [pc, #212]	; (8003e94 <HAL_GPIO_Init+0x328>)
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	089b      	lsrs	r3, r3, #2
 8003dc2:	3302      	adds	r3, #2
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dca:	4b3d      	ldr	r3, [pc, #244]	; (8003ec0 <HAL_GPIO_Init+0x354>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dee:	4a34      	ldr	r2, [pc, #208]	; (8003ec0 <HAL_GPIO_Init+0x354>)
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003df4:	4b32      	ldr	r3, [pc, #200]	; (8003ec0 <HAL_GPIO_Init+0x354>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	4013      	ands	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e18:	4a29      	ldr	r2, [pc, #164]	; (8003ec0 <HAL_GPIO_Init+0x354>)
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e1e:	4b28      	ldr	r3, [pc, #160]	; (8003ec0 <HAL_GPIO_Init+0x354>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	43db      	mvns	r3, r3
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e42:	4a1f      	ldr	r2, [pc, #124]	; (8003ec0 <HAL_GPIO_Init+0x354>)
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e48:	4b1d      	ldr	r3, [pc, #116]	; (8003ec0 <HAL_GPIO_Init+0x354>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	43db      	mvns	r3, r3
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	4013      	ands	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e6c:	4a14      	ldr	r2, [pc, #80]	; (8003ec0 <HAL_GPIO_Init+0x354>)
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	3301      	adds	r3, #1
 8003e76:	61fb      	str	r3, [r7, #28]
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	2b0f      	cmp	r3, #15
 8003e7c:	f67f ae86 	bls.w	8003b8c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003e80:	bf00      	nop
 8003e82:	bf00      	nop
 8003e84:	3724      	adds	r7, #36	; 0x24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800
 8003e94:	40013800 	.word	0x40013800
 8003e98:	40020000 	.word	0x40020000
 8003e9c:	40020400 	.word	0x40020400
 8003ea0:	40020800 	.word	0x40020800
 8003ea4:	40020c00 	.word	0x40020c00
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	40021400 	.word	0x40021400
 8003eb0:	40021800 	.word	0x40021800
 8003eb4:	40021c00 	.word	0x40021c00
 8003eb8:	40022000 	.word	0x40022000
 8003ebc:	40022400 	.word	0x40022400
 8003ec0:	40013c00 	.word	0x40013c00

08003ec4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ece:	4b23      	ldr	r3, [pc, #140]	; (8003f5c <HAL_PWREx_EnableOverDrive+0x98>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	4a22      	ldr	r2, [pc, #136]	; (8003f5c <HAL_PWREx_EnableOverDrive+0x98>)
 8003ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eda:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <HAL_PWREx_EnableOverDrive+0x98>)
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	603b      	str	r3, [r7, #0]
 8003ee4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ee6:	4b1e      	ldr	r3, [pc, #120]	; (8003f60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a1d      	ldr	r2, [pc, #116]	; (8003f60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ef2:	f7fd fc4d 	bl	8001790 <HAL_GetTick>
 8003ef6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ef8:	e009      	b.n	8003f0e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003efa:	f7fd fc49 	bl	8001790 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f08:	d901      	bls.n	8003f0e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e022      	b.n	8003f54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f0e:	4b14      	ldr	r3, [pc, #80]	; (8003f60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1a:	d1ee      	bne.n	8003efa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f1c:	4b10      	ldr	r3, [pc, #64]	; (8003f60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a0f      	ldr	r2, [pc, #60]	; (8003f60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f28:	f7fd fc32 	bl	8001790 <HAL_GetTick>
 8003f2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f2e:	e009      	b.n	8003f44 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f30:	f7fd fc2e 	bl	8001790 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f3e:	d901      	bls.n	8003f44 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e007      	b.n	8003f54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f44:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f50:	d1ee      	bne.n	8003f30 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	40007000 	.word	0x40007000

08003f64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e29b      	b.n	80044b2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 8087 	beq.w	8004096 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f88:	4b96      	ldr	r3, [pc, #600]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 030c 	and.w	r3, r3, #12
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d00c      	beq.n	8003fae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f94:	4b93      	ldr	r3, [pc, #588]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 030c 	and.w	r3, r3, #12
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d112      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x62>
 8003fa0:	4b90      	ldr	r3, [pc, #576]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fac:	d10b      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fae:	4b8d      	ldr	r3, [pc, #564]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d06c      	beq.n	8004094 <HAL_RCC_OscConfig+0x130>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d168      	bne.n	8004094 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e275      	b.n	80044b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fce:	d106      	bne.n	8003fde <HAL_RCC_OscConfig+0x7a>
 8003fd0:	4b84      	ldr	r3, [pc, #528]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a83      	ldr	r2, [pc, #524]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 8003fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	e02e      	b.n	800403c <HAL_RCC_OscConfig+0xd8>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCC_OscConfig+0x9c>
 8003fe6:	4b7f      	ldr	r3, [pc, #508]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a7e      	ldr	r2, [pc, #504]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 8003fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	4b7c      	ldr	r3, [pc, #496]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a7b      	ldr	r2, [pc, #492]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 8003ff8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	e01d      	b.n	800403c <HAL_RCC_OscConfig+0xd8>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004008:	d10c      	bne.n	8004024 <HAL_RCC_OscConfig+0xc0>
 800400a:	4b76      	ldr	r3, [pc, #472]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a75      	ldr	r2, [pc, #468]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 8004010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	4b73      	ldr	r3, [pc, #460]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a72      	ldr	r2, [pc, #456]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 800401c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	e00b      	b.n	800403c <HAL_RCC_OscConfig+0xd8>
 8004024:	4b6f      	ldr	r3, [pc, #444]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a6e      	ldr	r2, [pc, #440]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 800402a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	4b6c      	ldr	r3, [pc, #432]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a6b      	ldr	r2, [pc, #428]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 8004036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800403a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d013      	beq.n	800406c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7fd fba4 	bl	8001790 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800404c:	f7fd fba0 	bl	8001790 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b64      	cmp	r3, #100	; 0x64
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e229      	b.n	80044b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405e:	4b61      	ldr	r3, [pc, #388]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0f0      	beq.n	800404c <HAL_RCC_OscConfig+0xe8>
 800406a:	e014      	b.n	8004096 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7fd fb90 	bl	8001790 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004074:	f7fd fb8c 	bl	8001790 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b64      	cmp	r3, #100	; 0x64
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e215      	b.n	80044b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004086:	4b57      	ldr	r3, [pc, #348]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x110>
 8004092:	e000      	b.n	8004096 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d069      	beq.n	8004176 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040a2:	4b50      	ldr	r3, [pc, #320]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00b      	beq.n	80040c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ae:	4b4d      	ldr	r3, [pc, #308]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 030c 	and.w	r3, r3, #12
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d11c      	bne.n	80040f4 <HAL_RCC_OscConfig+0x190>
 80040ba:	4b4a      	ldr	r3, [pc, #296]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d116      	bne.n	80040f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040c6:	4b47      	ldr	r3, [pc, #284]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d005      	beq.n	80040de <HAL_RCC_OscConfig+0x17a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d001      	beq.n	80040de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e1e9      	b.n	80044b2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040de:	4b41      	ldr	r3, [pc, #260]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	493d      	ldr	r1, [pc, #244]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040f2:	e040      	b.n	8004176 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d023      	beq.n	8004144 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040fc:	4b39      	ldr	r3, [pc, #228]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a38      	ldr	r2, [pc, #224]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7fd fb42 	bl	8001790 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004110:	f7fd fb3e 	bl	8001790 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e1c7      	b.n	80044b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004122:	4b30      	ldr	r3, [pc, #192]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0f0      	beq.n	8004110 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800412e:	4b2d      	ldr	r3, [pc, #180]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	4929      	ldr	r1, [pc, #164]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 800413e:	4313      	orrs	r3, r2
 8004140:	600b      	str	r3, [r1, #0]
 8004142:	e018      	b.n	8004176 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004144:	4b27      	ldr	r3, [pc, #156]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a26      	ldr	r2, [pc, #152]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 800414a:	f023 0301 	bic.w	r3, r3, #1
 800414e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004150:	f7fd fb1e 	bl	8001790 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004158:	f7fd fb1a 	bl	8001790 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e1a3      	b.n	80044b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800416a:	4b1e      	ldr	r3, [pc, #120]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f0      	bne.n	8004158 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d038      	beq.n	80041f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d019      	beq.n	80041be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800418a:	4b16      	ldr	r3, [pc, #88]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 800418c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800418e:	4a15      	ldr	r2, [pc, #84]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 8004190:	f043 0301 	orr.w	r3, r3, #1
 8004194:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004196:	f7fd fafb 	bl	8001790 <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800419c:	e008      	b.n	80041b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800419e:	f7fd faf7 	bl	8001790 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e180      	b.n	80044b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041b0:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 80041b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0f0      	beq.n	800419e <HAL_RCC_OscConfig+0x23a>
 80041bc:	e01a      	b.n	80041f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041be:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 80041c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c2:	4a08      	ldr	r2, [pc, #32]	; (80041e4 <HAL_RCC_OscConfig+0x280>)
 80041c4:	f023 0301 	bic.w	r3, r3, #1
 80041c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ca:	f7fd fae1 	bl	8001790 <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d0:	e00a      	b.n	80041e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d2:	f7fd fadd 	bl	8001790 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d903      	bls.n	80041e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e166      	b.n	80044b2 <HAL_RCC_OscConfig+0x54e>
 80041e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e8:	4b92      	ldr	r3, [pc, #584]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 80041ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1ee      	bne.n	80041d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 80a4 	beq.w	800434a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004202:	4b8c      	ldr	r3, [pc, #560]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10d      	bne.n	800422a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800420e:	4b89      	ldr	r3, [pc, #548]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	4a88      	ldr	r2, [pc, #544]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 8004214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004218:	6413      	str	r3, [r2, #64]	; 0x40
 800421a:	4b86      	ldr	r3, [pc, #536]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004226:	2301      	movs	r3, #1
 8004228:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800422a:	4b83      	ldr	r3, [pc, #524]	; (8004438 <HAL_RCC_OscConfig+0x4d4>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004232:	2b00      	cmp	r3, #0
 8004234:	d118      	bne.n	8004268 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004236:	4b80      	ldr	r3, [pc, #512]	; (8004438 <HAL_RCC_OscConfig+0x4d4>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a7f      	ldr	r2, [pc, #508]	; (8004438 <HAL_RCC_OscConfig+0x4d4>)
 800423c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004242:	f7fd faa5 	bl	8001790 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800424a:	f7fd faa1 	bl	8001790 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b64      	cmp	r3, #100	; 0x64
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e12a      	b.n	80044b2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800425c:	4b76      	ldr	r3, [pc, #472]	; (8004438 <HAL_RCC_OscConfig+0x4d4>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0f0      	beq.n	800424a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d106      	bne.n	800427e <HAL_RCC_OscConfig+0x31a>
 8004270:	4b70      	ldr	r3, [pc, #448]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004274:	4a6f      	ldr	r2, [pc, #444]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 8004276:	f043 0301 	orr.w	r3, r3, #1
 800427a:	6713      	str	r3, [r2, #112]	; 0x70
 800427c:	e02d      	b.n	80042da <HAL_RCC_OscConfig+0x376>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10c      	bne.n	80042a0 <HAL_RCC_OscConfig+0x33c>
 8004286:	4b6b      	ldr	r3, [pc, #428]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 8004288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428a:	4a6a      	ldr	r2, [pc, #424]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 800428c:	f023 0301 	bic.w	r3, r3, #1
 8004290:	6713      	str	r3, [r2, #112]	; 0x70
 8004292:	4b68      	ldr	r3, [pc, #416]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 8004294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004296:	4a67      	ldr	r2, [pc, #412]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 8004298:	f023 0304 	bic.w	r3, r3, #4
 800429c:	6713      	str	r3, [r2, #112]	; 0x70
 800429e:	e01c      	b.n	80042da <HAL_RCC_OscConfig+0x376>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	2b05      	cmp	r3, #5
 80042a6:	d10c      	bne.n	80042c2 <HAL_RCC_OscConfig+0x35e>
 80042a8:	4b62      	ldr	r3, [pc, #392]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 80042aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ac:	4a61      	ldr	r2, [pc, #388]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 80042ae:	f043 0304 	orr.w	r3, r3, #4
 80042b2:	6713      	str	r3, [r2, #112]	; 0x70
 80042b4:	4b5f      	ldr	r3, [pc, #380]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 80042b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b8:	4a5e      	ldr	r2, [pc, #376]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	6713      	str	r3, [r2, #112]	; 0x70
 80042c0:	e00b      	b.n	80042da <HAL_RCC_OscConfig+0x376>
 80042c2:	4b5c      	ldr	r3, [pc, #368]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c6:	4a5b      	ldr	r2, [pc, #364]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 80042c8:	f023 0301 	bic.w	r3, r3, #1
 80042cc:	6713      	str	r3, [r2, #112]	; 0x70
 80042ce:	4b59      	ldr	r3, [pc, #356]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 80042d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d2:	4a58      	ldr	r2, [pc, #352]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 80042d4:	f023 0304 	bic.w	r3, r3, #4
 80042d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d015      	beq.n	800430e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e2:	f7fd fa55 	bl	8001790 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e8:	e00a      	b.n	8004300 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ea:	f7fd fa51 	bl	8001790 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e0d8      	b.n	80044b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004300:	4b4c      	ldr	r3, [pc, #304]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 8004302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0ee      	beq.n	80042ea <HAL_RCC_OscConfig+0x386>
 800430c:	e014      	b.n	8004338 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430e:	f7fd fa3f 	bl	8001790 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004314:	e00a      	b.n	800432c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004316:	f7fd fa3b 	bl	8001790 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	f241 3288 	movw	r2, #5000	; 0x1388
 8004324:	4293      	cmp	r3, r2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e0c2      	b.n	80044b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800432c:	4b41      	ldr	r3, [pc, #260]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 800432e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1ee      	bne.n	8004316 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004338:	7dfb      	ldrb	r3, [r7, #23]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d105      	bne.n	800434a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800433e:	4b3d      	ldr	r3, [pc, #244]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	4a3c      	ldr	r2, [pc, #240]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 8004344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004348:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 80ae 	beq.w	80044b0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004354:	4b37      	ldr	r3, [pc, #220]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 030c 	and.w	r3, r3, #12
 800435c:	2b08      	cmp	r3, #8
 800435e:	d06d      	beq.n	800443c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	2b02      	cmp	r3, #2
 8004366:	d14b      	bne.n	8004400 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004368:	4b32      	ldr	r3, [pc, #200]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a31      	ldr	r2, [pc, #196]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 800436e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004374:	f7fd fa0c 	bl	8001790 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800437c:	f7fd fa08 	bl	8001790 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e091      	b.n	80044b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438e:	4b29      	ldr	r3, [pc, #164]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69da      	ldr	r2, [r3, #28]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	019b      	lsls	r3, r3, #6
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b0:	085b      	lsrs	r3, r3, #1
 80043b2:	3b01      	subs	r3, #1
 80043b4:	041b      	lsls	r3, r3, #16
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	061b      	lsls	r3, r3, #24
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c4:	071b      	lsls	r3, r3, #28
 80043c6:	491b      	ldr	r1, [pc, #108]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043cc:	4b19      	ldr	r3, [pc, #100]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a18      	ldr	r2, [pc, #96]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 80043d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d8:	f7fd f9da 	bl	8001790 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e0:	f7fd f9d6 	bl	8001790 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e05f      	b.n	80044b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f2:	4b10      	ldr	r3, [pc, #64]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0x47c>
 80043fe:	e057      	b.n	80044b0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004400:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a0b      	ldr	r2, [pc, #44]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 8004406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800440a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fd f9c0 	bl	8001790 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004414:	f7fd f9bc 	bl	8001790 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e045      	b.n	80044b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004426:	4b03      	ldr	r3, [pc, #12]	; (8004434 <HAL_RCC_OscConfig+0x4d0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x4b0>
 8004432:	e03d      	b.n	80044b0 <HAL_RCC_OscConfig+0x54c>
 8004434:	40023800 	.word	0x40023800
 8004438:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800443c:	4b1f      	ldr	r3, [pc, #124]	; (80044bc <HAL_RCC_OscConfig+0x558>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d030      	beq.n	80044ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004454:	429a      	cmp	r2, r3
 8004456:	d129      	bne.n	80044ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004462:	429a      	cmp	r2, r3
 8004464:	d122      	bne.n	80044ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800446c:	4013      	ands	r3, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004472:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004474:	4293      	cmp	r3, r2
 8004476:	d119      	bne.n	80044ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004482:	085b      	lsrs	r3, r3, #1
 8004484:	3b01      	subs	r3, #1
 8004486:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004488:	429a      	cmp	r2, r3
 800448a:	d10f      	bne.n	80044ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004498:	429a      	cmp	r2, r3
 800449a:	d107      	bne.n	80044ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d001      	beq.n	80044b0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e000      	b.n	80044b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40023800 	.word	0x40023800

080044c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0d0      	b.n	800467a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044d8:	4b6a      	ldr	r3, [pc, #424]	; (8004684 <HAL_RCC_ClockConfig+0x1c4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d910      	bls.n	8004508 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e6:	4b67      	ldr	r3, [pc, #412]	; (8004684 <HAL_RCC_ClockConfig+0x1c4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f023 020f 	bic.w	r2, r3, #15
 80044ee:	4965      	ldr	r1, [pc, #404]	; (8004684 <HAL_RCC_ClockConfig+0x1c4>)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f6:	4b63      	ldr	r3, [pc, #396]	; (8004684 <HAL_RCC_ClockConfig+0x1c4>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d001      	beq.n	8004508 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e0b8      	b.n	800467a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d020      	beq.n	8004556 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	d005      	beq.n	800452c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004520:	4b59      	ldr	r3, [pc, #356]	; (8004688 <HAL_RCC_ClockConfig+0x1c8>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	4a58      	ldr	r2, [pc, #352]	; (8004688 <HAL_RCC_ClockConfig+0x1c8>)
 8004526:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800452a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b00      	cmp	r3, #0
 8004536:	d005      	beq.n	8004544 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004538:	4b53      	ldr	r3, [pc, #332]	; (8004688 <HAL_RCC_ClockConfig+0x1c8>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	4a52      	ldr	r2, [pc, #328]	; (8004688 <HAL_RCC_ClockConfig+0x1c8>)
 800453e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004542:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004544:	4b50      	ldr	r3, [pc, #320]	; (8004688 <HAL_RCC_ClockConfig+0x1c8>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	494d      	ldr	r1, [pc, #308]	; (8004688 <HAL_RCC_ClockConfig+0x1c8>)
 8004552:	4313      	orrs	r3, r2
 8004554:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d040      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d107      	bne.n	800457a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456a:	4b47      	ldr	r3, [pc, #284]	; (8004688 <HAL_RCC_ClockConfig+0x1c8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d115      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e07f      	b.n	800467a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b02      	cmp	r3, #2
 8004580:	d107      	bne.n	8004592 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004582:	4b41      	ldr	r3, [pc, #260]	; (8004688 <HAL_RCC_ClockConfig+0x1c8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d109      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e073      	b.n	800467a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004592:	4b3d      	ldr	r3, [pc, #244]	; (8004688 <HAL_RCC_ClockConfig+0x1c8>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e06b      	b.n	800467a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045a2:	4b39      	ldr	r3, [pc, #228]	; (8004688 <HAL_RCC_ClockConfig+0x1c8>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f023 0203 	bic.w	r2, r3, #3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	4936      	ldr	r1, [pc, #216]	; (8004688 <HAL_RCC_ClockConfig+0x1c8>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b4:	f7fd f8ec 	bl	8001790 <HAL_GetTick>
 80045b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ba:	e00a      	b.n	80045d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045bc:	f7fd f8e8 	bl	8001790 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e053      	b.n	800467a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d2:	4b2d      	ldr	r3, [pc, #180]	; (8004688 <HAL_RCC_ClockConfig+0x1c8>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 020c 	and.w	r2, r3, #12
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d1eb      	bne.n	80045bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045e4:	4b27      	ldr	r3, [pc, #156]	; (8004684 <HAL_RCC_ClockConfig+0x1c4>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 030f 	and.w	r3, r3, #15
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d210      	bcs.n	8004614 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f2:	4b24      	ldr	r3, [pc, #144]	; (8004684 <HAL_RCC_ClockConfig+0x1c4>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f023 020f 	bic.w	r2, r3, #15
 80045fa:	4922      	ldr	r1, [pc, #136]	; (8004684 <HAL_RCC_ClockConfig+0x1c4>)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	4313      	orrs	r3, r2
 8004600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004602:	4b20      	ldr	r3, [pc, #128]	; (8004684 <HAL_RCC_ClockConfig+0x1c4>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d001      	beq.n	8004614 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e032      	b.n	800467a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	d008      	beq.n	8004632 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004620:	4b19      	ldr	r3, [pc, #100]	; (8004688 <HAL_RCC_ClockConfig+0x1c8>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	4916      	ldr	r1, [pc, #88]	; (8004688 <HAL_RCC_ClockConfig+0x1c8>)
 800462e:	4313      	orrs	r3, r2
 8004630:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b00      	cmp	r3, #0
 800463c:	d009      	beq.n	8004652 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800463e:	4b12      	ldr	r3, [pc, #72]	; (8004688 <HAL_RCC_ClockConfig+0x1c8>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	490e      	ldr	r1, [pc, #56]	; (8004688 <HAL_RCC_ClockConfig+0x1c8>)
 800464e:	4313      	orrs	r3, r2
 8004650:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004652:	f000 f821 	bl	8004698 <HAL_RCC_GetSysClockFreq>
 8004656:	4602      	mov	r2, r0
 8004658:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <HAL_RCC_ClockConfig+0x1c8>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	091b      	lsrs	r3, r3, #4
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	490a      	ldr	r1, [pc, #40]	; (800468c <HAL_RCC_ClockConfig+0x1cc>)
 8004664:	5ccb      	ldrb	r3, [r1, r3]
 8004666:	fa22 f303 	lsr.w	r3, r2, r3
 800466a:	4a09      	ldr	r2, [pc, #36]	; (8004690 <HAL_RCC_ClockConfig+0x1d0>)
 800466c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800466e:	4b09      	ldr	r3, [pc, #36]	; (8004694 <HAL_RCC_ClockConfig+0x1d4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f7fc fda8 	bl	80011c8 <HAL_InitTick>

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40023c00 	.word	0x40023c00
 8004688:	40023800 	.word	0x40023800
 800468c:	0801ffa0 	.word	0x0801ffa0
 8004690:	20000004 	.word	0x20000004
 8004694:	20000008 	.word	0x20000008

08004698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800469c:	b090      	sub	sp, #64	; 0x40
 800469e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	637b      	str	r3, [r7, #52]	; 0x34
 80046a4:	2300      	movs	r3, #0
 80046a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046a8:	2300      	movs	r3, #0
 80046aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80046ac:	2300      	movs	r3, #0
 80046ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046b0:	4b59      	ldr	r3, [pc, #356]	; (8004818 <HAL_RCC_GetSysClockFreq+0x180>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 030c 	and.w	r3, r3, #12
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d00d      	beq.n	80046d8 <HAL_RCC_GetSysClockFreq+0x40>
 80046bc:	2b08      	cmp	r3, #8
 80046be:	f200 80a1 	bhi.w	8004804 <HAL_RCC_GetSysClockFreq+0x16c>
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <HAL_RCC_GetSysClockFreq+0x34>
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d003      	beq.n	80046d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80046ca:	e09b      	b.n	8004804 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046cc:	4b53      	ldr	r3, [pc, #332]	; (800481c <HAL_RCC_GetSysClockFreq+0x184>)
 80046ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046d0:	e09b      	b.n	800480a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046d2:	4b53      	ldr	r3, [pc, #332]	; (8004820 <HAL_RCC_GetSysClockFreq+0x188>)
 80046d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046d6:	e098      	b.n	800480a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046d8:	4b4f      	ldr	r3, [pc, #316]	; (8004818 <HAL_RCC_GetSysClockFreq+0x180>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046e0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80046e2:	4b4d      	ldr	r3, [pc, #308]	; (8004818 <HAL_RCC_GetSysClockFreq+0x180>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d028      	beq.n	8004740 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ee:	4b4a      	ldr	r3, [pc, #296]	; (8004818 <HAL_RCC_GetSysClockFreq+0x180>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	099b      	lsrs	r3, r3, #6
 80046f4:	2200      	movs	r2, #0
 80046f6:	623b      	str	r3, [r7, #32]
 80046f8:	627a      	str	r2, [r7, #36]	; 0x24
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004700:	2100      	movs	r1, #0
 8004702:	4b47      	ldr	r3, [pc, #284]	; (8004820 <HAL_RCC_GetSysClockFreq+0x188>)
 8004704:	fb03 f201 	mul.w	r2, r3, r1
 8004708:	2300      	movs	r3, #0
 800470a:	fb00 f303 	mul.w	r3, r0, r3
 800470e:	4413      	add	r3, r2
 8004710:	4a43      	ldr	r2, [pc, #268]	; (8004820 <HAL_RCC_GetSysClockFreq+0x188>)
 8004712:	fba0 1202 	umull	r1, r2, r0, r2
 8004716:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004718:	460a      	mov	r2, r1
 800471a:	62ba      	str	r2, [r7, #40]	; 0x28
 800471c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800471e:	4413      	add	r3, r2
 8004720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004724:	2200      	movs	r2, #0
 8004726:	61bb      	str	r3, [r7, #24]
 8004728:	61fa      	str	r2, [r7, #28]
 800472a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800472e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004732:	f7fb fded 	bl	8000310 <__aeabi_uldivmod>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4613      	mov	r3, r2
 800473c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800473e:	e053      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004740:	4b35      	ldr	r3, [pc, #212]	; (8004818 <HAL_RCC_GetSysClockFreq+0x180>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	099b      	lsrs	r3, r3, #6
 8004746:	2200      	movs	r2, #0
 8004748:	613b      	str	r3, [r7, #16]
 800474a:	617a      	str	r2, [r7, #20]
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004752:	f04f 0b00 	mov.w	fp, #0
 8004756:	4652      	mov	r2, sl
 8004758:	465b      	mov	r3, fp
 800475a:	f04f 0000 	mov.w	r0, #0
 800475e:	f04f 0100 	mov.w	r1, #0
 8004762:	0159      	lsls	r1, r3, #5
 8004764:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004768:	0150      	lsls	r0, r2, #5
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	ebb2 080a 	subs.w	r8, r2, sl
 8004772:	eb63 090b 	sbc.w	r9, r3, fp
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004782:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004786:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800478a:	ebb2 0408 	subs.w	r4, r2, r8
 800478e:	eb63 0509 	sbc.w	r5, r3, r9
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	f04f 0300 	mov.w	r3, #0
 800479a:	00eb      	lsls	r3, r5, #3
 800479c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047a0:	00e2      	lsls	r2, r4, #3
 80047a2:	4614      	mov	r4, r2
 80047a4:	461d      	mov	r5, r3
 80047a6:	eb14 030a 	adds.w	r3, r4, sl
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	eb45 030b 	adc.w	r3, r5, fp
 80047b0:	607b      	str	r3, [r7, #4]
 80047b2:	f04f 0200 	mov.w	r2, #0
 80047b6:	f04f 0300 	mov.w	r3, #0
 80047ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047be:	4629      	mov	r1, r5
 80047c0:	028b      	lsls	r3, r1, #10
 80047c2:	4621      	mov	r1, r4
 80047c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047c8:	4621      	mov	r1, r4
 80047ca:	028a      	lsls	r2, r1, #10
 80047cc:	4610      	mov	r0, r2
 80047ce:	4619      	mov	r1, r3
 80047d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d2:	2200      	movs	r2, #0
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	60fa      	str	r2, [r7, #12]
 80047d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047dc:	f7fb fd98 	bl	8000310 <__aeabi_uldivmod>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4613      	mov	r3, r2
 80047e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80047e8:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <HAL_RCC_GetSysClockFreq+0x180>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	0c1b      	lsrs	r3, r3, #16
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	3301      	adds	r3, #1
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80047f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004800:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004802:	e002      	b.n	800480a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004804:	4b05      	ldr	r3, [pc, #20]	; (800481c <HAL_RCC_GetSysClockFreq+0x184>)
 8004806:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004808:	bf00      	nop
    }
  }
  return sysclockfreq;
 800480a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800480c:	4618      	mov	r0, r3
 800480e:	3740      	adds	r7, #64	; 0x40
 8004810:	46bd      	mov	sp, r7
 8004812:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004816:	bf00      	nop
 8004818:	40023800 	.word	0x40023800
 800481c:	00f42400 	.word	0x00f42400
 8004820:	017d7840 	.word	0x017d7840

08004824 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004828:	4b03      	ldr	r3, [pc, #12]	; (8004838 <HAL_RCC_GetHCLKFreq+0x14>)
 800482a:	681b      	ldr	r3, [r3, #0]
}
 800482c:	4618      	mov	r0, r3
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	20000004 	.word	0x20000004

0800483c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004840:	f7ff fff0 	bl	8004824 <HAL_RCC_GetHCLKFreq>
 8004844:	4602      	mov	r2, r0
 8004846:	4b05      	ldr	r3, [pc, #20]	; (800485c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	0a9b      	lsrs	r3, r3, #10
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	4903      	ldr	r1, [pc, #12]	; (8004860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004852:	5ccb      	ldrb	r3, [r1, r3]
 8004854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004858:	4618      	mov	r0, r3
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40023800 	.word	0x40023800
 8004860:	0801ffb0 	.word	0x0801ffb0

08004864 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	220f      	movs	r2, #15
 8004872:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004874:	4b12      	ldr	r3, [pc, #72]	; (80048c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 0203 	and.w	r2, r3, #3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004880:	4b0f      	ldr	r3, [pc, #60]	; (80048c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800488c:	4b0c      	ldr	r3, [pc, #48]	; (80048c0 <HAL_RCC_GetClockConfig+0x5c>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004898:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <HAL_RCC_GetClockConfig+0x5c>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	08db      	lsrs	r3, r3, #3
 800489e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048a6:	4b07      	ldr	r3, [pc, #28]	; (80048c4 <HAL_RCC_GetClockConfig+0x60>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 020f 	and.w	r2, r3, #15
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	601a      	str	r2, [r3, #0]
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40023800 	.word	0x40023800
 80048c4:	40023c00 	.word	0x40023c00

080048c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e049      	b.n	800496e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d106      	bne.n	80048f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f841 	bl	8004976 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	3304      	adds	r3, #4
 8004904:	4619      	mov	r1, r3
 8004906:	4610      	mov	r0, r2
 8004908:	f000 f9e8 	bl	8004cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
	...

0800498c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b01      	cmp	r3, #1
 800499e:	d001      	beq.n	80049a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e054      	b.n	8004a4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0201 	orr.w	r2, r2, #1
 80049ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a26      	ldr	r2, [pc, #152]	; (8004a5c <HAL_TIM_Base_Start_IT+0xd0>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d022      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ce:	d01d      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a22      	ldr	r2, [pc, #136]	; (8004a60 <HAL_TIM_Base_Start_IT+0xd4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d018      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a21      	ldr	r2, [pc, #132]	; (8004a64 <HAL_TIM_Base_Start_IT+0xd8>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d013      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a1f      	ldr	r2, [pc, #124]	; (8004a68 <HAL_TIM_Base_Start_IT+0xdc>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00e      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a1e      	ldr	r2, [pc, #120]	; (8004a6c <HAL_TIM_Base_Start_IT+0xe0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d009      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a1c      	ldr	r2, [pc, #112]	; (8004a70 <HAL_TIM_Base_Start_IT+0xe4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d004      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a1b      	ldr	r2, [pc, #108]	; (8004a74 <HAL_TIM_Base_Start_IT+0xe8>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d115      	bne.n	8004a38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	4b19      	ldr	r3, [pc, #100]	; (8004a78 <HAL_TIM_Base_Start_IT+0xec>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b06      	cmp	r3, #6
 8004a1c:	d015      	beq.n	8004a4a <HAL_TIM_Base_Start_IT+0xbe>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a24:	d011      	beq.n	8004a4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f042 0201 	orr.w	r2, r2, #1
 8004a34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a36:	e008      	b.n	8004a4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	e000      	b.n	8004a4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	40010000 	.word	0x40010000
 8004a60:	40000400 	.word	0x40000400
 8004a64:	40000800 	.word	0x40000800
 8004a68:	40000c00 	.word	0x40000c00
 8004a6c:	40010400 	.word	0x40010400
 8004a70:	40014000 	.word	0x40014000
 8004a74:	40001800 	.word	0x40001800
 8004a78:	00010007 	.word	0x00010007

08004a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d020      	beq.n	8004ae0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01b      	beq.n	8004ae0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0202 	mvn.w	r2, #2
 8004ab0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f8e9 	bl	8004c9e <HAL_TIM_IC_CaptureCallback>
 8004acc:	e005      	b.n	8004ada <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f8db 	bl	8004c8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f8ec 	bl	8004cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f003 0304 	and.w	r3, r3, #4
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d020      	beq.n	8004b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d01b      	beq.n	8004b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f06f 0204 	mvn.w	r2, #4
 8004afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2202      	movs	r2, #2
 8004b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f8c3 	bl	8004c9e <HAL_TIM_IC_CaptureCallback>
 8004b18:	e005      	b.n	8004b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f8b5 	bl	8004c8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f8c6 	bl	8004cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d020      	beq.n	8004b78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f003 0308 	and.w	r3, r3, #8
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d01b      	beq.n	8004b78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f06f 0208 	mvn.w	r2, #8
 8004b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2204      	movs	r2, #4
 8004b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f89d 	bl	8004c9e <HAL_TIM_IC_CaptureCallback>
 8004b64:	e005      	b.n	8004b72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f88f 	bl	8004c8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f8a0 	bl	8004cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f003 0310 	and.w	r3, r3, #16
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d020      	beq.n	8004bc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f003 0310 	and.w	r3, r3, #16
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d01b      	beq.n	8004bc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f06f 0210 	mvn.w	r2, #16
 8004b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2208      	movs	r2, #8
 8004b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f877 	bl	8004c9e <HAL_TIM_IC_CaptureCallback>
 8004bb0:	e005      	b.n	8004bbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f869 	bl	8004c8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f87a 	bl	8004cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00c      	beq.n	8004be8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d007      	beq.n	8004be8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f06f 0201 	mvn.w	r2, #1
 8004be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7fc fa68 	bl	80010b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d104      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00c      	beq.n	8004c16 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d007      	beq.n	8004c16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f919 	bl	8004e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00c      	beq.n	8004c3a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d007      	beq.n	8004c3a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f911 	bl	8004e5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00c      	beq.n	8004c5e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d007      	beq.n	8004c5e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f834 	bl	8004cc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	f003 0320 	and.w	r3, r3, #32
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00c      	beq.n	8004c82 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 0320 	and.w	r3, r3, #32
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d007      	beq.n	8004c82 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f06f 0220 	mvn.w	r2, #32
 8004c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f8d9 	bl	8004e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c82:	bf00      	nop
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
	...

08004cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a46      	ldr	r2, [pc, #280]	; (8004e08 <TIM_Base_SetConfig+0x12c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d013      	beq.n	8004d1c <TIM_Base_SetConfig+0x40>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfa:	d00f      	beq.n	8004d1c <TIM_Base_SetConfig+0x40>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a43      	ldr	r2, [pc, #268]	; (8004e0c <TIM_Base_SetConfig+0x130>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00b      	beq.n	8004d1c <TIM_Base_SetConfig+0x40>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a42      	ldr	r2, [pc, #264]	; (8004e10 <TIM_Base_SetConfig+0x134>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d007      	beq.n	8004d1c <TIM_Base_SetConfig+0x40>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a41      	ldr	r2, [pc, #260]	; (8004e14 <TIM_Base_SetConfig+0x138>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d003      	beq.n	8004d1c <TIM_Base_SetConfig+0x40>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a40      	ldr	r2, [pc, #256]	; (8004e18 <TIM_Base_SetConfig+0x13c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d108      	bne.n	8004d2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a35      	ldr	r2, [pc, #212]	; (8004e08 <TIM_Base_SetConfig+0x12c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d02b      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d3c:	d027      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a32      	ldr	r2, [pc, #200]	; (8004e0c <TIM_Base_SetConfig+0x130>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d023      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a31      	ldr	r2, [pc, #196]	; (8004e10 <TIM_Base_SetConfig+0x134>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d01f      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a30      	ldr	r2, [pc, #192]	; (8004e14 <TIM_Base_SetConfig+0x138>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d01b      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a2f      	ldr	r2, [pc, #188]	; (8004e18 <TIM_Base_SetConfig+0x13c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d017      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a2e      	ldr	r2, [pc, #184]	; (8004e1c <TIM_Base_SetConfig+0x140>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d013      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a2d      	ldr	r2, [pc, #180]	; (8004e20 <TIM_Base_SetConfig+0x144>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d00f      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a2c      	ldr	r2, [pc, #176]	; (8004e24 <TIM_Base_SetConfig+0x148>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00b      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a2b      	ldr	r2, [pc, #172]	; (8004e28 <TIM_Base_SetConfig+0x14c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d007      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a2a      	ldr	r2, [pc, #168]	; (8004e2c <TIM_Base_SetConfig+0x150>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d003      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a29      	ldr	r2, [pc, #164]	; (8004e30 <TIM_Base_SetConfig+0x154>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d108      	bne.n	8004da0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a10      	ldr	r2, [pc, #64]	; (8004e08 <TIM_Base_SetConfig+0x12c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d003      	beq.n	8004dd4 <TIM_Base_SetConfig+0xf8>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a12      	ldr	r2, [pc, #72]	; (8004e18 <TIM_Base_SetConfig+0x13c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d103      	bne.n	8004ddc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	691a      	ldr	r2, [r3, #16]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d105      	bne.n	8004dfa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f023 0201 	bic.w	r2, r3, #1
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	611a      	str	r2, [r3, #16]
  }
}
 8004dfa:	bf00      	nop
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40010000 	.word	0x40010000
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40000800 	.word	0x40000800
 8004e14:	40000c00 	.word	0x40000c00
 8004e18:	40010400 	.word	0x40010400
 8004e1c:	40014000 	.word	0x40014000
 8004e20:	40014400 	.word	0x40014400
 8004e24:	40014800 	.word	0x40014800
 8004e28:	40001800 	.word	0x40001800
 8004e2c:	40001c00 	.word	0x40001c00
 8004e30:	40002000 	.word	0x40002000

08004e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004e70:	b5b0      	push	{r4, r5, r7, lr}
 8004e72:	b08c      	sub	sp, #48	; 0x30
 8004e74:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004e76:	4b96      	ldr	r3, [pc, #600]	; (80050d0 <MX_LWIP_Init+0x260>)
 8004e78:	22c0      	movs	r2, #192	; 0xc0
 8004e7a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004e7c:	4b94      	ldr	r3, [pc, #592]	; (80050d0 <MX_LWIP_Init+0x260>)
 8004e7e:	22a8      	movs	r2, #168	; 0xa8
 8004e80:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8004e82:	4b93      	ldr	r3, [pc, #588]	; (80050d0 <MX_LWIP_Init+0x260>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 8004e88:	4b91      	ldr	r3, [pc, #580]	; (80050d0 <MX_LWIP_Init+0x260>)
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004e8e:	4b91      	ldr	r3, [pc, #580]	; (80050d4 <MX_LWIP_Init+0x264>)
 8004e90:	22ff      	movs	r2, #255	; 0xff
 8004e92:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004e94:	4b8f      	ldr	r3, [pc, #572]	; (80050d4 <MX_LWIP_Init+0x264>)
 8004e96:	22ff      	movs	r2, #255	; 0xff
 8004e98:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 8004e9a:	4b8e      	ldr	r3, [pc, #568]	; (80050d4 <MX_LWIP_Init+0x264>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004ea0:	4b8c      	ldr	r3, [pc, #560]	; (80050d4 <MX_LWIP_Init+0x264>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004ea6:	4b8c      	ldr	r3, [pc, #560]	; (80050d8 <MX_LWIP_Init+0x268>)
 8004ea8:	22c0      	movs	r2, #192	; 0xc0
 8004eaa:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004eac:	4b8a      	ldr	r3, [pc, #552]	; (80050d8 <MX_LWIP_Init+0x268>)
 8004eae:	22a8      	movs	r2, #168	; 0xa8
 8004eb0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8004eb2:	4b89      	ldr	r3, [pc, #548]	; (80050d8 <MX_LWIP_Init+0x268>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004eb8:	4b87      	ldr	r3, [pc, #540]	; (80050d8 <MX_LWIP_Init+0x268>)
 8004eba:	2201      	movs	r2, #1
 8004ebc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	f006 f9df 	bl	800b284 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004ec6:	4b82      	ldr	r3, [pc, #520]	; (80050d0 <MX_LWIP_Init+0x260>)
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	061a      	lsls	r2, r3, #24
 8004ecc:	4b80      	ldr	r3, [pc, #512]	; (80050d0 <MX_LWIP_Init+0x260>)
 8004ece:	785b      	ldrb	r3, [r3, #1]
 8004ed0:	041b      	lsls	r3, r3, #16
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	4b7e      	ldr	r3, [pc, #504]	; (80050d0 <MX_LWIP_Init+0x260>)
 8004ed6:	789b      	ldrb	r3, [r3, #2]
 8004ed8:	021b      	lsls	r3, r3, #8
 8004eda:	4313      	orrs	r3, r2
 8004edc:	4a7c      	ldr	r2, [pc, #496]	; (80050d0 <MX_LWIP_Init+0x260>)
 8004ede:	78d2      	ldrb	r2, [r2, #3]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	061a      	lsls	r2, r3, #24
 8004ee4:	4b7a      	ldr	r3, [pc, #488]	; (80050d0 <MX_LWIP_Init+0x260>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	0619      	lsls	r1, r3, #24
 8004eea:	4b79      	ldr	r3, [pc, #484]	; (80050d0 <MX_LWIP_Init+0x260>)
 8004eec:	785b      	ldrb	r3, [r3, #1]
 8004eee:	041b      	lsls	r3, r3, #16
 8004ef0:	4319      	orrs	r1, r3
 8004ef2:	4b77      	ldr	r3, [pc, #476]	; (80050d0 <MX_LWIP_Init+0x260>)
 8004ef4:	789b      	ldrb	r3, [r3, #2]
 8004ef6:	021b      	lsls	r3, r3, #8
 8004ef8:	430b      	orrs	r3, r1
 8004efa:	4975      	ldr	r1, [pc, #468]	; (80050d0 <MX_LWIP_Init+0x260>)
 8004efc:	78c9      	ldrb	r1, [r1, #3]
 8004efe:	430b      	orrs	r3, r1
 8004f00:	021b      	lsls	r3, r3, #8
 8004f02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f06:	431a      	orrs	r2, r3
 8004f08:	4b71      	ldr	r3, [pc, #452]	; (80050d0 <MX_LWIP_Init+0x260>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	0619      	lsls	r1, r3, #24
 8004f0e:	4b70      	ldr	r3, [pc, #448]	; (80050d0 <MX_LWIP_Init+0x260>)
 8004f10:	785b      	ldrb	r3, [r3, #1]
 8004f12:	041b      	lsls	r3, r3, #16
 8004f14:	4319      	orrs	r1, r3
 8004f16:	4b6e      	ldr	r3, [pc, #440]	; (80050d0 <MX_LWIP_Init+0x260>)
 8004f18:	789b      	ldrb	r3, [r3, #2]
 8004f1a:	021b      	lsls	r3, r3, #8
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	496c      	ldr	r1, [pc, #432]	; (80050d0 <MX_LWIP_Init+0x260>)
 8004f20:	78c9      	ldrb	r1, [r1, #3]
 8004f22:	430b      	orrs	r3, r1
 8004f24:	0a1b      	lsrs	r3, r3, #8
 8004f26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	4b68      	ldr	r3, [pc, #416]	; (80050d0 <MX_LWIP_Init+0x260>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	0619      	lsls	r1, r3, #24
 8004f32:	4b67      	ldr	r3, [pc, #412]	; (80050d0 <MX_LWIP_Init+0x260>)
 8004f34:	785b      	ldrb	r3, [r3, #1]
 8004f36:	041b      	lsls	r3, r3, #16
 8004f38:	4319      	orrs	r1, r3
 8004f3a:	4b65      	ldr	r3, [pc, #404]	; (80050d0 <MX_LWIP_Init+0x260>)
 8004f3c:	789b      	ldrb	r3, [r3, #2]
 8004f3e:	021b      	lsls	r3, r3, #8
 8004f40:	430b      	orrs	r3, r1
 8004f42:	4963      	ldr	r1, [pc, #396]	; (80050d0 <MX_LWIP_Init+0x260>)
 8004f44:	78c9      	ldrb	r1, [r1, #3]
 8004f46:	430b      	orrs	r3, r1
 8004f48:	0e1b      	lsrs	r3, r3, #24
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	4a63      	ldr	r2, [pc, #396]	; (80050dc <MX_LWIP_Init+0x26c>)
 8004f4e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004f50:	4b60      	ldr	r3, [pc, #384]	; (80050d4 <MX_LWIP_Init+0x264>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	061a      	lsls	r2, r3, #24
 8004f56:	4b5f      	ldr	r3, [pc, #380]	; (80050d4 <MX_LWIP_Init+0x264>)
 8004f58:	785b      	ldrb	r3, [r3, #1]
 8004f5a:	041b      	lsls	r3, r3, #16
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	4b5d      	ldr	r3, [pc, #372]	; (80050d4 <MX_LWIP_Init+0x264>)
 8004f60:	789b      	ldrb	r3, [r3, #2]
 8004f62:	021b      	lsls	r3, r3, #8
 8004f64:	4313      	orrs	r3, r2
 8004f66:	4a5b      	ldr	r2, [pc, #364]	; (80050d4 <MX_LWIP_Init+0x264>)
 8004f68:	78d2      	ldrb	r2, [r2, #3]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	061a      	lsls	r2, r3, #24
 8004f6e:	4b59      	ldr	r3, [pc, #356]	; (80050d4 <MX_LWIP_Init+0x264>)
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	0619      	lsls	r1, r3, #24
 8004f74:	4b57      	ldr	r3, [pc, #348]	; (80050d4 <MX_LWIP_Init+0x264>)
 8004f76:	785b      	ldrb	r3, [r3, #1]
 8004f78:	041b      	lsls	r3, r3, #16
 8004f7a:	4319      	orrs	r1, r3
 8004f7c:	4b55      	ldr	r3, [pc, #340]	; (80050d4 <MX_LWIP_Init+0x264>)
 8004f7e:	789b      	ldrb	r3, [r3, #2]
 8004f80:	021b      	lsls	r3, r3, #8
 8004f82:	430b      	orrs	r3, r1
 8004f84:	4953      	ldr	r1, [pc, #332]	; (80050d4 <MX_LWIP_Init+0x264>)
 8004f86:	78c9      	ldrb	r1, [r1, #3]
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	021b      	lsls	r3, r3, #8
 8004f8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f90:	431a      	orrs	r2, r3
 8004f92:	4b50      	ldr	r3, [pc, #320]	; (80050d4 <MX_LWIP_Init+0x264>)
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	0619      	lsls	r1, r3, #24
 8004f98:	4b4e      	ldr	r3, [pc, #312]	; (80050d4 <MX_LWIP_Init+0x264>)
 8004f9a:	785b      	ldrb	r3, [r3, #1]
 8004f9c:	041b      	lsls	r3, r3, #16
 8004f9e:	4319      	orrs	r1, r3
 8004fa0:	4b4c      	ldr	r3, [pc, #304]	; (80050d4 <MX_LWIP_Init+0x264>)
 8004fa2:	789b      	ldrb	r3, [r3, #2]
 8004fa4:	021b      	lsls	r3, r3, #8
 8004fa6:	430b      	orrs	r3, r1
 8004fa8:	494a      	ldr	r1, [pc, #296]	; (80050d4 <MX_LWIP_Init+0x264>)
 8004faa:	78c9      	ldrb	r1, [r1, #3]
 8004fac:	430b      	orrs	r3, r1
 8004fae:	0a1b      	lsrs	r3, r3, #8
 8004fb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	4b47      	ldr	r3, [pc, #284]	; (80050d4 <MX_LWIP_Init+0x264>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	0619      	lsls	r1, r3, #24
 8004fbc:	4b45      	ldr	r3, [pc, #276]	; (80050d4 <MX_LWIP_Init+0x264>)
 8004fbe:	785b      	ldrb	r3, [r3, #1]
 8004fc0:	041b      	lsls	r3, r3, #16
 8004fc2:	4319      	orrs	r1, r3
 8004fc4:	4b43      	ldr	r3, [pc, #268]	; (80050d4 <MX_LWIP_Init+0x264>)
 8004fc6:	789b      	ldrb	r3, [r3, #2]
 8004fc8:	021b      	lsls	r3, r3, #8
 8004fca:	430b      	orrs	r3, r1
 8004fcc:	4941      	ldr	r1, [pc, #260]	; (80050d4 <MX_LWIP_Init+0x264>)
 8004fce:	78c9      	ldrb	r1, [r1, #3]
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	0e1b      	lsrs	r3, r3, #24
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	4a42      	ldr	r2, [pc, #264]	; (80050e0 <MX_LWIP_Init+0x270>)
 8004fd8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004fda:	4b3f      	ldr	r3, [pc, #252]	; (80050d8 <MX_LWIP_Init+0x268>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	061a      	lsls	r2, r3, #24
 8004fe0:	4b3d      	ldr	r3, [pc, #244]	; (80050d8 <MX_LWIP_Init+0x268>)
 8004fe2:	785b      	ldrb	r3, [r3, #1]
 8004fe4:	041b      	lsls	r3, r3, #16
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	4b3b      	ldr	r3, [pc, #236]	; (80050d8 <MX_LWIP_Init+0x268>)
 8004fea:	789b      	ldrb	r3, [r3, #2]
 8004fec:	021b      	lsls	r3, r3, #8
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	4a39      	ldr	r2, [pc, #228]	; (80050d8 <MX_LWIP_Init+0x268>)
 8004ff2:	78d2      	ldrb	r2, [r2, #3]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	061a      	lsls	r2, r3, #24
 8004ff8:	4b37      	ldr	r3, [pc, #220]	; (80050d8 <MX_LWIP_Init+0x268>)
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	0619      	lsls	r1, r3, #24
 8004ffe:	4b36      	ldr	r3, [pc, #216]	; (80050d8 <MX_LWIP_Init+0x268>)
 8005000:	785b      	ldrb	r3, [r3, #1]
 8005002:	041b      	lsls	r3, r3, #16
 8005004:	4319      	orrs	r1, r3
 8005006:	4b34      	ldr	r3, [pc, #208]	; (80050d8 <MX_LWIP_Init+0x268>)
 8005008:	789b      	ldrb	r3, [r3, #2]
 800500a:	021b      	lsls	r3, r3, #8
 800500c:	430b      	orrs	r3, r1
 800500e:	4932      	ldr	r1, [pc, #200]	; (80050d8 <MX_LWIP_Init+0x268>)
 8005010:	78c9      	ldrb	r1, [r1, #3]
 8005012:	430b      	orrs	r3, r1
 8005014:	021b      	lsls	r3, r3, #8
 8005016:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800501a:	431a      	orrs	r2, r3
 800501c:	4b2e      	ldr	r3, [pc, #184]	; (80050d8 <MX_LWIP_Init+0x268>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	0619      	lsls	r1, r3, #24
 8005022:	4b2d      	ldr	r3, [pc, #180]	; (80050d8 <MX_LWIP_Init+0x268>)
 8005024:	785b      	ldrb	r3, [r3, #1]
 8005026:	041b      	lsls	r3, r3, #16
 8005028:	4319      	orrs	r1, r3
 800502a:	4b2b      	ldr	r3, [pc, #172]	; (80050d8 <MX_LWIP_Init+0x268>)
 800502c:	789b      	ldrb	r3, [r3, #2]
 800502e:	021b      	lsls	r3, r3, #8
 8005030:	430b      	orrs	r3, r1
 8005032:	4929      	ldr	r1, [pc, #164]	; (80050d8 <MX_LWIP_Init+0x268>)
 8005034:	78c9      	ldrb	r1, [r1, #3]
 8005036:	430b      	orrs	r3, r1
 8005038:	0a1b      	lsrs	r3, r3, #8
 800503a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800503e:	431a      	orrs	r2, r3
 8005040:	4b25      	ldr	r3, [pc, #148]	; (80050d8 <MX_LWIP_Init+0x268>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	0619      	lsls	r1, r3, #24
 8005046:	4b24      	ldr	r3, [pc, #144]	; (80050d8 <MX_LWIP_Init+0x268>)
 8005048:	785b      	ldrb	r3, [r3, #1]
 800504a:	041b      	lsls	r3, r3, #16
 800504c:	4319      	orrs	r1, r3
 800504e:	4b22      	ldr	r3, [pc, #136]	; (80050d8 <MX_LWIP_Init+0x268>)
 8005050:	789b      	ldrb	r3, [r3, #2]
 8005052:	021b      	lsls	r3, r3, #8
 8005054:	430b      	orrs	r3, r1
 8005056:	4920      	ldr	r1, [pc, #128]	; (80050d8 <MX_LWIP_Init+0x268>)
 8005058:	78c9      	ldrb	r1, [r1, #3]
 800505a:	430b      	orrs	r3, r1
 800505c:	0e1b      	lsrs	r3, r3, #24
 800505e:	4313      	orrs	r3, r2
 8005060:	4a20      	ldr	r2, [pc, #128]	; (80050e4 <MX_LWIP_Init+0x274>)
 8005062:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005064:	4b20      	ldr	r3, [pc, #128]	; (80050e8 <MX_LWIP_Init+0x278>)
 8005066:	9302      	str	r3, [sp, #8]
 8005068:	4b20      	ldr	r3, [pc, #128]	; (80050ec <MX_LWIP_Init+0x27c>)
 800506a:	9301      	str	r3, [sp, #4]
 800506c:	2300      	movs	r3, #0
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	4b1c      	ldr	r3, [pc, #112]	; (80050e4 <MX_LWIP_Init+0x274>)
 8005072:	4a1b      	ldr	r2, [pc, #108]	; (80050e0 <MX_LWIP_Init+0x270>)
 8005074:	4919      	ldr	r1, [pc, #100]	; (80050dc <MX_LWIP_Init+0x26c>)
 8005076:	481e      	ldr	r0, [pc, #120]	; (80050f0 <MX_LWIP_Init+0x280>)
 8005078:	f006 ff16 	bl	800bea8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800507c:	481c      	ldr	r0, [pc, #112]	; (80050f0 <MX_LWIP_Init+0x280>)
 800507e:	f007 f8c5 	bl	800c20c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005082:	4b1b      	ldr	r3, [pc, #108]	; (80050f0 <MX_LWIP_Init+0x280>)
 8005084:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005088:	089b      	lsrs	r3, r3, #2
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005094:	4816      	ldr	r0, [pc, #88]	; (80050f0 <MX_LWIP_Init+0x280>)
 8005096:	f007 f8c9 	bl	800c22c <netif_set_up>
 800509a:	e002      	b.n	80050a2 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800509c:	4814      	ldr	r0, [pc, #80]	; (80050f0 <MX_LWIP_Init+0x280>)
 800509e:	f007 f931 	bl	800c304 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80050a2:	4914      	ldr	r1, [pc, #80]	; (80050f4 <MX_LWIP_Init+0x284>)
 80050a4:	4812      	ldr	r0, [pc, #72]	; (80050f0 <MX_LWIP_Init+0x280>)
 80050a6:	f007 f9c3 	bl	800c430 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 80050aa:	4b13      	ldr	r3, [pc, #76]	; (80050f8 <MX_LWIP_Init+0x288>)
 80050ac:	1d3c      	adds	r4, r7, #4
 80050ae:	461d      	mov	r5, r3
 80050b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80050b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80050bc:	1d3b      	adds	r3, r7, #4
 80050be:	490c      	ldr	r1, [pc, #48]	; (80050f0 <MX_LWIP_Init+0x280>)
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 fd47 	bl	8005b54 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80050c6:	bf00      	nop
 80050c8:	3720      	adds	r7, #32
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bdb0      	pop	{r4, r5, r7, pc}
 80050ce:	bf00      	nop
 80050d0:	20000718 	.word	0x20000718
 80050d4:	2000071c 	.word	0x2000071c
 80050d8:	20000720 	.word	0x20000720
 80050dc:	2000070c 	.word	0x2000070c
 80050e0:	20000710 	.word	0x20000710
 80050e4:	20000714 	.word	0x20000714
 80050e8:	0800b195 	.word	0x0800b195
 80050ec:	080055f5 	.word	0x080055f5
 80050f0:	200006d8 	.word	0x200006d8
 80050f4:	080050fd 	.word	0x080050fd
 80050f8:	0801c6e0 	.word	0x0801c6e0

080050fc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005122:	2320      	movs	r3, #32
 8005124:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005126:	f3bf 8f4f 	dsb	sy
}
 800512a:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800512c:	e00b      	b.n	8005146 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800512e:	4a0d      	ldr	r2, [pc, #52]	; (8005164 <SCB_InvalidateDCache_by_Addr+0x54>)
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	4413      	add	r3, r2
 800513c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2b00      	cmp	r3, #0
 800514a:	dcf0      	bgt.n	800512e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800514c:	f3bf 8f4f 	dsb	sy
}
 8005150:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005152:	f3bf 8f6f 	isb	sy
}
 8005156:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8005158:	bf00      	nop
 800515a:	371c      	adds	r7, #28
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	e000ed00 	.word	0xe000ed00

08005168 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8005170:	4b04      	ldr	r3, [pc, #16]	; (8005184 <HAL_ETH_RxCpltCallback+0x1c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4618      	mov	r0, r3
 8005176:	f000 fe69 	bl	8005e4c <osSemaphoreRelease>
}
 800517a:	bf00      	nop
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	200050b0 	.word	0x200050b0

08005188 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8005190:	4b04      	ldr	r3, [pc, #16]	; (80051a4 <HAL_ETH_TxCpltCallback+0x1c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fe59 	bl	8005e4c <osSemaphoreRelease>
}
 800519a:	bf00      	nop
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	200050b4 	.word	0x200050b4

080051a8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7fe f8af 	bl	8003314 <HAL_ETH_GetDMAError>
 80051b6:	4603      	mov	r3, r0
 80051b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051bc:	2b80      	cmp	r3, #128	; 0x80
 80051be:	d104      	bne.n	80051ca <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80051c0:	4b04      	ldr	r3, [pc, #16]	; (80051d4 <HAL_ETH_ErrorCallback+0x2c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 fe41 	bl	8005e4c <osSemaphoreRelease>
  }
}
 80051ca:	bf00      	nop
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	200050b0 	.word	0x200050b0

080051d8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80051d8:	b5b0      	push	{r4, r5, r7, lr}
 80051da:	b0a8      	sub	sp, #160	; 0xa0
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 80051e6:	2300      	movs	r3, #0
 80051e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 80051ec:	2300      	movs	r3, #0
 80051ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 80051f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051f6:	2264      	movs	r2, #100	; 0x64
 80051f8:	2100      	movs	r1, #0
 80051fa:	4618      	mov	r0, r3
 80051fc:	f014 fb1c 	bl	8019838 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005200:	4b85      	ldr	r3, [pc, #532]	; (8005418 <low_level_init+0x240>)
 8005202:	4a86      	ldr	r2, [pc, #536]	; (800541c <low_level_init+0x244>)
 8005204:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005206:	2300      	movs	r3, #0
 8005208:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 800520c:	2380      	movs	r3, #128	; 0x80
 800520e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8005212:	23e1      	movs	r3, #225	; 0xe1
 8005214:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8005218:	2300      	movs	r3, #0
 800521a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 800521e:	2300      	movs	r3, #0
 8005220:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8005224:	2300      	movs	r3, #0
 8005226:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800522a:	4a7b      	ldr	r2, [pc, #492]	; (8005418 <low_level_init+0x240>)
 800522c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005230:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005232:	4b79      	ldr	r3, [pc, #484]	; (8005418 <low_level_init+0x240>)
 8005234:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005238:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800523a:	4b77      	ldr	r3, [pc, #476]	; (8005418 <low_level_init+0x240>)
 800523c:	4a78      	ldr	r2, [pc, #480]	; (8005420 <low_level_init+0x248>)
 800523e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005240:	4b75      	ldr	r3, [pc, #468]	; (8005418 <low_level_init+0x240>)
 8005242:	4a78      	ldr	r2, [pc, #480]	; (8005424 <low_level_init+0x24c>)
 8005244:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005246:	4b74      	ldr	r3, [pc, #464]	; (8005418 <low_level_init+0x240>)
 8005248:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800524c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800524e:	4872      	ldr	r0, [pc, #456]	; (8005418 <low_level_init+0x240>)
 8005250:	f7fd fa24 	bl	800269c <HAL_ETH_Init>
 8005254:	4603      	mov	r3, r0
 8005256:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800525a:	2238      	movs	r2, #56	; 0x38
 800525c:	2100      	movs	r1, #0
 800525e:	4872      	ldr	r0, [pc, #456]	; (8005428 <low_level_init+0x250>)
 8005260:	f014 faea 	bl	8019838 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005264:	4b70      	ldr	r3, [pc, #448]	; (8005428 <low_level_init+0x250>)
 8005266:	2221      	movs	r2, #33	; 0x21
 8005268:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800526a:	4b6f      	ldr	r3, [pc, #444]	; (8005428 <low_level_init+0x250>)
 800526c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005270:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005272:	4b6d      	ldr	r3, [pc, #436]	; (8005428 <low_level_init+0x250>)
 8005274:	2200      	movs	r2, #0
 8005276:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005278:	486c      	ldr	r0, [pc, #432]	; (800542c <low_level_init+0x254>)
 800527a:	f006 fccf 	bl	800bc1c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2206      	movs	r2, #6
 8005282:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005286:	4b64      	ldr	r3, [pc, #400]	; (8005418 <low_level_init+0x240>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	781a      	ldrb	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005292:	4b61      	ldr	r3, [pc, #388]	; (8005418 <low_level_init+0x240>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	785a      	ldrb	r2, [r3, #1]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800529e:	4b5e      	ldr	r3, [pc, #376]	; (8005418 <low_level_init+0x240>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	789a      	ldrb	r2, [r3, #2]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80052aa:	4b5b      	ldr	r3, [pc, #364]	; (8005418 <low_level_init+0x240>)
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	78da      	ldrb	r2, [r3, #3]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80052b6:	4b58      	ldr	r3, [pc, #352]	; (8005418 <low_level_init+0x240>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	791a      	ldrb	r2, [r3, #4]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80052c2:	4b55      	ldr	r3, [pc, #340]	; (8005418 <low_level_init+0x240>)
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	795a      	ldrb	r2, [r3, #5]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80052d4:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80052dc:	f043 030a 	orr.w	r3, r3, #10
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 80052e8:	2203      	movs	r2, #3
 80052ea:	2100      	movs	r1, #0
 80052ec:	2001      	movs	r0, #1
 80052ee:	f001 f945 	bl	800657c <xQueueGenericCreate>
 80052f2:	4603      	mov	r3, r0
 80052f4:	4a4e      	ldr	r2, [pc, #312]	; (8005430 <low_level_init+0x258>)
 80052f6:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 80052f8:	2203      	movs	r2, #3
 80052fa:	2100      	movs	r1, #0
 80052fc:	2001      	movs	r0, #1
 80052fe:	f001 f93d 	bl	800657c <xQueueGenericCreate>
 8005302:	4603      	mov	r3, r0
 8005304:	4a4b      	ldr	r2, [pc, #300]	; (8005434 <low_level_init+0x25c>)
 8005306:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005308:	4b4b      	ldr	r3, [pc, #300]	; (8005438 <low_level_init+0x260>)
 800530a:	f107 0408 	add.w	r4, r7, #8
 800530e:	461d      	mov	r5, r3
 8005310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005314:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005318:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800531c:	f107 0308 	add.w	r3, r7, #8
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fc16 	bl	8005b54 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005328:	4944      	ldr	r1, [pc, #272]	; (800543c <low_level_init+0x264>)
 800532a:	4845      	ldr	r0, [pc, #276]	; (8005440 <low_level_init+0x268>)
 800532c:	f7fc f8ff 	bl	800152e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8005330:	4843      	ldr	r0, [pc, #268]	; (8005440 <low_level_init+0x268>)
 8005332:	f7fc f92e 	bl	8001592 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005336:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800533a:	2b00      	cmp	r3, #0
 800533c:	d165      	bne.n	800540a <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800533e:	4840      	ldr	r0, [pc, #256]	; (8005440 <low_level_init+0x268>)
 8005340:	f7fc f974 	bl	800162c <LAN8742_GetLinkState>
 8005344:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005348:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800534c:	2b01      	cmp	r3, #1
 800534e:	dc06      	bgt.n	800535e <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f007 f83d 	bl	800c3d0 <netif_set_link_down>
      netif_set_down(netif);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f006 ffd4 	bl	800c304 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800535c:	e057      	b.n	800540e <low_level_init+0x236>
      switch (PHYLinkState)
 800535e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005362:	3b02      	subs	r3, #2
 8005364:	2b03      	cmp	r3, #3
 8005366:	d82b      	bhi.n	80053c0 <low_level_init+0x1e8>
 8005368:	a201      	add	r2, pc, #4	; (adr r2, 8005370 <low_level_init+0x198>)
 800536a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536e:	bf00      	nop
 8005370:	08005381 	.word	0x08005381
 8005374:	08005393 	.word	0x08005393
 8005378:	080053a3 	.word	0x080053a3
 800537c:	080053b3 	.word	0x080053b3
        duplex = ETH_FULLDUPLEX_MODE;
 8005380:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005384:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8005388:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800538c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005390:	e01f      	b.n	80053d2 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8005392:	2300      	movs	r3, #0
 8005394:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8005398:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800539c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80053a0:	e017      	b.n	80053d2 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80053a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80053aa:	2300      	movs	r3, #0
 80053ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80053b0:	e00f      	b.n	80053d2 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80053b2:	2300      	movs	r3, #0
 80053b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80053b8:	2300      	movs	r3, #0
 80053ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80053be:	e008      	b.n	80053d2 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80053c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80053c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80053d0:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80053d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053d6:	4619      	mov	r1, r3
 80053d8:	480f      	ldr	r0, [pc, #60]	; (8005418 <low_level_init+0x240>)
 80053da:	f7fd fe47 	bl	800306c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80053de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053e2:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 80053e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053e8:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80053ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053ee:	4619      	mov	r1, r3
 80053f0:	4809      	ldr	r0, [pc, #36]	; (8005418 <low_level_init+0x240>)
 80053f2:	f7fd ff32 	bl	800325a <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80053f6:	4808      	ldr	r0, [pc, #32]	; (8005418 <low_level_init+0x240>)
 80053f8:	f7fd f9ea 	bl	80027d0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f006 ff15 	bl	800c22c <netif_set_up>
    netif_set_link_up(netif);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f006 ffb0 	bl	800c368 <netif_set_link_up>
}
 8005408:	e001      	b.n	800540e <low_level_init+0x236>
    Error_Handler();
 800540a:	f7fb fe64 	bl	80010d6 <Error_Handler>
}
 800540e:	bf00      	nop
 8005410:	37a0      	adds	r7, #160	; 0xa0
 8005412:	46bd      	mov	sp, r7
 8005414:	bdb0      	pop	{r4, r5, r7, pc}
 8005416:	bf00      	nop
 8005418:	200050b8 	.word	0x200050b8
 800541c:	40028000 	.word	0x40028000
 8005420:	200002a4 	.word	0x200002a4
 8005424:	20000204 	.word	0x20000204
 8005428:	20005168 	.word	0x20005168
 800542c:	0801ffb8 	.word	0x0801ffb8
 8005430:	200050b0 	.word	0x200050b0
 8005434:	200050b4 	.word	0x200050b4
 8005438:	0801c704 	.word	0x0801c704
 800543c:	20000010 	.word	0x20000010
 8005440:	200051a0 	.word	0x200051a0

08005444 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b092      	sub	sp, #72	; 0x48
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005452:	2300      	movs	r3, #0
 8005454:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800545c:	f107 030c 	add.w	r3, r7, #12
 8005460:	2230      	movs	r2, #48	; 0x30
 8005462:	2100      	movs	r1, #0
 8005464:	4618      	mov	r0, r3
 8005466:	f014 f9e7 	bl	8019838 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800546a:	f107 030c 	add.w	r3, r7, #12
 800546e:	2230      	movs	r2, #48	; 0x30
 8005470:	2100      	movs	r1, #0
 8005472:	4618      	mov	r0, r3
 8005474:	f014 f9e0 	bl	8019838 <memset>

  for(q = p; q != NULL; q = q->next)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	643b      	str	r3, [r7, #64]	; 0x40
 800547c:	e045      	b.n	800550a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800547e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005480:	2b03      	cmp	r3, #3
 8005482:	d902      	bls.n	800548a <low_level_output+0x46>
      return ERR_IF;
 8005484:	f06f 030b 	mvn.w	r3, #11
 8005488:	e065      	b.n	8005556 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800548a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800548c:	6859      	ldr	r1, [r3, #4]
 800548e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005490:	4613      	mov	r3, r2
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	4413      	add	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	3348      	adds	r3, #72	; 0x48
 800549a:	443b      	add	r3, r7
 800549c:	3b3c      	subs	r3, #60	; 0x3c
 800549e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80054a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054a2:	895b      	ldrh	r3, [r3, #10]
 80054a4:	4619      	mov	r1, r3
 80054a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054a8:	4613      	mov	r3, r2
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	4413      	add	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	3348      	adds	r3, #72	; 0x48
 80054b2:	443b      	add	r3, r7
 80054b4:	3b38      	subs	r3, #56	; 0x38
 80054b6:	6019      	str	r1, [r3, #0]

    if(i>0)
 80054b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d011      	beq.n	80054e2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80054be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c0:	1e5a      	subs	r2, r3, #1
 80054c2:	f107 000c 	add.w	r0, r7, #12
 80054c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054c8:	460b      	mov	r3, r1
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	440b      	add	r3, r1
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	18c1      	adds	r1, r0, r3
 80054d2:	4613      	mov	r3, r2
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	4413      	add	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	3348      	adds	r3, #72	; 0x48
 80054dc:	443b      	add	r3, r7
 80054de:	3b34      	subs	r3, #52	; 0x34
 80054e0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80054e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d109      	bne.n	80054fe <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80054ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054ec:	4613      	mov	r3, r2
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	3348      	adds	r3, #72	; 0x48
 80054f6:	443b      	add	r3, r7
 80054f8:	3b34      	subs	r3, #52	; 0x34
 80054fa:	2200      	movs	r2, #0
 80054fc:	601a      	str	r2, [r3, #0]
    }

    i++;
 80054fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005500:	3301      	adds	r3, #1
 8005502:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	643b      	str	r3, [r7, #64]	; 0x40
 800550a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1b6      	bne.n	800547e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	891b      	ldrh	r3, [r3, #8]
 8005514:	461a      	mov	r2, r3
 8005516:	4b12      	ldr	r3, [pc, #72]	; (8005560 <low_level_output+0x11c>)
 8005518:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800551a:	4a11      	ldr	r2, [pc, #68]	; (8005560 <low_level_output+0x11c>)
 800551c:	f107 030c 	add.w	r3, r7, #12
 8005520:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005522:	4a0f      	ldr	r2, [pc, #60]	; (8005560 <low_level_output+0x11c>)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005528:	6838      	ldr	r0, [r7, #0]
 800552a:	f007 fbd5 	bl	800ccd8 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800552e:	490c      	ldr	r1, [pc, #48]	; (8005560 <low_level_output+0x11c>)
 8005530:	480c      	ldr	r0, [pc, #48]	; (8005564 <low_level_output+0x120>)
 8005532:	f7fd fa3d 	bl	80029b0 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005536:	bf00      	nop
 8005538:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <low_level_output+0x124>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005540:	4618      	mov	r0, r3
 8005542:	f000 fc35 	bl	8005db0 <osSemaphoreWait>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1f5      	bne.n	8005538 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800554c:	4805      	ldr	r0, [pc, #20]	; (8005564 <low_level_output+0x120>)
 800554e:	f7fd fbcf 	bl	8002cf0 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8005552:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005556:	4618      	mov	r0, r3
 8005558:	3748      	adds	r7, #72	; 0x48
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	20005168 	.word	0x20005168
 8005564:	200050b8 	.word	0x200050b8
 8005568:	200050b4 	.word	0x200050b4

0800556c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005574:	2300      	movs	r3, #0
 8005576:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005578:	4b07      	ldr	r3, [pc, #28]	; (8005598 <low_level_input+0x2c>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d105      	bne.n	800558c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005580:	f107 030c 	add.w	r3, r7, #12
 8005584:	4619      	mov	r1, r3
 8005586:	4805      	ldr	r0, [pc, #20]	; (800559c <low_level_input+0x30>)
 8005588:	f7fd fa6e 	bl	8002a68 <HAL_ETH_ReadData>
  }

  return p;
 800558c:	68fb      	ldr	r3, [r7, #12]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	200050ac 	.word	0x200050ac
 800559c:	200050b8 	.word	0x200050b8

080055a0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80055a8:	2300      	movs	r3, #0
 80055aa:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80055b0:	4b0f      	ldr	r3, [pc, #60]	; (80055f0 <ethernetif_input+0x50>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 fbf9 	bl	8005db0 <osSemaphoreWait>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1f5      	bne.n	80055b0 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80055c4:	68b8      	ldr	r0, [r7, #8]
 80055c6:	f7ff ffd1 	bl	800556c <low_level_input>
 80055ca:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	68b9      	ldr	r1, [r7, #8]
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	4798      	blx	r3
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f007 fad2 	bl	800cb8c <pbuf_free>
          }
        }
      } while(p!=NULL);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1ea      	bne.n	80055c4 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80055ee:	e7df      	b.n	80055b0 <ethernetif_input+0x10>
 80055f0:	200050b0 	.word	0x200050b0

080055f4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d106      	bne.n	8005610 <ethernetif_init+0x1c>
 8005602:	4b0e      	ldr	r3, [pc, #56]	; (800563c <ethernetif_init+0x48>)
 8005604:	f240 12ef 	movw	r2, #495	; 0x1ef
 8005608:	490d      	ldr	r1, [pc, #52]	; (8005640 <ethernetif_init+0x4c>)
 800560a:	480e      	ldr	r0, [pc, #56]	; (8005644 <ethernetif_init+0x50>)
 800560c:	f014 fd5e 	bl	801a0cc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2273      	movs	r2, #115	; 0x73
 8005614:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2274      	movs	r2, #116	; 0x74
 800561c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a09      	ldr	r2, [pc, #36]	; (8005648 <ethernetif_init+0x54>)
 8005624:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a08      	ldr	r2, [pc, #32]	; (800564c <ethernetif_init+0x58>)
 800562a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff fdd3 	bl	80051d8 <low_level_init>

  return ERR_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	0801c720 	.word	0x0801c720
 8005640:	0801c73c 	.word	0x0801c73c
 8005644:	0801c74c 	.word	0x0801c74c
 8005648:	08014359 	.word	0x08014359
 800564c:	08005445 	.word	0x08005445

08005650 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800565c:	68f9      	ldr	r1, [r7, #12]
 800565e:	4809      	ldr	r0, [pc, #36]	; (8005684 <pbuf_free_custom+0x34>)
 8005660:	f006 fbcc 	bl	800bdfc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005664:	4b08      	ldr	r3, [pc, #32]	; (8005688 <pbuf_free_custom+0x38>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d107      	bne.n	800567c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800566c:	4b06      	ldr	r3, [pc, #24]	; (8005688 <pbuf_free_custom+0x38>)
 800566e:	2200      	movs	r2, #0
 8005670:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005672:	4b06      	ldr	r3, [pc, #24]	; (800568c <pbuf_free_custom+0x3c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fbe8 	bl	8005e4c <osSemaphoreRelease>
  }
}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	0801ffb8 	.word	0x0801ffb8
 8005688:	200050ac 	.word	0x200050ac
 800568c:	200050b0 	.word	0x200050b0

08005690 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005694:	f7fc f87c 	bl	8001790 <HAL_GetTick>
 8005698:	4603      	mov	r3, r0
}
 800569a:	4618      	mov	r0, r3
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08e      	sub	sp, #56	; 0x38
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056ac:	2200      	movs	r2, #0
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	605a      	str	r2, [r3, #4]
 80056b2:	609a      	str	r2, [r3, #8]
 80056b4:	60da      	str	r2, [r3, #12]
 80056b6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a52      	ldr	r2, [pc, #328]	; (8005808 <HAL_ETH_MspInit+0x168>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	f040 809e 	bne.w	8005800 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80056c4:	4b51      	ldr	r3, [pc, #324]	; (800580c <HAL_ETH_MspInit+0x16c>)
 80056c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c8:	4a50      	ldr	r2, [pc, #320]	; (800580c <HAL_ETH_MspInit+0x16c>)
 80056ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80056ce:	6313      	str	r3, [r2, #48]	; 0x30
 80056d0:	4b4e      	ldr	r3, [pc, #312]	; (800580c <HAL_ETH_MspInit+0x16c>)
 80056d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d8:	623b      	str	r3, [r7, #32]
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	4b4b      	ldr	r3, [pc, #300]	; (800580c <HAL_ETH_MspInit+0x16c>)
 80056de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e0:	4a4a      	ldr	r2, [pc, #296]	; (800580c <HAL_ETH_MspInit+0x16c>)
 80056e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056e6:	6313      	str	r3, [r2, #48]	; 0x30
 80056e8:	4b48      	ldr	r3, [pc, #288]	; (800580c <HAL_ETH_MspInit+0x16c>)
 80056ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056f0:	61fb      	str	r3, [r7, #28]
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	4b45      	ldr	r3, [pc, #276]	; (800580c <HAL_ETH_MspInit+0x16c>)
 80056f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f8:	4a44      	ldr	r2, [pc, #272]	; (800580c <HAL_ETH_MspInit+0x16c>)
 80056fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056fe:	6313      	str	r3, [r2, #48]	; 0x30
 8005700:	4b42      	ldr	r3, [pc, #264]	; (800580c <HAL_ETH_MspInit+0x16c>)
 8005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005708:	61bb      	str	r3, [r7, #24]
 800570a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800570c:	4b3f      	ldr	r3, [pc, #252]	; (800580c <HAL_ETH_MspInit+0x16c>)
 800570e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005710:	4a3e      	ldr	r2, [pc, #248]	; (800580c <HAL_ETH_MspInit+0x16c>)
 8005712:	f043 0304 	orr.w	r3, r3, #4
 8005716:	6313      	str	r3, [r2, #48]	; 0x30
 8005718:	4b3c      	ldr	r3, [pc, #240]	; (800580c <HAL_ETH_MspInit+0x16c>)
 800571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005724:	4b39      	ldr	r3, [pc, #228]	; (800580c <HAL_ETH_MspInit+0x16c>)
 8005726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005728:	4a38      	ldr	r2, [pc, #224]	; (800580c <HAL_ETH_MspInit+0x16c>)
 800572a:	f043 0301 	orr.w	r3, r3, #1
 800572e:	6313      	str	r3, [r2, #48]	; 0x30
 8005730:	4b36      	ldr	r3, [pc, #216]	; (800580c <HAL_ETH_MspInit+0x16c>)
 8005732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800573c:	4b33      	ldr	r3, [pc, #204]	; (800580c <HAL_ETH_MspInit+0x16c>)
 800573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005740:	4a32      	ldr	r2, [pc, #200]	; (800580c <HAL_ETH_MspInit+0x16c>)
 8005742:	f043 0302 	orr.w	r3, r3, #2
 8005746:	6313      	str	r3, [r2, #48]	; 0x30
 8005748:	4b30      	ldr	r3, [pc, #192]	; (800580c <HAL_ETH_MspInit+0x16c>)
 800574a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005754:	4b2d      	ldr	r3, [pc, #180]	; (800580c <HAL_ETH_MspInit+0x16c>)
 8005756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005758:	4a2c      	ldr	r2, [pc, #176]	; (800580c <HAL_ETH_MspInit+0x16c>)
 800575a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800575e:	6313      	str	r3, [r2, #48]	; 0x30
 8005760:	4b2a      	ldr	r3, [pc, #168]	; (800580c <HAL_ETH_MspInit+0x16c>)
 8005762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005768:	60bb      	str	r3, [r7, #8]
 800576a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800576c:	2332      	movs	r3, #50	; 0x32
 800576e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005770:	2302      	movs	r3, #2
 8005772:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005774:	2300      	movs	r3, #0
 8005776:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005778:	2303      	movs	r3, #3
 800577a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800577c:	230b      	movs	r3, #11
 800577e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005784:	4619      	mov	r1, r3
 8005786:	4822      	ldr	r0, [pc, #136]	; (8005810 <HAL_ETH_MspInit+0x170>)
 8005788:	f7fe f9f0 	bl	8003b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800578c:	2386      	movs	r3, #134	; 0x86
 800578e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005790:	2302      	movs	r3, #2
 8005792:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005794:	2300      	movs	r3, #0
 8005796:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005798:	2303      	movs	r3, #3
 800579a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800579c:	230b      	movs	r3, #11
 800579e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057a4:	4619      	mov	r1, r3
 80057a6:	481b      	ldr	r0, [pc, #108]	; (8005814 <HAL_ETH_MspInit+0x174>)
 80057a8:	f7fe f9e0 	bl	8003b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80057ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057b2:	2302      	movs	r3, #2
 80057b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b6:	2300      	movs	r3, #0
 80057b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057ba:	2303      	movs	r3, #3
 80057bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80057be:	230b      	movs	r3, #11
 80057c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057c6:	4619      	mov	r1, r3
 80057c8:	4813      	ldr	r0, [pc, #76]	; (8005818 <HAL_ETH_MspInit+0x178>)
 80057ca:	f7fe f9cf 	bl	8003b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80057ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057d4:	2302      	movs	r3, #2
 80057d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d8:	2300      	movs	r3, #0
 80057da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057dc:	2303      	movs	r3, #3
 80057de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80057e0:	230b      	movs	r3, #11
 80057e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80057e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057e8:	4619      	mov	r1, r3
 80057ea:	480c      	ldr	r0, [pc, #48]	; (800581c <HAL_ETH_MspInit+0x17c>)
 80057ec:	f7fe f9be 	bl	8003b6c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80057f0:	2200      	movs	r2, #0
 80057f2:	2105      	movs	r1, #5
 80057f4:	203d      	movs	r0, #61	; 0x3d
 80057f6:	f7fc ff27 	bl	8002648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80057fa:	203d      	movs	r0, #61	; 0x3d
 80057fc:	f7fc ff40 	bl	8002680 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005800:	bf00      	nop
 8005802:	3738      	adds	r7, #56	; 0x38
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	40028000 	.word	0x40028000
 800580c:	40023800 	.word	0x40023800
 8005810:	40020800 	.word	0x40020800
 8005814:	40020000 	.word	0x40020000
 8005818:	40020400 	.word	0x40020400
 800581c:	40021800 	.word	0x40021800

08005820 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005824:	4802      	ldr	r0, [pc, #8]	; (8005830 <ETH_PHY_IO_Init+0x10>)
 8005826:	f7fd fd33 	bl	8003290 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	bd80      	pop	{r7, pc}
 8005830:	200050b8 	.word	0x200050b8

08005834 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
  return 0;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	68f9      	ldr	r1, [r7, #12]
 8005856:	4807      	ldr	r0, [pc, #28]	; (8005874 <ETH_PHY_IO_ReadReg+0x30>)
 8005858:	f7fd fb74 	bl	8002f44 <HAL_ETH_ReadPHYRegister>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005866:	e000      	b.n	800586a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	200050b8 	.word	0x200050b8

08005878 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	68f9      	ldr	r1, [r7, #12]
 800588a:	4807      	ldr	r0, [pc, #28]	; (80058a8 <ETH_PHY_IO_WriteReg+0x30>)
 800588c:	f7fd fba5 	bl	8002fda <HAL_ETH_WritePHYRegister>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800589a:	e000      	b.n	800589e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	200050b8 	.word	0x200050b8

080058ac <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80058b0:	f7fb ff6e 	bl	8001790 <HAL_GetTick>
 80058b4:	4603      	mov	r3, r0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	bd80      	pop	{r7, pc}
	...

080058bc <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b0a0      	sub	sp, #128	; 0x80
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80058c4:	f107 0308 	add.w	r3, r7, #8
 80058c8:	2264      	movs	r2, #100	; 0x64
 80058ca:	2100      	movs	r1, #0
 80058cc:	4618      	mov	r0, r3
 80058ce:	f013 ffb3 	bl	8019838 <memset>
  int32_t PHYLinkState = 0;
 80058d2:	2300      	movs	r3, #0
 80058d4:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058da:	2300      	movs	r3, #0
 80058dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80058de:	2300      	movs	r3, #0
 80058e0:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80058e6:	483a      	ldr	r0, [pc, #232]	; (80059d0 <ethernet_link_thread+0x114>)
 80058e8:	f7fb fea0 	bl	800162c <LAN8742_GetLinkState>
 80058ec:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80058ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058f4:	089b      	lsrs	r3, r3, #2
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00c      	beq.n	800591a <ethernet_link_thread+0x5e>
 8005900:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005902:	2b01      	cmp	r3, #1
 8005904:	dc09      	bgt.n	800591a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005906:	4833      	ldr	r0, [pc, #204]	; (80059d4 <ethernet_link_thread+0x118>)
 8005908:	f7fc ffd2 	bl	80028b0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800590c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800590e:	f006 fcf9 	bl	800c304 <netif_set_down>
    netif_set_link_down(netif);
 8005912:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005914:	f006 fd5c 	bl	800c3d0 <netif_set_link_down>
 8005918:	e055      	b.n	80059c6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800591a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b00      	cmp	r3, #0
 8005926:	d14e      	bne.n	80059c6 <ethernet_link_thread+0x10a>
 8005928:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800592a:	2b01      	cmp	r3, #1
 800592c:	dd4b      	ble.n	80059c6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800592e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005930:	3b02      	subs	r3, #2
 8005932:	2b03      	cmp	r3, #3
 8005934:	d82a      	bhi.n	800598c <ethernet_link_thread+0xd0>
 8005936:	a201      	add	r2, pc, #4	; (adr r2, 800593c <ethernet_link_thread+0x80>)
 8005938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593c:	0800594d 	.word	0x0800594d
 8005940:	0800595f 	.word	0x0800595f
 8005944:	0800596f 	.word	0x0800596f
 8005948:	0800597f 	.word	0x0800597f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800594c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005950:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005952:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005956:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005958:	2301      	movs	r3, #1
 800595a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800595c:	e017      	b.n	800598e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800595e:	2300      	movs	r3, #0
 8005960:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005962:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005966:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005968:	2301      	movs	r3, #1
 800596a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800596c:	e00f      	b.n	800598e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800596e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005972:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005974:	2300      	movs	r3, #0
 8005976:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005978:	2301      	movs	r3, #1
 800597a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800597c:	e007      	b.n	800598e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800597e:	2300      	movs	r3, #0
 8005980:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005982:	2300      	movs	r3, #0
 8005984:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005986:	2301      	movs	r3, #1
 8005988:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800598a:	e000      	b.n	800598e <ethernet_link_thread+0xd2>
    default:
      break;
 800598c:	bf00      	nop
    }

    if(linkchanged)
 800598e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d018      	beq.n	80059c6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005994:	f107 0308 	add.w	r3, r7, #8
 8005998:	4619      	mov	r1, r3
 800599a:	480e      	ldr	r0, [pc, #56]	; (80059d4 <ethernet_link_thread+0x118>)
 800599c:	f7fd fb66 	bl	800306c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80059a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059a2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80059a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059a6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80059a8:	f107 0308 	add.w	r3, r7, #8
 80059ac:	4619      	mov	r1, r3
 80059ae:	4809      	ldr	r0, [pc, #36]	; (80059d4 <ethernet_link_thread+0x118>)
 80059b0:	f7fd fc53 	bl	800325a <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80059b4:	4807      	ldr	r0, [pc, #28]	; (80059d4 <ethernet_link_thread+0x118>)
 80059b6:	f7fc ff0b 	bl	80027d0 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80059ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80059bc:	f006 fc36 	bl	800c22c <netif_set_up>
      netif_set_link_up(netif);
 80059c0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80059c2:	f006 fcd1 	bl	800c368 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80059c6:	2064      	movs	r0, #100	; 0x64
 80059c8:	f000 f910 	bl	8005bec <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80059cc:	e78b      	b.n	80058e6 <ethernet_link_thread+0x2a>
 80059ce:	bf00      	nop
 80059d0:	200051a0 	.word	0x200051a0
 80059d4:	200050b8 	.word	0x200050b8

080059d8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af02      	add	r7, sp, #8
 80059de:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80059e0:	4812      	ldr	r0, [pc, #72]	; (8005a2c <HAL_ETH_RxAllocateCallback+0x54>)
 80059e2:	f006 f997 	bl	800bd14 <memp_malloc_pool>
 80059e6:	60f8      	str	r0, [r7, #12]
  if (p)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d014      	beq.n	8005a18 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f103 0220 	add.w	r2, r3, #32
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4a0d      	ldr	r2, [pc, #52]	; (8005a30 <HAL_ETH_RxAllocateCallback+0x58>)
 80059fc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005a06:	9201      	str	r2, [sp, #4]
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2241      	movs	r2, #65	; 0x41
 8005a0e:	2100      	movs	r1, #0
 8005a10:	2000      	movs	r0, #0
 8005a12:	f006 ff01 	bl	800c818 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005a16:	e005      	b.n	8005a24 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005a18:	4b06      	ldr	r3, [pc, #24]	; (8005a34 <HAL_ETH_RxAllocateCallback+0x5c>)
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	601a      	str	r2, [r3, #0]
}
 8005a24:	bf00      	nop
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	0801ffb8 	.word	0x0801ffb8
 8005a30:	08005651 	.word	0x08005651
 8005a34:	200050ac 	.word	0x200050ac

08005a38 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b088      	sub	sp, #32
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	3b20      	subs	r3, #32
 8005a56:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	2200      	movs	r2, #0
 8005a62:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	887a      	ldrh	r2, [r7, #2]
 8005a68:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d103      	bne.n	8005a7a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	69fa      	ldr	r2, [r7, #28]
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	e003      	b.n	8005a82 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69fa      	ldr	r2, [r7, #28]
 8005a80:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	61fb      	str	r3, [r7, #28]
 8005a8e:	e009      	b.n	8005aa4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	891a      	ldrh	r2, [r3, #8]
 8005a94:	887b      	ldrh	r3, [r7, #2]
 8005a96:	4413      	add	r3, r2
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	61fb      	str	r3, [r7, #28]
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1f2      	bne.n	8005a90 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8005aaa:	887b      	ldrh	r3, [r7, #2]
 8005aac:	4619      	mov	r1, r3
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7ff fb2e 	bl	8005110 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005ab4:	bf00      	nop
 8005ab6:	3720      	adds	r7, #32
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f007 f861 	bl	800cb8c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005aca:	bf00      	nop
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b085      	sub	sp, #20
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	4603      	mov	r3, r0
 8005ada:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005adc:	2300      	movs	r3, #0
 8005ade:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005ae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ae4:	2b84      	cmp	r3, #132	; 0x84
 8005ae6:	d005      	beq.n	8005af4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005ae8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4413      	add	r3, r2
 8005af0:	3303      	adds	r3, #3
 8005af2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005af4:	68fb      	ldr	r3, [r7, #12]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b08:	f3ef 8305 	mrs	r3, IPSR
 8005b0c:	607b      	str	r3, [r7, #4]
  return(result);
 8005b0e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	bf14      	ite	ne
 8005b14:	2301      	movne	r3, #1
 8005b16:	2300      	moveq	r3, #0
 8005b18:	b2db      	uxtb	r3, r3
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005b2a:	f001 fe1b 	bl	8007764 <vTaskStartScheduler>
  
  return osOK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005b38:	f7ff ffe3 	bl	8005b02 <inHandlerMode>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005b42:	f001 ff2f 	bl	80079a4 <xTaskGetTickCountFromISR>
 8005b46:	4603      	mov	r3, r0
 8005b48:	e002      	b.n	8005b50 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005b4a:	f001 ff1b 	bl	8007984 <xTaskGetTickCount>
 8005b4e:	4603      	mov	r3, r0
  }
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b56:	b089      	sub	sp, #36	; 0x24
 8005b58:	af04      	add	r7, sp, #16
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d020      	beq.n	8005ba8 <osThreadCreate+0x54>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d01c      	beq.n	8005ba8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685c      	ldr	r4, [r3, #4]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681d      	ldr	r5, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691e      	ldr	r6, [r3, #16]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff ffa6 	bl	8005ad2 <makeFreeRtosPriority>
 8005b86:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b90:	9202      	str	r2, [sp, #8]
 8005b92:	9301      	str	r3, [sp, #4]
 8005b94:	9100      	str	r1, [sp, #0]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	4632      	mov	r2, r6
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	f001 fc0f 	bl	80073c0 <xTaskCreateStatic>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	e01c      	b.n	8005be2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685c      	ldr	r4, [r3, #4]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005bb4:	b29e      	uxth	r6, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7ff ff88 	bl	8005ad2 <makeFreeRtosPriority>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	f107 030c 	add.w	r3, r7, #12
 8005bc8:	9301      	str	r3, [sp, #4]
 8005bca:	9200      	str	r2, [sp, #0]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	4632      	mov	r2, r6
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f001 fc57 	bl	8007486 <xTaskCreate>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d001      	beq.n	8005be2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005bde:	2300      	movs	r3, #0
 8005be0:	e000      	b.n	8005be4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005be2:	68fb      	ldr	r3, [r7, #12]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <osDelay+0x16>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	e000      	b.n	8005c04 <osDelay+0x18>
 8005c02:	2301      	movs	r3, #1
 8005c04:	4618      	mov	r0, r3
 8005c06:	f001 fd77 	bl	80076f8 <vTaskDelay>
  
  return osOK;
 8005c0a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d007      	beq.n	8005c34 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	4619      	mov	r1, r3
 8005c2a:	2001      	movs	r0, #1
 8005c2c:	f000 fd39 	bl	80066a2 <xQueueCreateMutexStatic>
 8005c30:	4603      	mov	r3, r0
 8005c32:	e003      	b.n	8005c3c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005c34:	2001      	movs	r0, #1
 8005c36:	f000 fd1c 	bl	8006672 <xQueueCreateMutex>
 8005c3a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <osMutexWait+0x18>
    return osErrorParameter;
 8005c58:	2380      	movs	r3, #128	; 0x80
 8005c5a:	e03a      	b.n	8005cd2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c66:	d103      	bne.n	8005c70 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c6c:	60fb      	str	r3, [r7, #12]
 8005c6e:	e009      	b.n	8005c84 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d006      	beq.n	8005c84 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <osMutexWait+0x40>
      ticks = 1;
 8005c80:	2301      	movs	r3, #1
 8005c82:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005c84:	f7ff ff3d 	bl	8005b02 <inHandlerMode>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d017      	beq.n	8005cbe <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005c8e:	f107 0308 	add.w	r3, r7, #8
 8005c92:	461a      	mov	r2, r3
 8005c94:	2100      	movs	r1, #0
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f001 f954 	bl	8006f44 <xQueueReceiveFromISR>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d001      	beq.n	8005ca6 <osMutexWait+0x62>
      return osErrorOS;
 8005ca2:	23ff      	movs	r3, #255	; 0xff
 8005ca4:	e015      	b.n	8005cd2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d011      	beq.n	8005cd0 <osMutexWait+0x8c>
 8005cac:	4b0b      	ldr	r3, [pc, #44]	; (8005cdc <osMutexWait+0x98>)
 8005cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	e008      	b.n	8005cd0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005cbe:	68f9      	ldr	r1, [r7, #12]
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f001 f82b 	bl	8006d1c <xQueueSemaphoreTake>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d001      	beq.n	8005cd0 <osMutexWait+0x8c>
    return osErrorOS;
 8005ccc:	23ff      	movs	r3, #255	; 0xff
 8005cce:	e000      	b.n	8005cd2 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	e000ed04 	.word	0xe000ed04

08005ce0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005cec:	2300      	movs	r3, #0
 8005cee:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005cf0:	f7ff ff07 	bl	8005b02 <inHandlerMode>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d016      	beq.n	8005d28 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005cfa:	f107 0308 	add.w	r3, r7, #8
 8005cfe:	4619      	mov	r1, r3
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fe8f 	bl	8006a24 <xQueueGiveFromISR>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d001      	beq.n	8005d10 <osMutexRelease+0x30>
      return osErrorOS;
 8005d0c:	23ff      	movs	r3, #255	; 0xff
 8005d0e:	e017      	b.n	8005d40 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d013      	beq.n	8005d3e <osMutexRelease+0x5e>
 8005d16:	4b0c      	ldr	r3, [pc, #48]	; (8005d48 <osMutexRelease+0x68>)
 8005d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	e00a      	b.n	8005d3e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005d28:	2300      	movs	r3, #0
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fcd2 	bl	80066d8 <xQueueGenericSend>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d001      	beq.n	8005d3e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005d3a:	23ff      	movs	r3, #255	; 0xff
 8005d3c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	e000ed04 	.word	0xe000ed04

08005d4c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af02      	add	r7, sp, #8
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00f      	beq.n	8005d7e <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d10a      	bne.n	8005d7a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2203      	movs	r2, #3
 8005d6a:	9200      	str	r2, [sp, #0]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	2100      	movs	r1, #0
 8005d70:	2001      	movs	r0, #1
 8005d72:	f000 fb81 	bl	8006478 <xQueueGenericCreateStatic>
 8005d76:	4603      	mov	r3, r0
 8005d78:	e016      	b.n	8005da8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	e014      	b.n	8005da8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d110      	bne.n	8005da6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005d84:	2203      	movs	r2, #3
 8005d86:	2100      	movs	r1, #0
 8005d88:	2001      	movs	r0, #1
 8005d8a:	f000 fbf7 	bl	800657c <xQueueGenericCreate>
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d005      	beq.n	8005da2 <osSemaphoreCreate+0x56>
 8005d96:	2300      	movs	r3, #0
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 fc9b 	bl	80066d8 <xQueueGenericSend>
      return sema;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	e000      	b.n	8005da8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005da6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005dc4:	2380      	movs	r3, #128	; 0x80
 8005dc6:	e03a      	b.n	8005e3e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dd2:	d103      	bne.n	8005ddc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	e009      	b.n	8005df0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d006      	beq.n	8005df0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d101      	bne.n	8005df0 <osSemaphoreWait+0x40>
      ticks = 1;
 8005dec:	2301      	movs	r3, #1
 8005dee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005df0:	f7ff fe87 	bl	8005b02 <inHandlerMode>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d017      	beq.n	8005e2a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005dfa:	f107 0308 	add.w	r3, r7, #8
 8005dfe:	461a      	mov	r2, r3
 8005e00:	2100      	movs	r1, #0
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f001 f89e 	bl	8006f44 <xQueueReceiveFromISR>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d001      	beq.n	8005e12 <osSemaphoreWait+0x62>
      return osErrorOS;
 8005e0e:	23ff      	movs	r3, #255	; 0xff
 8005e10:	e015      	b.n	8005e3e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d011      	beq.n	8005e3c <osSemaphoreWait+0x8c>
 8005e18:	4b0b      	ldr	r3, [pc, #44]	; (8005e48 <osSemaphoreWait+0x98>)
 8005e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	e008      	b.n	8005e3c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005e2a:	68f9      	ldr	r1, [r7, #12]
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 ff75 	bl	8006d1c <xQueueSemaphoreTake>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d001      	beq.n	8005e3c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005e38:	23ff      	movs	r3, #255	; 0xff
 8005e3a:	e000      	b.n	8005e3e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	e000ed04 	.word	0xe000ed04

08005e4c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005e54:	2300      	movs	r3, #0
 8005e56:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005e5c:	f7ff fe51 	bl	8005b02 <inHandlerMode>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d016      	beq.n	8005e94 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005e66:	f107 0308 	add.w	r3, r7, #8
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fdd9 	bl	8006a24 <xQueueGiveFromISR>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d001      	beq.n	8005e7c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005e78:	23ff      	movs	r3, #255	; 0xff
 8005e7a:	e017      	b.n	8005eac <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d013      	beq.n	8005eaa <osSemaphoreRelease+0x5e>
 8005e82:	4b0c      	ldr	r3, [pc, #48]	; (8005eb4 <osSemaphoreRelease+0x68>)
 8005e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	e00a      	b.n	8005eaa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005e94:	2300      	movs	r3, #0
 8005e96:	2200      	movs	r2, #0
 8005e98:	2100      	movs	r1, #0
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fc1c 	bl	80066d8 <xQueueGenericSend>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d001      	beq.n	8005eaa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005ea6:	23ff      	movs	r3, #255	; 0xff
 8005ea8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	e000ed04 	.word	0xe000ed04

08005eb8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005ec0:	f7ff fe1f 	bl	8005b02 <inHandlerMode>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <osSemaphoreDelete+0x16>
    return osErrorISR;
 8005eca:	2382      	movs	r3, #130	; 0x82
 8005ecc:	e003      	b.n	8005ed6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f001 f8fe 	bl	80070d0 <vQueueDelete>

  return osOK; 
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005ede:	b590      	push	{r4, r7, lr}
 8005ee0:	b085      	sub	sp, #20
 8005ee2:	af02      	add	r7, sp, #8
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d011      	beq.n	8005f14 <osMessageCreate+0x36>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00d      	beq.n	8005f14 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6818      	ldr	r0, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6859      	ldr	r1, [r3, #4]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	2400      	movs	r4, #0
 8005f0a:	9400      	str	r4, [sp, #0]
 8005f0c:	f000 fab4 	bl	8006478 <xQueueGenericCreateStatic>
 8005f10:	4603      	mov	r3, r0
 8005f12:	e008      	b.n	8005f26 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6818      	ldr	r0, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	4619      	mov	r1, r3
 8005f20:	f000 fb2c 	bl	800657c <xQueueGenericCreate>
 8005f24:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd90      	pop	{r4, r7, pc}
	...

08005f30 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <osMessagePut+0x1e>
    ticks = 1;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005f4e:	f7ff fdd8 	bl	8005b02 <inHandlerMode>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d018      	beq.n	8005f8a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005f58:	f107 0210 	add.w	r2, r7, #16
 8005f5c:	f107 0108 	add.w	r1, r7, #8
 8005f60:	2300      	movs	r3, #0
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 fcbe 	bl	80068e4 <xQueueGenericSendFromISR>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d001      	beq.n	8005f72 <osMessagePut+0x42>
      return osErrorOS;
 8005f6e:	23ff      	movs	r3, #255	; 0xff
 8005f70:	e018      	b.n	8005fa4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d014      	beq.n	8005fa2 <osMessagePut+0x72>
 8005f78:	4b0c      	ldr	r3, [pc, #48]	; (8005fac <osMessagePut+0x7c>)
 8005f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f7e:	601a      	str	r2, [r3, #0]
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	e00b      	b.n	8005fa2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005f8a:	f107 0108 	add.w	r1, r7, #8
 8005f8e:	2300      	movs	r3, #0
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f000 fba0 	bl	80066d8 <xQueueGenericSend>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d001      	beq.n	8005fa2 <osMessagePut+0x72>
      return osErrorOS;
 8005f9e:	23ff      	movs	r3, #255	; 0xff
 8005fa0:	e000      	b.n	8005fa4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	e000ed04 	.word	0xe000ed04

08005fb0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005fb0:	b590      	push	{r4, r7, lr}
 8005fb2:	b08b      	sub	sp, #44	; 0x2c
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10a      	bne.n	8005fe0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005fca:	2380      	movs	r3, #128	; 0x80
 8005fcc:	617b      	str	r3, [r7, #20]
    return event;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	461c      	mov	r4, r3
 8005fd2:	f107 0314 	add.w	r3, r7, #20
 8005fd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005fda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005fde:	e054      	b.n	800608a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fee:	d103      	bne.n	8005ff8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005ff0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ff6:	e009      	b.n	800600c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d006      	beq.n	800600c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <osMessageGet+0x5c>
      ticks = 1;
 8006008:	2301      	movs	r3, #1
 800600a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800600c:	f7ff fd79 	bl	8005b02 <inHandlerMode>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d01c      	beq.n	8006050 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006016:	f107 0220 	add.w	r2, r7, #32
 800601a:	f107 0314 	add.w	r3, r7, #20
 800601e:	3304      	adds	r3, #4
 8006020:	4619      	mov	r1, r3
 8006022:	68b8      	ldr	r0, [r7, #8]
 8006024:	f000 ff8e 	bl	8006f44 <xQueueReceiveFromISR>
 8006028:	4603      	mov	r3, r0
 800602a:	2b01      	cmp	r3, #1
 800602c:	d102      	bne.n	8006034 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800602e:	2310      	movs	r3, #16
 8006030:	617b      	str	r3, [r7, #20]
 8006032:	e001      	b.n	8006038 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006034:	2300      	movs	r3, #0
 8006036:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d01d      	beq.n	800607a <osMessageGet+0xca>
 800603e:	4b15      	ldr	r3, [pc, #84]	; (8006094 <osMessageGet+0xe4>)
 8006040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	e014      	b.n	800607a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006050:	f107 0314 	add.w	r3, r7, #20
 8006054:	3304      	adds	r3, #4
 8006056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006058:	4619      	mov	r1, r3
 800605a:	68b8      	ldr	r0, [r7, #8]
 800605c:	f000 fd78 	bl	8006b50 <xQueueReceive>
 8006060:	4603      	mov	r3, r0
 8006062:	2b01      	cmp	r3, #1
 8006064:	d102      	bne.n	800606c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006066:	2310      	movs	r3, #16
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	e006      	b.n	800607a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <osMessageGet+0xc6>
 8006072:	2300      	movs	r3, #0
 8006074:	e000      	b.n	8006078 <osMessageGet+0xc8>
 8006076:	2340      	movs	r3, #64	; 0x40
 8006078:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	461c      	mov	r4, r3
 800607e:	f107 0314 	add.w	r3, r7, #20
 8006082:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006086:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	372c      	adds	r7, #44	; 0x2c
 800608e:	46bd      	mov	sp, r7
 8006090:	bd90      	pop	{r4, r7, pc}
 8006092:	bf00      	nop
 8006094:	e000ed04 	.word	0xe000ed04

08006098 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80060a0:	f7ff fd2f 	bl	8005b02 <inHandlerMode>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d004      	beq.n	80060b4 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fff0 	bl	8007090 <uxQueueMessagesWaitingFromISR>
 80060b0:	4603      	mov	r3, r0
 80060b2:	e003      	b.n	80060bc <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 ffcb 	bl	8007050 <uxQueueMessagesWaiting>
 80060ba:	4603      	mov	r3, r0
  }
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80060cc:	f7ff fd19 	bl	8005b02 <inHandlerMode>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <osMessageDelete+0x16>
    return osErrorISR;
 80060d6:	2382      	movs	r3, #130	; 0x82
 80060d8:	e003      	b.n	80060e2 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 fff8 	bl	80070d0 <vQueueDelete>

  return osOK; 
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b082      	sub	sp, #8
 80060ee:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80060f0:	201c      	movs	r0, #28
 80060f2:	f002 fc47 	bl	8008984 <pvPortMalloc>
 80060f6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00a      	beq.n	8006114 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	3304      	adds	r3, #4
 8006108:	4618      	mov	r0, r3
 800610a:	f000 f897 	bl	800623c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8006114:	687b      	ldr	r3, [r7, #4]
	}
 8006116:	4618      	mov	r0, r3
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b08e      	sub	sp, #56	; 0x38
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8006128:	2300      	movs	r3, #0
 800612a:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8006130:	2300      	movs	r3, #0
 8006132:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10c      	bne.n	8006154 <xEventGroupSetBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800613a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613e:	b672      	cpsid	i
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	b662      	cpsie	i
 800614e:	613b      	str	r3, [r7, #16]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006150:	bf00      	nop
 8006152:	e7fe      	b.n	8006152 <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00c      	beq.n	8006178 <xEventGroupSetBits+0x5a>
	__asm volatile
 800615e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006162:	b672      	cpsid	i
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	b662      	cpsie	i
 8006172:	60fb      	str	r3, [r7, #12]
}
 8006174:	bf00      	nop
 8006176:	e7fe      	b.n	8006176 <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8006178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617a:	3304      	adds	r3, #4
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	3308      	adds	r3, #8
 8006182:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8006184:	f001 fb52 	bl	800782c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	431a      	orrs	r2, r3
 8006196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006198:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800619a:	e03c      	b.n	8006216 <xEventGroupSetBits+0xf8>
		{
			pxNext = listGET_NEXT( pxListItem );
 800619c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80061a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80061a8:	2300      	movs	r3, #0
 80061aa:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80061b2:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80061ba:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d108      	bne.n	80061d8 <xEventGroupSetBits+0xba>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80061c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	4013      	ands	r3, r2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00b      	beq.n	80061ea <xEventGroupSetBits+0xcc>
				{
					xMatchFound = pdTRUE;
 80061d2:	2301      	movs	r3, #1
 80061d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061d6:	e008      	b.n	80061ea <xEventGroupSetBits+0xcc>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80061d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	4013      	ands	r3, r2
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d101      	bne.n	80061ea <xEventGroupSetBits+0xcc>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80061e6:	2301      	movs	r3, #1
 80061e8:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80061ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d010      	beq.n	8006212 <xEventGroupSetBits+0xf4>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <xEventGroupSetBits+0xe4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80061fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	4313      	orrs	r3, r2
 8006200:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800620a:	4619      	mov	r1, r3
 800620c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800620e:	f001 fd7d 	bl	8007d0c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8006216:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	429a      	cmp	r2, r3
 800621c:	d1be      	bne.n	800619c <xEventGroupSetBits+0x7e>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800621e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	43db      	mvns	r3, r3
 8006226:	401a      	ands	r2, r3
 8006228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622a:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800622c:	f001 fb0c 	bl	8007848 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8006230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006232:	681b      	ldr	r3, [r3, #0]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3738      	adds	r7, #56	; 0x38
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f103 0208 	add.w	r2, r3, #8
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006254:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f103 0208 	add.w	r2, r3, #8
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f103 0208 	add.w	r2, r3, #8
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006296:	b480      	push	{r7}
 8006298:	b085      	sub	sp, #20
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	601a      	str	r2, [r3, #0]
}
 80062d2:	bf00      	nop
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062de:	b480      	push	{r7}
 80062e0:	b085      	sub	sp, #20
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062f4:	d103      	bne.n	80062fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	e00c      	b.n	8006318 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3308      	adds	r3, #8
 8006302:	60fb      	str	r3, [r7, #12]
 8006304:	e002      	b.n	800630c <vListInsert+0x2e>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	60fb      	str	r3, [r7, #12]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	429a      	cmp	r2, r3
 8006316:	d2f6      	bcs.n	8006306 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	601a      	str	r2, [r3, #0]
}
 8006344:	bf00      	nop
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	6892      	ldr	r2, [r2, #8]
 8006366:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	6852      	ldr	r2, [r2, #4]
 8006370:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	429a      	cmp	r2, r3
 800637a:	d103      	bne.n	8006384 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	1e5a      	subs	r2, r3, #1
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10c      	bne.n	80063d2 <xQueueGenericReset+0x2e>
	__asm volatile
 80063b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063bc:	b672      	cpsid	i
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	b662      	cpsie	i
 80063cc:	60bb      	str	r3, [r7, #8]
}
 80063ce:	bf00      	nop
 80063d0:	e7fe      	b.n	80063d0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80063d2:	f002 f9ab 	bl	800872c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063de:	68f9      	ldr	r1, [r7, #12]
 80063e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063e2:	fb01 f303 	mul.w	r3, r1, r3
 80063e6:	441a      	add	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006402:	3b01      	subs	r3, #1
 8006404:	68f9      	ldr	r1, [r7, #12]
 8006406:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006408:	fb01 f303 	mul.w	r3, r1, r3
 800640c:	441a      	add	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	22ff      	movs	r2, #255	; 0xff
 8006416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	22ff      	movs	r2, #255	; 0xff
 800641e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d114      	bne.n	8006452 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d01a      	beq.n	8006466 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	3310      	adds	r3, #16
 8006434:	4618      	mov	r0, r3
 8006436:	f001 fc05 	bl	8007c44 <xTaskRemoveFromEventList>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d012      	beq.n	8006466 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006440:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <xQueueGenericReset+0xd0>)
 8006442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	e009      	b.n	8006466 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3310      	adds	r3, #16
 8006456:	4618      	mov	r0, r3
 8006458:	f7ff fef0 	bl	800623c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	3324      	adds	r3, #36	; 0x24
 8006460:	4618      	mov	r0, r3
 8006462:	f7ff feeb 	bl	800623c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006466:	f002 f995 	bl	8008794 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800646a:	2301      	movs	r3, #1
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	e000ed04 	.word	0xe000ed04

08006478 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006478:	b580      	push	{r7, lr}
 800647a:	b08e      	sub	sp, #56	; 0x38
 800647c:	af02      	add	r7, sp, #8
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
 8006484:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10c      	bne.n	80064a6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006490:	b672      	cpsid	i
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	b662      	cpsie	i
 80064a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80064a2:	bf00      	nop
 80064a4:	e7fe      	b.n	80064a4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10c      	bne.n	80064c6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80064ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b0:	b672      	cpsid	i
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	b662      	cpsie	i
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064c2:	bf00      	nop
 80064c4:	e7fe      	b.n	80064c4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <xQueueGenericCreateStatic+0x5a>
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <xQueueGenericCreateStatic+0x5e>
 80064d2:	2301      	movs	r3, #1
 80064d4:	e000      	b.n	80064d8 <xQueueGenericCreateStatic+0x60>
 80064d6:	2300      	movs	r3, #0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10c      	bne.n	80064f6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e0:	b672      	cpsid	i
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	b662      	cpsie	i
 80064f0:	623b      	str	r3, [r7, #32]
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d102      	bne.n	8006502 <xQueueGenericCreateStatic+0x8a>
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <xQueueGenericCreateStatic+0x8e>
 8006502:	2301      	movs	r3, #1
 8006504:	e000      	b.n	8006508 <xQueueGenericCreateStatic+0x90>
 8006506:	2300      	movs	r3, #0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10c      	bne.n	8006526 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800650c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006510:	b672      	cpsid	i
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	b662      	cpsie	i
 8006520:	61fb      	str	r3, [r7, #28]
}
 8006522:	bf00      	nop
 8006524:	e7fe      	b.n	8006524 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006526:	2348      	movs	r3, #72	; 0x48
 8006528:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2b48      	cmp	r3, #72	; 0x48
 800652e:	d00c      	beq.n	800654a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	b672      	cpsid	i
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	b662      	cpsie	i
 8006544:	61bb      	str	r3, [r7, #24]
}
 8006546:	bf00      	nop
 8006548:	e7fe      	b.n	8006548 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800654a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00d      	beq.n	8006572 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800655e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	4613      	mov	r3, r2
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	68b9      	ldr	r1, [r7, #8]
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 f847 	bl	8006600 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006574:	4618      	mov	r0, r3
 8006576:	3730      	adds	r7, #48	; 0x30
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800657c:	b580      	push	{r7, lr}
 800657e:	b08a      	sub	sp, #40	; 0x28
 8006580:	af02      	add	r7, sp, #8
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	4613      	mov	r3, r2
 8006588:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10c      	bne.n	80065aa <xQueueGenericCreate+0x2e>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	b672      	cpsid	i
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	b662      	cpsie	i
 80065a4:	613b      	str	r3, [r7, #16]
}
 80065a6:	bf00      	nop
 80065a8:	e7fe      	b.n	80065a8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d102      	bne.n	80065b6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80065b0:	2300      	movs	r3, #0
 80065b2:	61fb      	str	r3, [r7, #28]
 80065b4:	e004      	b.n	80065c0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	fb02 f303 	mul.w	r3, r2, r3
 80065be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	3348      	adds	r3, #72	; 0x48
 80065c4:	4618      	mov	r0, r3
 80065c6:	f002 f9dd 	bl	8008984 <pvPortMalloc>
 80065ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d011      	beq.n	80065f6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	3348      	adds	r3, #72	; 0x48
 80065da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065e4:	79fa      	ldrb	r2, [r7, #7]
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	4613      	mov	r3, r2
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	68b9      	ldr	r1, [r7, #8]
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 f805 	bl	8006600 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065f6:	69bb      	ldr	r3, [r7, #24]
	}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3720      	adds	r7, #32
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
 800660c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d103      	bne.n	800661c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	69ba      	ldr	r2, [r7, #24]
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	e002      	b.n	8006622 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800662e:	2101      	movs	r1, #1
 8006630:	69b8      	ldr	r0, [r7, #24]
 8006632:	f7ff feb7 	bl	80063a4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006636:	bf00      	nop
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800663e:	b580      	push	{r7, lr}
 8006640:	b082      	sub	sp, #8
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00e      	beq.n	800666a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800665e:	2300      	movs	r3, #0
 8006660:	2200      	movs	r2, #0
 8006662:	2100      	movs	r1, #0
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f837 	bl	80066d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800666a:	bf00      	nop
 800666c:	3708      	adds	r7, #8
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006672:	b580      	push	{r7, lr}
 8006674:	b086      	sub	sp, #24
 8006676:	af00      	add	r7, sp, #0
 8006678:	4603      	mov	r3, r0
 800667a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800667c:	2301      	movs	r3, #1
 800667e:	617b      	str	r3, [r7, #20]
 8006680:	2300      	movs	r3, #0
 8006682:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006684:	79fb      	ldrb	r3, [r7, #7]
 8006686:	461a      	mov	r2, r3
 8006688:	6939      	ldr	r1, [r7, #16]
 800668a:	6978      	ldr	r0, [r7, #20]
 800668c:	f7ff ff76 	bl	800657c <xQueueGenericCreate>
 8006690:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f7ff ffd3 	bl	800663e <prvInitialiseMutex>

		return xNewQueue;
 8006698:	68fb      	ldr	r3, [r7, #12]
	}
 800669a:	4618      	mov	r0, r3
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b088      	sub	sp, #32
 80066a6:	af02      	add	r7, sp, #8
 80066a8:	4603      	mov	r3, r0
 80066aa:	6039      	str	r1, [r7, #0]
 80066ac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80066ae:	2301      	movs	r3, #1
 80066b0:	617b      	str	r3, [r7, #20]
 80066b2:	2300      	movs	r3, #0
 80066b4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80066b6:	79fb      	ldrb	r3, [r7, #7]
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2200      	movs	r2, #0
 80066be:	6939      	ldr	r1, [r7, #16]
 80066c0:	6978      	ldr	r0, [r7, #20]
 80066c2:	f7ff fed9 	bl	8006478 <xQueueGenericCreateStatic>
 80066c6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f7ff ffb8 	bl	800663e <prvInitialiseMutex>

		return xNewQueue;
 80066ce:	68fb      	ldr	r3, [r7, #12]
	}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3718      	adds	r7, #24
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08e      	sub	sp, #56	; 0x38
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80066e6:	2300      	movs	r3, #0
 80066e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80066ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10c      	bne.n	800670e <xQueueGenericSend+0x36>
	__asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f8:	b672      	cpsid	i
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	b662      	cpsie	i
 8006708:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800670a:	bf00      	nop
 800670c:	e7fe      	b.n	800670c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d103      	bne.n	800671c <xQueueGenericSend+0x44>
 8006714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <xQueueGenericSend+0x48>
 800671c:	2301      	movs	r3, #1
 800671e:	e000      	b.n	8006722 <xQueueGenericSend+0x4a>
 8006720:	2300      	movs	r3, #0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10c      	bne.n	8006740 <xQueueGenericSend+0x68>
	__asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672a:	b672      	cpsid	i
 800672c:	f383 8811 	msr	BASEPRI, r3
 8006730:	f3bf 8f6f 	isb	sy
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	b662      	cpsie	i
 800673a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800673c:	bf00      	nop
 800673e:	e7fe      	b.n	800673e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	2b02      	cmp	r3, #2
 8006744:	d103      	bne.n	800674e <xQueueGenericSend+0x76>
 8006746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674a:	2b01      	cmp	r3, #1
 800674c:	d101      	bne.n	8006752 <xQueueGenericSend+0x7a>
 800674e:	2301      	movs	r3, #1
 8006750:	e000      	b.n	8006754 <xQueueGenericSend+0x7c>
 8006752:	2300      	movs	r3, #0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10c      	bne.n	8006772 <xQueueGenericSend+0x9a>
	__asm volatile
 8006758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675c:	b672      	cpsid	i
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	b662      	cpsie	i
 800676c:	623b      	str	r3, [r7, #32]
}
 800676e:	bf00      	nop
 8006770:	e7fe      	b.n	8006770 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006772:	f001 fc91 	bl	8008098 <xTaskGetSchedulerState>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d102      	bne.n	8006782 <xQueueGenericSend+0xaa>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <xQueueGenericSend+0xae>
 8006782:	2301      	movs	r3, #1
 8006784:	e000      	b.n	8006788 <xQueueGenericSend+0xb0>
 8006786:	2300      	movs	r3, #0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10c      	bne.n	80067a6 <xQueueGenericSend+0xce>
	__asm volatile
 800678c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006790:	b672      	cpsid	i
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	b662      	cpsie	i
 80067a0:	61fb      	str	r3, [r7, #28]
}
 80067a2:	bf00      	nop
 80067a4:	e7fe      	b.n	80067a4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067a6:	f001 ffc1 	bl	800872c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d302      	bcc.n	80067bc <xQueueGenericSend+0xe4>
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d129      	bne.n	8006810 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	68b9      	ldr	r1, [r7, #8]
 80067c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067c2:	f000 fcc2 	bl	800714a <prvCopyDataToQueue>
 80067c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d010      	beq.n	80067f2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d2:	3324      	adds	r3, #36	; 0x24
 80067d4:	4618      	mov	r0, r3
 80067d6:	f001 fa35 	bl	8007c44 <xTaskRemoveFromEventList>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d013      	beq.n	8006808 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80067e0:	4b3f      	ldr	r3, [pc, #252]	; (80068e0 <xQueueGenericSend+0x208>)
 80067e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	e00a      	b.n	8006808 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80067f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d007      	beq.n	8006808 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80067f8:	4b39      	ldr	r3, [pc, #228]	; (80068e0 <xQueueGenericSend+0x208>)
 80067fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006808:	f001 ffc4 	bl	8008794 <vPortExitCritical>
				return pdPASS;
 800680c:	2301      	movs	r3, #1
 800680e:	e063      	b.n	80068d8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d103      	bne.n	800681e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006816:	f001 ffbd 	bl	8008794 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800681a:	2300      	movs	r3, #0
 800681c:	e05c      	b.n	80068d8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800681e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006820:	2b00      	cmp	r3, #0
 8006822:	d106      	bne.n	8006832 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006824:	f107 0314 	add.w	r3, r7, #20
 8006828:	4618      	mov	r0, r3
 800682a:	f001 fad5 	bl	8007dd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800682e:	2301      	movs	r3, #1
 8006830:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006832:	f001 ffaf 	bl	8008794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006836:	f000 fff9 	bl	800782c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800683a:	f001 ff77 	bl	800872c <vPortEnterCritical>
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006844:	b25b      	sxtb	r3, r3
 8006846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800684a:	d103      	bne.n	8006854 <xQueueGenericSend+0x17c>
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684e:	2200      	movs	r2, #0
 8006850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006856:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800685a:	b25b      	sxtb	r3, r3
 800685c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006860:	d103      	bne.n	800686a <xQueueGenericSend+0x192>
 8006862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800686a:	f001 ff93 	bl	8008794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800686e:	1d3a      	adds	r2, r7, #4
 8006870:	f107 0314 	add.w	r3, r7, #20
 8006874:	4611      	mov	r1, r2
 8006876:	4618      	mov	r0, r3
 8006878:	f001 fac4 	bl	8007e04 <xTaskCheckForTimeOut>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d124      	bne.n	80068cc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006882:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006884:	f000 fd59 	bl	800733a <prvIsQueueFull>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d018      	beq.n	80068c0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	3310      	adds	r3, #16
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	4611      	mov	r1, r2
 8006896:	4618      	mov	r0, r3
 8006898:	f001 f9ae 	bl	8007bf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800689c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800689e:	f000 fce4 	bl	800726a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80068a2:	f000 ffd1 	bl	8007848 <xTaskResumeAll>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f47f af7c 	bne.w	80067a6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80068ae:	4b0c      	ldr	r3, [pc, #48]	; (80068e0 <xQueueGenericSend+0x208>)
 80068b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	e772      	b.n	80067a6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80068c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068c2:	f000 fcd2 	bl	800726a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068c6:	f000 ffbf 	bl	8007848 <xTaskResumeAll>
 80068ca:	e76c      	b.n	80067a6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80068cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068ce:	f000 fccc 	bl	800726a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068d2:	f000 ffb9 	bl	8007848 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80068d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3738      	adds	r7, #56	; 0x38
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	e000ed04 	.word	0xe000ed04

080068e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b08e      	sub	sp, #56	; 0x38
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
 80068f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10c      	bne.n	8006916 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006900:	b672      	cpsid	i
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	b662      	cpsie	i
 8006910:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006912:	bf00      	nop
 8006914:	e7fe      	b.n	8006914 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d103      	bne.n	8006924 <xQueueGenericSendFromISR+0x40>
 800691c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <xQueueGenericSendFromISR+0x44>
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <xQueueGenericSendFromISR+0x46>
 8006928:	2300      	movs	r3, #0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10c      	bne.n	8006948 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	b672      	cpsid	i
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	b662      	cpsie	i
 8006942:	623b      	str	r3, [r7, #32]
}
 8006944:	bf00      	nop
 8006946:	e7fe      	b.n	8006946 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2b02      	cmp	r3, #2
 800694c:	d103      	bne.n	8006956 <xQueueGenericSendFromISR+0x72>
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006952:	2b01      	cmp	r3, #1
 8006954:	d101      	bne.n	800695a <xQueueGenericSendFromISR+0x76>
 8006956:	2301      	movs	r3, #1
 8006958:	e000      	b.n	800695c <xQueueGenericSendFromISR+0x78>
 800695a:	2300      	movs	r3, #0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10c      	bne.n	800697a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006964:	b672      	cpsid	i
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	b662      	cpsie	i
 8006974:	61fb      	str	r3, [r7, #28]
}
 8006976:	bf00      	nop
 8006978:	e7fe      	b.n	8006978 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800697a:	f001 ffbf 	bl	80088fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800697e:	f3ef 8211 	mrs	r2, BASEPRI
 8006982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006986:	b672      	cpsid	i
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	b662      	cpsie	i
 8006996:	61ba      	str	r2, [r7, #24]
 8006998:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800699a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800699c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d302      	bcc.n	80069b0 <xQueueGenericSendFromISR+0xcc>
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d12c      	bne.n	8006a0a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80069b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	68b9      	ldr	r1, [r7, #8]
 80069be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069c0:	f000 fbc3 	bl	800714a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80069c4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80069c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069cc:	d112      	bne.n	80069f4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d016      	beq.n	8006a04 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d8:	3324      	adds	r3, #36	; 0x24
 80069da:	4618      	mov	r0, r3
 80069dc:	f001 f932 	bl	8007c44 <xTaskRemoveFromEventList>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00e      	beq.n	8006a04 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00b      	beq.n	8006a04 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	601a      	str	r2, [r3, #0]
 80069f2:	e007      	b.n	8006a04 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80069f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069f8:	3301      	adds	r3, #1
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	b25a      	sxtb	r2, r3
 80069fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006a04:	2301      	movs	r3, #1
 8006a06:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006a08:	e001      	b.n	8006a0e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a10:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3738      	adds	r7, #56	; 0x38
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b08e      	sub	sp, #56	; 0x38
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10c      	bne.n	8006a52 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8006a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3c:	b672      	cpsid	i
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	b662      	cpsie	i
 8006a4c:	623b      	str	r3, [r7, #32]
}
 8006a4e:	bf00      	nop
 8006a50:	e7fe      	b.n	8006a50 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00c      	beq.n	8006a74 <xQueueGiveFromISR+0x50>
	__asm volatile
 8006a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5e:	b672      	cpsid	i
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	b662      	cpsie	i
 8006a6e:	61fb      	str	r3, [r7, #28]
}
 8006a70:	bf00      	nop
 8006a72:	e7fe      	b.n	8006a72 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d103      	bne.n	8006a84 <xQueueGiveFromISR+0x60>
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <xQueueGiveFromISR+0x64>
 8006a84:	2301      	movs	r3, #1
 8006a86:	e000      	b.n	8006a8a <xQueueGiveFromISR+0x66>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10c      	bne.n	8006aa8 <xQueueGiveFromISR+0x84>
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	b672      	cpsid	i
 8006a94:	f383 8811 	msr	BASEPRI, r3
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	b662      	cpsie	i
 8006aa2:	61bb      	str	r3, [r7, #24]
}
 8006aa4:	bf00      	nop
 8006aa6:	e7fe      	b.n	8006aa6 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006aa8:	f001 ff28 	bl	80088fc <vPortValidateInterruptPriority>
	__asm volatile
 8006aac:	f3ef 8211 	mrs	r2, BASEPRI
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	b672      	cpsid	i
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	b662      	cpsie	i
 8006ac4:	617a      	str	r2, [r7, #20]
 8006ac6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006ac8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006aca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d22b      	bcs.n	8006b34 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae8:	1c5a      	adds	r2, r3, #1
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006aee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006af6:	d112      	bne.n	8006b1e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d016      	beq.n	8006b2e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b02:	3324      	adds	r3, #36	; 0x24
 8006b04:	4618      	mov	r0, r3
 8006b06:	f001 f89d 	bl	8007c44 <xTaskRemoveFromEventList>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00e      	beq.n	8006b2e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00b      	beq.n	8006b2e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	e007      	b.n	8006b2e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b22:	3301      	adds	r3, #1
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	b25a      	sxtb	r2, r3
 8006b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	637b      	str	r3, [r7, #52]	; 0x34
 8006b32:	e001      	b.n	8006b38 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b34:	2300      	movs	r3, #0
 8006b36:	637b      	str	r3, [r7, #52]	; 0x34
 8006b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f383 8811 	msr	BASEPRI, r3
}
 8006b42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3738      	adds	r7, #56	; 0x38
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
	...

08006b50 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b08c      	sub	sp, #48	; 0x30
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10c      	bne.n	8006b84 <xQueueReceive+0x34>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	b672      	cpsid	i
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	b662      	cpsie	i
 8006b7e:	623b      	str	r3, [r7, #32]
}
 8006b80:	bf00      	nop
 8006b82:	e7fe      	b.n	8006b82 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d103      	bne.n	8006b92 <xQueueReceive+0x42>
 8006b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <xQueueReceive+0x46>
 8006b92:	2301      	movs	r3, #1
 8006b94:	e000      	b.n	8006b98 <xQueueReceive+0x48>
 8006b96:	2300      	movs	r3, #0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10c      	bne.n	8006bb6 <xQueueReceive+0x66>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	b672      	cpsid	i
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	b662      	cpsie	i
 8006bb0:	61fb      	str	r3, [r7, #28]
}
 8006bb2:	bf00      	nop
 8006bb4:	e7fe      	b.n	8006bb4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bb6:	f001 fa6f 	bl	8008098 <xTaskGetSchedulerState>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d102      	bne.n	8006bc6 <xQueueReceive+0x76>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <xQueueReceive+0x7a>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e000      	b.n	8006bcc <xQueueReceive+0x7c>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10c      	bne.n	8006bea <xQueueReceive+0x9a>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd4:	b672      	cpsid	i
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	b662      	cpsie	i
 8006be4:	61bb      	str	r3, [r7, #24]
}
 8006be6:	bf00      	nop
 8006be8:	e7fe      	b.n	8006be8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bea:	f001 fd9f 	bl	800872c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d01f      	beq.n	8006c3a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006bfa:	68b9      	ldr	r1, [r7, #8]
 8006bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bfe:	f000 fb0e 	bl	800721e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	1e5a      	subs	r2, r3, #1
 8006c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00f      	beq.n	8006c32 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	3310      	adds	r3, #16
 8006c16:	4618      	mov	r0, r3
 8006c18:	f001 f814 	bl	8007c44 <xTaskRemoveFromEventList>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d007      	beq.n	8006c32 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c22:	4b3d      	ldr	r3, [pc, #244]	; (8006d18 <xQueueReceive+0x1c8>)
 8006c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c28:	601a      	str	r2, [r3, #0]
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c32:	f001 fdaf 	bl	8008794 <vPortExitCritical>
				return pdPASS;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e069      	b.n	8006d0e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d103      	bne.n	8006c48 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c40:	f001 fda8 	bl	8008794 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c44:	2300      	movs	r3, #0
 8006c46:	e062      	b.n	8006d0e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d106      	bne.n	8006c5c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c4e:	f107 0310 	add.w	r3, r7, #16
 8006c52:	4618      	mov	r0, r3
 8006c54:	f001 f8c0 	bl	8007dd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c5c:	f001 fd9a 	bl	8008794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c60:	f000 fde4 	bl	800782c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c64:	f001 fd62 	bl	800872c <vPortEnterCritical>
 8006c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c6e:	b25b      	sxtb	r3, r3
 8006c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c74:	d103      	bne.n	8006c7e <xQueueReceive+0x12e>
 8006c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c84:	b25b      	sxtb	r3, r3
 8006c86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c8a:	d103      	bne.n	8006c94 <xQueueReceive+0x144>
 8006c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c94:	f001 fd7e 	bl	8008794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c98:	1d3a      	adds	r2, r7, #4
 8006c9a:	f107 0310 	add.w	r3, r7, #16
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f001 f8af 	bl	8007e04 <xTaskCheckForTimeOut>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d123      	bne.n	8006cf4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cae:	f000 fb2e 	bl	800730e <prvIsQueueEmpty>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d017      	beq.n	8006ce8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cba:	3324      	adds	r3, #36	; 0x24
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	4611      	mov	r1, r2
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 ff99 	bl	8007bf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cc8:	f000 facf 	bl	800726a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ccc:	f000 fdbc 	bl	8007848 <xTaskResumeAll>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d189      	bne.n	8006bea <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006cd6:	4b10      	ldr	r3, [pc, #64]	; (8006d18 <xQueueReceive+0x1c8>)
 8006cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	e780      	b.n	8006bea <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cea:	f000 fabe 	bl	800726a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cee:	f000 fdab 	bl	8007848 <xTaskResumeAll>
 8006cf2:	e77a      	b.n	8006bea <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cf6:	f000 fab8 	bl	800726a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cfa:	f000 fda5 	bl	8007848 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d00:	f000 fb05 	bl	800730e <prvIsQueueEmpty>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f43f af6f 	beq.w	8006bea <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3730      	adds	r7, #48	; 0x30
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	e000ed04 	.word	0xe000ed04

08006d1c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08e      	sub	sp, #56	; 0x38
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d26:	2300      	movs	r3, #0
 8006d28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10c      	bne.n	8006d52 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3c:	b672      	cpsid	i
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	b662      	cpsie	i
 8006d4c:	623b      	str	r3, [r7, #32]
}
 8006d4e:	bf00      	nop
 8006d50:	e7fe      	b.n	8006d50 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00c      	beq.n	8006d74 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8006d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5e:	b672      	cpsid	i
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	b662      	cpsie	i
 8006d6e:	61fb      	str	r3, [r7, #28]
}
 8006d70:	bf00      	nop
 8006d72:	e7fe      	b.n	8006d72 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d74:	f001 f990 	bl	8008098 <xTaskGetSchedulerState>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d102      	bne.n	8006d84 <xQueueSemaphoreTake+0x68>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <xQueueSemaphoreTake+0x6c>
 8006d84:	2301      	movs	r3, #1
 8006d86:	e000      	b.n	8006d8a <xQueueSemaphoreTake+0x6e>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10c      	bne.n	8006da8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	b672      	cpsid	i
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	b662      	cpsie	i
 8006da2:	61bb      	str	r3, [r7, #24]
}
 8006da4:	bf00      	nop
 8006da6:	e7fe      	b.n	8006da6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006da8:	f001 fcc0 	bl	800872c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d024      	beq.n	8006e02 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dba:	1e5a      	subs	r2, r3, #1
 8006dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d104      	bne.n	8006dd2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006dc8:	f001 fb2c 	bl	8008424 <pvTaskIncrementMutexHeldCount>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00f      	beq.n	8006dfa <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ddc:	3310      	adds	r3, #16
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 ff30 	bl	8007c44 <xTaskRemoveFromEventList>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d007      	beq.n	8006dfa <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006dea:	4b55      	ldr	r3, [pc, #340]	; (8006f40 <xQueueSemaphoreTake+0x224>)
 8006dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006dfa:	f001 fccb 	bl	8008794 <vPortExitCritical>
				return pdPASS;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e099      	b.n	8006f36 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d113      	bne.n	8006e30 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00c      	beq.n	8006e28 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	b672      	cpsid	i
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	b662      	cpsie	i
 8006e22:	617b      	str	r3, [r7, #20]
}
 8006e24:	bf00      	nop
 8006e26:	e7fe      	b.n	8006e26 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006e28:	f001 fcb4 	bl	8008794 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	e082      	b.n	8006f36 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d106      	bne.n	8006e44 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e36:	f107 030c 	add.w	r3, r7, #12
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 ffcc 	bl	8007dd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e40:	2301      	movs	r3, #1
 8006e42:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e44:	f001 fca6 	bl	8008794 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e48:	f000 fcf0 	bl	800782c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e4c:	f001 fc6e 	bl	800872c <vPortEnterCritical>
 8006e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e56:	b25b      	sxtb	r3, r3
 8006e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e5c:	d103      	bne.n	8006e66 <xQueueSemaphoreTake+0x14a>
 8006e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e6c:	b25b      	sxtb	r3, r3
 8006e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e72:	d103      	bne.n	8006e7c <xQueueSemaphoreTake+0x160>
 8006e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e7c:	f001 fc8a 	bl	8008794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e80:	463a      	mov	r2, r7
 8006e82:	f107 030c 	add.w	r3, r7, #12
 8006e86:	4611      	mov	r1, r2
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 ffbb 	bl	8007e04 <xTaskCheckForTimeOut>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d132      	bne.n	8006efa <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e96:	f000 fa3a 	bl	800730e <prvIsQueueEmpty>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d026      	beq.n	8006eee <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d109      	bne.n	8006ebc <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8006ea8:	f001 fc40 	bl	800872c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f001 f90f 	bl	80080d4 <xTaskPriorityInherit>
 8006eb6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006eb8:	f001 fc6c 	bl	8008794 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebe:	3324      	adds	r3, #36	; 0x24
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 fe97 	bl	8007bf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006eca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ecc:	f000 f9cd 	bl	800726a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ed0:	f000 fcba 	bl	8007848 <xTaskResumeAll>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f47f af66 	bne.w	8006da8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8006edc:	4b18      	ldr	r3, [pc, #96]	; (8006f40 <xQueueSemaphoreTake+0x224>)
 8006ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	e75c      	b.n	8006da8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006eee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ef0:	f000 f9bb 	bl	800726a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ef4:	f000 fca8 	bl	8007848 <xTaskResumeAll>
 8006ef8:	e756      	b.n	8006da8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006efa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006efc:	f000 f9b5 	bl	800726a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f00:	f000 fca2 	bl	8007848 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f06:	f000 fa02 	bl	800730e <prvIsQueueEmpty>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f43f af4b 	beq.w	8006da8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00d      	beq.n	8006f34 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8006f18:	f001 fc08 	bl	800872c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006f1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f1e:	f000 f8fc 	bl	800711a <prvGetDisinheritPriorityAfterTimeout>
 8006f22:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f001 f9dc 	bl	80082e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006f30:	f001 fc30 	bl	8008794 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3738      	adds	r7, #56	; 0x38
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	e000ed04 	.word	0xe000ed04

08006f44 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b08e      	sub	sp, #56	; 0x38
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10c      	bne.n	8006f74 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8006f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5e:	b672      	cpsid	i
 8006f60:	f383 8811 	msr	BASEPRI, r3
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	b662      	cpsie	i
 8006f6e:	623b      	str	r3, [r7, #32]
}
 8006f70:	bf00      	nop
 8006f72:	e7fe      	b.n	8006f72 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d103      	bne.n	8006f82 <xQueueReceiveFromISR+0x3e>
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <xQueueReceiveFromISR+0x42>
 8006f82:	2301      	movs	r3, #1
 8006f84:	e000      	b.n	8006f88 <xQueueReceiveFromISR+0x44>
 8006f86:	2300      	movs	r3, #0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10c      	bne.n	8006fa6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	b672      	cpsid	i
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	b662      	cpsie	i
 8006fa0:	61fb      	str	r3, [r7, #28]
}
 8006fa2:	bf00      	nop
 8006fa4:	e7fe      	b.n	8006fa4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fa6:	f001 fca9 	bl	80088fc <vPortValidateInterruptPriority>
	__asm volatile
 8006faa:	f3ef 8211 	mrs	r2, BASEPRI
 8006fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb2:	b672      	cpsid	i
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	b662      	cpsie	i
 8006fc2:	61ba      	str	r2, [r7, #24]
 8006fc4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006fc6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d02f      	beq.n	8007036 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006fe0:	68b9      	ldr	r1, [r7, #8]
 8006fe2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fe4:	f000 f91b 	bl	800721e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fea:	1e5a      	subs	r2, r3, #1
 8006fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006ff0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ff8:	d112      	bne.n	8007020 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d016      	beq.n	8007030 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007004:	3310      	adds	r3, #16
 8007006:	4618      	mov	r0, r3
 8007008:	f000 fe1c 	bl	8007c44 <xTaskRemoveFromEventList>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00e      	beq.n	8007030 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00b      	beq.n	8007030 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	e007      	b.n	8007030 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007024:	3301      	adds	r3, #1
 8007026:	b2db      	uxtb	r3, r3
 8007028:	b25a      	sxtb	r2, r3
 800702a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007030:	2301      	movs	r3, #1
 8007032:	637b      	str	r3, [r7, #52]	; 0x34
 8007034:	e001      	b.n	800703a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007036:	2300      	movs	r3, #0
 8007038:	637b      	str	r3, [r7, #52]	; 0x34
 800703a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	f383 8811 	msr	BASEPRI, r3
}
 8007044:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007048:	4618      	mov	r0, r3
 800704a:	3738      	adds	r7, #56	; 0x38
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10c      	bne.n	8007078 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007062:	b672      	cpsid	i
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	b662      	cpsie	i
 8007072:	60bb      	str	r3, [r7, #8]
}
 8007074:	bf00      	nop
 8007076:	e7fe      	b.n	8007076 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8007078:	f001 fb58 	bl	800872c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007080:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007082:	f001 fb87 	bl	8008794 <vPortExitCritical>

	return uxReturn;
 8007086:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007090:	b480      	push	{r7}
 8007092:	b087      	sub	sp, #28
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10c      	bne.n	80070bc <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a6:	b672      	cpsid	i
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	b662      	cpsie	i
 80070b6:	60fb      	str	r3, [r7, #12]
}
 80070b8:	bf00      	nop
 80070ba:	e7fe      	b.n	80070ba <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80070c2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80070c4:	4618      	mov	r0, r3
 80070c6:	371c      	adds	r7, #28
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10c      	bne.n	80070fc <vQueueDelete+0x2c>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	b672      	cpsid	i
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	b662      	cpsie	i
 80070f6:	60bb      	str	r3, [r7, #8]
}
 80070f8:	bf00      	nop
 80070fa:	e7fe      	b.n	80070fa <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f000 f935 	bl	800736c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007108:	2b00      	cmp	r3, #0
 800710a:	d102      	bne.n	8007112 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f001 fd03 	bl	8008b18 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007112:	bf00      	nop
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800711a:	b480      	push	{r7}
 800711c:	b085      	sub	sp, #20
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007126:	2b00      	cmp	r3, #0
 8007128:	d006      	beq.n	8007138 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f1c3 0307 	rsb	r3, r3, #7
 8007134:	60fb      	str	r3, [r7, #12]
 8007136:	e001      	b.n	800713c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007138:	2300      	movs	r3, #0
 800713a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800713c:	68fb      	ldr	r3, [r7, #12]
	}
 800713e:	4618      	mov	r0, r3
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b086      	sub	sp, #24
 800714e:	af00      	add	r7, sp, #0
 8007150:	60f8      	str	r0, [r7, #12]
 8007152:	60b9      	str	r1, [r7, #8]
 8007154:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007156:	2300      	movs	r3, #0
 8007158:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10d      	bne.n	8007184 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d14d      	bne.n	800720c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	4618      	mov	r0, r3
 8007176:	f001 f82d 	bl	80081d4 <xTaskPriorityDisinherit>
 800717a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	609a      	str	r2, [r3, #8]
 8007182:	e043      	b.n	800720c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d119      	bne.n	80071be <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6858      	ldr	r0, [r3, #4]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	461a      	mov	r2, r3
 8007194:	68b9      	ldr	r1, [r7, #8]
 8007196:	f012 fb27 	bl	80197e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	441a      	add	r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d32b      	bcc.n	800720c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	605a      	str	r2, [r3, #4]
 80071bc:	e026      	b.n	800720c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	68d8      	ldr	r0, [r3, #12]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	461a      	mov	r2, r3
 80071c8:	68b9      	ldr	r1, [r7, #8]
 80071ca:	f012 fb0d 	bl	80197e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	68da      	ldr	r2, [r3, #12]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d6:	425b      	negs	r3, r3
 80071d8:	441a      	add	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	68da      	ldr	r2, [r3, #12]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d207      	bcs.n	80071fa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	689a      	ldr	r2, [r3, #8]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	425b      	negs	r3, r3
 80071f4:	441a      	add	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d105      	bne.n	800720c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	3b01      	subs	r3, #1
 800720a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007214:	697b      	ldr	r3, [r7, #20]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b082      	sub	sp, #8
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
 8007226:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722c:	2b00      	cmp	r3, #0
 800722e:	d018      	beq.n	8007262 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	68da      	ldr	r2, [r3, #12]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007238:	441a      	add	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68da      	ldr	r2, [r3, #12]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	429a      	cmp	r2, r3
 8007248:	d303      	bcc.n	8007252 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68d9      	ldr	r1, [r3, #12]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	461a      	mov	r2, r3
 800725c:	6838      	ldr	r0, [r7, #0]
 800725e:	f012 fac3 	bl	80197e8 <memcpy>
	}
}
 8007262:	bf00      	nop
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b084      	sub	sp, #16
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007272:	f001 fa5b 	bl	800872c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800727c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800727e:	e011      	b.n	80072a4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007284:	2b00      	cmp	r3, #0
 8007286:	d012      	beq.n	80072ae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	3324      	adds	r3, #36	; 0x24
 800728c:	4618      	mov	r0, r3
 800728e:	f000 fcd9 	bl	8007c44 <xTaskRemoveFromEventList>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007298:	f000 fe1a 	bl	8007ed0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800729c:	7bfb      	ldrb	r3, [r7, #15]
 800729e:	3b01      	subs	r3, #1
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	dce9      	bgt.n	8007280 <prvUnlockQueue+0x16>
 80072ac:	e000      	b.n	80072b0 <prvUnlockQueue+0x46>
					break;
 80072ae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	22ff      	movs	r2, #255	; 0xff
 80072b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80072b8:	f001 fa6c 	bl	8008794 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80072bc:	f001 fa36 	bl	800872c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072c6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072c8:	e011      	b.n	80072ee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d012      	beq.n	80072f8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	3310      	adds	r3, #16
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 fcb4 	bl	8007c44 <xTaskRemoveFromEventList>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80072e2:	f000 fdf5 	bl	8007ed0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80072e6:	7bbb      	ldrb	r3, [r7, #14]
 80072e8:	3b01      	subs	r3, #1
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	dce9      	bgt.n	80072ca <prvUnlockQueue+0x60>
 80072f6:	e000      	b.n	80072fa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80072f8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	22ff      	movs	r2, #255	; 0xff
 80072fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007302:	f001 fa47 	bl	8008794 <vPortExitCritical>
}
 8007306:	bf00      	nop
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b084      	sub	sp, #16
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007316:	f001 fa09 	bl	800872c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731e:	2b00      	cmp	r3, #0
 8007320:	d102      	bne.n	8007328 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007322:	2301      	movs	r3, #1
 8007324:	60fb      	str	r3, [r7, #12]
 8007326:	e001      	b.n	800732c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007328:	2300      	movs	r3, #0
 800732a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800732c:	f001 fa32 	bl	8008794 <vPortExitCritical>

	return xReturn;
 8007330:	68fb      	ldr	r3, [r7, #12]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b084      	sub	sp, #16
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007342:	f001 f9f3 	bl	800872c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734e:	429a      	cmp	r2, r3
 8007350:	d102      	bne.n	8007358 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007352:	2301      	movs	r3, #1
 8007354:	60fb      	str	r3, [r7, #12]
 8007356:	e001      	b.n	800735c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007358:	2300      	movs	r3, #0
 800735a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800735c:	f001 fa1a 	bl	8008794 <vPortExitCritical>

	return xReturn;
 8007360:	68fb      	ldr	r3, [r7, #12]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
	...

0800736c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007374:	2300      	movs	r3, #0
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	e016      	b.n	80073a8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800737a:	4a10      	ldr	r2, [pc, #64]	; (80073bc <vQueueUnregisterQueue+0x50>)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	00db      	lsls	r3, r3, #3
 8007380:	4413      	add	r3, r2
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	429a      	cmp	r2, r3
 8007388:	d10b      	bne.n	80073a2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800738a:	4a0c      	ldr	r2, [pc, #48]	; (80073bc <vQueueUnregisterQueue+0x50>)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2100      	movs	r1, #0
 8007390:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007394:	4a09      	ldr	r2, [pc, #36]	; (80073bc <vQueueUnregisterQueue+0x50>)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	00db      	lsls	r3, r3, #3
 800739a:	4413      	add	r3, r2
 800739c:	2200      	movs	r2, #0
 800739e:	605a      	str	r2, [r3, #4]
				break;
 80073a0:	e006      	b.n	80073b0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	3301      	adds	r3, #1
 80073a6:	60fb      	str	r3, [r7, #12]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2b07      	cmp	r3, #7
 80073ac:	d9e5      	bls.n	800737a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80073ae:	bf00      	nop
 80073b0:	bf00      	nop
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	200051c0 	.word	0x200051c0

080073c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08e      	sub	sp, #56	; 0x38
 80073c4:	af04      	add	r7, sp, #16
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
 80073cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80073ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10c      	bne.n	80073ee <xTaskCreateStatic+0x2e>
	__asm volatile
 80073d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d8:	b672      	cpsid	i
 80073da:	f383 8811 	msr	BASEPRI, r3
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f3bf 8f4f 	dsb	sy
 80073e6:	b662      	cpsie	i
 80073e8:	623b      	str	r3, [r7, #32]
}
 80073ea:	bf00      	nop
 80073ec:	e7fe      	b.n	80073ec <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80073ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10c      	bne.n	800740e <xTaskCreateStatic+0x4e>
	__asm volatile
 80073f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f8:	b672      	cpsid	i
 80073fa:	f383 8811 	msr	BASEPRI, r3
 80073fe:	f3bf 8f6f 	isb	sy
 8007402:	f3bf 8f4f 	dsb	sy
 8007406:	b662      	cpsie	i
 8007408:	61fb      	str	r3, [r7, #28]
}
 800740a:	bf00      	nop
 800740c:	e7fe      	b.n	800740c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800740e:	2354      	movs	r3, #84	; 0x54
 8007410:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	2b54      	cmp	r3, #84	; 0x54
 8007416:	d00c      	beq.n	8007432 <xTaskCreateStatic+0x72>
	__asm volatile
 8007418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741c:	b672      	cpsid	i
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	b662      	cpsie	i
 800742c:	61bb      	str	r3, [r7, #24]
}
 800742e:	bf00      	nop
 8007430:	e7fe      	b.n	8007430 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007432:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007436:	2b00      	cmp	r3, #0
 8007438:	d01e      	beq.n	8007478 <xTaskCreateStatic+0xb8>
 800743a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800743c:	2b00      	cmp	r3, #0
 800743e:	d01b      	beq.n	8007478 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007442:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007448:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	2202      	movs	r2, #2
 800744e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007452:	2300      	movs	r3, #0
 8007454:	9303      	str	r3, [sp, #12]
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	9302      	str	r3, [sp, #8]
 800745a:	f107 0314 	add.w	r3, r7, #20
 800745e:	9301      	str	r3, [sp, #4]
 8007460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	68b9      	ldr	r1, [r7, #8]
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f000 f850 	bl	8007510 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007470:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007472:	f000 f8d7 	bl	8007624 <prvAddNewTaskToReadyList>
 8007476:	e001      	b.n	800747c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007478:	2300      	movs	r3, #0
 800747a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800747c:	697b      	ldr	r3, [r7, #20]
	}
 800747e:	4618      	mov	r0, r3
 8007480:	3728      	adds	r7, #40	; 0x28
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007486:	b580      	push	{r7, lr}
 8007488:	b08c      	sub	sp, #48	; 0x30
 800748a:	af04      	add	r7, sp, #16
 800748c:	60f8      	str	r0, [r7, #12]
 800748e:	60b9      	str	r1, [r7, #8]
 8007490:	603b      	str	r3, [r7, #0]
 8007492:	4613      	mov	r3, r2
 8007494:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007496:	88fb      	ldrh	r3, [r7, #6]
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4618      	mov	r0, r3
 800749c:	f001 fa72 	bl	8008984 <pvPortMalloc>
 80074a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00e      	beq.n	80074c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074a8:	2054      	movs	r0, #84	; 0x54
 80074aa:	f001 fa6b 	bl	8008984 <pvPortMalloc>
 80074ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	631a      	str	r2, [r3, #48]	; 0x30
 80074bc:	e005      	b.n	80074ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80074be:	6978      	ldr	r0, [r7, #20]
 80074c0:	f001 fb2a 	bl	8008b18 <vPortFree>
 80074c4:	e001      	b.n	80074ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d017      	beq.n	8007500 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074d8:	88fa      	ldrh	r2, [r7, #6]
 80074da:	2300      	movs	r3, #0
 80074dc:	9303      	str	r3, [sp, #12]
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	9302      	str	r3, [sp, #8]
 80074e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e4:	9301      	str	r3, [sp, #4]
 80074e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	68b9      	ldr	r1, [r7, #8]
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f000 f80e 	bl	8007510 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074f4:	69f8      	ldr	r0, [r7, #28]
 80074f6:	f000 f895 	bl	8007624 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80074fa:	2301      	movs	r3, #1
 80074fc:	61bb      	str	r3, [r7, #24]
 80074fe:	e002      	b.n	8007506 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007504:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007506:	69bb      	ldr	r3, [r7, #24]
	}
 8007508:	4618      	mov	r0, r3
 800750a:	3720      	adds	r7, #32
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
 800751c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800751e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007522:	6879      	ldr	r1, [r7, #4]
 8007524:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007528:	440b      	add	r3, r1
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	f023 0307 	bic.w	r3, r3, #7
 8007536:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	f003 0307 	and.w	r3, r3, #7
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00c      	beq.n	800755c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8007542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007546:	b672      	cpsid	i
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	b662      	cpsie	i
 8007556:	617b      	str	r3, [r7, #20]
}
 8007558:	bf00      	nop
 800755a:	e7fe      	b.n	800755a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d01f      	beq.n	80075a2 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007562:	2300      	movs	r3, #0
 8007564:	61fb      	str	r3, [r7, #28]
 8007566:	e012      	b.n	800758e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	4413      	add	r3, r2
 800756e:	7819      	ldrb	r1, [r3, #0]
 8007570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	4413      	add	r3, r2
 8007576:	3334      	adds	r3, #52	; 0x34
 8007578:	460a      	mov	r2, r1
 800757a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	4413      	add	r3, r2
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d006      	beq.n	8007596 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	3301      	adds	r3, #1
 800758c:	61fb      	str	r3, [r7, #28]
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	2b0f      	cmp	r3, #15
 8007592:	d9e9      	bls.n	8007568 <prvInitialiseNewTask+0x58>
 8007594:	e000      	b.n	8007598 <prvInitialiseNewTask+0x88>
			{
				break;
 8007596:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	2200      	movs	r2, #0
 800759c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075a0:	e003      	b.n	80075aa <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80075a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ac:	2b06      	cmp	r3, #6
 80075ae:	d901      	bls.n	80075b4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075b0:	2306      	movs	r3, #6
 80075b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075be:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80075c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c2:	2200      	movs	r2, #0
 80075c4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	3304      	adds	r3, #4
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fe fe56 	bl	800627c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	3318      	adds	r3, #24
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fe fe51 	bl	800627c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	f1c3 0207 	rsb	r2, r3, #7
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80075f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f2:	2200      	movs	r2, #0
 80075f4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	68f9      	ldr	r1, [r7, #12]
 8007602:	69b8      	ldr	r0, [r7, #24]
 8007604:	f000 ff88 	bl	8008518 <pxPortInitialiseStack>
 8007608:	4602      	mov	r2, r0
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800760e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007618:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800761a:	bf00      	nop
 800761c:	3720      	adds	r7, #32
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
	...

08007624 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800762c:	f001 f87e 	bl	800872c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007630:	4b2a      	ldr	r3, [pc, #168]	; (80076dc <prvAddNewTaskToReadyList+0xb8>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3301      	adds	r3, #1
 8007636:	4a29      	ldr	r2, [pc, #164]	; (80076dc <prvAddNewTaskToReadyList+0xb8>)
 8007638:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800763a:	4b29      	ldr	r3, [pc, #164]	; (80076e0 <prvAddNewTaskToReadyList+0xbc>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d109      	bne.n	8007656 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007642:	4a27      	ldr	r2, [pc, #156]	; (80076e0 <prvAddNewTaskToReadyList+0xbc>)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007648:	4b24      	ldr	r3, [pc, #144]	; (80076dc <prvAddNewTaskToReadyList+0xb8>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d110      	bne.n	8007672 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007650:	f000 fc62 	bl	8007f18 <prvInitialiseTaskLists>
 8007654:	e00d      	b.n	8007672 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007656:	4b23      	ldr	r3, [pc, #140]	; (80076e4 <prvAddNewTaskToReadyList+0xc0>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d109      	bne.n	8007672 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800765e:	4b20      	ldr	r3, [pc, #128]	; (80076e0 <prvAddNewTaskToReadyList+0xbc>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	429a      	cmp	r2, r3
 800766a:	d802      	bhi.n	8007672 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800766c:	4a1c      	ldr	r2, [pc, #112]	; (80076e0 <prvAddNewTaskToReadyList+0xbc>)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007672:	4b1d      	ldr	r3, [pc, #116]	; (80076e8 <prvAddNewTaskToReadyList+0xc4>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3301      	adds	r3, #1
 8007678:	4a1b      	ldr	r2, [pc, #108]	; (80076e8 <prvAddNewTaskToReadyList+0xc4>)
 800767a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007680:	2201      	movs	r2, #1
 8007682:	409a      	lsls	r2, r3
 8007684:	4b19      	ldr	r3, [pc, #100]	; (80076ec <prvAddNewTaskToReadyList+0xc8>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4313      	orrs	r3, r2
 800768a:	4a18      	ldr	r2, [pc, #96]	; (80076ec <prvAddNewTaskToReadyList+0xc8>)
 800768c:	6013      	str	r3, [r2, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007692:	4613      	mov	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4a15      	ldr	r2, [pc, #84]	; (80076f0 <prvAddNewTaskToReadyList+0xcc>)
 800769c:	441a      	add	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	3304      	adds	r3, #4
 80076a2:	4619      	mov	r1, r3
 80076a4:	4610      	mov	r0, r2
 80076a6:	f7fe fdf6 	bl	8006296 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076aa:	f001 f873 	bl	8008794 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076ae:	4b0d      	ldr	r3, [pc, #52]	; (80076e4 <prvAddNewTaskToReadyList+0xc0>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00e      	beq.n	80076d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076b6:	4b0a      	ldr	r3, [pc, #40]	; (80076e0 <prvAddNewTaskToReadyList+0xbc>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d207      	bcs.n	80076d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076c4:	4b0b      	ldr	r3, [pc, #44]	; (80076f4 <prvAddNewTaskToReadyList+0xd0>)
 80076c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076d4:	bf00      	nop
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	20005300 	.word	0x20005300
 80076e0:	20005200 	.word	0x20005200
 80076e4:	2000530c 	.word	0x2000530c
 80076e8:	2000531c 	.word	0x2000531c
 80076ec:	20005308 	.word	0x20005308
 80076f0:	20005204 	.word	0x20005204
 80076f4:	e000ed04 	.word	0xe000ed04

080076f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007700:	2300      	movs	r3, #0
 8007702:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d019      	beq.n	800773e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800770a:	4b14      	ldr	r3, [pc, #80]	; (800775c <vTaskDelay+0x64>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00c      	beq.n	800772c <vTaskDelay+0x34>
	__asm volatile
 8007712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007716:	b672      	cpsid	i
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	b662      	cpsie	i
 8007726:	60bb      	str	r3, [r7, #8]
}
 8007728:	bf00      	nop
 800772a:	e7fe      	b.n	800772a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800772c:	f000 f87e 	bl	800782c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007730:	2100      	movs	r1, #0
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fe8a 	bl	800844c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007738:	f000 f886 	bl	8007848 <xTaskResumeAll>
 800773c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d107      	bne.n	8007754 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007744:	4b06      	ldr	r3, [pc, #24]	; (8007760 <vTaskDelay+0x68>)
 8007746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007754:	bf00      	nop
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	20005328 	.word	0x20005328
 8007760:	e000ed04 	.word	0xe000ed04

08007764 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b08a      	sub	sp, #40	; 0x28
 8007768:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800776a:	2300      	movs	r3, #0
 800776c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800776e:	2300      	movs	r3, #0
 8007770:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007772:	463a      	mov	r2, r7
 8007774:	1d39      	adds	r1, r7, #4
 8007776:	f107 0308 	add.w	r3, r7, #8
 800777a:	4618      	mov	r0, r3
 800777c:	f7f8 ff4a 	bl	8000614 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	9202      	str	r2, [sp, #8]
 8007788:	9301      	str	r3, [sp, #4]
 800778a:	2300      	movs	r3, #0
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	2300      	movs	r3, #0
 8007790:	460a      	mov	r2, r1
 8007792:	4920      	ldr	r1, [pc, #128]	; (8007814 <vTaskStartScheduler+0xb0>)
 8007794:	4820      	ldr	r0, [pc, #128]	; (8007818 <vTaskStartScheduler+0xb4>)
 8007796:	f7ff fe13 	bl	80073c0 <xTaskCreateStatic>
 800779a:	4603      	mov	r3, r0
 800779c:	4a1f      	ldr	r2, [pc, #124]	; (800781c <vTaskStartScheduler+0xb8>)
 800779e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80077a0:	4b1e      	ldr	r3, [pc, #120]	; (800781c <vTaskStartScheduler+0xb8>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077a8:	2301      	movs	r3, #1
 80077aa:	617b      	str	r3, [r7, #20]
 80077ac:	e001      	b.n	80077b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80077ae:	2300      	movs	r3, #0
 80077b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d118      	bne.n	80077ea <vTaskStartScheduler+0x86>
	__asm volatile
 80077b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077bc:	b672      	cpsid	i
 80077be:	f383 8811 	msr	BASEPRI, r3
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	b662      	cpsie	i
 80077cc:	613b      	str	r3, [r7, #16]
}
 80077ce:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077d0:	4b13      	ldr	r3, [pc, #76]	; (8007820 <vTaskStartScheduler+0xbc>)
 80077d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80077d8:	4b12      	ldr	r3, [pc, #72]	; (8007824 <vTaskStartScheduler+0xc0>)
 80077da:	2201      	movs	r2, #1
 80077dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80077de:	4b12      	ldr	r3, [pc, #72]	; (8007828 <vTaskStartScheduler+0xc4>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80077e4:	f000 ff24 	bl	8008630 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80077e8:	e010      	b.n	800780c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077f0:	d10c      	bne.n	800780c <vTaskStartScheduler+0xa8>
	__asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f6:	b672      	cpsid	i
 80077f8:	f383 8811 	msr	BASEPRI, r3
 80077fc:	f3bf 8f6f 	isb	sy
 8007800:	f3bf 8f4f 	dsb	sy
 8007804:	b662      	cpsie	i
 8007806:	60fb      	str	r3, [r7, #12]
}
 8007808:	bf00      	nop
 800780a:	e7fe      	b.n	800780a <vTaskStartScheduler+0xa6>
}
 800780c:	bf00      	nop
 800780e:	3718      	adds	r7, #24
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	0801c774 	.word	0x0801c774
 8007818:	08007ee9 	.word	0x08007ee9
 800781c:	20005324 	.word	0x20005324
 8007820:	20005320 	.word	0x20005320
 8007824:	2000530c 	.word	0x2000530c
 8007828:	20005304 	.word	0x20005304

0800782c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800782c:	b480      	push	{r7}
 800782e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007830:	4b04      	ldr	r3, [pc, #16]	; (8007844 <vTaskSuspendAll+0x18>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	3301      	adds	r3, #1
 8007836:	4a03      	ldr	r2, [pc, #12]	; (8007844 <vTaskSuspendAll+0x18>)
 8007838:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800783a:	bf00      	nop
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	20005328 	.word	0x20005328

08007848 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007852:	2300      	movs	r3, #0
 8007854:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007856:	4b42      	ldr	r3, [pc, #264]	; (8007960 <xTaskResumeAll+0x118>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10c      	bne.n	8007878 <xTaskResumeAll+0x30>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	b672      	cpsid	i
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	b662      	cpsie	i
 8007872:	603b      	str	r3, [r7, #0]
}
 8007874:	bf00      	nop
 8007876:	e7fe      	b.n	8007876 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007878:	f000 ff58 	bl	800872c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800787c:	4b38      	ldr	r3, [pc, #224]	; (8007960 <xTaskResumeAll+0x118>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3b01      	subs	r3, #1
 8007882:	4a37      	ldr	r2, [pc, #220]	; (8007960 <xTaskResumeAll+0x118>)
 8007884:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007886:	4b36      	ldr	r3, [pc, #216]	; (8007960 <xTaskResumeAll+0x118>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d161      	bne.n	8007952 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800788e:	4b35      	ldr	r3, [pc, #212]	; (8007964 <xTaskResumeAll+0x11c>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d05d      	beq.n	8007952 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007896:	e02e      	b.n	80078f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007898:	4b33      	ldr	r3, [pc, #204]	; (8007968 <xTaskResumeAll+0x120>)
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	3318      	adds	r3, #24
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7fe fd53 	bl	8006350 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	3304      	adds	r3, #4
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7fe fd4e 	bl	8006350 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b8:	2201      	movs	r2, #1
 80078ba:	409a      	lsls	r2, r3
 80078bc:	4b2b      	ldr	r3, [pc, #172]	; (800796c <xTaskResumeAll+0x124>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	4a2a      	ldr	r2, [pc, #168]	; (800796c <xTaskResumeAll+0x124>)
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ca:	4613      	mov	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4a27      	ldr	r2, [pc, #156]	; (8007970 <xTaskResumeAll+0x128>)
 80078d4:	441a      	add	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	3304      	adds	r3, #4
 80078da:	4619      	mov	r1, r3
 80078dc:	4610      	mov	r0, r2
 80078de:	f7fe fcda 	bl	8006296 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e6:	4b23      	ldr	r3, [pc, #140]	; (8007974 <xTaskResumeAll+0x12c>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d302      	bcc.n	80078f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80078f0:	4b21      	ldr	r3, [pc, #132]	; (8007978 <xTaskResumeAll+0x130>)
 80078f2:	2201      	movs	r2, #1
 80078f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078f6:	4b1c      	ldr	r3, [pc, #112]	; (8007968 <xTaskResumeAll+0x120>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1cc      	bne.n	8007898 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007904:	f000 fba8 	bl	8008058 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007908:	4b1c      	ldr	r3, [pc, #112]	; (800797c <xTaskResumeAll+0x134>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d010      	beq.n	8007936 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007914:	f000 f858 	bl	80079c8 <xTaskIncrementTick>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d002      	beq.n	8007924 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800791e:	4b16      	ldr	r3, [pc, #88]	; (8007978 <xTaskResumeAll+0x130>)
 8007920:	2201      	movs	r2, #1
 8007922:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3b01      	subs	r3, #1
 8007928:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1f1      	bne.n	8007914 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007930:	4b12      	ldr	r3, [pc, #72]	; (800797c <xTaskResumeAll+0x134>)
 8007932:	2200      	movs	r2, #0
 8007934:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007936:	4b10      	ldr	r3, [pc, #64]	; (8007978 <xTaskResumeAll+0x130>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d009      	beq.n	8007952 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800793e:	2301      	movs	r3, #1
 8007940:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007942:	4b0f      	ldr	r3, [pc, #60]	; (8007980 <xTaskResumeAll+0x138>)
 8007944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007948:	601a      	str	r2, [r3, #0]
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007952:	f000 ff1f 	bl	8008794 <vPortExitCritical>

	return xAlreadyYielded;
 8007956:	68bb      	ldr	r3, [r7, #8]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	20005328 	.word	0x20005328
 8007964:	20005300 	.word	0x20005300
 8007968:	200052c0 	.word	0x200052c0
 800796c:	20005308 	.word	0x20005308
 8007970:	20005204 	.word	0x20005204
 8007974:	20005200 	.word	0x20005200
 8007978:	20005314 	.word	0x20005314
 800797c:	20005310 	.word	0x20005310
 8007980:	e000ed04 	.word	0xe000ed04

08007984 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800798a:	4b05      	ldr	r3, [pc, #20]	; (80079a0 <xTaskGetTickCount+0x1c>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007990:	687b      	ldr	r3, [r7, #4]
}
 8007992:	4618      	mov	r0, r3
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	20005304 	.word	0x20005304

080079a4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079aa:	f000 ffa7 	bl	80088fc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80079ae:	2300      	movs	r3, #0
 80079b0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80079b2:	4b04      	ldr	r3, [pc, #16]	; (80079c4 <xTaskGetTickCountFromISR+0x20>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80079b8:	683b      	ldr	r3, [r7, #0]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	20005304 	.word	0x20005304

080079c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80079ce:	2300      	movs	r3, #0
 80079d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079d2:	4b4f      	ldr	r3, [pc, #316]	; (8007b10 <xTaskIncrementTick+0x148>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f040 808a 	bne.w	8007af0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079dc:	4b4d      	ldr	r3, [pc, #308]	; (8007b14 <xTaskIncrementTick+0x14c>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3301      	adds	r3, #1
 80079e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80079e4:	4a4b      	ldr	r2, [pc, #300]	; (8007b14 <xTaskIncrementTick+0x14c>)
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d122      	bne.n	8007a36 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80079f0:	4b49      	ldr	r3, [pc, #292]	; (8007b18 <xTaskIncrementTick+0x150>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00c      	beq.n	8007a14 <xTaskIncrementTick+0x4c>
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fe:	b672      	cpsid	i
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	b662      	cpsie	i
 8007a0e:	603b      	str	r3, [r7, #0]
}
 8007a10:	bf00      	nop
 8007a12:	e7fe      	b.n	8007a12 <xTaskIncrementTick+0x4a>
 8007a14:	4b40      	ldr	r3, [pc, #256]	; (8007b18 <xTaskIncrementTick+0x150>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	60fb      	str	r3, [r7, #12]
 8007a1a:	4b40      	ldr	r3, [pc, #256]	; (8007b1c <xTaskIncrementTick+0x154>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a3e      	ldr	r2, [pc, #248]	; (8007b18 <xTaskIncrementTick+0x150>)
 8007a20:	6013      	str	r3, [r2, #0]
 8007a22:	4a3e      	ldr	r2, [pc, #248]	; (8007b1c <xTaskIncrementTick+0x154>)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6013      	str	r3, [r2, #0]
 8007a28:	4b3d      	ldr	r3, [pc, #244]	; (8007b20 <xTaskIncrementTick+0x158>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	4a3c      	ldr	r2, [pc, #240]	; (8007b20 <xTaskIncrementTick+0x158>)
 8007a30:	6013      	str	r3, [r2, #0]
 8007a32:	f000 fb11 	bl	8008058 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a36:	4b3b      	ldr	r3, [pc, #236]	; (8007b24 <xTaskIncrementTick+0x15c>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d348      	bcc.n	8007ad2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a40:	4b35      	ldr	r3, [pc, #212]	; (8007b18 <xTaskIncrementTick+0x150>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d104      	bne.n	8007a54 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a4a:	4b36      	ldr	r3, [pc, #216]	; (8007b24 <xTaskIncrementTick+0x15c>)
 8007a4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a50:	601a      	str	r2, [r3, #0]
					break;
 8007a52:	e03e      	b.n	8007ad2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a54:	4b30      	ldr	r3, [pc, #192]	; (8007b18 <xTaskIncrementTick+0x150>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d203      	bcs.n	8007a74 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a6c:	4a2d      	ldr	r2, [pc, #180]	; (8007b24 <xTaskIncrementTick+0x15c>)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a72:	e02e      	b.n	8007ad2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	3304      	adds	r3, #4
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7fe fc69 	bl	8006350 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d004      	beq.n	8007a90 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	3318      	adds	r3, #24
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fe fc60 	bl	8006350 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a94:	2201      	movs	r2, #1
 8007a96:	409a      	lsls	r2, r3
 8007a98:	4b23      	ldr	r3, [pc, #140]	; (8007b28 <xTaskIncrementTick+0x160>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	4a22      	ldr	r2, [pc, #136]	; (8007b28 <xTaskIncrementTick+0x160>)
 8007aa0:	6013      	str	r3, [r2, #0]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4a1f      	ldr	r2, [pc, #124]	; (8007b2c <xTaskIncrementTick+0x164>)
 8007ab0:	441a      	add	r2, r3
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	4610      	mov	r0, r2
 8007aba:	f7fe fbec 	bl	8006296 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac2:	4b1b      	ldr	r3, [pc, #108]	; (8007b30 <xTaskIncrementTick+0x168>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d3b9      	bcc.n	8007a40 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007acc:	2301      	movs	r3, #1
 8007ace:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ad0:	e7b6      	b.n	8007a40 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ad2:	4b17      	ldr	r3, [pc, #92]	; (8007b30 <xTaskIncrementTick+0x168>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad8:	4914      	ldr	r1, [pc, #80]	; (8007b2c <xTaskIncrementTick+0x164>)
 8007ada:	4613      	mov	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	440b      	add	r3, r1
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d907      	bls.n	8007afa <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8007aea:	2301      	movs	r3, #1
 8007aec:	617b      	str	r3, [r7, #20]
 8007aee:	e004      	b.n	8007afa <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007af0:	4b10      	ldr	r3, [pc, #64]	; (8007b34 <xTaskIncrementTick+0x16c>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3301      	adds	r3, #1
 8007af6:	4a0f      	ldr	r2, [pc, #60]	; (8007b34 <xTaskIncrementTick+0x16c>)
 8007af8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007afa:	4b0f      	ldr	r3, [pc, #60]	; (8007b38 <xTaskIncrementTick+0x170>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d001      	beq.n	8007b06 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8007b02:	2301      	movs	r3, #1
 8007b04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007b06:	697b      	ldr	r3, [r7, #20]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3718      	adds	r7, #24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	20005328 	.word	0x20005328
 8007b14:	20005304 	.word	0x20005304
 8007b18:	200052b8 	.word	0x200052b8
 8007b1c:	200052bc 	.word	0x200052bc
 8007b20:	20005318 	.word	0x20005318
 8007b24:	20005320 	.word	0x20005320
 8007b28:	20005308 	.word	0x20005308
 8007b2c:	20005204 	.word	0x20005204
 8007b30:	20005200 	.word	0x20005200
 8007b34:	20005310 	.word	0x20005310
 8007b38:	20005314 	.word	0x20005314

08007b3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b087      	sub	sp, #28
 8007b40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b42:	4b28      	ldr	r3, [pc, #160]	; (8007be4 <vTaskSwitchContext+0xa8>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d003      	beq.n	8007b52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b4a:	4b27      	ldr	r3, [pc, #156]	; (8007be8 <vTaskSwitchContext+0xac>)
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b50:	e041      	b.n	8007bd6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007b52:	4b25      	ldr	r3, [pc, #148]	; (8007be8 <vTaskSwitchContext+0xac>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b58:	4b24      	ldr	r3, [pc, #144]	; (8007bec <vTaskSwitchContext+0xb0>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	fab3 f383 	clz	r3, r3
 8007b64:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007b66:	7afb      	ldrb	r3, [r7, #11]
 8007b68:	f1c3 031f 	rsb	r3, r3, #31
 8007b6c:	617b      	str	r3, [r7, #20]
 8007b6e:	4920      	ldr	r1, [pc, #128]	; (8007bf0 <vTaskSwitchContext+0xb4>)
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	4613      	mov	r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	4413      	add	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	440b      	add	r3, r1
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10c      	bne.n	8007b9c <vTaskSwitchContext+0x60>
	__asm volatile
 8007b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b86:	b672      	cpsid	i
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	b662      	cpsie	i
 8007b96:	607b      	str	r3, [r7, #4]
}
 8007b98:	bf00      	nop
 8007b9a:	e7fe      	b.n	8007b9a <vTaskSwitchContext+0x5e>
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4a12      	ldr	r2, [pc, #72]	; (8007bf0 <vTaskSwitchContext+0xb4>)
 8007ba8:	4413      	add	r3, r2
 8007baa:	613b      	str	r3, [r7, #16]
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	685a      	ldr	r2, [r3, #4]
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	605a      	str	r2, [r3, #4]
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	685a      	ldr	r2, [r3, #4]
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	3308      	adds	r3, #8
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d104      	bne.n	8007bcc <vTaskSwitchContext+0x90>
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	605a      	str	r2, [r3, #4]
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	4a08      	ldr	r2, [pc, #32]	; (8007bf4 <vTaskSwitchContext+0xb8>)
 8007bd4:	6013      	str	r3, [r2, #0]
}
 8007bd6:	bf00      	nop
 8007bd8:	371c      	adds	r7, #28
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	20005328 	.word	0x20005328
 8007be8:	20005314 	.word	0x20005314
 8007bec:	20005308 	.word	0x20005308
 8007bf0:	20005204 	.word	0x20005204
 8007bf4:	20005200 	.word	0x20005200

08007bf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10c      	bne.n	8007c22 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0c:	b672      	cpsid	i
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	b662      	cpsie	i
 8007c1c:	60fb      	str	r3, [r7, #12]
}
 8007c1e:	bf00      	nop
 8007c20:	e7fe      	b.n	8007c20 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c22:	4b07      	ldr	r3, [pc, #28]	; (8007c40 <vTaskPlaceOnEventList+0x48>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3318      	adds	r3, #24
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7fe fb57 	bl	80062de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c30:	2101      	movs	r1, #1
 8007c32:	6838      	ldr	r0, [r7, #0]
 8007c34:	f000 fc0a 	bl	800844c <prvAddCurrentTaskToDelayedList>
}
 8007c38:	bf00      	nop
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	20005200 	.word	0x20005200

08007c44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10c      	bne.n	8007c74 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5e:	b672      	cpsid	i
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	b662      	cpsie	i
 8007c6e:	60fb      	str	r3, [r7, #12]
}
 8007c70:	bf00      	nop
 8007c72:	e7fe      	b.n	8007c72 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	3318      	adds	r3, #24
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fe fb69 	bl	8006350 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c7e:	4b1d      	ldr	r3, [pc, #116]	; (8007cf4 <xTaskRemoveFromEventList+0xb0>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d11c      	bne.n	8007cc0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	3304      	adds	r3, #4
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe fb60 	bl	8006350 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c94:	2201      	movs	r2, #1
 8007c96:	409a      	lsls	r2, r3
 8007c98:	4b17      	ldr	r3, [pc, #92]	; (8007cf8 <xTaskRemoveFromEventList+0xb4>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	4a16      	ldr	r2, [pc, #88]	; (8007cf8 <xTaskRemoveFromEventList+0xb4>)
 8007ca0:	6013      	str	r3, [r2, #0]
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4a13      	ldr	r2, [pc, #76]	; (8007cfc <xTaskRemoveFromEventList+0xb8>)
 8007cb0:	441a      	add	r2, r3
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	3304      	adds	r3, #4
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	4610      	mov	r0, r2
 8007cba:	f7fe faec 	bl	8006296 <vListInsertEnd>
 8007cbe:	e005      	b.n	8007ccc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	3318      	adds	r3, #24
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	480e      	ldr	r0, [pc, #56]	; (8007d00 <xTaskRemoveFromEventList+0xbc>)
 8007cc8:	f7fe fae5 	bl	8006296 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd0:	4b0c      	ldr	r3, [pc, #48]	; (8007d04 <xTaskRemoveFromEventList+0xc0>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d905      	bls.n	8007ce6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007cde:	4b0a      	ldr	r3, [pc, #40]	; (8007d08 <xTaskRemoveFromEventList+0xc4>)
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	e001      	b.n	8007cea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007cea:	697b      	ldr	r3, [r7, #20]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3718      	adds	r7, #24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	20005328 	.word	0x20005328
 8007cf8:	20005308 	.word	0x20005308
 8007cfc:	20005204 	.word	0x20005204
 8007d00:	200052c0 	.word	0x200052c0
 8007d04:	20005200 	.word	0x20005200
 8007d08:	20005314 	.word	0x20005314

08007d0c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007d16:	4b2b      	ldr	r3, [pc, #172]	; (8007dc4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10c      	bne.n	8007d38 <vTaskRemoveFromUnorderedEventList+0x2c>
	__asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d22:	b672      	cpsid	i
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	b662      	cpsie	i
 8007d32:	613b      	str	r3, [r7, #16]
}
 8007d34:	bf00      	nop
 8007d36:	e7fe      	b.n	8007d36 <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10c      	bne.n	8007d68 <vTaskRemoveFromUnorderedEventList+0x5c>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	b672      	cpsid	i
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	b662      	cpsie	i
 8007d62:	60fb      	str	r3, [r7, #12]
}
 8007d64:	bf00      	nop
 8007d66:	e7fe      	b.n	8007d66 <vTaskRemoveFromUnorderedEventList+0x5a>
	( void ) uxListRemove( pxEventListItem );
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f7fe faf1 	bl	8006350 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	3304      	adds	r3, #4
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fe faec 	bl	8006350 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	409a      	lsls	r2, r3
 8007d80:	4b11      	ldr	r3, [pc, #68]	; (8007dc8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	4a10      	ldr	r2, [pc, #64]	; (8007dc8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007d88:	6013      	str	r3, [r2, #0]
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d8e:	4613      	mov	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4413      	add	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4a0d      	ldr	r2, [pc, #52]	; (8007dcc <vTaskRemoveFromUnorderedEventList+0xc0>)
 8007d98:	441a      	add	r2, r3
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	4619      	mov	r1, r3
 8007da0:	4610      	mov	r0, r2
 8007da2:	f7fe fa78 	bl	8006296 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007daa:	4b09      	ldr	r3, [pc, #36]	; (8007dd0 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d902      	bls.n	8007dba <vTaskRemoveFromUnorderedEventList+0xae>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007db4:	4b07      	ldr	r3, [pc, #28]	; (8007dd4 <vTaskRemoveFromUnorderedEventList+0xc8>)
 8007db6:	2201      	movs	r2, #1
 8007db8:	601a      	str	r2, [r3, #0]
	}
}
 8007dba:	bf00      	nop
 8007dbc:	3718      	adds	r7, #24
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20005328 	.word	0x20005328
 8007dc8:	20005308 	.word	0x20005308
 8007dcc:	20005204 	.word	0x20005204
 8007dd0:	20005200 	.word	0x20005200
 8007dd4:	20005314 	.word	0x20005314

08007dd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007de0:	4b06      	ldr	r3, [pc, #24]	; (8007dfc <vTaskInternalSetTimeOutState+0x24>)
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007de8:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <vTaskInternalSetTimeOutState+0x28>)
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	605a      	str	r2, [r3, #4]
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	20005318 	.word	0x20005318
 8007e00:	20005304 	.word	0x20005304

08007e04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b088      	sub	sp, #32
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10c      	bne.n	8007e2e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e18:	b672      	cpsid	i
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	b662      	cpsie	i
 8007e28:	613b      	str	r3, [r7, #16]
}
 8007e2a:	bf00      	nop
 8007e2c:	e7fe      	b.n	8007e2c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10c      	bne.n	8007e4e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e38:	b672      	cpsid	i
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	b662      	cpsie	i
 8007e48:	60fb      	str	r3, [r7, #12]
}
 8007e4a:	bf00      	nop
 8007e4c:	e7fe      	b.n	8007e4c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007e4e:	f000 fc6d 	bl	800872c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e52:	4b1d      	ldr	r3, [pc, #116]	; (8007ec8 <xTaskCheckForTimeOut+0xc4>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	69ba      	ldr	r2, [r7, #24]
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e6a:	d102      	bne.n	8007e72 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	61fb      	str	r3, [r7, #28]
 8007e70:	e023      	b.n	8007eba <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	4b15      	ldr	r3, [pc, #84]	; (8007ecc <xTaskCheckForTimeOut+0xc8>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d007      	beq.n	8007e8e <xTaskCheckForTimeOut+0x8a>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d302      	bcc.n	8007e8e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	61fb      	str	r3, [r7, #28]
 8007e8c:	e015      	b.n	8007eba <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d20b      	bcs.n	8007eb0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	1ad2      	subs	r2, r2, r3
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7ff ff97 	bl	8007dd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	61fb      	str	r3, [r7, #28]
 8007eae:	e004      	b.n	8007eba <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007eba:	f000 fc6b 	bl	8008794 <vPortExitCritical>

	return xReturn;
 8007ebe:	69fb      	ldr	r3, [r7, #28]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3720      	adds	r7, #32
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	20005304 	.word	0x20005304
 8007ecc:	20005318 	.word	0x20005318

08007ed0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ed4:	4b03      	ldr	r3, [pc, #12]	; (8007ee4 <vTaskMissedYield+0x14>)
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	601a      	str	r2, [r3, #0]
}
 8007eda:	bf00      	nop
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	20005314 	.word	0x20005314

08007ee8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ef0:	f000 f852 	bl	8007f98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ef4:	4b06      	ldr	r3, [pc, #24]	; (8007f10 <prvIdleTask+0x28>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d9f9      	bls.n	8007ef0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007efc:	4b05      	ldr	r3, [pc, #20]	; (8007f14 <prvIdleTask+0x2c>)
 8007efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	f3bf 8f4f 	dsb	sy
 8007f08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f0c:	e7f0      	b.n	8007ef0 <prvIdleTask+0x8>
 8007f0e:	bf00      	nop
 8007f10:	20005204 	.word	0x20005204
 8007f14:	e000ed04 	.word	0xe000ed04

08007f18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f1e:	2300      	movs	r3, #0
 8007f20:	607b      	str	r3, [r7, #4]
 8007f22:	e00c      	b.n	8007f3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	4613      	mov	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4413      	add	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4a12      	ldr	r2, [pc, #72]	; (8007f78 <prvInitialiseTaskLists+0x60>)
 8007f30:	4413      	add	r3, r2
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fe f982 	bl	800623c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	607b      	str	r3, [r7, #4]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2b06      	cmp	r3, #6
 8007f42:	d9ef      	bls.n	8007f24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f44:	480d      	ldr	r0, [pc, #52]	; (8007f7c <prvInitialiseTaskLists+0x64>)
 8007f46:	f7fe f979 	bl	800623c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f4a:	480d      	ldr	r0, [pc, #52]	; (8007f80 <prvInitialiseTaskLists+0x68>)
 8007f4c:	f7fe f976 	bl	800623c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f50:	480c      	ldr	r0, [pc, #48]	; (8007f84 <prvInitialiseTaskLists+0x6c>)
 8007f52:	f7fe f973 	bl	800623c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f56:	480c      	ldr	r0, [pc, #48]	; (8007f88 <prvInitialiseTaskLists+0x70>)
 8007f58:	f7fe f970 	bl	800623c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f5c:	480b      	ldr	r0, [pc, #44]	; (8007f8c <prvInitialiseTaskLists+0x74>)
 8007f5e:	f7fe f96d 	bl	800623c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f62:	4b0b      	ldr	r3, [pc, #44]	; (8007f90 <prvInitialiseTaskLists+0x78>)
 8007f64:	4a05      	ldr	r2, [pc, #20]	; (8007f7c <prvInitialiseTaskLists+0x64>)
 8007f66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f68:	4b0a      	ldr	r3, [pc, #40]	; (8007f94 <prvInitialiseTaskLists+0x7c>)
 8007f6a:	4a05      	ldr	r2, [pc, #20]	; (8007f80 <prvInitialiseTaskLists+0x68>)
 8007f6c:	601a      	str	r2, [r3, #0]
}
 8007f6e:	bf00      	nop
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	20005204 	.word	0x20005204
 8007f7c:	20005290 	.word	0x20005290
 8007f80:	200052a4 	.word	0x200052a4
 8007f84:	200052c0 	.word	0x200052c0
 8007f88:	200052d4 	.word	0x200052d4
 8007f8c:	200052ec 	.word	0x200052ec
 8007f90:	200052b8 	.word	0x200052b8
 8007f94:	200052bc 	.word	0x200052bc

08007f98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f9e:	e019      	b.n	8007fd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fa0:	f000 fbc4 	bl	800872c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fa4:	4b10      	ldr	r3, [pc, #64]	; (8007fe8 <prvCheckTasksWaitingTermination+0x50>)
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	3304      	adds	r3, #4
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7fe f9cd 	bl	8006350 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fb6:	4b0d      	ldr	r3, [pc, #52]	; (8007fec <prvCheckTasksWaitingTermination+0x54>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	4a0b      	ldr	r2, [pc, #44]	; (8007fec <prvCheckTasksWaitingTermination+0x54>)
 8007fbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fc0:	4b0b      	ldr	r3, [pc, #44]	; (8007ff0 <prvCheckTasksWaitingTermination+0x58>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	4a0a      	ldr	r2, [pc, #40]	; (8007ff0 <prvCheckTasksWaitingTermination+0x58>)
 8007fc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007fca:	f000 fbe3 	bl	8008794 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f810 	bl	8007ff4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fd4:	4b06      	ldr	r3, [pc, #24]	; (8007ff0 <prvCheckTasksWaitingTermination+0x58>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1e1      	bne.n	8007fa0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007fdc:	bf00      	nop
 8007fde:	bf00      	nop
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	200052d4 	.word	0x200052d4
 8007fec:	20005300 	.word	0x20005300
 8007ff0:	200052e8 	.word	0x200052e8

08007ff4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008002:	2b00      	cmp	r3, #0
 8008004:	d108      	bne.n	8008018 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800a:	4618      	mov	r0, r3
 800800c:	f000 fd84 	bl	8008b18 <vPortFree>
				vPortFree( pxTCB );
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fd81 	bl	8008b18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008016:	e01a      	b.n	800804e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800801e:	2b01      	cmp	r3, #1
 8008020:	d103      	bne.n	800802a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fd78 	bl	8008b18 <vPortFree>
	}
 8008028:	e011      	b.n	800804e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008030:	2b02      	cmp	r3, #2
 8008032:	d00c      	beq.n	800804e <prvDeleteTCB+0x5a>
	__asm volatile
 8008034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008038:	b672      	cpsid	i
 800803a:	f383 8811 	msr	BASEPRI, r3
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	f3bf 8f4f 	dsb	sy
 8008046:	b662      	cpsie	i
 8008048:	60fb      	str	r3, [r7, #12]
}
 800804a:	bf00      	nop
 800804c:	e7fe      	b.n	800804c <prvDeleteTCB+0x58>
	}
 800804e:	bf00      	nop
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
	...

08008058 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800805e:	4b0c      	ldr	r3, [pc, #48]	; (8008090 <prvResetNextTaskUnblockTime+0x38>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d104      	bne.n	8008072 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008068:	4b0a      	ldr	r3, [pc, #40]	; (8008094 <prvResetNextTaskUnblockTime+0x3c>)
 800806a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800806e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008070:	e008      	b.n	8008084 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008072:	4b07      	ldr	r3, [pc, #28]	; (8008090 <prvResetNextTaskUnblockTime+0x38>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	4a04      	ldr	r2, [pc, #16]	; (8008094 <prvResetNextTaskUnblockTime+0x3c>)
 8008082:	6013      	str	r3, [r2, #0]
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	200052b8 	.word	0x200052b8
 8008094:	20005320 	.word	0x20005320

08008098 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800809e:	4b0b      	ldr	r3, [pc, #44]	; (80080cc <xTaskGetSchedulerState+0x34>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d102      	bne.n	80080ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080a6:	2301      	movs	r3, #1
 80080a8:	607b      	str	r3, [r7, #4]
 80080aa:	e008      	b.n	80080be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080ac:	4b08      	ldr	r3, [pc, #32]	; (80080d0 <xTaskGetSchedulerState+0x38>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d102      	bne.n	80080ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080b4:	2302      	movs	r3, #2
 80080b6:	607b      	str	r3, [r7, #4]
 80080b8:	e001      	b.n	80080be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80080ba:	2300      	movs	r3, #0
 80080bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80080be:	687b      	ldr	r3, [r7, #4]
	}
 80080c0:	4618      	mov	r0, r3
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr
 80080cc:	2000530c 	.word	0x2000530c
 80080d0:	20005328 	.word	0x20005328

080080d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80080e0:	2300      	movs	r3, #0
 80080e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d069      	beq.n	80081be <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ee:	4b36      	ldr	r3, [pc, #216]	; (80081c8 <xTaskPriorityInherit+0xf4>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d259      	bcs.n	80081ac <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	db06      	blt.n	800810e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008100:	4b31      	ldr	r3, [pc, #196]	; (80081c8 <xTaskPriorityInherit+0xf4>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008106:	f1c3 0207 	rsb	r2, r3, #7
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	6959      	ldr	r1, [r3, #20]
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008116:	4613      	mov	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4a2b      	ldr	r2, [pc, #172]	; (80081cc <xTaskPriorityInherit+0xf8>)
 8008120:	4413      	add	r3, r2
 8008122:	4299      	cmp	r1, r3
 8008124:	d13a      	bne.n	800819c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	3304      	adds	r3, #4
 800812a:	4618      	mov	r0, r3
 800812c:	f7fe f910 	bl	8006350 <uxListRemove>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d115      	bne.n	8008162 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813a:	4924      	ldr	r1, [pc, #144]	; (80081cc <xTaskPriorityInherit+0xf8>)
 800813c:	4613      	mov	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	440b      	add	r3, r1
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10a      	bne.n	8008162 <xTaskPriorityInherit+0x8e>
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008150:	2201      	movs	r2, #1
 8008152:	fa02 f303 	lsl.w	r3, r2, r3
 8008156:	43da      	mvns	r2, r3
 8008158:	4b1d      	ldr	r3, [pc, #116]	; (80081d0 <xTaskPriorityInherit+0xfc>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4013      	ands	r3, r2
 800815e:	4a1c      	ldr	r2, [pc, #112]	; (80081d0 <xTaskPriorityInherit+0xfc>)
 8008160:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008162:	4b19      	ldr	r3, [pc, #100]	; (80081c8 <xTaskPriorityInherit+0xf4>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008170:	2201      	movs	r2, #1
 8008172:	409a      	lsls	r2, r3
 8008174:	4b16      	ldr	r3, [pc, #88]	; (80081d0 <xTaskPriorityInherit+0xfc>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4313      	orrs	r3, r2
 800817a:	4a15      	ldr	r2, [pc, #84]	; (80081d0 <xTaskPriorityInherit+0xfc>)
 800817c:	6013      	str	r3, [r2, #0]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008182:	4613      	mov	r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4413      	add	r3, r2
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4a10      	ldr	r2, [pc, #64]	; (80081cc <xTaskPriorityInherit+0xf8>)
 800818c:	441a      	add	r2, r3
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	3304      	adds	r3, #4
 8008192:	4619      	mov	r1, r3
 8008194:	4610      	mov	r0, r2
 8008196:	f7fe f87e 	bl	8006296 <vListInsertEnd>
 800819a:	e004      	b.n	80081a6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800819c:	4b0a      	ldr	r3, [pc, #40]	; (80081c8 <xTaskPriorityInherit+0xf4>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80081a6:	2301      	movs	r3, #1
 80081a8:	60fb      	str	r3, [r7, #12]
 80081aa:	e008      	b.n	80081be <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081b0:	4b05      	ldr	r3, [pc, #20]	; (80081c8 <xTaskPriorityInherit+0xf4>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d201      	bcs.n	80081be <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80081ba:	2301      	movs	r3, #1
 80081bc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081be:	68fb      	ldr	r3, [r7, #12]
	}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	20005200 	.word	0x20005200
 80081cc:	20005204 	.word	0x20005204
 80081d0:	20005308 	.word	0x20005308

080081d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081e0:	2300      	movs	r3, #0
 80081e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d072      	beq.n	80082d0 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081ea:	4b3c      	ldr	r3, [pc, #240]	; (80082dc <xTaskPriorityDisinherit+0x108>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	693a      	ldr	r2, [r7, #16]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d00c      	beq.n	800820e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80081f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f8:	b672      	cpsid	i
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	b662      	cpsie	i
 8008208:	60fb      	str	r3, [r7, #12]
}
 800820a:	bf00      	nop
 800820c:	e7fe      	b.n	800820c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10c      	bne.n	8008230 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821a:	b672      	cpsid	i
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	b662      	cpsie	i
 800822a:	60bb      	str	r3, [r7, #8]
}
 800822c:	bf00      	nop
 800822e:	e7fe      	b.n	800822e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008234:	1e5a      	subs	r2, r3, #1
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008242:	429a      	cmp	r2, r3
 8008244:	d044      	beq.n	80082d0 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800824a:	2b00      	cmp	r3, #0
 800824c:	d140      	bne.n	80082d0 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	3304      	adds	r3, #4
 8008252:	4618      	mov	r0, r3
 8008254:	f7fe f87c 	bl	8006350 <uxListRemove>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d115      	bne.n	800828a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008262:	491f      	ldr	r1, [pc, #124]	; (80082e0 <xTaskPriorityDisinherit+0x10c>)
 8008264:	4613      	mov	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	440b      	add	r3, r1
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10a      	bne.n	800828a <xTaskPriorityDisinherit+0xb6>
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008278:	2201      	movs	r2, #1
 800827a:	fa02 f303 	lsl.w	r3, r2, r3
 800827e:	43da      	mvns	r2, r3
 8008280:	4b18      	ldr	r3, [pc, #96]	; (80082e4 <xTaskPriorityDisinherit+0x110>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4013      	ands	r3, r2
 8008286:	4a17      	ldr	r2, [pc, #92]	; (80082e4 <xTaskPriorityDisinherit+0x110>)
 8008288:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008296:	f1c3 0207 	rsb	r2, r3, #7
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a2:	2201      	movs	r2, #1
 80082a4:	409a      	lsls	r2, r3
 80082a6:	4b0f      	ldr	r3, [pc, #60]	; (80082e4 <xTaskPriorityDisinherit+0x110>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	4a0d      	ldr	r2, [pc, #52]	; (80082e4 <xTaskPriorityDisinherit+0x110>)
 80082ae:	6013      	str	r3, [r2, #0]
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b4:	4613      	mov	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4413      	add	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4a08      	ldr	r2, [pc, #32]	; (80082e0 <xTaskPriorityDisinherit+0x10c>)
 80082be:	441a      	add	r2, r3
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	3304      	adds	r3, #4
 80082c4:	4619      	mov	r1, r3
 80082c6:	4610      	mov	r0, r2
 80082c8:	f7fd ffe5 	bl	8006296 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80082cc:	2301      	movs	r3, #1
 80082ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082d0:	697b      	ldr	r3, [r7, #20]
	}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3718      	adds	r7, #24
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	20005200 	.word	0x20005200
 80082e0:	20005204 	.word	0x20005204
 80082e4:	20005308 	.word	0x20005308

080082e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b088      	sub	sp, #32
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80082f6:	2301      	movs	r3, #1
 80082f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f000 8087 	beq.w	8008410 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10c      	bne.n	8008324 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800830a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830e:	b672      	cpsid	i
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	b662      	cpsie	i
 800831e:	60fb      	str	r3, [r7, #12]
}
 8008320:	bf00      	nop
 8008322:	e7fe      	b.n	8008322 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	429a      	cmp	r2, r3
 800832c:	d902      	bls.n	8008334 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	61fb      	str	r3, [r7, #28]
 8008332:	e002      	b.n	800833a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008338:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833e:	69fa      	ldr	r2, [r7, #28]
 8008340:	429a      	cmp	r2, r3
 8008342:	d065      	beq.n	8008410 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008348:	697a      	ldr	r2, [r7, #20]
 800834a:	429a      	cmp	r2, r3
 800834c:	d160      	bne.n	8008410 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800834e:	4b32      	ldr	r3, [pc, #200]	; (8008418 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	69ba      	ldr	r2, [r7, #24]
 8008354:	429a      	cmp	r2, r3
 8008356:	d10c      	bne.n	8008372 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8008358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835c:	b672      	cpsid	i
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	b662      	cpsie	i
 800836c:	60bb      	str	r3, [r7, #8]
}
 800836e:	bf00      	nop
 8008370:	e7fe      	b.n	8008370 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008376:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	69fa      	ldr	r2, [r7, #28]
 800837c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	2b00      	cmp	r3, #0
 8008384:	db04      	blt.n	8008390 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	f1c3 0207 	rsb	r2, r3, #7
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	6959      	ldr	r1, [r3, #20]
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	4613      	mov	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4413      	add	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4a1f      	ldr	r2, [pc, #124]	; (800841c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80083a0:	4413      	add	r3, r2
 80083a2:	4299      	cmp	r1, r3
 80083a4:	d134      	bne.n	8008410 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	3304      	adds	r3, #4
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fd ffd0 	bl	8006350 <uxListRemove>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d115      	bne.n	80083e2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ba:	4918      	ldr	r1, [pc, #96]	; (800841c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80083bc:	4613      	mov	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	440b      	add	r3, r1
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10a      	bne.n	80083e2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d0:	2201      	movs	r2, #1
 80083d2:	fa02 f303 	lsl.w	r3, r2, r3
 80083d6:	43da      	mvns	r2, r3
 80083d8:	4b11      	ldr	r3, [pc, #68]	; (8008420 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4013      	ands	r3, r2
 80083de:	4a10      	ldr	r2, [pc, #64]	; (8008420 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80083e0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e6:	2201      	movs	r2, #1
 80083e8:	409a      	lsls	r2, r3
 80083ea:	4b0d      	ldr	r3, [pc, #52]	; (8008420 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	4a0b      	ldr	r2, [pc, #44]	; (8008420 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80083f2:	6013      	str	r3, [r2, #0]
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083f8:	4613      	mov	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4a06      	ldr	r2, [pc, #24]	; (800841c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008402:	441a      	add	r2, r3
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	3304      	adds	r3, #4
 8008408:	4619      	mov	r1, r3
 800840a:	4610      	mov	r0, r2
 800840c:	f7fd ff43 	bl	8006296 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008410:	bf00      	nop
 8008412:	3720      	adds	r7, #32
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	20005200 	.word	0x20005200
 800841c:	20005204 	.word	0x20005204
 8008420:	20005308 	.word	0x20005308

08008424 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008424:	b480      	push	{r7}
 8008426:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008428:	4b07      	ldr	r3, [pc, #28]	; (8008448 <pvTaskIncrementMutexHeldCount+0x24>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d004      	beq.n	800843a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008430:	4b05      	ldr	r3, [pc, #20]	; (8008448 <pvTaskIncrementMutexHeldCount+0x24>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008436:	3201      	adds	r2, #1
 8008438:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800843a:	4b03      	ldr	r3, [pc, #12]	; (8008448 <pvTaskIncrementMutexHeldCount+0x24>)
 800843c:	681b      	ldr	r3, [r3, #0]
	}
 800843e:	4618      	mov	r0, r3
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr
 8008448:	20005200 	.word	0x20005200

0800844c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008456:	4b29      	ldr	r3, [pc, #164]	; (80084fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800845c:	4b28      	ldr	r3, [pc, #160]	; (8008500 <prvAddCurrentTaskToDelayedList+0xb4>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	3304      	adds	r3, #4
 8008462:	4618      	mov	r0, r3
 8008464:	f7fd ff74 	bl	8006350 <uxListRemove>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10b      	bne.n	8008486 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800846e:	4b24      	ldr	r3, [pc, #144]	; (8008500 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008474:	2201      	movs	r2, #1
 8008476:	fa02 f303 	lsl.w	r3, r2, r3
 800847a:	43da      	mvns	r2, r3
 800847c:	4b21      	ldr	r3, [pc, #132]	; (8008504 <prvAddCurrentTaskToDelayedList+0xb8>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4013      	ands	r3, r2
 8008482:	4a20      	ldr	r2, [pc, #128]	; (8008504 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008484:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800848c:	d10a      	bne.n	80084a4 <prvAddCurrentTaskToDelayedList+0x58>
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d007      	beq.n	80084a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008494:	4b1a      	ldr	r3, [pc, #104]	; (8008500 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	3304      	adds	r3, #4
 800849a:	4619      	mov	r1, r3
 800849c:	481a      	ldr	r0, [pc, #104]	; (8008508 <prvAddCurrentTaskToDelayedList+0xbc>)
 800849e:	f7fd fefa 	bl	8006296 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80084a2:	e026      	b.n	80084f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4413      	add	r3, r2
 80084aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084ac:	4b14      	ldr	r3, [pc, #80]	; (8008500 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d209      	bcs.n	80084d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084bc:	4b13      	ldr	r3, [pc, #76]	; (800850c <prvAddCurrentTaskToDelayedList+0xc0>)
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	4b0f      	ldr	r3, [pc, #60]	; (8008500 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	3304      	adds	r3, #4
 80084c6:	4619      	mov	r1, r3
 80084c8:	4610      	mov	r0, r2
 80084ca:	f7fd ff08 	bl	80062de <vListInsert>
}
 80084ce:	e010      	b.n	80084f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084d0:	4b0f      	ldr	r3, [pc, #60]	; (8008510 <prvAddCurrentTaskToDelayedList+0xc4>)
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	4b0a      	ldr	r3, [pc, #40]	; (8008500 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3304      	adds	r3, #4
 80084da:	4619      	mov	r1, r3
 80084dc:	4610      	mov	r0, r2
 80084de:	f7fd fefe 	bl	80062de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80084e2:	4b0c      	ldr	r3, [pc, #48]	; (8008514 <prvAddCurrentTaskToDelayedList+0xc8>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d202      	bcs.n	80084f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80084ec:	4a09      	ldr	r2, [pc, #36]	; (8008514 <prvAddCurrentTaskToDelayedList+0xc8>)
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	6013      	str	r3, [r2, #0]
}
 80084f2:	bf00      	nop
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	20005304 	.word	0x20005304
 8008500:	20005200 	.word	0x20005200
 8008504:	20005308 	.word	0x20005308
 8008508:	200052ec 	.word	0x200052ec
 800850c:	200052bc 	.word	0x200052bc
 8008510:	200052b8 	.word	0x200052b8
 8008514:	20005320 	.word	0x20005320

08008518 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	3b04      	subs	r3, #4
 8008528:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008530:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	3b04      	subs	r3, #4
 8008536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	f023 0201 	bic.w	r2, r3, #1
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	3b04      	subs	r3, #4
 8008546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008548:	4a0c      	ldr	r2, [pc, #48]	; (800857c <pxPortInitialiseStack+0x64>)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3b14      	subs	r3, #20
 8008552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	3b04      	subs	r3, #4
 800855e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f06f 0202 	mvn.w	r2, #2
 8008566:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	3b20      	subs	r3, #32
 800856c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800856e:	68fb      	ldr	r3, [r7, #12]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	08008581 	.word	0x08008581

08008580 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008586:	2300      	movs	r3, #0
 8008588:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800858a:	4b14      	ldr	r3, [pc, #80]	; (80085dc <prvTaskExitError+0x5c>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008592:	d00c      	beq.n	80085ae <prvTaskExitError+0x2e>
	__asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008598:	b672      	cpsid	i
 800859a:	f383 8811 	msr	BASEPRI, r3
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	b662      	cpsie	i
 80085a8:	60fb      	str	r3, [r7, #12]
}
 80085aa:	bf00      	nop
 80085ac:	e7fe      	b.n	80085ac <prvTaskExitError+0x2c>
	__asm volatile
 80085ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b2:	b672      	cpsid	i
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	b662      	cpsie	i
 80085c2:	60bb      	str	r3, [r7, #8]
}
 80085c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80085c6:	bf00      	nop
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d0fc      	beq.n	80085c8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80085ce:	bf00      	nop
 80085d0:	bf00      	nop
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	20000024 	.word	0x20000024

080085e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085e0:	4b07      	ldr	r3, [pc, #28]	; (8008600 <pxCurrentTCBConst2>)
 80085e2:	6819      	ldr	r1, [r3, #0]
 80085e4:	6808      	ldr	r0, [r1, #0]
 80085e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ea:	f380 8809 	msr	PSP, r0
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f04f 0000 	mov.w	r0, #0
 80085f6:	f380 8811 	msr	BASEPRI, r0
 80085fa:	4770      	bx	lr
 80085fc:	f3af 8000 	nop.w

08008600 <pxCurrentTCBConst2>:
 8008600:	20005200 	.word	0x20005200
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008604:	bf00      	nop
 8008606:	bf00      	nop

08008608 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008608:	4808      	ldr	r0, [pc, #32]	; (800862c <prvPortStartFirstTask+0x24>)
 800860a:	6800      	ldr	r0, [r0, #0]
 800860c:	6800      	ldr	r0, [r0, #0]
 800860e:	f380 8808 	msr	MSP, r0
 8008612:	f04f 0000 	mov.w	r0, #0
 8008616:	f380 8814 	msr	CONTROL, r0
 800861a:	b662      	cpsie	i
 800861c:	b661      	cpsie	f
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	df00      	svc	0
 8008628:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800862a:	bf00      	nop
 800862c:	e000ed08 	.word	0xe000ed08

08008630 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008636:	4b37      	ldr	r3, [pc, #220]	; (8008714 <xPortStartScheduler+0xe4>)
 8008638:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	b2db      	uxtb	r3, r3
 8008640:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	22ff      	movs	r2, #255	; 0xff
 8008646:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	b2db      	uxtb	r3, r3
 800864e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008650:	78fb      	ldrb	r3, [r7, #3]
 8008652:	b2db      	uxtb	r3, r3
 8008654:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008658:	b2da      	uxtb	r2, r3
 800865a:	4b2f      	ldr	r3, [pc, #188]	; (8008718 <xPortStartScheduler+0xe8>)
 800865c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800865e:	4b2f      	ldr	r3, [pc, #188]	; (800871c <xPortStartScheduler+0xec>)
 8008660:	2207      	movs	r2, #7
 8008662:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008664:	e009      	b.n	800867a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008666:	4b2d      	ldr	r3, [pc, #180]	; (800871c <xPortStartScheduler+0xec>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	3b01      	subs	r3, #1
 800866c:	4a2b      	ldr	r2, [pc, #172]	; (800871c <xPortStartScheduler+0xec>)
 800866e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008670:	78fb      	ldrb	r3, [r7, #3]
 8008672:	b2db      	uxtb	r3, r3
 8008674:	005b      	lsls	r3, r3, #1
 8008676:	b2db      	uxtb	r3, r3
 8008678:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800867a:	78fb      	ldrb	r3, [r7, #3]
 800867c:	b2db      	uxtb	r3, r3
 800867e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008682:	2b80      	cmp	r3, #128	; 0x80
 8008684:	d0ef      	beq.n	8008666 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008686:	4b25      	ldr	r3, [pc, #148]	; (800871c <xPortStartScheduler+0xec>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f1c3 0307 	rsb	r3, r3, #7
 800868e:	2b04      	cmp	r3, #4
 8008690:	d00c      	beq.n	80086ac <xPortStartScheduler+0x7c>
	__asm volatile
 8008692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008696:	b672      	cpsid	i
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	b662      	cpsie	i
 80086a6:	60bb      	str	r3, [r7, #8]
}
 80086a8:	bf00      	nop
 80086aa:	e7fe      	b.n	80086aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086ac:	4b1b      	ldr	r3, [pc, #108]	; (800871c <xPortStartScheduler+0xec>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	021b      	lsls	r3, r3, #8
 80086b2:	4a1a      	ldr	r2, [pc, #104]	; (800871c <xPortStartScheduler+0xec>)
 80086b4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086b6:	4b19      	ldr	r3, [pc, #100]	; (800871c <xPortStartScheduler+0xec>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80086be:	4a17      	ldr	r2, [pc, #92]	; (800871c <xPortStartScheduler+0xec>)
 80086c0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086ca:	4b15      	ldr	r3, [pc, #84]	; (8008720 <xPortStartScheduler+0xf0>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a14      	ldr	r2, [pc, #80]	; (8008720 <xPortStartScheduler+0xf0>)
 80086d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80086d4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086d6:	4b12      	ldr	r3, [pc, #72]	; (8008720 <xPortStartScheduler+0xf0>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a11      	ldr	r2, [pc, #68]	; (8008720 <xPortStartScheduler+0xf0>)
 80086dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80086e0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086e2:	f000 f8dd 	bl	80088a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086e6:	4b0f      	ldr	r3, [pc, #60]	; (8008724 <xPortStartScheduler+0xf4>)
 80086e8:	2200      	movs	r2, #0
 80086ea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80086ec:	f000 f8fc 	bl	80088e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086f0:	4b0d      	ldr	r3, [pc, #52]	; (8008728 <xPortStartScheduler+0xf8>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a0c      	ldr	r2, [pc, #48]	; (8008728 <xPortStartScheduler+0xf8>)
 80086f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80086fa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086fc:	f7ff ff84 	bl	8008608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008700:	f7ff fa1c 	bl	8007b3c <vTaskSwitchContext>
	prvTaskExitError();
 8008704:	f7ff ff3c 	bl	8008580 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	e000e400 	.word	0xe000e400
 8008718:	2000532c 	.word	0x2000532c
 800871c:	20005330 	.word	0x20005330
 8008720:	e000ed20 	.word	0xe000ed20
 8008724:	20000024 	.word	0x20000024
 8008728:	e000ef34 	.word	0xe000ef34

0800872c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
	__asm volatile
 8008732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008736:	b672      	cpsid	i
 8008738:	f383 8811 	msr	BASEPRI, r3
 800873c:	f3bf 8f6f 	isb	sy
 8008740:	f3bf 8f4f 	dsb	sy
 8008744:	b662      	cpsie	i
 8008746:	607b      	str	r3, [r7, #4]
}
 8008748:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800874a:	4b10      	ldr	r3, [pc, #64]	; (800878c <vPortEnterCritical+0x60>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	3301      	adds	r3, #1
 8008750:	4a0e      	ldr	r2, [pc, #56]	; (800878c <vPortEnterCritical+0x60>)
 8008752:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008754:	4b0d      	ldr	r3, [pc, #52]	; (800878c <vPortEnterCritical+0x60>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d111      	bne.n	8008780 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800875c:	4b0c      	ldr	r3, [pc, #48]	; (8008790 <vPortEnterCritical+0x64>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00c      	beq.n	8008780 <vPortEnterCritical+0x54>
	__asm volatile
 8008766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876a:	b672      	cpsid	i
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	b662      	cpsie	i
 800877a:	603b      	str	r3, [r7, #0]
}
 800877c:	bf00      	nop
 800877e:	e7fe      	b.n	800877e <vPortEnterCritical+0x52>
	}
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	20000024 	.word	0x20000024
 8008790:	e000ed04 	.word	0xe000ed04

08008794 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800879a:	4b13      	ldr	r3, [pc, #76]	; (80087e8 <vPortExitCritical+0x54>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10c      	bne.n	80087bc <vPortExitCritical+0x28>
	__asm volatile
 80087a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a6:	b672      	cpsid	i
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	b662      	cpsie	i
 80087b6:	607b      	str	r3, [r7, #4]
}
 80087b8:	bf00      	nop
 80087ba:	e7fe      	b.n	80087ba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80087bc:	4b0a      	ldr	r3, [pc, #40]	; (80087e8 <vPortExitCritical+0x54>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	3b01      	subs	r3, #1
 80087c2:	4a09      	ldr	r2, [pc, #36]	; (80087e8 <vPortExitCritical+0x54>)
 80087c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087c6:	4b08      	ldr	r3, [pc, #32]	; (80087e8 <vPortExitCritical+0x54>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d105      	bne.n	80087da <vPortExitCritical+0x46>
 80087ce:	2300      	movs	r3, #0
 80087d0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	f383 8811 	msr	BASEPRI, r3
}
 80087d8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80087da:	bf00      	nop
 80087dc:	370c      	adds	r7, #12
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	20000024 	.word	0x20000024
 80087ec:	00000000 	.word	0x00000000

080087f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087f0:	f3ef 8009 	mrs	r0, PSP
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	4b15      	ldr	r3, [pc, #84]	; (8008850 <pxCurrentTCBConst>)
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	f01e 0f10 	tst.w	lr, #16
 8008800:	bf08      	it	eq
 8008802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880a:	6010      	str	r0, [r2, #0]
 800880c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008810:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008814:	b672      	cpsid	i
 8008816:	f380 8811 	msr	BASEPRI, r0
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	b662      	cpsie	i
 8008824:	f7ff f98a 	bl	8007b3c <vTaskSwitchContext>
 8008828:	f04f 0000 	mov.w	r0, #0
 800882c:	f380 8811 	msr	BASEPRI, r0
 8008830:	bc09      	pop	{r0, r3}
 8008832:	6819      	ldr	r1, [r3, #0]
 8008834:	6808      	ldr	r0, [r1, #0]
 8008836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883a:	f01e 0f10 	tst.w	lr, #16
 800883e:	bf08      	it	eq
 8008840:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008844:	f380 8809 	msr	PSP, r0
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop

08008850 <pxCurrentTCBConst>:
 8008850:	20005200 	.word	0x20005200
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008854:	bf00      	nop
 8008856:	bf00      	nop

08008858 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008862:	b672      	cpsid	i
 8008864:	f383 8811 	msr	BASEPRI, r3
 8008868:	f3bf 8f6f 	isb	sy
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	b662      	cpsie	i
 8008872:	607b      	str	r3, [r7, #4]
}
 8008874:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008876:	f7ff f8a7 	bl	80079c8 <xTaskIncrementTick>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d003      	beq.n	8008888 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008880:	4b06      	ldr	r3, [pc, #24]	; (800889c <SysTick_Handler+0x44>)
 8008882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008886:	601a      	str	r2, [r3, #0]
 8008888:	2300      	movs	r3, #0
 800888a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	f383 8811 	msr	BASEPRI, r3
}
 8008892:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008894:	bf00      	nop
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	e000ed04 	.word	0xe000ed04

080088a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80088a0:	b480      	push	{r7}
 80088a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80088a4:	4b0b      	ldr	r3, [pc, #44]	; (80088d4 <vPortSetupTimerInterrupt+0x34>)
 80088a6:	2200      	movs	r2, #0
 80088a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80088aa:	4b0b      	ldr	r3, [pc, #44]	; (80088d8 <vPortSetupTimerInterrupt+0x38>)
 80088ac:	2200      	movs	r2, #0
 80088ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088b0:	4b0a      	ldr	r3, [pc, #40]	; (80088dc <vPortSetupTimerInterrupt+0x3c>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a0a      	ldr	r2, [pc, #40]	; (80088e0 <vPortSetupTimerInterrupt+0x40>)
 80088b6:	fba2 2303 	umull	r2, r3, r2, r3
 80088ba:	099b      	lsrs	r3, r3, #6
 80088bc:	4a09      	ldr	r2, [pc, #36]	; (80088e4 <vPortSetupTimerInterrupt+0x44>)
 80088be:	3b01      	subs	r3, #1
 80088c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80088c2:	4b04      	ldr	r3, [pc, #16]	; (80088d4 <vPortSetupTimerInterrupt+0x34>)
 80088c4:	2207      	movs	r2, #7
 80088c6:	601a      	str	r2, [r3, #0]
}
 80088c8:	bf00      	nop
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	e000e010 	.word	0xe000e010
 80088d8:	e000e018 	.word	0xe000e018
 80088dc:	20000004 	.word	0x20000004
 80088e0:	10624dd3 	.word	0x10624dd3
 80088e4:	e000e014 	.word	0xe000e014

080088e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80088f8 <vPortEnableVFP+0x10>
 80088ec:	6801      	ldr	r1, [r0, #0]
 80088ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80088f2:	6001      	str	r1, [r0, #0]
 80088f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80088f6:	bf00      	nop
 80088f8:	e000ed88 	.word	0xe000ed88

080088fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008902:	f3ef 8305 	mrs	r3, IPSR
 8008906:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2b0f      	cmp	r3, #15
 800890c:	d916      	bls.n	800893c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800890e:	4a19      	ldr	r2, [pc, #100]	; (8008974 <vPortValidateInterruptPriority+0x78>)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	4413      	add	r3, r2
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008918:	4b17      	ldr	r3, [pc, #92]	; (8008978 <vPortValidateInterruptPriority+0x7c>)
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	7afa      	ldrb	r2, [r7, #11]
 800891e:	429a      	cmp	r2, r3
 8008920:	d20c      	bcs.n	800893c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008926:	b672      	cpsid	i
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	b662      	cpsie	i
 8008936:	607b      	str	r3, [r7, #4]
}
 8008938:	bf00      	nop
 800893a:	e7fe      	b.n	800893a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800893c:	4b0f      	ldr	r3, [pc, #60]	; (800897c <vPortValidateInterruptPriority+0x80>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008944:	4b0e      	ldr	r3, [pc, #56]	; (8008980 <vPortValidateInterruptPriority+0x84>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	429a      	cmp	r2, r3
 800894a:	d90c      	bls.n	8008966 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800894c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008950:	b672      	cpsid	i
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	b662      	cpsie	i
 8008960:	603b      	str	r3, [r7, #0]
}
 8008962:	bf00      	nop
 8008964:	e7fe      	b.n	8008964 <vPortValidateInterruptPriority+0x68>
	}
 8008966:	bf00      	nop
 8008968:	3714      	adds	r7, #20
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	e000e3f0 	.word	0xe000e3f0
 8008978:	2000532c 	.word	0x2000532c
 800897c:	e000ed0c 	.word	0xe000ed0c
 8008980:	20005330 	.word	0x20005330

08008984 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b08a      	sub	sp, #40	; 0x28
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800898c:	2300      	movs	r3, #0
 800898e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008990:	f7fe ff4c 	bl	800782c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008994:	4b5b      	ldr	r3, [pc, #364]	; (8008b04 <pvPortMalloc+0x180>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d101      	bne.n	80089a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800899c:	f000 f91a 	bl	8008bd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80089a0:	4b59      	ldr	r3, [pc, #356]	; (8008b08 <pvPortMalloc+0x184>)
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4013      	ands	r3, r2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f040 8092 	bne.w	8008ad2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d01f      	beq.n	80089f4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80089b4:	2208      	movs	r2, #8
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4413      	add	r3, r2
 80089ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f003 0307 	and.w	r3, r3, #7
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d016      	beq.n	80089f4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f023 0307 	bic.w	r3, r3, #7
 80089cc:	3308      	adds	r3, #8
 80089ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f003 0307 	and.w	r3, r3, #7
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00c      	beq.n	80089f4 <pvPortMalloc+0x70>
	__asm volatile
 80089da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089de:	b672      	cpsid	i
 80089e0:	f383 8811 	msr	BASEPRI, r3
 80089e4:	f3bf 8f6f 	isb	sy
 80089e8:	f3bf 8f4f 	dsb	sy
 80089ec:	b662      	cpsie	i
 80089ee:	617b      	str	r3, [r7, #20]
}
 80089f0:	bf00      	nop
 80089f2:	e7fe      	b.n	80089f2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d06b      	beq.n	8008ad2 <pvPortMalloc+0x14e>
 80089fa:	4b44      	ldr	r3, [pc, #272]	; (8008b0c <pvPortMalloc+0x188>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d866      	bhi.n	8008ad2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a04:	4b42      	ldr	r3, [pc, #264]	; (8008b10 <pvPortMalloc+0x18c>)
 8008a06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a08:	4b41      	ldr	r3, [pc, #260]	; (8008b10 <pvPortMalloc+0x18c>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a0e:	e004      	b.n	8008a1a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d903      	bls.n	8008a2c <pvPortMalloc+0xa8>
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1f1      	bne.n	8008a10 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a2c:	4b35      	ldr	r3, [pc, #212]	; (8008b04 <pvPortMalloc+0x180>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d04d      	beq.n	8008ad2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a36:	6a3b      	ldr	r3, [r7, #32]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2208      	movs	r2, #8
 8008a3c:	4413      	add	r3, r2
 8008a3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	6a3b      	ldr	r3, [r7, #32]
 8008a46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	1ad2      	subs	r2, r2, r3
 8008a50:	2308      	movs	r3, #8
 8008a52:	005b      	lsls	r3, r3, #1
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d921      	bls.n	8008a9c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	f003 0307 	and.w	r3, r3, #7
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00c      	beq.n	8008a84 <pvPortMalloc+0x100>
	__asm volatile
 8008a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6e:	b672      	cpsid	i
 8008a70:	f383 8811 	msr	BASEPRI, r3
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	b662      	cpsie	i
 8008a7e:	613b      	str	r3, [r7, #16]
}
 8008a80:	bf00      	nop
 8008a82:	e7fe      	b.n	8008a82 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	1ad2      	subs	r2, r2, r3
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a96:	69b8      	ldr	r0, [r7, #24]
 8008a98:	f000 f8fe 	bl	8008c98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a9c:	4b1b      	ldr	r3, [pc, #108]	; (8008b0c <pvPortMalloc+0x188>)
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	4a19      	ldr	r2, [pc, #100]	; (8008b0c <pvPortMalloc+0x188>)
 8008aa8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008aaa:	4b18      	ldr	r3, [pc, #96]	; (8008b0c <pvPortMalloc+0x188>)
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	4b19      	ldr	r3, [pc, #100]	; (8008b14 <pvPortMalloc+0x190>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d203      	bcs.n	8008abe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ab6:	4b15      	ldr	r3, [pc, #84]	; (8008b0c <pvPortMalloc+0x188>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a16      	ldr	r2, [pc, #88]	; (8008b14 <pvPortMalloc+0x190>)
 8008abc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac0:	685a      	ldr	r2, [r3, #4]
 8008ac2:	4b11      	ldr	r3, [pc, #68]	; (8008b08 <pvPortMalloc+0x184>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ace:	2200      	movs	r2, #0
 8008ad0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ad2:	f7fe feb9 	bl	8007848 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	f003 0307 	and.w	r3, r3, #7
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00c      	beq.n	8008afa <pvPortMalloc+0x176>
	__asm volatile
 8008ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae4:	b672      	cpsid	i
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	b662      	cpsie	i
 8008af4:	60fb      	str	r3, [r7, #12]
}
 8008af6:	bf00      	nop
 8008af8:	e7fe      	b.n	8008af8 <pvPortMalloc+0x174>
	return pvReturn;
 8008afa:	69fb      	ldr	r3, [r7, #28]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3728      	adds	r7, #40	; 0x28
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	20008f3c 	.word	0x20008f3c
 8008b08:	20008f48 	.word	0x20008f48
 8008b0c:	20008f40 	.word	0x20008f40
 8008b10:	20008f34 	.word	0x20008f34
 8008b14:	20008f44 	.word	0x20008f44

08008b18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d04c      	beq.n	8008bc4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b2a:	2308      	movs	r3, #8
 8008b2c:	425b      	negs	r3, r3
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	4413      	add	r3, r2
 8008b32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	685a      	ldr	r2, [r3, #4]
 8008b3c:	4b23      	ldr	r3, [pc, #140]	; (8008bcc <vPortFree+0xb4>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4013      	ands	r3, r2
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10c      	bne.n	8008b60 <vPortFree+0x48>
	__asm volatile
 8008b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4a:	b672      	cpsid	i
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	b662      	cpsie	i
 8008b5a:	60fb      	str	r3, [r7, #12]
}
 8008b5c:	bf00      	nop
 8008b5e:	e7fe      	b.n	8008b5e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00c      	beq.n	8008b82 <vPortFree+0x6a>
	__asm volatile
 8008b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6c:	b672      	cpsid	i
 8008b6e:	f383 8811 	msr	BASEPRI, r3
 8008b72:	f3bf 8f6f 	isb	sy
 8008b76:	f3bf 8f4f 	dsb	sy
 8008b7a:	b662      	cpsie	i
 8008b7c:	60bb      	str	r3, [r7, #8]
}
 8008b7e:	bf00      	nop
 8008b80:	e7fe      	b.n	8008b80 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	4b11      	ldr	r3, [pc, #68]	; (8008bcc <vPortFree+0xb4>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d019      	beq.n	8008bc4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d115      	bne.n	8008bc4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	685a      	ldr	r2, [r3, #4]
 8008b9c:	4b0b      	ldr	r3, [pc, #44]	; (8008bcc <vPortFree+0xb4>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	43db      	mvns	r3, r3
 8008ba2:	401a      	ands	r2, r3
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ba8:	f7fe fe40 	bl	800782c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	685a      	ldr	r2, [r3, #4]
 8008bb0:	4b07      	ldr	r3, [pc, #28]	; (8008bd0 <vPortFree+0xb8>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	4a06      	ldr	r2, [pc, #24]	; (8008bd0 <vPortFree+0xb8>)
 8008bb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008bba:	6938      	ldr	r0, [r7, #16]
 8008bbc:	f000 f86c 	bl	8008c98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008bc0:	f7fe fe42 	bl	8007848 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008bc4:	bf00      	nop
 8008bc6:	3718      	adds	r7, #24
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	20008f48 	.word	0x20008f48
 8008bd0:	20008f40 	.word	0x20008f40

08008bd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008bda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008bde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008be0:	4b27      	ldr	r3, [pc, #156]	; (8008c80 <prvHeapInit+0xac>)
 8008be2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f003 0307 	and.w	r3, r3, #7
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00c      	beq.n	8008c08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	3307      	adds	r3, #7
 8008bf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f023 0307 	bic.w	r3, r3, #7
 8008bfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	4a1f      	ldr	r2, [pc, #124]	; (8008c80 <prvHeapInit+0xac>)
 8008c04:	4413      	add	r3, r2
 8008c06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c0c:	4a1d      	ldr	r2, [pc, #116]	; (8008c84 <prvHeapInit+0xb0>)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c12:	4b1c      	ldr	r3, [pc, #112]	; (8008c84 <prvHeapInit+0xb0>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	68ba      	ldr	r2, [r7, #8]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c20:	2208      	movs	r2, #8
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	1a9b      	subs	r3, r3, r2
 8008c26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f023 0307 	bic.w	r3, r3, #7
 8008c2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	4a15      	ldr	r2, [pc, #84]	; (8008c88 <prvHeapInit+0xb4>)
 8008c34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c36:	4b14      	ldr	r3, [pc, #80]	; (8008c88 <prvHeapInit+0xb4>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c3e:	4b12      	ldr	r3, [pc, #72]	; (8008c88 <prvHeapInit+0xb4>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2200      	movs	r2, #0
 8008c44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	1ad2      	subs	r2, r2, r3
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c54:	4b0c      	ldr	r3, [pc, #48]	; (8008c88 <prvHeapInit+0xb4>)
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	4a0a      	ldr	r2, [pc, #40]	; (8008c8c <prvHeapInit+0xb8>)
 8008c62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	4a09      	ldr	r2, [pc, #36]	; (8008c90 <prvHeapInit+0xbc>)
 8008c6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c6c:	4b09      	ldr	r3, [pc, #36]	; (8008c94 <prvHeapInit+0xc0>)
 8008c6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c72:	601a      	str	r2, [r3, #0]
}
 8008c74:	bf00      	nop
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	20005334 	.word	0x20005334
 8008c84:	20008f34 	.word	0x20008f34
 8008c88:	20008f3c 	.word	0x20008f3c
 8008c8c:	20008f44 	.word	0x20008f44
 8008c90:	20008f40 	.word	0x20008f40
 8008c94:	20008f48 	.word	0x20008f48

08008c98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ca0:	4b28      	ldr	r3, [pc, #160]	; (8008d44 <prvInsertBlockIntoFreeList+0xac>)
 8008ca2:	60fb      	str	r3, [r7, #12]
 8008ca4:	e002      	b.n	8008cac <prvInsertBlockIntoFreeList+0x14>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	60fb      	str	r3, [r7, #12]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d8f7      	bhi.n	8008ca6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d108      	bne.n	8008cda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	685a      	ldr	r2, [r3, #4]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	441a      	add	r2, r3
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	441a      	add	r2, r3
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d118      	bne.n	8008d20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	4b15      	ldr	r3, [pc, #84]	; (8008d48 <prvInsertBlockIntoFreeList+0xb0>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d00d      	beq.n	8008d16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685a      	ldr	r2, [r3, #4]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	441a      	add	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	e008      	b.n	8008d28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d16:	4b0c      	ldr	r3, [pc, #48]	; (8008d48 <prvInsertBlockIntoFreeList+0xb0>)
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	601a      	str	r2, [r3, #0]
 8008d1e:	e003      	b.n	8008d28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d002      	beq.n	8008d36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d36:	bf00      	nop
 8008d38:	3714      	adds	r7, #20
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	20008f34 	.word	0x20008f34
 8008d48:	20008f3c 	.word	0x20008f3c

08008d4c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	330c      	adds	r3, #12
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f002 fa79 	bl	800b258 <tcpip_send_msg_wait_sem>
 8008d66:	4603      	mov	r3, r0
 8008d68:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d103      	bne.n	8008d7a <netconn_apimsg+0x2e>
    return apimsg->err;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008d78:	e001      	b.n	8008d7e <netconn_apimsg+0x32>
  }
  return err;
 8008d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
	...

08008d88 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b08c      	sub	sp, #48	; 0x30
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	4603      	mov	r3, r0
 8008d90:	603a      	str	r2, [r7, #0]
 8008d92:	71fb      	strb	r3, [r7, #7]
 8008d94:	460b      	mov	r3, r1
 8008d96:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008d98:	79fb      	ldrb	r3, [r7, #7]
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f001 f927 	bl	8009ff0 <netconn_alloc>
 8008da2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8008da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d054      	beq.n	8008e54 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8008daa:	79bb      	ldrb	r3, [r7, #6]
 8008dac:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8008dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008db2:	f107 0308 	add.w	r3, r7, #8
 8008db6:	4619      	mov	r1, r3
 8008db8:	4829      	ldr	r0, [pc, #164]	; (8008e60 <netconn_new_with_proto_and_callback+0xd8>)
 8008dba:	f7ff ffc7 	bl	8008d4c <netconn_apimsg>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8008dc4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d043      	beq.n	8008e54 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8008dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d005      	beq.n	8008de0 <netconn_new_with_proto_and_callback+0x58>
 8008dd4:	4b23      	ldr	r3, [pc, #140]	; (8008e64 <netconn_new_with_proto_and_callback+0xdc>)
 8008dd6:	22a3      	movs	r2, #163	; 0xa3
 8008dd8:	4923      	ldr	r1, [pc, #140]	; (8008e68 <netconn_new_with_proto_and_callback+0xe0>)
 8008dda:	4824      	ldr	r0, [pc, #144]	; (8008e6c <netconn_new_with_proto_and_callback+0xe4>)
 8008ddc:	f011 f976 	bl	801a0cc <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de2:	3310      	adds	r3, #16
 8008de4:	4618      	mov	r0, r3
 8008de6:	f00d f9da 	bl	801619e <sys_mbox_valid>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d105      	bne.n	8008dfc <netconn_new_with_proto_and_callback+0x74>
 8008df0:	4b1c      	ldr	r3, [pc, #112]	; (8008e64 <netconn_new_with_proto_and_callback+0xdc>)
 8008df2:	22a4      	movs	r2, #164	; 0xa4
 8008df4:	491e      	ldr	r1, [pc, #120]	; (8008e70 <netconn_new_with_proto_and_callback+0xe8>)
 8008df6:	481d      	ldr	r0, [pc, #116]	; (8008e6c <netconn_new_with_proto_and_callback+0xe4>)
 8008df8:	f011 f968 	bl	801a0cc <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8008dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfe:	3314      	adds	r3, #20
 8008e00:	4618      	mov	r0, r3
 8008e02:	f00d f9cc 	bl	801619e <sys_mbox_valid>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d005      	beq.n	8008e18 <netconn_new_with_proto_and_callback+0x90>
 8008e0c:	4b15      	ldr	r3, [pc, #84]	; (8008e64 <netconn_new_with_proto_and_callback+0xdc>)
 8008e0e:	22a6      	movs	r2, #166	; 0xa6
 8008e10:	4918      	ldr	r1, [pc, #96]	; (8008e74 <netconn_new_with_proto_and_callback+0xec>)
 8008e12:	4816      	ldr	r0, [pc, #88]	; (8008e6c <netconn_new_with_proto_and_callback+0xe4>)
 8008e14:	f011 f95a 	bl	801a0cc <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1a:	330c      	adds	r3, #12
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f00d fa4f 	bl	80162c0 <sys_sem_valid>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d105      	bne.n	8008e34 <netconn_new_with_proto_and_callback+0xac>
 8008e28:	4b0e      	ldr	r3, [pc, #56]	; (8008e64 <netconn_new_with_proto_and_callback+0xdc>)
 8008e2a:	22a9      	movs	r2, #169	; 0xa9
 8008e2c:	4912      	ldr	r1, [pc, #72]	; (8008e78 <netconn_new_with_proto_and_callback+0xf0>)
 8008e2e:	480f      	ldr	r0, [pc, #60]	; (8008e6c <netconn_new_with_proto_and_callback+0xe4>)
 8008e30:	f011 f94c 	bl	801a0cc <iprintf>
      sys_sem_free(&conn->op_completed);
 8008e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e36:	330c      	adds	r3, #12
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f00d fa34 	bl	80162a6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8008e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e40:	3310      	adds	r3, #16
 8008e42:	4618      	mov	r0, r3
 8008e44:	f00d f924 	bl	8016090 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008e48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e4a:	2007      	movs	r0, #7
 8008e4c:	f002 fffa 	bl	800be44 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008e50:	2300      	movs	r3, #0
 8008e52:	e000      	b.n	8008e56 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3730      	adds	r7, #48	; 0x30
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	08009fc5 	.word	0x08009fc5
 8008e64:	0801c77c 	.word	0x0801c77c
 8008e68:	0801c7b0 	.word	0x0801c7b0
 8008e6c:	0801c7d4 	.word	0x0801c7d4
 8008e70:	0801c7fc 	.word	0x0801c7fc
 8008e74:	0801c814 	.word	0x0801c814
 8008e78:	0801c838 	.word	0x0801c838

08008e7c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b08c      	sub	sp, #48	; 0x30
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d101      	bne.n	8008e8e <netconn_prepare_delete+0x12>
    return ERR_OK;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	e014      	b.n	8008eb8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008e92:	2329      	movs	r3, #41	; 0x29
 8008e94:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008e96:	f107 030c 	add.w	r3, r7, #12
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	4808      	ldr	r0, [pc, #32]	; (8008ec0 <netconn_prepare_delete+0x44>)
 8008e9e:	f7ff ff55 	bl	8008d4c <netconn_apimsg>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008ea8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d002      	beq.n	8008eb6 <netconn_prepare_delete+0x3a>
    return err;
 8008eb0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008eb4:	e000      	b.n	8008eb8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008eb6:	2300      	movs	r3, #0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3730      	adds	r7, #48	; 0x30
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	0800a531 	.word	0x0800a531

08008ec4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d101      	bne.n	8008ed6 <netconn_delete+0x12>
    return ERR_OK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	e00d      	b.n	8008ef2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f7ff ffd0 	bl	8008e7c <netconn_prepare_delete>
 8008edc:	4603      	mov	r3, r0
 8008ede:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d102      	bne.n	8008eee <netconn_delete+0x2a>
    netconn_free(conn);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f001 f8ef 	bl	800a0cc <netconn_free>
  }
  return err;
 8008eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
	...

08008efc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08e      	sub	sp, #56	; 0x38
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	4613      	mov	r3, r2
 8008f08:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d109      	bne.n	8008f24 <netconn_bind+0x28>
 8008f10:	4b11      	ldr	r3, [pc, #68]	; (8008f58 <netconn_bind+0x5c>)
 8008f12:	f44f 729c 	mov.w	r2, #312	; 0x138
 8008f16:	4911      	ldr	r1, [pc, #68]	; (8008f5c <netconn_bind+0x60>)
 8008f18:	4811      	ldr	r0, [pc, #68]	; (8008f60 <netconn_bind+0x64>)
 8008f1a:	f011 f8d7 	bl	801a0cc <iprintf>
 8008f1e:	f06f 030f 	mvn.w	r3, #15
 8008f22:	e015      	b.n	8008f50 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d101      	bne.n	8008f2e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8008f2a:	4b0e      	ldr	r3, [pc, #56]	; (8008f64 <netconn_bind+0x68>)
 8008f2c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008f36:	88fb      	ldrh	r3, [r7, #6]
 8008f38:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8008f3a:	f107 0314 	add.w	r3, r7, #20
 8008f3e:	4619      	mov	r1, r3
 8008f40:	4809      	ldr	r0, [pc, #36]	; (8008f68 <netconn_bind+0x6c>)
 8008f42:	f7ff ff03 	bl	8008d4c <netconn_apimsg>
 8008f46:	4603      	mov	r3, r0
 8008f48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008f4c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3738      	adds	r7, #56	; 0x38
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	0801c77c 	.word	0x0801c77c
 8008f5c:	0801c8b4 	.word	0x0801c8b4
 8008f60:	0801c7d4 	.word	0x0801c7d4
 8008f64:	08029558 	.word	0x08029558
 8008f68:	0800a6f9 	.word	0x0800a6f9

08008f6c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b08c      	sub	sp, #48	; 0x30
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	460b      	mov	r3, r1
 8008f76:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d109      	bne.n	8008f92 <netconn_listen_with_backlog+0x26>
 8008f7e:	4b0d      	ldr	r3, [pc, #52]	; (8008fb4 <netconn_listen_with_backlog+0x48>)
 8008f80:	f240 12bb 	movw	r2, #443	; 0x1bb
 8008f84:	490c      	ldr	r1, [pc, #48]	; (8008fb8 <netconn_listen_with_backlog+0x4c>)
 8008f86:	480d      	ldr	r0, [pc, #52]	; (8008fbc <netconn_listen_with_backlog+0x50>)
 8008f88:	f011 f8a0 	bl	801a0cc <iprintf>
 8008f8c:	f06f 030f 	mvn.w	r3, #15
 8008f90:	e00c      	b.n	8008fac <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008f96:	f107 030c 	add.w	r3, r7, #12
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	4808      	ldr	r0, [pc, #32]	; (8008fc0 <netconn_listen_with_backlog+0x54>)
 8008f9e:	f7ff fed5 	bl	8008d4c <netconn_apimsg>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008fa8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3730      	adds	r7, #48	; 0x30
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	0801c77c 	.word	0x0801c77c
 8008fb8:	0801c934 	.word	0x0801c934
 8008fbc:	0801c7d4 	.word	0x0801c7d4
 8008fc0:	0800a76d 	.word	0x0800a76d

08008fc4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d109      	bne.n	8008fe8 <netconn_accept+0x24>
 8008fd4:	4b3d      	ldr	r3, [pc, #244]	; (80090cc <netconn_accept+0x108>)
 8008fd6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008fda:	493d      	ldr	r1, [pc, #244]	; (80090d0 <netconn_accept+0x10c>)
 8008fdc:	483d      	ldr	r0, [pc, #244]	; (80090d4 <netconn_accept+0x110>)
 8008fde:	f011 f875 	bl	801a0cc <iprintf>
 8008fe2:	f06f 030f 	mvn.w	r3, #15
 8008fe6:	e06c      	b.n	80090c2 <netconn_accept+0xfe>
  *new_conn = NULL;
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2200      	movs	r2, #0
 8008fec:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d109      	bne.n	8009008 <netconn_accept+0x44>
 8008ff4:	4b35      	ldr	r3, [pc, #212]	; (80090cc <netconn_accept+0x108>)
 8008ff6:	f240 12e3 	movw	r2, #483	; 0x1e3
 8008ffa:	4937      	ldr	r1, [pc, #220]	; (80090d8 <netconn_accept+0x114>)
 8008ffc:	4835      	ldr	r0, [pc, #212]	; (80090d4 <netconn_accept+0x110>)
 8008ffe:	f011 f865 	bl	801a0cc <iprintf>
 8009002:	f06f 030f 	mvn.w	r3, #15
 8009006:	e05c      	b.n	80090c2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fb6c 	bl	80096e6 <netconn_err>
 800900e:	4603      	mov	r3, r0
 8009010:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8009012:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d002      	beq.n	8009020 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800901a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800901e:	e050      	b.n	80090c2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	3314      	adds	r3, #20
 8009024:	4618      	mov	r0, r3
 8009026:	f00d f8ba 	bl	801619e <sys_mbox_valid>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d005      	beq.n	800903c <netconn_accept+0x78>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	7f1b      	ldrb	r3, [r3, #28]
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	2b00      	cmp	r3, #0
 800903a:	d002      	beq.n	8009042 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800903c:	f06f 030e 	mvn.w	r3, #14
 8009040:	e03f      	b.n	80090c2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	7f1b      	ldrb	r3, [r3, #28]
 8009046:	f003 0302 	and.w	r3, r3, #2
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00e      	beq.n	800906c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	3314      	adds	r3, #20
 8009052:	f107 020c 	add.w	r2, r7, #12
 8009056:	4611      	mov	r1, r2
 8009058:	4618      	mov	r0, r3
 800905a:	f00d f884 	bl	8016166 <sys_arch_mbox_tryfetch>
 800905e:	4603      	mov	r3, r0
 8009060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009064:	d10a      	bne.n	800907c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8009066:	f06f 0306 	mvn.w	r3, #6
 800906a:	e02a      	b.n	80090c2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	3314      	adds	r3, #20
 8009070:	f107 010c 	add.w	r1, r7, #12
 8009074:	2200      	movs	r2, #0
 8009076:	4618      	mov	r0, r3
 8009078:	f00d f836 	bl	80160e8 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009080:	2b00      	cmp	r3, #0
 8009082:	d005      	beq.n	8009090 <netconn_accept+0xcc>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009088:	2200      	movs	r2, #0
 800908a:	2101      	movs	r1, #1
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f107 0213 	add.w	r2, r7, #19
 8009096:	4611      	mov	r1, r2
 8009098:	4618      	mov	r0, r3
 800909a:	f000 fb75 	bl	8009788 <lwip_netconn_is_err_msg>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d002      	beq.n	80090aa <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 80090a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80090a8:	e00b      	b.n	80090c2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d102      	bne.n	80090b6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 80090b0:	f06f 030e 	mvn.w	r3, #14
 80090b4:	e005      	b.n	80090c2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	697a      	ldr	r2, [r7, #20]
 80090be:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80090c0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3718      	adds	r7, #24
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	0801c77c 	.word	0x0801c77c
 80090d0:	0801c954 	.word	0x0801c954
 80090d4:	0801c7d4 	.word	0x0801c7d4
 80090d8:	0801c974 	.word	0x0801c974

080090dc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b088      	sub	sp, #32
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	4613      	mov	r3, r2
 80090e8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80090ea:	2300      	movs	r3, #0
 80090ec:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d109      	bne.n	8009108 <netconn_recv_data+0x2c>
 80090f4:	4b58      	ldr	r3, [pc, #352]	; (8009258 <netconn_recv_data+0x17c>)
 80090f6:	f44f 7212 	mov.w	r2, #584	; 0x248
 80090fa:	4958      	ldr	r1, [pc, #352]	; (800925c <netconn_recv_data+0x180>)
 80090fc:	4858      	ldr	r0, [pc, #352]	; (8009260 <netconn_recv_data+0x184>)
 80090fe:	f010 ffe5 	bl	801a0cc <iprintf>
 8009102:	f06f 030f 	mvn.w	r3, #15
 8009106:	e0a2      	b.n	800924e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	2200      	movs	r2, #0
 800910c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d109      	bne.n	8009128 <netconn_recv_data+0x4c>
 8009114:	4b50      	ldr	r3, [pc, #320]	; (8009258 <netconn_recv_data+0x17c>)
 8009116:	f240 224a 	movw	r2, #586	; 0x24a
 800911a:	4952      	ldr	r1, [pc, #328]	; (8009264 <netconn_recv_data+0x188>)
 800911c:	4850      	ldr	r0, [pc, #320]	; (8009260 <netconn_recv_data+0x184>)
 800911e:	f010 ffd5 	bl	801a0cc <iprintf>
 8009122:	f06f 030f 	mvn.w	r3, #15
 8009126:	e092      	b.n	800924e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	3310      	adds	r3, #16
 800912c:	4618      	mov	r0, r3
 800912e:	f00d f836 	bl	801619e <sys_mbox_valid>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10e      	bne.n	8009156 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8009138:	68f8      	ldr	r0, [r7, #12]
 800913a:	f000 fad4 	bl	80096e6 <netconn_err>
 800913e:	4603      	mov	r3, r0
 8009140:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8009142:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d002      	beq.n	8009150 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800914a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800914e:	e07e      	b.n	800924e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8009150:	f06f 030a 	mvn.w	r3, #10
 8009154:	e07b      	b.n	800924e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	7f1b      	ldrb	r3, [r3, #28]
 800915a:	f003 0302 	and.w	r3, r3, #2
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10f      	bne.n	8009182 <netconn_recv_data+0xa6>
 8009162:	79fb      	ldrb	r3, [r7, #7]
 8009164:	f003 0304 	and.w	r3, r3, #4
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10a      	bne.n	8009182 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	7f1b      	ldrb	r3, [r3, #28]
 8009170:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009174:	2b00      	cmp	r3, #0
 8009176:	d104      	bne.n	8009182 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d023      	beq.n	80091ca <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	3310      	adds	r3, #16
 8009186:	f107 0218 	add.w	r2, r7, #24
 800918a:	4611      	mov	r1, r2
 800918c:	4618      	mov	r0, r3
 800918e:	f00c ffea 	bl	8016166 <sys_arch_mbox_tryfetch>
 8009192:	4603      	mov	r3, r0
 8009194:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009198:	d11f      	bne.n	80091da <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f000 faa3 	bl	80096e6 <netconn_err>
 80091a0:	4603      	mov	r3, r0
 80091a2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80091a4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80091ac:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80091b0:	e04d      	b.n	800924e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	7f1b      	ldrb	r3, [r3, #28]
 80091b6:	f003 0301 	and.w	r3, r3, #1
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d002      	beq.n	80091c4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 80091be:	f06f 030a 	mvn.w	r3, #10
 80091c2:	e044      	b.n	800924e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80091c4:	f06f 0306 	mvn.w	r3, #6
 80091c8:	e041      	b.n	800924e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	3310      	adds	r3, #16
 80091ce:	f107 0118 	add.w	r1, r7, #24
 80091d2:	2200      	movs	r2, #0
 80091d4:	4618      	mov	r0, r3
 80091d6:	f00c ff87 	bl	80160e8 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091e2:	2b10      	cmp	r3, #16
 80091e4:	d117      	bne.n	8009216 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	f107 0217 	add.w	r2, r7, #23
 80091ec:	4611      	mov	r1, r2
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 faca 	bl	8009788 <lwip_netconn_is_err_msg>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d009      	beq.n	800920e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80091fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091fe:	f113 0f0f 	cmn.w	r3, #15
 8009202:	d101      	bne.n	8009208 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8009204:	2300      	movs	r3, #0
 8009206:	e022      	b.n	800924e <netconn_recv_data+0x172>
      }
      return err;
 8009208:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800920c:	e01f      	b.n	800924e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	891b      	ldrh	r3, [r3, #8]
 8009212:	83fb      	strh	r3, [r7, #30]
 8009214:	e00d      	b.n	8009232 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d106      	bne.n	800922a <netconn_recv_data+0x14e>
 800921c:	4b0e      	ldr	r3, [pc, #56]	; (8009258 <netconn_recv_data+0x17c>)
 800921e:	f240 2291 	movw	r2, #657	; 0x291
 8009222:	4911      	ldr	r1, [pc, #68]	; (8009268 <netconn_recv_data+0x18c>)
 8009224:	480e      	ldr	r0, [pc, #56]	; (8009260 <netconn_recv_data+0x184>)
 8009226:	f010 ff51 	bl	801a0cc <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	891b      	ldrh	r3, [r3, #8]
 8009230:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009236:	2b00      	cmp	r3, #0
 8009238:	d005      	beq.n	8009246 <netconn_recv_data+0x16a>
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923e:	8bfa      	ldrh	r2, [r7, #30]
 8009240:	2101      	movs	r1, #1
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8009246:	69ba      	ldr	r2, [r7, #24]
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3720      	adds	r7, #32
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	0801c77c 	.word	0x0801c77c
 800925c:	0801c994 	.word	0x0801c994
 8009260:	0801c7d4 	.word	0x0801c7d4
 8009264:	0801c9b4 	.word	0x0801c9b4
 8009268:	0801c9d0 	.word	0x0801c9d0

0800926c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d005      	beq.n	800928a <netconn_tcp_recvd_msg+0x1e>
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009286:	2b10      	cmp	r3, #16
 8009288:	d009      	beq.n	800929e <netconn_tcp_recvd_msg+0x32>
 800928a:	4b0c      	ldr	r3, [pc, #48]	; (80092bc <netconn_tcp_recvd_msg+0x50>)
 800928c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8009290:	490b      	ldr	r1, [pc, #44]	; (80092c0 <netconn_tcp_recvd_msg+0x54>)
 8009292:	480c      	ldr	r0, [pc, #48]	; (80092c4 <netconn_tcp_recvd_msg+0x58>)
 8009294:	f010 ff1a 	bl	801a0cc <iprintf>
 8009298:	f06f 030f 	mvn.w	r3, #15
 800929c:	e00a      	b.n	80092b4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	68ba      	ldr	r2, [r7, #8]
 80092a8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80092aa:	6879      	ldr	r1, [r7, #4]
 80092ac:	4806      	ldr	r0, [pc, #24]	; (80092c8 <netconn_tcp_recvd_msg+0x5c>)
 80092ae:	f7ff fd4d 	bl	8008d4c <netconn_apimsg>
 80092b2:	4603      	mov	r3, r0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	0801c77c 	.word	0x0801c77c
 80092c0:	0801c9dc 	.word	0x0801c9dc
 80092c4:	0801c7d4 	.word	0x0801c7d4
 80092c8:	0800a89d 	.word	0x0800a89d

080092cc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b090      	sub	sp, #64	; 0x40
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	4613      	mov	r3, r2
 80092d8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	3310      	adds	r3, #16
 80092de:	4618      	mov	r0, r3
 80092e0:	f00c ff5d 	bl	801619e <sys_mbox_valid>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d102      	bne.n	80092f0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80092ea:	f06f 030a 	mvn.w	r3, #10
 80092ee:	e06d      	b.n	80093cc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	7f1b      	ldrb	r3, [r3, #28]
 80092f4:	b25b      	sxtb	r3, r3
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	da07      	bge.n	800930a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	7f1b      	ldrb	r3, [r3, #28]
 80092fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009302:	b2da      	uxtb	r2, r3
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8009308:	e039      	b.n	800937e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800930a:	79fb      	ldrb	r3, [r7, #7]
 800930c:	461a      	mov	r2, r3
 800930e:	68b9      	ldr	r1, [r7, #8]
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f7ff fee3 	bl	80090dc <netconn_recv_data>
 8009316:	4603      	mov	r3, r0
 8009318:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800931c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009320:	2b00      	cmp	r3, #0
 8009322:	d002      	beq.n	800932a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009324:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009328:	e050      	b.n	80093cc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009330:	79fb      	ldrb	r3, [r7, #7]
 8009332:	f003 0308 	and.w	r3, r3, #8
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10e      	bne.n	8009358 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800933a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933c:	2b00      	cmp	r3, #0
 800933e:	d002      	beq.n	8009346 <netconn_recv_data_tcp+0x7a>
 8009340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009342:	891b      	ldrh	r3, [r3, #8]
 8009344:	e000      	b.n	8009348 <netconn_recv_data_tcp+0x7c>
 8009346:	2301      	movs	r3, #1
 8009348:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800934a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800934c:	f107 0214 	add.w	r2, r7, #20
 8009350:	4619      	mov	r1, r3
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f7ff ff8a 	bl	800926c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935a:	2b00      	cmp	r3, #0
 800935c:	d134      	bne.n	80093c8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800935e:	79fb      	ldrb	r3, [r7, #7]
 8009360:	f003 0310 	and.w	r3, r3, #16
 8009364:	2b00      	cmp	r3, #0
 8009366:	d009      	beq.n	800937c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	7f1b      	ldrb	r3, [r3, #28]
 800936c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009370:	b2da      	uxtb	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8009376:	f06f 0306 	mvn.w	r3, #6
 800937a:	e027      	b.n	80093cc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800937c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009382:	2b00      	cmp	r3, #0
 8009384:	d005      	beq.n	8009392 <netconn_recv_data_tcp+0xc6>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938a:	2200      	movs	r2, #0
 800938c:	2101      	movs	r1, #1
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d10f      	bne.n	80093ba <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f000 f9a3 	bl	80096e6 <netconn_err>
 80093a0:	4603      	mov	r3, r0
 80093a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 80093a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d002      	beq.n	80093b4 <netconn_recv_data_tcp+0xe8>
          return err;
 80093ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80093b2:	e00b      	b.n	80093cc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 80093b4:	f06f 030d 	mvn.w	r3, #13
 80093b8:	e008      	b.n	80093cc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80093ba:	2101      	movs	r1, #1
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f000 f955 	bl	800966c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80093c2:	f06f 030e 	mvn.w	r3, #14
 80093c6:	e001      	b.n	80093cc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80093c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3740      	adds	r7, #64	; 0x40
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b086      	sub	sp, #24
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80093de:	2300      	movs	r3, #0
 80093e0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d109      	bne.n	80093fc <netconn_recv+0x28>
 80093e8:	4b32      	ldr	r3, [pc, #200]	; (80094b4 <netconn_recv+0xe0>)
 80093ea:	f240 3263 	movw	r2, #867	; 0x363
 80093ee:	4932      	ldr	r1, [pc, #200]	; (80094b8 <netconn_recv+0xe4>)
 80093f0:	4832      	ldr	r0, [pc, #200]	; (80094bc <netconn_recv+0xe8>)
 80093f2:	f010 fe6b 	bl	801a0cc <iprintf>
 80093f6:	f06f 030f 	mvn.w	r3, #15
 80093fa:	e056      	b.n	80094aa <netconn_recv+0xd6>
  *new_buf = NULL;
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	2200      	movs	r2, #0
 8009400:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d109      	bne.n	800941c <netconn_recv+0x48>
 8009408:	4b2a      	ldr	r3, [pc, #168]	; (80094b4 <netconn_recv+0xe0>)
 800940a:	f240 3265 	movw	r2, #869	; 0x365
 800940e:	492c      	ldr	r1, [pc, #176]	; (80094c0 <netconn_recv+0xec>)
 8009410:	482a      	ldr	r0, [pc, #168]	; (80094bc <netconn_recv+0xe8>)
 8009412:	f010 fe5b 	bl	801a0cc <iprintf>
 8009416:	f06f 030f 	mvn.w	r3, #15
 800941a:	e046      	b.n	80094aa <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009424:	2b10      	cmp	r3, #16
 8009426:	d13a      	bne.n	800949e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8009428:	2300      	movs	r3, #0
 800942a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800942c:	2006      	movs	r0, #6
 800942e:	f002 fc93 	bl	800bd58 <memp_malloc>
 8009432:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d102      	bne.n	8009440 <netconn_recv+0x6c>
      return ERR_MEM;
 800943a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800943e:	e034      	b.n	80094aa <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8009440:	f107 030c 	add.w	r3, r7, #12
 8009444:	2200      	movs	r2, #0
 8009446:	4619      	mov	r1, r3
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f7ff ff3f 	bl	80092cc <netconn_recv_data_tcp>
 800944e:	4603      	mov	r3, r0
 8009450:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8009452:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d006      	beq.n	8009468 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800945a:	6979      	ldr	r1, [r7, #20]
 800945c:	2006      	movs	r0, #6
 800945e:	f002 fcf1 	bl	800be44 <memp_free>
      return err;
 8009462:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009466:	e020      	b.n	80094aa <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d106      	bne.n	800947c <netconn_recv+0xa8>
 800946e:	4b11      	ldr	r3, [pc, #68]	; (80094b4 <netconn_recv+0xe0>)
 8009470:	f240 3279 	movw	r2, #889	; 0x379
 8009474:	4913      	ldr	r1, [pc, #76]	; (80094c4 <netconn_recv+0xf0>)
 8009476:	4811      	ldr	r0, [pc, #68]	; (80094bc <netconn_recv+0xe8>)
 8009478:	f010 fe28 	bl	801a0cc <iprintf>

    buf->p = p;
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	2200      	movs	r2, #0
 800948c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	2200      	movs	r2, #0
 8009492:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	697a      	ldr	r2, [r7, #20]
 8009498:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800949a:	2300      	movs	r3, #0
 800949c:	e005      	b.n	80094aa <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800949e:	2200      	movs	r2, #0
 80094a0:	6839      	ldr	r1, [r7, #0]
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f7ff fe1a 	bl	80090dc <netconn_recv_data>
 80094a8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3718      	adds	r7, #24
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	0801c77c 	.word	0x0801c77c
 80094b8:	0801c994 	.word	0x0801c994
 80094bc:	0801c7d4 	.word	0x0801c7d4
 80094c0:	0801c9b4 	.word	0x0801c9b4
 80094c4:	0801ca2c 	.word	0x0801ca2c

080094c8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b088      	sub	sp, #32
 80094cc:	af02      	add	r7, sp, #8
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
 80094d4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80094de:	78fa      	ldrb	r2, [r7, #3]
 80094e0:	f107 0110 	add.w	r1, r7, #16
 80094e4:	6a3b      	ldr	r3, [r7, #32]
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	4613      	mov	r3, r2
 80094ea:	2201      	movs	r2, #1
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f000 f805 	bl	80094fc <netconn_write_vectors_partly>
 80094f2:	4603      	mov	r3, r0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3718      	adds	r7, #24
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b092      	sub	sp, #72	; 0x48
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	4611      	mov	r1, r2
 8009508:	461a      	mov	r2, r3
 800950a:	460b      	mov	r3, r1
 800950c:	80fb      	strh	r3, [r7, #6]
 800950e:	4613      	mov	r3, r2
 8009510:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d109      	bne.n	800952c <netconn_write_vectors_partly+0x30>
 8009518:	4b4e      	ldr	r3, [pc, #312]	; (8009654 <netconn_write_vectors_partly+0x158>)
 800951a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800951e:	494e      	ldr	r1, [pc, #312]	; (8009658 <netconn_write_vectors_partly+0x15c>)
 8009520:	484e      	ldr	r0, [pc, #312]	; (800965c <netconn_write_vectors_partly+0x160>)
 8009522:	f010 fdd3 	bl	801a0cc <iprintf>
 8009526:	f06f 030f 	mvn.w	r3, #15
 800952a:	e08e      	b.n	800964a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009534:	2b10      	cmp	r3, #16
 8009536:	d009      	beq.n	800954c <netconn_write_vectors_partly+0x50>
 8009538:	4b46      	ldr	r3, [pc, #280]	; (8009654 <netconn_write_vectors_partly+0x158>)
 800953a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800953e:	4948      	ldr	r1, [pc, #288]	; (8009660 <netconn_write_vectors_partly+0x164>)
 8009540:	4846      	ldr	r0, [pc, #280]	; (800965c <netconn_write_vectors_partly+0x160>)
 8009542:	f010 fdc3 	bl	801a0cc <iprintf>
 8009546:	f06f 0305 	mvn.w	r3, #5
 800954a:	e07e      	b.n	800964a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	7f1b      	ldrb	r3, [r3, #28]
 8009550:	f003 0302 	and.w	r3, r3, #2
 8009554:	2b00      	cmp	r3, #0
 8009556:	d104      	bne.n	8009562 <netconn_write_vectors_partly+0x66>
 8009558:	797b      	ldrb	r3, [r7, #5]
 800955a:	f003 0304 	and.w	r3, r3, #4
 800955e:	2b00      	cmp	r3, #0
 8009560:	d001      	beq.n	8009566 <netconn_write_vectors_partly+0x6a>
 8009562:	2301      	movs	r3, #1
 8009564:	e000      	b.n	8009568 <netconn_write_vectors_partly+0x6c>
 8009566:	2300      	movs	r3, #0
 8009568:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800956c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009570:	2b00      	cmp	r3, #0
 8009572:	d005      	beq.n	8009580 <netconn_write_vectors_partly+0x84>
 8009574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009576:	2b00      	cmp	r3, #0
 8009578:	d102      	bne.n	8009580 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800957a:	f06f 0305 	mvn.w	r3, #5
 800957e:	e064      	b.n	800964a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8009580:	2300      	movs	r3, #0
 8009582:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009584:	2300      	movs	r3, #0
 8009586:	643b      	str	r3, [r7, #64]	; 0x40
 8009588:	e015      	b.n	80095b6 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800958a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800958c:	00db      	lsls	r3, r3, #3
 800958e:	68ba      	ldr	r2, [r7, #8]
 8009590:	4413      	add	r3, r2
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009596:	4413      	add	r3, r2
 8009598:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800959a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800959c:	00db      	lsls	r3, r3, #3
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	4413      	add	r3, r2
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d202      	bcs.n	80095b0 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 80095aa:	f06f 0305 	mvn.w	r3, #5
 80095ae:	e04c      	b.n	800964a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 80095b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095b2:	3301      	adds	r3, #1
 80095b4:	643b      	str	r3, [r7, #64]	; 0x40
 80095b6:	88fb      	ldrh	r3, [r7, #6]
 80095b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095ba:	429a      	cmp	r2, r3
 80095bc:	dbe5      	blt.n	800958a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 80095be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d101      	bne.n	80095c8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 80095c4:	2300      	movs	r3, #0
 80095c6:	e040      	b.n	800964a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 80095c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	da0a      	bge.n	80095e4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80095ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d102      	bne.n	80095da <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80095d4:	f06f 0305 	mvn.w	r3, #5
 80095d8:	e037      	b.n	800964a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80095da:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80095de:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 80095e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80095ec:	88fb      	ldrh	r3, [r7, #6]
 80095ee:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80095f0:	2300      	movs	r3, #0
 80095f2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80095f4:	797b      	ldrb	r3, [r7, #5]
 80095f6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80095fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095fc:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80095fe:	2300      	movs	r3, #0
 8009600:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009602:	f107 0314 	add.w	r3, r7, #20
 8009606:	4619      	mov	r1, r3
 8009608:	4816      	ldr	r0, [pc, #88]	; (8009664 <netconn_write_vectors_partly+0x168>)
 800960a:	f7ff fb9f 	bl	8008d4c <netconn_apimsg>
 800960e:	4603      	mov	r3, r0
 8009610:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8009614:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009618:	2b00      	cmp	r3, #0
 800961a:	d114      	bne.n	8009646 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800961c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800961e:	2b00      	cmp	r3, #0
 8009620:	d002      	beq.n	8009628 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009626:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009628:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10a      	bne.n	8009646 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009632:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009634:	429a      	cmp	r2, r3
 8009636:	d006      	beq.n	8009646 <netconn_write_vectors_partly+0x14a>
 8009638:	4b06      	ldr	r3, [pc, #24]	; (8009654 <netconn_write_vectors_partly+0x158>)
 800963a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800963e:	490a      	ldr	r1, [pc, #40]	; (8009668 <netconn_write_vectors_partly+0x16c>)
 8009640:	4806      	ldr	r0, [pc, #24]	; (800965c <netconn_write_vectors_partly+0x160>)
 8009642:	f010 fd43 	bl	801a0cc <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009646:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800964a:	4618      	mov	r0, r3
 800964c:	3748      	adds	r7, #72	; 0x48
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	0801c77c 	.word	0x0801c77c
 8009658:	0801ca54 	.word	0x0801ca54
 800965c:	0801c7d4 	.word	0x0801c7d4
 8009660:	0801ca70 	.word	0x0801ca70
 8009664:	0800aca5 	.word	0x0800aca5
 8009668:	0801ca94 	.word	0x0801ca94

0800966c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b08c      	sub	sp, #48	; 0x30
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	460b      	mov	r3, r1
 8009676:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d109      	bne.n	8009692 <netconn_close_shutdown+0x26>
 800967e:	4b0f      	ldr	r3, [pc, #60]	; (80096bc <netconn_close_shutdown+0x50>)
 8009680:	f240 4247 	movw	r2, #1095	; 0x447
 8009684:	490e      	ldr	r1, [pc, #56]	; (80096c0 <netconn_close_shutdown+0x54>)
 8009686:	480f      	ldr	r0, [pc, #60]	; (80096c4 <netconn_close_shutdown+0x58>)
 8009688:	f010 fd20 	bl	801a0cc <iprintf>
 800968c:	f06f 030f 	mvn.w	r3, #15
 8009690:	e010      	b.n	80096b4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009696:	78fb      	ldrb	r3, [r7, #3]
 8009698:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800969a:	2329      	movs	r3, #41	; 0x29
 800969c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800969e:	f107 030c 	add.w	r3, r7, #12
 80096a2:	4619      	mov	r1, r3
 80096a4:	4808      	ldr	r0, [pc, #32]	; (80096c8 <netconn_close_shutdown+0x5c>)
 80096a6:	f7ff fb51 	bl	8008d4c <netconn_apimsg>
 80096aa:	4603      	mov	r3, r0
 80096ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80096b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3730      	adds	r7, #48	; 0x30
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	0801c77c 	.word	0x0801c77c
 80096c0:	0801cab8 	.word	0x0801cab8
 80096c4:	0801c7d4 	.word	0x0801c7d4
 80096c8:	0800adbd 	.word	0x0800adbd

080096cc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80096d4:	2103      	movs	r1, #3
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f7ff ffc8 	bl	800966c <netconn_close_shutdown>
 80096dc:	4603      	mov	r3, r0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b084      	sub	sp, #16
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d101      	bne.n	80096f8 <netconn_err+0x12>
    return ERR_OK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	e00d      	b.n	8009714 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80096f8:	f00c fe6c 	bl	80163d4 <sys_arch_protect>
 80096fc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	7a1b      	ldrb	r3, [r3, #8]
 8009702:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f00c fe70 	bl	80163f0 <sys_arch_unprotect>
  return err;
 8009710:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	4603      	mov	r3, r0
 8009724:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800972a:	f113 0f0d 	cmn.w	r3, #13
 800972e:	d009      	beq.n	8009744 <lwip_netconn_err_to_msg+0x28>
 8009730:	f113 0f0d 	cmn.w	r3, #13
 8009734:	dc0c      	bgt.n	8009750 <lwip_netconn_err_to_msg+0x34>
 8009736:	f113 0f0f 	cmn.w	r3, #15
 800973a:	d007      	beq.n	800974c <lwip_netconn_err_to_msg+0x30>
 800973c:	f113 0f0e 	cmn.w	r3, #14
 8009740:	d002      	beq.n	8009748 <lwip_netconn_err_to_msg+0x2c>
 8009742:	e005      	b.n	8009750 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009744:	4b0a      	ldr	r3, [pc, #40]	; (8009770 <lwip_netconn_err_to_msg+0x54>)
 8009746:	e00e      	b.n	8009766 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009748:	4b0a      	ldr	r3, [pc, #40]	; (8009774 <lwip_netconn_err_to_msg+0x58>)
 800974a:	e00c      	b.n	8009766 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800974c:	4b0a      	ldr	r3, [pc, #40]	; (8009778 <lwip_netconn_err_to_msg+0x5c>)
 800974e:	e00a      	b.n	8009766 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d005      	beq.n	8009764 <lwip_netconn_err_to_msg+0x48>
 8009758:	4b08      	ldr	r3, [pc, #32]	; (800977c <lwip_netconn_err_to_msg+0x60>)
 800975a:	227d      	movs	r2, #125	; 0x7d
 800975c:	4908      	ldr	r1, [pc, #32]	; (8009780 <lwip_netconn_err_to_msg+0x64>)
 800975e:	4809      	ldr	r0, [pc, #36]	; (8009784 <lwip_netconn_err_to_msg+0x68>)
 8009760:	f010 fcb4 	bl	801a0cc <iprintf>
      return NULL;
 8009764:	2300      	movs	r3, #0
  }
}
 8009766:	4618      	mov	r0, r3
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	0801ffc4 	.word	0x0801ffc4
 8009774:	0801ffc5 	.word	0x0801ffc5
 8009778:	0801ffc6 	.word	0x0801ffc6
 800977c:	0801cad4 	.word	0x0801cad4
 8009780:	0801cb08 	.word	0x0801cb08
 8009784:	0801cb18 	.word	0x0801cb18

08009788 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d105      	bne.n	80097a4 <lwip_netconn_is_err_msg+0x1c>
 8009798:	4b12      	ldr	r3, [pc, #72]	; (80097e4 <lwip_netconn_is_err_msg+0x5c>)
 800979a:	2285      	movs	r2, #133	; 0x85
 800979c:	4912      	ldr	r1, [pc, #72]	; (80097e8 <lwip_netconn_is_err_msg+0x60>)
 800979e:	4813      	ldr	r0, [pc, #76]	; (80097ec <lwip_netconn_is_err_msg+0x64>)
 80097a0:	f010 fc94 	bl	801a0cc <iprintf>

  if (msg == &netconn_aborted) {
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4a12      	ldr	r2, [pc, #72]	; (80097f0 <lwip_netconn_is_err_msg+0x68>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d104      	bne.n	80097b6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	22f3      	movs	r2, #243	; 0xf3
 80097b0:	701a      	strb	r2, [r3, #0]
    return 1;
 80097b2:	2301      	movs	r3, #1
 80097b4:	e012      	b.n	80097dc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	4a0e      	ldr	r2, [pc, #56]	; (80097f4 <lwip_netconn_is_err_msg+0x6c>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d104      	bne.n	80097c8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	22f2      	movs	r2, #242	; 0xf2
 80097c2:	701a      	strb	r2, [r3, #0]
    return 1;
 80097c4:	2301      	movs	r3, #1
 80097c6:	e009      	b.n	80097dc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a0b      	ldr	r2, [pc, #44]	; (80097f8 <lwip_netconn_is_err_msg+0x70>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d104      	bne.n	80097da <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	22f1      	movs	r2, #241	; 0xf1
 80097d4:	701a      	strb	r2, [r3, #0]
    return 1;
 80097d6:	2301      	movs	r3, #1
 80097d8:	e000      	b.n	80097dc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	0801cad4 	.word	0x0801cad4
 80097e8:	0801cb40 	.word	0x0801cb40
 80097ec:	0801cb18 	.word	0x0801cb18
 80097f0:	0801ffc4 	.word	0x0801ffc4
 80097f4:	0801ffc5 	.word	0x0801ffc5
 80097f8:	0801ffc6 	.word	0x0801ffc6

080097fc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b088      	sub	sp, #32
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
 8009808:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d105      	bne.n	800981c <recv_udp+0x20>
 8009810:	4b34      	ldr	r3, [pc, #208]	; (80098e4 <recv_udp+0xe8>)
 8009812:	22e5      	movs	r2, #229	; 0xe5
 8009814:	4934      	ldr	r1, [pc, #208]	; (80098e8 <recv_udp+0xec>)
 8009816:	4835      	ldr	r0, [pc, #212]	; (80098ec <recv_udp+0xf0>)
 8009818:	f010 fc58 	bl	801a0cc <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d105      	bne.n	800982e <recv_udp+0x32>
 8009822:	4b30      	ldr	r3, [pc, #192]	; (80098e4 <recv_udp+0xe8>)
 8009824:	22e6      	movs	r2, #230	; 0xe6
 8009826:	4932      	ldr	r1, [pc, #200]	; (80098f0 <recv_udp+0xf4>)
 8009828:	4830      	ldr	r0, [pc, #192]	; (80098ec <recv_udp+0xf0>)
 800982a:	f010 fc4f 	bl	801a0cc <iprintf>
  conn = (struct netconn *)arg;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d103      	bne.n	8009840 <recv_udp+0x44>
    pbuf_free(p);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f003 f9a7 	bl	800cb8c <pbuf_free>
    return;
 800983e:	e04d      	b.n	80098dc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	68ba      	ldr	r2, [r7, #8]
 8009846:	429a      	cmp	r2, r3
 8009848:	d005      	beq.n	8009856 <recv_udp+0x5a>
 800984a:	4b26      	ldr	r3, [pc, #152]	; (80098e4 <recv_udp+0xe8>)
 800984c:	22ee      	movs	r2, #238	; 0xee
 800984e:	4929      	ldr	r1, [pc, #164]	; (80098f4 <recv_udp+0xf8>)
 8009850:	4826      	ldr	r0, [pc, #152]	; (80098ec <recv_udp+0xf0>)
 8009852:	f010 fc3b 	bl	801a0cc <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	3310      	adds	r3, #16
 800985a:	4618      	mov	r0, r3
 800985c:	f00c fc9f 	bl	801619e <sys_mbox_valid>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d103      	bne.n	800986e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f003 f990 	bl	800cb8c <pbuf_free>
    return;
 800986c:	e036      	b.n	80098dc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800986e:	2006      	movs	r0, #6
 8009870:	f002 fa72 	bl	800bd58 <memp_malloc>
 8009874:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d103      	bne.n	8009884 <recv_udp+0x88>
    pbuf_free(p);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f003 f985 	bl	800cb8c <pbuf_free>
    return;
 8009882:	e02b      	b.n	80098dc <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d002      	beq.n	800989c <recv_udp+0xa0>
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	e000      	b.n	800989e <recv_udp+0xa2>
 800989c:	2300      	movs	r3, #0
 800989e:	69ba      	ldr	r2, [r7, #24]
 80098a0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80098a6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	891b      	ldrh	r3, [r3, #8]
 80098ac:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80098ae:	69fb      	ldr	r3, [r7, #28]
 80098b0:	3310      	adds	r3, #16
 80098b2:	69b9      	ldr	r1, [r7, #24]
 80098b4:	4618      	mov	r0, r3
 80098b6:	f00c fbfd 	bl	80160b4 <sys_mbox_trypost>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d003      	beq.n	80098c8 <recv_udp+0xcc>
    netbuf_delete(buf);
 80098c0:	69b8      	ldr	r0, [r7, #24]
 80098c2:	f001 fb07 	bl	800aed4 <netbuf_delete>
    return;
 80098c6:	e009      	b.n	80098dc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d005      	beq.n	80098dc <recv_udp+0xe0>
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d4:	8afa      	ldrh	r2, [r7, #22]
 80098d6:	2100      	movs	r1, #0
 80098d8:	69f8      	ldr	r0, [r7, #28]
 80098da:	4798      	blx	r3
  }
}
 80098dc:	3720      	adds	r7, #32
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	0801cad4 	.word	0x0801cad4
 80098e8:	0801cb4c 	.word	0x0801cb4c
 80098ec:	0801cb18 	.word	0x0801cb18
 80098f0:	0801cb70 	.word	0x0801cb70
 80098f4:	0801cb90 	.word	0x0801cb90

080098f8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b088      	sub	sp, #32
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	607a      	str	r2, [r7, #4]
 8009904:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d106      	bne.n	800991a <recv_tcp+0x22>
 800990c:	4b36      	ldr	r3, [pc, #216]	; (80099e8 <recv_tcp+0xf0>)
 800990e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009912:	4936      	ldr	r1, [pc, #216]	; (80099ec <recv_tcp+0xf4>)
 8009914:	4836      	ldr	r0, [pc, #216]	; (80099f0 <recv_tcp+0xf8>)
 8009916:	f010 fbd9 	bl	801a0cc <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d106      	bne.n	800992e <recv_tcp+0x36>
 8009920:	4b31      	ldr	r3, [pc, #196]	; (80099e8 <recv_tcp+0xf0>)
 8009922:	f240 122d 	movw	r2, #301	; 0x12d
 8009926:	4933      	ldr	r1, [pc, #204]	; (80099f4 <recv_tcp+0xfc>)
 8009928:	4831      	ldr	r0, [pc, #196]	; (80099f0 <recv_tcp+0xf8>)
 800992a:	f010 fbcf 	bl	801a0cc <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800992e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d006      	beq.n	8009944 <recv_tcp+0x4c>
 8009936:	4b2c      	ldr	r3, [pc, #176]	; (80099e8 <recv_tcp+0xf0>)
 8009938:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800993c:	492e      	ldr	r1, [pc, #184]	; (80099f8 <recv_tcp+0x100>)
 800993e:	482c      	ldr	r0, [pc, #176]	; (80099f0 <recv_tcp+0xf8>)
 8009940:	f010 fbc4 	bl	801a0cc <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d102      	bne.n	8009954 <recv_tcp+0x5c>
    return ERR_VAL;
 800994e:	f06f 0305 	mvn.w	r3, #5
 8009952:	e045      	b.n	80099e0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	68ba      	ldr	r2, [r7, #8]
 800995a:	429a      	cmp	r2, r3
 800995c:	d006      	beq.n	800996c <recv_tcp+0x74>
 800995e:	4b22      	ldr	r3, [pc, #136]	; (80099e8 <recv_tcp+0xf0>)
 8009960:	f240 1235 	movw	r2, #309	; 0x135
 8009964:	4925      	ldr	r1, [pc, #148]	; (80099fc <recv_tcp+0x104>)
 8009966:	4822      	ldr	r0, [pc, #136]	; (80099f0 <recv_tcp+0xf8>)
 8009968:	f010 fbb0 	bl	801a0cc <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	3310      	adds	r3, #16
 8009970:	4618      	mov	r0, r3
 8009972:	f00c fc14 	bl	801619e <sys_mbox_valid>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10d      	bne.n	8009998 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d008      	beq.n	8009994 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	891b      	ldrh	r3, [r3, #8]
 8009986:	4619      	mov	r1, r3
 8009988:	68b8      	ldr	r0, [r7, #8]
 800998a:	f004 f8b7 	bl	800dafc <tcp_recved>
      pbuf_free(p);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f003 f8fc 	bl	800cb8c <pbuf_free>
    }
    return ERR_OK;
 8009994:	2300      	movs	r3, #0
 8009996:	e023      	b.n	80099e0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d005      	beq.n	80099aa <recv_tcp+0xb2>
    msg = p;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	891b      	ldrh	r3, [r3, #8]
 80099a6:	83fb      	strh	r3, [r7, #30]
 80099a8:	e003      	b.n	80099b2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80099aa:	4b15      	ldr	r3, [pc, #84]	; (8009a00 <recv_tcp+0x108>)
 80099ac:	61bb      	str	r3, [r7, #24]
    len = 0;
 80099ae:	2300      	movs	r3, #0
 80099b0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	3310      	adds	r3, #16
 80099b6:	69b9      	ldr	r1, [r7, #24]
 80099b8:	4618      	mov	r0, r3
 80099ba:	f00c fb7b 	bl	80160b4 <sys_mbox_trypost>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d002      	beq.n	80099ca <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80099c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099c8:	e00a      	b.n	80099e0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d005      	beq.n	80099de <recv_tcp+0xe6>
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d6:	8bfa      	ldrh	r2, [r7, #30]
 80099d8:	2100      	movs	r1, #0
 80099da:	6978      	ldr	r0, [r7, #20]
 80099dc:	4798      	blx	r3
  }

  return ERR_OK;
 80099de:	2300      	movs	r3, #0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3720      	adds	r7, #32
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	0801cad4 	.word	0x0801cad4
 80099ec:	0801cbb0 	.word	0x0801cbb0
 80099f0:	0801cb18 	.word	0x0801cb18
 80099f4:	0801cbd4 	.word	0x0801cbd4
 80099f8:	0801cbf4 	.word	0x0801cbf4
 80099fc:	0801cc0c 	.word	0x0801cc0c
 8009a00:	0801ffc6 	.word	0x0801ffc6

08009a04 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d106      	bne.n	8009a26 <poll_tcp+0x22>
 8009a18:	4b2a      	ldr	r3, [pc, #168]	; (8009ac4 <poll_tcp+0xc0>)
 8009a1a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8009a1e:	492a      	ldr	r1, [pc, #168]	; (8009ac8 <poll_tcp+0xc4>)
 8009a20:	482a      	ldr	r0, [pc, #168]	; (8009acc <poll_tcp+0xc8>)
 8009a22:	f010 fb53 	bl	801a0cc <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	785b      	ldrb	r3, [r3, #1]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d104      	bne.n	8009a38 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009a2e:	2101      	movs	r1, #1
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f000 ff69 	bl	800a908 <lwip_netconn_do_writemore>
 8009a36:	e016      	b.n	8009a66 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	785b      	ldrb	r3, [r3, #1]
 8009a3c:	2b04      	cmp	r3, #4
 8009a3e:	d112      	bne.n	8009a66 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6a1b      	ldr	r3, [r3, #32]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00a      	beq.n	8009a5e <poll_tcp+0x5a>
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6a1b      	ldr	r3, [r3, #32]
 8009a4c:	7a5b      	ldrb	r3, [r3, #9]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d005      	beq.n	8009a5e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6a1b      	ldr	r3, [r3, #32]
 8009a56:	7a5a      	ldrb	r2, [r3, #9]
 8009a58:	3a01      	subs	r2, #1
 8009a5a:	b2d2      	uxtb	r2, r2
 8009a5c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009a5e:	2101      	movs	r1, #1
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f000 fbfb 	bl	800a25c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	7f1b      	ldrb	r3, [r3, #28]
 8009a6a:	f003 0310 	and.w	r3, r3, #16
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d022      	beq.n	8009ab8 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d01e      	beq.n	8009ab8 <poll_tcp+0xb4>
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009a82:	f240 4231 	movw	r2, #1073	; 0x431
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d916      	bls.n	8009ab8 <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009a92:	2b07      	cmp	r3, #7
 8009a94:	d810      	bhi.n	8009ab8 <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	7f1b      	ldrb	r3, [r3, #28]
 8009a9a:	f023 0310 	bic.w	r3, r3, #16
 8009a9e:	b2da      	uxtb	r2, r3
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d005      	beq.n	8009ab8 <poll_tcp+0xb4>
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	2102      	movs	r1, #2
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	0801cad4 	.word	0x0801cad4
 8009ac8:	0801cc2c 	.word	0x0801cc2c
 8009acc:	0801cb18 	.word	0x0801cb18

08009ad0 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b086      	sub	sp, #24
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	4613      	mov	r3, r2
 8009adc:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d106      	bne.n	8009af6 <sent_tcp+0x26>
 8009ae8:	4b21      	ldr	r3, [pc, #132]	; (8009b70 <sent_tcp+0xa0>)
 8009aea:	f240 1293 	movw	r2, #403	; 0x193
 8009aee:	4921      	ldr	r1, [pc, #132]	; (8009b74 <sent_tcp+0xa4>)
 8009af0:	4821      	ldr	r0, [pc, #132]	; (8009b78 <sent_tcp+0xa8>)
 8009af2:	f010 faeb 	bl	801a0cc <iprintf>

  if (conn) {
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d033      	beq.n	8009b64 <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	785b      	ldrb	r3, [r3, #1]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d104      	bne.n	8009b0e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009b04:	2101      	movs	r1, #1
 8009b06:	6978      	ldr	r0, [r7, #20]
 8009b08:	f000 fefe 	bl	800a908 <lwip_netconn_do_writemore>
 8009b0c:	e007      	b.n	8009b1e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	785b      	ldrb	r3, [r3, #1]
 8009b12:	2b04      	cmp	r3, #4
 8009b14:	d103      	bne.n	8009b1e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009b16:	2101      	movs	r1, #1
 8009b18:	6978      	ldr	r0, [r7, #20]
 8009b1a:	f000 fb9f 	bl	800a25c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d01e      	beq.n	8009b64 <sent_tcp+0x94>
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009b2e:	f240 4231 	movw	r2, #1073	; 0x431
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d916      	bls.n	8009b64 <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009b3e:	2b07      	cmp	r3, #7
 8009b40:	d810      	bhi.n	8009b64 <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	7f1b      	ldrb	r3, [r3, #28]
 8009b46:	f023 0310 	bic.w	r3, r3, #16
 8009b4a:	b2da      	uxtb	r2, r3
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d005      	beq.n	8009b64 <sent_tcp+0x94>
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5c:	88fa      	ldrh	r2, [r7, #6]
 8009b5e:	2102      	movs	r1, #2
 8009b60:	6978      	ldr	r0, [r7, #20]
 8009b62:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3718      	adds	r7, #24
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	0801cad4 	.word	0x0801cad4
 8009b74:	0801cc2c 	.word	0x0801cc2c
 8009b78:	0801cb18 	.word	0x0801cb18

08009b7c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b088      	sub	sp, #32
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	460b      	mov	r3, r1
 8009b86:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d106      	bne.n	8009ba0 <err_tcp+0x24>
 8009b92:	4b5f      	ldr	r3, [pc, #380]	; (8009d10 <err_tcp+0x194>)
 8009b94:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009b98:	495e      	ldr	r1, [pc, #376]	; (8009d14 <err_tcp+0x198>)
 8009b9a:	485f      	ldr	r0, [pc, #380]	; (8009d18 <err_tcp+0x19c>)
 8009b9c:	f010 fa96 	bl	801a0cc <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009ba0:	f00c fc18 	bl	80163d4 <sys_arch_protect>
 8009ba4:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	78fa      	ldrb	r2, [r7, #3]
 8009bb0:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	7f1b      	ldrb	r3, [r3, #28]
 8009bb6:	f043 0301 	orr.w	r3, r3, #1
 8009bba:	b2da      	uxtb	r2, r3
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	785b      	ldrb	r3, [r3, #1]
 8009bc4:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009bcc:	69b8      	ldr	r0, [r7, #24]
 8009bce:	f00c fc0f 	bl	80163f0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d005      	beq.n	8009be6 <err_tcp+0x6a>
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bde:	2200      	movs	r2, #0
 8009be0:	2104      	movs	r1, #4
 8009be2:	69f8      	ldr	r0, [r7, #28]
 8009be4:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d005      	beq.n	8009bfa <err_tcp+0x7e>
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	69f8      	ldr	r0, [r7, #28]
 8009bf8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d005      	beq.n	8009c0e <err_tcp+0x92>
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c06:	2200      	movs	r2, #0
 8009c08:	2102      	movs	r1, #2
 8009c0a:	69f8      	ldr	r0, [r7, #28]
 8009c0c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8009c0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7ff fd82 	bl	800971c <lwip_netconn_err_to_msg>
 8009c18:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	3310      	adds	r3, #16
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f00c fabd 	bl	801619e <sys_mbox_valid>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d005      	beq.n	8009c36 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	3310      	adds	r3, #16
 8009c2e:	6939      	ldr	r1, [r7, #16]
 8009c30:	4618      	mov	r0, r3
 8009c32:	f00c fa3f 	bl	80160b4 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	3314      	adds	r3, #20
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f00c faaf 	bl	801619e <sys_mbox_valid>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d005      	beq.n	8009c52 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	3314      	adds	r3, #20
 8009c4a:	6939      	ldr	r1, [r7, #16]
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f00c fa31 	bl	80160b4 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009c52:	7dfb      	ldrb	r3, [r7, #23]
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d005      	beq.n	8009c64 <err_tcp+0xe8>
 8009c58:	7dfb      	ldrb	r3, [r7, #23]
 8009c5a:	2b04      	cmp	r3, #4
 8009c5c:	d002      	beq.n	8009c64 <err_tcp+0xe8>
 8009c5e:	7dfb      	ldrb	r3, [r7, #23]
 8009c60:	2b03      	cmp	r3, #3
 8009c62:	d143      	bne.n	8009cec <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	7f1b      	ldrb	r3, [r3, #28]
 8009c68:	f003 0304 	and.w	r3, r3, #4
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	bf14      	ite	ne
 8009c70:	2301      	movne	r3, #1
 8009c72:	2300      	moveq	r3, #0
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	7f1b      	ldrb	r3, [r3, #28]
 8009c7c:	f023 0304 	bic.w	r3, r3, #4
 8009c80:	b2da      	uxtb	r2, r3
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d13b      	bne.n	8009d04 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	6a1b      	ldr	r3, [r3, #32]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d106      	bne.n	8009ca2 <err_tcp+0x126>
 8009c94:	4b1e      	ldr	r3, [pc, #120]	; (8009d10 <err_tcp+0x194>)
 8009c96:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009c9a:	4920      	ldr	r1, [pc, #128]	; (8009d1c <err_tcp+0x1a0>)
 8009c9c:	481e      	ldr	r0, [pc, #120]	; (8009d18 <err_tcp+0x19c>)
 8009c9e:	f010 fa15 	bl	801a0cc <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8009ca2:	7dfb      	ldrb	r3, [r7, #23]
 8009ca4:	2b04      	cmp	r3, #4
 8009ca6:	d104      	bne.n	8009cb2 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	6a1b      	ldr	r3, [r3, #32]
 8009cac:	2200      	movs	r2, #0
 8009cae:	711a      	strb	r2, [r3, #4]
 8009cb0:	e003      	b.n	8009cba <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	6a1b      	ldr	r3, [r3, #32]
 8009cb6:	78fa      	ldrb	r2, [r7, #3]
 8009cb8:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009cba:	69fb      	ldr	r3, [r7, #28]
 8009cbc:	6a1b      	ldr	r3, [r3, #32]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	330c      	adds	r3, #12
 8009cc2:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009cc4:	68b8      	ldr	r0, [r7, #8]
 8009cc6:	f00c fafb 	bl	80162c0 <sys_sem_valid>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d106      	bne.n	8009cde <err_tcp+0x162>
 8009cd0:	4b0f      	ldr	r3, [pc, #60]	; (8009d10 <err_tcp+0x194>)
 8009cd2:	f240 12ef 	movw	r2, #495	; 0x1ef
 8009cd6:	4912      	ldr	r1, [pc, #72]	; (8009d20 <err_tcp+0x1a4>)
 8009cd8:	480f      	ldr	r0, [pc, #60]	; (8009d18 <err_tcp+0x19c>)
 8009cda:	f010 f9f7 	bl	801a0cc <iprintf>
      conn->current_msg = NULL;
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8009ce4:	68b8      	ldr	r0, [r7, #8]
 8009ce6:	f00c fad1 	bl	801628c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009cea:	e00b      	b.n	8009d04 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	6a1b      	ldr	r3, [r3, #32]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d008      	beq.n	8009d06 <err_tcp+0x18a>
 8009cf4:	4b06      	ldr	r3, [pc, #24]	; (8009d10 <err_tcp+0x194>)
 8009cf6:	f240 12f7 	movw	r2, #503	; 0x1f7
 8009cfa:	490a      	ldr	r1, [pc, #40]	; (8009d24 <err_tcp+0x1a8>)
 8009cfc:	4806      	ldr	r0, [pc, #24]	; (8009d18 <err_tcp+0x19c>)
 8009cfe:	f010 f9e5 	bl	801a0cc <iprintf>
  }
}
 8009d02:	e000      	b.n	8009d06 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8009d04:	bf00      	nop
}
 8009d06:	bf00      	nop
 8009d08:	3720      	adds	r7, #32
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	0801cad4 	.word	0x0801cad4
 8009d14:	0801cc2c 	.word	0x0801cc2c
 8009d18:	0801cb18 	.word	0x0801cb18
 8009d1c:	0801cc3c 	.word	0x0801cc3c
 8009d20:	0801cc58 	.word	0x0801cc58
 8009d24:	0801cc74 	.word	0x0801cc74

08009d28 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8009d36:	6879      	ldr	r1, [r7, #4]
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f004 fda5 	bl	800e888 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8009d3e:	490a      	ldr	r1, [pc, #40]	; (8009d68 <setup_tcp+0x40>)
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f004 fdb3 	bl	800e8ac <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8009d46:	4909      	ldr	r1, [pc, #36]	; (8009d6c <setup_tcp+0x44>)
 8009d48:	68f8      	ldr	r0, [r7, #12]
 8009d4a:	f004 fdd1 	bl	800e8f0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8009d4e:	2202      	movs	r2, #2
 8009d50:	4907      	ldr	r1, [pc, #28]	; (8009d70 <setup_tcp+0x48>)
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	f004 fe28 	bl	800e9a8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009d58:	4906      	ldr	r1, [pc, #24]	; (8009d74 <setup_tcp+0x4c>)
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f004 fdea 	bl	800e934 <tcp_err>
}
 8009d60:	bf00      	nop
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	080098f9 	.word	0x080098f9
 8009d6c:	08009ad1 	.word	0x08009ad1
 8009d70:	08009a05 	.word	0x08009a05
 8009d74:	08009b7d 	.word	0x08009b7d

08009d78 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8009d78:	b590      	push	{r4, r7, lr}
 8009d7a:	b089      	sub	sp, #36	; 0x24
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	4613      	mov	r3, r2
 8009d84:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d102      	bne.n	8009d96 <accept_function+0x1e>
    return ERR_VAL;
 8009d90:	f06f 0305 	mvn.w	r3, #5
 8009d94:	e0a1      	b.n	8009eda <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	3314      	adds	r3, #20
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f00c f9ff 	bl	801619e <sys_mbox_valid>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d102      	bne.n	8009dac <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8009da6:	f06f 0305 	mvn.w	r3, #5
 8009daa:	e096      	b.n	8009eda <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d11b      	bne.n	8009dea <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	f103 0414 	add.w	r4, r3, #20
 8009db8:	f06f 000c 	mvn.w	r0, #12
 8009dbc:	f7ff fcae 	bl	800971c <lwip_netconn_err_to_msg>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f00c f975 	bl	80160b4 <sys_mbox_trypost>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d109      	bne.n	8009de4 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d005      	beq.n	8009de4 <accept_function+0x6c>
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ddc:	2200      	movs	r2, #0
 8009dde:	2100      	movs	r1, #0
 8009de0:	69f8      	ldr	r0, [r7, #28]
 8009de2:	4798      	blx	r3
    }
    return ERR_VAL;
 8009de4:	f06f 0305 	mvn.w	r3, #5
 8009de8:	e077      	b.n	8009eda <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8009dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d006      	beq.n	8009e00 <accept_function+0x88>
 8009df2:	4b3c      	ldr	r3, [pc, #240]	; (8009ee4 <accept_function+0x16c>)
 8009df4:	f240 222a 	movw	r2, #554	; 0x22a
 8009df8:	493b      	ldr	r1, [pc, #236]	; (8009ee8 <accept_function+0x170>)
 8009dfa:	483c      	ldr	r0, [pc, #240]	; (8009eec <accept_function+0x174>)
 8009dfc:	f010 f966 	bl	801a0cc <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	781a      	ldrb	r2, [r3, #0]
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e08:	4619      	mov	r1, r3
 8009e0a:	4610      	mov	r0, r2
 8009e0c:	f000 f8f0 	bl	8009ff0 <netconn_alloc>
 8009e10:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d11b      	bne.n	8009e50 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	f103 0414 	add.w	r4, r3, #20
 8009e1e:	f06f 000c 	mvn.w	r0, #12
 8009e22:	f7ff fc7b 	bl	800971c <lwip_netconn_err_to_msg>
 8009e26:	4603      	mov	r3, r0
 8009e28:	4619      	mov	r1, r3
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	f00c f942 	bl	80160b4 <sys_mbox_trypost>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d109      	bne.n	8009e4a <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d005      	beq.n	8009e4a <accept_function+0xd2>
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e42:	2200      	movs	r2, #0
 8009e44:	2100      	movs	r1, #0
 8009e46:	69f8      	ldr	r0, [r7, #28]
 8009e48:	4798      	blx	r3
    }
    return ERR_MEM;
 8009e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e4e:	e044      	b.n	8009eda <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	68ba      	ldr	r2, [r7, #8]
 8009e54:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8009e56:	69b8      	ldr	r0, [r7, #24]
 8009e58:	f7ff ff66 	bl	8009d28 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009e5c:	69fb      	ldr	r3, [r7, #28]
 8009e5e:	3314      	adds	r3, #20
 8009e60:	69b9      	ldr	r1, [r7, #24]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f00c f926 	bl	80160b4 <sys_mbox_trypost>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d02a      	beq.n	8009ec4 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8009e74:	2100      	movs	r1, #0
 8009e76:	6978      	ldr	r0, [r7, #20]
 8009e78:	f004 fd06 	bl	800e888 <tcp_arg>
    tcp_recv(pcb, NULL);
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	6978      	ldr	r0, [r7, #20]
 8009e80:	f004 fd14 	bl	800e8ac <tcp_recv>
    tcp_sent(pcb, NULL);
 8009e84:	2100      	movs	r1, #0
 8009e86:	6978      	ldr	r0, [r7, #20]
 8009e88:	f004 fd32 	bl	800e8f0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	2100      	movs	r1, #0
 8009e90:	6978      	ldr	r0, [r7, #20]
 8009e92:	f004 fd89 	bl	800e9a8 <tcp_poll>
    tcp_err(pcb, NULL);
 8009e96:	2100      	movs	r1, #0
 8009e98:	6978      	ldr	r0, [r7, #20]
 8009e9a:	f004 fd4b 	bl	800e934 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	3310      	adds	r3, #16
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f00c f8f1 	bl	8016090 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	3310      	adds	r3, #16
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f00c f984 	bl	80161c0 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009eb8:	69b8      	ldr	r0, [r7, #24]
 8009eba:	f000 f907 	bl	800a0cc <netconn_free>
    return ERR_MEM;
 8009ebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ec2:	e00a      	b.n	8009eda <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d005      	beq.n	8009ed8 <accept_function+0x160>
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	2100      	movs	r1, #0
 8009ed4:	69f8      	ldr	r0, [r7, #28]
 8009ed6:	4798      	blx	r3
  }

  return ERR_OK;
 8009ed8:	2300      	movs	r3, #0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3724      	adds	r7, #36	; 0x24
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd90      	pop	{r4, r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	0801cad4 	.word	0x0801cad4
 8009ee8:	0801cc90 	.word	0x0801cc90
 8009eec:	0801cb18 	.word	0x0801cb18

08009ef0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009ef0:	b590      	push	{r4, r7, lr}
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d006      	beq.n	8009f14 <pcb_new+0x24>
 8009f06:	4b2b      	ldr	r3, [pc, #172]	; (8009fb4 <pcb_new+0xc4>)
 8009f08:	f240 2265 	movw	r2, #613	; 0x265
 8009f0c:	492a      	ldr	r1, [pc, #168]	; (8009fb8 <pcb_new+0xc8>)
 8009f0e:	482b      	ldr	r0, [pc, #172]	; (8009fbc <pcb_new+0xcc>)
 8009f10:	f010 f8dc 	bl	801a0cc <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f1e:	2b10      	cmp	r3, #16
 8009f20:	d022      	beq.n	8009f68 <pcb_new+0x78>
 8009f22:	2b20      	cmp	r3, #32
 8009f24:	d133      	bne.n	8009f8e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681c      	ldr	r4, [r3, #0]
 8009f2a:	7bfb      	ldrb	r3, [r7, #15]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f009 fd8a 	bl	8013a46 <udp_new_ip_type>
 8009f32:	4603      	mov	r3, r0
 8009f34:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d02a      	beq.n	8009f96 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	2b22      	cmp	r3, #34	; 0x22
 8009f48:	d104      	bne.n	8009f54 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	2201      	movs	r2, #1
 8009f52:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6858      	ldr	r0, [r3, #4]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	461a      	mov	r2, r3
 8009f60:	4917      	ldr	r1, [pc, #92]	; (8009fc0 <pcb_new+0xd0>)
 8009f62:	f009 fcf7 	bl	8013954 <udp_recv>
      }
      break;
 8009f66:	e016      	b.n	8009f96 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681c      	ldr	r4, [r3, #0]
 8009f6c:	7bfb      	ldrb	r3, [r7, #15]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f004 fc7c 	bl	800e86c <tcp_new_ip_type>
 8009f74:	4603      	mov	r3, r0
 8009f76:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00b      	beq.n	8009f9a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7ff fece 	bl	8009d28 <setup_tcp>
      }
      break;
 8009f8c:	e005      	b.n	8009f9a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	22fa      	movs	r2, #250	; 0xfa
 8009f92:	711a      	strb	r2, [r3, #4]
      return;
 8009f94:	e00a      	b.n	8009fac <pcb_new+0xbc>
      break;
 8009f96:	bf00      	nop
 8009f98:	e000      	b.n	8009f9c <pcb_new+0xac>
      break;
 8009f9a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d102      	bne.n	8009fac <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	22ff      	movs	r2, #255	; 0xff
 8009faa:	711a      	strb	r2, [r3, #4]
  }
}
 8009fac:	3714      	adds	r7, #20
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd90      	pop	{r4, r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	0801cad4 	.word	0x0801cad4
 8009fb8:	0801ccb8 	.word	0x0801ccb8
 8009fbc:	0801cb18 	.word	0x0801cb18
 8009fc0:	080097fd 	.word	0x080097fd

08009fc4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d102      	bne.n	8009fe6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f7ff ff85 	bl	8009ef0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8009fe6:	bf00      	nop
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
	...

08009ff0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b086      	sub	sp, #24
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	6039      	str	r1, [r7, #0]
 8009ffa:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a000:	2007      	movs	r0, #7
 800a002:	f001 fea9 	bl	800bd58 <memp_malloc>
 800a006:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d101      	bne.n	800a012 <netconn_alloc+0x22>
    return NULL;
 800a00e:	2300      	movs	r3, #0
 800a010:	e052      	b.n	800a0b8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2200      	movs	r2, #0
 800a016:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	79fa      	ldrb	r2, [r7, #7]
 800a01c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2200      	movs	r2, #0
 800a022:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a024:	79fb      	ldrb	r3, [r7, #7]
 800a026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a02a:	2b10      	cmp	r3, #16
 800a02c:	d004      	beq.n	800a038 <netconn_alloc+0x48>
 800a02e:	2b20      	cmp	r3, #32
 800a030:	d105      	bne.n	800a03e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a032:	2306      	movs	r3, #6
 800a034:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a036:	e00a      	b.n	800a04e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a038:	2306      	movs	r3, #6
 800a03a:	617b      	str	r3, [r7, #20]
      break;
 800a03c:	e007      	b.n	800a04e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a03e:	4b20      	ldr	r3, [pc, #128]	; (800a0c0 <netconn_alloc+0xd0>)
 800a040:	f240 22e5 	movw	r2, #741	; 0x2e5
 800a044:	491f      	ldr	r1, [pc, #124]	; (800a0c4 <netconn_alloc+0xd4>)
 800a046:	4820      	ldr	r0, [pc, #128]	; (800a0c8 <netconn_alloc+0xd8>)
 800a048:	f010 f840 	bl	801a0cc <iprintf>
      goto free_and_return;
 800a04c:	e02f      	b.n	800a0ae <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	3310      	adds	r3, #16
 800a052:	6979      	ldr	r1, [r7, #20]
 800a054:	4618      	mov	r0, r3
 800a056:	f00b fff9 	bl	801604c <sys_mbox_new>
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d125      	bne.n	800a0ac <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	330c      	adds	r3, #12
 800a064:	2100      	movs	r1, #0
 800a066:	4618      	mov	r0, r3
 800a068:	f00c f8b7 	bl	80161da <sys_sem_new>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d005      	beq.n	800a07e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	3310      	adds	r3, #16
 800a076:	4618      	mov	r0, r3
 800a078:	f00c f80a 	bl	8016090 <sys_mbox_free>
    goto free_and_return;
 800a07c:	e017      	b.n	800a0ae <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	3314      	adds	r3, #20
 800a082:	4618      	mov	r0, r3
 800a084:	f00c f89c 	bl	80161c0 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a094:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	683a      	ldr	r2, [r7, #0]
 800a09a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	7cfa      	ldrb	r2, [r7, #19]
 800a0a6:	771a      	strb	r2, [r3, #28]
  return conn;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	e005      	b.n	800a0b8 <netconn_alloc+0xc8>
    goto free_and_return;
 800a0ac:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a0ae:	68f9      	ldr	r1, [r7, #12]
 800a0b0:	2007      	movs	r0, #7
 800a0b2:	f001 fec7 	bl	800be44 <memp_free>
  return NULL;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3718      	adds	r7, #24
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	0801cad4 	.word	0x0801cad4
 800a0c4:	0801ccd8 	.word	0x0801ccd8
 800a0c8:	0801cb18 	.word	0x0801cb18

0800a0cc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d006      	beq.n	800a0ea <netconn_free+0x1e>
 800a0dc:	4b1b      	ldr	r3, [pc, #108]	; (800a14c <netconn_free+0x80>)
 800a0de:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a0e2:	491b      	ldr	r1, [pc, #108]	; (800a150 <netconn_free+0x84>)
 800a0e4:	481b      	ldr	r0, [pc, #108]	; (800a154 <netconn_free+0x88>)
 800a0e6:	f00f fff1 	bl	801a0cc <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	3310      	adds	r3, #16
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f00c f855 	bl	801619e <sys_mbox_valid>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d006      	beq.n	800a108 <netconn_free+0x3c>
 800a0fa:	4b14      	ldr	r3, [pc, #80]	; (800a14c <netconn_free+0x80>)
 800a0fc:	f240 3223 	movw	r2, #803	; 0x323
 800a100:	4915      	ldr	r1, [pc, #84]	; (800a158 <netconn_free+0x8c>)
 800a102:	4814      	ldr	r0, [pc, #80]	; (800a154 <netconn_free+0x88>)
 800a104:	f00f ffe2 	bl	801a0cc <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	3314      	adds	r3, #20
 800a10c:	4618      	mov	r0, r3
 800a10e:	f00c f846 	bl	801619e <sys_mbox_valid>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d006      	beq.n	800a126 <netconn_free+0x5a>
 800a118:	4b0c      	ldr	r3, [pc, #48]	; (800a14c <netconn_free+0x80>)
 800a11a:	f240 3226 	movw	r2, #806	; 0x326
 800a11e:	490f      	ldr	r1, [pc, #60]	; (800a15c <netconn_free+0x90>)
 800a120:	480c      	ldr	r0, [pc, #48]	; (800a154 <netconn_free+0x88>)
 800a122:	f00f ffd3 	bl	801a0cc <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	330c      	adds	r3, #12
 800a12a:	4618      	mov	r0, r3
 800a12c:	f00c f8bb 	bl	80162a6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	330c      	adds	r3, #12
 800a134:	4618      	mov	r0, r3
 800a136:	f00c f8d4 	bl	80162e2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a13a:	6879      	ldr	r1, [r7, #4]
 800a13c:	2007      	movs	r0, #7
 800a13e:	f001 fe81 	bl	800be44 <memp_free>
}
 800a142:	bf00      	nop
 800a144:	3708      	adds	r7, #8
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	0801cad4 	.word	0x0801cad4
 800a150:	0801cd00 	.word	0x0801cd00
 800a154:	0801cb18 	.word	0x0801cb18
 800a158:	0801cd30 	.word	0x0801cd30
 800a15c:	0801cd6c 	.word	0x0801cd6c

0800a160 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	3310      	adds	r3, #16
 800a16c:	4618      	mov	r0, r3
 800a16e:	f00c f816 	bl	801619e <sys_mbox_valid>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d02f      	beq.n	800a1d8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a178:	e018      	b.n	800a1ac <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a182:	2b10      	cmp	r3, #16
 800a184:	d10e      	bne.n	800a1a4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	f107 020f 	add.w	r2, r7, #15
 800a18c:	4611      	mov	r1, r2
 800a18e:	4618      	mov	r0, r3
 800a190:	f7ff fafa 	bl	8009788 <lwip_netconn_is_err_msg>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d108      	bne.n	800a1ac <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	4618      	mov	r0, r3
 800a19e:	f002 fcf5 	bl	800cb8c <pbuf_free>
 800a1a2:	e003      	b.n	800a1ac <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f000 fe94 	bl	800aed4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	3310      	adds	r3, #16
 800a1b0:	f107 0210 	add.w	r2, r7, #16
 800a1b4:	4611      	mov	r1, r2
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f00b ffd5 	bl	8016166 <sys_arch_mbox_tryfetch>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1c2:	d1da      	bne.n	800a17a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	3310      	adds	r3, #16
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f00b ff61 	bl	8016090 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	3310      	adds	r3, #16
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f00b fff4 	bl	80161c0 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	3314      	adds	r3, #20
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f00b ffde 	bl	801619e <sys_mbox_valid>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d034      	beq.n	800a252 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a1e8:	e01d      	b.n	800a226 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	f107 020e 	add.w	r2, r7, #14
 800a1f0:	4611      	mov	r1, r2
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7ff fac8 	bl	8009788 <lwip_netconn_is_err_msg>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d113      	bne.n	800a226 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a202:	6978      	ldr	r0, [r7, #20]
 800a204:	f7ff ffac 	bl	800a160 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d007      	beq.n	800a220 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	4618      	mov	r0, r3
 800a216:	f003 faa9 	bl	800d76c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	2200      	movs	r2, #0
 800a21e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a220:	6978      	ldr	r0, [r7, #20]
 800a222:	f7ff ff53 	bl	800a0cc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	3314      	adds	r3, #20
 800a22a:	f107 0210 	add.w	r2, r7, #16
 800a22e:	4611      	mov	r1, r2
 800a230:	4618      	mov	r0, r3
 800a232:	f00b ff98 	bl	8016166 <sys_arch_mbox_tryfetch>
 800a236:	4603      	mov	r3, r0
 800a238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a23c:	d1d5      	bne.n	800a1ea <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	3314      	adds	r3, #20
 800a242:	4618      	mov	r0, r3
 800a244:	f00b ff24 	bl	8016090 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	3314      	adds	r3, #20
 800a24c:	4618      	mov	r0, r3
 800a24e:	f00b ffb7 	bl	80161c0 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a252:	bf00      	nop
 800a254:	3718      	adds	r7, #24
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
	...

0800a25c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b086      	sub	sp, #24
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	460b      	mov	r3, r1
 800a266:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a268:	2300      	movs	r3, #0
 800a26a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d106      	bne.n	800a280 <lwip_netconn_do_close_internal+0x24>
 800a272:	4b87      	ldr	r3, [pc, #540]	; (800a490 <lwip_netconn_do_close_internal+0x234>)
 800a274:	f240 32a2 	movw	r2, #930	; 0x3a2
 800a278:	4986      	ldr	r1, [pc, #536]	; (800a494 <lwip_netconn_do_close_internal+0x238>)
 800a27a:	4887      	ldr	r0, [pc, #540]	; (800a498 <lwip_netconn_do_close_internal+0x23c>)
 800a27c:	f00f ff26 	bl	801a0cc <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a288:	2b10      	cmp	r3, #16
 800a28a:	d006      	beq.n	800a29a <lwip_netconn_do_close_internal+0x3e>
 800a28c:	4b80      	ldr	r3, [pc, #512]	; (800a490 <lwip_netconn_do_close_internal+0x234>)
 800a28e:	f240 32a3 	movw	r2, #931	; 0x3a3
 800a292:	4982      	ldr	r1, [pc, #520]	; (800a49c <lwip_netconn_do_close_internal+0x240>)
 800a294:	4880      	ldr	r0, [pc, #512]	; (800a498 <lwip_netconn_do_close_internal+0x23c>)
 800a296:	f00f ff19 	bl	801a0cc <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	785b      	ldrb	r3, [r3, #1]
 800a29e:	2b04      	cmp	r3, #4
 800a2a0:	d006      	beq.n	800a2b0 <lwip_netconn_do_close_internal+0x54>
 800a2a2:	4b7b      	ldr	r3, [pc, #492]	; (800a490 <lwip_netconn_do_close_internal+0x234>)
 800a2a4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800a2a8:	497d      	ldr	r1, [pc, #500]	; (800a4a0 <lwip_netconn_do_close_internal+0x244>)
 800a2aa:	487b      	ldr	r0, [pc, #492]	; (800a498 <lwip_netconn_do_close_internal+0x23c>)
 800a2ac:	f00f ff0e 	bl	801a0cc <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d106      	bne.n	800a2c6 <lwip_netconn_do_close_internal+0x6a>
 800a2b8:	4b75      	ldr	r3, [pc, #468]	; (800a490 <lwip_netconn_do_close_internal+0x234>)
 800a2ba:	f240 32a5 	movw	r2, #933	; 0x3a5
 800a2be:	4979      	ldr	r1, [pc, #484]	; (800a4a4 <lwip_netconn_do_close_internal+0x248>)
 800a2c0:	4875      	ldr	r0, [pc, #468]	; (800a498 <lwip_netconn_do_close_internal+0x23c>)
 800a2c2:	f00f ff03 	bl	801a0cc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6a1b      	ldr	r3, [r3, #32]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d106      	bne.n	800a2dc <lwip_netconn_do_close_internal+0x80>
 800a2ce:	4b70      	ldr	r3, [pc, #448]	; (800a490 <lwip_netconn_do_close_internal+0x234>)
 800a2d0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a2d4:	4974      	ldr	r1, [pc, #464]	; (800a4a8 <lwip_netconn_do_close_internal+0x24c>)
 800a2d6:	4870      	ldr	r0, [pc, #448]	; (800a498 <lwip_netconn_do_close_internal+0x23c>)
 800a2d8:	f00f fef8 	bl	801a0cc <iprintf>

  tpcb = conn->pcb.tcp;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a1b      	ldr	r3, [r3, #32]
 800a2e6:	7a1b      	ldrb	r3, [r3, #8]
 800a2e8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a2ea:	7bfb      	ldrb	r3, [r7, #15]
 800a2ec:	f003 0301 	and.w	r3, r3, #1
 800a2f0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a2f2:	7bfb      	ldrb	r3, [r7, #15]
 800a2f4:	f003 0302 	and.w	r3, r3, #2
 800a2f8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a2fa:	7bfb      	ldrb	r3, [r7, #15]
 800a2fc:	2b03      	cmp	r3, #3
 800a2fe:	d102      	bne.n	800a306 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a300:	2301      	movs	r3, #1
 800a302:	75bb      	strb	r3, [r7, #22]
 800a304:	e01f      	b.n	800a346 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a306:	7bbb      	ldrb	r3, [r7, #14]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d00e      	beq.n	800a32a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a310:	2b05      	cmp	r3, #5
 800a312:	d007      	beq.n	800a324 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a318:	2b06      	cmp	r3, #6
 800a31a:	d003      	beq.n	800a324 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a320:	2b08      	cmp	r3, #8
 800a322:	d102      	bne.n	800a32a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a324:	2301      	movs	r3, #1
 800a326:	75bb      	strb	r3, [r7, #22]
 800a328:	e00d      	b.n	800a346 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a32a:	7b7b      	ldrb	r3, [r7, #13]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d008      	beq.n	800a342 <lwip_netconn_do_close_internal+0xe6>
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	8b5b      	ldrh	r3, [r3, #26]
 800a334:	f003 0310 	and.w	r3, r3, #16
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d002      	beq.n	800a342 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a33c:	2301      	movs	r3, #1
 800a33e:	75bb      	strb	r3, [r7, #22]
 800a340:	e001      	b.n	800a346 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a342:	2300      	movs	r3, #0
 800a344:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a346:	7dbb      	ldrb	r3, [r7, #22]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d003      	beq.n	800a354 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a34c:	2100      	movs	r1, #0
 800a34e:	6938      	ldr	r0, [r7, #16]
 800a350:	f004 fa9a 	bl	800e888 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	7d1b      	ldrb	r3, [r3, #20]
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d104      	bne.n	800a366 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a35c:	2100      	movs	r1, #0
 800a35e:	6938      	ldr	r0, [r7, #16]
 800a360:	f004 fb0a 	bl	800e978 <tcp_accept>
 800a364:	e01d      	b.n	800a3a2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a366:	7bbb      	ldrb	r3, [r7, #14]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d007      	beq.n	800a37c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a36c:	2100      	movs	r1, #0
 800a36e:	6938      	ldr	r0, [r7, #16]
 800a370:	f004 fa9c 	bl	800e8ac <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a374:	2100      	movs	r1, #0
 800a376:	6938      	ldr	r0, [r7, #16]
 800a378:	f004 fafe 	bl	800e978 <tcp_accept>
    }
    if (shut_tx) {
 800a37c:	7b7b      	ldrb	r3, [r7, #13]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d003      	beq.n	800a38a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a382:	2100      	movs	r1, #0
 800a384:	6938      	ldr	r0, [r7, #16]
 800a386:	f004 fab3 	bl	800e8f0 <tcp_sent>
    }
    if (shut_close) {
 800a38a:	7dbb      	ldrb	r3, [r7, #22]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d008      	beq.n	800a3a2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a390:	2200      	movs	r2, #0
 800a392:	2100      	movs	r1, #0
 800a394:	6938      	ldr	r0, [r7, #16]
 800a396:	f004 fb07 	bl	800e9a8 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a39a:	2100      	movs	r1, #0
 800a39c:	6938      	ldr	r0, [r7, #16]
 800a39e:	f004 fac9 	bl	800e934 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a3a2:	7dbb      	ldrb	r3, [r7, #22]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d005      	beq.n	800a3b4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a3a8:	6938      	ldr	r0, [r7, #16]
 800a3aa:	f003 f899 	bl	800d4e0 <tcp_close>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	75fb      	strb	r3, [r7, #23]
 800a3b2:	e007      	b.n	800a3c4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a3b4:	7bbb      	ldrb	r3, [r7, #14]
 800a3b6:	7b7a      	ldrb	r2, [r7, #13]
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	6938      	ldr	r0, [r7, #16]
 800a3bc:	f003 f8bc 	bl	800d538 <tcp_shutdown>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a3c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d102      	bne.n	800a3d2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	757b      	strb	r3, [r7, #21]
 800a3d0:	e016      	b.n	800a400 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a3d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3da:	d10f      	bne.n	800a3fc <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6a1b      	ldr	r3, [r3, #32]
 800a3e0:	7a5b      	ldrb	r3, [r3, #9]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d10c      	bne.n	800a400 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a3ea:	7dbb      	ldrb	r3, [r7, #22]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d007      	beq.n	800a400 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a3f0:	6938      	ldr	r0, [r7, #16]
 800a3f2:	f003 f9bb 	bl	800d76c <tcp_abort>
          err = ERR_OK;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	75fb      	strb	r3, [r7, #23]
 800a3fa:	e001      	b.n	800a400 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a400:	7d7b      	ldrb	r3, [r7, #21]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d052      	beq.n	800a4ac <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	330c      	adds	r3, #12
 800a40e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a1b      	ldr	r3, [r3, #32]
 800a414:	7dfa      	ldrb	r2, [r7, #23]
 800a416:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a424:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d129      	bne.n	800a480 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a42c:	7dbb      	ldrb	r3, [r7, #22]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d00c      	beq.n	800a44c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d005      	beq.n	800a44c <lwip_netconn_do_close_internal+0x1f0>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a444:	2200      	movs	r2, #0
 800a446:	2104      	movs	r1, #4
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	4798      	blx	r3
      }
      if (shut_rx) {
 800a44c:	7bbb      	ldrb	r3, [r7, #14]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d009      	beq.n	800a466 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a456:	2b00      	cmp	r3, #0
 800a458:	d005      	beq.n	800a466 <lwip_netconn_do_close_internal+0x20a>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45e:	2200      	movs	r2, #0
 800a460:	2100      	movs	r1, #0
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	4798      	blx	r3
      }
      if (shut_tx) {
 800a466:	7b7b      	ldrb	r3, [r7, #13]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d009      	beq.n	800a480 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a470:	2b00      	cmp	r3, #0
 800a472:	d005      	beq.n	800a480 <lwip_netconn_do_close_internal+0x224>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a478:	2200      	movs	r2, #0
 800a47a:	2102      	movs	r1, #2
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a480:	78fb      	ldrb	r3, [r7, #3]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d002      	beq.n	800a48c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a486:	68b8      	ldr	r0, [r7, #8]
 800a488:	f00b ff00 	bl	801628c <sys_sem_signal>
    }
    return ERR_OK;
 800a48c:	2300      	movs	r3, #0
 800a48e:	e03c      	b.n	800a50a <lwip_netconn_do_close_internal+0x2ae>
 800a490:	0801cad4 	.word	0x0801cad4
 800a494:	0801cda8 	.word	0x0801cda8
 800a498:	0801cb18 	.word	0x0801cb18
 800a49c:	0801cdb8 	.word	0x0801cdb8
 800a4a0:	0801cdd8 	.word	0x0801cdd8
 800a4a4:	0801cdfc 	.word	0x0801cdfc
 800a4a8:	0801cc3c 	.word	0x0801cc3c
  }
  if (!close_finished) {
 800a4ac:	7d7b      	ldrb	r3, [r7, #21]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d11e      	bne.n	800a4f0 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	7d1b      	ldrb	r3, [r3, #20]
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d106      	bne.n	800a4c8 <lwip_netconn_do_close_internal+0x26c>
 800a4ba:	4b16      	ldr	r3, [pc, #88]	; (800a514 <lwip_netconn_do_close_internal+0x2b8>)
 800a4bc:	f240 4241 	movw	r2, #1089	; 0x441
 800a4c0:	4915      	ldr	r1, [pc, #84]	; (800a518 <lwip_netconn_do_close_internal+0x2bc>)
 800a4c2:	4816      	ldr	r0, [pc, #88]	; (800a51c <lwip_netconn_do_close_internal+0x2c0>)
 800a4c4:	f00f fe02 	bl	801a0cc <iprintf>
    if (shut_tx) {
 800a4c8:	7b7b      	ldrb	r3, [r7, #13]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d003      	beq.n	800a4d6 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800a4ce:	4914      	ldr	r1, [pc, #80]	; (800a520 <lwip_netconn_do_close_internal+0x2c4>)
 800a4d0:	6938      	ldr	r0, [r7, #16]
 800a4d2:	f004 fa0d 	bl	800e8f0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	4912      	ldr	r1, [pc, #72]	; (800a524 <lwip_netconn_do_close_internal+0x2c8>)
 800a4da:	6938      	ldr	r0, [r7, #16]
 800a4dc:	f004 fa64 	bl	800e9a8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a4e0:	4911      	ldr	r1, [pc, #68]	; (800a528 <lwip_netconn_do_close_internal+0x2cc>)
 800a4e2:	6938      	ldr	r0, [r7, #16]
 800a4e4:	f004 fa26 	bl	800e934 <tcp_err>
    tcp_arg(tpcb, conn);
 800a4e8:	6879      	ldr	r1, [r7, #4]
 800a4ea:	6938      	ldr	r0, [r7, #16]
 800a4ec:	f004 f9cc 	bl	800e888 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a4f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d106      	bne.n	800a506 <lwip_netconn_do_close_internal+0x2aa>
 800a4f8:	4b06      	ldr	r3, [pc, #24]	; (800a514 <lwip_netconn_do_close_internal+0x2b8>)
 800a4fa:	f240 424d 	movw	r2, #1101	; 0x44d
 800a4fe:	490b      	ldr	r1, [pc, #44]	; (800a52c <lwip_netconn_do_close_internal+0x2d0>)
 800a500:	4806      	ldr	r0, [pc, #24]	; (800a51c <lwip_netconn_do_close_internal+0x2c0>)
 800a502:	f00f fde3 	bl	801a0cc <iprintf>
  return err;
 800a506:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3718      	adds	r7, #24
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	0801cad4 	.word	0x0801cad4
 800a518:	0801ce10 	.word	0x0801ce10
 800a51c:	0801cb18 	.word	0x0801cb18
 800a520:	08009ad1 	.word	0x08009ad1
 800a524:	08009a05 	.word	0x08009a05
 800a528:	08009b7d 	.word	0x08009b7d
 800a52c:	0801ce34 	.word	0x0801ce34

0800a530 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	785b      	ldrb	r3, [r3, #1]
 800a542:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a544:	7afb      	ldrb	r3, [r7, #11]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00d      	beq.n	800a566 <lwip_netconn_do_delconn+0x36>
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a554:	2b10      	cmp	r3, #16
 800a556:	d006      	beq.n	800a566 <lwip_netconn_do_delconn+0x36>
 800a558:	4b60      	ldr	r3, [pc, #384]	; (800a6dc <lwip_netconn_do_delconn+0x1ac>)
 800a55a:	f240 425e 	movw	r2, #1118	; 0x45e
 800a55e:	4960      	ldr	r1, [pc, #384]	; (800a6e0 <lwip_netconn_do_delconn+0x1b0>)
 800a560:	4860      	ldr	r0, [pc, #384]	; (800a6e4 <lwip_netconn_do_delconn+0x1b4>)
 800a562:	f00f fdb3 	bl	801a0cc <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a566:	7afb      	ldrb	r3, [r7, #11]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d005      	beq.n	800a578 <lwip_netconn_do_delconn+0x48>
 800a56c:	7afb      	ldrb	r3, [r7, #11]
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d002      	beq.n	800a578 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a572:	7afb      	ldrb	r3, [r7, #11]
 800a574:	2b03      	cmp	r3, #3
 800a576:	d109      	bne.n	800a58c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800a578:	7afb      	ldrb	r3, [r7, #11]
 800a57a:	2b03      	cmp	r3, #3
 800a57c:	d10a      	bne.n	800a594 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	7f1b      	ldrb	r3, [r3, #28]
 800a584:	f003 0304 	and.w	r3, r3, #4
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d103      	bne.n	800a594 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	22fb      	movs	r2, #251	; 0xfb
 800a590:	711a      	strb	r2, [r3, #4]
 800a592:	e097      	b.n	800a6c4 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a594:	7afb      	ldrb	r3, [r7, #11]
 800a596:	2b03      	cmp	r3, #3
 800a598:	d10d      	bne.n	800a5b6 <lwip_netconn_do_delconn+0x86>
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	7f1b      	ldrb	r3, [r3, #28]
 800a5a0:	f003 0304 	and.w	r3, r3, #4
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d106      	bne.n	800a5b6 <lwip_netconn_do_delconn+0x86>
 800a5a8:	4b4c      	ldr	r3, [pc, #304]	; (800a6dc <lwip_netconn_do_delconn+0x1ac>)
 800a5aa:	f240 427a 	movw	r2, #1146	; 0x47a
 800a5ae:	494e      	ldr	r1, [pc, #312]	; (800a6e8 <lwip_netconn_do_delconn+0x1b8>)
 800a5b0:	484c      	ldr	r0, [pc, #304]	; (800a6e4 <lwip_netconn_do_delconn+0x1b4>)
 800a5b2:	f00f fd8b 	bl	801a0cc <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7ff fdcd 	bl	800a160 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d05f      	beq.n	800a690 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5da:	2b10      	cmp	r3, #16
 800a5dc:	d00d      	beq.n	800a5fa <lwip_netconn_do_delconn+0xca>
 800a5de:	2b20      	cmp	r3, #32
 800a5e0:	d151      	bne.n	800a686 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f009 f9ce 	bl	8013994 <udp_remove>
          break;
 800a5f8:	e046      	b.n	800a688 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	6a1b      	ldr	r3, [r3, #32]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d006      	beq.n	800a612 <lwip_netconn_do_delconn+0xe2>
 800a604:	4b35      	ldr	r3, [pc, #212]	; (800a6dc <lwip_netconn_do_delconn+0x1ac>)
 800a606:	f240 4294 	movw	r2, #1172	; 0x494
 800a60a:	4938      	ldr	r1, [pc, #224]	; (800a6ec <lwip_netconn_do_delconn+0x1bc>)
 800a60c:	4835      	ldr	r0, [pc, #212]	; (800a6e4 <lwip_netconn_do_delconn+0x1b4>)
 800a60e:	f00f fd5d 	bl	801a0cc <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2204      	movs	r2, #4
 800a618:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2203      	movs	r2, #3
 800a61e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2100      	movs	r1, #0
 800a62e:	4618      	mov	r0, r3
 800a630:	f7ff fe14 	bl	800a25c <lwip_netconn_do_close_internal>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d04b      	beq.n	800a6d2 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	785b      	ldrb	r3, [r3, #1]
 800a640:	2b04      	cmp	r3, #4
 800a642:	d006      	beq.n	800a652 <lwip_netconn_do_delconn+0x122>
 800a644:	4b25      	ldr	r3, [pc, #148]	; (800a6dc <lwip_netconn_do_delconn+0x1ac>)
 800a646:	f240 429a 	movw	r2, #1178	; 0x49a
 800a64a:	4929      	ldr	r1, [pc, #164]	; (800a6f0 <lwip_netconn_do_delconn+0x1c0>)
 800a64c:	4825      	ldr	r0, [pc, #148]	; (800a6e4 <lwip_netconn_do_delconn+0x1b4>)
 800a64e:	f00f fd3d 	bl	801a0cc <iprintf>
            UNLOCK_TCPIP_CORE();
 800a652:	4828      	ldr	r0, [pc, #160]	; (800a6f4 <lwip_netconn_do_delconn+0x1c4>)
 800a654:	f00b fe8b 	bl	801636e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	330c      	adds	r3, #12
 800a65e:	2100      	movs	r1, #0
 800a660:	4618      	mov	r0, r3
 800a662:	f00b fde2 	bl	801622a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800a666:	4823      	ldr	r0, [pc, #140]	; (800a6f4 <lwip_netconn_do_delconn+0x1c4>)
 800a668:	f00b fe72 	bl	8016350 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	785b      	ldrb	r3, [r3, #1]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d02d      	beq.n	800a6d2 <lwip_netconn_do_delconn+0x1a2>
 800a676:	4b19      	ldr	r3, [pc, #100]	; (800a6dc <lwip_netconn_do_delconn+0x1ac>)
 800a678:	f240 429e 	movw	r2, #1182	; 0x49e
 800a67c:	491c      	ldr	r1, [pc, #112]	; (800a6f0 <lwip_netconn_do_delconn+0x1c0>)
 800a67e:	4819      	ldr	r0, [pc, #100]	; (800a6e4 <lwip_netconn_do_delconn+0x1b4>)
 800a680:	f00f fd24 	bl	801a0cc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800a684:	e025      	b.n	800a6d2 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800a686:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2200      	movs	r2, #0
 800a68e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a696:	2b00      	cmp	r3, #0
 800a698:	d007      	beq.n	800a6aa <lwip_netconn_do_delconn+0x17a>
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	6810      	ldr	r0, [r2, #0]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d007      	beq.n	800a6c4 <lwip_netconn_do_delconn+0x194>
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ba:	68fa      	ldr	r2, [r7, #12]
 800a6bc:	6810      	ldr	r0, [r2, #0]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	2102      	movs	r1, #2
 800a6c2:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	330c      	adds	r3, #12
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f00b fdf8 	bl	80162c0 <sys_sem_valid>
 800a6d0:	e000      	b.n	800a6d4 <lwip_netconn_do_delconn+0x1a4>
          return;
 800a6d2:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	0801cad4 	.word	0x0801cad4
 800a6e0:	0801ce44 	.word	0x0801ce44
 800a6e4:	0801cb18 	.word	0x0801cb18
 800a6e8:	0801ce58 	.word	0x0801ce58
 800a6ec:	0801ce78 	.word	0x0801ce78
 800a6f0:	0801ce94 	.word	0x0801ce94
 800a6f4:	20008f58 	.word	0x20008f58

0800a6f8 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d025      	beq.n	800a75a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a718:	2b10      	cmp	r3, #16
 800a71a:	d00e      	beq.n	800a73a <lwip_netconn_do_bind+0x42>
 800a71c:	2b20      	cmp	r3, #32
 800a71e:	d119      	bne.n	800a754 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	6858      	ldr	r0, [r3, #4]
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	6899      	ldr	r1, [r3, #8]
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	899b      	ldrh	r3, [r3, #12]
 800a72e:	461a      	mov	r2, r3
 800a730:	f009 f888 	bl	8013844 <udp_bind>
 800a734:	4603      	mov	r3, r0
 800a736:	73fb      	strb	r3, [r7, #15]
        break;
 800a738:	e011      	b.n	800a75e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	6858      	ldr	r0, [r3, #4]
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	6899      	ldr	r1, [r3, #8]
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	899b      	ldrh	r3, [r3, #12]
 800a748:	461a      	mov	r2, r3
 800a74a:	f003 f81b 	bl	800d784 <tcp_bind>
 800a74e:	4603      	mov	r3, r0
 800a750:	73fb      	strb	r3, [r7, #15]
        break;
 800a752:	e004      	b.n	800a75e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800a754:	23fa      	movs	r3, #250	; 0xfa
 800a756:	73fb      	strb	r3, [r7, #15]
        break;
 800a758:	e001      	b.n	800a75e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800a75a:	23fa      	movs	r3, #250	; 0xfa
 800a75c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	7bfa      	ldrb	r2, [r7, #15]
 800a762:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a764:	bf00      	nop
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b086      	sub	sp, #24
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d07f      	beq.n	800a882 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a78c:	2b10      	cmp	r3, #16
 800a78e:	d175      	bne.n	800a87c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	785b      	ldrb	r3, [r3, #1]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d165      	bne.n	800a866 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	7d1b      	ldrb	r3, [r3, #20]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d002      	beq.n	800a7ac <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800a7a6:	23fa      	movs	r3, #250	; 0xfa
 800a7a8:	72fb      	strb	r3, [r7, #11]
 800a7aa:	e06c      	b.n	800a886 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800a7ac:	23ff      	movs	r3, #255	; 0xff
 800a7ae:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	f107 020b 	add.w	r2, r7, #11
 800a7ba:	7cf9      	ldrb	r1, [r7, #19]
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f003 f899 	bl	800d8f4 <tcp_listen_with_backlog_and_err>
 800a7c2:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d05d      	beq.n	800a886 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	3310      	adds	r3, #16
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f00b fce4 	bl	801619e <sys_mbox_valid>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d00b      	beq.n	800a7f4 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	3310      	adds	r3, #16
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f00b fc54 	bl	8016090 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	3310      	adds	r3, #16
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f00b fce6 	bl	80161c0 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	3314      	adds	r3, #20
 800a7fe:	4618      	mov	r0, r3
 800a800:	f00b fccd 	bl	801619e <sys_mbox_valid>
 800a804:	4603      	mov	r3, r0
 800a806:	2b00      	cmp	r3, #0
 800a808:	d108      	bne.n	800a81c <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	3314      	adds	r3, #20
 800a810:	2106      	movs	r1, #6
 800a812:	4618      	mov	r0, r3
 800a814:	f00b fc1a 	bl	801604c <sys_mbox_new>
 800a818:	4603      	mov	r3, r0
 800a81a:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800a81c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d118      	bne.n	800a856 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2202      	movs	r2, #2
 800a82a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68fa      	ldr	r2, [r7, #12]
 800a832:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	685a      	ldr	r2, [r3, #4]
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4619      	mov	r1, r3
 800a840:	4610      	mov	r0, r2
 800a842:	f004 f821 	bl	800e888 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	4912      	ldr	r1, [pc, #72]	; (800a898 <lwip_netconn_do_listen+0x12c>)
 800a84e:	4618      	mov	r0, r3
 800a850:	f004 f892 	bl	800e978 <tcp_accept>
 800a854:	e017      	b.n	800a886 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f002 fe42 	bl	800d4e0 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2200      	movs	r2, #0
 800a862:	605a      	str	r2, [r3, #4]
 800a864:	e00f      	b.n	800a886 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	785b      	ldrb	r3, [r3, #1]
 800a86c:	2b02      	cmp	r3, #2
 800a86e:	d102      	bne.n	800a876 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800a870:	2300      	movs	r3, #0
 800a872:	72fb      	strb	r3, [r7, #11]
 800a874:	e007      	b.n	800a886 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800a876:	23f5      	movs	r3, #245	; 0xf5
 800a878:	72fb      	strb	r3, [r7, #11]
 800a87a:	e004      	b.n	800a886 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800a87c:	23f0      	movs	r3, #240	; 0xf0
 800a87e:	72fb      	strb	r3, [r7, #11]
 800a880:	e001      	b.n	800a886 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800a882:	23f5      	movs	r3, #245	; 0xf5
 800a884:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800a886:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a88e:	bf00      	nop
 800a890:	3718      	adds	r7, #24
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	08009d79 	.word	0x08009d79

0800a89c <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b086      	sub	sp, #24
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d022      	beq.n	800a8fe <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8c2:	2b10      	cmp	r3, #16
 800a8c4:	d11b      	bne.n	800a8fe <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8d2:	d202      	bcs.n	800a8da <lwip_netconn_do_recv+0x3e>
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	e001      	b.n	800a8de <lwip_netconn_do_recv+0x42>
 800a8da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8de:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	89fa      	ldrh	r2, [r7, #14]
 800a8e8:	4611      	mov	r1, r2
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f003 f906 	bl	800dafc <tcp_recved>
        remaining -= recved;
 800a8f0:	89fb      	ldrh	r3, [r7, #14]
 800a8f2:	697a      	ldr	r2, [r7, #20]
 800a8f4:	1ad3      	subs	r3, r2, r3
 800a8f6:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d1e6      	bne.n	800a8cc <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a8fe:	bf00      	nop
 800a900:	3718      	adds	r7, #24
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
	...

0800a908 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b088      	sub	sp, #32
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	460b      	mov	r3, r1
 800a912:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800a914:	2300      	movs	r3, #0
 800a916:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d106      	bne.n	800a92c <lwip_netconn_do_writemore+0x24>
 800a91e:	4b96      	ldr	r3, [pc, #600]	; (800ab78 <lwip_netconn_do_writemore+0x270>)
 800a920:	f240 6273 	movw	r2, #1651	; 0x673
 800a924:	4995      	ldr	r1, [pc, #596]	; (800ab7c <lwip_netconn_do_writemore+0x274>)
 800a926:	4896      	ldr	r0, [pc, #600]	; (800ab80 <lwip_netconn_do_writemore+0x278>)
 800a928:	f00f fbd0 	bl	801a0cc <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	785b      	ldrb	r3, [r3, #1]
 800a930:	2b01      	cmp	r3, #1
 800a932:	d006      	beq.n	800a942 <lwip_netconn_do_writemore+0x3a>
 800a934:	4b90      	ldr	r3, [pc, #576]	; (800ab78 <lwip_netconn_do_writemore+0x270>)
 800a936:	f240 6274 	movw	r2, #1652	; 0x674
 800a93a:	4992      	ldr	r1, [pc, #584]	; (800ab84 <lwip_netconn_do_writemore+0x27c>)
 800a93c:	4890      	ldr	r0, [pc, #576]	; (800ab80 <lwip_netconn_do_writemore+0x278>)
 800a93e:	f00f fbc5 	bl	801a0cc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6a1b      	ldr	r3, [r3, #32]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d106      	bne.n	800a958 <lwip_netconn_do_writemore+0x50>
 800a94a:	4b8b      	ldr	r3, [pc, #556]	; (800ab78 <lwip_netconn_do_writemore+0x270>)
 800a94c:	f240 6275 	movw	r2, #1653	; 0x675
 800a950:	498d      	ldr	r1, [pc, #564]	; (800ab88 <lwip_netconn_do_writemore+0x280>)
 800a952:	488b      	ldr	r0, [pc, #556]	; (800ab80 <lwip_netconn_do_writemore+0x278>)
 800a954:	f00f fbba 	bl	801a0cc <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d106      	bne.n	800a96e <lwip_netconn_do_writemore+0x66>
 800a960:	4b85      	ldr	r3, [pc, #532]	; (800ab78 <lwip_netconn_do_writemore+0x270>)
 800a962:	f240 6276 	movw	r2, #1654	; 0x676
 800a966:	4989      	ldr	r1, [pc, #548]	; (800ab8c <lwip_netconn_do_writemore+0x284>)
 800a968:	4885      	ldr	r0, [pc, #532]	; (800ab80 <lwip_netconn_do_writemore+0x278>)
 800a96a:	f00f fbaf 	bl	801a0cc <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6a1b      	ldr	r3, [r3, #32]
 800a972:	699a      	ldr	r2, [r3, #24]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6a1b      	ldr	r3, [r3, #32]
 800a978:	695b      	ldr	r3, [r3, #20]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d306      	bcc.n	800a98c <lwip_netconn_do_writemore+0x84>
 800a97e:	4b7e      	ldr	r3, [pc, #504]	; (800ab78 <lwip_netconn_do_writemore+0x270>)
 800a980:	f240 6277 	movw	r2, #1655	; 0x677
 800a984:	4982      	ldr	r1, [pc, #520]	; (800ab90 <lwip_netconn_do_writemore+0x288>)
 800a986:	487e      	ldr	r0, [pc, #504]	; (800ab80 <lwip_netconn_do_writemore+0x278>)
 800a988:	f00f fba0 	bl	801a0cc <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a1b      	ldr	r3, [r3, #32]
 800a990:	899b      	ldrh	r3, [r3, #12]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d106      	bne.n	800a9a4 <lwip_netconn_do_writemore+0x9c>
 800a996:	4b78      	ldr	r3, [pc, #480]	; (800ab78 <lwip_netconn_do_writemore+0x270>)
 800a998:	f240 6279 	movw	r2, #1657	; 0x679
 800a99c:	497d      	ldr	r1, [pc, #500]	; (800ab94 <lwip_netconn_do_writemore+0x28c>)
 800a99e:	4878      	ldr	r0, [pc, #480]	; (800ab80 <lwip_netconn_do_writemore+0x278>)
 800a9a0:	f00f fb94 	bl	801a0cc <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a1b      	ldr	r3, [r3, #32]
 800a9a8:	7f1b      	ldrb	r3, [r3, #28]
 800a9aa:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	7f1b      	ldrb	r3, [r3, #28]
 800a9b0:	f003 0302 	and.w	r3, r3, #2
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d104      	bne.n	800a9c2 <lwip_netconn_do_writemore+0xba>
 800a9b8:	7ebb      	ldrb	r3, [r7, #26]
 800a9ba:	f003 0304 	and.w	r3, r3, #4
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d001      	beq.n	800a9c6 <lwip_netconn_do_writemore+0xbe>
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e000      	b.n	800a9c8 <lwip_netconn_do_writemore+0xc0>
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a1b      	ldr	r3, [r3, #32]
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a1b      	ldr	r3, [r3, #32]
 800a9d6:	691b      	ldr	r3, [r3, #16]
 800a9d8:	4413      	add	r3, r2
 800a9da:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6a1b      	ldr	r3, [r3, #32]
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	685a      	ldr	r2, [r3, #4]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6a1b      	ldr	r3, [r3, #32]
 800a9e8:	691b      	ldr	r3, [r3, #16]
 800a9ea:	1ad3      	subs	r3, r2, r3
 800a9ec:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9f4:	d307      	bcc.n	800aa06 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800a9f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a9fa:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a9fc:	7ebb      	ldrb	r3, [r7, #26]
 800a9fe:	f043 0302 	orr.w	r3, r3, #2
 800aa02:	76bb      	strb	r3, [r7, #26]
 800aa04:	e001      	b.n	800aa0a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aa12:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800aa14:	89fa      	ldrh	r2, [r7, #14]
 800aa16:	8bbb      	ldrh	r3, [r7, #28]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d216      	bcs.n	800aa4a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800aa1c:	89fb      	ldrh	r3, [r7, #14]
 800aa1e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800aa20:	7e3b      	ldrb	r3, [r7, #24]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00d      	beq.n	800aa42 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800aa26:	8bbb      	ldrh	r3, [r7, #28]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d10e      	bne.n	800aa4a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a1b      	ldr	r3, [r3, #32]
 800aa30:	699b      	ldr	r3, [r3, #24]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d102      	bne.n	800aa3c <lwip_netconn_do_writemore+0x134>
 800aa36:	f06f 0306 	mvn.w	r3, #6
 800aa3a:	e000      	b.n	800aa3e <lwip_netconn_do_writemore+0x136>
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800aa40:	e07d      	b.n	800ab3e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800aa42:	7ebb      	ldrb	r3, [r7, #26]
 800aa44:	f043 0302 	orr.w	r3, r3, #2
 800aa48:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	691a      	ldr	r2, [r3, #16]
 800aa50:	8bbb      	ldrh	r3, [r7, #28]
 800aa52:	441a      	add	r2, r3
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6a1b      	ldr	r3, [r3, #32]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d906      	bls.n	800aa6e <lwip_netconn_do_writemore+0x166>
 800aa60:	4b45      	ldr	r3, [pc, #276]	; (800ab78 <lwip_netconn_do_writemore+0x270>)
 800aa62:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800aa66:	494c      	ldr	r1, [pc, #304]	; (800ab98 <lwip_netconn_do_writemore+0x290>)
 800aa68:	4845      	ldr	r0, [pc, #276]	; (800ab80 <lwip_netconn_do_writemore+0x278>)
 800aa6a:	f00f fb2f 	bl	801a0cc <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800aa6e:	8bbb      	ldrh	r3, [r7, #28]
 800aa70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d103      	bne.n	800aa80 <lwip_netconn_do_writemore+0x178>
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa7e:	d209      	bcs.n	800aa94 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800aa84:	8bba      	ldrh	r2, [r7, #28]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d10b      	bne.n	800aaa2 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6a1b      	ldr	r3, [r3, #32]
 800aa8e:	899b      	ldrh	r3, [r3, #12]
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d906      	bls.n	800aaa2 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800aa94:	2301      	movs	r3, #1
 800aa96:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800aa98:	7ebb      	ldrb	r3, [r7, #26]
 800aa9a:	f043 0302 	orr.w	r3, r3, #2
 800aa9e:	76bb      	strb	r3, [r7, #26]
 800aaa0:	e001      	b.n	800aaa6 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6858      	ldr	r0, [r3, #4]
 800aaaa:	7ebb      	ldrb	r3, [r7, #26]
 800aaac:	8bba      	ldrh	r2, [r7, #28]
 800aaae:	6979      	ldr	r1, [r7, #20]
 800aab0:	f006 fe2c 	bl	801170c <tcp_write>
 800aab4:	4603      	mov	r3, r0
 800aab6:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800aab8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d12c      	bne.n	800ab1a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6a1b      	ldr	r3, [r3, #32]
 800aac4:	6999      	ldr	r1, [r3, #24]
 800aac6:	8bba      	ldrh	r2, [r7, #28]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6a1b      	ldr	r3, [r3, #32]
 800aacc:	440a      	add	r2, r1
 800aace:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a1b      	ldr	r3, [r3, #32]
 800aad4:	6919      	ldr	r1, [r3, #16]
 800aad6:	8bba      	ldrh	r2, [r7, #28]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a1b      	ldr	r3, [r3, #32]
 800aadc:	440a      	add	r2, r1
 800aade:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6a1b      	ldr	r3, [r3, #32]
 800aae4:	691a      	ldr	r2, [r3, #16]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6a1b      	ldr	r3, [r3, #32]
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d113      	bne.n	800ab1a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a1b      	ldr	r3, [r3, #32]
 800aaf6:	899a      	ldrh	r2, [r3, #12]
 800aaf8:	3a01      	subs	r2, #1
 800aafa:	b292      	uxth	r2, r2
 800aafc:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6a1b      	ldr	r3, [r3, #32]
 800ab02:	899b      	ldrh	r3, [r3, #12]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d008      	beq.n	800ab1a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6a1b      	ldr	r3, [r3, #32]
 800ab0c:	689a      	ldr	r2, [r3, #8]
 800ab0e:	3208      	adds	r2, #8
 800ab10:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a1b      	ldr	r3, [r3, #32]
 800ab16:	2200      	movs	r2, #0
 800ab18:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800ab1a:	7e7b      	ldrb	r3, [r7, #25]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d004      	beq.n	800ab2a <lwip_netconn_do_writemore+0x222>
 800ab20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f43f af50 	beq.w	800a9ca <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800ab2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d004      	beq.n	800ab3c <lwip_netconn_do_writemore+0x234>
 800ab32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab3a:	d147      	bne.n	800abcc <lwip_netconn_do_writemore+0x2c4>
err_mem:
 800ab3c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800ab3e:	7e3b      	ldrb	r3, [r7, #24]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d02b      	beq.n	800ab9c <lwip_netconn_do_writemore+0x294>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6a1b      	ldr	r3, [r3, #32]
 800ab48:	699a      	ldr	r2, [r3, #24]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6a1b      	ldr	r3, [r3, #32]
 800ab4e:	695b      	ldr	r3, [r3, #20]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d223      	bcs.n	800ab9c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d005      	beq.n	800ab68 <lwip_netconn_do_writemore+0x260>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab60:	2200      	movs	r2, #0
 800ab62:	2103      	movs	r1, #3
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	7f1b      	ldrb	r3, [r3, #28]
 800ab6c:	f043 0310 	orr.w	r3, r3, #16
 800ab70:	b2da      	uxtb	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	771a      	strb	r2, [r3, #28]
 800ab76:	e029      	b.n	800abcc <lwip_netconn_do_writemore+0x2c4>
 800ab78:	0801cad4 	.word	0x0801cad4
 800ab7c:	0801cc2c 	.word	0x0801cc2c
 800ab80:	0801cb18 	.word	0x0801cb18
 800ab84:	0801cf34 	.word	0x0801cf34
 800ab88:	0801cc3c 	.word	0x0801cc3c
 800ab8c:	0801cf54 	.word	0x0801cf54
 800ab90:	0801cf6c 	.word	0x0801cf6c
 800ab94:	0801cfac 	.word	0x0801cfac
 800ab98:	0801cfd4 	.word	0x0801cfd4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aba4:	f240 4231 	movw	r2, #1073	; 0x431
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d905      	bls.n	800abb8 <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800abb4:	2b07      	cmp	r3, #7
 800abb6:	d909      	bls.n	800abcc <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d005      	beq.n	800abcc <lwip_netconn_do_writemore+0x2c4>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc4:	2200      	movs	r2, #0
 800abc6:	2103      	movs	r1, #3
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800abcc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d11d      	bne.n	800ac10 <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a1b      	ldr	r3, [r3, #32]
 800abd8:	699a      	ldr	r2, [r3, #24]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a1b      	ldr	r3, [r3, #32]
 800abde:	695b      	ldr	r3, [r3, #20]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d002      	beq.n	800abea <lwip_netconn_do_writemore+0x2e2>
 800abe4:	7e3b      	ldrb	r3, [r7, #24]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d001      	beq.n	800abee <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800abea:	2301      	movs	r3, #1
 800abec:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	4618      	mov	r0, r3
 800abf4:	f007 fb74 	bl	80122e0 <tcp_output>
 800abf8:	4603      	mov	r3, r0
 800abfa:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800abfc:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800ac00:	f113 0f04 	cmn.w	r3, #4
 800ac04:	d12c      	bne.n	800ac60 <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ac06:	7b3b      	ldrb	r3, [r7, #12]
 800ac08:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	76fb      	strb	r3, [r7, #27]
 800ac0e:	e027      	b.n	800ac60 <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 800ac10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac18:	d120      	bne.n	800ac5c <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f007 fb5e 	bl	80122e0 <tcp_output>
 800ac24:	4603      	mov	r3, r0
 800ac26:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800ac28:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800ac2c:	f113 0f04 	cmn.w	r3, #4
 800ac30:	d104      	bne.n	800ac3c <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ac32:	7b7b      	ldrb	r3, [r7, #13]
 800ac34:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ac36:	2301      	movs	r3, #1
 800ac38:	76fb      	strb	r3, [r7, #27]
 800ac3a:	e011      	b.n	800ac60 <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 800ac3c:	7e3b      	ldrb	r3, [r7, #24]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00e      	beq.n	800ac60 <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a1b      	ldr	r3, [r3, #32]
 800ac46:	699b      	ldr	r3, [r3, #24]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d102      	bne.n	800ac52 <lwip_netconn_do_writemore+0x34a>
 800ac4c:	f06f 0306 	mvn.w	r3, #6
 800ac50:	e000      	b.n	800ac54 <lwip_netconn_do_writemore+0x34c>
 800ac52:	2300      	movs	r3, #0
 800ac54:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ac56:	2301      	movs	r3, #1
 800ac58:	76fb      	strb	r3, [r7, #27]
 800ac5a:	e001      	b.n	800ac60 <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800ac60:	7efb      	ldrb	r3, [r7, #27]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d015      	beq.n	800ac92 <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6a1b      	ldr	r3, [r3, #32]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	330c      	adds	r3, #12
 800ac6e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6a1b      	ldr	r3, [r3, #32]
 800ac74:	7ffa      	ldrb	r2, [r7, #31]
 800ac76:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800ac84:	78fb      	ldrb	r3, [r7, #3]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d006      	beq.n	800ac98 <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800ac8a:	68b8      	ldr	r0, [r7, #8]
 800ac8c:	f00b fafe 	bl	801628c <sys_sem_signal>
 800ac90:	e002      	b.n	800ac98 <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800ac92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac96:	e000      	b.n	800ac9a <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3720      	adds	r7, #32
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop

0800aca4 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7fe fd16 	bl	80096e6 <netconn_err>
 800acba:	4603      	mov	r3, r0
 800acbc:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800acbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d166      	bne.n	800ad94 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acd0:	2b10      	cmp	r3, #16
 800acd2:	d15d      	bne.n	800ad90 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	785b      	ldrb	r3, [r3, #1]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d002      	beq.n	800ace4 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800acde:	23fb      	movs	r3, #251	; 0xfb
 800ace0:	73fb      	strb	r3, [r7, #15]
 800ace2:	e057      	b.n	800ad94 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d04d      	beq.n	800ad8a <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2201      	movs	r2, #1
 800acf4:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	6a1b      	ldr	r3, [r3, #32]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d006      	beq.n	800ad0e <lwip_netconn_do_write+0x6a>
 800ad00:	4b28      	ldr	r3, [pc, #160]	; (800ada4 <lwip_netconn_do_write+0x100>)
 800ad02:	f240 7223 	movw	r2, #1827	; 0x723
 800ad06:	4928      	ldr	r1, [pc, #160]	; (800ada8 <lwip_netconn_do_write+0x104>)
 800ad08:	4828      	ldr	r0, [pc, #160]	; (800adac <lwip_netconn_do_write+0x108>)
 800ad0a:	f00f f9df 	bl	801a0cc <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	695b      	ldr	r3, [r3, #20]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d106      	bne.n	800ad24 <lwip_netconn_do_write+0x80>
 800ad16:	4b23      	ldr	r3, [pc, #140]	; (800ada4 <lwip_netconn_do_write+0x100>)
 800ad18:	f240 7224 	movw	r2, #1828	; 0x724
 800ad1c:	4924      	ldr	r1, [pc, #144]	; (800adb0 <lwip_netconn_do_write+0x10c>)
 800ad1e:	4823      	ldr	r0, [pc, #140]	; (800adac <lwip_netconn_do_write+0x108>)
 800ad20:	f00f f9d4 	bl	801a0cc <iprintf>
        msg->conn->current_msg = msg;
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	68ba      	ldr	r2, [r7, #8]
 800ad2a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2100      	movs	r1, #0
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7ff fde8 	bl	800a908 <lwip_netconn_do_writemore>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d02e      	beq.n	800ad9c <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	785b      	ldrb	r3, [r3, #1]
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	d006      	beq.n	800ad56 <lwip_netconn_do_write+0xb2>
 800ad48:	4b16      	ldr	r3, [pc, #88]	; (800ada4 <lwip_netconn_do_write+0x100>)
 800ad4a:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800ad4e:	4919      	ldr	r1, [pc, #100]	; (800adb4 <lwip_netconn_do_write+0x110>)
 800ad50:	4816      	ldr	r0, [pc, #88]	; (800adac <lwip_netconn_do_write+0x108>)
 800ad52:	f00f f9bb 	bl	801a0cc <iprintf>
          UNLOCK_TCPIP_CORE();
 800ad56:	4818      	ldr	r0, [pc, #96]	; (800adb8 <lwip_netconn_do_write+0x114>)
 800ad58:	f00b fb09 	bl	801636e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	330c      	adds	r3, #12
 800ad62:	2100      	movs	r1, #0
 800ad64:	4618      	mov	r0, r3
 800ad66:	f00b fa60 	bl	801622a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800ad6a:	4813      	ldr	r0, [pc, #76]	; (800adb8 <lwip_netconn_do_write+0x114>)
 800ad6c:	f00b faf0 	bl	8016350 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	785b      	ldrb	r3, [r3, #1]
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d110      	bne.n	800ad9c <lwip_netconn_do_write+0xf8>
 800ad7a:	4b0a      	ldr	r3, [pc, #40]	; (800ada4 <lwip_netconn_do_write+0x100>)
 800ad7c:	f240 722c 	movw	r2, #1836	; 0x72c
 800ad80:	490c      	ldr	r1, [pc, #48]	; (800adb4 <lwip_netconn_do_write+0x110>)
 800ad82:	480a      	ldr	r0, [pc, #40]	; (800adac <lwip_netconn_do_write+0x108>)
 800ad84:	f00f f9a2 	bl	801a0cc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800ad88:	e008      	b.n	800ad9c <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800ad8a:	23f5      	movs	r3, #245	; 0xf5
 800ad8c:	73fb      	strb	r3, [r7, #15]
 800ad8e:	e001      	b.n	800ad94 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800ad90:	23fa      	movs	r3, #250	; 0xfa
 800ad92:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	7bfa      	ldrb	r2, [r7, #15]
 800ad98:	711a      	strb	r2, [r3, #4]
 800ad9a:	e000      	b.n	800ad9e <lwip_netconn_do_write+0xfa>
        return;
 800ad9c:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800ad9e:	3710      	adds	r7, #16
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	0801cad4 	.word	0x0801cad4
 800ada8:	0801ce78 	.word	0x0801ce78
 800adac:	0801cb18 	.word	0x0801cb18
 800adb0:	0801d000 	.word	0x0801d000
 800adb4:	0801ce94 	.word	0x0801ce94
 800adb8:	20008f58 	.word	0x20008f58

0800adbc <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	785b      	ldrb	r3, [r3, #1]
 800adce:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d069      	beq.n	800aeae <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800ade4:	2b10      	cmp	r3, #16
 800ade6:	d162      	bne.n	800aeae <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800adec:	2b03      	cmp	r3, #3
 800adee:	d002      	beq.n	800adf6 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800adf0:	7afb      	ldrb	r3, [r7, #11]
 800adf2:	2b02      	cmp	r3, #2
 800adf4:	d05b      	beq.n	800aeae <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800adf6:	7afb      	ldrb	r3, [r7, #11]
 800adf8:	2b03      	cmp	r3, #3
 800adfa:	d103      	bne.n	800ae04 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	22f5      	movs	r2, #245	; 0xf5
 800ae00:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ae02:	e059      	b.n	800aeb8 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800ae04:	7afb      	ldrb	r3, [r7, #11]
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d103      	bne.n	800ae12 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	22fb      	movs	r2, #251	; 0xfb
 800ae0e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ae10:	e052      	b.n	800aeb8 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	7a1b      	ldrb	r3, [r3, #8]
 800ae16:	f003 0301 	and.w	r3, r3, #1
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d004      	beq.n	800ae28 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7ff f99c 	bl	800a160 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	6a1b      	ldr	r3, [r3, #32]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d006      	beq.n	800ae40 <lwip_netconn_do_close+0x84>
 800ae32:	4b23      	ldr	r3, [pc, #140]	; (800aec0 <lwip_netconn_do_close+0x104>)
 800ae34:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800ae38:	4922      	ldr	r1, [pc, #136]	; (800aec4 <lwip_netconn_do_close+0x108>)
 800ae3a:	4823      	ldr	r0, [pc, #140]	; (800aec8 <lwip_netconn_do_close+0x10c>)
 800ae3c:	f00f f946 	bl	801a0cc <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2204      	movs	r2, #4
 800ae46:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	68fa      	ldr	r2, [r7, #12]
 800ae4e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2100      	movs	r1, #0
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7ff fa00 	bl	800a25c <lwip_netconn_do_close_internal>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d029      	beq.n	800aeb6 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	785b      	ldrb	r3, [r3, #1]
 800ae68:	2b04      	cmp	r3, #4
 800ae6a:	d006      	beq.n	800ae7a <lwip_netconn_do_close+0xbe>
 800ae6c:	4b14      	ldr	r3, [pc, #80]	; (800aec0 <lwip_netconn_do_close+0x104>)
 800ae6e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800ae72:	4916      	ldr	r1, [pc, #88]	; (800aecc <lwip_netconn_do_close+0x110>)
 800ae74:	4814      	ldr	r0, [pc, #80]	; (800aec8 <lwip_netconn_do_close+0x10c>)
 800ae76:	f00f f929 	bl	801a0cc <iprintf>
        UNLOCK_TCPIP_CORE();
 800ae7a:	4815      	ldr	r0, [pc, #84]	; (800aed0 <lwip_netconn_do_close+0x114>)
 800ae7c:	f00b fa77 	bl	801636e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	330c      	adds	r3, #12
 800ae86:	2100      	movs	r1, #0
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f00b f9ce 	bl	801622a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800ae8e:	4810      	ldr	r0, [pc, #64]	; (800aed0 <lwip_netconn_do_close+0x114>)
 800ae90:	f00b fa5e 	bl	8016350 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	785b      	ldrb	r3, [r3, #1]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00b      	beq.n	800aeb6 <lwip_netconn_do_close+0xfa>
 800ae9e:	4b08      	ldr	r3, [pc, #32]	; (800aec0 <lwip_netconn_do_close+0x104>)
 800aea0:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800aea4:	4909      	ldr	r1, [pc, #36]	; (800aecc <lwip_netconn_do_close+0x110>)
 800aea6:	4808      	ldr	r0, [pc, #32]	; (800aec8 <lwip_netconn_do_close+0x10c>)
 800aea8:	f00f f910 	bl	801a0cc <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800aeac:	e003      	b.n	800aeb6 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	22f5      	movs	r2, #245	; 0xf5
 800aeb2:	711a      	strb	r2, [r3, #4]
 800aeb4:	e000      	b.n	800aeb8 <lwip_netconn_do_close+0xfc>
      return;
 800aeb6:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	0801cad4 	.word	0x0801cad4
 800aec4:	0801ce78 	.word	0x0801ce78
 800aec8:	0801cb18 	.word	0x0801cb18
 800aecc:	0801ce94 	.word	0x0801ce94
 800aed0:	20008f58 	.word	0x20008f58

0800aed4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d013      	beq.n	800af0a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00b      	beq.n	800af02 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4618      	mov	r0, r3
 800aef0:	f001 fe4c 	bl	800cb8c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	605a      	str	r2, [r3, #4]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	685a      	ldr	r2, [r3, #4]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800af02:	6879      	ldr	r1, [r7, #4]
 800af04:	2006      	movs	r0, #6
 800af06:	f000 ff9d 	bl	800be44 <memp_free>
  }
}
 800af0a:	bf00      	nop
 800af0c:	3708      	adds	r7, #8
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
	...

0800af14 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d108      	bne.n	800af38 <netbuf_data+0x24>
 800af26:	4b1b      	ldr	r3, [pc, #108]	; (800af94 <netbuf_data+0x80>)
 800af28:	22c6      	movs	r2, #198	; 0xc6
 800af2a:	491b      	ldr	r1, [pc, #108]	; (800af98 <netbuf_data+0x84>)
 800af2c:	481b      	ldr	r0, [pc, #108]	; (800af9c <netbuf_data+0x88>)
 800af2e:	f00f f8cd 	bl	801a0cc <iprintf>
 800af32:	f06f 030f 	mvn.w	r3, #15
 800af36:	e029      	b.n	800af8c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d108      	bne.n	800af50 <netbuf_data+0x3c>
 800af3e:	4b15      	ldr	r3, [pc, #84]	; (800af94 <netbuf_data+0x80>)
 800af40:	22c7      	movs	r2, #199	; 0xc7
 800af42:	4917      	ldr	r1, [pc, #92]	; (800afa0 <netbuf_data+0x8c>)
 800af44:	4815      	ldr	r0, [pc, #84]	; (800af9c <netbuf_data+0x88>)
 800af46:	f00f f8c1 	bl	801a0cc <iprintf>
 800af4a:	f06f 030f 	mvn.w	r3, #15
 800af4e:	e01d      	b.n	800af8c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d108      	bne.n	800af68 <netbuf_data+0x54>
 800af56:	4b0f      	ldr	r3, [pc, #60]	; (800af94 <netbuf_data+0x80>)
 800af58:	22c8      	movs	r2, #200	; 0xc8
 800af5a:	4912      	ldr	r1, [pc, #72]	; (800afa4 <netbuf_data+0x90>)
 800af5c:	480f      	ldr	r0, [pc, #60]	; (800af9c <netbuf_data+0x88>)
 800af5e:	f00f f8b5 	bl	801a0cc <iprintf>
 800af62:	f06f 030f 	mvn.w	r3, #15
 800af66:	e011      	b.n	800af8c <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d102      	bne.n	800af76 <netbuf_data+0x62>
    return ERR_BUF;
 800af70:	f06f 0301 	mvn.w	r3, #1
 800af74:	e00a      	b.n	800af8c <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	685a      	ldr	r2, [r3, #4]
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	895a      	ldrh	r2, [r3, #10]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800af8a:	2300      	movs	r3, #0
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	0801d02c 	.word	0x0801d02c
 800af98:	0801d134 	.word	0x0801d134
 800af9c:	0801d07c 	.word	0x0801d07c
 800afa0:	0801d150 	.word	0x0801d150
 800afa4:	0801d170 	.word	0x0801d170

0800afa8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800afb2:	f008 fa4d 	bl	8013450 <sys_timeouts_sleeptime>
 800afb6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afbe:	d10b      	bne.n	800afd8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800afc0:	4813      	ldr	r0, [pc, #76]	; (800b010 <tcpip_timeouts_mbox_fetch+0x68>)
 800afc2:	f00b f9d4 	bl	801636e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800afc6:	2200      	movs	r2, #0
 800afc8:	6839      	ldr	r1, [r7, #0]
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f00b f88c 	bl	80160e8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800afd0:	480f      	ldr	r0, [pc, #60]	; (800b010 <tcpip_timeouts_mbox_fetch+0x68>)
 800afd2:	f00b f9bd 	bl	8016350 <sys_mutex_lock>
    return;
 800afd6:	e018      	b.n	800b00a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d102      	bne.n	800afe4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800afde:	f008 f9fd 	bl	80133dc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800afe2:	e7e6      	b.n	800afb2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800afe4:	480a      	ldr	r0, [pc, #40]	; (800b010 <tcpip_timeouts_mbox_fetch+0x68>)
 800afe6:	f00b f9c2 	bl	801636e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	6839      	ldr	r1, [r7, #0]
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f00b f87a 	bl	80160e8 <sys_arch_mbox_fetch>
 800aff4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800aff6:	4806      	ldr	r0, [pc, #24]	; (800b010 <tcpip_timeouts_mbox_fetch+0x68>)
 800aff8:	f00b f9aa 	bl	8016350 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b002:	d102      	bne.n	800b00a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b004:	f008 f9ea 	bl	80133dc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b008:	e7d3      	b.n	800afb2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b00a:	3710      	adds	r7, #16
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	20008f58 	.word	0x20008f58

0800b014 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b01c:	4810      	ldr	r0, [pc, #64]	; (800b060 <tcpip_thread+0x4c>)
 800b01e:	f00b f997 	bl	8016350 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b022:	4b10      	ldr	r3, [pc, #64]	; (800b064 <tcpip_thread+0x50>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d005      	beq.n	800b036 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b02a:	4b0e      	ldr	r3, [pc, #56]	; (800b064 <tcpip_thread+0x50>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a0e      	ldr	r2, [pc, #56]	; (800b068 <tcpip_thread+0x54>)
 800b030:	6812      	ldr	r2, [r2, #0]
 800b032:	4610      	mov	r0, r2
 800b034:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b036:	f107 030c 	add.w	r3, r7, #12
 800b03a:	4619      	mov	r1, r3
 800b03c:	480b      	ldr	r0, [pc, #44]	; (800b06c <tcpip_thread+0x58>)
 800b03e:	f7ff ffb3 	bl	800afa8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d106      	bne.n	800b056 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b048:	4b09      	ldr	r3, [pc, #36]	; (800b070 <tcpip_thread+0x5c>)
 800b04a:	2291      	movs	r2, #145	; 0x91
 800b04c:	4909      	ldr	r1, [pc, #36]	; (800b074 <tcpip_thread+0x60>)
 800b04e:	480a      	ldr	r0, [pc, #40]	; (800b078 <tcpip_thread+0x64>)
 800b050:	f00f f83c 	bl	801a0cc <iprintf>
      continue;
 800b054:	e003      	b.n	800b05e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	4618      	mov	r0, r3
 800b05a:	f000 f80f 	bl	800b07c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b05e:	e7ea      	b.n	800b036 <tcpip_thread+0x22>
 800b060:	20008f58 	.word	0x20008f58
 800b064:	20008f4c 	.word	0x20008f4c
 800b068:	20008f50 	.word	0x20008f50
 800b06c:	20008f54 	.word	0x20008f54
 800b070:	0801d1c4 	.word	0x0801d1c4
 800b074:	0801d1f4 	.word	0x0801d1f4
 800b078:	0801d214 	.word	0x0801d214

0800b07c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	2b02      	cmp	r3, #2
 800b08a:	d026      	beq.n	800b0da <tcpip_thread_handle_msg+0x5e>
 800b08c:	2b02      	cmp	r3, #2
 800b08e:	dc2b      	bgt.n	800b0e8 <tcpip_thread_handle_msg+0x6c>
 800b090:	2b00      	cmp	r3, #0
 800b092:	d002      	beq.n	800b09a <tcpip_thread_handle_msg+0x1e>
 800b094:	2b01      	cmp	r3, #1
 800b096:	d015      	beq.n	800b0c4 <tcpip_thread_handle_msg+0x48>
 800b098:	e026      	b.n	800b0e8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	6850      	ldr	r0, [r2, #4]
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	6892      	ldr	r2, [r2, #8]
 800b0a6:	4611      	mov	r1, r2
 800b0a8:	4798      	blx	r3
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d004      	beq.n	800b0ba <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f001 fd69 	bl	800cb8c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b0ba:	6879      	ldr	r1, [r7, #4]
 800b0bc:	2009      	movs	r0, #9
 800b0be:	f000 fec1 	bl	800be44 <memp_free>
      break;
 800b0c2:	e018      	b.n	800b0f6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	6892      	ldr	r2, [r2, #8]
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b0d0:	6879      	ldr	r1, [r7, #4]
 800b0d2:	2008      	movs	r0, #8
 800b0d4:	f000 feb6 	bl	800be44 <memp_free>
      break;
 800b0d8:	e00d      	b.n	800b0f6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	6892      	ldr	r2, [r2, #8]
 800b0e2:	4610      	mov	r0, r2
 800b0e4:	4798      	blx	r3
      break;
 800b0e6:	e006      	b.n	800b0f6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b0e8:	4b05      	ldr	r3, [pc, #20]	; (800b100 <tcpip_thread_handle_msg+0x84>)
 800b0ea:	22cf      	movs	r2, #207	; 0xcf
 800b0ec:	4905      	ldr	r1, [pc, #20]	; (800b104 <tcpip_thread_handle_msg+0x88>)
 800b0ee:	4806      	ldr	r0, [pc, #24]	; (800b108 <tcpip_thread_handle_msg+0x8c>)
 800b0f0:	f00e ffec 	bl	801a0cc <iprintf>
      break;
 800b0f4:	bf00      	nop
  }
}
 800b0f6:	bf00      	nop
 800b0f8:	3708      	adds	r7, #8
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	0801d1c4 	.word	0x0801d1c4
 800b104:	0801d1f4 	.word	0x0801d1f4
 800b108:	0801d214 	.word	0x0801d214

0800b10c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b086      	sub	sp, #24
 800b110:	af00      	add	r7, sp, #0
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	60b9      	str	r1, [r7, #8]
 800b116:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b118:	481a      	ldr	r0, [pc, #104]	; (800b184 <tcpip_inpkt+0x78>)
 800b11a:	f00b f840 	bl	801619e <sys_mbox_valid>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d105      	bne.n	800b130 <tcpip_inpkt+0x24>
 800b124:	4b18      	ldr	r3, [pc, #96]	; (800b188 <tcpip_inpkt+0x7c>)
 800b126:	22fc      	movs	r2, #252	; 0xfc
 800b128:	4918      	ldr	r1, [pc, #96]	; (800b18c <tcpip_inpkt+0x80>)
 800b12a:	4819      	ldr	r0, [pc, #100]	; (800b190 <tcpip_inpkt+0x84>)
 800b12c:	f00e ffce 	bl	801a0cc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b130:	2009      	movs	r0, #9
 800b132:	f000 fe11 	bl	800bd58 <memp_malloc>
 800b136:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d102      	bne.n	800b144 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b13e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b142:	e01a      	b.n	800b17a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	2200      	movs	r2, #0
 800b148:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	68fa      	ldr	r2, [r7, #12]
 800b14e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	68ba      	ldr	r2, [r7, #8]
 800b154:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b15c:	6979      	ldr	r1, [r7, #20]
 800b15e:	4809      	ldr	r0, [pc, #36]	; (800b184 <tcpip_inpkt+0x78>)
 800b160:	f00a ffa8 	bl	80160b4 <sys_mbox_trypost>
 800b164:	4603      	mov	r3, r0
 800b166:	2b00      	cmp	r3, #0
 800b168:	d006      	beq.n	800b178 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b16a:	6979      	ldr	r1, [r7, #20]
 800b16c:	2009      	movs	r0, #9
 800b16e:	f000 fe69 	bl	800be44 <memp_free>
    return ERR_MEM;
 800b172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b176:	e000      	b.n	800b17a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b178:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3718      	adds	r7, #24
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	20008f54 	.word	0x20008f54
 800b188:	0801d1c4 	.word	0x0801d1c4
 800b18c:	0801d23c 	.word	0x0801d23c
 800b190:	0801d214 	.word	0x0801d214

0800b194 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1a4:	f003 0318 	and.w	r3, r3, #24
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d006      	beq.n	800b1ba <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b1ac:	4a08      	ldr	r2, [pc, #32]	; (800b1d0 <tcpip_input+0x3c>)
 800b1ae:	6839      	ldr	r1, [r7, #0]
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f7ff ffab 	bl	800b10c <tcpip_inpkt>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	e005      	b.n	800b1c6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b1ba:	4a06      	ldr	r2, [pc, #24]	; (800b1d4 <tcpip_input+0x40>)
 800b1bc:	6839      	ldr	r1, [r7, #0]
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f7ff ffa4 	bl	800b10c <tcpip_inpkt>
 800b1c4:	4603      	mov	r3, r0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3708      	adds	r7, #8
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	08015ea1 	.word	0x08015ea1
 800b1d4:	08014da9 	.word	0x08014da9

0800b1d8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b1e2:	4819      	ldr	r0, [pc, #100]	; (800b248 <tcpip_try_callback+0x70>)
 800b1e4:	f00a ffdb 	bl	801619e <sys_mbox_valid>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d106      	bne.n	800b1fc <tcpip_try_callback+0x24>
 800b1ee:	4b17      	ldr	r3, [pc, #92]	; (800b24c <tcpip_try_callback+0x74>)
 800b1f0:	f240 125d 	movw	r2, #349	; 0x15d
 800b1f4:	4916      	ldr	r1, [pc, #88]	; (800b250 <tcpip_try_callback+0x78>)
 800b1f6:	4817      	ldr	r0, [pc, #92]	; (800b254 <tcpip_try_callback+0x7c>)
 800b1f8:	f00e ff68 	bl	801a0cc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b1fc:	2008      	movs	r0, #8
 800b1fe:	f000 fdab 	bl	800bd58 <memp_malloc>
 800b202:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d102      	bne.n	800b210 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b20a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b20e:	e017      	b.n	800b240 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2201      	movs	r2, #1
 800b214:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	683a      	ldr	r2, [r7, #0]
 800b220:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b222:	68f9      	ldr	r1, [r7, #12]
 800b224:	4808      	ldr	r0, [pc, #32]	; (800b248 <tcpip_try_callback+0x70>)
 800b226:	f00a ff45 	bl	80160b4 <sys_mbox_trypost>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d006      	beq.n	800b23e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b230:	68f9      	ldr	r1, [r7, #12]
 800b232:	2008      	movs	r0, #8
 800b234:	f000 fe06 	bl	800be44 <memp_free>
    return ERR_MEM;
 800b238:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b23c:	e000      	b.n	800b240 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b23e:	2300      	movs	r3, #0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3710      	adds	r7, #16
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	20008f54 	.word	0x20008f54
 800b24c:	0801d1c4 	.word	0x0801d1c4
 800b250:	0801d23c 	.word	0x0801d23c
 800b254:	0801d214 	.word	0x0801d214

0800b258 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	60f8      	str	r0, [r7, #12]
 800b260:	60b9      	str	r1, [r7, #8]
 800b262:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b264:	4806      	ldr	r0, [pc, #24]	; (800b280 <tcpip_send_msg_wait_sem+0x28>)
 800b266:	f00b f873 	bl	8016350 <sys_mutex_lock>
  fn(apimsg);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	68b8      	ldr	r0, [r7, #8]
 800b26e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b270:	4803      	ldr	r0, [pc, #12]	; (800b280 <tcpip_send_msg_wait_sem+0x28>)
 800b272:	f00b f87c 	bl	801636e <sys_mutex_unlock>
  return ERR_OK;
 800b276:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3710      	adds	r7, #16
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	20008f58 	.word	0x20008f58

0800b284 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af02      	add	r7, sp, #8
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b28e:	f000 f8b9 	bl	800b404 <lwip_init>

  tcpip_init_done = initfunc;
 800b292:	4a17      	ldr	r2, [pc, #92]	; (800b2f0 <tcpip_init+0x6c>)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b298:	4a16      	ldr	r2, [pc, #88]	; (800b2f4 <tcpip_init+0x70>)
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b29e:	2106      	movs	r1, #6
 800b2a0:	4815      	ldr	r0, [pc, #84]	; (800b2f8 <tcpip_init+0x74>)
 800b2a2:	f00a fed3 	bl	801604c <sys_mbox_new>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d006      	beq.n	800b2ba <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b2ac:	4b13      	ldr	r3, [pc, #76]	; (800b2fc <tcpip_init+0x78>)
 800b2ae:	f240 2261 	movw	r2, #609	; 0x261
 800b2b2:	4913      	ldr	r1, [pc, #76]	; (800b300 <tcpip_init+0x7c>)
 800b2b4:	4813      	ldr	r0, [pc, #76]	; (800b304 <tcpip_init+0x80>)
 800b2b6:	f00e ff09 	bl	801a0cc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b2ba:	4813      	ldr	r0, [pc, #76]	; (800b308 <tcpip_init+0x84>)
 800b2bc:	f00b f82c 	bl	8016318 <sys_mutex_new>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d006      	beq.n	800b2d4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b2c6:	4b0d      	ldr	r3, [pc, #52]	; (800b2fc <tcpip_init+0x78>)
 800b2c8:	f240 2265 	movw	r2, #613	; 0x265
 800b2cc:	490f      	ldr	r1, [pc, #60]	; (800b30c <tcpip_init+0x88>)
 800b2ce:	480d      	ldr	r0, [pc, #52]	; (800b304 <tcpip_init+0x80>)
 800b2d0:	f00e fefc 	bl	801a0cc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	9300      	str	r3, [sp, #0]
 800b2d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2dc:	2200      	movs	r2, #0
 800b2de:	490c      	ldr	r1, [pc, #48]	; (800b310 <tcpip_init+0x8c>)
 800b2e0:	480c      	ldr	r0, [pc, #48]	; (800b314 <tcpip_init+0x90>)
 800b2e2:	f00b f851 	bl	8016388 <sys_thread_new>
}
 800b2e6:	bf00      	nop
 800b2e8:	3708      	adds	r7, #8
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	20008f4c 	.word	0x20008f4c
 800b2f4:	20008f50 	.word	0x20008f50
 800b2f8:	20008f54 	.word	0x20008f54
 800b2fc:	0801d1c4 	.word	0x0801d1c4
 800b300:	0801d24c 	.word	0x0801d24c
 800b304:	0801d214 	.word	0x0801d214
 800b308:	20008f58 	.word	0x20008f58
 800b30c:	0801d270 	.word	0x0801d270
 800b310:	0800b015 	.word	0x0800b015
 800b314:	0801d294 	.word	0x0801d294

0800b318 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d002      	beq.n	800b32e <fs_open+0x16>
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d102      	bne.n	800b334 <fs_open+0x1c>
    return ERR_ARG;
 800b32e:	f06f 030f 	mvn.w	r3, #15
 800b332:	e028      	b.n	800b386 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800b334:	4b16      	ldr	r3, [pc, #88]	; (800b390 <fs_open+0x78>)
 800b336:	60fb      	str	r3, [r7, #12]
 800b338:	e020      	b.n	800b37c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	4619      	mov	r1, r3
 800b340:	6838      	ldr	r0, [r7, #0]
 800b342:	f7f4 ff7d 	bl	8000240 <strcmp>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d114      	bne.n	800b376 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	689a      	ldr	r2, [r3, #8]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	68da      	ldr	r2, [r3, #12]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	68da      	ldr	r2, [r3, #12]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	7c1a      	ldrb	r2, [r3, #16]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800b372:	2300      	movs	r3, #0
 800b374:	e007      	b.n	800b386 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	60fb      	str	r3, [r7, #12]
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d1db      	bne.n	800b33a <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800b382:	f06f 0305 	mvn.w	r3, #5
}
 800b386:	4618      	mov	r0, r3
 800b388:	3710      	adds	r7, #16
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	08029434 	.word	0x08029434

0800b394 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800b39c:	bf00      	nop
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b3b2:	88fb      	ldrh	r3, [r7, #6]
 800b3b4:	021b      	lsls	r3, r3, #8
 800b3b6:	b21a      	sxth	r2, r3
 800b3b8:	88fb      	ldrh	r3, [r7, #6]
 800b3ba:	0a1b      	lsrs	r3, r3, #8
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	b21b      	sxth	r3, r3
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	b21b      	sxth	r3, r3
 800b3c4:	b29b      	uxth	r3, r3
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	370c      	adds	r7, #12
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr

0800b3d2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b3d2:	b480      	push	{r7}
 800b3d4:	b083      	sub	sp, #12
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	061a      	lsls	r2, r3, #24
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	021b      	lsls	r3, r3, #8
 800b3e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b3e6:	431a      	orrs	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	0a1b      	lsrs	r3, r3, #8
 800b3ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b3f0:	431a      	orrs	r2, r3
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	0e1b      	lsrs	r3, r3, #24
 800b3f6:	4313      	orrs	r3, r2
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	370c      	adds	r7, #12
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b40e:	f00a ff75 	bl	80162fc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b412:	f000 f8d5 	bl	800b5c0 <mem_init>
  memp_init();
 800b416:	f000 fc31 	bl	800bc7c <memp_init>
  pbuf_init();
  netif_init();
 800b41a:	f000 fd3d 	bl	800be98 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b41e:	f008 f84f 	bl	80134c0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b422:	f001 fe4d 	bl	800d0c0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b426:	f007 ff91 	bl	801334c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b42a:	bf00      	nop
 800b42c:	3708      	adds	r7, #8
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
	...

0800b434 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b434:	b480      	push	{r7}
 800b436:	b083      	sub	sp, #12
 800b438:	af00      	add	r7, sp, #0
 800b43a:	4603      	mov	r3, r0
 800b43c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b43e:	4b05      	ldr	r3, [pc, #20]	; (800b454 <ptr_to_mem+0x20>)
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	88fb      	ldrh	r3, [r7, #6]
 800b444:	4413      	add	r3, r2
}
 800b446:	4618      	mov	r0, r3
 800b448:	370c      	adds	r7, #12
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr
 800b452:	bf00      	nop
 800b454:	2000df88 	.word	0x2000df88

0800b458 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b458:	b480      	push	{r7}
 800b45a:	b083      	sub	sp, #12
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b460:	4b05      	ldr	r3, [pc, #20]	; (800b478 <mem_to_ptr+0x20>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	1ad3      	subs	r3, r2, r3
 800b468:	b29b      	uxth	r3, r3
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	370c      	adds	r7, #12
 800b46e:	46bd      	mov	sp, r7
 800b470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b474:	4770      	bx	lr
 800b476:	bf00      	nop
 800b478:	2000df88 	.word	0x2000df88

0800b47c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b47c:	b590      	push	{r4, r7, lr}
 800b47e:	b085      	sub	sp, #20
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b484:	4b45      	ldr	r3, [pc, #276]	; (800b59c <plug_holes+0x120>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d206      	bcs.n	800b49c <plug_holes+0x20>
 800b48e:	4b44      	ldr	r3, [pc, #272]	; (800b5a0 <plug_holes+0x124>)
 800b490:	f240 12df 	movw	r2, #479	; 0x1df
 800b494:	4943      	ldr	r1, [pc, #268]	; (800b5a4 <plug_holes+0x128>)
 800b496:	4844      	ldr	r0, [pc, #272]	; (800b5a8 <plug_holes+0x12c>)
 800b498:	f00e fe18 	bl	801a0cc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b49c:	4b43      	ldr	r3, [pc, #268]	; (800b5ac <plug_holes+0x130>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d306      	bcc.n	800b4b4 <plug_holes+0x38>
 800b4a6:	4b3e      	ldr	r3, [pc, #248]	; (800b5a0 <plug_holes+0x124>)
 800b4a8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b4ac:	4940      	ldr	r1, [pc, #256]	; (800b5b0 <plug_holes+0x134>)
 800b4ae:	483e      	ldr	r0, [pc, #248]	; (800b5a8 <plug_holes+0x12c>)
 800b4b0:	f00e fe0c 	bl	801a0cc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	791b      	ldrb	r3, [r3, #4]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d006      	beq.n	800b4ca <plug_holes+0x4e>
 800b4bc:	4b38      	ldr	r3, [pc, #224]	; (800b5a0 <plug_holes+0x124>)
 800b4be:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b4c2:	493c      	ldr	r1, [pc, #240]	; (800b5b4 <plug_holes+0x138>)
 800b4c4:	4838      	ldr	r0, [pc, #224]	; (800b5a8 <plug_holes+0x12c>)
 800b4c6:	f00e fe01 	bl	801a0cc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	881b      	ldrh	r3, [r3, #0]
 800b4ce:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b4d2:	d906      	bls.n	800b4e2 <plug_holes+0x66>
 800b4d4:	4b32      	ldr	r3, [pc, #200]	; (800b5a0 <plug_holes+0x124>)
 800b4d6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b4da:	4937      	ldr	r1, [pc, #220]	; (800b5b8 <plug_holes+0x13c>)
 800b4dc:	4832      	ldr	r0, [pc, #200]	; (800b5a8 <plug_holes+0x12c>)
 800b4de:	f00e fdf5 	bl	801a0cc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	881b      	ldrh	r3, [r3, #0]
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7ff ffa4 	bl	800b434 <ptr_to_mem>
 800b4ec:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b4ee:	687a      	ldr	r2, [r7, #4]
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d024      	beq.n	800b540 <plug_holes+0xc4>
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	791b      	ldrb	r3, [r3, #4]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d120      	bne.n	800b540 <plug_holes+0xc4>
 800b4fe:	4b2b      	ldr	r3, [pc, #172]	; (800b5ac <plug_holes+0x130>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	68fa      	ldr	r2, [r7, #12]
 800b504:	429a      	cmp	r2, r3
 800b506:	d01b      	beq.n	800b540 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b508:	4b2c      	ldr	r3, [pc, #176]	; (800b5bc <plug_holes+0x140>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	68fa      	ldr	r2, [r7, #12]
 800b50e:	429a      	cmp	r2, r3
 800b510:	d102      	bne.n	800b518 <plug_holes+0x9c>
      lfree = mem;
 800b512:	4a2a      	ldr	r2, [pc, #168]	; (800b5bc <plug_holes+0x140>)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	881a      	ldrh	r2, [r3, #0]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	881b      	ldrh	r3, [r3, #0]
 800b524:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b528:	d00a      	beq.n	800b540 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	881b      	ldrh	r3, [r3, #0]
 800b52e:	4618      	mov	r0, r3
 800b530:	f7ff ff80 	bl	800b434 <ptr_to_mem>
 800b534:	4604      	mov	r4, r0
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f7ff ff8e 	bl	800b458 <mem_to_ptr>
 800b53c:	4603      	mov	r3, r0
 800b53e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	885b      	ldrh	r3, [r3, #2]
 800b544:	4618      	mov	r0, r3
 800b546:	f7ff ff75 	bl	800b434 <ptr_to_mem>
 800b54a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b54c:	68ba      	ldr	r2, [r7, #8]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	429a      	cmp	r2, r3
 800b552:	d01f      	beq.n	800b594 <plug_holes+0x118>
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	791b      	ldrb	r3, [r3, #4]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d11b      	bne.n	800b594 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b55c:	4b17      	ldr	r3, [pc, #92]	; (800b5bc <plug_holes+0x140>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	429a      	cmp	r2, r3
 800b564:	d102      	bne.n	800b56c <plug_holes+0xf0>
      lfree = pmem;
 800b566:	4a15      	ldr	r2, [pc, #84]	; (800b5bc <plug_holes+0x140>)
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	881a      	ldrh	r2, [r3, #0]
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	881b      	ldrh	r3, [r3, #0]
 800b578:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b57c:	d00a      	beq.n	800b594 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	881b      	ldrh	r3, [r3, #0]
 800b582:	4618      	mov	r0, r3
 800b584:	f7ff ff56 	bl	800b434 <ptr_to_mem>
 800b588:	4604      	mov	r4, r0
 800b58a:	68b8      	ldr	r0, [r7, #8]
 800b58c:	f7ff ff64 	bl	800b458 <mem_to_ptr>
 800b590:	4603      	mov	r3, r0
 800b592:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b594:	bf00      	nop
 800b596:	3714      	adds	r7, #20
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd90      	pop	{r4, r7, pc}
 800b59c:	2000df88 	.word	0x2000df88
 800b5a0:	0801d2a4 	.word	0x0801d2a4
 800b5a4:	0801d2d4 	.word	0x0801d2d4
 800b5a8:	0801d2ec 	.word	0x0801d2ec
 800b5ac:	2000df8c 	.word	0x2000df8c
 800b5b0:	0801d314 	.word	0x0801d314
 800b5b4:	0801d330 	.word	0x0801d330
 800b5b8:	0801d34c 	.word	0x0801d34c
 800b5bc:	2000df94 	.word	0x2000df94

0800b5c0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b5c6:	4b1f      	ldr	r3, [pc, #124]	; (800b644 <mem_init+0x84>)
 800b5c8:	3303      	adds	r3, #3
 800b5ca:	f023 0303 	bic.w	r3, r3, #3
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	4b1d      	ldr	r3, [pc, #116]	; (800b648 <mem_init+0x88>)
 800b5d2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b5d4:	4b1c      	ldr	r3, [pc, #112]	; (800b648 <mem_init+0x88>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800b5e0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b5ee:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800b5f2:	f7ff ff1f 	bl	800b434 <ptr_to_mem>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	4a14      	ldr	r2, [pc, #80]	; (800b64c <mem_init+0x8c>)
 800b5fa:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b5fc:	4b13      	ldr	r3, [pc, #76]	; (800b64c <mem_init+0x8c>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2201      	movs	r2, #1
 800b602:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b604:	4b11      	ldr	r3, [pc, #68]	; (800b64c <mem_init+0x8c>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800b60c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b60e:	4b0f      	ldr	r3, [pc, #60]	; (800b64c <mem_init+0x8c>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800b616:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b618:	4b0b      	ldr	r3, [pc, #44]	; (800b648 <mem_init+0x88>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	4a0c      	ldr	r2, [pc, #48]	; (800b650 <mem_init+0x90>)
 800b61e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b620:	480c      	ldr	r0, [pc, #48]	; (800b654 <mem_init+0x94>)
 800b622:	f00a fe79 	bl	8016318 <sys_mutex_new>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d006      	beq.n	800b63a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b62c:	4b0a      	ldr	r3, [pc, #40]	; (800b658 <mem_init+0x98>)
 800b62e:	f240 221f 	movw	r2, #543	; 0x21f
 800b632:	490a      	ldr	r1, [pc, #40]	; (800b65c <mem_init+0x9c>)
 800b634:	480a      	ldr	r0, [pc, #40]	; (800b660 <mem_init+0xa0>)
 800b636:	f00e fd49 	bl	801a0cc <iprintf>
  }
}
 800b63a:	bf00      	nop
 800b63c:	3708      	adds	r7, #8
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	20008f74 	.word	0x20008f74
 800b648:	2000df88 	.word	0x2000df88
 800b64c:	2000df8c 	.word	0x2000df8c
 800b650:	2000df94 	.word	0x2000df94
 800b654:	2000df90 	.word	0x2000df90
 800b658:	0801d2a4 	.word	0x0801d2a4
 800b65c:	0801d378 	.word	0x0801d378
 800b660:	0801d2ec 	.word	0x0801d2ec

0800b664 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b086      	sub	sp, #24
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f7ff fef3 	bl	800b458 <mem_to_ptr>
 800b672:	4603      	mov	r3, r0
 800b674:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	881b      	ldrh	r3, [r3, #0]
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7ff feda 	bl	800b434 <ptr_to_mem>
 800b680:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	885b      	ldrh	r3, [r3, #2]
 800b686:	4618      	mov	r0, r3
 800b688:	f7ff fed4 	bl	800b434 <ptr_to_mem>
 800b68c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	881b      	ldrh	r3, [r3, #0]
 800b692:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b696:	d818      	bhi.n	800b6ca <mem_link_valid+0x66>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	885b      	ldrh	r3, [r3, #2]
 800b69c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b6a0:	d813      	bhi.n	800b6ca <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b6a6:	8afa      	ldrh	r2, [r7, #22]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d004      	beq.n	800b6b6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	881b      	ldrh	r3, [r3, #0]
 800b6b0:	8afa      	ldrh	r2, [r7, #22]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d109      	bne.n	800b6ca <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b6b6:	4b08      	ldr	r3, [pc, #32]	; (800b6d8 <mem_link_valid+0x74>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b6ba:	693a      	ldr	r2, [r7, #16]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d006      	beq.n	800b6ce <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	885b      	ldrh	r3, [r3, #2]
 800b6c4:	8afa      	ldrh	r2, [r7, #22]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d001      	beq.n	800b6ce <mem_link_valid+0x6a>
    return 0;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	e000      	b.n	800b6d0 <mem_link_valid+0x6c>
  }
  return 1;
 800b6ce:	2301      	movs	r3, #1
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3718      	adds	r7, #24
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	2000df8c 	.word	0x2000df8c

0800b6dc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b088      	sub	sp, #32
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d070      	beq.n	800b7cc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f003 0303 	and.w	r3, r3, #3
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d00d      	beq.n	800b710 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b6f4:	4b37      	ldr	r3, [pc, #220]	; (800b7d4 <mem_free+0xf8>)
 800b6f6:	f240 2273 	movw	r2, #627	; 0x273
 800b6fa:	4937      	ldr	r1, [pc, #220]	; (800b7d8 <mem_free+0xfc>)
 800b6fc:	4837      	ldr	r0, [pc, #220]	; (800b7dc <mem_free+0x100>)
 800b6fe:	f00e fce5 	bl	801a0cc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b702:	f00a fe67 	bl	80163d4 <sys_arch_protect>
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	68f8      	ldr	r0, [r7, #12]
 800b70a:	f00a fe71 	bl	80163f0 <sys_arch_unprotect>
    return;
 800b70e:	e05e      	b.n	800b7ce <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	3b08      	subs	r3, #8
 800b714:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b716:	4b32      	ldr	r3, [pc, #200]	; (800b7e0 <mem_free+0x104>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	69fa      	ldr	r2, [r7, #28]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d306      	bcc.n	800b72e <mem_free+0x52>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f103 020c 	add.w	r2, r3, #12
 800b726:	4b2f      	ldr	r3, [pc, #188]	; (800b7e4 <mem_free+0x108>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d90d      	bls.n	800b74a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b72e:	4b29      	ldr	r3, [pc, #164]	; (800b7d4 <mem_free+0xf8>)
 800b730:	f240 227f 	movw	r2, #639	; 0x27f
 800b734:	492c      	ldr	r1, [pc, #176]	; (800b7e8 <mem_free+0x10c>)
 800b736:	4829      	ldr	r0, [pc, #164]	; (800b7dc <mem_free+0x100>)
 800b738:	f00e fcc8 	bl	801a0cc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b73c:	f00a fe4a 	bl	80163d4 <sys_arch_protect>
 800b740:	6138      	str	r0, [r7, #16]
 800b742:	6938      	ldr	r0, [r7, #16]
 800b744:	f00a fe54 	bl	80163f0 <sys_arch_unprotect>
    return;
 800b748:	e041      	b.n	800b7ce <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b74a:	4828      	ldr	r0, [pc, #160]	; (800b7ec <mem_free+0x110>)
 800b74c:	f00a fe00 	bl	8016350 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b750:	69fb      	ldr	r3, [r7, #28]
 800b752:	791b      	ldrb	r3, [r3, #4]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d110      	bne.n	800b77a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b758:	4b1e      	ldr	r3, [pc, #120]	; (800b7d4 <mem_free+0xf8>)
 800b75a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b75e:	4924      	ldr	r1, [pc, #144]	; (800b7f0 <mem_free+0x114>)
 800b760:	481e      	ldr	r0, [pc, #120]	; (800b7dc <mem_free+0x100>)
 800b762:	f00e fcb3 	bl	801a0cc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b766:	4821      	ldr	r0, [pc, #132]	; (800b7ec <mem_free+0x110>)
 800b768:	f00a fe01 	bl	801636e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b76c:	f00a fe32 	bl	80163d4 <sys_arch_protect>
 800b770:	6178      	str	r0, [r7, #20]
 800b772:	6978      	ldr	r0, [r7, #20]
 800b774:	f00a fe3c 	bl	80163f0 <sys_arch_unprotect>
    return;
 800b778:	e029      	b.n	800b7ce <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b77a:	69f8      	ldr	r0, [r7, #28]
 800b77c:	f7ff ff72 	bl	800b664 <mem_link_valid>
 800b780:	4603      	mov	r3, r0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d110      	bne.n	800b7a8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b786:	4b13      	ldr	r3, [pc, #76]	; (800b7d4 <mem_free+0xf8>)
 800b788:	f240 2295 	movw	r2, #661	; 0x295
 800b78c:	4919      	ldr	r1, [pc, #100]	; (800b7f4 <mem_free+0x118>)
 800b78e:	4813      	ldr	r0, [pc, #76]	; (800b7dc <mem_free+0x100>)
 800b790:	f00e fc9c 	bl	801a0cc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b794:	4815      	ldr	r0, [pc, #84]	; (800b7ec <mem_free+0x110>)
 800b796:	f00a fdea 	bl	801636e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b79a:	f00a fe1b 	bl	80163d4 <sys_arch_protect>
 800b79e:	61b8      	str	r0, [r7, #24]
 800b7a0:	69b8      	ldr	r0, [r7, #24]
 800b7a2:	f00a fe25 	bl	80163f0 <sys_arch_unprotect>
    return;
 800b7a6:	e012      	b.n	800b7ce <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b7a8:	69fb      	ldr	r3, [r7, #28]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b7ae:	4b12      	ldr	r3, [pc, #72]	; (800b7f8 <mem_free+0x11c>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	69fa      	ldr	r2, [r7, #28]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d202      	bcs.n	800b7be <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b7b8:	4a0f      	ldr	r2, [pc, #60]	; (800b7f8 <mem_free+0x11c>)
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b7be:	69f8      	ldr	r0, [r7, #28]
 800b7c0:	f7ff fe5c 	bl	800b47c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b7c4:	4809      	ldr	r0, [pc, #36]	; (800b7ec <mem_free+0x110>)
 800b7c6:	f00a fdd2 	bl	801636e <sys_mutex_unlock>
 800b7ca:	e000      	b.n	800b7ce <mem_free+0xf2>
    return;
 800b7cc:	bf00      	nop
}
 800b7ce:	3720      	adds	r7, #32
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	0801d2a4 	.word	0x0801d2a4
 800b7d8:	0801d394 	.word	0x0801d394
 800b7dc:	0801d2ec 	.word	0x0801d2ec
 800b7e0:	2000df88 	.word	0x2000df88
 800b7e4:	2000df8c 	.word	0x2000df8c
 800b7e8:	0801d3b8 	.word	0x0801d3b8
 800b7ec:	2000df90 	.word	0x2000df90
 800b7f0:	0801d3d4 	.word	0x0801d3d4
 800b7f4:	0801d3fc 	.word	0x0801d3fc
 800b7f8:	2000df94 	.word	0x2000df94

0800b7fc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b088      	sub	sp, #32
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	460b      	mov	r3, r1
 800b806:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b808:	887b      	ldrh	r3, [r7, #2]
 800b80a:	3303      	adds	r3, #3
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	f023 0303 	bic.w	r3, r3, #3
 800b812:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b814:	8bfb      	ldrh	r3, [r7, #30]
 800b816:	2b0b      	cmp	r3, #11
 800b818:	d801      	bhi.n	800b81e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b81a:	230c      	movs	r3, #12
 800b81c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b81e:	8bfb      	ldrh	r3, [r7, #30]
 800b820:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b824:	d803      	bhi.n	800b82e <mem_trim+0x32>
 800b826:	8bfa      	ldrh	r2, [r7, #30]
 800b828:	887b      	ldrh	r3, [r7, #2]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d201      	bcs.n	800b832 <mem_trim+0x36>
    return NULL;
 800b82e:	2300      	movs	r3, #0
 800b830:	e0d8      	b.n	800b9e4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b832:	4b6e      	ldr	r3, [pc, #440]	; (800b9ec <mem_trim+0x1f0>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d304      	bcc.n	800b846 <mem_trim+0x4a>
 800b83c:	4b6c      	ldr	r3, [pc, #432]	; (800b9f0 <mem_trim+0x1f4>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	687a      	ldr	r2, [r7, #4]
 800b842:	429a      	cmp	r2, r3
 800b844:	d306      	bcc.n	800b854 <mem_trim+0x58>
 800b846:	4b6b      	ldr	r3, [pc, #428]	; (800b9f4 <mem_trim+0x1f8>)
 800b848:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b84c:	496a      	ldr	r1, [pc, #424]	; (800b9f8 <mem_trim+0x1fc>)
 800b84e:	486b      	ldr	r0, [pc, #428]	; (800b9fc <mem_trim+0x200>)
 800b850:	f00e fc3c 	bl	801a0cc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b854:	4b65      	ldr	r3, [pc, #404]	; (800b9ec <mem_trim+0x1f0>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d304      	bcc.n	800b868 <mem_trim+0x6c>
 800b85e:	4b64      	ldr	r3, [pc, #400]	; (800b9f0 <mem_trim+0x1f4>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	687a      	ldr	r2, [r7, #4]
 800b864:	429a      	cmp	r2, r3
 800b866:	d307      	bcc.n	800b878 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b868:	f00a fdb4 	bl	80163d4 <sys_arch_protect>
 800b86c:	60b8      	str	r0, [r7, #8]
 800b86e:	68b8      	ldr	r0, [r7, #8]
 800b870:	f00a fdbe 	bl	80163f0 <sys_arch_unprotect>
    return rmem;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	e0b5      	b.n	800b9e4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	3b08      	subs	r3, #8
 800b87c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b87e:	69b8      	ldr	r0, [r7, #24]
 800b880:	f7ff fdea 	bl	800b458 <mem_to_ptr>
 800b884:	4603      	mov	r3, r0
 800b886:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b888:	69bb      	ldr	r3, [r7, #24]
 800b88a:	881a      	ldrh	r2, [r3, #0]
 800b88c:	8afb      	ldrh	r3, [r7, #22]
 800b88e:	1ad3      	subs	r3, r2, r3
 800b890:	b29b      	uxth	r3, r3
 800b892:	3b08      	subs	r3, #8
 800b894:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b896:	8bfa      	ldrh	r2, [r7, #30]
 800b898:	8abb      	ldrh	r3, [r7, #20]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d906      	bls.n	800b8ac <mem_trim+0xb0>
 800b89e:	4b55      	ldr	r3, [pc, #340]	; (800b9f4 <mem_trim+0x1f8>)
 800b8a0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b8a4:	4956      	ldr	r1, [pc, #344]	; (800ba00 <mem_trim+0x204>)
 800b8a6:	4855      	ldr	r0, [pc, #340]	; (800b9fc <mem_trim+0x200>)
 800b8a8:	f00e fc10 	bl	801a0cc <iprintf>
  if (newsize > size) {
 800b8ac:	8bfa      	ldrh	r2, [r7, #30]
 800b8ae:	8abb      	ldrh	r3, [r7, #20]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d901      	bls.n	800b8b8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	e095      	b.n	800b9e4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800b8b8:	8bfa      	ldrh	r2, [r7, #30]
 800b8ba:	8abb      	ldrh	r3, [r7, #20]
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d101      	bne.n	800b8c4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	e08f      	b.n	800b9e4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b8c4:	484f      	ldr	r0, [pc, #316]	; (800ba04 <mem_trim+0x208>)
 800b8c6:	f00a fd43 	bl	8016350 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	881b      	ldrh	r3, [r3, #0]
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7ff fdb0 	bl	800b434 <ptr_to_mem>
 800b8d4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	791b      	ldrb	r3, [r3, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d13f      	bne.n	800b95e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	881b      	ldrh	r3, [r3, #0]
 800b8e2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b8e6:	d106      	bne.n	800b8f6 <mem_trim+0xfa>
 800b8e8:	4b42      	ldr	r3, [pc, #264]	; (800b9f4 <mem_trim+0x1f8>)
 800b8ea:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b8ee:	4946      	ldr	r1, [pc, #280]	; (800ba08 <mem_trim+0x20c>)
 800b8f0:	4842      	ldr	r0, [pc, #264]	; (800b9fc <mem_trim+0x200>)
 800b8f2:	f00e fbeb 	bl	801a0cc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	881b      	ldrh	r3, [r3, #0]
 800b8fa:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b8fc:	8afa      	ldrh	r2, [r7, #22]
 800b8fe:	8bfb      	ldrh	r3, [r7, #30]
 800b900:	4413      	add	r3, r2
 800b902:	b29b      	uxth	r3, r3
 800b904:	3308      	adds	r3, #8
 800b906:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b908:	4b40      	ldr	r3, [pc, #256]	; (800ba0c <mem_trim+0x210>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	693a      	ldr	r2, [r7, #16]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d106      	bne.n	800b920 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800b912:	89fb      	ldrh	r3, [r7, #14]
 800b914:	4618      	mov	r0, r3
 800b916:	f7ff fd8d 	bl	800b434 <ptr_to_mem>
 800b91a:	4603      	mov	r3, r0
 800b91c:	4a3b      	ldr	r2, [pc, #236]	; (800ba0c <mem_trim+0x210>)
 800b91e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b920:	89fb      	ldrh	r3, [r7, #14]
 800b922:	4618      	mov	r0, r3
 800b924:	f7ff fd86 	bl	800b434 <ptr_to_mem>
 800b928:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	2200      	movs	r2, #0
 800b92e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	89ba      	ldrh	r2, [r7, #12]
 800b934:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	8afa      	ldrh	r2, [r7, #22]
 800b93a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b93c:	69bb      	ldr	r3, [r7, #24]
 800b93e:	89fa      	ldrh	r2, [r7, #14]
 800b940:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	881b      	ldrh	r3, [r3, #0]
 800b946:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b94a:	d047      	beq.n	800b9dc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	881b      	ldrh	r3, [r3, #0]
 800b950:	4618      	mov	r0, r3
 800b952:	f7ff fd6f 	bl	800b434 <ptr_to_mem>
 800b956:	4602      	mov	r2, r0
 800b958:	89fb      	ldrh	r3, [r7, #14]
 800b95a:	8053      	strh	r3, [r2, #2]
 800b95c:	e03e      	b.n	800b9dc <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b95e:	8bfb      	ldrh	r3, [r7, #30]
 800b960:	f103 0214 	add.w	r2, r3, #20
 800b964:	8abb      	ldrh	r3, [r7, #20]
 800b966:	429a      	cmp	r2, r3
 800b968:	d838      	bhi.n	800b9dc <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b96a:	8afa      	ldrh	r2, [r7, #22]
 800b96c:	8bfb      	ldrh	r3, [r7, #30]
 800b96e:	4413      	add	r3, r2
 800b970:	b29b      	uxth	r3, r3
 800b972:	3308      	adds	r3, #8
 800b974:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b976:	69bb      	ldr	r3, [r7, #24]
 800b978:	881b      	ldrh	r3, [r3, #0]
 800b97a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b97e:	d106      	bne.n	800b98e <mem_trim+0x192>
 800b980:	4b1c      	ldr	r3, [pc, #112]	; (800b9f4 <mem_trim+0x1f8>)
 800b982:	f240 3216 	movw	r2, #790	; 0x316
 800b986:	4920      	ldr	r1, [pc, #128]	; (800ba08 <mem_trim+0x20c>)
 800b988:	481c      	ldr	r0, [pc, #112]	; (800b9fc <mem_trim+0x200>)
 800b98a:	f00e fb9f 	bl	801a0cc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b98e:	89fb      	ldrh	r3, [r7, #14]
 800b990:	4618      	mov	r0, r3
 800b992:	f7ff fd4f 	bl	800b434 <ptr_to_mem>
 800b996:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b998:	4b1c      	ldr	r3, [pc, #112]	; (800ba0c <mem_trim+0x210>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	693a      	ldr	r2, [r7, #16]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d202      	bcs.n	800b9a8 <mem_trim+0x1ac>
      lfree = mem2;
 800b9a2:	4a1a      	ldr	r2, [pc, #104]	; (800ba0c <mem_trim+0x210>)
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	881a      	ldrh	r2, [r3, #0]
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	8afa      	ldrh	r2, [r7, #22]
 800b9ba:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b9bc:	69bb      	ldr	r3, [r7, #24]
 800b9be:	89fa      	ldrh	r2, [r7, #14]
 800b9c0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	881b      	ldrh	r3, [r3, #0]
 800b9c6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b9ca:	d007      	beq.n	800b9dc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	881b      	ldrh	r3, [r3, #0]
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7ff fd2f 	bl	800b434 <ptr_to_mem>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	89fb      	ldrh	r3, [r7, #14]
 800b9da:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b9dc:	4809      	ldr	r0, [pc, #36]	; (800ba04 <mem_trim+0x208>)
 800b9de:	f00a fcc6 	bl	801636e <sys_mutex_unlock>
  return rmem;
 800b9e2:	687b      	ldr	r3, [r7, #4]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3720      	adds	r7, #32
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	2000df88 	.word	0x2000df88
 800b9f0:	2000df8c 	.word	0x2000df8c
 800b9f4:	0801d2a4 	.word	0x0801d2a4
 800b9f8:	0801d430 	.word	0x0801d430
 800b9fc:	0801d2ec 	.word	0x0801d2ec
 800ba00:	0801d448 	.word	0x0801d448
 800ba04:	2000df90 	.word	0x2000df90
 800ba08:	0801d468 	.word	0x0801d468
 800ba0c:	2000df94 	.word	0x2000df94

0800ba10 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b088      	sub	sp, #32
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	4603      	mov	r3, r0
 800ba18:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ba1a:	88fb      	ldrh	r3, [r7, #6]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d101      	bne.n	800ba24 <mem_malloc+0x14>
    return NULL;
 800ba20:	2300      	movs	r3, #0
 800ba22:	e0e2      	b.n	800bbea <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ba24:	88fb      	ldrh	r3, [r7, #6]
 800ba26:	3303      	adds	r3, #3
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	f023 0303 	bic.w	r3, r3, #3
 800ba2e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ba30:	8bbb      	ldrh	r3, [r7, #28]
 800ba32:	2b0b      	cmp	r3, #11
 800ba34:	d801      	bhi.n	800ba3a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ba36:	230c      	movs	r3, #12
 800ba38:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ba3a:	8bbb      	ldrh	r3, [r7, #28]
 800ba3c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800ba40:	d803      	bhi.n	800ba4a <mem_malloc+0x3a>
 800ba42:	8bba      	ldrh	r2, [r7, #28]
 800ba44:	88fb      	ldrh	r3, [r7, #6]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d201      	bcs.n	800ba4e <mem_malloc+0x3e>
    return NULL;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	e0cd      	b.n	800bbea <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ba4e:	4869      	ldr	r0, [pc, #420]	; (800bbf4 <mem_malloc+0x1e4>)
 800ba50:	f00a fc7e 	bl	8016350 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ba54:	4b68      	ldr	r3, [pc, #416]	; (800bbf8 <mem_malloc+0x1e8>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7ff fcfd 	bl	800b458 <mem_to_ptr>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	83fb      	strh	r3, [r7, #30]
 800ba62:	e0b7      	b.n	800bbd4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ba64:	8bfb      	ldrh	r3, [r7, #30]
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7ff fce4 	bl	800b434 <ptr_to_mem>
 800ba6c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	791b      	ldrb	r3, [r3, #4]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	f040 80a7 	bne.w	800bbc6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	881b      	ldrh	r3, [r3, #0]
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	8bfb      	ldrh	r3, [r7, #30]
 800ba80:	1ad3      	subs	r3, r2, r3
 800ba82:	f1a3 0208 	sub.w	r2, r3, #8
 800ba86:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	f0c0 809c 	bcc.w	800bbc6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	881b      	ldrh	r3, [r3, #0]
 800ba92:	461a      	mov	r2, r3
 800ba94:	8bfb      	ldrh	r3, [r7, #30]
 800ba96:	1ad3      	subs	r3, r2, r3
 800ba98:	f1a3 0208 	sub.w	r2, r3, #8
 800ba9c:	8bbb      	ldrh	r3, [r7, #28]
 800ba9e:	3314      	adds	r3, #20
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d333      	bcc.n	800bb0c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800baa4:	8bfa      	ldrh	r2, [r7, #30]
 800baa6:	8bbb      	ldrh	r3, [r7, #28]
 800baa8:	4413      	add	r3, r2
 800baaa:	b29b      	uxth	r3, r3
 800baac:	3308      	adds	r3, #8
 800baae:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bab0:	8a7b      	ldrh	r3, [r7, #18]
 800bab2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800bab6:	d106      	bne.n	800bac6 <mem_malloc+0xb6>
 800bab8:	4b50      	ldr	r3, [pc, #320]	; (800bbfc <mem_malloc+0x1ec>)
 800baba:	f240 3287 	movw	r2, #903	; 0x387
 800babe:	4950      	ldr	r1, [pc, #320]	; (800bc00 <mem_malloc+0x1f0>)
 800bac0:	4850      	ldr	r0, [pc, #320]	; (800bc04 <mem_malloc+0x1f4>)
 800bac2:	f00e fb03 	bl	801a0cc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800bac6:	8a7b      	ldrh	r3, [r7, #18]
 800bac8:	4618      	mov	r0, r3
 800baca:	f7ff fcb3 	bl	800b434 <ptr_to_mem>
 800bace:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2200      	movs	r2, #0
 800bad4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	881a      	ldrh	r2, [r3, #0]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	8bfa      	ldrh	r2, [r7, #30]
 800bae2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	8a7a      	ldrh	r2, [r7, #18]
 800bae8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	2201      	movs	r2, #1
 800baee:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	881b      	ldrh	r3, [r3, #0]
 800baf4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800baf8:	d00b      	beq.n	800bb12 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	881b      	ldrh	r3, [r3, #0]
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7ff fc98 	bl	800b434 <ptr_to_mem>
 800bb04:	4602      	mov	r2, r0
 800bb06:	8a7b      	ldrh	r3, [r7, #18]
 800bb08:	8053      	strh	r3, [r2, #2]
 800bb0a:	e002      	b.n	800bb12 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800bb12:	4b39      	ldr	r3, [pc, #228]	; (800bbf8 <mem_malloc+0x1e8>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	697a      	ldr	r2, [r7, #20]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d127      	bne.n	800bb6c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800bb1c:	4b36      	ldr	r3, [pc, #216]	; (800bbf8 <mem_malloc+0x1e8>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800bb22:	e005      	b.n	800bb30 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800bb24:	69bb      	ldr	r3, [r7, #24]
 800bb26:	881b      	ldrh	r3, [r3, #0]
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7ff fc83 	bl	800b434 <ptr_to_mem>
 800bb2e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	791b      	ldrb	r3, [r3, #4]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d004      	beq.n	800bb42 <mem_malloc+0x132>
 800bb38:	4b33      	ldr	r3, [pc, #204]	; (800bc08 <mem_malloc+0x1f8>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	69ba      	ldr	r2, [r7, #24]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d1f0      	bne.n	800bb24 <mem_malloc+0x114>
          }
          lfree = cur;
 800bb42:	4a2d      	ldr	r2, [pc, #180]	; (800bbf8 <mem_malloc+0x1e8>)
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800bb48:	4b2b      	ldr	r3, [pc, #172]	; (800bbf8 <mem_malloc+0x1e8>)
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	4b2e      	ldr	r3, [pc, #184]	; (800bc08 <mem_malloc+0x1f8>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d00b      	beq.n	800bb6c <mem_malloc+0x15c>
 800bb54:	4b28      	ldr	r3, [pc, #160]	; (800bbf8 <mem_malloc+0x1e8>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	791b      	ldrb	r3, [r3, #4]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d006      	beq.n	800bb6c <mem_malloc+0x15c>
 800bb5e:	4b27      	ldr	r3, [pc, #156]	; (800bbfc <mem_malloc+0x1ec>)
 800bb60:	f240 32b5 	movw	r2, #949	; 0x3b5
 800bb64:	4929      	ldr	r1, [pc, #164]	; (800bc0c <mem_malloc+0x1fc>)
 800bb66:	4827      	ldr	r0, [pc, #156]	; (800bc04 <mem_malloc+0x1f4>)
 800bb68:	f00e fab0 	bl	801a0cc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800bb6c:	4821      	ldr	r0, [pc, #132]	; (800bbf4 <mem_malloc+0x1e4>)
 800bb6e:	f00a fbfe 	bl	801636e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bb72:	8bba      	ldrh	r2, [r7, #28]
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	4413      	add	r3, r2
 800bb78:	3308      	adds	r3, #8
 800bb7a:	4a23      	ldr	r2, [pc, #140]	; (800bc08 <mem_malloc+0x1f8>)
 800bb7c:	6812      	ldr	r2, [r2, #0]
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d906      	bls.n	800bb90 <mem_malloc+0x180>
 800bb82:	4b1e      	ldr	r3, [pc, #120]	; (800bbfc <mem_malloc+0x1ec>)
 800bb84:	f240 32b9 	movw	r2, #953	; 0x3b9
 800bb88:	4921      	ldr	r1, [pc, #132]	; (800bc10 <mem_malloc+0x200>)
 800bb8a:	481e      	ldr	r0, [pc, #120]	; (800bc04 <mem_malloc+0x1f4>)
 800bb8c:	f00e fa9e 	bl	801a0cc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	f003 0303 	and.w	r3, r3, #3
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d006      	beq.n	800bba8 <mem_malloc+0x198>
 800bb9a:	4b18      	ldr	r3, [pc, #96]	; (800bbfc <mem_malloc+0x1ec>)
 800bb9c:	f240 32bb 	movw	r2, #955	; 0x3bb
 800bba0:	491c      	ldr	r1, [pc, #112]	; (800bc14 <mem_malloc+0x204>)
 800bba2:	4818      	ldr	r0, [pc, #96]	; (800bc04 <mem_malloc+0x1f4>)
 800bba4:	f00e fa92 	bl	801a0cc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	f003 0303 	and.w	r3, r3, #3
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d006      	beq.n	800bbc0 <mem_malloc+0x1b0>
 800bbb2:	4b12      	ldr	r3, [pc, #72]	; (800bbfc <mem_malloc+0x1ec>)
 800bbb4:	f240 32bd 	movw	r2, #957	; 0x3bd
 800bbb8:	4917      	ldr	r1, [pc, #92]	; (800bc18 <mem_malloc+0x208>)
 800bbba:	4812      	ldr	r0, [pc, #72]	; (800bc04 <mem_malloc+0x1f4>)
 800bbbc:	f00e fa86 	bl	801a0cc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	3308      	adds	r3, #8
 800bbc4:	e011      	b.n	800bbea <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800bbc6:	8bfb      	ldrh	r3, [r7, #30]
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7ff fc33 	bl	800b434 <ptr_to_mem>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	881b      	ldrh	r3, [r3, #0]
 800bbd2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bbd4:	8bfa      	ldrh	r2, [r7, #30]
 800bbd6:	8bbb      	ldrh	r3, [r7, #28]
 800bbd8:	f5c3 43a0 	rsb	r3, r3, #20480	; 0x5000
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	f4ff af41 	bcc.w	800ba64 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800bbe2:	4804      	ldr	r0, [pc, #16]	; (800bbf4 <mem_malloc+0x1e4>)
 800bbe4:	f00a fbc3 	bl	801636e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bbe8:	2300      	movs	r3, #0
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3720      	adds	r7, #32
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	2000df90 	.word	0x2000df90
 800bbf8:	2000df94 	.word	0x2000df94
 800bbfc:	0801d2a4 	.word	0x0801d2a4
 800bc00:	0801d468 	.word	0x0801d468
 800bc04:	0801d2ec 	.word	0x0801d2ec
 800bc08:	2000df8c 	.word	0x2000df8c
 800bc0c:	0801d47c 	.word	0x0801d47c
 800bc10:	0801d498 	.word	0x0801d498
 800bc14:	0801d4c8 	.word	0x0801d4c8
 800bc18:	0801d4f8 	.word	0x0801d4f8

0800bc1c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b085      	sub	sp, #20
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	3303      	adds	r3, #3
 800bc32:	f023 0303 	bic.w	r3, r3, #3
 800bc36:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bc38:	2300      	movs	r3, #0
 800bc3a:	60fb      	str	r3, [r7, #12]
 800bc3c:	e011      	b.n	800bc62 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	689b      	ldr	r3, [r3, #8]
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	689b      	ldr	r3, [r3, #8]
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	881b      	ldrh	r3, [r3, #0]
 800bc54:	461a      	mov	r2, r3
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	4413      	add	r3, r2
 800bc5a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	3301      	adds	r3, #1
 800bc60:	60fb      	str	r3, [r7, #12]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	885b      	ldrh	r3, [r3, #2]
 800bc66:	461a      	mov	r2, r3
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	dbe7      	blt.n	800bc3e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bc6e:	bf00      	nop
 800bc70:	bf00      	nop
 800bc72:	3714      	adds	r7, #20
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bc82:	2300      	movs	r3, #0
 800bc84:	80fb      	strh	r3, [r7, #6]
 800bc86:	e009      	b.n	800bc9c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bc88:	88fb      	ldrh	r3, [r7, #6]
 800bc8a:	4a08      	ldr	r2, [pc, #32]	; (800bcac <memp_init+0x30>)
 800bc8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc90:	4618      	mov	r0, r3
 800bc92:	f7ff ffc3 	bl	800bc1c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bc96:	88fb      	ldrh	r3, [r7, #6]
 800bc98:	3301      	adds	r3, #1
 800bc9a:	80fb      	strh	r3, [r7, #6]
 800bc9c:	88fb      	ldrh	r3, [r7, #6]
 800bc9e:	2b0c      	cmp	r3, #12
 800bca0:	d9f2      	bls.n	800bc88 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bca2:	bf00      	nop
 800bca4:	bf00      	nop
 800bca6:	3708      	adds	r7, #8
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	080294e4 	.word	0x080294e4

0800bcb0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800bcb8:	f00a fb8c 	bl	80163d4 <sys_arch_protect>
 800bcbc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	689b      	ldr	r3, [r3, #8]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d015      	beq.n	800bcf8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	689b      	ldr	r3, [r3, #8]
 800bcd0:	68ba      	ldr	r2, [r7, #8]
 800bcd2:	6812      	ldr	r2, [r2, #0]
 800bcd4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	f003 0303 	and.w	r3, r3, #3
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d006      	beq.n	800bcee <do_memp_malloc_pool+0x3e>
 800bce0:	4b09      	ldr	r3, [pc, #36]	; (800bd08 <do_memp_malloc_pool+0x58>)
 800bce2:	f44f 728c 	mov.w	r2, #280	; 0x118
 800bce6:	4909      	ldr	r1, [pc, #36]	; (800bd0c <do_memp_malloc_pool+0x5c>)
 800bce8:	4809      	ldr	r0, [pc, #36]	; (800bd10 <do_memp_malloc_pool+0x60>)
 800bcea:	f00e f9ef 	bl	801a0cc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f00a fb7e 	bl	80163f0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	e003      	b.n	800bd00 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bcf8:	68f8      	ldr	r0, [r7, #12]
 800bcfa:	f00a fb79 	bl	80163f0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800bcfe:	2300      	movs	r3, #0
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3710      	adds	r7, #16
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	0801d51c 	.word	0x0801d51c
 800bd0c:	0801d54c 	.word	0x0801d54c
 800bd10:	0801d570 	.word	0x0801d570

0800bd14 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d106      	bne.n	800bd30 <memp_malloc_pool+0x1c>
 800bd22:	4b0a      	ldr	r3, [pc, #40]	; (800bd4c <memp_malloc_pool+0x38>)
 800bd24:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800bd28:	4909      	ldr	r1, [pc, #36]	; (800bd50 <memp_malloc_pool+0x3c>)
 800bd2a:	480a      	ldr	r0, [pc, #40]	; (800bd54 <memp_malloc_pool+0x40>)
 800bd2c:	f00e f9ce 	bl	801a0cc <iprintf>
  if (desc == NULL) {
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d101      	bne.n	800bd3a <memp_malloc_pool+0x26>
    return NULL;
 800bd36:	2300      	movs	r3, #0
 800bd38:	e003      	b.n	800bd42 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f7ff ffb8 	bl	800bcb0 <do_memp_malloc_pool>
 800bd40:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3708      	adds	r7, #8
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	0801d51c 	.word	0x0801d51c
 800bd50:	0801d598 	.word	0x0801d598
 800bd54:	0801d570 	.word	0x0801d570

0800bd58 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	4603      	mov	r3, r0
 800bd60:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800bd62:	79fb      	ldrb	r3, [r7, #7]
 800bd64:	2b0c      	cmp	r3, #12
 800bd66:	d908      	bls.n	800bd7a <memp_malloc+0x22>
 800bd68:	4b0a      	ldr	r3, [pc, #40]	; (800bd94 <memp_malloc+0x3c>)
 800bd6a:	f240 1257 	movw	r2, #343	; 0x157
 800bd6e:	490a      	ldr	r1, [pc, #40]	; (800bd98 <memp_malloc+0x40>)
 800bd70:	480a      	ldr	r0, [pc, #40]	; (800bd9c <memp_malloc+0x44>)
 800bd72:	f00e f9ab 	bl	801a0cc <iprintf>
 800bd76:	2300      	movs	r3, #0
 800bd78:	e008      	b.n	800bd8c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800bd7a:	79fb      	ldrb	r3, [r7, #7]
 800bd7c:	4a08      	ldr	r2, [pc, #32]	; (800bda0 <memp_malloc+0x48>)
 800bd7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7ff ff94 	bl	800bcb0 <do_memp_malloc_pool>
 800bd88:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3710      	adds	r7, #16
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}
 800bd94:	0801d51c 	.word	0x0801d51c
 800bd98:	0801d5ac 	.word	0x0801d5ac
 800bd9c:	0801d570 	.word	0x0801d570
 800bda0:	080294e4 	.word	0x080294e4

0800bda4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	f003 0303 	and.w	r3, r3, #3
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d006      	beq.n	800bdc6 <do_memp_free_pool+0x22>
 800bdb8:	4b0d      	ldr	r3, [pc, #52]	; (800bdf0 <do_memp_free_pool+0x4c>)
 800bdba:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800bdbe:	490d      	ldr	r1, [pc, #52]	; (800bdf4 <do_memp_free_pool+0x50>)
 800bdc0:	480d      	ldr	r0, [pc, #52]	; (800bdf8 <do_memp_free_pool+0x54>)
 800bdc2:	f00e f983 	bl	801a0cc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800bdca:	f00a fb03 	bl	80163d4 <sys_arch_protect>
 800bdce:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	689b      	ldr	r3, [r3, #8]
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	689b      	ldr	r3, [r3, #8]
 800bdde:	68fa      	ldr	r2, [r7, #12]
 800bde0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800bde2:	68b8      	ldr	r0, [r7, #8]
 800bde4:	f00a fb04 	bl	80163f0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800bde8:	bf00      	nop
 800bdea:	3710      	adds	r7, #16
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	0801d51c 	.word	0x0801d51c
 800bdf4:	0801d5cc 	.word	0x0801d5cc
 800bdf8:	0801d570 	.word	0x0801d570

0800bdfc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b082      	sub	sp, #8
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d106      	bne.n	800be1a <memp_free_pool+0x1e>
 800be0c:	4b0a      	ldr	r3, [pc, #40]	; (800be38 <memp_free_pool+0x3c>)
 800be0e:	f240 1295 	movw	r2, #405	; 0x195
 800be12:	490a      	ldr	r1, [pc, #40]	; (800be3c <memp_free_pool+0x40>)
 800be14:	480a      	ldr	r0, [pc, #40]	; (800be40 <memp_free_pool+0x44>)
 800be16:	f00e f959 	bl	801a0cc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d007      	beq.n	800be30 <memp_free_pool+0x34>
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d004      	beq.n	800be30 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800be26:	6839      	ldr	r1, [r7, #0]
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f7ff ffbb 	bl	800bda4 <do_memp_free_pool>
 800be2e:	e000      	b.n	800be32 <memp_free_pool+0x36>
    return;
 800be30:	bf00      	nop
}
 800be32:	3708      	adds	r7, #8
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}
 800be38:	0801d51c 	.word	0x0801d51c
 800be3c:	0801d598 	.word	0x0801d598
 800be40:	0801d570 	.word	0x0801d570

0800be44 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b082      	sub	sp, #8
 800be48:	af00      	add	r7, sp, #0
 800be4a:	4603      	mov	r3, r0
 800be4c:	6039      	str	r1, [r7, #0]
 800be4e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800be50:	79fb      	ldrb	r3, [r7, #7]
 800be52:	2b0c      	cmp	r3, #12
 800be54:	d907      	bls.n	800be66 <memp_free+0x22>
 800be56:	4b0c      	ldr	r3, [pc, #48]	; (800be88 <memp_free+0x44>)
 800be58:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800be5c:	490b      	ldr	r1, [pc, #44]	; (800be8c <memp_free+0x48>)
 800be5e:	480c      	ldr	r0, [pc, #48]	; (800be90 <memp_free+0x4c>)
 800be60:	f00e f934 	bl	801a0cc <iprintf>
 800be64:	e00c      	b.n	800be80 <memp_free+0x3c>

  if (mem == NULL) {
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d008      	beq.n	800be7e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800be6c:	79fb      	ldrb	r3, [r7, #7]
 800be6e:	4a09      	ldr	r2, [pc, #36]	; (800be94 <memp_free+0x50>)
 800be70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be74:	6839      	ldr	r1, [r7, #0]
 800be76:	4618      	mov	r0, r3
 800be78:	f7ff ff94 	bl	800bda4 <do_memp_free_pool>
 800be7c:	e000      	b.n	800be80 <memp_free+0x3c>
    return;
 800be7e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800be80:	3708      	adds	r7, #8
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	0801d51c 	.word	0x0801d51c
 800be8c:	0801d5ec 	.word	0x0801d5ec
 800be90:	0801d570 	.word	0x0801d570
 800be94:	080294e4 	.word	0x080294e4

0800be98 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800be98:	b480      	push	{r7}
 800be9a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800be9c:	bf00      	nop
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr
	...

0800bea8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b086      	sub	sp, #24
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	607a      	str	r2, [r7, #4]
 800beb4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d108      	bne.n	800bece <netif_add+0x26>
 800bebc:	4b57      	ldr	r3, [pc, #348]	; (800c01c <netif_add+0x174>)
 800bebe:	f240 1227 	movw	r2, #295	; 0x127
 800bec2:	4957      	ldr	r1, [pc, #348]	; (800c020 <netif_add+0x178>)
 800bec4:	4857      	ldr	r0, [pc, #348]	; (800c024 <netif_add+0x17c>)
 800bec6:	f00e f901 	bl	801a0cc <iprintf>
 800beca:	2300      	movs	r3, #0
 800becc:	e0a2      	b.n	800c014 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800bece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d108      	bne.n	800bee6 <netif_add+0x3e>
 800bed4:	4b51      	ldr	r3, [pc, #324]	; (800c01c <netif_add+0x174>)
 800bed6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800beda:	4953      	ldr	r1, [pc, #332]	; (800c028 <netif_add+0x180>)
 800bedc:	4851      	ldr	r0, [pc, #324]	; (800c024 <netif_add+0x17c>)
 800bede:	f00e f8f5 	bl	801a0cc <iprintf>
 800bee2:	2300      	movs	r3, #0
 800bee4:	e096      	b.n	800c014 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d101      	bne.n	800bef0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800beec:	4b4f      	ldr	r3, [pc, #316]	; (800c02c <netif_add+0x184>)
 800beee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d101      	bne.n	800befa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800bef6:	4b4d      	ldr	r3, [pc, #308]	; (800c02c <netif_add+0x184>)
 800bef8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d101      	bne.n	800bf04 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800bf00:	4b4a      	ldr	r3, [pc, #296]	; (800c02c <netif_add+0x184>)
 800bf02:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2200      	movs	r2, #0
 800bf08:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2200      	movs	r2, #0
 800bf14:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	4a45      	ldr	r2, [pc, #276]	; (800c030 <netif_add+0x188>)
 800bf1a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2200      	movs	r2, #0
 800bf26:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	6a3a      	ldr	r2, [r7, #32]
 800bf34:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800bf36:	4b3f      	ldr	r3, [pc, #252]	; (800c034 <netif_add+0x18c>)
 800bf38:	781a      	ldrb	r2, [r3, #0]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf44:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	68b9      	ldr	r1, [r7, #8]
 800bf4c:	68f8      	ldr	r0, [r7, #12]
 800bf4e:	f000 f913 	bl	800c178 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800bf52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf54:	68f8      	ldr	r0, [r7, #12]
 800bf56:	4798      	blx	r3
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d001      	beq.n	800bf62 <netif_add+0xba>
    return NULL;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	e058      	b.n	800c014 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bf68:	2bff      	cmp	r3, #255	; 0xff
 800bf6a:	d103      	bne.n	800bf74 <netif_add+0xcc>
        netif->num = 0;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800bf74:	2300      	movs	r3, #0
 800bf76:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bf78:	4b2f      	ldr	r3, [pc, #188]	; (800c038 <netif_add+0x190>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	617b      	str	r3, [r7, #20]
 800bf7e:	e02b      	b.n	800bfd8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800bf80:	697a      	ldr	r2, [r7, #20]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d106      	bne.n	800bf96 <netif_add+0xee>
 800bf88:	4b24      	ldr	r3, [pc, #144]	; (800c01c <netif_add+0x174>)
 800bf8a:	f240 128b 	movw	r2, #395	; 0x18b
 800bf8e:	492b      	ldr	r1, [pc, #172]	; (800c03c <netif_add+0x194>)
 800bf90:	4824      	ldr	r0, [pc, #144]	; (800c024 <netif_add+0x17c>)
 800bf92:	f00e f89b 	bl	801a0cc <iprintf>
        num_netifs++;
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	3301      	adds	r3, #1
 800bf9a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	2bff      	cmp	r3, #255	; 0xff
 800bfa0:	dd06      	ble.n	800bfb0 <netif_add+0x108>
 800bfa2:	4b1e      	ldr	r3, [pc, #120]	; (800c01c <netif_add+0x174>)
 800bfa4:	f240 128d 	movw	r2, #397	; 0x18d
 800bfa8:	4925      	ldr	r1, [pc, #148]	; (800c040 <netif_add+0x198>)
 800bfaa:	481e      	ldr	r0, [pc, #120]	; (800c024 <netif_add+0x17c>)
 800bfac:	f00e f88e 	bl	801a0cc <iprintf>
        if (netif2->num == netif->num) {
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d108      	bne.n	800bfd2 <netif_add+0x12a>
          netif->num++;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	b2da      	uxtb	r2, r3
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800bfd0:	e005      	b.n	800bfde <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	617b      	str	r3, [r7, #20]
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d1d0      	bne.n	800bf80 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d1be      	bne.n	800bf62 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bfea:	2bfe      	cmp	r3, #254	; 0xfe
 800bfec:	d103      	bne.n	800bff6 <netif_add+0x14e>
    netif_num = 0;
 800bfee:	4b11      	ldr	r3, [pc, #68]	; (800c034 <netif_add+0x18c>)
 800bff0:	2200      	movs	r2, #0
 800bff2:	701a      	strb	r2, [r3, #0]
 800bff4:	e006      	b.n	800c004 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bffc:	3301      	adds	r3, #1
 800bffe:	b2da      	uxtb	r2, r3
 800c000:	4b0c      	ldr	r3, [pc, #48]	; (800c034 <netif_add+0x18c>)
 800c002:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c004:	4b0c      	ldr	r3, [pc, #48]	; (800c038 <netif_add+0x190>)
 800c006:	681a      	ldr	r2, [r3, #0]
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c00c:	4a0a      	ldr	r2, [pc, #40]	; (800c038 <netif_add+0x190>)
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c012:	68fb      	ldr	r3, [r7, #12]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3718      	adds	r7, #24
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	0801d608 	.word	0x0801d608
 800c020:	0801d69c 	.word	0x0801d69c
 800c024:	0801d658 	.word	0x0801d658
 800c028:	0801d6b8 	.word	0x0801d6b8
 800c02c:	08029558 	.word	0x08029558
 800c030:	0800c453 	.word	0x0800c453
 800c034:	20011478 	.word	0x20011478
 800c038:	20011470 	.word	0x20011470
 800c03c:	0801d6dc 	.word	0x0801d6dc
 800c040:	0801d6f0 	.word	0x0801d6f0

0800c044 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c04e:	6839      	ldr	r1, [r7, #0]
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f002 fe4f 	bl	800ecf4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c056:	6839      	ldr	r1, [r7, #0]
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f007 fd01 	bl	8013a60 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c05e:	bf00      	nop
 800c060:	3708      	adds	r7, #8
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
	...

0800c068 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b086      	sub	sp, #24
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	60f8      	str	r0, [r7, #12]
 800c070:	60b9      	str	r1, [r7, #8]
 800c072:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d106      	bne.n	800c088 <netif_do_set_ipaddr+0x20>
 800c07a:	4b1d      	ldr	r3, [pc, #116]	; (800c0f0 <netif_do_set_ipaddr+0x88>)
 800c07c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c080:	491c      	ldr	r1, [pc, #112]	; (800c0f4 <netif_do_set_ipaddr+0x8c>)
 800c082:	481d      	ldr	r0, [pc, #116]	; (800c0f8 <netif_do_set_ipaddr+0x90>)
 800c084:	f00e f822 	bl	801a0cc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d106      	bne.n	800c09c <netif_do_set_ipaddr+0x34>
 800c08e:	4b18      	ldr	r3, [pc, #96]	; (800c0f0 <netif_do_set_ipaddr+0x88>)
 800c090:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c094:	4917      	ldr	r1, [pc, #92]	; (800c0f4 <netif_do_set_ipaddr+0x8c>)
 800c096:	4818      	ldr	r0, [pc, #96]	; (800c0f8 <netif_do_set_ipaddr+0x90>)
 800c098:	f00e f818 	bl	801a0cc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	681a      	ldr	r2, [r3, #0]
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	3304      	adds	r3, #4
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d01c      	beq.n	800c0e4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	3304      	adds	r3, #4
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c0ba:	f107 0314 	add.w	r3, r7, #20
 800c0be:	4619      	mov	r1, r3
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f7ff ffbf 	bl	800c044 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d002      	beq.n	800c0d2 <netif_do_set_ipaddr+0x6a>
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	e000      	b.n	800c0d4 <netif_do_set_ipaddr+0x6c>
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	68fa      	ldr	r2, [r7, #12]
 800c0d6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c0d8:	2101      	movs	r1, #1
 800c0da:	68f8      	ldr	r0, [r7, #12]
 800c0dc:	f000 f8d2 	bl	800c284 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e000      	b.n	800c0e6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c0e4:	2300      	movs	r3, #0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3718      	adds	r7, #24
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	0801d608 	.word	0x0801d608
 800c0f4:	0801d720 	.word	0x0801d720
 800c0f8:	0801d658 	.word	0x0801d658

0800c0fc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b085      	sub	sp, #20
 800c100:	af00      	add	r7, sp, #0
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	3308      	adds	r3, #8
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	429a      	cmp	r2, r3
 800c114:	d00a      	beq.n	800c12c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d002      	beq.n	800c122 <netif_do_set_netmask+0x26>
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	e000      	b.n	800c124 <netif_do_set_netmask+0x28>
 800c122:	2300      	movs	r3, #0
 800c124:	68fa      	ldr	r2, [r7, #12]
 800c126:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c128:	2301      	movs	r3, #1
 800c12a:	e000      	b.n	800c12e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c12c:	2300      	movs	r3, #0
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3714      	adds	r7, #20
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr

0800c13a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c13a:	b480      	push	{r7}
 800c13c:	b085      	sub	sp, #20
 800c13e:	af00      	add	r7, sp, #0
 800c140:	60f8      	str	r0, [r7, #12]
 800c142:	60b9      	str	r1, [r7, #8]
 800c144:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	330c      	adds	r3, #12
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	429a      	cmp	r2, r3
 800c152:	d00a      	beq.n	800c16a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d002      	beq.n	800c160 <netif_do_set_gw+0x26>
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	e000      	b.n	800c162 <netif_do_set_gw+0x28>
 800c160:	2300      	movs	r3, #0
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c166:	2301      	movs	r3, #1
 800c168:	e000      	b.n	800c16c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c16a:	2300      	movs	r3, #0
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3714      	adds	r7, #20
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr

0800c178 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b088      	sub	sp, #32
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	60b9      	str	r1, [r7, #8]
 800c182:	607a      	str	r2, [r7, #4]
 800c184:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c186:	2300      	movs	r3, #0
 800c188:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c18a:	2300      	movs	r3, #0
 800c18c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d101      	bne.n	800c198 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c194:	4b1c      	ldr	r3, [pc, #112]	; (800c208 <netif_set_addr+0x90>)
 800c196:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d101      	bne.n	800c1a2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c19e:	4b1a      	ldr	r3, [pc, #104]	; (800c208 <netif_set_addr+0x90>)
 800c1a0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d101      	bne.n	800c1ac <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c1a8:	4b17      	ldr	r3, [pc, #92]	; (800c208 <netif_set_addr+0x90>)
 800c1aa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d003      	beq.n	800c1ba <netif_set_addr+0x42>
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d101      	bne.n	800c1be <netif_set_addr+0x46>
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	e000      	b.n	800c1c0 <netif_set_addr+0x48>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d006      	beq.n	800c1d6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c1c8:	f107 0310 	add.w	r3, r7, #16
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	68b9      	ldr	r1, [r7, #8]
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	f7ff ff49 	bl	800c068 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c1d6:	69fa      	ldr	r2, [r7, #28]
 800c1d8:	6879      	ldr	r1, [r7, #4]
 800c1da:	68f8      	ldr	r0, [r7, #12]
 800c1dc:	f7ff ff8e 	bl	800c0fc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c1e0:	69ba      	ldr	r2, [r7, #24]
 800c1e2:	6839      	ldr	r1, [r7, #0]
 800c1e4:	68f8      	ldr	r0, [r7, #12]
 800c1e6:	f7ff ffa8 	bl	800c13a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d106      	bne.n	800c1fe <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c1f0:	f107 0310 	add.w	r3, r7, #16
 800c1f4:	461a      	mov	r2, r3
 800c1f6:	68b9      	ldr	r1, [r7, #8]
 800c1f8:	68f8      	ldr	r0, [r7, #12]
 800c1fa:	f7ff ff35 	bl	800c068 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c1fe:	bf00      	nop
 800c200:	3720      	adds	r7, #32
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	08029558 	.word	0x08029558

0800c20c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b083      	sub	sp, #12
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c214:	4a04      	ldr	r2, [pc, #16]	; (800c228 <netif_set_default+0x1c>)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c21a:	bf00      	nop
 800c21c:	370c      	adds	r7, #12
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr
 800c226:	bf00      	nop
 800c228:	20011474 	.word	0x20011474

0800c22c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d107      	bne.n	800c24a <netif_set_up+0x1e>
 800c23a:	4b0f      	ldr	r3, [pc, #60]	; (800c278 <netif_set_up+0x4c>)
 800c23c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c240:	490e      	ldr	r1, [pc, #56]	; (800c27c <netif_set_up+0x50>)
 800c242:	480f      	ldr	r0, [pc, #60]	; (800c280 <netif_set_up+0x54>)
 800c244:	f00d ff42 	bl	801a0cc <iprintf>
 800c248:	e013      	b.n	800c272 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c250:	f003 0301 	and.w	r3, r3, #1
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10c      	bne.n	800c272 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c25e:	f043 0301 	orr.w	r3, r3, #1
 800c262:	b2da      	uxtb	r2, r3
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c26a:	2103      	movs	r1, #3
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f000 f809 	bl	800c284 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c272:	3708      	adds	r7, #8
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	0801d608 	.word	0x0801d608
 800c27c:	0801d790 	.word	0x0801d790
 800c280:	0801d658 	.word	0x0801d658

0800c284 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	460b      	mov	r3, r1
 800c28e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d106      	bne.n	800c2a4 <netif_issue_reports+0x20>
 800c296:	4b18      	ldr	r3, [pc, #96]	; (800c2f8 <netif_issue_reports+0x74>)
 800c298:	f240 326d 	movw	r2, #877	; 0x36d
 800c29c:	4917      	ldr	r1, [pc, #92]	; (800c2fc <netif_issue_reports+0x78>)
 800c29e:	4818      	ldr	r0, [pc, #96]	; (800c300 <netif_issue_reports+0x7c>)
 800c2a0:	f00d ff14 	bl	801a0cc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c2aa:	f003 0304 	and.w	r3, r3, #4
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d01e      	beq.n	800c2f0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c2b8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d017      	beq.n	800c2f0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c2c0:	78fb      	ldrb	r3, [r7, #3]
 800c2c2:	f003 0301 	and.w	r3, r3, #1
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d013      	beq.n	800c2f2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	3304      	adds	r3, #4
 800c2ce:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d00e      	beq.n	800c2f2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c2da:	f003 0308 	and.w	r3, r3, #8
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d007      	beq.n	800c2f2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f008 fb23 	bl	8014934 <etharp_request>
 800c2ee:	e000      	b.n	800c2f2 <netif_issue_reports+0x6e>
    return;
 800c2f0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c2f2:	3708      	adds	r7, #8
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	0801d608 	.word	0x0801d608
 800c2fc:	0801d7ac 	.word	0x0801d7ac
 800c300:	0801d658 	.word	0x0801d658

0800c304 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d107      	bne.n	800c322 <netif_set_down+0x1e>
 800c312:	4b12      	ldr	r3, [pc, #72]	; (800c35c <netif_set_down+0x58>)
 800c314:	f240 329b 	movw	r2, #923	; 0x39b
 800c318:	4911      	ldr	r1, [pc, #68]	; (800c360 <netif_set_down+0x5c>)
 800c31a:	4812      	ldr	r0, [pc, #72]	; (800c364 <netif_set_down+0x60>)
 800c31c:	f00d fed6 	bl	801a0cc <iprintf>
 800c320:	e019      	b.n	800c356 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c328:	f003 0301 	and.w	r3, r3, #1
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d012      	beq.n	800c356 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c336:	f023 0301 	bic.w	r3, r3, #1
 800c33a:	b2da      	uxtb	r2, r3
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c348:	f003 0308 	and.w	r3, r3, #8
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d002      	beq.n	800c356 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f007 fead 	bl	80140b0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c356:	3708      	adds	r7, #8
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}
 800c35c:	0801d608 	.word	0x0801d608
 800c360:	0801d7d0 	.word	0x0801d7d0
 800c364:	0801d658 	.word	0x0801d658

0800c368 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d107      	bne.n	800c386 <netif_set_link_up+0x1e>
 800c376:	4b13      	ldr	r3, [pc, #76]	; (800c3c4 <netif_set_link_up+0x5c>)
 800c378:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c37c:	4912      	ldr	r1, [pc, #72]	; (800c3c8 <netif_set_link_up+0x60>)
 800c37e:	4813      	ldr	r0, [pc, #76]	; (800c3cc <netif_set_link_up+0x64>)
 800c380:	f00d fea4 	bl	801a0cc <iprintf>
 800c384:	e01b      	b.n	800c3be <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c38c:	f003 0304 	and.w	r3, r3, #4
 800c390:	2b00      	cmp	r3, #0
 800c392:	d114      	bne.n	800c3be <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c39a:	f043 0304 	orr.w	r3, r3, #4
 800c39e:	b2da      	uxtb	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c3a6:	2103      	movs	r1, #3
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f7ff ff6b 	bl	800c284 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	69db      	ldr	r3, [r3, #28]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d003      	beq.n	800c3be <netif_set_link_up+0x56>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	69db      	ldr	r3, [r3, #28]
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c3be:	3708      	adds	r7, #8
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	0801d608 	.word	0x0801d608
 800c3c8:	0801d7f0 	.word	0x0801d7f0
 800c3cc:	0801d658 	.word	0x0801d658

0800c3d0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d107      	bne.n	800c3ee <netif_set_link_down+0x1e>
 800c3de:	4b11      	ldr	r3, [pc, #68]	; (800c424 <netif_set_link_down+0x54>)
 800c3e0:	f240 4206 	movw	r2, #1030	; 0x406
 800c3e4:	4910      	ldr	r1, [pc, #64]	; (800c428 <netif_set_link_down+0x58>)
 800c3e6:	4811      	ldr	r0, [pc, #68]	; (800c42c <netif_set_link_down+0x5c>)
 800c3e8:	f00d fe70 	bl	801a0cc <iprintf>
 800c3ec:	e017      	b.n	800c41e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c3f4:	f003 0304 	and.w	r3, r3, #4
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d010      	beq.n	800c41e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c402:	f023 0304 	bic.w	r3, r3, #4
 800c406:	b2da      	uxtb	r2, r3
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	69db      	ldr	r3, [r3, #28]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d003      	beq.n	800c41e <netif_set_link_down+0x4e>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	69db      	ldr	r3, [r3, #28]
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c41e:	3708      	adds	r7, #8
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	0801d608 	.word	0x0801d608
 800c428:	0801d814 	.word	0x0801d814
 800c42c:	0801d658 	.word	0x0801d658

0800c430 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c430:	b480      	push	{r7}
 800c432:	b083      	sub	sp, #12
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d002      	beq.n	800c446 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	683a      	ldr	r2, [r7, #0]
 800c444:	61da      	str	r2, [r3, #28]
  }
}
 800c446:	bf00      	nop
 800c448:	370c      	adds	r7, #12
 800c44a:	46bd      	mov	sp, r7
 800c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c450:	4770      	bx	lr

0800c452 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c452:	b480      	push	{r7}
 800c454:	b085      	sub	sp, #20
 800c456:	af00      	add	r7, sp, #0
 800c458:	60f8      	str	r0, [r7, #12]
 800c45a:	60b9      	str	r1, [r7, #8]
 800c45c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c45e:	f06f 030b 	mvn.w	r3, #11
}
 800c462:	4618      	mov	r0, r3
 800c464:	3714      	adds	r7, #20
 800c466:	46bd      	mov	sp, r7
 800c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46c:	4770      	bx	lr
	...

0800c470 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c470:	b480      	push	{r7}
 800c472:	b085      	sub	sp, #20
 800c474:	af00      	add	r7, sp, #0
 800c476:	4603      	mov	r3, r0
 800c478:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c47a:	79fb      	ldrb	r3, [r7, #7]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d013      	beq.n	800c4a8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c480:	4b0d      	ldr	r3, [pc, #52]	; (800c4b8 <netif_get_by_index+0x48>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	60fb      	str	r3, [r7, #12]
 800c486:	e00c      	b.n	800c4a2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c48e:	3301      	adds	r3, #1
 800c490:	b2db      	uxtb	r3, r3
 800c492:	79fa      	ldrb	r2, [r7, #7]
 800c494:	429a      	cmp	r2, r3
 800c496:	d101      	bne.n	800c49c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	e006      	b.n	800c4aa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	60fb      	str	r3, [r7, #12]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d1ef      	bne.n	800c488 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c4a8:	2300      	movs	r3, #0
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3714      	adds	r7, #20
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr
 800c4b6:	bf00      	nop
 800c4b8:	20011470 	.word	0x20011470

0800c4bc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b082      	sub	sp, #8
 800c4c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c4c2:	f009 ff87 	bl	80163d4 <sys_arch_protect>
 800c4c6:	6038      	str	r0, [r7, #0]
 800c4c8:	4b0d      	ldr	r3, [pc, #52]	; (800c500 <pbuf_free_ooseq+0x44>)
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	701a      	strb	r2, [r3, #0]
 800c4ce:	6838      	ldr	r0, [r7, #0]
 800c4d0:	f009 ff8e 	bl	80163f0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c4d4:	4b0b      	ldr	r3, [pc, #44]	; (800c504 <pbuf_free_ooseq+0x48>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	607b      	str	r3, [r7, #4]
 800c4da:	e00a      	b.n	800c4f2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d003      	beq.n	800c4ec <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f002 fc43 	bl	800ed70 <tcp_free_ooseq>
      return;
 800c4ea:	e005      	b.n	800c4f8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	607b      	str	r3, [r7, #4]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d1f1      	bne.n	800c4dc <pbuf_free_ooseq+0x20>
    }
  }
}
 800c4f8:	3708      	adds	r7, #8
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop
 800c500:	20011479 	.word	0x20011479
 800c504:	20011488 	.word	0x20011488

0800c508 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b082      	sub	sp, #8
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c510:	f7ff ffd4 	bl	800c4bc <pbuf_free_ooseq>
}
 800c514:	bf00      	nop
 800c516:	3708      	adds	r7, #8
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c522:	f009 ff57 	bl	80163d4 <sys_arch_protect>
 800c526:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c528:	4b0f      	ldr	r3, [pc, #60]	; (800c568 <pbuf_pool_is_empty+0x4c>)
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c52e:	4b0e      	ldr	r3, [pc, #56]	; (800c568 <pbuf_pool_is_empty+0x4c>)
 800c530:	2201      	movs	r2, #1
 800c532:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f009 ff5b 	bl	80163f0 <sys_arch_unprotect>

  if (!queued) {
 800c53a:	78fb      	ldrb	r3, [r7, #3]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d10f      	bne.n	800c560 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c540:	2100      	movs	r1, #0
 800c542:	480a      	ldr	r0, [pc, #40]	; (800c56c <pbuf_pool_is_empty+0x50>)
 800c544:	f7fe fe48 	bl	800b1d8 <tcpip_try_callback>
 800c548:	4603      	mov	r3, r0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d008      	beq.n	800c560 <pbuf_pool_is_empty+0x44>
 800c54e:	f009 ff41 	bl	80163d4 <sys_arch_protect>
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	4b04      	ldr	r3, [pc, #16]	; (800c568 <pbuf_pool_is_empty+0x4c>)
 800c556:	2200      	movs	r2, #0
 800c558:	701a      	strb	r2, [r3, #0]
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f009 ff48 	bl	80163f0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c560:	bf00      	nop
 800c562:	3708      	adds	r7, #8
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	20011479 	.word	0x20011479
 800c56c:	0800c509 	.word	0x0800c509

0800c570 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c570:	b480      	push	{r7}
 800c572:	b085      	sub	sp, #20
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	4611      	mov	r1, r2
 800c57c:	461a      	mov	r2, r3
 800c57e:	460b      	mov	r3, r1
 800c580:	80fb      	strh	r3, [r7, #6]
 800c582:	4613      	mov	r3, r2
 800c584:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2200      	movs	r2, #0
 800c58a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	68ba      	ldr	r2, [r7, #8]
 800c590:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	88fa      	ldrh	r2, [r7, #6]
 800c596:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	88ba      	ldrh	r2, [r7, #4]
 800c59c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c59e:	8b3b      	ldrh	r3, [r7, #24]
 800c5a0:	b2da      	uxtb	r2, r3
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	7f3a      	ldrb	r2, [r7, #28]
 800c5aa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	73da      	strb	r2, [r3, #15]
}
 800c5b8:	bf00      	nop
 800c5ba:	3714      	adds	r7, #20
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b08c      	sub	sp, #48	; 0x30
 800c5c8:	af02      	add	r7, sp, #8
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	71fb      	strb	r3, [r7, #7]
 800c5ce:	460b      	mov	r3, r1
 800c5d0:	80bb      	strh	r3, [r7, #4]
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c5d6:	79fb      	ldrb	r3, [r7, #7]
 800c5d8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c5da:	887b      	ldrh	r3, [r7, #2]
 800c5dc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c5e0:	d07f      	beq.n	800c6e2 <pbuf_alloc+0x11e>
 800c5e2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c5e6:	f300 80c8 	bgt.w	800c77a <pbuf_alloc+0x1b6>
 800c5ea:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c5ee:	d010      	beq.n	800c612 <pbuf_alloc+0x4e>
 800c5f0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c5f4:	f300 80c1 	bgt.w	800c77a <pbuf_alloc+0x1b6>
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	d002      	beq.n	800c602 <pbuf_alloc+0x3e>
 800c5fc:	2b41      	cmp	r3, #65	; 0x41
 800c5fe:	f040 80bc 	bne.w	800c77a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c602:	887a      	ldrh	r2, [r7, #2]
 800c604:	88bb      	ldrh	r3, [r7, #4]
 800c606:	4619      	mov	r1, r3
 800c608:	2000      	movs	r0, #0
 800c60a:	f000 f8d1 	bl	800c7b0 <pbuf_alloc_reference>
 800c60e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c610:	e0bd      	b.n	800c78e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c612:	2300      	movs	r3, #0
 800c614:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c616:	2300      	movs	r3, #0
 800c618:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c61a:	88bb      	ldrh	r3, [r7, #4]
 800c61c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c61e:	200c      	movs	r0, #12
 800c620:	f7ff fb9a 	bl	800bd58 <memp_malloc>
 800c624:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d109      	bne.n	800c640 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c62c:	f7ff ff76 	bl	800c51c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c632:	2b00      	cmp	r3, #0
 800c634:	d002      	beq.n	800c63c <pbuf_alloc+0x78>
            pbuf_free(p);
 800c636:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c638:	f000 faa8 	bl	800cb8c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c63c:	2300      	movs	r3, #0
 800c63e:	e0a7      	b.n	800c790 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c640:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c642:	3303      	adds	r3, #3
 800c644:	b29b      	uxth	r3, r3
 800c646:	f023 0303 	bic.w	r3, r3, #3
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c650:	b29b      	uxth	r3, r3
 800c652:	8b7a      	ldrh	r2, [r7, #26]
 800c654:	4293      	cmp	r3, r2
 800c656:	bf28      	it	cs
 800c658:	4613      	movcs	r3, r2
 800c65a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c65c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c65e:	3310      	adds	r3, #16
 800c660:	693a      	ldr	r2, [r7, #16]
 800c662:	4413      	add	r3, r2
 800c664:	3303      	adds	r3, #3
 800c666:	f023 0303 	bic.w	r3, r3, #3
 800c66a:	4618      	mov	r0, r3
 800c66c:	89f9      	ldrh	r1, [r7, #14]
 800c66e:	8b7a      	ldrh	r2, [r7, #26]
 800c670:	2300      	movs	r3, #0
 800c672:	9301      	str	r3, [sp, #4]
 800c674:	887b      	ldrh	r3, [r7, #2]
 800c676:	9300      	str	r3, [sp, #0]
 800c678:	460b      	mov	r3, r1
 800c67a:	4601      	mov	r1, r0
 800c67c:	6938      	ldr	r0, [r7, #16]
 800c67e:	f7ff ff77 	bl	800c570 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	f003 0303 	and.w	r3, r3, #3
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d006      	beq.n	800c69c <pbuf_alloc+0xd8>
 800c68e:	4b42      	ldr	r3, [pc, #264]	; (800c798 <pbuf_alloc+0x1d4>)
 800c690:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c694:	4941      	ldr	r1, [pc, #260]	; (800c79c <pbuf_alloc+0x1d8>)
 800c696:	4842      	ldr	r0, [pc, #264]	; (800c7a0 <pbuf_alloc+0x1dc>)
 800c698:	f00d fd18 	bl	801a0cc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c69c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c69e:	3303      	adds	r3, #3
 800c6a0:	f023 0303 	bic.w	r3, r3, #3
 800c6a4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c6a8:	d106      	bne.n	800c6b8 <pbuf_alloc+0xf4>
 800c6aa:	4b3b      	ldr	r3, [pc, #236]	; (800c798 <pbuf_alloc+0x1d4>)
 800c6ac:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c6b0:	493c      	ldr	r1, [pc, #240]	; (800c7a4 <pbuf_alloc+0x1e0>)
 800c6b2:	483b      	ldr	r0, [pc, #236]	; (800c7a0 <pbuf_alloc+0x1dc>)
 800c6b4:	f00d fd0a 	bl	801a0cc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d102      	bne.n	800c6c4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	627b      	str	r3, [r7, #36]	; 0x24
 800c6c2:	e002      	b.n	800c6ca <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	693a      	ldr	r2, [r7, #16]
 800c6c8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c6ce:	8b7a      	ldrh	r2, [r7, #26]
 800c6d0:	89fb      	ldrh	r3, [r7, #14]
 800c6d2:	1ad3      	subs	r3, r2, r3
 800c6d4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c6da:	8b7b      	ldrh	r3, [r7, #26]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d19e      	bne.n	800c61e <pbuf_alloc+0x5a>
      break;
 800c6e0:	e055      	b.n	800c78e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c6e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c6e4:	3303      	adds	r3, #3
 800c6e6:	b29b      	uxth	r3, r3
 800c6e8:	f023 0303 	bic.w	r3, r3, #3
 800c6ec:	b29a      	uxth	r2, r3
 800c6ee:	88bb      	ldrh	r3, [r7, #4]
 800c6f0:	3303      	adds	r3, #3
 800c6f2:	b29b      	uxth	r3, r3
 800c6f4:	f023 0303 	bic.w	r3, r3, #3
 800c6f8:	b29b      	uxth	r3, r3
 800c6fa:	4413      	add	r3, r2
 800c6fc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c6fe:	8b3b      	ldrh	r3, [r7, #24]
 800c700:	3310      	adds	r3, #16
 800c702:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c704:	8b3a      	ldrh	r2, [r7, #24]
 800c706:	88bb      	ldrh	r3, [r7, #4]
 800c708:	3303      	adds	r3, #3
 800c70a:	f023 0303 	bic.w	r3, r3, #3
 800c70e:	429a      	cmp	r2, r3
 800c710:	d306      	bcc.n	800c720 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c712:	8afa      	ldrh	r2, [r7, #22]
 800c714:	88bb      	ldrh	r3, [r7, #4]
 800c716:	3303      	adds	r3, #3
 800c718:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d201      	bcs.n	800c724 <pbuf_alloc+0x160>
        return NULL;
 800c720:	2300      	movs	r3, #0
 800c722:	e035      	b.n	800c790 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c724:	8afb      	ldrh	r3, [r7, #22]
 800c726:	4618      	mov	r0, r3
 800c728:	f7ff f972 	bl	800ba10 <mem_malloc>
 800c72c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c730:	2b00      	cmp	r3, #0
 800c732:	d101      	bne.n	800c738 <pbuf_alloc+0x174>
        return NULL;
 800c734:	2300      	movs	r3, #0
 800c736:	e02b      	b.n	800c790 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c738:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c73a:	3310      	adds	r3, #16
 800c73c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c73e:	4413      	add	r3, r2
 800c740:	3303      	adds	r3, #3
 800c742:	f023 0303 	bic.w	r3, r3, #3
 800c746:	4618      	mov	r0, r3
 800c748:	88b9      	ldrh	r1, [r7, #4]
 800c74a:	88ba      	ldrh	r2, [r7, #4]
 800c74c:	2300      	movs	r3, #0
 800c74e:	9301      	str	r3, [sp, #4]
 800c750:	887b      	ldrh	r3, [r7, #2]
 800c752:	9300      	str	r3, [sp, #0]
 800c754:	460b      	mov	r3, r1
 800c756:	4601      	mov	r1, r0
 800c758:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c75a:	f7ff ff09 	bl	800c570 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c760:	685b      	ldr	r3, [r3, #4]
 800c762:	f003 0303 	and.w	r3, r3, #3
 800c766:	2b00      	cmp	r3, #0
 800c768:	d010      	beq.n	800c78c <pbuf_alloc+0x1c8>
 800c76a:	4b0b      	ldr	r3, [pc, #44]	; (800c798 <pbuf_alloc+0x1d4>)
 800c76c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800c770:	490d      	ldr	r1, [pc, #52]	; (800c7a8 <pbuf_alloc+0x1e4>)
 800c772:	480b      	ldr	r0, [pc, #44]	; (800c7a0 <pbuf_alloc+0x1dc>)
 800c774:	f00d fcaa 	bl	801a0cc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c778:	e008      	b.n	800c78c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c77a:	4b07      	ldr	r3, [pc, #28]	; (800c798 <pbuf_alloc+0x1d4>)
 800c77c:	f240 1227 	movw	r2, #295	; 0x127
 800c780:	490a      	ldr	r1, [pc, #40]	; (800c7ac <pbuf_alloc+0x1e8>)
 800c782:	4807      	ldr	r0, [pc, #28]	; (800c7a0 <pbuf_alloc+0x1dc>)
 800c784:	f00d fca2 	bl	801a0cc <iprintf>
      return NULL;
 800c788:	2300      	movs	r3, #0
 800c78a:	e001      	b.n	800c790 <pbuf_alloc+0x1cc>
      break;
 800c78c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c790:	4618      	mov	r0, r3
 800c792:	3728      	adds	r7, #40	; 0x28
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	0801d838 	.word	0x0801d838
 800c79c:	0801d868 	.word	0x0801d868
 800c7a0:	0801d898 	.word	0x0801d898
 800c7a4:	0801d8c0 	.word	0x0801d8c0
 800c7a8:	0801d8f4 	.word	0x0801d8f4
 800c7ac:	0801d920 	.word	0x0801d920

0800c7b0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b086      	sub	sp, #24
 800c7b4:	af02      	add	r7, sp, #8
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	807b      	strh	r3, [r7, #2]
 800c7bc:	4613      	mov	r3, r2
 800c7be:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c7c0:	883b      	ldrh	r3, [r7, #0]
 800c7c2:	2b41      	cmp	r3, #65	; 0x41
 800c7c4:	d009      	beq.n	800c7da <pbuf_alloc_reference+0x2a>
 800c7c6:	883b      	ldrh	r3, [r7, #0]
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d006      	beq.n	800c7da <pbuf_alloc_reference+0x2a>
 800c7cc:	4b0f      	ldr	r3, [pc, #60]	; (800c80c <pbuf_alloc_reference+0x5c>)
 800c7ce:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800c7d2:	490f      	ldr	r1, [pc, #60]	; (800c810 <pbuf_alloc_reference+0x60>)
 800c7d4:	480f      	ldr	r0, [pc, #60]	; (800c814 <pbuf_alloc_reference+0x64>)
 800c7d6:	f00d fc79 	bl	801a0cc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c7da:	200b      	movs	r0, #11
 800c7dc:	f7ff fabc 	bl	800bd58 <memp_malloc>
 800c7e0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d101      	bne.n	800c7ec <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	e00b      	b.n	800c804 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c7ec:	8879      	ldrh	r1, [r7, #2]
 800c7ee:	887a      	ldrh	r2, [r7, #2]
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	9301      	str	r3, [sp, #4]
 800c7f4:	883b      	ldrh	r3, [r7, #0]
 800c7f6:	9300      	str	r3, [sp, #0]
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	6879      	ldr	r1, [r7, #4]
 800c7fc:	68f8      	ldr	r0, [r7, #12]
 800c7fe:	f7ff feb7 	bl	800c570 <pbuf_init_alloced_pbuf>
  return p;
 800c802:	68fb      	ldr	r3, [r7, #12]
}
 800c804:	4618      	mov	r0, r3
 800c806:	3710      	adds	r7, #16
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}
 800c80c:	0801d838 	.word	0x0801d838
 800c810:	0801d93c 	.word	0x0801d93c
 800c814:	0801d898 	.word	0x0801d898

0800c818 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b088      	sub	sp, #32
 800c81c:	af02      	add	r7, sp, #8
 800c81e:	607b      	str	r3, [r7, #4]
 800c820:	4603      	mov	r3, r0
 800c822:	73fb      	strb	r3, [r7, #15]
 800c824:	460b      	mov	r3, r1
 800c826:	81bb      	strh	r3, [r7, #12]
 800c828:	4613      	mov	r3, r2
 800c82a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c82c:	7bfb      	ldrb	r3, [r7, #15]
 800c82e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c830:	8a7b      	ldrh	r3, [r7, #18]
 800c832:	3303      	adds	r3, #3
 800c834:	f023 0203 	bic.w	r2, r3, #3
 800c838:	89bb      	ldrh	r3, [r7, #12]
 800c83a:	441a      	add	r2, r3
 800c83c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c83e:	429a      	cmp	r2, r3
 800c840:	d901      	bls.n	800c846 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c842:	2300      	movs	r3, #0
 800c844:	e018      	b.n	800c878 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c846:	6a3b      	ldr	r3, [r7, #32]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d007      	beq.n	800c85c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c84c:	8a7b      	ldrh	r3, [r7, #18]
 800c84e:	3303      	adds	r3, #3
 800c850:	f023 0303 	bic.w	r3, r3, #3
 800c854:	6a3a      	ldr	r2, [r7, #32]
 800c856:	4413      	add	r3, r2
 800c858:	617b      	str	r3, [r7, #20]
 800c85a:	e001      	b.n	800c860 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c85c:	2300      	movs	r3, #0
 800c85e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	89b9      	ldrh	r1, [r7, #12]
 800c864:	89ba      	ldrh	r2, [r7, #12]
 800c866:	2302      	movs	r3, #2
 800c868:	9301      	str	r3, [sp, #4]
 800c86a:	897b      	ldrh	r3, [r7, #10]
 800c86c:	9300      	str	r3, [sp, #0]
 800c86e:	460b      	mov	r3, r1
 800c870:	6979      	ldr	r1, [r7, #20]
 800c872:	f7ff fe7d 	bl	800c570 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c876:	687b      	ldr	r3, [r7, #4]
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3718      	adds	r7, #24
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	460b      	mov	r3, r1
 800c88a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d106      	bne.n	800c8a0 <pbuf_realloc+0x20>
 800c892:	4b3a      	ldr	r3, [pc, #232]	; (800c97c <pbuf_realloc+0xfc>)
 800c894:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c898:	4939      	ldr	r1, [pc, #228]	; (800c980 <pbuf_realloc+0x100>)
 800c89a:	483a      	ldr	r0, [pc, #232]	; (800c984 <pbuf_realloc+0x104>)
 800c89c:	f00d fc16 	bl	801a0cc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	891b      	ldrh	r3, [r3, #8]
 800c8a4:	887a      	ldrh	r2, [r7, #2]
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d263      	bcs.n	800c972 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	891a      	ldrh	r2, [r3, #8]
 800c8ae:	887b      	ldrh	r3, [r7, #2]
 800c8b0:	1ad3      	subs	r3, r2, r3
 800c8b2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c8b4:	887b      	ldrh	r3, [r7, #2]
 800c8b6:	817b      	strh	r3, [r7, #10]
  q = p;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c8bc:	e018      	b.n	800c8f0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	895b      	ldrh	r3, [r3, #10]
 800c8c2:	897a      	ldrh	r2, [r7, #10]
 800c8c4:	1ad3      	subs	r3, r2, r3
 800c8c6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	891a      	ldrh	r2, [r3, #8]
 800c8cc:	893b      	ldrh	r3, [r7, #8]
 800c8ce:	1ad3      	subs	r3, r2, r3
 800c8d0:	b29a      	uxth	r2, r3
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d106      	bne.n	800c8f0 <pbuf_realloc+0x70>
 800c8e2:	4b26      	ldr	r3, [pc, #152]	; (800c97c <pbuf_realloc+0xfc>)
 800c8e4:	f240 12af 	movw	r2, #431	; 0x1af
 800c8e8:	4927      	ldr	r1, [pc, #156]	; (800c988 <pbuf_realloc+0x108>)
 800c8ea:	4826      	ldr	r0, [pc, #152]	; (800c984 <pbuf_realloc+0x104>)
 800c8ec:	f00d fbee 	bl	801a0cc <iprintf>
  while (rem_len > q->len) {
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	895b      	ldrh	r3, [r3, #10]
 800c8f4:	897a      	ldrh	r2, [r7, #10]
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d8e1      	bhi.n	800c8be <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	7b1b      	ldrb	r3, [r3, #12]
 800c8fe:	f003 030f 	and.w	r3, r3, #15
 800c902:	2b00      	cmp	r3, #0
 800c904:	d121      	bne.n	800c94a <pbuf_realloc+0xca>
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	895b      	ldrh	r3, [r3, #10]
 800c90a:	897a      	ldrh	r2, [r7, #10]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d01c      	beq.n	800c94a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	7b5b      	ldrb	r3, [r3, #13]
 800c914:	f003 0302 	and.w	r3, r3, #2
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d116      	bne.n	800c94a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	685a      	ldr	r2, [r3, #4]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	1ad3      	subs	r3, r2, r3
 800c924:	b29a      	uxth	r2, r3
 800c926:	897b      	ldrh	r3, [r7, #10]
 800c928:	4413      	add	r3, r2
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	4619      	mov	r1, r3
 800c92e:	68f8      	ldr	r0, [r7, #12]
 800c930:	f7fe ff64 	bl	800b7fc <mem_trim>
 800c934:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d106      	bne.n	800c94a <pbuf_realloc+0xca>
 800c93c:	4b0f      	ldr	r3, [pc, #60]	; (800c97c <pbuf_realloc+0xfc>)
 800c93e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c942:	4912      	ldr	r1, [pc, #72]	; (800c98c <pbuf_realloc+0x10c>)
 800c944:	480f      	ldr	r0, [pc, #60]	; (800c984 <pbuf_realloc+0x104>)
 800c946:	f00d fbc1 	bl	801a0cc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	897a      	ldrh	r2, [r7, #10]
 800c94e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	895a      	ldrh	r2, [r3, #10]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d004      	beq.n	800c96a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4618      	mov	r0, r3
 800c966:	f000 f911 	bl	800cb8c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	2200      	movs	r2, #0
 800c96e:	601a      	str	r2, [r3, #0]
 800c970:	e000      	b.n	800c974 <pbuf_realloc+0xf4>
    return;
 800c972:	bf00      	nop

}
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	0801d838 	.word	0x0801d838
 800c980:	0801d950 	.word	0x0801d950
 800c984:	0801d898 	.word	0x0801d898
 800c988:	0801d968 	.word	0x0801d968
 800c98c:	0801d980 	.word	0x0801d980

0800c990 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	4613      	mov	r3, r2
 800c99c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d106      	bne.n	800c9b2 <pbuf_add_header_impl+0x22>
 800c9a4:	4b2b      	ldr	r3, [pc, #172]	; (800ca54 <pbuf_add_header_impl+0xc4>)
 800c9a6:	f240 12df 	movw	r2, #479	; 0x1df
 800c9aa:	492b      	ldr	r1, [pc, #172]	; (800ca58 <pbuf_add_header_impl+0xc8>)
 800c9ac:	482b      	ldr	r0, [pc, #172]	; (800ca5c <pbuf_add_header_impl+0xcc>)
 800c9ae:	f00d fb8d 	bl	801a0cc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d003      	beq.n	800c9c0 <pbuf_add_header_impl+0x30>
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9be:	d301      	bcc.n	800c9c4 <pbuf_add_header_impl+0x34>
    return 1;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	e043      	b.n	800ca4c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d101      	bne.n	800c9ce <pbuf_add_header_impl+0x3e>
    return 0;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	e03e      	b.n	800ca4c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	891a      	ldrh	r2, [r3, #8]
 800c9d6:	8a7b      	ldrh	r3, [r7, #18]
 800c9d8:	4413      	add	r3, r2
 800c9da:	b29b      	uxth	r3, r3
 800c9dc:	8a7a      	ldrh	r2, [r7, #18]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d901      	bls.n	800c9e6 <pbuf_add_header_impl+0x56>
    return 1;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e032      	b.n	800ca4c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	7b1b      	ldrb	r3, [r3, #12]
 800c9ea:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c9ec:	8a3b      	ldrh	r3, [r7, #16]
 800c9ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d00c      	beq.n	800ca10 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	685a      	ldr	r2, [r3, #4]
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	425b      	negs	r3, r3
 800c9fe:	4413      	add	r3, r2
 800ca00:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	3310      	adds	r3, #16
 800ca06:	697a      	ldr	r2, [r7, #20]
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d20d      	bcs.n	800ca28 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	e01d      	b.n	800ca4c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ca10:	79fb      	ldrb	r3, [r7, #7]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d006      	beq.n	800ca24 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	685a      	ldr	r2, [r3, #4]
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	425b      	negs	r3, r3
 800ca1e:	4413      	add	r3, r2
 800ca20:	617b      	str	r3, [r7, #20]
 800ca22:	e001      	b.n	800ca28 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ca24:	2301      	movs	r3, #1
 800ca26:	e011      	b.n	800ca4c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	697a      	ldr	r2, [r7, #20]
 800ca2c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	895a      	ldrh	r2, [r3, #10]
 800ca32:	8a7b      	ldrh	r3, [r7, #18]
 800ca34:	4413      	add	r3, r2
 800ca36:	b29a      	uxth	r2, r3
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	891a      	ldrh	r2, [r3, #8]
 800ca40:	8a7b      	ldrh	r3, [r7, #18]
 800ca42:	4413      	add	r3, r2
 800ca44:	b29a      	uxth	r2, r3
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	811a      	strh	r2, [r3, #8]


  return 0;
 800ca4a:	2300      	movs	r3, #0
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3718      	adds	r7, #24
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	0801d838 	.word	0x0801d838
 800ca58:	0801d99c 	.word	0x0801d99c
 800ca5c:	0801d898 	.word	0x0801d898

0800ca60 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b082      	sub	sp, #8
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	6839      	ldr	r1, [r7, #0]
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f7ff ff8e 	bl	800c990 <pbuf_add_header_impl>
 800ca74:	4603      	mov	r3, r0
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3708      	adds	r7, #8
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}
	...

0800ca80 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d106      	bne.n	800ca9e <pbuf_remove_header+0x1e>
 800ca90:	4b20      	ldr	r3, [pc, #128]	; (800cb14 <pbuf_remove_header+0x94>)
 800ca92:	f240 224b 	movw	r2, #587	; 0x24b
 800ca96:	4920      	ldr	r1, [pc, #128]	; (800cb18 <pbuf_remove_header+0x98>)
 800ca98:	4820      	ldr	r0, [pc, #128]	; (800cb1c <pbuf_remove_header+0x9c>)
 800ca9a:	f00d fb17 	bl	801a0cc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d003      	beq.n	800caac <pbuf_remove_header+0x2c>
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800caaa:	d301      	bcc.n	800cab0 <pbuf_remove_header+0x30>
    return 1;
 800caac:	2301      	movs	r3, #1
 800caae:	e02c      	b.n	800cb0a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d101      	bne.n	800caba <pbuf_remove_header+0x3a>
    return 0;
 800cab6:	2300      	movs	r3, #0
 800cab8:	e027      	b.n	800cb0a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	895b      	ldrh	r3, [r3, #10]
 800cac2:	89fa      	ldrh	r2, [r7, #14]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d908      	bls.n	800cada <pbuf_remove_header+0x5a>
 800cac8:	4b12      	ldr	r3, [pc, #72]	; (800cb14 <pbuf_remove_header+0x94>)
 800caca:	f240 2255 	movw	r2, #597	; 0x255
 800cace:	4914      	ldr	r1, [pc, #80]	; (800cb20 <pbuf_remove_header+0xa0>)
 800cad0:	4812      	ldr	r0, [pc, #72]	; (800cb1c <pbuf_remove_header+0x9c>)
 800cad2:	f00d fafb 	bl	801a0cc <iprintf>
 800cad6:	2301      	movs	r3, #1
 800cad8:	e017      	b.n	800cb0a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	685a      	ldr	r2, [r3, #4]
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	441a      	add	r2, r3
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	895a      	ldrh	r2, [r3, #10]
 800caf0:	89fb      	ldrh	r3, [r7, #14]
 800caf2:	1ad3      	subs	r3, r2, r3
 800caf4:	b29a      	uxth	r2, r3
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	891a      	ldrh	r2, [r3, #8]
 800cafe:	89fb      	ldrh	r3, [r7, #14]
 800cb00:	1ad3      	subs	r3, r2, r3
 800cb02:	b29a      	uxth	r2, r3
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cb08:	2300      	movs	r3, #0
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3710      	adds	r7, #16
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	0801d838 	.word	0x0801d838
 800cb18:	0801d99c 	.word	0x0801d99c
 800cb1c:	0801d898 	.word	0x0801d898
 800cb20:	0801d9a8 	.word	0x0801d9a8

0800cb24 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	460b      	mov	r3, r1
 800cb2e:	807b      	strh	r3, [r7, #2]
 800cb30:	4613      	mov	r3, r2
 800cb32:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cb34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	da08      	bge.n	800cb4e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800cb3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cb40:	425b      	negs	r3, r3
 800cb42:	4619      	mov	r1, r3
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f7ff ff9b 	bl	800ca80 <pbuf_remove_header>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	e007      	b.n	800cb5e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800cb4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cb52:	787a      	ldrb	r2, [r7, #1]
 800cb54:	4619      	mov	r1, r3
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f7ff ff1a 	bl	800c990 <pbuf_add_header_impl>
 800cb5c:	4603      	mov	r3, r0
  }
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3708      	adds	r7, #8
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}

0800cb66 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800cb66:	b580      	push	{r7, lr}
 800cb68:	b082      	sub	sp, #8
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
 800cb6e:	460b      	mov	r3, r1
 800cb70:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800cb72:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cb76:	2201      	movs	r2, #1
 800cb78:	4619      	mov	r1, r3
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f7ff ffd2 	bl	800cb24 <pbuf_header_impl>
 800cb80:	4603      	mov	r3, r0
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3708      	adds	r7, #8
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
	...

0800cb8c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b088      	sub	sp, #32
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d10b      	bne.n	800cbb2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d106      	bne.n	800cbae <pbuf_free+0x22>
 800cba0:	4b3b      	ldr	r3, [pc, #236]	; (800cc90 <pbuf_free+0x104>)
 800cba2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800cba6:	493b      	ldr	r1, [pc, #236]	; (800cc94 <pbuf_free+0x108>)
 800cba8:	483b      	ldr	r0, [pc, #236]	; (800cc98 <pbuf_free+0x10c>)
 800cbaa:	f00d fa8f 	bl	801a0cc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	e069      	b.n	800cc86 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800cbb6:	e062      	b.n	800cc7e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800cbb8:	f009 fc0c 	bl	80163d4 <sys_arch_protect>
 800cbbc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	7b9b      	ldrb	r3, [r3, #14]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d106      	bne.n	800cbd4 <pbuf_free+0x48>
 800cbc6:	4b32      	ldr	r3, [pc, #200]	; (800cc90 <pbuf_free+0x104>)
 800cbc8:	f240 22f1 	movw	r2, #753	; 0x2f1
 800cbcc:	4933      	ldr	r1, [pc, #204]	; (800cc9c <pbuf_free+0x110>)
 800cbce:	4832      	ldr	r0, [pc, #200]	; (800cc98 <pbuf_free+0x10c>)
 800cbd0:	f00d fa7c 	bl	801a0cc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	7b9b      	ldrb	r3, [r3, #14]
 800cbd8:	3b01      	subs	r3, #1
 800cbda:	b2da      	uxtb	r2, r3
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	739a      	strb	r2, [r3, #14]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	7b9b      	ldrb	r3, [r3, #14]
 800cbe4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800cbe6:	69b8      	ldr	r0, [r7, #24]
 800cbe8:	f009 fc02 	bl	80163f0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cbec:	7dfb      	ldrb	r3, [r7, #23]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d143      	bne.n	800cc7a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	7b1b      	ldrb	r3, [r3, #12]
 800cbfc:	f003 030f 	and.w	r3, r3, #15
 800cc00:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	7b5b      	ldrb	r3, [r3, #13]
 800cc06:	f003 0302 	and.w	r3, r3, #2
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d011      	beq.n	800cc32 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	691b      	ldr	r3, [r3, #16]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d106      	bne.n	800cc28 <pbuf_free+0x9c>
 800cc1a:	4b1d      	ldr	r3, [pc, #116]	; (800cc90 <pbuf_free+0x104>)
 800cc1c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800cc20:	491f      	ldr	r1, [pc, #124]	; (800cca0 <pbuf_free+0x114>)
 800cc22:	481d      	ldr	r0, [pc, #116]	; (800cc98 <pbuf_free+0x10c>)
 800cc24:	f00d fa52 	bl	801a0cc <iprintf>
        pc->custom_free_function(p);
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	691b      	ldr	r3, [r3, #16]
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	4798      	blx	r3
 800cc30:	e01d      	b.n	800cc6e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800cc32:	7bfb      	ldrb	r3, [r7, #15]
 800cc34:	2b02      	cmp	r3, #2
 800cc36:	d104      	bne.n	800cc42 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800cc38:	6879      	ldr	r1, [r7, #4]
 800cc3a:	200c      	movs	r0, #12
 800cc3c:	f7ff f902 	bl	800be44 <memp_free>
 800cc40:	e015      	b.n	800cc6e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800cc42:	7bfb      	ldrb	r3, [r7, #15]
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d104      	bne.n	800cc52 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800cc48:	6879      	ldr	r1, [r7, #4]
 800cc4a:	200b      	movs	r0, #11
 800cc4c:	f7ff f8fa 	bl	800be44 <memp_free>
 800cc50:	e00d      	b.n	800cc6e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800cc52:	7bfb      	ldrb	r3, [r7, #15]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d103      	bne.n	800cc60 <pbuf_free+0xd4>
          mem_free(p);
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f7fe fd3f 	bl	800b6dc <mem_free>
 800cc5e:	e006      	b.n	800cc6e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800cc60:	4b0b      	ldr	r3, [pc, #44]	; (800cc90 <pbuf_free+0x104>)
 800cc62:	f240 320f 	movw	r2, #783	; 0x30f
 800cc66:	490f      	ldr	r1, [pc, #60]	; (800cca4 <pbuf_free+0x118>)
 800cc68:	480b      	ldr	r0, [pc, #44]	; (800cc98 <pbuf_free+0x10c>)
 800cc6a:	f00d fa2f 	bl	801a0cc <iprintf>
        }
      }
      count++;
 800cc6e:	7ffb      	ldrb	r3, [r7, #31]
 800cc70:	3301      	adds	r3, #1
 800cc72:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	607b      	str	r3, [r7, #4]
 800cc78:	e001      	b.n	800cc7e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d199      	bne.n	800cbb8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800cc84:	7ffb      	ldrb	r3, [r7, #31]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3720      	adds	r7, #32
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	0801d838 	.word	0x0801d838
 800cc94:	0801d99c 	.word	0x0801d99c
 800cc98:	0801d898 	.word	0x0801d898
 800cc9c:	0801d9c8 	.word	0x0801d9c8
 800cca0:	0801d9e0 	.word	0x0801d9e0
 800cca4:	0801da04 	.word	0x0801da04

0800cca8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b085      	sub	sp, #20
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ccb4:	e005      	b.n	800ccc2 <pbuf_clen+0x1a>
    ++len;
 800ccb6:	89fb      	ldrh	r3, [r7, #14]
 800ccb8:	3301      	adds	r3, #1
 800ccba:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d1f6      	bne.n	800ccb6 <pbuf_clen+0xe>
  }
  return len;
 800ccc8:	89fb      	ldrh	r3, [r7, #14]
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3714      	adds	r7, #20
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr
	...

0800ccd8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d016      	beq.n	800cd14 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800cce6:	f009 fb75 	bl	80163d4 <sys_arch_protect>
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	7b9b      	ldrb	r3, [r3, #14]
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	b2da      	uxtb	r2, r3
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	739a      	strb	r2, [r3, #14]
 800ccf8:	68f8      	ldr	r0, [r7, #12]
 800ccfa:	f009 fb79 	bl	80163f0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	7b9b      	ldrb	r3, [r3, #14]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d106      	bne.n	800cd14 <pbuf_ref+0x3c>
 800cd06:	4b05      	ldr	r3, [pc, #20]	; (800cd1c <pbuf_ref+0x44>)
 800cd08:	f240 3242 	movw	r2, #834	; 0x342
 800cd0c:	4904      	ldr	r1, [pc, #16]	; (800cd20 <pbuf_ref+0x48>)
 800cd0e:	4805      	ldr	r0, [pc, #20]	; (800cd24 <pbuf_ref+0x4c>)
 800cd10:	f00d f9dc 	bl	801a0cc <iprintf>
  }
}
 800cd14:	bf00      	nop
 800cd16:	3710      	adds	r7, #16
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	0801d838 	.word	0x0801d838
 800cd20:	0801da18 	.word	0x0801da18
 800cd24:	0801d898 	.word	0x0801d898

0800cd28 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b084      	sub	sp, #16
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d002      	beq.n	800cd3e <pbuf_cat+0x16>
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d107      	bne.n	800cd4e <pbuf_cat+0x26>
 800cd3e:	4b20      	ldr	r3, [pc, #128]	; (800cdc0 <pbuf_cat+0x98>)
 800cd40:	f240 3259 	movw	r2, #857	; 0x359
 800cd44:	491f      	ldr	r1, [pc, #124]	; (800cdc4 <pbuf_cat+0x9c>)
 800cd46:	4820      	ldr	r0, [pc, #128]	; (800cdc8 <pbuf_cat+0xa0>)
 800cd48:	f00d f9c0 	bl	801a0cc <iprintf>
 800cd4c:	e034      	b.n	800cdb8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	60fb      	str	r3, [r7, #12]
 800cd52:	e00a      	b.n	800cd6a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	891a      	ldrh	r2, [r3, #8]
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	891b      	ldrh	r3, [r3, #8]
 800cd5c:	4413      	add	r3, r2
 800cd5e:	b29a      	uxth	r2, r3
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	60fb      	str	r3, [r7, #12]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d1f0      	bne.n	800cd54 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	891a      	ldrh	r2, [r3, #8]
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	895b      	ldrh	r3, [r3, #10]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d006      	beq.n	800cd8c <pbuf_cat+0x64>
 800cd7e:	4b10      	ldr	r3, [pc, #64]	; (800cdc0 <pbuf_cat+0x98>)
 800cd80:	f240 3262 	movw	r2, #866	; 0x362
 800cd84:	4911      	ldr	r1, [pc, #68]	; (800cdcc <pbuf_cat+0xa4>)
 800cd86:	4810      	ldr	r0, [pc, #64]	; (800cdc8 <pbuf_cat+0xa0>)
 800cd88:	f00d f9a0 	bl	801a0cc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d006      	beq.n	800cda2 <pbuf_cat+0x7a>
 800cd94:	4b0a      	ldr	r3, [pc, #40]	; (800cdc0 <pbuf_cat+0x98>)
 800cd96:	f240 3263 	movw	r2, #867	; 0x363
 800cd9a:	490d      	ldr	r1, [pc, #52]	; (800cdd0 <pbuf_cat+0xa8>)
 800cd9c:	480a      	ldr	r0, [pc, #40]	; (800cdc8 <pbuf_cat+0xa0>)
 800cd9e:	f00d f995 	bl	801a0cc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	891a      	ldrh	r2, [r3, #8]
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	891b      	ldrh	r3, [r3, #8]
 800cdaa:	4413      	add	r3, r2
 800cdac:	b29a      	uxth	r2, r3
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	683a      	ldr	r2, [r7, #0]
 800cdb6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800cdb8:	3710      	adds	r7, #16
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
 800cdbe:	bf00      	nop
 800cdc0:	0801d838 	.word	0x0801d838
 800cdc4:	0801da2c 	.word	0x0801da2c
 800cdc8:	0801d898 	.word	0x0801d898
 800cdcc:	0801da64 	.word	0x0801da64
 800cdd0:	0801da94 	.word	0x0801da94

0800cdd4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b086      	sub	sp, #24
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800cdde:	2300      	movs	r3, #0
 800cde0:	617b      	str	r3, [r7, #20]
 800cde2:	2300      	movs	r3, #0
 800cde4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d008      	beq.n	800cdfe <pbuf_copy+0x2a>
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d005      	beq.n	800cdfe <pbuf_copy+0x2a>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	891a      	ldrh	r2, [r3, #8]
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	891b      	ldrh	r3, [r3, #8]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d209      	bcs.n	800ce12 <pbuf_copy+0x3e>
 800cdfe:	4b57      	ldr	r3, [pc, #348]	; (800cf5c <pbuf_copy+0x188>)
 800ce00:	f240 32c9 	movw	r2, #969	; 0x3c9
 800ce04:	4956      	ldr	r1, [pc, #344]	; (800cf60 <pbuf_copy+0x18c>)
 800ce06:	4857      	ldr	r0, [pc, #348]	; (800cf64 <pbuf_copy+0x190>)
 800ce08:	f00d f960 	bl	801a0cc <iprintf>
 800ce0c:	f06f 030f 	mvn.w	r3, #15
 800ce10:	e09f      	b.n	800cf52 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	895b      	ldrh	r3, [r3, #10]
 800ce16:	461a      	mov	r2, r3
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	1ad2      	subs	r2, r2, r3
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	895b      	ldrh	r3, [r3, #10]
 800ce20:	4619      	mov	r1, r3
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	1acb      	subs	r3, r1, r3
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d306      	bcc.n	800ce38 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	895b      	ldrh	r3, [r3, #10]
 800ce2e:	461a      	mov	r2, r3
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	1ad3      	subs	r3, r2, r3
 800ce34:	60fb      	str	r3, [r7, #12]
 800ce36:	e005      	b.n	800ce44 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	895b      	ldrh	r3, [r3, #10]
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	1ad3      	subs	r3, r2, r3
 800ce42:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	685a      	ldr	r2, [r3, #4]
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	18d0      	adds	r0, r2, r3
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	685a      	ldr	r2, [r3, #4]
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	4413      	add	r3, r2
 800ce54:	68fa      	ldr	r2, [r7, #12]
 800ce56:	4619      	mov	r1, r3
 800ce58:	f00c fcc6 	bl	80197e8 <memcpy>
    offset_to += len;
 800ce5c:	697a      	ldr	r2, [r7, #20]
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	4413      	add	r3, r2
 800ce62:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ce64:	693a      	ldr	r2, [r7, #16]
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	4413      	add	r3, r2
 800ce6a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	895b      	ldrh	r3, [r3, #10]
 800ce70:	461a      	mov	r2, r3
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d906      	bls.n	800ce86 <pbuf_copy+0xb2>
 800ce78:	4b38      	ldr	r3, [pc, #224]	; (800cf5c <pbuf_copy+0x188>)
 800ce7a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ce7e:	493a      	ldr	r1, [pc, #232]	; (800cf68 <pbuf_copy+0x194>)
 800ce80:	4838      	ldr	r0, [pc, #224]	; (800cf64 <pbuf_copy+0x190>)
 800ce82:	f00d f923 	bl	801a0cc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	895b      	ldrh	r3, [r3, #10]
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d906      	bls.n	800cea0 <pbuf_copy+0xcc>
 800ce92:	4b32      	ldr	r3, [pc, #200]	; (800cf5c <pbuf_copy+0x188>)
 800ce94:	f240 32da 	movw	r2, #986	; 0x3da
 800ce98:	4934      	ldr	r1, [pc, #208]	; (800cf6c <pbuf_copy+0x198>)
 800ce9a:	4832      	ldr	r0, [pc, #200]	; (800cf64 <pbuf_copy+0x190>)
 800ce9c:	f00d f916 	bl	801a0cc <iprintf>
    if (offset_from >= p_from->len) {
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	895b      	ldrh	r3, [r3, #10]
 800cea4:	461a      	mov	r2, r3
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d304      	bcc.n	800ceb6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ceac:	2300      	movs	r3, #0
 800ceae:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	895b      	ldrh	r3, [r3, #10]
 800ceba:	461a      	mov	r2, r3
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d114      	bne.n	800ceec <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800cec2:	2300      	movs	r3, #0
 800cec4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d10c      	bne.n	800ceec <pbuf_copy+0x118>
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d009      	beq.n	800ceec <pbuf_copy+0x118>
 800ced8:	4b20      	ldr	r3, [pc, #128]	; (800cf5c <pbuf_copy+0x188>)
 800ceda:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800cede:	4924      	ldr	r1, [pc, #144]	; (800cf70 <pbuf_copy+0x19c>)
 800cee0:	4820      	ldr	r0, [pc, #128]	; (800cf64 <pbuf_copy+0x190>)
 800cee2:	f00d f8f3 	bl	801a0cc <iprintf>
 800cee6:	f06f 030f 	mvn.w	r3, #15
 800ceea:	e032      	b.n	800cf52 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d013      	beq.n	800cf1a <pbuf_copy+0x146>
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	895a      	ldrh	r2, [r3, #10]
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	891b      	ldrh	r3, [r3, #8]
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d10d      	bne.n	800cf1a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d009      	beq.n	800cf1a <pbuf_copy+0x146>
 800cf06:	4b15      	ldr	r3, [pc, #84]	; (800cf5c <pbuf_copy+0x188>)
 800cf08:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800cf0c:	4919      	ldr	r1, [pc, #100]	; (800cf74 <pbuf_copy+0x1a0>)
 800cf0e:	4815      	ldr	r0, [pc, #84]	; (800cf64 <pbuf_copy+0x190>)
 800cf10:	f00d f8dc 	bl	801a0cc <iprintf>
 800cf14:	f06f 0305 	mvn.w	r3, #5
 800cf18:	e01b      	b.n	800cf52 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d013      	beq.n	800cf48 <pbuf_copy+0x174>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	895a      	ldrh	r2, [r3, #10]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	891b      	ldrh	r3, [r3, #8]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d10d      	bne.n	800cf48 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d009      	beq.n	800cf48 <pbuf_copy+0x174>
 800cf34:	4b09      	ldr	r3, [pc, #36]	; (800cf5c <pbuf_copy+0x188>)
 800cf36:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800cf3a:	490e      	ldr	r1, [pc, #56]	; (800cf74 <pbuf_copy+0x1a0>)
 800cf3c:	4809      	ldr	r0, [pc, #36]	; (800cf64 <pbuf_copy+0x190>)
 800cf3e:	f00d f8c5 	bl	801a0cc <iprintf>
 800cf42:	f06f 0305 	mvn.w	r3, #5
 800cf46:	e004      	b.n	800cf52 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	f47f af61 	bne.w	800ce12 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800cf50:	2300      	movs	r3, #0
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3718      	adds	r7, #24
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	0801d838 	.word	0x0801d838
 800cf60:	0801dae0 	.word	0x0801dae0
 800cf64:	0801d898 	.word	0x0801d898
 800cf68:	0801db10 	.word	0x0801db10
 800cf6c:	0801db28 	.word	0x0801db28
 800cf70:	0801db44 	.word	0x0801db44
 800cf74:	0801db54 	.word	0x0801db54

0800cf78 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b088      	sub	sp, #32
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	4611      	mov	r1, r2
 800cf84:	461a      	mov	r2, r3
 800cf86:	460b      	mov	r3, r1
 800cf88:	80fb      	strh	r3, [r7, #6]
 800cf8a:	4613      	mov	r3, r2
 800cf8c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800cf92:	2300      	movs	r3, #0
 800cf94:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d108      	bne.n	800cfae <pbuf_copy_partial+0x36>
 800cf9c:	4b2b      	ldr	r3, [pc, #172]	; (800d04c <pbuf_copy_partial+0xd4>)
 800cf9e:	f240 420a 	movw	r2, #1034	; 0x40a
 800cfa2:	492b      	ldr	r1, [pc, #172]	; (800d050 <pbuf_copy_partial+0xd8>)
 800cfa4:	482b      	ldr	r0, [pc, #172]	; (800d054 <pbuf_copy_partial+0xdc>)
 800cfa6:	f00d f891 	bl	801a0cc <iprintf>
 800cfaa:	2300      	movs	r3, #0
 800cfac:	e04a      	b.n	800d044 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d108      	bne.n	800cfc6 <pbuf_copy_partial+0x4e>
 800cfb4:	4b25      	ldr	r3, [pc, #148]	; (800d04c <pbuf_copy_partial+0xd4>)
 800cfb6:	f240 420b 	movw	r2, #1035	; 0x40b
 800cfba:	4927      	ldr	r1, [pc, #156]	; (800d058 <pbuf_copy_partial+0xe0>)
 800cfbc:	4825      	ldr	r0, [pc, #148]	; (800d054 <pbuf_copy_partial+0xdc>)
 800cfbe:	f00d f885 	bl	801a0cc <iprintf>
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	e03e      	b.n	800d044 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	61fb      	str	r3, [r7, #28]
 800cfca:	e034      	b.n	800d036 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800cfcc:	88bb      	ldrh	r3, [r7, #4]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d00a      	beq.n	800cfe8 <pbuf_copy_partial+0x70>
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	895b      	ldrh	r3, [r3, #10]
 800cfd6:	88ba      	ldrh	r2, [r7, #4]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d305      	bcc.n	800cfe8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	895b      	ldrh	r3, [r3, #10]
 800cfe0:	88ba      	ldrh	r2, [r7, #4]
 800cfe2:	1ad3      	subs	r3, r2, r3
 800cfe4:	80bb      	strh	r3, [r7, #4]
 800cfe6:	e023      	b.n	800d030 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800cfe8:	69fb      	ldr	r3, [r7, #28]
 800cfea:	895a      	ldrh	r2, [r3, #10]
 800cfec:	88bb      	ldrh	r3, [r7, #4]
 800cfee:	1ad3      	subs	r3, r2, r3
 800cff0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800cff2:	8b3a      	ldrh	r2, [r7, #24]
 800cff4:	88fb      	ldrh	r3, [r7, #6]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d901      	bls.n	800cffe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800cffa:	88fb      	ldrh	r3, [r7, #6]
 800cffc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800cffe:	8b7b      	ldrh	r3, [r7, #26]
 800d000:	68ba      	ldr	r2, [r7, #8]
 800d002:	18d0      	adds	r0, r2, r3
 800d004:	69fb      	ldr	r3, [r7, #28]
 800d006:	685a      	ldr	r2, [r3, #4]
 800d008:	88bb      	ldrh	r3, [r7, #4]
 800d00a:	4413      	add	r3, r2
 800d00c:	8b3a      	ldrh	r2, [r7, #24]
 800d00e:	4619      	mov	r1, r3
 800d010:	f00c fbea 	bl	80197e8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d014:	8afa      	ldrh	r2, [r7, #22]
 800d016:	8b3b      	ldrh	r3, [r7, #24]
 800d018:	4413      	add	r3, r2
 800d01a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d01c:	8b7a      	ldrh	r2, [r7, #26]
 800d01e:	8b3b      	ldrh	r3, [r7, #24]
 800d020:	4413      	add	r3, r2
 800d022:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d024:	88fa      	ldrh	r2, [r7, #6]
 800d026:	8b3b      	ldrh	r3, [r7, #24]
 800d028:	1ad3      	subs	r3, r2, r3
 800d02a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d02c:	2300      	movs	r3, #0
 800d02e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d030:	69fb      	ldr	r3, [r7, #28]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	61fb      	str	r3, [r7, #28]
 800d036:	88fb      	ldrh	r3, [r7, #6]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d002      	beq.n	800d042 <pbuf_copy_partial+0xca>
 800d03c:	69fb      	ldr	r3, [r7, #28]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d1c4      	bne.n	800cfcc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d042:	8afb      	ldrh	r3, [r7, #22]
}
 800d044:	4618      	mov	r0, r3
 800d046:	3720      	adds	r7, #32
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	0801d838 	.word	0x0801d838
 800d050:	0801db80 	.word	0x0801db80
 800d054:	0801d898 	.word	0x0801d898
 800d058:	0801dba0 	.word	0x0801dba0

0800d05c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	4603      	mov	r3, r0
 800d064:	603a      	str	r2, [r7, #0]
 800d066:	71fb      	strb	r3, [r7, #7]
 800d068:	460b      	mov	r3, r1
 800d06a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	8919      	ldrh	r1, [r3, #8]
 800d070:	88ba      	ldrh	r2, [r7, #4]
 800d072:	79fb      	ldrb	r3, [r7, #7]
 800d074:	4618      	mov	r0, r3
 800d076:	f7ff faa5 	bl	800c5c4 <pbuf_alloc>
 800d07a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d101      	bne.n	800d086 <pbuf_clone+0x2a>
    return NULL;
 800d082:	2300      	movs	r3, #0
 800d084:	e011      	b.n	800d0aa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d086:	6839      	ldr	r1, [r7, #0]
 800d088:	68f8      	ldr	r0, [r7, #12]
 800d08a:	f7ff fea3 	bl	800cdd4 <pbuf_copy>
 800d08e:	4603      	mov	r3, r0
 800d090:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d092:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d006      	beq.n	800d0a8 <pbuf_clone+0x4c>
 800d09a:	4b06      	ldr	r3, [pc, #24]	; (800d0b4 <pbuf_clone+0x58>)
 800d09c:	f240 5224 	movw	r2, #1316	; 0x524
 800d0a0:	4905      	ldr	r1, [pc, #20]	; (800d0b8 <pbuf_clone+0x5c>)
 800d0a2:	4806      	ldr	r0, [pc, #24]	; (800d0bc <pbuf_clone+0x60>)
 800d0a4:	f00d f812 	bl	801a0cc <iprintf>
  return q;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3710      	adds	r7, #16
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	0801d838 	.word	0x0801d838
 800d0b8:	0801dcac 	.word	0x0801dcac
 800d0bc:	0801d898 	.word	0x0801d898

0800d0c0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d0c4:	f00d f81a 	bl	801a0fc <rand>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d0d0:	b29b      	uxth	r3, r3
 800d0d2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d0d6:	b29a      	uxth	r2, r3
 800d0d8:	4b01      	ldr	r3, [pc, #4]	; (800d0e0 <tcp_init+0x20>)
 800d0da:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d0dc:	bf00      	nop
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	20000028 	.word	0x20000028

0800d0e4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b082      	sub	sp, #8
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	7d1b      	ldrb	r3, [r3, #20]
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	d105      	bne.n	800d100 <tcp_free+0x1c>
 800d0f4:	4b06      	ldr	r3, [pc, #24]	; (800d110 <tcp_free+0x2c>)
 800d0f6:	22d4      	movs	r2, #212	; 0xd4
 800d0f8:	4906      	ldr	r1, [pc, #24]	; (800d114 <tcp_free+0x30>)
 800d0fa:	4807      	ldr	r0, [pc, #28]	; (800d118 <tcp_free+0x34>)
 800d0fc:	f00c ffe6 	bl	801a0cc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d100:	6879      	ldr	r1, [r7, #4]
 800d102:	2001      	movs	r0, #1
 800d104:	f7fe fe9e 	bl	800be44 <memp_free>
}
 800d108:	bf00      	nop
 800d10a:	3708      	adds	r7, #8
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}
 800d110:	0801dd38 	.word	0x0801dd38
 800d114:	0801dd68 	.word	0x0801dd68
 800d118:	0801dd7c 	.word	0x0801dd7c

0800d11c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	7d1b      	ldrb	r3, [r3, #20]
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d105      	bne.n	800d138 <tcp_free_listen+0x1c>
 800d12c:	4b06      	ldr	r3, [pc, #24]	; (800d148 <tcp_free_listen+0x2c>)
 800d12e:	22df      	movs	r2, #223	; 0xdf
 800d130:	4906      	ldr	r1, [pc, #24]	; (800d14c <tcp_free_listen+0x30>)
 800d132:	4807      	ldr	r0, [pc, #28]	; (800d150 <tcp_free_listen+0x34>)
 800d134:	f00c ffca 	bl	801a0cc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d138:	6879      	ldr	r1, [r7, #4]
 800d13a:	2002      	movs	r0, #2
 800d13c:	f7fe fe82 	bl	800be44 <memp_free>
}
 800d140:	bf00      	nop
 800d142:	3708      	adds	r7, #8
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	0801dd38 	.word	0x0801dd38
 800d14c:	0801dda4 	.word	0x0801dda4
 800d150:	0801dd7c 	.word	0x0801dd7c

0800d154 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d158:	f001 f8a6 	bl	800e2a8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d15c:	4b07      	ldr	r3, [pc, #28]	; (800d17c <tcp_tmr+0x28>)
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	3301      	adds	r3, #1
 800d162:	b2da      	uxtb	r2, r3
 800d164:	4b05      	ldr	r3, [pc, #20]	; (800d17c <tcp_tmr+0x28>)
 800d166:	701a      	strb	r2, [r3, #0]
 800d168:	4b04      	ldr	r3, [pc, #16]	; (800d17c <tcp_tmr+0x28>)
 800d16a:	781b      	ldrb	r3, [r3, #0]
 800d16c:	f003 0301 	and.w	r3, r3, #1
 800d170:	2b00      	cmp	r3, #0
 800d172:	d001      	beq.n	800d178 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d174:	f000 fd58 	bl	800dc28 <tcp_slowtmr>
  }
}
 800d178:	bf00      	nop
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	20011491 	.word	0x20011491

0800d180 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
 800d188:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d105      	bne.n	800d19c <tcp_remove_listener+0x1c>
 800d190:	4b0d      	ldr	r3, [pc, #52]	; (800d1c8 <tcp_remove_listener+0x48>)
 800d192:	22ff      	movs	r2, #255	; 0xff
 800d194:	490d      	ldr	r1, [pc, #52]	; (800d1cc <tcp_remove_listener+0x4c>)
 800d196:	480e      	ldr	r0, [pc, #56]	; (800d1d0 <tcp_remove_listener+0x50>)
 800d198:	f00c ff98 	bl	801a0cc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	60fb      	str	r3, [r7, #12]
 800d1a0:	e00a      	b.n	800d1b8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1a6:	683a      	ldr	r2, [r7, #0]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d102      	bne.n	800d1b2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	68db      	ldr	r3, [r3, #12]
 800d1b6:	60fb      	str	r3, [r7, #12]
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d1f1      	bne.n	800d1a2 <tcp_remove_listener+0x22>
    }
  }
}
 800d1be:	bf00      	nop
 800d1c0:	bf00      	nop
 800d1c2:	3710      	adds	r7, #16
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}
 800d1c8:	0801dd38 	.word	0x0801dd38
 800d1cc:	0801ddc0 	.word	0x0801ddc0
 800d1d0:	0801dd7c 	.word	0x0801dd7c

0800d1d4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b084      	sub	sp, #16
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d106      	bne.n	800d1f0 <tcp_listen_closed+0x1c>
 800d1e2:	4b14      	ldr	r3, [pc, #80]	; (800d234 <tcp_listen_closed+0x60>)
 800d1e4:	f240 1211 	movw	r2, #273	; 0x111
 800d1e8:	4913      	ldr	r1, [pc, #76]	; (800d238 <tcp_listen_closed+0x64>)
 800d1ea:	4814      	ldr	r0, [pc, #80]	; (800d23c <tcp_listen_closed+0x68>)
 800d1ec:	f00c ff6e 	bl	801a0cc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	7d1b      	ldrb	r3, [r3, #20]
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d006      	beq.n	800d206 <tcp_listen_closed+0x32>
 800d1f8:	4b0e      	ldr	r3, [pc, #56]	; (800d234 <tcp_listen_closed+0x60>)
 800d1fa:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d1fe:	4910      	ldr	r1, [pc, #64]	; (800d240 <tcp_listen_closed+0x6c>)
 800d200:	480e      	ldr	r0, [pc, #56]	; (800d23c <tcp_listen_closed+0x68>)
 800d202:	f00c ff63 	bl	801a0cc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d206:	2301      	movs	r3, #1
 800d208:	60fb      	str	r3, [r7, #12]
 800d20a:	e00b      	b.n	800d224 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d20c:	4a0d      	ldr	r2, [pc, #52]	; (800d244 <tcp_listen_closed+0x70>)
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	6879      	ldr	r1, [r7, #4]
 800d218:	4618      	mov	r0, r3
 800d21a:	f7ff ffb1 	bl	800d180 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	3301      	adds	r3, #1
 800d222:	60fb      	str	r3, [r7, #12]
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2b03      	cmp	r3, #3
 800d228:	d9f0      	bls.n	800d20c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d22a:	bf00      	nop
 800d22c:	bf00      	nop
 800d22e:	3710      	adds	r7, #16
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}
 800d234:	0801dd38 	.word	0x0801dd38
 800d238:	0801dde8 	.word	0x0801dde8
 800d23c:	0801dd7c 	.word	0x0801dd7c
 800d240:	0801ddf4 	.word	0x0801ddf4
 800d244:	08029530 	.word	0x08029530

0800d248 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d248:	b5b0      	push	{r4, r5, r7, lr}
 800d24a:	b088      	sub	sp, #32
 800d24c:	af04      	add	r7, sp, #16
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	460b      	mov	r3, r1
 800d252:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d106      	bne.n	800d268 <tcp_close_shutdown+0x20>
 800d25a:	4b63      	ldr	r3, [pc, #396]	; (800d3e8 <tcp_close_shutdown+0x1a0>)
 800d25c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d260:	4962      	ldr	r1, [pc, #392]	; (800d3ec <tcp_close_shutdown+0x1a4>)
 800d262:	4863      	ldr	r0, [pc, #396]	; (800d3f0 <tcp_close_shutdown+0x1a8>)
 800d264:	f00c ff32 	bl	801a0cc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d268:	78fb      	ldrb	r3, [r7, #3]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d066      	beq.n	800d33c <tcp_close_shutdown+0xf4>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	7d1b      	ldrb	r3, [r3, #20]
 800d272:	2b04      	cmp	r3, #4
 800d274:	d003      	beq.n	800d27e <tcp_close_shutdown+0x36>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	7d1b      	ldrb	r3, [r3, #20]
 800d27a:	2b07      	cmp	r3, #7
 800d27c:	d15e      	bne.n	800d33c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d282:	2b00      	cmp	r3, #0
 800d284:	d104      	bne.n	800d290 <tcp_close_shutdown+0x48>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d28a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d28e:	d055      	beq.n	800d33c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	8b5b      	ldrh	r3, [r3, #26]
 800d294:	f003 0310 	and.w	r3, r3, #16
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d106      	bne.n	800d2aa <tcp_close_shutdown+0x62>
 800d29c:	4b52      	ldr	r3, [pc, #328]	; (800d3e8 <tcp_close_shutdown+0x1a0>)
 800d29e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d2a2:	4954      	ldr	r1, [pc, #336]	; (800d3f4 <tcp_close_shutdown+0x1ac>)
 800d2a4:	4852      	ldr	r0, [pc, #328]	; (800d3f0 <tcp_close_shutdown+0x1a8>)
 800d2a6:	f00c ff11 	bl	801a0cc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d2b2:	687d      	ldr	r5, [r7, #4]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	3304      	adds	r3, #4
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	8ad2      	ldrh	r2, [r2, #22]
 800d2bc:	6879      	ldr	r1, [r7, #4]
 800d2be:	8b09      	ldrh	r1, [r1, #24]
 800d2c0:	9102      	str	r1, [sp, #8]
 800d2c2:	9201      	str	r2, [sp, #4]
 800d2c4:	9300      	str	r3, [sp, #0]
 800d2c6:	462b      	mov	r3, r5
 800d2c8:	4622      	mov	r2, r4
 800d2ca:	4601      	mov	r1, r0
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f005 fdbb 	bl	8012e48 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f001 fb98 	bl	800ea08 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d2d8:	4b47      	ldr	r3, [pc, #284]	; (800d3f8 <tcp_close_shutdown+0x1b0>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	687a      	ldr	r2, [r7, #4]
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d105      	bne.n	800d2ee <tcp_close_shutdown+0xa6>
 800d2e2:	4b45      	ldr	r3, [pc, #276]	; (800d3f8 <tcp_close_shutdown+0x1b0>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	4a43      	ldr	r2, [pc, #268]	; (800d3f8 <tcp_close_shutdown+0x1b0>)
 800d2ea:	6013      	str	r3, [r2, #0]
 800d2ec:	e013      	b.n	800d316 <tcp_close_shutdown+0xce>
 800d2ee:	4b42      	ldr	r3, [pc, #264]	; (800d3f8 <tcp_close_shutdown+0x1b0>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	60fb      	str	r3, [r7, #12]
 800d2f4:	e00c      	b.n	800d310 <tcp_close_shutdown+0xc8>
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	68db      	ldr	r3, [r3, #12]
 800d2fa:	687a      	ldr	r2, [r7, #4]
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d104      	bne.n	800d30a <tcp_close_shutdown+0xc2>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	68da      	ldr	r2, [r3, #12]
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	60da      	str	r2, [r3, #12]
 800d308:	e005      	b.n	800d316 <tcp_close_shutdown+0xce>
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	60fb      	str	r3, [r7, #12]
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d1ef      	bne.n	800d2f6 <tcp_close_shutdown+0xae>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2200      	movs	r2, #0
 800d31a:	60da      	str	r2, [r3, #12]
 800d31c:	4b37      	ldr	r3, [pc, #220]	; (800d3fc <tcp_close_shutdown+0x1b4>)
 800d31e:	2201      	movs	r2, #1
 800d320:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d322:	4b37      	ldr	r3, [pc, #220]	; (800d400 <tcp_close_shutdown+0x1b8>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	687a      	ldr	r2, [r7, #4]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d102      	bne.n	800d332 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d32c:	f004 f830 	bl	8011390 <tcp_trigger_input_pcb_close>
 800d330:	e002      	b.n	800d338 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f7ff fed6 	bl	800d0e4 <tcp_free>
      }
      return ERR_OK;
 800d338:	2300      	movs	r3, #0
 800d33a:	e050      	b.n	800d3de <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	7d1b      	ldrb	r3, [r3, #20]
 800d340:	2b02      	cmp	r3, #2
 800d342:	d03b      	beq.n	800d3bc <tcp_close_shutdown+0x174>
 800d344:	2b02      	cmp	r3, #2
 800d346:	dc44      	bgt.n	800d3d2 <tcp_close_shutdown+0x18a>
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d002      	beq.n	800d352 <tcp_close_shutdown+0x10a>
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	d02a      	beq.n	800d3a6 <tcp_close_shutdown+0x15e>
 800d350:	e03f      	b.n	800d3d2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	8adb      	ldrh	r3, [r3, #22]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d021      	beq.n	800d39e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d35a:	4b2a      	ldr	r3, [pc, #168]	; (800d404 <tcp_close_shutdown+0x1bc>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	429a      	cmp	r2, r3
 800d362:	d105      	bne.n	800d370 <tcp_close_shutdown+0x128>
 800d364:	4b27      	ldr	r3, [pc, #156]	; (800d404 <tcp_close_shutdown+0x1bc>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	68db      	ldr	r3, [r3, #12]
 800d36a:	4a26      	ldr	r2, [pc, #152]	; (800d404 <tcp_close_shutdown+0x1bc>)
 800d36c:	6013      	str	r3, [r2, #0]
 800d36e:	e013      	b.n	800d398 <tcp_close_shutdown+0x150>
 800d370:	4b24      	ldr	r3, [pc, #144]	; (800d404 <tcp_close_shutdown+0x1bc>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	60bb      	str	r3, [r7, #8]
 800d376:	e00c      	b.n	800d392 <tcp_close_shutdown+0x14a>
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	68db      	ldr	r3, [r3, #12]
 800d37c:	687a      	ldr	r2, [r7, #4]
 800d37e:	429a      	cmp	r2, r3
 800d380:	d104      	bne.n	800d38c <tcp_close_shutdown+0x144>
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	68da      	ldr	r2, [r3, #12]
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	60da      	str	r2, [r3, #12]
 800d38a:	e005      	b.n	800d398 <tcp_close_shutdown+0x150>
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	68db      	ldr	r3, [r3, #12]
 800d390:	60bb      	str	r3, [r7, #8]
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d1ef      	bne.n	800d378 <tcp_close_shutdown+0x130>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f7ff fea0 	bl	800d0e4 <tcp_free>
      break;
 800d3a4:	e01a      	b.n	800d3dc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f7ff ff14 	bl	800d1d4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d3ac:	6879      	ldr	r1, [r7, #4]
 800d3ae:	4816      	ldr	r0, [pc, #88]	; (800d408 <tcp_close_shutdown+0x1c0>)
 800d3b0:	f001 fb7a 	bl	800eaa8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f7ff feb1 	bl	800d11c <tcp_free_listen>
      break;
 800d3ba:	e00f      	b.n	800d3dc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d3bc:	6879      	ldr	r1, [r7, #4]
 800d3be:	480e      	ldr	r0, [pc, #56]	; (800d3f8 <tcp_close_shutdown+0x1b0>)
 800d3c0:	f001 fb72 	bl	800eaa8 <tcp_pcb_remove>
 800d3c4:	4b0d      	ldr	r3, [pc, #52]	; (800d3fc <tcp_close_shutdown+0x1b4>)
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f7ff fe8a 	bl	800d0e4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d3d0:	e004      	b.n	800d3dc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f000 f81a 	bl	800d40c <tcp_close_shutdown_fin>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	e000      	b.n	800d3de <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d3dc:	2300      	movs	r3, #0
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3710      	adds	r7, #16
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bdb0      	pop	{r4, r5, r7, pc}
 800d3e6:	bf00      	nop
 800d3e8:	0801dd38 	.word	0x0801dd38
 800d3ec:	0801de0c 	.word	0x0801de0c
 800d3f0:	0801dd7c 	.word	0x0801dd7c
 800d3f4:	0801de2c 	.word	0x0801de2c
 800d3f8:	20011488 	.word	0x20011488
 800d3fc:	20011490 	.word	0x20011490
 800d400:	200114c8 	.word	0x200114c8
 800d404:	20011480 	.word	0x20011480
 800d408:	20011484 	.word	0x20011484

0800d40c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d106      	bne.n	800d428 <tcp_close_shutdown_fin+0x1c>
 800d41a:	4b2e      	ldr	r3, [pc, #184]	; (800d4d4 <tcp_close_shutdown_fin+0xc8>)
 800d41c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d420:	492d      	ldr	r1, [pc, #180]	; (800d4d8 <tcp_close_shutdown_fin+0xcc>)
 800d422:	482e      	ldr	r0, [pc, #184]	; (800d4dc <tcp_close_shutdown_fin+0xd0>)
 800d424:	f00c fe52 	bl	801a0cc <iprintf>

  switch (pcb->state) {
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	7d1b      	ldrb	r3, [r3, #20]
 800d42c:	2b07      	cmp	r3, #7
 800d42e:	d020      	beq.n	800d472 <tcp_close_shutdown_fin+0x66>
 800d430:	2b07      	cmp	r3, #7
 800d432:	dc2b      	bgt.n	800d48c <tcp_close_shutdown_fin+0x80>
 800d434:	2b03      	cmp	r3, #3
 800d436:	d002      	beq.n	800d43e <tcp_close_shutdown_fin+0x32>
 800d438:	2b04      	cmp	r3, #4
 800d43a:	d00d      	beq.n	800d458 <tcp_close_shutdown_fin+0x4c>
 800d43c:	e026      	b.n	800d48c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f004 fe10 	bl	8012064 <tcp_send_fin>
 800d444:	4603      	mov	r3, r0
 800d446:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d448:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d11f      	bne.n	800d490 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2205      	movs	r2, #5
 800d454:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d456:	e01b      	b.n	800d490 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f004 fe03 	bl	8012064 <tcp_send_fin>
 800d45e:	4603      	mov	r3, r0
 800d460:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d114      	bne.n	800d494 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2205      	movs	r2, #5
 800d46e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d470:	e010      	b.n	800d494 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f004 fdf6 	bl	8012064 <tcp_send_fin>
 800d478:	4603      	mov	r3, r0
 800d47a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d47c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d109      	bne.n	800d498 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2209      	movs	r2, #9
 800d488:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d48a:	e005      	b.n	800d498 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d48c:	2300      	movs	r3, #0
 800d48e:	e01c      	b.n	800d4ca <tcp_close_shutdown_fin+0xbe>
      break;
 800d490:	bf00      	nop
 800d492:	e002      	b.n	800d49a <tcp_close_shutdown_fin+0x8e>
      break;
 800d494:	bf00      	nop
 800d496:	e000      	b.n	800d49a <tcp_close_shutdown_fin+0x8e>
      break;
 800d498:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d49a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d103      	bne.n	800d4aa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f004 ff1c 	bl	80122e0 <tcp_output>
 800d4a8:	e00d      	b.n	800d4c6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d4aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4b2:	d108      	bne.n	800d4c6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	8b5b      	ldrh	r3, [r3, #26]
 800d4b8:	f043 0308 	orr.w	r3, r3, #8
 800d4bc:	b29a      	uxth	r2, r3
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	e001      	b.n	800d4ca <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d4c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3710      	adds	r7, #16
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	0801dd38 	.word	0x0801dd38
 800d4d8:	0801dde8 	.word	0x0801dde8
 800d4dc:	0801dd7c 	.word	0x0801dd7c

0800d4e0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b082      	sub	sp, #8
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d109      	bne.n	800d502 <tcp_close+0x22>
 800d4ee:	4b0f      	ldr	r3, [pc, #60]	; (800d52c <tcp_close+0x4c>)
 800d4f0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d4f4:	490e      	ldr	r1, [pc, #56]	; (800d530 <tcp_close+0x50>)
 800d4f6:	480f      	ldr	r0, [pc, #60]	; (800d534 <tcp_close+0x54>)
 800d4f8:	f00c fde8 	bl	801a0cc <iprintf>
 800d4fc:	f06f 030f 	mvn.w	r3, #15
 800d500:	e00f      	b.n	800d522 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	7d1b      	ldrb	r3, [r3, #20]
 800d506:	2b01      	cmp	r3, #1
 800d508:	d006      	beq.n	800d518 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	8b5b      	ldrh	r3, [r3, #26]
 800d50e:	f043 0310 	orr.w	r3, r3, #16
 800d512:	b29a      	uxth	r2, r3
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d518:	2101      	movs	r1, #1
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f7ff fe94 	bl	800d248 <tcp_close_shutdown>
 800d520:	4603      	mov	r3, r0
}
 800d522:	4618      	mov	r0, r3
 800d524:	3708      	adds	r7, #8
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}
 800d52a:	bf00      	nop
 800d52c:	0801dd38 	.word	0x0801dd38
 800d530:	0801de48 	.word	0x0801de48
 800d534:	0801dd7c 	.word	0x0801dd7c

0800d538 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	60b9      	str	r1, [r7, #8]
 800d542:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d109      	bne.n	800d55e <tcp_shutdown+0x26>
 800d54a:	4b26      	ldr	r3, [pc, #152]	; (800d5e4 <tcp_shutdown+0xac>)
 800d54c:	f240 2207 	movw	r2, #519	; 0x207
 800d550:	4925      	ldr	r1, [pc, #148]	; (800d5e8 <tcp_shutdown+0xb0>)
 800d552:	4826      	ldr	r0, [pc, #152]	; (800d5ec <tcp_shutdown+0xb4>)
 800d554:	f00c fdba 	bl	801a0cc <iprintf>
 800d558:	f06f 030f 	mvn.w	r3, #15
 800d55c:	e03d      	b.n	800d5da <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	7d1b      	ldrb	r3, [r3, #20]
 800d562:	2b01      	cmp	r3, #1
 800d564:	d102      	bne.n	800d56c <tcp_shutdown+0x34>
    return ERR_CONN;
 800d566:	f06f 030a 	mvn.w	r3, #10
 800d56a:	e036      	b.n	800d5da <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d01b      	beq.n	800d5aa <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	8b5b      	ldrh	r3, [r3, #26]
 800d576:	f043 0310 	orr.w	r3, r3, #16
 800d57a:	b29a      	uxth	r2, r3
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d005      	beq.n	800d592 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d586:	2101      	movs	r1, #1
 800d588:	68f8      	ldr	r0, [r7, #12]
 800d58a:	f7ff fe5d 	bl	800d248 <tcp_close_shutdown>
 800d58e:	4603      	mov	r3, r0
 800d590:	e023      	b.n	800d5da <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d596:	2b00      	cmp	r3, #0
 800d598:	d007      	beq.n	800d5aa <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7ff faf4 	bl	800cb8c <pbuf_free>
      pcb->refused_data = NULL;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d013      	beq.n	800d5d8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	7d1b      	ldrb	r3, [r3, #20]
 800d5b4:	2b04      	cmp	r3, #4
 800d5b6:	dc02      	bgt.n	800d5be <tcp_shutdown+0x86>
 800d5b8:	2b03      	cmp	r3, #3
 800d5ba:	da02      	bge.n	800d5c2 <tcp_shutdown+0x8a>
 800d5bc:	e009      	b.n	800d5d2 <tcp_shutdown+0x9a>
 800d5be:	2b07      	cmp	r3, #7
 800d5c0:	d107      	bne.n	800d5d2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	b2db      	uxtb	r3, r3
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	68f8      	ldr	r0, [r7, #12]
 800d5ca:	f7ff fe3d 	bl	800d248 <tcp_close_shutdown>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	e003      	b.n	800d5da <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d5d2:	f06f 030a 	mvn.w	r3, #10
 800d5d6:	e000      	b.n	800d5da <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800d5d8:	2300      	movs	r3, #0
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3710      	adds	r7, #16
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	0801dd38 	.word	0x0801dd38
 800d5e8:	0801de60 	.word	0x0801de60
 800d5ec:	0801dd7c 	.word	0x0801dd7c

0800d5f0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b08e      	sub	sp, #56	; 0x38
 800d5f4:	af04      	add	r7, sp, #16
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d107      	bne.n	800d610 <tcp_abandon+0x20>
 800d600:	4b52      	ldr	r3, [pc, #328]	; (800d74c <tcp_abandon+0x15c>)
 800d602:	f240 223d 	movw	r2, #573	; 0x23d
 800d606:	4952      	ldr	r1, [pc, #328]	; (800d750 <tcp_abandon+0x160>)
 800d608:	4852      	ldr	r0, [pc, #328]	; (800d754 <tcp_abandon+0x164>)
 800d60a:	f00c fd5f 	bl	801a0cc <iprintf>
 800d60e:	e099      	b.n	800d744 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	7d1b      	ldrb	r3, [r3, #20]
 800d614:	2b01      	cmp	r3, #1
 800d616:	d106      	bne.n	800d626 <tcp_abandon+0x36>
 800d618:	4b4c      	ldr	r3, [pc, #304]	; (800d74c <tcp_abandon+0x15c>)
 800d61a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d61e:	494e      	ldr	r1, [pc, #312]	; (800d758 <tcp_abandon+0x168>)
 800d620:	484c      	ldr	r0, [pc, #304]	; (800d754 <tcp_abandon+0x164>)
 800d622:	f00c fd53 	bl	801a0cc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	7d1b      	ldrb	r3, [r3, #20]
 800d62a:	2b0a      	cmp	r3, #10
 800d62c:	d107      	bne.n	800d63e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d62e:	6879      	ldr	r1, [r7, #4]
 800d630:	484a      	ldr	r0, [pc, #296]	; (800d75c <tcp_abandon+0x16c>)
 800d632:	f001 fa39 	bl	800eaa8 <tcp_pcb_remove>
    tcp_free(pcb);
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f7ff fd54 	bl	800d0e4 <tcp_free>
 800d63c:	e082      	b.n	800d744 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d63e:	2300      	movs	r3, #0
 800d640:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d642:	2300      	movs	r3, #0
 800d644:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d64a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d650:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d658:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	691b      	ldr	r3, [r3, #16]
 800d65e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	7d1b      	ldrb	r3, [r3, #20]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d126      	bne.n	800d6b6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	8adb      	ldrh	r3, [r3, #22]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d02e      	beq.n	800d6ce <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d670:	4b3b      	ldr	r3, [pc, #236]	; (800d760 <tcp_abandon+0x170>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	687a      	ldr	r2, [r7, #4]
 800d676:	429a      	cmp	r2, r3
 800d678:	d105      	bne.n	800d686 <tcp_abandon+0x96>
 800d67a:	4b39      	ldr	r3, [pc, #228]	; (800d760 <tcp_abandon+0x170>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	68db      	ldr	r3, [r3, #12]
 800d680:	4a37      	ldr	r2, [pc, #220]	; (800d760 <tcp_abandon+0x170>)
 800d682:	6013      	str	r3, [r2, #0]
 800d684:	e013      	b.n	800d6ae <tcp_abandon+0xbe>
 800d686:	4b36      	ldr	r3, [pc, #216]	; (800d760 <tcp_abandon+0x170>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	61fb      	str	r3, [r7, #28]
 800d68c:	e00c      	b.n	800d6a8 <tcp_abandon+0xb8>
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	68db      	ldr	r3, [r3, #12]
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	429a      	cmp	r2, r3
 800d696:	d104      	bne.n	800d6a2 <tcp_abandon+0xb2>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	68da      	ldr	r2, [r3, #12]
 800d69c:	69fb      	ldr	r3, [r7, #28]
 800d69e:	60da      	str	r2, [r3, #12]
 800d6a0:	e005      	b.n	800d6ae <tcp_abandon+0xbe>
 800d6a2:	69fb      	ldr	r3, [r7, #28]
 800d6a4:	68db      	ldr	r3, [r3, #12]
 800d6a6:	61fb      	str	r3, [r7, #28]
 800d6a8:	69fb      	ldr	r3, [r7, #28]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d1ef      	bne.n	800d68e <tcp_abandon+0x9e>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	60da      	str	r2, [r3, #12]
 800d6b4:	e00b      	b.n	800d6ce <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	8adb      	ldrh	r3, [r3, #22]
 800d6be:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d6c0:	6879      	ldr	r1, [r7, #4]
 800d6c2:	4828      	ldr	r0, [pc, #160]	; (800d764 <tcp_abandon+0x174>)
 800d6c4:	f001 f9f0 	bl	800eaa8 <tcp_pcb_remove>
 800d6c8:	4b27      	ldr	r3, [pc, #156]	; (800d768 <tcp_abandon+0x178>)
 800d6ca:	2201      	movs	r2, #1
 800d6cc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d004      	beq.n	800d6e0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f000 fec4 	bl	800e468 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d004      	beq.n	800d6f2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f000 febb 	bl	800e468 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d004      	beq.n	800d704 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6fe:	4618      	mov	r0, r3
 800d700:	f000 feb2 	bl	800e468 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d706:	2b00      	cmp	r3, #0
 800d708:	d00e      	beq.n	800d728 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d70a:	6879      	ldr	r1, [r7, #4]
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	3304      	adds	r3, #4
 800d710:	687a      	ldr	r2, [r7, #4]
 800d712:	8b12      	ldrh	r2, [r2, #24]
 800d714:	9202      	str	r2, [sp, #8]
 800d716:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d718:	9201      	str	r2, [sp, #4]
 800d71a:	9300      	str	r3, [sp, #0]
 800d71c:	460b      	mov	r3, r1
 800d71e:	697a      	ldr	r2, [r7, #20]
 800d720:	69b9      	ldr	r1, [r7, #24]
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f005 fb90 	bl	8012e48 <tcp_rst>
    }
    last_state = pcb->state;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	7d1b      	ldrb	r3, [r3, #20]
 800d72c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f7ff fcd8 	bl	800d0e4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d004      	beq.n	800d744 <tcp_abandon+0x154>
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	f06f 010c 	mvn.w	r1, #12
 800d740:	68f8      	ldr	r0, [r7, #12]
 800d742:	4798      	blx	r3
  }
}
 800d744:	3728      	adds	r7, #40	; 0x28
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	0801dd38 	.word	0x0801dd38
 800d750:	0801de7c 	.word	0x0801de7c
 800d754:	0801dd7c 	.word	0x0801dd7c
 800d758:	0801de98 	.word	0x0801de98
 800d75c:	2001148c 	.word	0x2001148c
 800d760:	20011480 	.word	0x20011480
 800d764:	20011488 	.word	0x20011488
 800d768:	20011490 	.word	0x20011490

0800d76c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b082      	sub	sp, #8
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d774:	2101      	movs	r1, #1
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f7ff ff3a 	bl	800d5f0 <tcp_abandon>
}
 800d77c:	bf00      	nop
 800d77e:	3708      	adds	r7, #8
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b088      	sub	sp, #32
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	4613      	mov	r3, r2
 800d790:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d792:	2304      	movs	r3, #4
 800d794:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d101      	bne.n	800d7a0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800d79c:	4b3e      	ldr	r3, [pc, #248]	; (800d898 <tcp_bind+0x114>)
 800d79e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d109      	bne.n	800d7ba <tcp_bind+0x36>
 800d7a6:	4b3d      	ldr	r3, [pc, #244]	; (800d89c <tcp_bind+0x118>)
 800d7a8:	f240 22a9 	movw	r2, #681	; 0x2a9
 800d7ac:	493c      	ldr	r1, [pc, #240]	; (800d8a0 <tcp_bind+0x11c>)
 800d7ae:	483d      	ldr	r0, [pc, #244]	; (800d8a4 <tcp_bind+0x120>)
 800d7b0:	f00c fc8c 	bl	801a0cc <iprintf>
 800d7b4:	f06f 030f 	mvn.w	r3, #15
 800d7b8:	e06a      	b.n	800d890 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	7d1b      	ldrb	r3, [r3, #20]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d009      	beq.n	800d7d6 <tcp_bind+0x52>
 800d7c2:	4b36      	ldr	r3, [pc, #216]	; (800d89c <tcp_bind+0x118>)
 800d7c4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d7c8:	4937      	ldr	r1, [pc, #220]	; (800d8a8 <tcp_bind+0x124>)
 800d7ca:	4836      	ldr	r0, [pc, #216]	; (800d8a4 <tcp_bind+0x120>)
 800d7cc:	f00c fc7e 	bl	801a0cc <iprintf>
 800d7d0:	f06f 0305 	mvn.w	r3, #5
 800d7d4:	e05c      	b.n	800d890 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800d7d6:	88fb      	ldrh	r3, [r7, #6]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d109      	bne.n	800d7f0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800d7dc:	f000 f9de 	bl	800db9c <tcp_new_port>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d7e4:	88fb      	ldrh	r3, [r7, #6]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d135      	bne.n	800d856 <tcp_bind+0xd2>
      return ERR_BUF;
 800d7ea:	f06f 0301 	mvn.w	r3, #1
 800d7ee:	e04f      	b.n	800d890 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	61fb      	str	r3, [r7, #28]
 800d7f4:	e02b      	b.n	800d84e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d7f6:	4a2d      	ldr	r2, [pc, #180]	; (800d8ac <tcp_bind+0x128>)
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	61bb      	str	r3, [r7, #24]
 800d802:	e01e      	b.n	800d842 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800d804:	69bb      	ldr	r3, [r7, #24]
 800d806:	8adb      	ldrh	r3, [r3, #22]
 800d808:	88fa      	ldrh	r2, [r7, #6]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d116      	bne.n	800d83c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800d80e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d810:	2b00      	cmp	r3, #0
 800d812:	d010      	beq.n	800d836 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800d814:	69bb      	ldr	r3, [r7, #24]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d00c      	beq.n	800d836 <tcp_bind+0xb2>
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d009      	beq.n	800d836 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d005      	beq.n	800d836 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800d82a:	69bb      	ldr	r3, [r7, #24]
 800d82c:	681a      	ldr	r2, [r3, #0]
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d832:	429a      	cmp	r2, r3
 800d834:	d102      	bne.n	800d83c <tcp_bind+0xb8>
              return ERR_USE;
 800d836:	f06f 0307 	mvn.w	r3, #7
 800d83a:	e029      	b.n	800d890 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d83c:	69bb      	ldr	r3, [r7, #24]
 800d83e:	68db      	ldr	r3, [r3, #12]
 800d840:	61bb      	str	r3, [r7, #24]
 800d842:	69bb      	ldr	r3, [r7, #24]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d1dd      	bne.n	800d804 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800d848:	69fb      	ldr	r3, [r7, #28]
 800d84a:	3301      	adds	r3, #1
 800d84c:	61fb      	str	r3, [r7, #28]
 800d84e:	69fa      	ldr	r2, [r7, #28]
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	429a      	cmp	r2, r3
 800d854:	dbcf      	blt.n	800d7f6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d00c      	beq.n	800d876 <tcp_bind+0xf2>
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d008      	beq.n	800d876 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d002      	beq.n	800d870 <tcp_bind+0xec>
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	e000      	b.n	800d872 <tcp_bind+0xee>
 800d870:	2300      	movs	r3, #0
 800d872:	68fa      	ldr	r2, [r7, #12]
 800d874:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	88fa      	ldrh	r2, [r7, #6]
 800d87a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800d87c:	4b0c      	ldr	r3, [pc, #48]	; (800d8b0 <tcp_bind+0x12c>)
 800d87e:	681a      	ldr	r2, [r3, #0]
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	60da      	str	r2, [r3, #12]
 800d884:	4a0a      	ldr	r2, [pc, #40]	; (800d8b0 <tcp_bind+0x12c>)
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	6013      	str	r3, [r2, #0]
 800d88a:	f005 fc9f 	bl	80131cc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800d88e:	2300      	movs	r3, #0
}
 800d890:	4618      	mov	r0, r3
 800d892:	3720      	adds	r7, #32
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	08029558 	.word	0x08029558
 800d89c:	0801dd38 	.word	0x0801dd38
 800d8a0:	0801decc 	.word	0x0801decc
 800d8a4:	0801dd7c 	.word	0x0801dd7c
 800d8a8:	0801dee4 	.word	0x0801dee4
 800d8ac:	08029530 	.word	0x08029530
 800d8b0:	20011480 	.word	0x20011480

0800d8b4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	4613      	mov	r3, r2
 800d8c0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d106      	bne.n	800d8d6 <tcp_accept_null+0x22>
 800d8c8:	4b07      	ldr	r3, [pc, #28]	; (800d8e8 <tcp_accept_null+0x34>)
 800d8ca:	f240 320f 	movw	r2, #783	; 0x30f
 800d8ce:	4907      	ldr	r1, [pc, #28]	; (800d8ec <tcp_accept_null+0x38>)
 800d8d0:	4807      	ldr	r0, [pc, #28]	; (800d8f0 <tcp_accept_null+0x3c>)
 800d8d2:	f00c fbfb 	bl	801a0cc <iprintf>

  tcp_abort(pcb);
 800d8d6:	68b8      	ldr	r0, [r7, #8]
 800d8d8:	f7ff ff48 	bl	800d76c <tcp_abort>

  return ERR_ABRT;
 800d8dc:	f06f 030c 	mvn.w	r3, #12
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3710      	adds	r7, #16
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}
 800d8e8:	0801dd38 	.word	0x0801dd38
 800d8ec:	0801df0c 	.word	0x0801df0c
 800d8f0:	0801dd7c 	.word	0x0801dd7c

0800d8f4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b088      	sub	sp, #32
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	607a      	str	r2, [r7, #4]
 800d900:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800d902:	2300      	movs	r3, #0
 800d904:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d109      	bne.n	800d920 <tcp_listen_with_backlog_and_err+0x2c>
 800d90c:	4b47      	ldr	r3, [pc, #284]	; (800da2c <tcp_listen_with_backlog_and_err+0x138>)
 800d90e:	f240 3259 	movw	r2, #857	; 0x359
 800d912:	4947      	ldr	r1, [pc, #284]	; (800da30 <tcp_listen_with_backlog_and_err+0x13c>)
 800d914:	4847      	ldr	r0, [pc, #284]	; (800da34 <tcp_listen_with_backlog_and_err+0x140>)
 800d916:	f00c fbd9 	bl	801a0cc <iprintf>
 800d91a:	23f0      	movs	r3, #240	; 0xf0
 800d91c:	76fb      	strb	r3, [r7, #27]
 800d91e:	e079      	b.n	800da14 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	7d1b      	ldrb	r3, [r3, #20]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d009      	beq.n	800d93c <tcp_listen_with_backlog_and_err+0x48>
 800d928:	4b40      	ldr	r3, [pc, #256]	; (800da2c <tcp_listen_with_backlog_and_err+0x138>)
 800d92a:	f240 325a 	movw	r2, #858	; 0x35a
 800d92e:	4942      	ldr	r1, [pc, #264]	; (800da38 <tcp_listen_with_backlog_and_err+0x144>)
 800d930:	4840      	ldr	r0, [pc, #256]	; (800da34 <tcp_listen_with_backlog_and_err+0x140>)
 800d932:	f00c fbcb 	bl	801a0cc <iprintf>
 800d936:	23f1      	movs	r3, #241	; 0xf1
 800d938:	76fb      	strb	r3, [r7, #27]
 800d93a:	e06b      	b.n	800da14 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	7d1b      	ldrb	r3, [r3, #20]
 800d940:	2b01      	cmp	r3, #1
 800d942:	d104      	bne.n	800d94e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800d948:	23f7      	movs	r3, #247	; 0xf7
 800d94a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d94c:	e062      	b.n	800da14 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800d94e:	2002      	movs	r0, #2
 800d950:	f7fe fa02 	bl	800bd58 <memp_malloc>
 800d954:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800d956:	69fb      	ldr	r3, [r7, #28]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d102      	bne.n	800d962 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800d95c:	23ff      	movs	r3, #255	; 0xff
 800d95e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d960:	e058      	b.n	800da14 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	691a      	ldr	r2, [r3, #16]
 800d966:	69fb      	ldr	r3, [r7, #28]
 800d968:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	8ada      	ldrh	r2, [r3, #22]
 800d96e:	69fb      	ldr	r3, [r7, #28]
 800d970:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800d972:	69fb      	ldr	r3, [r7, #28]
 800d974:	2201      	movs	r2, #1
 800d976:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	7d5a      	ldrb	r2, [r3, #21]
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	7a5a      	ldrb	r2, [r3, #9]
 800d984:	69fb      	ldr	r3, [r7, #28]
 800d986:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800d988:	69fb      	ldr	r3, [r7, #28]
 800d98a:	2200      	movs	r2, #0
 800d98c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	7ada      	ldrb	r2, [r3, #11]
 800d992:	69fb      	ldr	r3, [r7, #28]
 800d994:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	7a9a      	ldrb	r2, [r3, #10]
 800d99a:	69fb      	ldr	r3, [r7, #28]
 800d99c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681a      	ldr	r2, [r3, #0]
 800d9a2:	69fb      	ldr	r3, [r7, #28]
 800d9a4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	8adb      	ldrh	r3, [r3, #22]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d021      	beq.n	800d9f2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800d9ae:	4b23      	ldr	r3, [pc, #140]	; (800da3c <tcp_listen_with_backlog_and_err+0x148>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	68fa      	ldr	r2, [r7, #12]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d105      	bne.n	800d9c4 <tcp_listen_with_backlog_and_err+0xd0>
 800d9b8:	4b20      	ldr	r3, [pc, #128]	; (800da3c <tcp_listen_with_backlog_and_err+0x148>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	68db      	ldr	r3, [r3, #12]
 800d9be:	4a1f      	ldr	r2, [pc, #124]	; (800da3c <tcp_listen_with_backlog_and_err+0x148>)
 800d9c0:	6013      	str	r3, [r2, #0]
 800d9c2:	e013      	b.n	800d9ec <tcp_listen_with_backlog_and_err+0xf8>
 800d9c4:	4b1d      	ldr	r3, [pc, #116]	; (800da3c <tcp_listen_with_backlog_and_err+0x148>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	617b      	str	r3, [r7, #20]
 800d9ca:	e00c      	b.n	800d9e6 <tcp_listen_with_backlog_and_err+0xf2>
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	68db      	ldr	r3, [r3, #12]
 800d9d0:	68fa      	ldr	r2, [r7, #12]
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d104      	bne.n	800d9e0 <tcp_listen_with_backlog_and_err+0xec>
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	68da      	ldr	r2, [r3, #12]
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	60da      	str	r2, [r3, #12]
 800d9de:	e005      	b.n	800d9ec <tcp_listen_with_backlog_and_err+0xf8>
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	68db      	ldr	r3, [r3, #12]
 800d9e4:	617b      	str	r3, [r7, #20]
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d1ef      	bne.n	800d9cc <tcp_listen_with_backlog_and_err+0xd8>
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800d9f2:	68f8      	ldr	r0, [r7, #12]
 800d9f4:	f7ff fb76 	bl	800d0e4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	4a11      	ldr	r2, [pc, #68]	; (800da40 <tcp_listen_with_backlog_and_err+0x14c>)
 800d9fc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800d9fe:	4b11      	ldr	r3, [pc, #68]	; (800da44 <tcp_listen_with_backlog_and_err+0x150>)
 800da00:	681a      	ldr	r2, [r3, #0]
 800da02:	69fb      	ldr	r3, [r7, #28]
 800da04:	60da      	str	r2, [r3, #12]
 800da06:	4a0f      	ldr	r2, [pc, #60]	; (800da44 <tcp_listen_with_backlog_and_err+0x150>)
 800da08:	69fb      	ldr	r3, [r7, #28]
 800da0a:	6013      	str	r3, [r2, #0]
 800da0c:	f005 fbde 	bl	80131cc <tcp_timer_needed>
  res = ERR_OK;
 800da10:	2300      	movs	r3, #0
 800da12:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d002      	beq.n	800da20 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	7efa      	ldrb	r2, [r7, #27]
 800da1e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800da20:	69fb      	ldr	r3, [r7, #28]
}
 800da22:	4618      	mov	r0, r3
 800da24:	3720      	adds	r7, #32
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop
 800da2c:	0801dd38 	.word	0x0801dd38
 800da30:	0801df2c 	.word	0x0801df2c
 800da34:	0801dd7c 	.word	0x0801dd7c
 800da38:	0801df5c 	.word	0x0801df5c
 800da3c:	20011480 	.word	0x20011480
 800da40:	0800d8b5 	.word	0x0800d8b5
 800da44:	20011484 	.word	0x20011484

0800da48 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d106      	bne.n	800da64 <tcp_update_rcv_ann_wnd+0x1c>
 800da56:	4b25      	ldr	r3, [pc, #148]	; (800daec <tcp_update_rcv_ann_wnd+0xa4>)
 800da58:	f240 32a6 	movw	r2, #934	; 0x3a6
 800da5c:	4924      	ldr	r1, [pc, #144]	; (800daf0 <tcp_update_rcv_ann_wnd+0xa8>)
 800da5e:	4825      	ldr	r0, [pc, #148]	; (800daf4 <tcp_update_rcv_ann_wnd+0xac>)
 800da60:	f00c fb34 	bl	801a0cc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da68:	687a      	ldr	r2, [r7, #4]
 800da6a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800da6c:	4413      	add	r3, r2
 800da6e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da74:	687a      	ldr	r2, [r7, #4]
 800da76:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800da78:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800da7c:	bf28      	it	cs
 800da7e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800da82:	b292      	uxth	r2, r2
 800da84:	4413      	add	r3, r2
 800da86:	68fa      	ldr	r2, [r7, #12]
 800da88:	1ad3      	subs	r3, r2, r3
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	db08      	blt.n	800daa0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da9a:	68fa      	ldr	r2, [r7, #12]
 800da9c:	1ad3      	subs	r3, r2, r3
 800da9e:	e020      	b.n	800dae2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daa8:	1ad3      	subs	r3, r2, r3
 800daaa:	2b00      	cmp	r3, #0
 800daac:	dd03      	ble.n	800dab6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2200      	movs	r2, #0
 800dab2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dab4:	e014      	b.n	800dae0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dabe:	1ad3      	subs	r3, r2, r3
 800dac0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dac8:	d306      	bcc.n	800dad8 <tcp_update_rcv_ann_wnd+0x90>
 800daca:	4b08      	ldr	r3, [pc, #32]	; (800daec <tcp_update_rcv_ann_wnd+0xa4>)
 800dacc:	f240 32b6 	movw	r2, #950	; 0x3b6
 800dad0:	4909      	ldr	r1, [pc, #36]	; (800daf8 <tcp_update_rcv_ann_wnd+0xb0>)
 800dad2:	4808      	ldr	r0, [pc, #32]	; (800daf4 <tcp_update_rcv_ann_wnd+0xac>)
 800dad4:	f00c fafa 	bl	801a0cc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	b29a      	uxth	r2, r3
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800dae0:	2300      	movs	r3, #0
  }
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3710      	adds	r7, #16
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	0801dd38 	.word	0x0801dd38
 800daf0:	0801df94 	.word	0x0801df94
 800daf4:	0801dd7c 	.word	0x0801dd7c
 800daf8:	0801dfb8 	.word	0x0801dfb8

0800dafc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	460b      	mov	r3, r1
 800db06:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d107      	bne.n	800db1e <tcp_recved+0x22>
 800db0e:	4b1f      	ldr	r3, [pc, #124]	; (800db8c <tcp_recved+0x90>)
 800db10:	f240 32cf 	movw	r2, #975	; 0x3cf
 800db14:	491e      	ldr	r1, [pc, #120]	; (800db90 <tcp_recved+0x94>)
 800db16:	481f      	ldr	r0, [pc, #124]	; (800db94 <tcp_recved+0x98>)
 800db18:	f00c fad8 	bl	801a0cc <iprintf>
 800db1c:	e032      	b.n	800db84 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	7d1b      	ldrb	r3, [r3, #20]
 800db22:	2b01      	cmp	r3, #1
 800db24:	d106      	bne.n	800db34 <tcp_recved+0x38>
 800db26:	4b19      	ldr	r3, [pc, #100]	; (800db8c <tcp_recved+0x90>)
 800db28:	f240 32d2 	movw	r2, #978	; 0x3d2
 800db2c:	491a      	ldr	r1, [pc, #104]	; (800db98 <tcp_recved+0x9c>)
 800db2e:	4819      	ldr	r0, [pc, #100]	; (800db94 <tcp_recved+0x98>)
 800db30:	f00c facc 	bl	801a0cc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800db38:	887b      	ldrh	r3, [r7, #2]
 800db3a:	4413      	add	r3, r2
 800db3c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800db3e:	89fb      	ldrh	r3, [r7, #14]
 800db40:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800db44:	d804      	bhi.n	800db50 <tcp_recved+0x54>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db4a:	89fa      	ldrh	r2, [r7, #14]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d204      	bcs.n	800db5a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800db56:	851a      	strh	r2, [r3, #40]	; 0x28
 800db58:	e002      	b.n	800db60 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	89fa      	ldrh	r2, [r7, #14]
 800db5e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f7ff ff71 	bl	800da48 <tcp_update_rcv_ann_wnd>
 800db66:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800db6e:	d309      	bcc.n	800db84 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	8b5b      	ldrh	r3, [r3, #26]
 800db74:	f043 0302 	orr.w	r3, r3, #2
 800db78:	b29a      	uxth	r2, r3
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f004 fbae 	bl	80122e0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800db84:	3710      	adds	r7, #16
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}
 800db8a:	bf00      	nop
 800db8c:	0801dd38 	.word	0x0801dd38
 800db90:	0801dfd4 	.word	0x0801dfd4
 800db94:	0801dd7c 	.word	0x0801dd7c
 800db98:	0801dfec 	.word	0x0801dfec

0800db9c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b083      	sub	sp, #12
 800dba0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800dba2:	2300      	movs	r3, #0
 800dba4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800dba6:	4b1e      	ldr	r3, [pc, #120]	; (800dc20 <tcp_new_port+0x84>)
 800dba8:	881b      	ldrh	r3, [r3, #0]
 800dbaa:	3301      	adds	r3, #1
 800dbac:	b29a      	uxth	r2, r3
 800dbae:	4b1c      	ldr	r3, [pc, #112]	; (800dc20 <tcp_new_port+0x84>)
 800dbb0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800dbb2:	4b1b      	ldr	r3, [pc, #108]	; (800dc20 <tcp_new_port+0x84>)
 800dbb4:	881b      	ldrh	r3, [r3, #0]
 800dbb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d103      	bne.n	800dbc6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800dbbe:	4b18      	ldr	r3, [pc, #96]	; (800dc20 <tcp_new_port+0x84>)
 800dbc0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800dbc4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	71fb      	strb	r3, [r7, #7]
 800dbca:	e01e      	b.n	800dc0a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800dbcc:	79fb      	ldrb	r3, [r7, #7]
 800dbce:	4a15      	ldr	r2, [pc, #84]	; (800dc24 <tcp_new_port+0x88>)
 800dbd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	603b      	str	r3, [r7, #0]
 800dbd8:	e011      	b.n	800dbfe <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	8ada      	ldrh	r2, [r3, #22]
 800dbde:	4b10      	ldr	r3, [pc, #64]	; (800dc20 <tcp_new_port+0x84>)
 800dbe0:	881b      	ldrh	r3, [r3, #0]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d108      	bne.n	800dbf8 <tcp_new_port+0x5c>
        n++;
 800dbe6:	88bb      	ldrh	r3, [r7, #4]
 800dbe8:	3301      	adds	r3, #1
 800dbea:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800dbec:	88bb      	ldrh	r3, [r7, #4]
 800dbee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dbf2:	d3d8      	bcc.n	800dba6 <tcp_new_port+0xa>
          return 0;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	e00d      	b.n	800dc14 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	68db      	ldr	r3, [r3, #12]
 800dbfc:	603b      	str	r3, [r7, #0]
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d1ea      	bne.n	800dbda <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800dc04:	79fb      	ldrb	r3, [r7, #7]
 800dc06:	3301      	adds	r3, #1
 800dc08:	71fb      	strb	r3, [r7, #7]
 800dc0a:	79fb      	ldrb	r3, [r7, #7]
 800dc0c:	2b03      	cmp	r3, #3
 800dc0e:	d9dd      	bls.n	800dbcc <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800dc10:	4b03      	ldr	r3, [pc, #12]	; (800dc20 <tcp_new_port+0x84>)
 800dc12:	881b      	ldrh	r3, [r3, #0]
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	370c      	adds	r7, #12
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr
 800dc20:	20000028 	.word	0x20000028
 800dc24:	08029530 	.word	0x08029530

0800dc28 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800dc28:	b5b0      	push	{r4, r5, r7, lr}
 800dc2a:	b090      	sub	sp, #64	; 0x40
 800dc2c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800dc34:	4b94      	ldr	r3, [pc, #592]	; (800de88 <tcp_slowtmr+0x260>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	3301      	adds	r3, #1
 800dc3a:	4a93      	ldr	r2, [pc, #588]	; (800de88 <tcp_slowtmr+0x260>)
 800dc3c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800dc3e:	4b93      	ldr	r3, [pc, #588]	; (800de8c <tcp_slowtmr+0x264>)
 800dc40:	781b      	ldrb	r3, [r3, #0]
 800dc42:	3301      	adds	r3, #1
 800dc44:	b2da      	uxtb	r2, r3
 800dc46:	4b91      	ldr	r3, [pc, #580]	; (800de8c <tcp_slowtmr+0x264>)
 800dc48:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800dc4e:	4b90      	ldr	r3, [pc, #576]	; (800de90 <tcp_slowtmr+0x268>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800dc54:	e29d      	b.n	800e192 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800dc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc58:	7d1b      	ldrb	r3, [r3, #20]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d106      	bne.n	800dc6c <tcp_slowtmr+0x44>
 800dc5e:	4b8d      	ldr	r3, [pc, #564]	; (800de94 <tcp_slowtmr+0x26c>)
 800dc60:	f240 42be 	movw	r2, #1214	; 0x4be
 800dc64:	498c      	ldr	r1, [pc, #560]	; (800de98 <tcp_slowtmr+0x270>)
 800dc66:	488d      	ldr	r0, [pc, #564]	; (800de9c <tcp_slowtmr+0x274>)
 800dc68:	f00c fa30 	bl	801a0cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800dc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc6e:	7d1b      	ldrb	r3, [r3, #20]
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	d106      	bne.n	800dc82 <tcp_slowtmr+0x5a>
 800dc74:	4b87      	ldr	r3, [pc, #540]	; (800de94 <tcp_slowtmr+0x26c>)
 800dc76:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800dc7a:	4989      	ldr	r1, [pc, #548]	; (800dea0 <tcp_slowtmr+0x278>)
 800dc7c:	4887      	ldr	r0, [pc, #540]	; (800de9c <tcp_slowtmr+0x274>)
 800dc7e:	f00c fa25 	bl	801a0cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800dc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc84:	7d1b      	ldrb	r3, [r3, #20]
 800dc86:	2b0a      	cmp	r3, #10
 800dc88:	d106      	bne.n	800dc98 <tcp_slowtmr+0x70>
 800dc8a:	4b82      	ldr	r3, [pc, #520]	; (800de94 <tcp_slowtmr+0x26c>)
 800dc8c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800dc90:	4984      	ldr	r1, [pc, #528]	; (800dea4 <tcp_slowtmr+0x27c>)
 800dc92:	4882      	ldr	r0, [pc, #520]	; (800de9c <tcp_slowtmr+0x274>)
 800dc94:	f00c fa1a 	bl	801a0cc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800dc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc9a:	7f9a      	ldrb	r2, [r3, #30]
 800dc9c:	4b7b      	ldr	r3, [pc, #492]	; (800de8c <tcp_slowtmr+0x264>)
 800dc9e:	781b      	ldrb	r3, [r3, #0]
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d105      	bne.n	800dcb0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800dca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcaa:	68db      	ldr	r3, [r3, #12]
 800dcac:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800dcae:	e270      	b.n	800e192 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800dcb0:	4b76      	ldr	r3, [pc, #472]	; (800de8c <tcp_slowtmr+0x264>)
 800dcb2:	781a      	ldrb	r2, [r3, #0]
 800dcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800dcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc6:	7d1b      	ldrb	r3, [r3, #20]
 800dcc8:	2b02      	cmp	r3, #2
 800dcca:	d10a      	bne.n	800dce2 <tcp_slowtmr+0xba>
 800dccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dcd2:	2b05      	cmp	r3, #5
 800dcd4:	d905      	bls.n	800dce2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800dcd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcda:	3301      	adds	r3, #1
 800dcdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dce0:	e11e      	b.n	800df20 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800dce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dce8:	2b0b      	cmp	r3, #11
 800dcea:	d905      	bls.n	800dcf8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800dcec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcf0:	3301      	adds	r3, #1
 800dcf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dcf6:	e113      	b.n	800df20 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800dcf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcfa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d075      	beq.n	800ddee <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800dd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d006      	beq.n	800dd18 <tcp_slowtmr+0xf0>
 800dd0a:	4b62      	ldr	r3, [pc, #392]	; (800de94 <tcp_slowtmr+0x26c>)
 800dd0c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800dd10:	4965      	ldr	r1, [pc, #404]	; (800dea8 <tcp_slowtmr+0x280>)
 800dd12:	4862      	ldr	r0, [pc, #392]	; (800de9c <tcp_slowtmr+0x274>)
 800dd14:	f00c f9da 	bl	801a0cc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800dd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d106      	bne.n	800dd2e <tcp_slowtmr+0x106>
 800dd20:	4b5c      	ldr	r3, [pc, #368]	; (800de94 <tcp_slowtmr+0x26c>)
 800dd22:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800dd26:	4961      	ldr	r1, [pc, #388]	; (800deac <tcp_slowtmr+0x284>)
 800dd28:	485c      	ldr	r0, [pc, #368]	; (800de9c <tcp_slowtmr+0x274>)
 800dd2a:	f00c f9cf 	bl	801a0cc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800dd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd30:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800dd34:	2b0b      	cmp	r3, #11
 800dd36:	d905      	bls.n	800dd44 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800dd38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd3c:	3301      	adds	r3, #1
 800dd3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dd42:	e0ed      	b.n	800df20 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800dd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd46:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dd4a:	3b01      	subs	r3, #1
 800dd4c:	4a58      	ldr	r2, [pc, #352]	; (800deb0 <tcp_slowtmr+0x288>)
 800dd4e:	5cd3      	ldrb	r3, [r2, r3]
 800dd50:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800dd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd54:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dd58:	7c7a      	ldrb	r2, [r7, #17]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d907      	bls.n	800dd6e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800dd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd60:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dd64:	3301      	adds	r3, #1
 800dd66:	b2da      	uxtb	r2, r3
 800dd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800dd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd70:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dd74:	7c7a      	ldrb	r2, [r7, #17]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	f200 80d2 	bhi.w	800df20 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800dd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d108      	bne.n	800dd9c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800dd8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd8c:	f005 f950 	bl	8013030 <tcp_zero_window_probe>
 800dd90:	4603      	mov	r3, r0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d014      	beq.n	800ddc0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800dd96:	2300      	movs	r3, #0
 800dd98:	623b      	str	r3, [r7, #32]
 800dd9a:	e011      	b.n	800ddc0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800dd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dda2:	4619      	mov	r1, r3
 800dda4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dda6:	f004 f815 	bl	8011dd4 <tcp_split_unsent_seg>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d107      	bne.n	800ddc0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ddb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ddb2:	f004 fa95 	bl	80122e0 <tcp_output>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d101      	bne.n	800ddc0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ddc0:	6a3b      	ldr	r3, [r7, #32]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	f000 80ac 	beq.w	800df20 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ddc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddca:	2200      	movs	r2, #0
 800ddcc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ddd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ddd6:	2b06      	cmp	r3, #6
 800ddd8:	f200 80a2 	bhi.w	800df20 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800dddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddde:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dde2:	3301      	adds	r3, #1
 800dde4:	b2da      	uxtb	r2, r3
 800dde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800ddec:	e098      	b.n	800df20 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ddee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	db0f      	blt.n	800de18 <tcp_slowtmr+0x1f0>
 800ddf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddfa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ddfe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800de02:	4293      	cmp	r3, r2
 800de04:	d008      	beq.n	800de18 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800de06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de08:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800de0c:	b29b      	uxth	r3, r3
 800de0e:	3301      	adds	r3, #1
 800de10:	b29b      	uxth	r3, r3
 800de12:	b21a      	sxth	r2, r3
 800de14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de16:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800de18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de1a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800de1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de20:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800de24:	429a      	cmp	r2, r3
 800de26:	db7b      	blt.n	800df20 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800de28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de2a:	f004 fd4b 	bl	80128c4 <tcp_rexmit_rto_prepare>
 800de2e:	4603      	mov	r3, r0
 800de30:	2b00      	cmp	r3, #0
 800de32:	d007      	beq.n	800de44 <tcp_slowtmr+0x21c>
 800de34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d171      	bne.n	800df20 <tcp_slowtmr+0x2f8>
 800de3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de40:	2b00      	cmp	r3, #0
 800de42:	d06d      	beq.n	800df20 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800de44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de46:	7d1b      	ldrb	r3, [r3, #20]
 800de48:	2b02      	cmp	r3, #2
 800de4a:	d03a      	beq.n	800dec2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800de4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800de52:	2b0c      	cmp	r3, #12
 800de54:	bf28      	it	cs
 800de56:	230c      	movcs	r3, #12
 800de58:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800de5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de5c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800de60:	10db      	asrs	r3, r3, #3
 800de62:	b21b      	sxth	r3, r3
 800de64:	461a      	mov	r2, r3
 800de66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de68:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800de6c:	4413      	add	r3, r2
 800de6e:	7efa      	ldrb	r2, [r7, #27]
 800de70:	4910      	ldr	r1, [pc, #64]	; (800deb4 <tcp_slowtmr+0x28c>)
 800de72:	5c8a      	ldrb	r2, [r1, r2]
 800de74:	4093      	lsls	r3, r2
 800de76:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800de7e:	4293      	cmp	r3, r2
 800de80:	dc1a      	bgt.n	800deb8 <tcp_slowtmr+0x290>
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	b21a      	sxth	r2, r3
 800de86:	e019      	b.n	800debc <tcp_slowtmr+0x294>
 800de88:	2001147c 	.word	0x2001147c
 800de8c:	20011492 	.word	0x20011492
 800de90:	20011488 	.word	0x20011488
 800de94:	0801dd38 	.word	0x0801dd38
 800de98:	0801e07c 	.word	0x0801e07c
 800de9c:	0801dd7c 	.word	0x0801dd7c
 800dea0:	0801e0a8 	.word	0x0801e0a8
 800dea4:	0801e0d4 	.word	0x0801e0d4
 800dea8:	0801e104 	.word	0x0801e104
 800deac:	0801e138 	.word	0x0801e138
 800deb0:	08029528 	.word	0x08029528
 800deb4:	08029518 	.word	0x08029518
 800deb8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800debc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800debe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800dec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec4:	2200      	movs	r2, #0
 800dec6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800dec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ded4:	4293      	cmp	r3, r2
 800ded6:	bf28      	it	cs
 800ded8:	4613      	movcs	r3, r2
 800deda:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800dedc:	8a7b      	ldrh	r3, [r7, #18]
 800dede:	085b      	lsrs	r3, r3, #1
 800dee0:	b29a      	uxth	r2, r3
 800dee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800dee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800deee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800def2:	005b      	lsls	r3, r3, #1
 800def4:	b29b      	uxth	r3, r3
 800def6:	429a      	cmp	r2, r3
 800def8:	d206      	bcs.n	800df08 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800defa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800defe:	005b      	lsls	r3, r3, #1
 800df00:	b29a      	uxth	r2, r3
 800df02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df04:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800df08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df0a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800df0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800df12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df14:	2200      	movs	r2, #0
 800df16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800df1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df1c:	f004 fd42 	bl	80129a4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800df20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df22:	7d1b      	ldrb	r3, [r3, #20]
 800df24:	2b06      	cmp	r3, #6
 800df26:	d111      	bne.n	800df4c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800df28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df2a:	8b5b      	ldrh	r3, [r3, #26]
 800df2c:	f003 0310 	and.w	r3, r3, #16
 800df30:	2b00      	cmp	r3, #0
 800df32:	d00b      	beq.n	800df4c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df34:	4b9c      	ldr	r3, [pc, #624]	; (800e1a8 <tcp_slowtmr+0x580>)
 800df36:	681a      	ldr	r2, [r3, #0]
 800df38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df3a:	6a1b      	ldr	r3, [r3, #32]
 800df3c:	1ad3      	subs	r3, r2, r3
 800df3e:	2b28      	cmp	r3, #40	; 0x28
 800df40:	d904      	bls.n	800df4c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800df42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df46:	3301      	adds	r3, #1
 800df48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800df4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df4e:	7a5b      	ldrb	r3, [r3, #9]
 800df50:	f003 0308 	and.w	r3, r3, #8
 800df54:	2b00      	cmp	r3, #0
 800df56:	d04a      	beq.n	800dfee <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800df58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df5a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800df5c:	2b04      	cmp	r3, #4
 800df5e:	d003      	beq.n	800df68 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800df60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df62:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800df64:	2b07      	cmp	r3, #7
 800df66:	d142      	bne.n	800dfee <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df68:	4b8f      	ldr	r3, [pc, #572]	; (800e1a8 <tcp_slowtmr+0x580>)
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df6e:	6a1b      	ldr	r3, [r3, #32]
 800df70:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800df72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df74:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800df78:	4b8c      	ldr	r3, [pc, #560]	; (800e1ac <tcp_slowtmr+0x584>)
 800df7a:	440b      	add	r3, r1
 800df7c:	498c      	ldr	r1, [pc, #560]	; (800e1b0 <tcp_slowtmr+0x588>)
 800df7e:	fba1 1303 	umull	r1, r3, r1, r3
 800df82:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df84:	429a      	cmp	r2, r3
 800df86:	d90a      	bls.n	800df9e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800df88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df8c:	3301      	adds	r3, #1
 800df8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800df92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df96:	3301      	adds	r3, #1
 800df98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800df9c:	e027      	b.n	800dfee <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df9e:	4b82      	ldr	r3, [pc, #520]	; (800e1a8 <tcp_slowtmr+0x580>)
 800dfa0:	681a      	ldr	r2, [r3, #0]
 800dfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa4:	6a1b      	ldr	r3, [r3, #32]
 800dfa6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800dfa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfaa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800dfae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	4b7f      	ldr	r3, [pc, #508]	; (800e1b4 <tcp_slowtmr+0x58c>)
 800dfb8:	fb00 f303 	mul.w	r3, r0, r3
 800dfbc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800dfbe:	497c      	ldr	r1, [pc, #496]	; (800e1b0 <tcp_slowtmr+0x588>)
 800dfc0:	fba1 1303 	umull	r1, r3, r1, r3
 800dfc4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dfc6:	429a      	cmp	r2, r3
 800dfc8:	d911      	bls.n	800dfee <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800dfca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfcc:	f004 fff0 	bl	8012fb0 <tcp_keepalive>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800dfd6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d107      	bne.n	800dfee <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800dfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800dfe4:	3301      	adds	r3, #1
 800dfe6:	b2da      	uxtb	r2, r3
 800dfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfea:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800dfee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d011      	beq.n	800e01a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800dff6:	4b6c      	ldr	r3, [pc, #432]	; (800e1a8 <tcp_slowtmr+0x580>)
 800dff8:	681a      	ldr	r2, [r3, #0]
 800dffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dffc:	6a1b      	ldr	r3, [r3, #32]
 800dffe:	1ad2      	subs	r2, r2, r3
 800e000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e002:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e006:	4619      	mov	r1, r3
 800e008:	460b      	mov	r3, r1
 800e00a:	005b      	lsls	r3, r3, #1
 800e00c:	440b      	add	r3, r1
 800e00e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e010:	429a      	cmp	r2, r3
 800e012:	d302      	bcc.n	800e01a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e016:	f000 feab 	bl	800ed70 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01c:	7d1b      	ldrb	r3, [r3, #20]
 800e01e:	2b03      	cmp	r3, #3
 800e020:	d10b      	bne.n	800e03a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e022:	4b61      	ldr	r3, [pc, #388]	; (800e1a8 <tcp_slowtmr+0x580>)
 800e024:	681a      	ldr	r2, [r3, #0]
 800e026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e028:	6a1b      	ldr	r3, [r3, #32]
 800e02a:	1ad3      	subs	r3, r2, r3
 800e02c:	2b28      	cmp	r3, #40	; 0x28
 800e02e:	d904      	bls.n	800e03a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e030:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e034:	3301      	adds	r3, #1
 800e036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e03c:	7d1b      	ldrb	r3, [r3, #20]
 800e03e:	2b09      	cmp	r3, #9
 800e040:	d10b      	bne.n	800e05a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e042:	4b59      	ldr	r3, [pc, #356]	; (800e1a8 <tcp_slowtmr+0x580>)
 800e044:	681a      	ldr	r2, [r3, #0]
 800e046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e048:	6a1b      	ldr	r3, [r3, #32]
 800e04a:	1ad3      	subs	r3, r2, r3
 800e04c:	2bf0      	cmp	r3, #240	; 0xf0
 800e04e:	d904      	bls.n	800e05a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800e050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e054:	3301      	adds	r3, #1
 800e056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e05a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d060      	beq.n	800e124 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e068:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e06a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e06c:	f000 fccc 	bl	800ea08 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e072:	2b00      	cmp	r3, #0
 800e074:	d010      	beq.n	800e098 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e076:	4b50      	ldr	r3, [pc, #320]	; (800e1b8 <tcp_slowtmr+0x590>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d106      	bne.n	800e08e <tcp_slowtmr+0x466>
 800e080:	4b4e      	ldr	r3, [pc, #312]	; (800e1bc <tcp_slowtmr+0x594>)
 800e082:	f240 526d 	movw	r2, #1389	; 0x56d
 800e086:	494e      	ldr	r1, [pc, #312]	; (800e1c0 <tcp_slowtmr+0x598>)
 800e088:	484e      	ldr	r0, [pc, #312]	; (800e1c4 <tcp_slowtmr+0x59c>)
 800e08a:	f00c f81f 	bl	801a0cc <iprintf>
        prev->next = pcb->next;
 800e08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e090:	68da      	ldr	r2, [r3, #12]
 800e092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e094:	60da      	str	r2, [r3, #12]
 800e096:	e00f      	b.n	800e0b8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e098:	4b47      	ldr	r3, [pc, #284]	; (800e1b8 <tcp_slowtmr+0x590>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d006      	beq.n	800e0b0 <tcp_slowtmr+0x488>
 800e0a2:	4b46      	ldr	r3, [pc, #280]	; (800e1bc <tcp_slowtmr+0x594>)
 800e0a4:	f240 5271 	movw	r2, #1393	; 0x571
 800e0a8:	4947      	ldr	r1, [pc, #284]	; (800e1c8 <tcp_slowtmr+0x5a0>)
 800e0aa:	4846      	ldr	r0, [pc, #280]	; (800e1c4 <tcp_slowtmr+0x59c>)
 800e0ac:	f00c f80e 	bl	801a0cc <iprintf>
        tcp_active_pcbs = pcb->next;
 800e0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b2:	68db      	ldr	r3, [r3, #12]
 800e0b4:	4a40      	ldr	r2, [pc, #256]	; (800e1b8 <tcp_slowtmr+0x590>)
 800e0b6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e0b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d013      	beq.n	800e0e8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e0c8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0cc:	3304      	adds	r3, #4
 800e0ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0d0:	8ad2      	ldrh	r2, [r2, #22]
 800e0d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e0d4:	8b09      	ldrh	r1, [r1, #24]
 800e0d6:	9102      	str	r1, [sp, #8]
 800e0d8:	9201      	str	r2, [sp, #4]
 800e0da:	9300      	str	r3, [sp, #0]
 800e0dc:	462b      	mov	r3, r5
 800e0de:	4622      	mov	r2, r4
 800e0e0:	4601      	mov	r1, r0
 800e0e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e0e4:	f004 feb0 	bl	8012e48 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ea:	691b      	ldr	r3, [r3, #16]
 800e0ec:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f0:	7d1b      	ldrb	r3, [r3, #20]
 800e0f2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0fa:	68db      	ldr	r3, [r3, #12]
 800e0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e0fe:	6838      	ldr	r0, [r7, #0]
 800e100:	f7fe fff0 	bl	800d0e4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e104:	4b31      	ldr	r3, [pc, #196]	; (800e1cc <tcp_slowtmr+0x5a4>)
 800e106:	2200      	movs	r2, #0
 800e108:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d004      	beq.n	800e11a <tcp_slowtmr+0x4f2>
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	f06f 010c 	mvn.w	r1, #12
 800e116:	68b8      	ldr	r0, [r7, #8]
 800e118:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e11a:	4b2c      	ldr	r3, [pc, #176]	; (800e1cc <tcp_slowtmr+0x5a4>)
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d037      	beq.n	800e192 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800e122:	e592      	b.n	800dc4a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e126:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e12a:	68db      	ldr	r3, [r3, #12]
 800e12c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e130:	7f1b      	ldrb	r3, [r3, #28]
 800e132:	3301      	adds	r3, #1
 800e134:	b2da      	uxtb	r2, r3
 800e136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e138:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e13c:	7f1a      	ldrb	r2, [r3, #28]
 800e13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e140:	7f5b      	ldrb	r3, [r3, #29]
 800e142:	429a      	cmp	r2, r3
 800e144:	d325      	bcc.n	800e192 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800e146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e148:	2200      	movs	r2, #0
 800e14a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e14c:	4b1f      	ldr	r3, [pc, #124]	; (800e1cc <tcp_slowtmr+0x5a4>)
 800e14e:	2200      	movs	r2, #0
 800e150:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d00b      	beq.n	800e174 <tcp_slowtmr+0x54c>
 800e15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e15e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e164:	6912      	ldr	r2, [r2, #16]
 800e166:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e168:	4610      	mov	r0, r2
 800e16a:	4798      	blx	r3
 800e16c:	4603      	mov	r3, r0
 800e16e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e172:	e002      	b.n	800e17a <tcp_slowtmr+0x552>
 800e174:	2300      	movs	r3, #0
 800e176:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e17a:	4b14      	ldr	r3, [pc, #80]	; (800e1cc <tcp_slowtmr+0x5a4>)
 800e17c:	781b      	ldrb	r3, [r3, #0]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d000      	beq.n	800e184 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800e182:	e562      	b.n	800dc4a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e184:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d102      	bne.n	800e192 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800e18c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e18e:	f004 f8a7 	bl	80122e0 <tcp_output>
  while (pcb != NULL) {
 800e192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e194:	2b00      	cmp	r3, #0
 800e196:	f47f ad5e 	bne.w	800dc56 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e19a:	2300      	movs	r3, #0
 800e19c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e19e:	4b0c      	ldr	r3, [pc, #48]	; (800e1d0 <tcp_slowtmr+0x5a8>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e1a4:	e069      	b.n	800e27a <tcp_slowtmr+0x652>
 800e1a6:	bf00      	nop
 800e1a8:	2001147c 	.word	0x2001147c
 800e1ac:	000a4cb8 	.word	0x000a4cb8
 800e1b0:	10624dd3 	.word	0x10624dd3
 800e1b4:	000124f8 	.word	0x000124f8
 800e1b8:	20011488 	.word	0x20011488
 800e1bc:	0801dd38 	.word	0x0801dd38
 800e1c0:	0801e170 	.word	0x0801e170
 800e1c4:	0801dd7c 	.word	0x0801dd7c
 800e1c8:	0801e19c 	.word	0x0801e19c
 800e1cc:	20011490 	.word	0x20011490
 800e1d0:	2001148c 	.word	0x2001148c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d6:	7d1b      	ldrb	r3, [r3, #20]
 800e1d8:	2b0a      	cmp	r3, #10
 800e1da:	d006      	beq.n	800e1ea <tcp_slowtmr+0x5c2>
 800e1dc:	4b2b      	ldr	r3, [pc, #172]	; (800e28c <tcp_slowtmr+0x664>)
 800e1de:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e1e2:	492b      	ldr	r1, [pc, #172]	; (800e290 <tcp_slowtmr+0x668>)
 800e1e4:	482b      	ldr	r0, [pc, #172]	; (800e294 <tcp_slowtmr+0x66c>)
 800e1e6:	f00b ff71 	bl	801a0cc <iprintf>
    pcb_remove = 0;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e1f0:	4b29      	ldr	r3, [pc, #164]	; (800e298 <tcp_slowtmr+0x670>)
 800e1f2:	681a      	ldr	r2, [r3, #0]
 800e1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f6:	6a1b      	ldr	r3, [r3, #32]
 800e1f8:	1ad3      	subs	r3, r2, r3
 800e1fa:	2bf0      	cmp	r3, #240	; 0xf0
 800e1fc:	d904      	bls.n	800e208 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e1fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e202:	3301      	adds	r3, #1
 800e204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d02f      	beq.n	800e270 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e210:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e212:	f000 fbf9 	bl	800ea08 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d010      	beq.n	800e23e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e21c:	4b1f      	ldr	r3, [pc, #124]	; (800e29c <tcp_slowtmr+0x674>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e222:	429a      	cmp	r2, r3
 800e224:	d106      	bne.n	800e234 <tcp_slowtmr+0x60c>
 800e226:	4b19      	ldr	r3, [pc, #100]	; (800e28c <tcp_slowtmr+0x664>)
 800e228:	f240 52af 	movw	r2, #1455	; 0x5af
 800e22c:	491c      	ldr	r1, [pc, #112]	; (800e2a0 <tcp_slowtmr+0x678>)
 800e22e:	4819      	ldr	r0, [pc, #100]	; (800e294 <tcp_slowtmr+0x66c>)
 800e230:	f00b ff4c 	bl	801a0cc <iprintf>
        prev->next = pcb->next;
 800e234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e236:	68da      	ldr	r2, [r3, #12]
 800e238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e23a:	60da      	str	r2, [r3, #12]
 800e23c:	e00f      	b.n	800e25e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e23e:	4b17      	ldr	r3, [pc, #92]	; (800e29c <tcp_slowtmr+0x674>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e244:	429a      	cmp	r2, r3
 800e246:	d006      	beq.n	800e256 <tcp_slowtmr+0x62e>
 800e248:	4b10      	ldr	r3, [pc, #64]	; (800e28c <tcp_slowtmr+0x664>)
 800e24a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e24e:	4915      	ldr	r1, [pc, #84]	; (800e2a4 <tcp_slowtmr+0x67c>)
 800e250:	4810      	ldr	r0, [pc, #64]	; (800e294 <tcp_slowtmr+0x66c>)
 800e252:	f00b ff3b 	bl	801a0cc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e258:	68db      	ldr	r3, [r3, #12]
 800e25a:	4a10      	ldr	r2, [pc, #64]	; (800e29c <tcp_slowtmr+0x674>)
 800e25c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e260:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e264:	68db      	ldr	r3, [r3, #12]
 800e266:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e268:	69f8      	ldr	r0, [r7, #28]
 800e26a:	f7fe ff3b 	bl	800d0e4 <tcp_free>
 800e26e:	e004      	b.n	800e27a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e272:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e276:	68db      	ldr	r3, [r3, #12]
 800e278:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d1a9      	bne.n	800e1d4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e280:	bf00      	nop
 800e282:	bf00      	nop
 800e284:	3730      	adds	r7, #48	; 0x30
 800e286:	46bd      	mov	sp, r7
 800e288:	bdb0      	pop	{r4, r5, r7, pc}
 800e28a:	bf00      	nop
 800e28c:	0801dd38 	.word	0x0801dd38
 800e290:	0801e1c8 	.word	0x0801e1c8
 800e294:	0801dd7c 	.word	0x0801dd7c
 800e298:	2001147c 	.word	0x2001147c
 800e29c:	2001148c 	.word	0x2001148c
 800e2a0:	0801e1f8 	.word	0x0801e1f8
 800e2a4:	0801e220 	.word	0x0801e220

0800e2a8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e2ae:	4b2d      	ldr	r3, [pc, #180]	; (800e364 <tcp_fasttmr+0xbc>)
 800e2b0:	781b      	ldrb	r3, [r3, #0]
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	b2da      	uxtb	r2, r3
 800e2b6:	4b2b      	ldr	r3, [pc, #172]	; (800e364 <tcp_fasttmr+0xbc>)
 800e2b8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e2ba:	4b2b      	ldr	r3, [pc, #172]	; (800e368 <tcp_fasttmr+0xc0>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e2c0:	e048      	b.n	800e354 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	7f9a      	ldrb	r2, [r3, #30]
 800e2c6:	4b27      	ldr	r3, [pc, #156]	; (800e364 <tcp_fasttmr+0xbc>)
 800e2c8:	781b      	ldrb	r3, [r3, #0]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d03f      	beq.n	800e34e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e2ce:	4b25      	ldr	r3, [pc, #148]	; (800e364 <tcp_fasttmr+0xbc>)
 800e2d0:	781a      	ldrb	r2, [r3, #0]
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	8b5b      	ldrh	r3, [r3, #26]
 800e2da:	f003 0301 	and.w	r3, r3, #1
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d010      	beq.n	800e304 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	8b5b      	ldrh	r3, [r3, #26]
 800e2e6:	f043 0302 	orr.w	r3, r3, #2
 800e2ea:	b29a      	uxth	r2, r3
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f003 fff5 	bl	80122e0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	8b5b      	ldrh	r3, [r3, #26]
 800e2fa:	f023 0303 	bic.w	r3, r3, #3
 800e2fe:	b29a      	uxth	r2, r3
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	8b5b      	ldrh	r3, [r3, #26]
 800e308:	f003 0308 	and.w	r3, r3, #8
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d009      	beq.n	800e324 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	8b5b      	ldrh	r3, [r3, #26]
 800e314:	f023 0308 	bic.w	r3, r3, #8
 800e318:	b29a      	uxth	r2, r3
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f7ff f874 	bl	800d40c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	68db      	ldr	r3, [r3, #12]
 800e328:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d00a      	beq.n	800e348 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e332:	4b0e      	ldr	r3, [pc, #56]	; (800e36c <tcp_fasttmr+0xc4>)
 800e334:	2200      	movs	r2, #0
 800e336:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f000 f819 	bl	800e370 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e33e:	4b0b      	ldr	r3, [pc, #44]	; (800e36c <tcp_fasttmr+0xc4>)
 800e340:	781b      	ldrb	r3, [r3, #0]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d000      	beq.n	800e348 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e346:	e7b8      	b.n	800e2ba <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	607b      	str	r3, [r7, #4]
 800e34c:	e002      	b.n	800e354 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	68db      	ldr	r3, [r3, #12]
 800e352:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d1b3      	bne.n	800e2c2 <tcp_fasttmr+0x1a>
    }
  }
}
 800e35a:	bf00      	nop
 800e35c:	bf00      	nop
 800e35e:	3708      	adds	r7, #8
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}
 800e364:	20011492 	.word	0x20011492
 800e368:	20011488 	.word	0x20011488
 800e36c:	20011490 	.word	0x20011490

0800e370 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e370:	b590      	push	{r4, r7, lr}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d109      	bne.n	800e392 <tcp_process_refused_data+0x22>
 800e37e:	4b37      	ldr	r3, [pc, #220]	; (800e45c <tcp_process_refused_data+0xec>)
 800e380:	f240 6209 	movw	r2, #1545	; 0x609
 800e384:	4936      	ldr	r1, [pc, #216]	; (800e460 <tcp_process_refused_data+0xf0>)
 800e386:	4837      	ldr	r0, [pc, #220]	; (800e464 <tcp_process_refused_data+0xf4>)
 800e388:	f00b fea0 	bl	801a0cc <iprintf>
 800e38c:	f06f 030f 	mvn.w	r3, #15
 800e390:	e060      	b.n	800e454 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e396:	7b5b      	ldrb	r3, [r3, #13]
 800e398:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e39e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d00b      	beq.n	800e3c8 <tcp_process_refused_data+0x58>
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6918      	ldr	r0, [r3, #16]
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	68ba      	ldr	r2, [r7, #8]
 800e3be:	6879      	ldr	r1, [r7, #4]
 800e3c0:	47a0      	blx	r4
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	73fb      	strb	r3, [r7, #15]
 800e3c6:	e007      	b.n	800e3d8 <tcp_process_refused_data+0x68>
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	68ba      	ldr	r2, [r7, #8]
 800e3cc:	6879      	ldr	r1, [r7, #4]
 800e3ce:	2000      	movs	r0, #0
 800e3d0:	f000 f8a4 	bl	800e51c <tcp_recv_null>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e3d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d12a      	bne.n	800e436 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e3e0:	7bbb      	ldrb	r3, [r7, #14]
 800e3e2:	f003 0320 	and.w	r3, r3, #32
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d033      	beq.n	800e452 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3ee:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e3f2:	d005      	beq.n	800e400 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3f8:	3301      	adds	r3, #1
 800e3fa:	b29a      	uxth	r2, r3
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e406:	2b00      	cmp	r3, #0
 800e408:	d00b      	beq.n	800e422 <tcp_process_refused_data+0xb2>
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6918      	ldr	r0, [r3, #16]
 800e414:	2300      	movs	r3, #0
 800e416:	2200      	movs	r2, #0
 800e418:	6879      	ldr	r1, [r7, #4]
 800e41a:	47a0      	blx	r4
 800e41c:	4603      	mov	r3, r0
 800e41e:	73fb      	strb	r3, [r7, #15]
 800e420:	e001      	b.n	800e426 <tcp_process_refused_data+0xb6>
 800e422:	2300      	movs	r3, #0
 800e424:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e42a:	f113 0f0d 	cmn.w	r3, #13
 800e42e:	d110      	bne.n	800e452 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e430:	f06f 030c 	mvn.w	r3, #12
 800e434:	e00e      	b.n	800e454 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e43a:	f113 0f0d 	cmn.w	r3, #13
 800e43e:	d102      	bne.n	800e446 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e440:	f06f 030c 	mvn.w	r3, #12
 800e444:	e006      	b.n	800e454 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	68ba      	ldr	r2, [r7, #8]
 800e44a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e44c:	f06f 0304 	mvn.w	r3, #4
 800e450:	e000      	b.n	800e454 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e452:	2300      	movs	r3, #0
}
 800e454:	4618      	mov	r0, r3
 800e456:	3714      	adds	r7, #20
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd90      	pop	{r4, r7, pc}
 800e45c:	0801dd38 	.word	0x0801dd38
 800e460:	0801e248 	.word	0x0801e248
 800e464:	0801dd7c 	.word	0x0801dd7c

0800e468 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b084      	sub	sp, #16
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e470:	e007      	b.n	800e482 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f000 f80a 	bl	800e492 <tcp_seg_free>
    seg = next;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d1f4      	bne.n	800e472 <tcp_segs_free+0xa>
  }
}
 800e488:	bf00      	nop
 800e48a:	bf00      	nop
 800e48c:	3710      	adds	r7, #16
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}

0800e492 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e492:	b580      	push	{r7, lr}
 800e494:	b082      	sub	sp, #8
 800e496:	af00      	add	r7, sp, #0
 800e498:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d00c      	beq.n	800e4ba <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	685b      	ldr	r3, [r3, #4]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d004      	beq.n	800e4b2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	685b      	ldr	r3, [r3, #4]
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7fe fb6d 	bl	800cb8c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e4b2:	6879      	ldr	r1, [r7, #4]
 800e4b4:	2003      	movs	r0, #3
 800e4b6:	f7fd fcc5 	bl	800be44 <memp_free>
  }
}
 800e4ba:	bf00      	nop
 800e4bc:	3708      	adds	r7, #8
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}
	...

0800e4c4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b084      	sub	sp, #16
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d106      	bne.n	800e4e0 <tcp_seg_copy+0x1c>
 800e4d2:	4b0f      	ldr	r3, [pc, #60]	; (800e510 <tcp_seg_copy+0x4c>)
 800e4d4:	f240 6282 	movw	r2, #1666	; 0x682
 800e4d8:	490e      	ldr	r1, [pc, #56]	; (800e514 <tcp_seg_copy+0x50>)
 800e4da:	480f      	ldr	r0, [pc, #60]	; (800e518 <tcp_seg_copy+0x54>)
 800e4dc:	f00b fdf6 	bl	801a0cc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e4e0:	2003      	movs	r0, #3
 800e4e2:	f7fd fc39 	bl	800bd58 <memp_malloc>
 800e4e6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d101      	bne.n	800e4f2 <tcp_seg_copy+0x2e>
    return NULL;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	e00a      	b.n	800e508 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e4f2:	2210      	movs	r2, #16
 800e4f4:	6879      	ldr	r1, [r7, #4]
 800e4f6:	68f8      	ldr	r0, [r7, #12]
 800e4f8:	f00b f976 	bl	80197e8 <memcpy>
  pbuf_ref(cseg->p);
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	685b      	ldr	r3, [r3, #4]
 800e500:	4618      	mov	r0, r3
 800e502:	f7fe fbe9 	bl	800ccd8 <pbuf_ref>
  return cseg;
 800e506:	68fb      	ldr	r3, [r7, #12]
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3710      	adds	r7, #16
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}
 800e510:	0801dd38 	.word	0x0801dd38
 800e514:	0801e28c 	.word	0x0801e28c
 800e518:	0801dd7c 	.word	0x0801dd7c

0800e51c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b084      	sub	sp, #16
 800e520:	af00      	add	r7, sp, #0
 800e522:	60f8      	str	r0, [r7, #12]
 800e524:	60b9      	str	r1, [r7, #8]
 800e526:	607a      	str	r2, [r7, #4]
 800e528:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d109      	bne.n	800e544 <tcp_recv_null+0x28>
 800e530:	4b12      	ldr	r3, [pc, #72]	; (800e57c <tcp_recv_null+0x60>)
 800e532:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e536:	4912      	ldr	r1, [pc, #72]	; (800e580 <tcp_recv_null+0x64>)
 800e538:	4812      	ldr	r0, [pc, #72]	; (800e584 <tcp_recv_null+0x68>)
 800e53a:	f00b fdc7 	bl	801a0cc <iprintf>
 800e53e:	f06f 030f 	mvn.w	r3, #15
 800e542:	e016      	b.n	800e572 <tcp_recv_null+0x56>

  if (p != NULL) {
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d009      	beq.n	800e55e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	891b      	ldrh	r3, [r3, #8]
 800e54e:	4619      	mov	r1, r3
 800e550:	68b8      	ldr	r0, [r7, #8]
 800e552:	f7ff fad3 	bl	800dafc <tcp_recved>
    pbuf_free(p);
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f7fe fb18 	bl	800cb8c <pbuf_free>
 800e55c:	e008      	b.n	800e570 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e55e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d104      	bne.n	800e570 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e566:	68b8      	ldr	r0, [r7, #8]
 800e568:	f7fe ffba 	bl	800d4e0 <tcp_close>
 800e56c:	4603      	mov	r3, r0
 800e56e:	e000      	b.n	800e572 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e570:	2300      	movs	r3, #0
}
 800e572:	4618      	mov	r0, r3
 800e574:	3710      	adds	r7, #16
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	0801dd38 	.word	0x0801dd38
 800e580:	0801e2a8 	.word	0x0801e2a8
 800e584:	0801dd7c 	.word	0x0801dd7c

0800e588 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b086      	sub	sp, #24
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	4603      	mov	r3, r0
 800e590:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e596:	2b00      	cmp	r3, #0
 800e598:	db01      	blt.n	800e59e <tcp_kill_prio+0x16>
 800e59a:	79fb      	ldrb	r3, [r7, #7]
 800e59c:	e000      	b.n	800e5a0 <tcp_kill_prio+0x18>
 800e59e:	237f      	movs	r3, #127	; 0x7f
 800e5a0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e5a2:	7afb      	ldrb	r3, [r7, #11]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d034      	beq.n	800e612 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e5a8:	7afb      	ldrb	r3, [r7, #11]
 800e5aa:	3b01      	subs	r3, #1
 800e5ac:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5b6:	4b19      	ldr	r3, [pc, #100]	; (800e61c <tcp_kill_prio+0x94>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	617b      	str	r3, [r7, #20]
 800e5bc:	e01f      	b.n	800e5fe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	7d5b      	ldrb	r3, [r3, #21]
 800e5c2:	7afa      	ldrb	r2, [r7, #11]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d80c      	bhi.n	800e5e2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e5cc:	7afa      	ldrb	r2, [r7, #11]
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d112      	bne.n	800e5f8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e5d2:	4b13      	ldr	r3, [pc, #76]	; (800e620 <tcp_kill_prio+0x98>)
 800e5d4:	681a      	ldr	r2, [r3, #0]
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	6a1b      	ldr	r3, [r3, #32]
 800e5da:	1ad3      	subs	r3, r2, r3
 800e5dc:	68fa      	ldr	r2, [r7, #12]
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d80a      	bhi.n	800e5f8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e5e2:	4b0f      	ldr	r3, [pc, #60]	; (800e620 <tcp_kill_prio+0x98>)
 800e5e4:	681a      	ldr	r2, [r3, #0]
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	6a1b      	ldr	r3, [r3, #32]
 800e5ea:	1ad3      	subs	r3, r2, r3
 800e5ec:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e5f2:	697b      	ldr	r3, [r7, #20]
 800e5f4:	7d5b      	ldrb	r3, [r3, #21]
 800e5f6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	68db      	ldr	r3, [r3, #12]
 800e5fc:	617b      	str	r3, [r7, #20]
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d1dc      	bne.n	800e5be <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e604:	693b      	ldr	r3, [r7, #16]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d004      	beq.n	800e614 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e60a:	6938      	ldr	r0, [r7, #16]
 800e60c:	f7ff f8ae 	bl	800d76c <tcp_abort>
 800e610:	e000      	b.n	800e614 <tcp_kill_prio+0x8c>
    return;
 800e612:	bf00      	nop
  }
}
 800e614:	3718      	adds	r7, #24
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	20011488 	.word	0x20011488
 800e620:	2001147c 	.word	0x2001147c

0800e624 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b086      	sub	sp, #24
 800e628:	af00      	add	r7, sp, #0
 800e62a:	4603      	mov	r3, r0
 800e62c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e62e:	79fb      	ldrb	r3, [r7, #7]
 800e630:	2b08      	cmp	r3, #8
 800e632:	d009      	beq.n	800e648 <tcp_kill_state+0x24>
 800e634:	79fb      	ldrb	r3, [r7, #7]
 800e636:	2b09      	cmp	r3, #9
 800e638:	d006      	beq.n	800e648 <tcp_kill_state+0x24>
 800e63a:	4b1a      	ldr	r3, [pc, #104]	; (800e6a4 <tcp_kill_state+0x80>)
 800e63c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e640:	4919      	ldr	r1, [pc, #100]	; (800e6a8 <tcp_kill_state+0x84>)
 800e642:	481a      	ldr	r0, [pc, #104]	; (800e6ac <tcp_kill_state+0x88>)
 800e644:	f00b fd42 	bl	801a0cc <iprintf>

  inactivity = 0;
 800e648:	2300      	movs	r3, #0
 800e64a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e64c:	2300      	movs	r3, #0
 800e64e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e650:	4b17      	ldr	r3, [pc, #92]	; (800e6b0 <tcp_kill_state+0x8c>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	617b      	str	r3, [r7, #20]
 800e656:	e017      	b.n	800e688 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	7d1b      	ldrb	r3, [r3, #20]
 800e65c:	79fa      	ldrb	r2, [r7, #7]
 800e65e:	429a      	cmp	r2, r3
 800e660:	d10f      	bne.n	800e682 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e662:	4b14      	ldr	r3, [pc, #80]	; (800e6b4 <tcp_kill_state+0x90>)
 800e664:	681a      	ldr	r2, [r3, #0]
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	6a1b      	ldr	r3, [r3, #32]
 800e66a:	1ad3      	subs	r3, r2, r3
 800e66c:	68fa      	ldr	r2, [r7, #12]
 800e66e:	429a      	cmp	r2, r3
 800e670:	d807      	bhi.n	800e682 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e672:	4b10      	ldr	r3, [pc, #64]	; (800e6b4 <tcp_kill_state+0x90>)
 800e674:	681a      	ldr	r2, [r3, #0]
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	6a1b      	ldr	r3, [r3, #32]
 800e67a:	1ad3      	subs	r3, r2, r3
 800e67c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	68db      	ldr	r3, [r3, #12]
 800e686:	617b      	str	r3, [r7, #20]
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d1e4      	bne.n	800e658 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d003      	beq.n	800e69c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e694:	2100      	movs	r1, #0
 800e696:	6938      	ldr	r0, [r7, #16]
 800e698:	f7fe ffaa 	bl	800d5f0 <tcp_abandon>
  }
}
 800e69c:	bf00      	nop
 800e69e:	3718      	adds	r7, #24
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}
 800e6a4:	0801dd38 	.word	0x0801dd38
 800e6a8:	0801e2c4 	.word	0x0801e2c4
 800e6ac:	0801dd7c 	.word	0x0801dd7c
 800e6b0:	20011488 	.word	0x20011488
 800e6b4:	2001147c 	.word	0x2001147c

0800e6b8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b084      	sub	sp, #16
 800e6bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6c6:	4b12      	ldr	r3, [pc, #72]	; (800e710 <tcp_kill_timewait+0x58>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	60fb      	str	r3, [r7, #12]
 800e6cc:	e012      	b.n	800e6f4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e6ce:	4b11      	ldr	r3, [pc, #68]	; (800e714 <tcp_kill_timewait+0x5c>)
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	6a1b      	ldr	r3, [r3, #32]
 800e6d6:	1ad3      	subs	r3, r2, r3
 800e6d8:	687a      	ldr	r2, [r7, #4]
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d807      	bhi.n	800e6ee <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e6de:	4b0d      	ldr	r3, [pc, #52]	; (800e714 <tcp_kill_timewait+0x5c>)
 800e6e0:	681a      	ldr	r2, [r3, #0]
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	6a1b      	ldr	r3, [r3, #32]
 800e6e6:	1ad3      	subs	r3, r2, r3
 800e6e8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	68db      	ldr	r3, [r3, #12]
 800e6f2:	60fb      	str	r3, [r7, #12]
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d1e9      	bne.n	800e6ce <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d002      	beq.n	800e706 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e700:	68b8      	ldr	r0, [r7, #8]
 800e702:	f7ff f833 	bl	800d76c <tcp_abort>
  }
}
 800e706:	bf00      	nop
 800e708:	3710      	adds	r7, #16
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	bf00      	nop
 800e710:	2001148c 	.word	0x2001148c
 800e714:	2001147c 	.word	0x2001147c

0800e718 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e71e:	4b10      	ldr	r3, [pc, #64]	; (800e760 <tcp_handle_closepend+0x48>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e724:	e014      	b.n	800e750 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	68db      	ldr	r3, [r3, #12]
 800e72a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	8b5b      	ldrh	r3, [r3, #26]
 800e730:	f003 0308 	and.w	r3, r3, #8
 800e734:	2b00      	cmp	r3, #0
 800e736:	d009      	beq.n	800e74c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	8b5b      	ldrh	r3, [r3, #26]
 800e73c:	f023 0308 	bic.w	r3, r3, #8
 800e740:	b29a      	uxth	r2, r3
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f7fe fe60 	bl	800d40c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d1e7      	bne.n	800e726 <tcp_handle_closepend+0xe>
  }
}
 800e756:	bf00      	nop
 800e758:	bf00      	nop
 800e75a:	3708      	adds	r7, #8
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}
 800e760:	20011488 	.word	0x20011488

0800e764 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b084      	sub	sp, #16
 800e768:	af00      	add	r7, sp, #0
 800e76a:	4603      	mov	r3, r0
 800e76c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e76e:	2001      	movs	r0, #1
 800e770:	f7fd faf2 	bl	800bd58 <memp_malloc>
 800e774:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d126      	bne.n	800e7ca <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e77c:	f7ff ffcc 	bl	800e718 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e780:	f7ff ff9a 	bl	800e6b8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e784:	2001      	movs	r0, #1
 800e786:	f7fd fae7 	bl	800bd58 <memp_malloc>
 800e78a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d11b      	bne.n	800e7ca <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e792:	2009      	movs	r0, #9
 800e794:	f7ff ff46 	bl	800e624 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e798:	2001      	movs	r0, #1
 800e79a:	f7fd fadd 	bl	800bd58 <memp_malloc>
 800e79e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d111      	bne.n	800e7ca <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e7a6:	2008      	movs	r0, #8
 800e7a8:	f7ff ff3c 	bl	800e624 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e7ac:	2001      	movs	r0, #1
 800e7ae:	f7fd fad3 	bl	800bd58 <memp_malloc>
 800e7b2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d107      	bne.n	800e7ca <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e7ba:	79fb      	ldrb	r3, [r7, #7]
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f7ff fee3 	bl	800e588 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e7c2:	2001      	movs	r0, #1
 800e7c4:	f7fd fac8 	bl	800bd58 <memp_malloc>
 800e7c8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d03f      	beq.n	800e850 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e7d0:	229c      	movs	r2, #156	; 0x9c
 800e7d2:	2100      	movs	r1, #0
 800e7d4:	68f8      	ldr	r0, [r7, #12]
 800e7d6:	f00b f82f 	bl	8019838 <memset>
    pcb->prio = prio;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	79fa      	ldrb	r2, [r7, #7]
 800e7de:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e7e6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e7f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	22ff      	movs	r2, #255	; 0xff
 800e7fe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e806:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	2206      	movs	r2, #6
 800e80c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	2206      	movs	r2, #6
 800e814:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e81c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	2201      	movs	r2, #1
 800e822:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e826:	4b0d      	ldr	r3, [pc, #52]	; (800e85c <tcp_alloc+0xf8>)
 800e828:	681a      	ldr	r2, [r3, #0]
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e82e:	4b0c      	ldr	r3, [pc, #48]	; (800e860 <tcp_alloc+0xfc>)
 800e830:	781a      	ldrb	r2, [r3, #0]
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e83c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	4a08      	ldr	r2, [pc, #32]	; (800e864 <tcp_alloc+0x100>)
 800e844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	4a07      	ldr	r2, [pc, #28]	; (800e868 <tcp_alloc+0x104>)
 800e84c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e850:	68fb      	ldr	r3, [r7, #12]
}
 800e852:	4618      	mov	r0, r3
 800e854:	3710      	adds	r7, #16
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
 800e85a:	bf00      	nop
 800e85c:	2001147c 	.word	0x2001147c
 800e860:	20011492 	.word	0x20011492
 800e864:	0800e51d 	.word	0x0800e51d
 800e868:	006ddd00 	.word	0x006ddd00

0800e86c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b084      	sub	sp, #16
 800e870:	af00      	add	r7, sp, #0
 800e872:	4603      	mov	r3, r0
 800e874:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e876:	2040      	movs	r0, #64	; 0x40
 800e878:	f7ff ff74 	bl	800e764 <tcp_alloc>
 800e87c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e87e:	68fb      	ldr	r3, [r7, #12]
}
 800e880:	4618      	mov	r0, r3
 800e882:	3710      	adds	r7, #16
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}

0800e888 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d002      	beq.n	800e89e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	683a      	ldr	r2, [r7, #0]
 800e89c:	611a      	str	r2, [r3, #16]
  }
}
 800e89e:	bf00      	nop
 800e8a0:	370c      	adds	r7, #12
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a8:	4770      	bx	lr
	...

0800e8ac <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b082      	sub	sp, #8
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d00e      	beq.n	800e8da <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	7d1b      	ldrb	r3, [r3, #20]
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	d106      	bne.n	800e8d2 <tcp_recv+0x26>
 800e8c4:	4b07      	ldr	r3, [pc, #28]	; (800e8e4 <tcp_recv+0x38>)
 800e8c6:	f240 72df 	movw	r2, #2015	; 0x7df
 800e8ca:	4907      	ldr	r1, [pc, #28]	; (800e8e8 <tcp_recv+0x3c>)
 800e8cc:	4807      	ldr	r0, [pc, #28]	; (800e8ec <tcp_recv+0x40>)
 800e8ce:	f00b fbfd 	bl	801a0cc <iprintf>
    pcb->recv = recv;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	683a      	ldr	r2, [r7, #0]
 800e8d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800e8da:	bf00      	nop
 800e8dc:	3708      	adds	r7, #8
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	0801dd38 	.word	0x0801dd38
 800e8e8:	0801e2d4 	.word	0x0801e2d4
 800e8ec:	0801dd7c 	.word	0x0801dd7c

0800e8f0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b082      	sub	sp, #8
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
 800e8f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d00e      	beq.n	800e91e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	7d1b      	ldrb	r3, [r3, #20]
 800e904:	2b01      	cmp	r3, #1
 800e906:	d106      	bne.n	800e916 <tcp_sent+0x26>
 800e908:	4b07      	ldr	r3, [pc, #28]	; (800e928 <tcp_sent+0x38>)
 800e90a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800e90e:	4907      	ldr	r1, [pc, #28]	; (800e92c <tcp_sent+0x3c>)
 800e910:	4807      	ldr	r0, [pc, #28]	; (800e930 <tcp_sent+0x40>)
 800e912:	f00b fbdb 	bl	801a0cc <iprintf>
    pcb->sent = sent;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	683a      	ldr	r2, [r7, #0]
 800e91a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800e91e:	bf00      	nop
 800e920:	3708      	adds	r7, #8
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}
 800e926:	bf00      	nop
 800e928:	0801dd38 	.word	0x0801dd38
 800e92c:	0801e2fc 	.word	0x0801e2fc
 800e930:	0801dd7c 	.word	0x0801dd7c

0800e934 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d00e      	beq.n	800e962 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	7d1b      	ldrb	r3, [r3, #20]
 800e948:	2b01      	cmp	r3, #1
 800e94a:	d106      	bne.n	800e95a <tcp_err+0x26>
 800e94c:	4b07      	ldr	r3, [pc, #28]	; (800e96c <tcp_err+0x38>)
 800e94e:	f640 020d 	movw	r2, #2061	; 0x80d
 800e952:	4907      	ldr	r1, [pc, #28]	; (800e970 <tcp_err+0x3c>)
 800e954:	4807      	ldr	r0, [pc, #28]	; (800e974 <tcp_err+0x40>)
 800e956:	f00b fbb9 	bl	801a0cc <iprintf>
    pcb->errf = err;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	683a      	ldr	r2, [r7, #0]
 800e95e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800e962:	bf00      	nop
 800e964:	3708      	adds	r7, #8
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
 800e96a:	bf00      	nop
 800e96c:	0801dd38 	.word	0x0801dd38
 800e970:	0801e324 	.word	0x0801e324
 800e974:	0801dd7c 	.word	0x0801dd7c

0800e978 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e978:	b480      	push	{r7}
 800e97a:	b085      	sub	sp, #20
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d008      	beq.n	800e99a <tcp_accept+0x22>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	7d1b      	ldrb	r3, [r3, #20]
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	d104      	bne.n	800e99a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	683a      	ldr	r2, [r7, #0]
 800e998:	619a      	str	r2, [r3, #24]
  }
}
 800e99a:	bf00      	nop
 800e99c:	3714      	adds	r7, #20
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a4:	4770      	bx	lr
	...

0800e9a8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	60f8      	str	r0, [r7, #12]
 800e9b0:	60b9      	str	r1, [r7, #8]
 800e9b2:	4613      	mov	r3, r2
 800e9b4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d107      	bne.n	800e9cc <tcp_poll+0x24>
 800e9bc:	4b0e      	ldr	r3, [pc, #56]	; (800e9f8 <tcp_poll+0x50>)
 800e9be:	f640 023d 	movw	r2, #2109	; 0x83d
 800e9c2:	490e      	ldr	r1, [pc, #56]	; (800e9fc <tcp_poll+0x54>)
 800e9c4:	480e      	ldr	r0, [pc, #56]	; (800ea00 <tcp_poll+0x58>)
 800e9c6:	f00b fb81 	bl	801a0cc <iprintf>
 800e9ca:	e011      	b.n	800e9f0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	7d1b      	ldrb	r3, [r3, #20]
 800e9d0:	2b01      	cmp	r3, #1
 800e9d2:	d106      	bne.n	800e9e2 <tcp_poll+0x3a>
 800e9d4:	4b08      	ldr	r3, [pc, #32]	; (800e9f8 <tcp_poll+0x50>)
 800e9d6:	f640 023e 	movw	r2, #2110	; 0x83e
 800e9da:	490a      	ldr	r1, [pc, #40]	; (800ea04 <tcp_poll+0x5c>)
 800e9dc:	4808      	ldr	r0, [pc, #32]	; (800ea00 <tcp_poll+0x58>)
 800e9de:	f00b fb75 	bl	801a0cc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	68ba      	ldr	r2, [r7, #8]
 800e9e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	79fa      	ldrb	r2, [r7, #7]
 800e9ee:	775a      	strb	r2, [r3, #29]
}
 800e9f0:	3710      	adds	r7, #16
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
 800e9f6:	bf00      	nop
 800e9f8:	0801dd38 	.word	0x0801dd38
 800e9fc:	0801e34c 	.word	0x0801e34c
 800ea00:	0801dd7c 	.word	0x0801dd7c
 800ea04:	0801e364 	.word	0x0801e364

0800ea08 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b082      	sub	sp, #8
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d107      	bne.n	800ea26 <tcp_pcb_purge+0x1e>
 800ea16:	4b21      	ldr	r3, [pc, #132]	; (800ea9c <tcp_pcb_purge+0x94>)
 800ea18:	f640 0251 	movw	r2, #2129	; 0x851
 800ea1c:	4920      	ldr	r1, [pc, #128]	; (800eaa0 <tcp_pcb_purge+0x98>)
 800ea1e:	4821      	ldr	r0, [pc, #132]	; (800eaa4 <tcp_pcb_purge+0x9c>)
 800ea20:	f00b fb54 	bl	801a0cc <iprintf>
 800ea24:	e037      	b.n	800ea96 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	7d1b      	ldrb	r3, [r3, #20]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d033      	beq.n	800ea96 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ea32:	2b0a      	cmp	r3, #10
 800ea34:	d02f      	beq.n	800ea96 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ea3a:	2b01      	cmp	r3, #1
 800ea3c:	d02b      	beq.n	800ea96 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d007      	beq.n	800ea56 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7fe f89e 	bl	800cb8c <pbuf_free>
      pcb->refused_data = NULL;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2200      	movs	r2, #0
 800ea54:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d002      	beq.n	800ea64 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f000 f986 	bl	800ed70 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea6a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7ff fcf9 	bl	800e468 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7ff fcf4 	bl	800e468 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2200      	movs	r2, #0
 800ea84:	66da      	str	r2, [r3, #108]	; 0x6c
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2200      	movs	r2, #0
 800ea92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ea96:	3708      	adds	r7, #8
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}
 800ea9c:	0801dd38 	.word	0x0801dd38
 800eaa0:	0801e384 	.word	0x0801e384
 800eaa4:	0801dd7c 	.word	0x0801dd7c

0800eaa8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b084      	sub	sp, #16
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d106      	bne.n	800eac6 <tcp_pcb_remove+0x1e>
 800eab8:	4b3e      	ldr	r3, [pc, #248]	; (800ebb4 <tcp_pcb_remove+0x10c>)
 800eaba:	f640 0283 	movw	r2, #2179	; 0x883
 800eabe:	493e      	ldr	r1, [pc, #248]	; (800ebb8 <tcp_pcb_remove+0x110>)
 800eac0:	483e      	ldr	r0, [pc, #248]	; (800ebbc <tcp_pcb_remove+0x114>)
 800eac2:	f00b fb03 	bl	801a0cc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d106      	bne.n	800eada <tcp_pcb_remove+0x32>
 800eacc:	4b39      	ldr	r3, [pc, #228]	; (800ebb4 <tcp_pcb_remove+0x10c>)
 800eace:	f640 0284 	movw	r2, #2180	; 0x884
 800ead2:	493b      	ldr	r1, [pc, #236]	; (800ebc0 <tcp_pcb_remove+0x118>)
 800ead4:	4839      	ldr	r0, [pc, #228]	; (800ebbc <tcp_pcb_remove+0x114>)
 800ead6:	f00b faf9 	bl	801a0cc <iprintf>

  TCP_RMV(pcblist, pcb);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	683a      	ldr	r2, [r7, #0]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d105      	bne.n	800eaf0 <tcp_pcb_remove+0x48>
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	68da      	ldr	r2, [r3, #12]
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	601a      	str	r2, [r3, #0]
 800eaee:	e013      	b.n	800eb18 <tcp_pcb_remove+0x70>
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	60fb      	str	r3, [r7, #12]
 800eaf6:	e00c      	b.n	800eb12 <tcp_pcb_remove+0x6a>
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	68db      	ldr	r3, [r3, #12]
 800eafc:	683a      	ldr	r2, [r7, #0]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d104      	bne.n	800eb0c <tcp_pcb_remove+0x64>
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	68da      	ldr	r2, [r3, #12]
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	60da      	str	r2, [r3, #12]
 800eb0a:	e005      	b.n	800eb18 <tcp_pcb_remove+0x70>
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	68db      	ldr	r3, [r3, #12]
 800eb10:	60fb      	str	r3, [r7, #12]
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d1ef      	bne.n	800eaf8 <tcp_pcb_remove+0x50>
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800eb1e:	6838      	ldr	r0, [r7, #0]
 800eb20:	f7ff ff72 	bl	800ea08 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	7d1b      	ldrb	r3, [r3, #20]
 800eb28:	2b0a      	cmp	r3, #10
 800eb2a:	d013      	beq.n	800eb54 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800eb30:	2b01      	cmp	r3, #1
 800eb32:	d00f      	beq.n	800eb54 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	8b5b      	ldrh	r3, [r3, #26]
 800eb38:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d009      	beq.n	800eb54 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	8b5b      	ldrh	r3, [r3, #26]
 800eb44:	f043 0302 	orr.w	r3, r3, #2
 800eb48:	b29a      	uxth	r2, r3
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800eb4e:	6838      	ldr	r0, [r7, #0]
 800eb50:	f003 fbc6 	bl	80122e0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	7d1b      	ldrb	r3, [r3, #20]
 800eb58:	2b01      	cmp	r3, #1
 800eb5a:	d020      	beq.n	800eb9e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d006      	beq.n	800eb72 <tcp_pcb_remove+0xca>
 800eb64:	4b13      	ldr	r3, [pc, #76]	; (800ebb4 <tcp_pcb_remove+0x10c>)
 800eb66:	f640 0293 	movw	r2, #2195	; 0x893
 800eb6a:	4916      	ldr	r1, [pc, #88]	; (800ebc4 <tcp_pcb_remove+0x11c>)
 800eb6c:	4813      	ldr	r0, [pc, #76]	; (800ebbc <tcp_pcb_remove+0x114>)
 800eb6e:	f00b faad 	bl	801a0cc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d006      	beq.n	800eb88 <tcp_pcb_remove+0xe0>
 800eb7a:	4b0e      	ldr	r3, [pc, #56]	; (800ebb4 <tcp_pcb_remove+0x10c>)
 800eb7c:	f640 0294 	movw	r2, #2196	; 0x894
 800eb80:	4911      	ldr	r1, [pc, #68]	; (800ebc8 <tcp_pcb_remove+0x120>)
 800eb82:	480e      	ldr	r0, [pc, #56]	; (800ebbc <tcp_pcb_remove+0x114>)
 800eb84:	f00b faa2 	bl	801a0cc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d006      	beq.n	800eb9e <tcp_pcb_remove+0xf6>
 800eb90:	4b08      	ldr	r3, [pc, #32]	; (800ebb4 <tcp_pcb_remove+0x10c>)
 800eb92:	f640 0296 	movw	r2, #2198	; 0x896
 800eb96:	490d      	ldr	r1, [pc, #52]	; (800ebcc <tcp_pcb_remove+0x124>)
 800eb98:	4808      	ldr	r0, [pc, #32]	; (800ebbc <tcp_pcb_remove+0x114>)
 800eb9a:	f00b fa97 	bl	801a0cc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	2200      	movs	r2, #0
 800eba2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	2200      	movs	r2, #0
 800eba8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ebaa:	bf00      	nop
 800ebac:	3710      	adds	r7, #16
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	0801dd38 	.word	0x0801dd38
 800ebb8:	0801e3a0 	.word	0x0801e3a0
 800ebbc:	0801dd7c 	.word	0x0801dd7c
 800ebc0:	0801e3bc 	.word	0x0801e3bc
 800ebc4:	0801e3dc 	.word	0x0801e3dc
 800ebc8:	0801e3f4 	.word	0x0801e3f4
 800ebcc:	0801e410 	.word	0x0801e410

0800ebd0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b082      	sub	sp, #8
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d106      	bne.n	800ebec <tcp_next_iss+0x1c>
 800ebde:	4b0a      	ldr	r3, [pc, #40]	; (800ec08 <tcp_next_iss+0x38>)
 800ebe0:	f640 02af 	movw	r2, #2223	; 0x8af
 800ebe4:	4909      	ldr	r1, [pc, #36]	; (800ec0c <tcp_next_iss+0x3c>)
 800ebe6:	480a      	ldr	r0, [pc, #40]	; (800ec10 <tcp_next_iss+0x40>)
 800ebe8:	f00b fa70 	bl	801a0cc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ebec:	4b09      	ldr	r3, [pc, #36]	; (800ec14 <tcp_next_iss+0x44>)
 800ebee:	681a      	ldr	r2, [r3, #0]
 800ebf0:	4b09      	ldr	r3, [pc, #36]	; (800ec18 <tcp_next_iss+0x48>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	4413      	add	r3, r2
 800ebf6:	4a07      	ldr	r2, [pc, #28]	; (800ec14 <tcp_next_iss+0x44>)
 800ebf8:	6013      	str	r3, [r2, #0]
  return iss;
 800ebfa:	4b06      	ldr	r3, [pc, #24]	; (800ec14 <tcp_next_iss+0x44>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3708      	adds	r7, #8
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}
 800ec06:	bf00      	nop
 800ec08:	0801dd38 	.word	0x0801dd38
 800ec0c:	0801e428 	.word	0x0801e428
 800ec10:	0801dd7c 	.word	0x0801dd7c
 800ec14:	2000002c 	.word	0x2000002c
 800ec18:	2001147c 	.word	0x2001147c

0800ec1c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b086      	sub	sp, #24
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	4603      	mov	r3, r0
 800ec24:	60b9      	str	r1, [r7, #8]
 800ec26:	607a      	str	r2, [r7, #4]
 800ec28:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d106      	bne.n	800ec3e <tcp_eff_send_mss_netif+0x22>
 800ec30:	4b14      	ldr	r3, [pc, #80]	; (800ec84 <tcp_eff_send_mss_netif+0x68>)
 800ec32:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ec36:	4914      	ldr	r1, [pc, #80]	; (800ec88 <tcp_eff_send_mss_netif+0x6c>)
 800ec38:	4814      	ldr	r0, [pc, #80]	; (800ec8c <tcp_eff_send_mss_netif+0x70>)
 800ec3a:	f00b fa47 	bl	801a0cc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d101      	bne.n	800ec48 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ec44:	89fb      	ldrh	r3, [r7, #14]
 800ec46:	e019      	b.n	800ec7c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ec4c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ec4e:	8afb      	ldrh	r3, [r7, #22]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d012      	beq.n	800ec7a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ec54:	2328      	movs	r3, #40	; 0x28
 800ec56:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ec58:	8afa      	ldrh	r2, [r7, #22]
 800ec5a:	8abb      	ldrh	r3, [r7, #20]
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d904      	bls.n	800ec6a <tcp_eff_send_mss_netif+0x4e>
 800ec60:	8afa      	ldrh	r2, [r7, #22]
 800ec62:	8abb      	ldrh	r3, [r7, #20]
 800ec64:	1ad3      	subs	r3, r2, r3
 800ec66:	b29b      	uxth	r3, r3
 800ec68:	e000      	b.n	800ec6c <tcp_eff_send_mss_netif+0x50>
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ec6e:	8a7a      	ldrh	r2, [r7, #18]
 800ec70:	89fb      	ldrh	r3, [r7, #14]
 800ec72:	4293      	cmp	r3, r2
 800ec74:	bf28      	it	cs
 800ec76:	4613      	movcs	r3, r2
 800ec78:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ec7a:	89fb      	ldrh	r3, [r7, #14]
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3718      	adds	r7, #24
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}
 800ec84:	0801dd38 	.word	0x0801dd38
 800ec88:	0801e444 	.word	0x0801e444
 800ec8c:	0801dd7c 	.word	0x0801dd7c

0800ec90 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b084      	sub	sp, #16
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d119      	bne.n	800ecd8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800eca4:	4b10      	ldr	r3, [pc, #64]	; (800ece8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800eca6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ecaa:	4910      	ldr	r1, [pc, #64]	; (800ecec <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ecac:	4810      	ldr	r0, [pc, #64]	; (800ecf0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ecae:	f00b fa0d 	bl	801a0cc <iprintf>

  while (pcb != NULL) {
 800ecb2:	e011      	b.n	800ecd8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	681a      	ldr	r2, [r3, #0]
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d108      	bne.n	800ecd2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	68db      	ldr	r3, [r3, #12]
 800ecc4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ecc6:	68f8      	ldr	r0, [r7, #12]
 800ecc8:	f7fe fd50 	bl	800d76c <tcp_abort>
      pcb = next;
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	60fb      	str	r3, [r7, #12]
 800ecd0:	e002      	b.n	800ecd8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	68db      	ldr	r3, [r3, #12]
 800ecd6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d1ea      	bne.n	800ecb4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ecde:	bf00      	nop
 800ece0:	bf00      	nop
 800ece2:	3710      	adds	r7, #16
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}
 800ece8:	0801dd38 	.word	0x0801dd38
 800ecec:	0801e46c 	.word	0x0801e46c
 800ecf0:	0801dd7c 	.word	0x0801dd7c

0800ecf4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b084      	sub	sp, #16
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d02a      	beq.n	800ed5a <tcp_netif_ip_addr_changed+0x66>
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d026      	beq.n	800ed5a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ed0c:	4b15      	ldr	r3, [pc, #84]	; (800ed64 <tcp_netif_ip_addr_changed+0x70>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	4619      	mov	r1, r3
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f7ff ffbc 	bl	800ec90 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ed18:	4b13      	ldr	r3, [pc, #76]	; (800ed68 <tcp_netif_ip_addr_changed+0x74>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f7ff ffb6 	bl	800ec90 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d017      	beq.n	800ed5a <tcp_netif_ip_addr_changed+0x66>
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d013      	beq.n	800ed5a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ed32:	4b0e      	ldr	r3, [pc, #56]	; (800ed6c <tcp_netif_ip_addr_changed+0x78>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	60fb      	str	r3, [r7, #12]
 800ed38:	e00c      	b.n	800ed54 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681a      	ldr	r2, [r3, #0]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d103      	bne.n	800ed4e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	681a      	ldr	r2, [r3, #0]
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	68db      	ldr	r3, [r3, #12]
 800ed52:	60fb      	str	r3, [r7, #12]
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d1ef      	bne.n	800ed3a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ed5a:	bf00      	nop
 800ed5c:	3710      	adds	r7, #16
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
 800ed62:	bf00      	nop
 800ed64:	20011488 	.word	0x20011488
 800ed68:	20011480 	.word	0x20011480
 800ed6c:	20011484 	.word	0x20011484

0800ed70 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b082      	sub	sp, #8
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d007      	beq.n	800ed90 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7ff fb6f 	bl	800e468 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ed90:	bf00      	nop
 800ed92:	3708      	adds	r7, #8
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}

0800ed98 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ed98:	b590      	push	{r4, r7, lr}
 800ed9a:	b08d      	sub	sp, #52	; 0x34
 800ed9c:	af04      	add	r7, sp, #16
 800ed9e:	6078      	str	r0, [r7, #4]
 800eda0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d105      	bne.n	800edb4 <tcp_input+0x1c>
 800eda8:	4b9b      	ldr	r3, [pc, #620]	; (800f018 <tcp_input+0x280>)
 800edaa:	2283      	movs	r2, #131	; 0x83
 800edac:	499b      	ldr	r1, [pc, #620]	; (800f01c <tcp_input+0x284>)
 800edae:	489c      	ldr	r0, [pc, #624]	; (800f020 <tcp_input+0x288>)
 800edb0:	f00b f98c 	bl	801a0cc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	685b      	ldr	r3, [r3, #4]
 800edb8:	4a9a      	ldr	r2, [pc, #616]	; (800f024 <tcp_input+0x28c>)
 800edba:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	895b      	ldrh	r3, [r3, #10]
 800edc0:	2b13      	cmp	r3, #19
 800edc2:	f240 83d1 	bls.w	800f568 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800edc6:	4b98      	ldr	r3, [pc, #608]	; (800f028 <tcp_input+0x290>)
 800edc8:	695b      	ldr	r3, [r3, #20]
 800edca:	4a97      	ldr	r2, [pc, #604]	; (800f028 <tcp_input+0x290>)
 800edcc:	6812      	ldr	r2, [r2, #0]
 800edce:	4611      	mov	r1, r2
 800edd0:	4618      	mov	r0, r3
 800edd2:	f006 f9e5 	bl	80151a0 <ip4_addr_isbroadcast_u32>
 800edd6:	4603      	mov	r3, r0
 800edd8:	2b00      	cmp	r3, #0
 800edda:	f040 83c7 	bne.w	800f56c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800edde:	4b92      	ldr	r3, [pc, #584]	; (800f028 <tcp_input+0x290>)
 800ede0:	695b      	ldr	r3, [r3, #20]
 800ede2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ede6:	2be0      	cmp	r3, #224	; 0xe0
 800ede8:	f000 83c0 	beq.w	800f56c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800edec:	4b8d      	ldr	r3, [pc, #564]	; (800f024 <tcp_input+0x28c>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	899b      	ldrh	r3, [r3, #12]
 800edf2:	b29b      	uxth	r3, r3
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7fc fad7 	bl	800b3a8 <lwip_htons>
 800edfa:	4603      	mov	r3, r0
 800edfc:	0b1b      	lsrs	r3, r3, #12
 800edfe:	b29b      	uxth	r3, r3
 800ee00:	b2db      	uxtb	r3, r3
 800ee02:	009b      	lsls	r3, r3, #2
 800ee04:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ee06:	7cbb      	ldrb	r3, [r7, #18]
 800ee08:	2b13      	cmp	r3, #19
 800ee0a:	f240 83b1 	bls.w	800f570 <tcp_input+0x7d8>
 800ee0e:	7cbb      	ldrb	r3, [r7, #18]
 800ee10:	b29a      	uxth	r2, r3
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	891b      	ldrh	r3, [r3, #8]
 800ee16:	429a      	cmp	r2, r3
 800ee18:	f200 83aa 	bhi.w	800f570 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ee1c:	7cbb      	ldrb	r3, [r7, #18]
 800ee1e:	b29b      	uxth	r3, r3
 800ee20:	3b14      	subs	r3, #20
 800ee22:	b29a      	uxth	r2, r3
 800ee24:	4b81      	ldr	r3, [pc, #516]	; (800f02c <tcp_input+0x294>)
 800ee26:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ee28:	4b81      	ldr	r3, [pc, #516]	; (800f030 <tcp_input+0x298>)
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	895a      	ldrh	r2, [r3, #10]
 800ee32:	7cbb      	ldrb	r3, [r7, #18]
 800ee34:	b29b      	uxth	r3, r3
 800ee36:	429a      	cmp	r2, r3
 800ee38:	d309      	bcc.n	800ee4e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ee3a:	4b7c      	ldr	r3, [pc, #496]	; (800f02c <tcp_input+0x294>)
 800ee3c:	881a      	ldrh	r2, [r3, #0]
 800ee3e:	4b7d      	ldr	r3, [pc, #500]	; (800f034 <tcp_input+0x29c>)
 800ee40:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ee42:	7cbb      	ldrb	r3, [r7, #18]
 800ee44:	4619      	mov	r1, r3
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	f7fd fe1a 	bl	800ca80 <pbuf_remove_header>
 800ee4c:	e04e      	b.n	800eeec <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d105      	bne.n	800ee62 <tcp_input+0xca>
 800ee56:	4b70      	ldr	r3, [pc, #448]	; (800f018 <tcp_input+0x280>)
 800ee58:	22c2      	movs	r2, #194	; 0xc2
 800ee5a:	4977      	ldr	r1, [pc, #476]	; (800f038 <tcp_input+0x2a0>)
 800ee5c:	4870      	ldr	r0, [pc, #448]	; (800f020 <tcp_input+0x288>)
 800ee5e:	f00b f935 	bl	801a0cc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ee62:	2114      	movs	r1, #20
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f7fd fe0b 	bl	800ca80 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	895a      	ldrh	r2, [r3, #10]
 800ee6e:	4b71      	ldr	r3, [pc, #452]	; (800f034 <tcp_input+0x29c>)
 800ee70:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ee72:	4b6e      	ldr	r3, [pc, #440]	; (800f02c <tcp_input+0x294>)
 800ee74:	881a      	ldrh	r2, [r3, #0]
 800ee76:	4b6f      	ldr	r3, [pc, #444]	; (800f034 <tcp_input+0x29c>)
 800ee78:	881b      	ldrh	r3, [r3, #0]
 800ee7a:	1ad3      	subs	r3, r2, r3
 800ee7c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ee7e:	4b6d      	ldr	r3, [pc, #436]	; (800f034 <tcp_input+0x29c>)
 800ee80:	881b      	ldrh	r3, [r3, #0]
 800ee82:	4619      	mov	r1, r3
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f7fd fdfb 	bl	800ca80 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	895b      	ldrh	r3, [r3, #10]
 800ee90:	8a3a      	ldrh	r2, [r7, #16]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	f200 836e 	bhi.w	800f574 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	4a64      	ldr	r2, [pc, #400]	; (800f030 <tcp_input+0x298>)
 800eea0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	8a3a      	ldrh	r2, [r7, #16]
 800eea8:	4611      	mov	r1, r2
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7fd fde8 	bl	800ca80 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	891a      	ldrh	r2, [r3, #8]
 800eeb4:	8a3b      	ldrh	r3, [r7, #16]
 800eeb6:	1ad3      	subs	r3, r2, r3
 800eeb8:	b29a      	uxth	r2, r3
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	895b      	ldrh	r3, [r3, #10]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d005      	beq.n	800eed2 <tcp_input+0x13a>
 800eec6:	4b54      	ldr	r3, [pc, #336]	; (800f018 <tcp_input+0x280>)
 800eec8:	22df      	movs	r2, #223	; 0xdf
 800eeca:	495c      	ldr	r1, [pc, #368]	; (800f03c <tcp_input+0x2a4>)
 800eecc:	4854      	ldr	r0, [pc, #336]	; (800f020 <tcp_input+0x288>)
 800eece:	f00b f8fd 	bl	801a0cc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	891a      	ldrh	r2, [r3, #8]
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	891b      	ldrh	r3, [r3, #8]
 800eedc:	429a      	cmp	r2, r3
 800eede:	d005      	beq.n	800eeec <tcp_input+0x154>
 800eee0:	4b4d      	ldr	r3, [pc, #308]	; (800f018 <tcp_input+0x280>)
 800eee2:	22e0      	movs	r2, #224	; 0xe0
 800eee4:	4956      	ldr	r1, [pc, #344]	; (800f040 <tcp_input+0x2a8>)
 800eee6:	484e      	ldr	r0, [pc, #312]	; (800f020 <tcp_input+0x288>)
 800eee8:	f00b f8f0 	bl	801a0cc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800eeec:	4b4d      	ldr	r3, [pc, #308]	; (800f024 <tcp_input+0x28c>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	881b      	ldrh	r3, [r3, #0]
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	4a4b      	ldr	r2, [pc, #300]	; (800f024 <tcp_input+0x28c>)
 800eef6:	6814      	ldr	r4, [r2, #0]
 800eef8:	4618      	mov	r0, r3
 800eefa:	f7fc fa55 	bl	800b3a8 <lwip_htons>
 800eefe:	4603      	mov	r3, r0
 800ef00:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ef02:	4b48      	ldr	r3, [pc, #288]	; (800f024 <tcp_input+0x28c>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	885b      	ldrh	r3, [r3, #2]
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	4a46      	ldr	r2, [pc, #280]	; (800f024 <tcp_input+0x28c>)
 800ef0c:	6814      	ldr	r4, [r2, #0]
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f7fc fa4a 	bl	800b3a8 <lwip_htons>
 800ef14:	4603      	mov	r3, r0
 800ef16:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ef18:	4b42      	ldr	r3, [pc, #264]	; (800f024 <tcp_input+0x28c>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	4a41      	ldr	r2, [pc, #260]	; (800f024 <tcp_input+0x28c>)
 800ef20:	6814      	ldr	r4, [r2, #0]
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fc fa55 	bl	800b3d2 <lwip_htonl>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	6063      	str	r3, [r4, #4]
 800ef2c:	6863      	ldr	r3, [r4, #4]
 800ef2e:	4a45      	ldr	r2, [pc, #276]	; (800f044 <tcp_input+0x2ac>)
 800ef30:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ef32:	4b3c      	ldr	r3, [pc, #240]	; (800f024 <tcp_input+0x28c>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	689b      	ldr	r3, [r3, #8]
 800ef38:	4a3a      	ldr	r2, [pc, #232]	; (800f024 <tcp_input+0x28c>)
 800ef3a:	6814      	ldr	r4, [r2, #0]
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7fc fa48 	bl	800b3d2 <lwip_htonl>
 800ef42:	4603      	mov	r3, r0
 800ef44:	60a3      	str	r3, [r4, #8]
 800ef46:	68a3      	ldr	r3, [r4, #8]
 800ef48:	4a3f      	ldr	r2, [pc, #252]	; (800f048 <tcp_input+0x2b0>)
 800ef4a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ef4c:	4b35      	ldr	r3, [pc, #212]	; (800f024 <tcp_input+0x28c>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	89db      	ldrh	r3, [r3, #14]
 800ef52:	b29b      	uxth	r3, r3
 800ef54:	4a33      	ldr	r2, [pc, #204]	; (800f024 <tcp_input+0x28c>)
 800ef56:	6814      	ldr	r4, [r2, #0]
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f7fc fa25 	bl	800b3a8 <lwip_htons>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ef62:	4b30      	ldr	r3, [pc, #192]	; (800f024 <tcp_input+0x28c>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	899b      	ldrh	r3, [r3, #12]
 800ef68:	b29b      	uxth	r3, r3
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f7fc fa1c 	bl	800b3a8 <lwip_htons>
 800ef70:	4603      	mov	r3, r0
 800ef72:	b2db      	uxtb	r3, r3
 800ef74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ef78:	b2da      	uxtb	r2, r3
 800ef7a:	4b34      	ldr	r3, [pc, #208]	; (800f04c <tcp_input+0x2b4>)
 800ef7c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	891a      	ldrh	r2, [r3, #8]
 800ef82:	4b33      	ldr	r3, [pc, #204]	; (800f050 <tcp_input+0x2b8>)
 800ef84:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ef86:	4b31      	ldr	r3, [pc, #196]	; (800f04c <tcp_input+0x2b4>)
 800ef88:	781b      	ldrb	r3, [r3, #0]
 800ef8a:	f003 0303 	and.w	r3, r3, #3
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d00c      	beq.n	800efac <tcp_input+0x214>
    tcplen++;
 800ef92:	4b2f      	ldr	r3, [pc, #188]	; (800f050 <tcp_input+0x2b8>)
 800ef94:	881b      	ldrh	r3, [r3, #0]
 800ef96:	3301      	adds	r3, #1
 800ef98:	b29a      	uxth	r2, r3
 800ef9a:	4b2d      	ldr	r3, [pc, #180]	; (800f050 <tcp_input+0x2b8>)
 800ef9c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	891a      	ldrh	r2, [r3, #8]
 800efa2:	4b2b      	ldr	r3, [pc, #172]	; (800f050 <tcp_input+0x2b8>)
 800efa4:	881b      	ldrh	r3, [r3, #0]
 800efa6:	429a      	cmp	r2, r3
 800efa8:	f200 82e6 	bhi.w	800f578 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800efac:	2300      	movs	r3, #0
 800efae:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800efb0:	4b28      	ldr	r3, [pc, #160]	; (800f054 <tcp_input+0x2bc>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	61fb      	str	r3, [r7, #28]
 800efb6:	e09d      	b.n	800f0f4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800efb8:	69fb      	ldr	r3, [r7, #28]
 800efba:	7d1b      	ldrb	r3, [r3, #20]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d105      	bne.n	800efcc <tcp_input+0x234>
 800efc0:	4b15      	ldr	r3, [pc, #84]	; (800f018 <tcp_input+0x280>)
 800efc2:	22fb      	movs	r2, #251	; 0xfb
 800efc4:	4924      	ldr	r1, [pc, #144]	; (800f058 <tcp_input+0x2c0>)
 800efc6:	4816      	ldr	r0, [pc, #88]	; (800f020 <tcp_input+0x288>)
 800efc8:	f00b f880 	bl	801a0cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800efcc:	69fb      	ldr	r3, [r7, #28]
 800efce:	7d1b      	ldrb	r3, [r3, #20]
 800efd0:	2b0a      	cmp	r3, #10
 800efd2:	d105      	bne.n	800efe0 <tcp_input+0x248>
 800efd4:	4b10      	ldr	r3, [pc, #64]	; (800f018 <tcp_input+0x280>)
 800efd6:	22fc      	movs	r2, #252	; 0xfc
 800efd8:	4920      	ldr	r1, [pc, #128]	; (800f05c <tcp_input+0x2c4>)
 800efda:	4811      	ldr	r0, [pc, #68]	; (800f020 <tcp_input+0x288>)
 800efdc:	f00b f876 	bl	801a0cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800efe0:	69fb      	ldr	r3, [r7, #28]
 800efe2:	7d1b      	ldrb	r3, [r3, #20]
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	d105      	bne.n	800eff4 <tcp_input+0x25c>
 800efe8:	4b0b      	ldr	r3, [pc, #44]	; (800f018 <tcp_input+0x280>)
 800efea:	22fd      	movs	r2, #253	; 0xfd
 800efec:	491c      	ldr	r1, [pc, #112]	; (800f060 <tcp_input+0x2c8>)
 800efee:	480c      	ldr	r0, [pc, #48]	; (800f020 <tcp_input+0x288>)
 800eff0:	f00b f86c 	bl	801a0cc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eff4:	69fb      	ldr	r3, [r7, #28]
 800eff6:	7a1b      	ldrb	r3, [r3, #8]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d033      	beq.n	800f064 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800effc:	69fb      	ldr	r3, [r7, #28]
 800effe:	7a1a      	ldrb	r2, [r3, #8]
 800f000:	4b09      	ldr	r3, [pc, #36]	; (800f028 <tcp_input+0x290>)
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f008:	3301      	adds	r3, #1
 800f00a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d029      	beq.n	800f064 <tcp_input+0x2cc>
      prev = pcb;
 800f010:	69fb      	ldr	r3, [r7, #28]
 800f012:	61bb      	str	r3, [r7, #24]
      continue;
 800f014:	e06b      	b.n	800f0ee <tcp_input+0x356>
 800f016:	bf00      	nop
 800f018:	0801e4a0 	.word	0x0801e4a0
 800f01c:	0801e4d4 	.word	0x0801e4d4
 800f020:	0801e4ec 	.word	0x0801e4ec
 800f024:	200114a4 	.word	0x200114a4
 800f028:	20008f5c 	.word	0x20008f5c
 800f02c:	200114a8 	.word	0x200114a8
 800f030:	200114ac 	.word	0x200114ac
 800f034:	200114aa 	.word	0x200114aa
 800f038:	0801e514 	.word	0x0801e514
 800f03c:	0801e524 	.word	0x0801e524
 800f040:	0801e530 	.word	0x0801e530
 800f044:	200114b4 	.word	0x200114b4
 800f048:	200114b8 	.word	0x200114b8
 800f04c:	200114c0 	.word	0x200114c0
 800f050:	200114be 	.word	0x200114be
 800f054:	20011488 	.word	0x20011488
 800f058:	0801e550 	.word	0x0801e550
 800f05c:	0801e578 	.word	0x0801e578
 800f060:	0801e5a4 	.word	0x0801e5a4
    }

    if (pcb->remote_port == tcphdr->src &&
 800f064:	69fb      	ldr	r3, [r7, #28]
 800f066:	8b1a      	ldrh	r2, [r3, #24]
 800f068:	4b72      	ldr	r3, [pc, #456]	; (800f234 <tcp_input+0x49c>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	881b      	ldrh	r3, [r3, #0]
 800f06e:	b29b      	uxth	r3, r3
 800f070:	429a      	cmp	r2, r3
 800f072:	d13a      	bne.n	800f0ea <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f074:	69fb      	ldr	r3, [r7, #28]
 800f076:	8ada      	ldrh	r2, [r3, #22]
 800f078:	4b6e      	ldr	r3, [pc, #440]	; (800f234 <tcp_input+0x49c>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	885b      	ldrh	r3, [r3, #2]
 800f07e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f080:	429a      	cmp	r2, r3
 800f082:	d132      	bne.n	800f0ea <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f084:	69fb      	ldr	r3, [r7, #28]
 800f086:	685a      	ldr	r2, [r3, #4]
 800f088:	4b6b      	ldr	r3, [pc, #428]	; (800f238 <tcp_input+0x4a0>)
 800f08a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f08c:	429a      	cmp	r2, r3
 800f08e:	d12c      	bne.n	800f0ea <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f090:	69fb      	ldr	r3, [r7, #28]
 800f092:	681a      	ldr	r2, [r3, #0]
 800f094:	4b68      	ldr	r3, [pc, #416]	; (800f238 <tcp_input+0x4a0>)
 800f096:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f098:	429a      	cmp	r2, r3
 800f09a:	d126      	bne.n	800f0ea <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f09c:	69fb      	ldr	r3, [r7, #28]
 800f09e:	68db      	ldr	r3, [r3, #12]
 800f0a0:	69fa      	ldr	r2, [r7, #28]
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	d106      	bne.n	800f0b4 <tcp_input+0x31c>
 800f0a6:	4b65      	ldr	r3, [pc, #404]	; (800f23c <tcp_input+0x4a4>)
 800f0a8:	f240 120d 	movw	r2, #269	; 0x10d
 800f0ac:	4964      	ldr	r1, [pc, #400]	; (800f240 <tcp_input+0x4a8>)
 800f0ae:	4865      	ldr	r0, [pc, #404]	; (800f244 <tcp_input+0x4ac>)
 800f0b0:	f00b f80c 	bl	801a0cc <iprintf>
      if (prev != NULL) {
 800f0b4:	69bb      	ldr	r3, [r7, #24]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d00a      	beq.n	800f0d0 <tcp_input+0x338>
        prev->next = pcb->next;
 800f0ba:	69fb      	ldr	r3, [r7, #28]
 800f0bc:	68da      	ldr	r2, [r3, #12]
 800f0be:	69bb      	ldr	r3, [r7, #24]
 800f0c0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f0c2:	4b61      	ldr	r3, [pc, #388]	; (800f248 <tcp_input+0x4b0>)
 800f0c4:	681a      	ldr	r2, [r3, #0]
 800f0c6:	69fb      	ldr	r3, [r7, #28]
 800f0c8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f0ca:	4a5f      	ldr	r2, [pc, #380]	; (800f248 <tcp_input+0x4b0>)
 800f0cc:	69fb      	ldr	r3, [r7, #28]
 800f0ce:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f0d0:	69fb      	ldr	r3, [r7, #28]
 800f0d2:	68db      	ldr	r3, [r3, #12]
 800f0d4:	69fa      	ldr	r2, [r7, #28]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d111      	bne.n	800f0fe <tcp_input+0x366>
 800f0da:	4b58      	ldr	r3, [pc, #352]	; (800f23c <tcp_input+0x4a4>)
 800f0dc:	f240 1215 	movw	r2, #277	; 0x115
 800f0e0:	495a      	ldr	r1, [pc, #360]	; (800f24c <tcp_input+0x4b4>)
 800f0e2:	4858      	ldr	r0, [pc, #352]	; (800f244 <tcp_input+0x4ac>)
 800f0e4:	f00a fff2 	bl	801a0cc <iprintf>
      break;
 800f0e8:	e009      	b.n	800f0fe <tcp_input+0x366>
    }
    prev = pcb;
 800f0ea:	69fb      	ldr	r3, [r7, #28]
 800f0ec:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0ee:	69fb      	ldr	r3, [r7, #28]
 800f0f0:	68db      	ldr	r3, [r3, #12]
 800f0f2:	61fb      	str	r3, [r7, #28]
 800f0f4:	69fb      	ldr	r3, [r7, #28]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	f47f af5e 	bne.w	800efb8 <tcp_input+0x220>
 800f0fc:	e000      	b.n	800f100 <tcp_input+0x368>
      break;
 800f0fe:	bf00      	nop
  }

  if (pcb == NULL) {
 800f100:	69fb      	ldr	r3, [r7, #28]
 800f102:	2b00      	cmp	r3, #0
 800f104:	f040 80aa 	bne.w	800f25c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f108:	4b51      	ldr	r3, [pc, #324]	; (800f250 <tcp_input+0x4b8>)
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	61fb      	str	r3, [r7, #28]
 800f10e:	e03f      	b.n	800f190 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f110:	69fb      	ldr	r3, [r7, #28]
 800f112:	7d1b      	ldrb	r3, [r3, #20]
 800f114:	2b0a      	cmp	r3, #10
 800f116:	d006      	beq.n	800f126 <tcp_input+0x38e>
 800f118:	4b48      	ldr	r3, [pc, #288]	; (800f23c <tcp_input+0x4a4>)
 800f11a:	f240 121f 	movw	r2, #287	; 0x11f
 800f11e:	494d      	ldr	r1, [pc, #308]	; (800f254 <tcp_input+0x4bc>)
 800f120:	4848      	ldr	r0, [pc, #288]	; (800f244 <tcp_input+0x4ac>)
 800f122:	f00a ffd3 	bl	801a0cc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f126:	69fb      	ldr	r3, [r7, #28]
 800f128:	7a1b      	ldrb	r3, [r3, #8]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d009      	beq.n	800f142 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f12e:	69fb      	ldr	r3, [r7, #28]
 800f130:	7a1a      	ldrb	r2, [r3, #8]
 800f132:	4b41      	ldr	r3, [pc, #260]	; (800f238 <tcp_input+0x4a0>)
 800f134:	685b      	ldr	r3, [r3, #4]
 800f136:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f13a:	3301      	adds	r3, #1
 800f13c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f13e:	429a      	cmp	r2, r3
 800f140:	d122      	bne.n	800f188 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f142:	69fb      	ldr	r3, [r7, #28]
 800f144:	8b1a      	ldrh	r2, [r3, #24]
 800f146:	4b3b      	ldr	r3, [pc, #236]	; (800f234 <tcp_input+0x49c>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	881b      	ldrh	r3, [r3, #0]
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	429a      	cmp	r2, r3
 800f150:	d11b      	bne.n	800f18a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f152:	69fb      	ldr	r3, [r7, #28]
 800f154:	8ada      	ldrh	r2, [r3, #22]
 800f156:	4b37      	ldr	r3, [pc, #220]	; (800f234 <tcp_input+0x49c>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	885b      	ldrh	r3, [r3, #2]
 800f15c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f15e:	429a      	cmp	r2, r3
 800f160:	d113      	bne.n	800f18a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f162:	69fb      	ldr	r3, [r7, #28]
 800f164:	685a      	ldr	r2, [r3, #4]
 800f166:	4b34      	ldr	r3, [pc, #208]	; (800f238 <tcp_input+0x4a0>)
 800f168:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d10d      	bne.n	800f18a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f16e:	69fb      	ldr	r3, [r7, #28]
 800f170:	681a      	ldr	r2, [r3, #0]
 800f172:	4b31      	ldr	r3, [pc, #196]	; (800f238 <tcp_input+0x4a0>)
 800f174:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f176:	429a      	cmp	r2, r3
 800f178:	d107      	bne.n	800f18a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f17a:	69f8      	ldr	r0, [r7, #28]
 800f17c:	f000 fb56 	bl	800f82c <tcp_timewait_input>
        }
        pbuf_free(p);
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f7fd fd03 	bl	800cb8c <pbuf_free>
        return;
 800f186:	e1fd      	b.n	800f584 <tcp_input+0x7ec>
        continue;
 800f188:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f18a:	69fb      	ldr	r3, [r7, #28]
 800f18c:	68db      	ldr	r3, [r3, #12]
 800f18e:	61fb      	str	r3, [r7, #28]
 800f190:	69fb      	ldr	r3, [r7, #28]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d1bc      	bne.n	800f110 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f196:	2300      	movs	r3, #0
 800f198:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f19a:	4b2f      	ldr	r3, [pc, #188]	; (800f258 <tcp_input+0x4c0>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	617b      	str	r3, [r7, #20]
 800f1a0:	e02a      	b.n	800f1f8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	7a1b      	ldrb	r3, [r3, #8]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d00c      	beq.n	800f1c4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	7a1a      	ldrb	r2, [r3, #8]
 800f1ae:	4b22      	ldr	r3, [pc, #136]	; (800f238 <tcp_input+0x4a0>)
 800f1b0:	685b      	ldr	r3, [r3, #4]
 800f1b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f1b6:	3301      	adds	r3, #1
 800f1b8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d002      	beq.n	800f1c4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f1be:	697b      	ldr	r3, [r7, #20]
 800f1c0:	61bb      	str	r3, [r7, #24]
        continue;
 800f1c2:	e016      	b.n	800f1f2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f1c4:	697b      	ldr	r3, [r7, #20]
 800f1c6:	8ada      	ldrh	r2, [r3, #22]
 800f1c8:	4b1a      	ldr	r3, [pc, #104]	; (800f234 <tcp_input+0x49c>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	885b      	ldrh	r3, [r3, #2]
 800f1ce:	b29b      	uxth	r3, r3
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d10c      	bne.n	800f1ee <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f1d4:	697b      	ldr	r3, [r7, #20]
 800f1d6:	681a      	ldr	r2, [r3, #0]
 800f1d8:	4b17      	ldr	r3, [pc, #92]	; (800f238 <tcp_input+0x4a0>)
 800f1da:	695b      	ldr	r3, [r3, #20]
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d00f      	beq.n	800f200 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d00d      	beq.n	800f202 <tcp_input+0x46a>
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d009      	beq.n	800f202 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	68db      	ldr	r3, [r3, #12]
 800f1f6:	617b      	str	r3, [r7, #20]
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d1d1      	bne.n	800f1a2 <tcp_input+0x40a>
 800f1fe:	e000      	b.n	800f202 <tcp_input+0x46a>
            break;
 800f200:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d029      	beq.n	800f25c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f208:	69bb      	ldr	r3, [r7, #24]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d00a      	beq.n	800f224 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	68da      	ldr	r2, [r3, #12]
 800f212:	69bb      	ldr	r3, [r7, #24]
 800f214:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f216:	4b10      	ldr	r3, [pc, #64]	; (800f258 <tcp_input+0x4c0>)
 800f218:	681a      	ldr	r2, [r3, #0]
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f21e:	4a0e      	ldr	r2, [pc, #56]	; (800f258 <tcp_input+0x4c0>)
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f224:	6978      	ldr	r0, [r7, #20]
 800f226:	f000 fa03 	bl	800f630 <tcp_listen_input>
      }
      pbuf_free(p);
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f7fd fcae 	bl	800cb8c <pbuf_free>
      return;
 800f230:	e1a8      	b.n	800f584 <tcp_input+0x7ec>
 800f232:	bf00      	nop
 800f234:	200114a4 	.word	0x200114a4
 800f238:	20008f5c 	.word	0x20008f5c
 800f23c:	0801e4a0 	.word	0x0801e4a0
 800f240:	0801e5cc 	.word	0x0801e5cc
 800f244:	0801e4ec 	.word	0x0801e4ec
 800f248:	20011488 	.word	0x20011488
 800f24c:	0801e5f8 	.word	0x0801e5f8
 800f250:	2001148c 	.word	0x2001148c
 800f254:	0801e624 	.word	0x0801e624
 800f258:	20011484 	.word	0x20011484
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f25c:	69fb      	ldr	r3, [r7, #28]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	f000 8158 	beq.w	800f514 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f264:	4b95      	ldr	r3, [pc, #596]	; (800f4bc <tcp_input+0x724>)
 800f266:	2200      	movs	r2, #0
 800f268:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	891a      	ldrh	r2, [r3, #8]
 800f26e:	4b93      	ldr	r3, [pc, #588]	; (800f4bc <tcp_input+0x724>)
 800f270:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f272:	4a92      	ldr	r2, [pc, #584]	; (800f4bc <tcp_input+0x724>)
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f278:	4b91      	ldr	r3, [pc, #580]	; (800f4c0 <tcp_input+0x728>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	4a8f      	ldr	r2, [pc, #572]	; (800f4bc <tcp_input+0x724>)
 800f27e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f280:	4b90      	ldr	r3, [pc, #576]	; (800f4c4 <tcp_input+0x72c>)
 800f282:	2200      	movs	r2, #0
 800f284:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f286:	4b90      	ldr	r3, [pc, #576]	; (800f4c8 <tcp_input+0x730>)
 800f288:	2200      	movs	r2, #0
 800f28a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f28c:	4b8f      	ldr	r3, [pc, #572]	; (800f4cc <tcp_input+0x734>)
 800f28e:	2200      	movs	r2, #0
 800f290:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f292:	4b8f      	ldr	r3, [pc, #572]	; (800f4d0 <tcp_input+0x738>)
 800f294:	781b      	ldrb	r3, [r3, #0]
 800f296:	f003 0308 	and.w	r3, r3, #8
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d006      	beq.n	800f2ac <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	7b5b      	ldrb	r3, [r3, #13]
 800f2a2:	f043 0301 	orr.w	r3, r3, #1
 800f2a6:	b2da      	uxtb	r2, r3
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f2ac:	69fb      	ldr	r3, [r7, #28]
 800f2ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d017      	beq.n	800f2e4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f2b4:	69f8      	ldr	r0, [r7, #28]
 800f2b6:	f7ff f85b 	bl	800e370 <tcp_process_refused_data>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	f113 0f0d 	cmn.w	r3, #13
 800f2c0:	d007      	beq.n	800f2d2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f2c2:	69fb      	ldr	r3, [r7, #28]
 800f2c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d00c      	beq.n	800f2e4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f2ca:	4b82      	ldr	r3, [pc, #520]	; (800f4d4 <tcp_input+0x73c>)
 800f2cc:	881b      	ldrh	r3, [r3, #0]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d008      	beq.n	800f2e4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f2d2:	69fb      	ldr	r3, [r7, #28]
 800f2d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	f040 80e3 	bne.w	800f4a2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f2dc:	69f8      	ldr	r0, [r7, #28]
 800f2de:	f003 fe05 	bl	8012eec <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f2e2:	e0de      	b.n	800f4a2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f2e4:	4a7c      	ldr	r2, [pc, #496]	; (800f4d8 <tcp_input+0x740>)
 800f2e6:	69fb      	ldr	r3, [r7, #28]
 800f2e8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f2ea:	69f8      	ldr	r0, [r7, #28]
 800f2ec:	f000 fb18 	bl	800f920 <tcp_process>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f2f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f2f8:	f113 0f0d 	cmn.w	r3, #13
 800f2fc:	f000 80d3 	beq.w	800f4a6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f300:	4b71      	ldr	r3, [pc, #452]	; (800f4c8 <tcp_input+0x730>)
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	f003 0308 	and.w	r3, r3, #8
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d015      	beq.n	800f338 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f30c:	69fb      	ldr	r3, [r7, #28]
 800f30e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f312:	2b00      	cmp	r3, #0
 800f314:	d008      	beq.n	800f328 <tcp_input+0x590>
 800f316:	69fb      	ldr	r3, [r7, #28]
 800f318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f31c:	69fa      	ldr	r2, [r7, #28]
 800f31e:	6912      	ldr	r2, [r2, #16]
 800f320:	f06f 010d 	mvn.w	r1, #13
 800f324:	4610      	mov	r0, r2
 800f326:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f328:	69f9      	ldr	r1, [r7, #28]
 800f32a:	486c      	ldr	r0, [pc, #432]	; (800f4dc <tcp_input+0x744>)
 800f32c:	f7ff fbbc 	bl	800eaa8 <tcp_pcb_remove>
        tcp_free(pcb);
 800f330:	69f8      	ldr	r0, [r7, #28]
 800f332:	f7fd fed7 	bl	800d0e4 <tcp_free>
 800f336:	e0da      	b.n	800f4ee <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f338:	2300      	movs	r3, #0
 800f33a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f33c:	4b63      	ldr	r3, [pc, #396]	; (800f4cc <tcp_input+0x734>)
 800f33e:	881b      	ldrh	r3, [r3, #0]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d01d      	beq.n	800f380 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f344:	4b61      	ldr	r3, [pc, #388]	; (800f4cc <tcp_input+0x734>)
 800f346:	881b      	ldrh	r3, [r3, #0]
 800f348:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f34a:	69fb      	ldr	r3, [r7, #28]
 800f34c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f350:	2b00      	cmp	r3, #0
 800f352:	d00a      	beq.n	800f36a <tcp_input+0x5d2>
 800f354:	69fb      	ldr	r3, [r7, #28]
 800f356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f35a:	69fa      	ldr	r2, [r7, #28]
 800f35c:	6910      	ldr	r0, [r2, #16]
 800f35e:	89fa      	ldrh	r2, [r7, #14]
 800f360:	69f9      	ldr	r1, [r7, #28]
 800f362:	4798      	blx	r3
 800f364:	4603      	mov	r3, r0
 800f366:	74fb      	strb	r3, [r7, #19]
 800f368:	e001      	b.n	800f36e <tcp_input+0x5d6>
 800f36a:	2300      	movs	r3, #0
 800f36c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f36e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f372:	f113 0f0d 	cmn.w	r3, #13
 800f376:	f000 8098 	beq.w	800f4aa <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f37a:	4b54      	ldr	r3, [pc, #336]	; (800f4cc <tcp_input+0x734>)
 800f37c:	2200      	movs	r2, #0
 800f37e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f380:	69f8      	ldr	r0, [r7, #28]
 800f382:	f000 f915 	bl	800f5b0 <tcp_input_delayed_close>
 800f386:	4603      	mov	r3, r0
 800f388:	2b00      	cmp	r3, #0
 800f38a:	f040 8090 	bne.w	800f4ae <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f38e:	4b4d      	ldr	r3, [pc, #308]	; (800f4c4 <tcp_input+0x72c>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d041      	beq.n	800f41a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f396:	69fb      	ldr	r3, [r7, #28]
 800f398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d006      	beq.n	800f3ac <tcp_input+0x614>
 800f39e:	4b50      	ldr	r3, [pc, #320]	; (800f4e0 <tcp_input+0x748>)
 800f3a0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f3a4:	494f      	ldr	r1, [pc, #316]	; (800f4e4 <tcp_input+0x74c>)
 800f3a6:	4850      	ldr	r0, [pc, #320]	; (800f4e8 <tcp_input+0x750>)
 800f3a8:	f00a fe90 	bl	801a0cc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f3ac:	69fb      	ldr	r3, [r7, #28]
 800f3ae:	8b5b      	ldrh	r3, [r3, #26]
 800f3b0:	f003 0310 	and.w	r3, r3, #16
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d008      	beq.n	800f3ca <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f3b8:	4b42      	ldr	r3, [pc, #264]	; (800f4c4 <tcp_input+0x72c>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f7fd fbe5 	bl	800cb8c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f3c2:	69f8      	ldr	r0, [r7, #28]
 800f3c4:	f7fe f9d2 	bl	800d76c <tcp_abort>
            goto aborted;
 800f3c8:	e091      	b.n	800f4ee <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f3ca:	69fb      	ldr	r3, [r7, #28]
 800f3cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d00c      	beq.n	800f3ee <tcp_input+0x656>
 800f3d4:	69fb      	ldr	r3, [r7, #28]
 800f3d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f3da:	69fb      	ldr	r3, [r7, #28]
 800f3dc:	6918      	ldr	r0, [r3, #16]
 800f3de:	4b39      	ldr	r3, [pc, #228]	; (800f4c4 <tcp_input+0x72c>)
 800f3e0:	681a      	ldr	r2, [r3, #0]
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	69f9      	ldr	r1, [r7, #28]
 800f3e6:	47a0      	blx	r4
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	74fb      	strb	r3, [r7, #19]
 800f3ec:	e008      	b.n	800f400 <tcp_input+0x668>
 800f3ee:	4b35      	ldr	r3, [pc, #212]	; (800f4c4 <tcp_input+0x72c>)
 800f3f0:	681a      	ldr	r2, [r3, #0]
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	69f9      	ldr	r1, [r7, #28]
 800f3f6:	2000      	movs	r0, #0
 800f3f8:	f7ff f890 	bl	800e51c <tcp_recv_null>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f400:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f404:	f113 0f0d 	cmn.w	r3, #13
 800f408:	d053      	beq.n	800f4b2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f40a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d003      	beq.n	800f41a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f412:	4b2c      	ldr	r3, [pc, #176]	; (800f4c4 <tcp_input+0x72c>)
 800f414:	681a      	ldr	r2, [r3, #0]
 800f416:	69fb      	ldr	r3, [r7, #28]
 800f418:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f41a:	4b2b      	ldr	r3, [pc, #172]	; (800f4c8 <tcp_input+0x730>)
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	f003 0320 	and.w	r3, r3, #32
 800f422:	2b00      	cmp	r3, #0
 800f424:	d030      	beq.n	800f488 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f426:	69fb      	ldr	r3, [r7, #28]
 800f428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d009      	beq.n	800f442 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f42e:	69fb      	ldr	r3, [r7, #28]
 800f430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f432:	7b5a      	ldrb	r2, [r3, #13]
 800f434:	69fb      	ldr	r3, [r7, #28]
 800f436:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f438:	f042 0220 	orr.w	r2, r2, #32
 800f43c:	b2d2      	uxtb	r2, r2
 800f43e:	735a      	strb	r2, [r3, #13]
 800f440:	e022      	b.n	800f488 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f446:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f44a:	d005      	beq.n	800f458 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f44c:	69fb      	ldr	r3, [r7, #28]
 800f44e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f450:	3301      	adds	r3, #1
 800f452:	b29a      	uxth	r2, r3
 800f454:	69fb      	ldr	r3, [r7, #28]
 800f456:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f458:	69fb      	ldr	r3, [r7, #28]
 800f45a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d00b      	beq.n	800f47a <tcp_input+0x6e2>
 800f462:	69fb      	ldr	r3, [r7, #28]
 800f464:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f468:	69fb      	ldr	r3, [r7, #28]
 800f46a:	6918      	ldr	r0, [r3, #16]
 800f46c:	2300      	movs	r3, #0
 800f46e:	2200      	movs	r2, #0
 800f470:	69f9      	ldr	r1, [r7, #28]
 800f472:	47a0      	blx	r4
 800f474:	4603      	mov	r3, r0
 800f476:	74fb      	strb	r3, [r7, #19]
 800f478:	e001      	b.n	800f47e <tcp_input+0x6e6>
 800f47a:	2300      	movs	r3, #0
 800f47c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f47e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f482:	f113 0f0d 	cmn.w	r3, #13
 800f486:	d016      	beq.n	800f4b6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f488:	4b13      	ldr	r3, [pc, #76]	; (800f4d8 <tcp_input+0x740>)
 800f48a:	2200      	movs	r2, #0
 800f48c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f48e:	69f8      	ldr	r0, [r7, #28]
 800f490:	f000 f88e 	bl	800f5b0 <tcp_input_delayed_close>
 800f494:	4603      	mov	r3, r0
 800f496:	2b00      	cmp	r3, #0
 800f498:	d128      	bne.n	800f4ec <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f49a:	69f8      	ldr	r0, [r7, #28]
 800f49c:	f002 ff20 	bl	80122e0 <tcp_output>
 800f4a0:	e025      	b.n	800f4ee <tcp_input+0x756>
        goto aborted;
 800f4a2:	bf00      	nop
 800f4a4:	e023      	b.n	800f4ee <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f4a6:	bf00      	nop
 800f4a8:	e021      	b.n	800f4ee <tcp_input+0x756>
              goto aborted;
 800f4aa:	bf00      	nop
 800f4ac:	e01f      	b.n	800f4ee <tcp_input+0x756>
          goto aborted;
 800f4ae:	bf00      	nop
 800f4b0:	e01d      	b.n	800f4ee <tcp_input+0x756>
            goto aborted;
 800f4b2:	bf00      	nop
 800f4b4:	e01b      	b.n	800f4ee <tcp_input+0x756>
              goto aborted;
 800f4b6:	bf00      	nop
 800f4b8:	e019      	b.n	800f4ee <tcp_input+0x756>
 800f4ba:	bf00      	nop
 800f4bc:	20011494 	.word	0x20011494
 800f4c0:	200114a4 	.word	0x200114a4
 800f4c4:	200114c4 	.word	0x200114c4
 800f4c8:	200114c1 	.word	0x200114c1
 800f4cc:	200114bc 	.word	0x200114bc
 800f4d0:	200114c0 	.word	0x200114c0
 800f4d4:	200114be 	.word	0x200114be
 800f4d8:	200114c8 	.word	0x200114c8
 800f4dc:	20011488 	.word	0x20011488
 800f4e0:	0801e4a0 	.word	0x0801e4a0
 800f4e4:	0801e654 	.word	0x0801e654
 800f4e8:	0801e4ec 	.word	0x0801e4ec
          goto aborted;
 800f4ec:	bf00      	nop
    tcp_input_pcb = NULL;
 800f4ee:	4b27      	ldr	r3, [pc, #156]	; (800f58c <tcp_input+0x7f4>)
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f4f4:	4b26      	ldr	r3, [pc, #152]	; (800f590 <tcp_input+0x7f8>)
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f4fa:	4b26      	ldr	r3, [pc, #152]	; (800f594 <tcp_input+0x7fc>)
 800f4fc:	685b      	ldr	r3, [r3, #4]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d03f      	beq.n	800f582 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f502:	4b24      	ldr	r3, [pc, #144]	; (800f594 <tcp_input+0x7fc>)
 800f504:	685b      	ldr	r3, [r3, #4]
 800f506:	4618      	mov	r0, r3
 800f508:	f7fd fb40 	bl	800cb8c <pbuf_free>
      inseg.p = NULL;
 800f50c:	4b21      	ldr	r3, [pc, #132]	; (800f594 <tcp_input+0x7fc>)
 800f50e:	2200      	movs	r2, #0
 800f510:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f512:	e036      	b.n	800f582 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f514:	4b20      	ldr	r3, [pc, #128]	; (800f598 <tcp_input+0x800>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	899b      	ldrh	r3, [r3, #12]
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	4618      	mov	r0, r3
 800f51e:	f7fb ff43 	bl	800b3a8 <lwip_htons>
 800f522:	4603      	mov	r3, r0
 800f524:	b2db      	uxtb	r3, r3
 800f526:	f003 0304 	and.w	r3, r3, #4
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d118      	bne.n	800f560 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f52e:	4b1b      	ldr	r3, [pc, #108]	; (800f59c <tcp_input+0x804>)
 800f530:	6819      	ldr	r1, [r3, #0]
 800f532:	4b1b      	ldr	r3, [pc, #108]	; (800f5a0 <tcp_input+0x808>)
 800f534:	881b      	ldrh	r3, [r3, #0]
 800f536:	461a      	mov	r2, r3
 800f538:	4b1a      	ldr	r3, [pc, #104]	; (800f5a4 <tcp_input+0x80c>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f53e:	4b16      	ldr	r3, [pc, #88]	; (800f598 <tcp_input+0x800>)
 800f540:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f542:	885b      	ldrh	r3, [r3, #2]
 800f544:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f546:	4a14      	ldr	r2, [pc, #80]	; (800f598 <tcp_input+0x800>)
 800f548:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f54a:	8812      	ldrh	r2, [r2, #0]
 800f54c:	b292      	uxth	r2, r2
 800f54e:	9202      	str	r2, [sp, #8]
 800f550:	9301      	str	r3, [sp, #4]
 800f552:	4b15      	ldr	r3, [pc, #84]	; (800f5a8 <tcp_input+0x810>)
 800f554:	9300      	str	r3, [sp, #0]
 800f556:	4b15      	ldr	r3, [pc, #84]	; (800f5ac <tcp_input+0x814>)
 800f558:	4602      	mov	r2, r0
 800f55a:	2000      	movs	r0, #0
 800f55c:	f003 fc74 	bl	8012e48 <tcp_rst>
    pbuf_free(p);
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	f7fd fb13 	bl	800cb8c <pbuf_free>
  return;
 800f566:	e00c      	b.n	800f582 <tcp_input+0x7ea>
    goto dropped;
 800f568:	bf00      	nop
 800f56a:	e006      	b.n	800f57a <tcp_input+0x7e2>
    goto dropped;
 800f56c:	bf00      	nop
 800f56e:	e004      	b.n	800f57a <tcp_input+0x7e2>
    goto dropped;
 800f570:	bf00      	nop
 800f572:	e002      	b.n	800f57a <tcp_input+0x7e2>
      goto dropped;
 800f574:	bf00      	nop
 800f576:	e000      	b.n	800f57a <tcp_input+0x7e2>
      goto dropped;
 800f578:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f57a:	6878      	ldr	r0, [r7, #4]
 800f57c:	f7fd fb06 	bl	800cb8c <pbuf_free>
 800f580:	e000      	b.n	800f584 <tcp_input+0x7ec>
  return;
 800f582:	bf00      	nop
}
 800f584:	3724      	adds	r7, #36	; 0x24
 800f586:	46bd      	mov	sp, r7
 800f588:	bd90      	pop	{r4, r7, pc}
 800f58a:	bf00      	nop
 800f58c:	200114c8 	.word	0x200114c8
 800f590:	200114c4 	.word	0x200114c4
 800f594:	20011494 	.word	0x20011494
 800f598:	200114a4 	.word	0x200114a4
 800f59c:	200114b8 	.word	0x200114b8
 800f5a0:	200114be 	.word	0x200114be
 800f5a4:	200114b4 	.word	0x200114b4
 800f5a8:	20008f6c 	.word	0x20008f6c
 800f5ac:	20008f70 	.word	0x20008f70

0800f5b0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b082      	sub	sp, #8
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d106      	bne.n	800f5cc <tcp_input_delayed_close+0x1c>
 800f5be:	4b17      	ldr	r3, [pc, #92]	; (800f61c <tcp_input_delayed_close+0x6c>)
 800f5c0:	f240 225a 	movw	r2, #602	; 0x25a
 800f5c4:	4916      	ldr	r1, [pc, #88]	; (800f620 <tcp_input_delayed_close+0x70>)
 800f5c6:	4817      	ldr	r0, [pc, #92]	; (800f624 <tcp_input_delayed_close+0x74>)
 800f5c8:	f00a fd80 	bl	801a0cc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f5cc:	4b16      	ldr	r3, [pc, #88]	; (800f628 <tcp_input_delayed_close+0x78>)
 800f5ce:	781b      	ldrb	r3, [r3, #0]
 800f5d0:	f003 0310 	and.w	r3, r3, #16
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d01c      	beq.n	800f612 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	8b5b      	ldrh	r3, [r3, #26]
 800f5dc:	f003 0310 	and.w	r3, r3, #16
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d10d      	bne.n	800f600 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d008      	beq.n	800f600 <tcp_input_delayed_close+0x50>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5f4:	687a      	ldr	r2, [r7, #4]
 800f5f6:	6912      	ldr	r2, [r2, #16]
 800f5f8:	f06f 010e 	mvn.w	r1, #14
 800f5fc:	4610      	mov	r0, r2
 800f5fe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f600:	6879      	ldr	r1, [r7, #4]
 800f602:	480a      	ldr	r0, [pc, #40]	; (800f62c <tcp_input_delayed_close+0x7c>)
 800f604:	f7ff fa50 	bl	800eaa8 <tcp_pcb_remove>
    tcp_free(pcb);
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f7fd fd6b 	bl	800d0e4 <tcp_free>
    return 1;
 800f60e:	2301      	movs	r3, #1
 800f610:	e000      	b.n	800f614 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f612:	2300      	movs	r3, #0
}
 800f614:	4618      	mov	r0, r3
 800f616:	3708      	adds	r7, #8
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}
 800f61c:	0801e4a0 	.word	0x0801e4a0
 800f620:	0801e670 	.word	0x0801e670
 800f624:	0801e4ec 	.word	0x0801e4ec
 800f628:	200114c1 	.word	0x200114c1
 800f62c:	20011488 	.word	0x20011488

0800f630 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f630:	b590      	push	{r4, r7, lr}
 800f632:	b08b      	sub	sp, #44	; 0x2c
 800f634:	af04      	add	r7, sp, #16
 800f636:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f638:	4b6f      	ldr	r3, [pc, #444]	; (800f7f8 <tcp_listen_input+0x1c8>)
 800f63a:	781b      	ldrb	r3, [r3, #0]
 800f63c:	f003 0304 	and.w	r3, r3, #4
 800f640:	2b00      	cmp	r3, #0
 800f642:	f040 80d2 	bne.w	800f7ea <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d106      	bne.n	800f65a <tcp_listen_input+0x2a>
 800f64c:	4b6b      	ldr	r3, [pc, #428]	; (800f7fc <tcp_listen_input+0x1cc>)
 800f64e:	f240 2281 	movw	r2, #641	; 0x281
 800f652:	496b      	ldr	r1, [pc, #428]	; (800f800 <tcp_listen_input+0x1d0>)
 800f654:	486b      	ldr	r0, [pc, #428]	; (800f804 <tcp_listen_input+0x1d4>)
 800f656:	f00a fd39 	bl	801a0cc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f65a:	4b67      	ldr	r3, [pc, #412]	; (800f7f8 <tcp_listen_input+0x1c8>)
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	f003 0310 	and.w	r3, r3, #16
 800f662:	2b00      	cmp	r3, #0
 800f664:	d019      	beq.n	800f69a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f666:	4b68      	ldr	r3, [pc, #416]	; (800f808 <tcp_listen_input+0x1d8>)
 800f668:	6819      	ldr	r1, [r3, #0]
 800f66a:	4b68      	ldr	r3, [pc, #416]	; (800f80c <tcp_listen_input+0x1dc>)
 800f66c:	881b      	ldrh	r3, [r3, #0]
 800f66e:	461a      	mov	r2, r3
 800f670:	4b67      	ldr	r3, [pc, #412]	; (800f810 <tcp_listen_input+0x1e0>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f676:	4b67      	ldr	r3, [pc, #412]	; (800f814 <tcp_listen_input+0x1e4>)
 800f678:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f67a:	885b      	ldrh	r3, [r3, #2]
 800f67c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f67e:	4a65      	ldr	r2, [pc, #404]	; (800f814 <tcp_listen_input+0x1e4>)
 800f680:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f682:	8812      	ldrh	r2, [r2, #0]
 800f684:	b292      	uxth	r2, r2
 800f686:	9202      	str	r2, [sp, #8]
 800f688:	9301      	str	r3, [sp, #4]
 800f68a:	4b63      	ldr	r3, [pc, #396]	; (800f818 <tcp_listen_input+0x1e8>)
 800f68c:	9300      	str	r3, [sp, #0]
 800f68e:	4b63      	ldr	r3, [pc, #396]	; (800f81c <tcp_listen_input+0x1ec>)
 800f690:	4602      	mov	r2, r0
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	f003 fbd8 	bl	8012e48 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f698:	e0a9      	b.n	800f7ee <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f69a:	4b57      	ldr	r3, [pc, #348]	; (800f7f8 <tcp_listen_input+0x1c8>)
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	f003 0302 	and.w	r3, r3, #2
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	f000 80a3 	beq.w	800f7ee <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	7d5b      	ldrb	r3, [r3, #21]
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f7ff f859 	bl	800e764 <tcp_alloc>
 800f6b2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d111      	bne.n	800f6de <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	699b      	ldr	r3, [r3, #24]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d00a      	beq.n	800f6d8 <tcp_listen_input+0xa8>
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	699b      	ldr	r3, [r3, #24]
 800f6c6:	687a      	ldr	r2, [r7, #4]
 800f6c8:	6910      	ldr	r0, [r2, #16]
 800f6ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f6ce:	2100      	movs	r1, #0
 800f6d0:	4798      	blx	r3
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	73bb      	strb	r3, [r7, #14]
      return;
 800f6d6:	e08b      	b.n	800f7f0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f6d8:	23f0      	movs	r3, #240	; 0xf0
 800f6da:	73bb      	strb	r3, [r7, #14]
      return;
 800f6dc:	e088      	b.n	800f7f0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f6de:	4b50      	ldr	r3, [pc, #320]	; (800f820 <tcp_listen_input+0x1f0>)
 800f6e0:	695a      	ldr	r2, [r3, #20]
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f6e6:	4b4e      	ldr	r3, [pc, #312]	; (800f820 <tcp_listen_input+0x1f0>)
 800f6e8:	691a      	ldr	r2, [r3, #16]
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	8ada      	ldrh	r2, [r3, #22]
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f6f6:	4b47      	ldr	r3, [pc, #284]	; (800f814 <tcp_listen_input+0x1e4>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	881b      	ldrh	r3, [r3, #0]
 800f6fc:	b29a      	uxth	r2, r3
 800f6fe:	697b      	ldr	r3, [r7, #20]
 800f700:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	2203      	movs	r2, #3
 800f706:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f708:	4b41      	ldr	r3, [pc, #260]	; (800f810 <tcp_listen_input+0x1e0>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	1c5a      	adds	r2, r3, #1
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f71a:	6978      	ldr	r0, [r7, #20]
 800f71c:	f7ff fa58 	bl	800ebd0 <tcp_next_iss>
 800f720:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	693a      	ldr	r2, [r7, #16]
 800f726:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	693a      	ldr	r2, [r7, #16]
 800f72c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	693a      	ldr	r2, [r7, #16]
 800f732:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	693a      	ldr	r2, [r7, #16]
 800f738:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f73a:	4b35      	ldr	r3, [pc, #212]	; (800f810 <tcp_listen_input+0x1e0>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	1e5a      	subs	r2, r3, #1
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	691a      	ldr	r2, [r3, #16]
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	687a      	ldr	r2, [r7, #4]
 800f750:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	7a5b      	ldrb	r3, [r3, #9]
 800f756:	f003 030c 	and.w	r3, r3, #12
 800f75a:	b2da      	uxtb	r2, r3
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	7a1a      	ldrb	r2, [r3, #8]
 800f764:	697b      	ldr	r3, [r7, #20]
 800f766:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f768:	4b2e      	ldr	r3, [pc, #184]	; (800f824 <tcp_listen_input+0x1f4>)
 800f76a:	681a      	ldr	r2, [r3, #0]
 800f76c:	697b      	ldr	r3, [r7, #20]
 800f76e:	60da      	str	r2, [r3, #12]
 800f770:	4a2c      	ldr	r2, [pc, #176]	; (800f824 <tcp_listen_input+0x1f4>)
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	6013      	str	r3, [r2, #0]
 800f776:	f003 fd29 	bl	80131cc <tcp_timer_needed>
 800f77a:	4b2b      	ldr	r3, [pc, #172]	; (800f828 <tcp_listen_input+0x1f8>)
 800f77c:	2201      	movs	r2, #1
 800f77e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f780:	6978      	ldr	r0, [r7, #20]
 800f782:	f001 fd8f 	bl	80112a4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f786:	4b23      	ldr	r3, [pc, #140]	; (800f814 <tcp_listen_input+0x1e4>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	89db      	ldrh	r3, [r3, #14]
 800f78c:	b29a      	uxth	r2, r3
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	3304      	adds	r3, #4
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f005 fa63 	bl	8014c74 <ip4_route>
 800f7ae:	4601      	mov	r1, r0
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	3304      	adds	r3, #4
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	4620      	mov	r0, r4
 800f7b8:	f7ff fa30 	bl	800ec1c <tcp_eff_send_mss_netif>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	461a      	mov	r2, r3
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f7c4:	2112      	movs	r1, #18
 800f7c6:	6978      	ldr	r0, [r7, #20]
 800f7c8:	f002 fc9c 	bl	8012104 <tcp_enqueue_flags>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f7d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d004      	beq.n	800f7e2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f7d8:	2100      	movs	r1, #0
 800f7da:	6978      	ldr	r0, [r7, #20]
 800f7dc:	f7fd ff08 	bl	800d5f0 <tcp_abandon>
      return;
 800f7e0:	e006      	b.n	800f7f0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f7e2:	6978      	ldr	r0, [r7, #20]
 800f7e4:	f002 fd7c 	bl	80122e0 <tcp_output>
  return;
 800f7e8:	e001      	b.n	800f7ee <tcp_listen_input+0x1be>
    return;
 800f7ea:	bf00      	nop
 800f7ec:	e000      	b.n	800f7f0 <tcp_listen_input+0x1c0>
  return;
 800f7ee:	bf00      	nop
}
 800f7f0:	371c      	adds	r7, #28
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd90      	pop	{r4, r7, pc}
 800f7f6:	bf00      	nop
 800f7f8:	200114c0 	.word	0x200114c0
 800f7fc:	0801e4a0 	.word	0x0801e4a0
 800f800:	0801e698 	.word	0x0801e698
 800f804:	0801e4ec 	.word	0x0801e4ec
 800f808:	200114b8 	.word	0x200114b8
 800f80c:	200114be 	.word	0x200114be
 800f810:	200114b4 	.word	0x200114b4
 800f814:	200114a4 	.word	0x200114a4
 800f818:	20008f6c 	.word	0x20008f6c
 800f81c:	20008f70 	.word	0x20008f70
 800f820:	20008f5c 	.word	0x20008f5c
 800f824:	20011488 	.word	0x20011488
 800f828:	20011490 	.word	0x20011490

0800f82c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b086      	sub	sp, #24
 800f830:	af04      	add	r7, sp, #16
 800f832:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f834:	4b2f      	ldr	r3, [pc, #188]	; (800f8f4 <tcp_timewait_input+0xc8>)
 800f836:	781b      	ldrb	r3, [r3, #0]
 800f838:	f003 0304 	and.w	r3, r3, #4
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d153      	bne.n	800f8e8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d106      	bne.n	800f854 <tcp_timewait_input+0x28>
 800f846:	4b2c      	ldr	r3, [pc, #176]	; (800f8f8 <tcp_timewait_input+0xcc>)
 800f848:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f84c:	492b      	ldr	r1, [pc, #172]	; (800f8fc <tcp_timewait_input+0xd0>)
 800f84e:	482c      	ldr	r0, [pc, #176]	; (800f900 <tcp_timewait_input+0xd4>)
 800f850:	f00a fc3c 	bl	801a0cc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f854:	4b27      	ldr	r3, [pc, #156]	; (800f8f4 <tcp_timewait_input+0xc8>)
 800f856:	781b      	ldrb	r3, [r3, #0]
 800f858:	f003 0302 	and.w	r3, r3, #2
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d02a      	beq.n	800f8b6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f860:	4b28      	ldr	r3, [pc, #160]	; (800f904 <tcp_timewait_input+0xd8>)
 800f862:	681a      	ldr	r2, [r3, #0]
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f868:	1ad3      	subs	r3, r2, r3
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	db2d      	blt.n	800f8ca <tcp_timewait_input+0x9e>
 800f86e:	4b25      	ldr	r3, [pc, #148]	; (800f904 <tcp_timewait_input+0xd8>)
 800f870:	681a      	ldr	r2, [r3, #0]
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f876:	6879      	ldr	r1, [r7, #4]
 800f878:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f87a:	440b      	add	r3, r1
 800f87c:	1ad3      	subs	r3, r2, r3
 800f87e:	2b00      	cmp	r3, #0
 800f880:	dc23      	bgt.n	800f8ca <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f882:	4b21      	ldr	r3, [pc, #132]	; (800f908 <tcp_timewait_input+0xdc>)
 800f884:	6819      	ldr	r1, [r3, #0]
 800f886:	4b21      	ldr	r3, [pc, #132]	; (800f90c <tcp_timewait_input+0xe0>)
 800f888:	881b      	ldrh	r3, [r3, #0]
 800f88a:	461a      	mov	r2, r3
 800f88c:	4b1d      	ldr	r3, [pc, #116]	; (800f904 <tcp_timewait_input+0xd8>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f892:	4b1f      	ldr	r3, [pc, #124]	; (800f910 <tcp_timewait_input+0xe4>)
 800f894:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f896:	885b      	ldrh	r3, [r3, #2]
 800f898:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f89a:	4a1d      	ldr	r2, [pc, #116]	; (800f910 <tcp_timewait_input+0xe4>)
 800f89c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f89e:	8812      	ldrh	r2, [r2, #0]
 800f8a0:	b292      	uxth	r2, r2
 800f8a2:	9202      	str	r2, [sp, #8]
 800f8a4:	9301      	str	r3, [sp, #4]
 800f8a6:	4b1b      	ldr	r3, [pc, #108]	; (800f914 <tcp_timewait_input+0xe8>)
 800f8a8:	9300      	str	r3, [sp, #0]
 800f8aa:	4b1b      	ldr	r3, [pc, #108]	; (800f918 <tcp_timewait_input+0xec>)
 800f8ac:	4602      	mov	r2, r0
 800f8ae:	6878      	ldr	r0, [r7, #4]
 800f8b0:	f003 faca 	bl	8012e48 <tcp_rst>
      return;
 800f8b4:	e01b      	b.n	800f8ee <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f8b6:	4b0f      	ldr	r3, [pc, #60]	; (800f8f4 <tcp_timewait_input+0xc8>)
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	f003 0301 	and.w	r3, r3, #1
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d003      	beq.n	800f8ca <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f8c2:	4b16      	ldr	r3, [pc, #88]	; (800f91c <tcp_timewait_input+0xf0>)
 800f8c4:	681a      	ldr	r2, [r3, #0]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f8ca:	4b10      	ldr	r3, [pc, #64]	; (800f90c <tcp_timewait_input+0xe0>)
 800f8cc:	881b      	ldrh	r3, [r3, #0]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d00c      	beq.n	800f8ec <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	8b5b      	ldrh	r3, [r3, #26]
 800f8d6:	f043 0302 	orr.w	r3, r3, #2
 800f8da:	b29a      	uxth	r2, r3
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	f002 fcfd 	bl	80122e0 <tcp_output>
  }
  return;
 800f8e6:	e001      	b.n	800f8ec <tcp_timewait_input+0xc0>
    return;
 800f8e8:	bf00      	nop
 800f8ea:	e000      	b.n	800f8ee <tcp_timewait_input+0xc2>
  return;
 800f8ec:	bf00      	nop
}
 800f8ee:	3708      	adds	r7, #8
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}
 800f8f4:	200114c0 	.word	0x200114c0
 800f8f8:	0801e4a0 	.word	0x0801e4a0
 800f8fc:	0801e6b8 	.word	0x0801e6b8
 800f900:	0801e4ec 	.word	0x0801e4ec
 800f904:	200114b4 	.word	0x200114b4
 800f908:	200114b8 	.word	0x200114b8
 800f90c:	200114be 	.word	0x200114be
 800f910:	200114a4 	.word	0x200114a4
 800f914:	20008f6c 	.word	0x20008f6c
 800f918:	20008f70 	.word	0x20008f70
 800f91c:	2001147c 	.word	0x2001147c

0800f920 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f920:	b590      	push	{r4, r7, lr}
 800f922:	b08d      	sub	sp, #52	; 0x34
 800f924:	af04      	add	r7, sp, #16
 800f926:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f928:	2300      	movs	r3, #0
 800f92a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f92c:	2300      	movs	r3, #0
 800f92e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d106      	bne.n	800f944 <tcp_process+0x24>
 800f936:	4b9d      	ldr	r3, [pc, #628]	; (800fbac <tcp_process+0x28c>)
 800f938:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f93c:	499c      	ldr	r1, [pc, #624]	; (800fbb0 <tcp_process+0x290>)
 800f93e:	489d      	ldr	r0, [pc, #628]	; (800fbb4 <tcp_process+0x294>)
 800f940:	f00a fbc4 	bl	801a0cc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f944:	4b9c      	ldr	r3, [pc, #624]	; (800fbb8 <tcp_process+0x298>)
 800f946:	781b      	ldrb	r3, [r3, #0]
 800f948:	f003 0304 	and.w	r3, r3, #4
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d04e      	beq.n	800f9ee <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	7d1b      	ldrb	r3, [r3, #20]
 800f954:	2b02      	cmp	r3, #2
 800f956:	d108      	bne.n	800f96a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f95c:	4b97      	ldr	r3, [pc, #604]	; (800fbbc <tcp_process+0x29c>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	429a      	cmp	r2, r3
 800f962:	d123      	bne.n	800f9ac <tcp_process+0x8c>
        acceptable = 1;
 800f964:	2301      	movs	r3, #1
 800f966:	76fb      	strb	r3, [r7, #27]
 800f968:	e020      	b.n	800f9ac <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f96e:	4b94      	ldr	r3, [pc, #592]	; (800fbc0 <tcp_process+0x2a0>)
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	429a      	cmp	r2, r3
 800f974:	d102      	bne.n	800f97c <tcp_process+0x5c>
        acceptable = 1;
 800f976:	2301      	movs	r3, #1
 800f978:	76fb      	strb	r3, [r7, #27]
 800f97a:	e017      	b.n	800f9ac <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f97c:	4b90      	ldr	r3, [pc, #576]	; (800fbc0 <tcp_process+0x2a0>)
 800f97e:	681a      	ldr	r2, [r3, #0]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f984:	1ad3      	subs	r3, r2, r3
 800f986:	2b00      	cmp	r3, #0
 800f988:	db10      	blt.n	800f9ac <tcp_process+0x8c>
 800f98a:	4b8d      	ldr	r3, [pc, #564]	; (800fbc0 <tcp_process+0x2a0>)
 800f98c:	681a      	ldr	r2, [r3, #0]
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f992:	6879      	ldr	r1, [r7, #4]
 800f994:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f996:	440b      	add	r3, r1
 800f998:	1ad3      	subs	r3, r2, r3
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	dc06      	bgt.n	800f9ac <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	8b5b      	ldrh	r3, [r3, #26]
 800f9a2:	f043 0302 	orr.w	r3, r3, #2
 800f9a6:	b29a      	uxth	r2, r3
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f9ac:	7efb      	ldrb	r3, [r7, #27]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d01b      	beq.n	800f9ea <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	7d1b      	ldrb	r3, [r3, #20]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d106      	bne.n	800f9c8 <tcp_process+0xa8>
 800f9ba:	4b7c      	ldr	r3, [pc, #496]	; (800fbac <tcp_process+0x28c>)
 800f9bc:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f9c0:	4980      	ldr	r1, [pc, #512]	; (800fbc4 <tcp_process+0x2a4>)
 800f9c2:	487c      	ldr	r0, [pc, #496]	; (800fbb4 <tcp_process+0x294>)
 800f9c4:	f00a fb82 	bl	801a0cc <iprintf>
      recv_flags |= TF_RESET;
 800f9c8:	4b7f      	ldr	r3, [pc, #508]	; (800fbc8 <tcp_process+0x2a8>)
 800f9ca:	781b      	ldrb	r3, [r3, #0]
 800f9cc:	f043 0308 	orr.w	r3, r3, #8
 800f9d0:	b2da      	uxtb	r2, r3
 800f9d2:	4b7d      	ldr	r3, [pc, #500]	; (800fbc8 <tcp_process+0x2a8>)
 800f9d4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	8b5b      	ldrh	r3, [r3, #26]
 800f9da:	f023 0301 	bic.w	r3, r3, #1
 800f9de:	b29a      	uxth	r2, r3
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f9e4:	f06f 030d 	mvn.w	r3, #13
 800f9e8:	e37a      	b.n	80100e0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	e378      	b.n	80100e0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f9ee:	4b72      	ldr	r3, [pc, #456]	; (800fbb8 <tcp_process+0x298>)
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	f003 0302 	and.w	r3, r3, #2
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d010      	beq.n	800fa1c <tcp_process+0xfc>
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	7d1b      	ldrb	r3, [r3, #20]
 800f9fe:	2b02      	cmp	r3, #2
 800fa00:	d00c      	beq.n	800fa1c <tcp_process+0xfc>
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	7d1b      	ldrb	r3, [r3, #20]
 800fa06:	2b03      	cmp	r3, #3
 800fa08:	d008      	beq.n	800fa1c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	8b5b      	ldrh	r3, [r3, #26]
 800fa0e:	f043 0302 	orr.w	r3, r3, #2
 800fa12:	b29a      	uxth	r2, r3
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	e361      	b.n	80100e0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	8b5b      	ldrh	r3, [r3, #26]
 800fa20:	f003 0310 	and.w	r3, r3, #16
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d103      	bne.n	800fa30 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fa28:	4b68      	ldr	r3, [pc, #416]	; (800fbcc <tcp_process+0x2ac>)
 800fa2a:	681a      	ldr	r2, [r3, #0]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2200      	movs	r2, #0
 800fa34:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f001 fc2f 	bl	80112a4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	7d1b      	ldrb	r3, [r3, #20]
 800fa4a:	3b02      	subs	r3, #2
 800fa4c:	2b07      	cmp	r3, #7
 800fa4e:	f200 8337 	bhi.w	80100c0 <tcp_process+0x7a0>
 800fa52:	a201      	add	r2, pc, #4	; (adr r2, 800fa58 <tcp_process+0x138>)
 800fa54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa58:	0800fa79 	.word	0x0800fa79
 800fa5c:	0800fca9 	.word	0x0800fca9
 800fa60:	0800fe21 	.word	0x0800fe21
 800fa64:	0800fe4b 	.word	0x0800fe4b
 800fa68:	0800ff6f 	.word	0x0800ff6f
 800fa6c:	0800fe21 	.word	0x0800fe21
 800fa70:	0800fffb 	.word	0x0800fffb
 800fa74:	0801008b 	.word	0x0801008b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fa78:	4b4f      	ldr	r3, [pc, #316]	; (800fbb8 <tcp_process+0x298>)
 800fa7a:	781b      	ldrb	r3, [r3, #0]
 800fa7c:	f003 0310 	and.w	r3, r3, #16
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	f000 80e4 	beq.w	800fc4e <tcp_process+0x32e>
 800fa86:	4b4c      	ldr	r3, [pc, #304]	; (800fbb8 <tcp_process+0x298>)
 800fa88:	781b      	ldrb	r3, [r3, #0]
 800fa8a:	f003 0302 	and.w	r3, r3, #2
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	f000 80dd 	beq.w	800fc4e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa98:	1c5a      	adds	r2, r3, #1
 800fa9a:	4b48      	ldr	r3, [pc, #288]	; (800fbbc <tcp_process+0x29c>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	f040 80d5 	bne.w	800fc4e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800faa4:	4b46      	ldr	r3, [pc, #280]	; (800fbc0 <tcp_process+0x2a0>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	1c5a      	adds	r2, r3, #1
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800fab6:	4b41      	ldr	r3, [pc, #260]	; (800fbbc <tcp_process+0x29c>)
 800fab8:	681a      	ldr	r2, [r3, #0]
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800fabe:	4b44      	ldr	r3, [pc, #272]	; (800fbd0 <tcp_process+0x2b0>)
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	89db      	ldrh	r3, [r3, #14]
 800fac4:	b29a      	uxth	r2, r3
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fad8:	4b39      	ldr	r3, [pc, #228]	; (800fbc0 <tcp_process+0x2a0>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	1e5a      	subs	r2, r3, #1
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2204      	movs	r2, #4
 800fae6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	3304      	adds	r3, #4
 800faf0:	4618      	mov	r0, r3
 800faf2:	f005 f8bf 	bl	8014c74 <ip4_route>
 800faf6:	4601      	mov	r1, r0
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	3304      	adds	r3, #4
 800fafc:	461a      	mov	r2, r3
 800fafe:	4620      	mov	r0, r4
 800fb00:	f7ff f88c 	bl	800ec1c <tcp_eff_send_mss_netif>
 800fb04:	4603      	mov	r3, r0
 800fb06:	461a      	mov	r2, r3
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb10:	009a      	lsls	r2, r3, #2
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb16:	005b      	lsls	r3, r3, #1
 800fb18:	f241 111c 	movw	r1, #4380	; 0x111c
 800fb1c:	428b      	cmp	r3, r1
 800fb1e:	bf38      	it	cc
 800fb20:	460b      	movcc	r3, r1
 800fb22:	429a      	cmp	r2, r3
 800fb24:	d204      	bcs.n	800fb30 <tcp_process+0x210>
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb2a:	009b      	lsls	r3, r3, #2
 800fb2c:	b29b      	uxth	r3, r3
 800fb2e:	e00d      	b.n	800fb4c <tcp_process+0x22c>
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb34:	005b      	lsls	r3, r3, #1
 800fb36:	f241 121c 	movw	r2, #4380	; 0x111c
 800fb3a:	4293      	cmp	r3, r2
 800fb3c:	d904      	bls.n	800fb48 <tcp_process+0x228>
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb42:	005b      	lsls	r3, r3, #1
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	e001      	b.n	800fb4c <tcp_process+0x22c>
 800fb48:	f241 131c 	movw	r3, #4380	; 0x111c
 800fb4c:	687a      	ldr	r2, [r7, #4]
 800fb4e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d106      	bne.n	800fb6a <tcp_process+0x24a>
 800fb5c:	4b13      	ldr	r3, [pc, #76]	; (800fbac <tcp_process+0x28c>)
 800fb5e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800fb62:	491c      	ldr	r1, [pc, #112]	; (800fbd4 <tcp_process+0x2b4>)
 800fb64:	4813      	ldr	r0, [pc, #76]	; (800fbb4 <tcp_process+0x294>)
 800fb66:	f00a fab1 	bl	801a0cc <iprintf>
        --pcb->snd_queuelen;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fb70:	3b01      	subs	r3, #1
 800fb72:	b29a      	uxth	r2, r3
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb7e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800fb80:	69fb      	ldr	r3, [r7, #28]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d12a      	bne.n	800fbdc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb8a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800fb8c:	69fb      	ldr	r3, [r7, #28]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d106      	bne.n	800fba0 <tcp_process+0x280>
 800fb92:	4b06      	ldr	r3, [pc, #24]	; (800fbac <tcp_process+0x28c>)
 800fb94:	f44f 725d 	mov.w	r2, #884	; 0x374
 800fb98:	490f      	ldr	r1, [pc, #60]	; (800fbd8 <tcp_process+0x2b8>)
 800fb9a:	4806      	ldr	r0, [pc, #24]	; (800fbb4 <tcp_process+0x294>)
 800fb9c:	f00a fa96 	bl	801a0cc <iprintf>
          pcb->unsent = rseg->next;
 800fba0:	69fb      	ldr	r3, [r7, #28]
 800fba2:	681a      	ldr	r2, [r3, #0]
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	66da      	str	r2, [r3, #108]	; 0x6c
 800fba8:	e01c      	b.n	800fbe4 <tcp_process+0x2c4>
 800fbaa:	bf00      	nop
 800fbac:	0801e4a0 	.word	0x0801e4a0
 800fbb0:	0801e6d8 	.word	0x0801e6d8
 800fbb4:	0801e4ec 	.word	0x0801e4ec
 800fbb8:	200114c0 	.word	0x200114c0
 800fbbc:	200114b8 	.word	0x200114b8
 800fbc0:	200114b4 	.word	0x200114b4
 800fbc4:	0801e6f4 	.word	0x0801e6f4
 800fbc8:	200114c1 	.word	0x200114c1
 800fbcc:	2001147c 	.word	0x2001147c
 800fbd0:	200114a4 	.word	0x200114a4
 800fbd4:	0801e714 	.word	0x0801e714
 800fbd8:	0801e72c 	.word	0x0801e72c
        } else {
          pcb->unacked = rseg->next;
 800fbdc:	69fb      	ldr	r3, [r7, #28]
 800fbde:	681a      	ldr	r2, [r3, #0]
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800fbe4:	69f8      	ldr	r0, [r7, #28]
 800fbe6:	f7fe fc54 	bl	800e492 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d104      	bne.n	800fbfc <tcp_process+0x2dc>
          pcb->rtime = -1;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbf8:	861a      	strh	r2, [r3, #48]	; 0x30
 800fbfa:	e006      	b.n	800fc0a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2200      	movs	r2, #0
 800fc00:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	2200      	movs	r2, #0
 800fc06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d00a      	beq.n	800fc2a <tcp_process+0x30a>
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc1a:	687a      	ldr	r2, [r7, #4]
 800fc1c:	6910      	ldr	r0, [r2, #16]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	6879      	ldr	r1, [r7, #4]
 800fc22:	4798      	blx	r3
 800fc24:	4603      	mov	r3, r0
 800fc26:	76bb      	strb	r3, [r7, #26]
 800fc28:	e001      	b.n	800fc2e <tcp_process+0x30e>
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fc2e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fc32:	f113 0f0d 	cmn.w	r3, #13
 800fc36:	d102      	bne.n	800fc3e <tcp_process+0x31e>
          return ERR_ABRT;
 800fc38:	f06f 030c 	mvn.w	r3, #12
 800fc3c:	e250      	b.n	80100e0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	8b5b      	ldrh	r3, [r3, #26]
 800fc42:	f043 0302 	orr.w	r3, r3, #2
 800fc46:	b29a      	uxth	r2, r3
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fc4c:	e23a      	b.n	80100c4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fc4e:	4b98      	ldr	r3, [pc, #608]	; (800feb0 <tcp_process+0x590>)
 800fc50:	781b      	ldrb	r3, [r3, #0]
 800fc52:	f003 0310 	and.w	r3, r3, #16
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	f000 8234 	beq.w	80100c4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc5c:	4b95      	ldr	r3, [pc, #596]	; (800feb4 <tcp_process+0x594>)
 800fc5e:	6819      	ldr	r1, [r3, #0]
 800fc60:	4b95      	ldr	r3, [pc, #596]	; (800feb8 <tcp_process+0x598>)
 800fc62:	881b      	ldrh	r3, [r3, #0]
 800fc64:	461a      	mov	r2, r3
 800fc66:	4b95      	ldr	r3, [pc, #596]	; (800febc <tcp_process+0x59c>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc6c:	4b94      	ldr	r3, [pc, #592]	; (800fec0 <tcp_process+0x5a0>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc70:	885b      	ldrh	r3, [r3, #2]
 800fc72:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc74:	4a92      	ldr	r2, [pc, #584]	; (800fec0 <tcp_process+0x5a0>)
 800fc76:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc78:	8812      	ldrh	r2, [r2, #0]
 800fc7a:	b292      	uxth	r2, r2
 800fc7c:	9202      	str	r2, [sp, #8]
 800fc7e:	9301      	str	r3, [sp, #4]
 800fc80:	4b90      	ldr	r3, [pc, #576]	; (800fec4 <tcp_process+0x5a4>)
 800fc82:	9300      	str	r3, [sp, #0]
 800fc84:	4b90      	ldr	r3, [pc, #576]	; (800fec8 <tcp_process+0x5a8>)
 800fc86:	4602      	mov	r2, r0
 800fc88:	6878      	ldr	r0, [r7, #4]
 800fc8a:	f003 f8dd 	bl	8012e48 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fc94:	2b05      	cmp	r3, #5
 800fc96:	f200 8215 	bhi.w	80100c4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f002 fea7 	bl	80129f4 <tcp_rexmit_rto>
      break;
 800fca6:	e20d      	b.n	80100c4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800fca8:	4b81      	ldr	r3, [pc, #516]	; (800feb0 <tcp_process+0x590>)
 800fcaa:	781b      	ldrb	r3, [r3, #0]
 800fcac:	f003 0310 	and.w	r3, r3, #16
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	f000 80a1 	beq.w	800fdf8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fcb6:	4b7f      	ldr	r3, [pc, #508]	; (800feb4 <tcp_process+0x594>)
 800fcb8:	681a      	ldr	r2, [r3, #0]
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcbe:	1ad3      	subs	r3, r2, r3
 800fcc0:	3b01      	subs	r3, #1
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	db7e      	blt.n	800fdc4 <tcp_process+0x4a4>
 800fcc6:	4b7b      	ldr	r3, [pc, #492]	; (800feb4 <tcp_process+0x594>)
 800fcc8:	681a      	ldr	r2, [r3, #0]
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fcce:	1ad3      	subs	r3, r2, r3
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	dc77      	bgt.n	800fdc4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2204      	movs	r2, #4
 800fcd8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d102      	bne.n	800fce8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800fce2:	23fa      	movs	r3, #250	; 0xfa
 800fce4:	76bb      	strb	r3, [r7, #26]
 800fce6:	e01d      	b.n	800fd24 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fcec:	699b      	ldr	r3, [r3, #24]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d106      	bne.n	800fd00 <tcp_process+0x3e0>
 800fcf2:	4b76      	ldr	r3, [pc, #472]	; (800fecc <tcp_process+0x5ac>)
 800fcf4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800fcf8:	4975      	ldr	r1, [pc, #468]	; (800fed0 <tcp_process+0x5b0>)
 800fcfa:	4876      	ldr	r0, [pc, #472]	; (800fed4 <tcp_process+0x5b4>)
 800fcfc:	f00a f9e6 	bl	801a0cc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fd04:	699b      	ldr	r3, [r3, #24]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d00a      	beq.n	800fd20 <tcp_process+0x400>
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fd0e:	699b      	ldr	r3, [r3, #24]
 800fd10:	687a      	ldr	r2, [r7, #4]
 800fd12:	6910      	ldr	r0, [r2, #16]
 800fd14:	2200      	movs	r2, #0
 800fd16:	6879      	ldr	r1, [r7, #4]
 800fd18:	4798      	blx	r3
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	76bb      	strb	r3, [r7, #26]
 800fd1e:	e001      	b.n	800fd24 <tcp_process+0x404>
 800fd20:	23f0      	movs	r3, #240	; 0xf0
 800fd22:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fd24:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d00a      	beq.n	800fd42 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fd2c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fd30:	f113 0f0d 	cmn.w	r3, #13
 800fd34:	d002      	beq.n	800fd3c <tcp_process+0x41c>
              tcp_abort(pcb);
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f7fd fd18 	bl	800d76c <tcp_abort>
            }
            return ERR_ABRT;
 800fd3c:	f06f 030c 	mvn.w	r3, #12
 800fd40:	e1ce      	b.n	80100e0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f000 fae0 	bl	8010308 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fd48:	4b63      	ldr	r3, [pc, #396]	; (800fed8 <tcp_process+0x5b8>)
 800fd4a:	881b      	ldrh	r3, [r3, #0]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d005      	beq.n	800fd5c <tcp_process+0x43c>
            recv_acked--;
 800fd50:	4b61      	ldr	r3, [pc, #388]	; (800fed8 <tcp_process+0x5b8>)
 800fd52:	881b      	ldrh	r3, [r3, #0]
 800fd54:	3b01      	subs	r3, #1
 800fd56:	b29a      	uxth	r2, r3
 800fd58:	4b5f      	ldr	r3, [pc, #380]	; (800fed8 <tcp_process+0x5b8>)
 800fd5a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd60:	009a      	lsls	r2, r3, #2
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd66:	005b      	lsls	r3, r3, #1
 800fd68:	f241 111c 	movw	r1, #4380	; 0x111c
 800fd6c:	428b      	cmp	r3, r1
 800fd6e:	bf38      	it	cc
 800fd70:	460b      	movcc	r3, r1
 800fd72:	429a      	cmp	r2, r3
 800fd74:	d204      	bcs.n	800fd80 <tcp_process+0x460>
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd7a:	009b      	lsls	r3, r3, #2
 800fd7c:	b29b      	uxth	r3, r3
 800fd7e:	e00d      	b.n	800fd9c <tcp_process+0x47c>
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd84:	005b      	lsls	r3, r3, #1
 800fd86:	f241 121c 	movw	r2, #4380	; 0x111c
 800fd8a:	4293      	cmp	r3, r2
 800fd8c:	d904      	bls.n	800fd98 <tcp_process+0x478>
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd92:	005b      	lsls	r3, r3, #1
 800fd94:	b29b      	uxth	r3, r3
 800fd96:	e001      	b.n	800fd9c <tcp_process+0x47c>
 800fd98:	f241 131c 	movw	r3, #4380	; 0x111c
 800fd9c:	687a      	ldr	r2, [r7, #4]
 800fd9e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800fda2:	4b4e      	ldr	r3, [pc, #312]	; (800fedc <tcp_process+0x5bc>)
 800fda4:	781b      	ldrb	r3, [r3, #0]
 800fda6:	f003 0320 	and.w	r3, r3, #32
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d037      	beq.n	800fe1e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	8b5b      	ldrh	r3, [r3, #26]
 800fdb2:	f043 0302 	orr.w	r3, r3, #2
 800fdb6:	b29a      	uxth	r2, r3
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2207      	movs	r2, #7
 800fdc0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800fdc2:	e02c      	b.n	800fe1e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdc4:	4b3b      	ldr	r3, [pc, #236]	; (800feb4 <tcp_process+0x594>)
 800fdc6:	6819      	ldr	r1, [r3, #0]
 800fdc8:	4b3b      	ldr	r3, [pc, #236]	; (800feb8 <tcp_process+0x598>)
 800fdca:	881b      	ldrh	r3, [r3, #0]
 800fdcc:	461a      	mov	r2, r3
 800fdce:	4b3b      	ldr	r3, [pc, #236]	; (800febc <tcp_process+0x59c>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fdd4:	4b3a      	ldr	r3, [pc, #232]	; (800fec0 <tcp_process+0x5a0>)
 800fdd6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdd8:	885b      	ldrh	r3, [r3, #2]
 800fdda:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fddc:	4a38      	ldr	r2, [pc, #224]	; (800fec0 <tcp_process+0x5a0>)
 800fdde:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fde0:	8812      	ldrh	r2, [r2, #0]
 800fde2:	b292      	uxth	r2, r2
 800fde4:	9202      	str	r2, [sp, #8]
 800fde6:	9301      	str	r3, [sp, #4]
 800fde8:	4b36      	ldr	r3, [pc, #216]	; (800fec4 <tcp_process+0x5a4>)
 800fdea:	9300      	str	r3, [sp, #0]
 800fdec:	4b36      	ldr	r3, [pc, #216]	; (800fec8 <tcp_process+0x5a8>)
 800fdee:	4602      	mov	r2, r0
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	f003 f829 	bl	8012e48 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800fdf6:	e167      	b.n	80100c8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800fdf8:	4b2d      	ldr	r3, [pc, #180]	; (800feb0 <tcp_process+0x590>)
 800fdfa:	781b      	ldrb	r3, [r3, #0]
 800fdfc:	f003 0302 	and.w	r3, r3, #2
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	f000 8161 	beq.w	80100c8 <tcp_process+0x7a8>
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe0a:	1e5a      	subs	r2, r3, #1
 800fe0c:	4b2b      	ldr	r3, [pc, #172]	; (800febc <tcp_process+0x59c>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	429a      	cmp	r2, r3
 800fe12:	f040 8159 	bne.w	80100c8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f002 fe0e 	bl	8012a38 <tcp_rexmit>
      break;
 800fe1c:	e154      	b.n	80100c8 <tcp_process+0x7a8>
 800fe1e:	e153      	b.n	80100c8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f000 fa71 	bl	8010308 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800fe26:	4b2d      	ldr	r3, [pc, #180]	; (800fedc <tcp_process+0x5bc>)
 800fe28:	781b      	ldrb	r3, [r3, #0]
 800fe2a:	f003 0320 	and.w	r3, r3, #32
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	f000 814c 	beq.w	80100cc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	8b5b      	ldrh	r3, [r3, #26]
 800fe38:	f043 0302 	orr.w	r3, r3, #2
 800fe3c:	b29a      	uxth	r2, r3
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2207      	movs	r2, #7
 800fe46:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fe48:	e140      	b.n	80100cc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f000 fa5c 	bl	8010308 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fe50:	4b22      	ldr	r3, [pc, #136]	; (800fedc <tcp_process+0x5bc>)
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	f003 0320 	and.w	r3, r3, #32
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d071      	beq.n	800ff40 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fe5c:	4b14      	ldr	r3, [pc, #80]	; (800feb0 <tcp_process+0x590>)
 800fe5e:	781b      	ldrb	r3, [r3, #0]
 800fe60:	f003 0310 	and.w	r3, r3, #16
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d060      	beq.n	800ff2a <tcp_process+0x60a>
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe6c:	4b11      	ldr	r3, [pc, #68]	; (800feb4 <tcp_process+0x594>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	429a      	cmp	r2, r3
 800fe72:	d15a      	bne.n	800ff2a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d156      	bne.n	800ff2a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	8b5b      	ldrh	r3, [r3, #26]
 800fe80:	f043 0302 	orr.w	r3, r3, #2
 800fe84:	b29a      	uxth	r2, r3
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	f7fe fdbc 	bl	800ea08 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800fe90:	4b13      	ldr	r3, [pc, #76]	; (800fee0 <tcp_process+0x5c0>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	687a      	ldr	r2, [r7, #4]
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d105      	bne.n	800fea6 <tcp_process+0x586>
 800fe9a:	4b11      	ldr	r3, [pc, #68]	; (800fee0 <tcp_process+0x5c0>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	68db      	ldr	r3, [r3, #12]
 800fea0:	4a0f      	ldr	r2, [pc, #60]	; (800fee0 <tcp_process+0x5c0>)
 800fea2:	6013      	str	r3, [r2, #0]
 800fea4:	e02e      	b.n	800ff04 <tcp_process+0x5e4>
 800fea6:	4b0e      	ldr	r3, [pc, #56]	; (800fee0 <tcp_process+0x5c0>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	617b      	str	r3, [r7, #20]
 800feac:	e027      	b.n	800fefe <tcp_process+0x5de>
 800feae:	bf00      	nop
 800feb0:	200114c0 	.word	0x200114c0
 800feb4:	200114b8 	.word	0x200114b8
 800feb8:	200114be 	.word	0x200114be
 800febc:	200114b4 	.word	0x200114b4
 800fec0:	200114a4 	.word	0x200114a4
 800fec4:	20008f6c 	.word	0x20008f6c
 800fec8:	20008f70 	.word	0x20008f70
 800fecc:	0801e4a0 	.word	0x0801e4a0
 800fed0:	0801e740 	.word	0x0801e740
 800fed4:	0801e4ec 	.word	0x0801e4ec
 800fed8:	200114bc 	.word	0x200114bc
 800fedc:	200114c1 	.word	0x200114c1
 800fee0:	20011488 	.word	0x20011488
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	68db      	ldr	r3, [r3, #12]
 800fee8:	687a      	ldr	r2, [r7, #4]
 800feea:	429a      	cmp	r2, r3
 800feec:	d104      	bne.n	800fef8 <tcp_process+0x5d8>
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	68da      	ldr	r2, [r3, #12]
 800fef2:	697b      	ldr	r3, [r7, #20]
 800fef4:	60da      	str	r2, [r3, #12]
 800fef6:	e005      	b.n	800ff04 <tcp_process+0x5e4>
 800fef8:	697b      	ldr	r3, [r7, #20]
 800fefa:	68db      	ldr	r3, [r3, #12]
 800fefc:	617b      	str	r3, [r7, #20]
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d1ef      	bne.n	800fee4 <tcp_process+0x5c4>
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2200      	movs	r2, #0
 800ff08:	60da      	str	r2, [r3, #12]
 800ff0a:	4b77      	ldr	r3, [pc, #476]	; (80100e8 <tcp_process+0x7c8>)
 800ff0c:	2201      	movs	r2, #1
 800ff0e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	220a      	movs	r2, #10
 800ff14:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ff16:	4b75      	ldr	r3, [pc, #468]	; (80100ec <tcp_process+0x7cc>)
 800ff18:	681a      	ldr	r2, [r3, #0]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	60da      	str	r2, [r3, #12]
 800ff1e:	4a73      	ldr	r2, [pc, #460]	; (80100ec <tcp_process+0x7cc>)
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	6013      	str	r3, [r2, #0]
 800ff24:	f003 f952 	bl	80131cc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ff28:	e0d2      	b.n	80100d0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	8b5b      	ldrh	r3, [r3, #26]
 800ff2e:	f043 0302 	orr.w	r3, r3, #2
 800ff32:	b29a      	uxth	r2, r3
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2208      	movs	r2, #8
 800ff3c:	751a      	strb	r2, [r3, #20]
      break;
 800ff3e:	e0c7      	b.n	80100d0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ff40:	4b6b      	ldr	r3, [pc, #428]	; (80100f0 <tcp_process+0x7d0>)
 800ff42:	781b      	ldrb	r3, [r3, #0]
 800ff44:	f003 0310 	and.w	r3, r3, #16
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	f000 80c1 	beq.w	80100d0 <tcp_process+0x7b0>
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ff52:	4b68      	ldr	r3, [pc, #416]	; (80100f4 <tcp_process+0x7d4>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	429a      	cmp	r2, r3
 800ff58:	f040 80ba 	bne.w	80100d0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	f040 80b5 	bne.w	80100d0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2206      	movs	r2, #6
 800ff6a:	751a      	strb	r2, [r3, #20]
      break;
 800ff6c:	e0b0      	b.n	80100d0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ff6e:	6878      	ldr	r0, [r7, #4]
 800ff70:	f000 f9ca 	bl	8010308 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ff74:	4b60      	ldr	r3, [pc, #384]	; (80100f8 <tcp_process+0x7d8>)
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	f003 0320 	and.w	r3, r3, #32
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	f000 80a9 	beq.w	80100d4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	8b5b      	ldrh	r3, [r3, #26]
 800ff86:	f043 0302 	orr.w	r3, r3, #2
 800ff8a:	b29a      	uxth	r2, r3
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f7fe fd39 	bl	800ea08 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ff96:	4b59      	ldr	r3, [pc, #356]	; (80100fc <tcp_process+0x7dc>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	687a      	ldr	r2, [r7, #4]
 800ff9c:	429a      	cmp	r2, r3
 800ff9e:	d105      	bne.n	800ffac <tcp_process+0x68c>
 800ffa0:	4b56      	ldr	r3, [pc, #344]	; (80100fc <tcp_process+0x7dc>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	68db      	ldr	r3, [r3, #12]
 800ffa6:	4a55      	ldr	r2, [pc, #340]	; (80100fc <tcp_process+0x7dc>)
 800ffa8:	6013      	str	r3, [r2, #0]
 800ffaa:	e013      	b.n	800ffd4 <tcp_process+0x6b4>
 800ffac:	4b53      	ldr	r3, [pc, #332]	; (80100fc <tcp_process+0x7dc>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	613b      	str	r3, [r7, #16]
 800ffb2:	e00c      	b.n	800ffce <tcp_process+0x6ae>
 800ffb4:	693b      	ldr	r3, [r7, #16]
 800ffb6:	68db      	ldr	r3, [r3, #12]
 800ffb8:	687a      	ldr	r2, [r7, #4]
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d104      	bne.n	800ffc8 <tcp_process+0x6a8>
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	68da      	ldr	r2, [r3, #12]
 800ffc2:	693b      	ldr	r3, [r7, #16]
 800ffc4:	60da      	str	r2, [r3, #12]
 800ffc6:	e005      	b.n	800ffd4 <tcp_process+0x6b4>
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	68db      	ldr	r3, [r3, #12]
 800ffcc:	613b      	str	r3, [r7, #16]
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d1ef      	bne.n	800ffb4 <tcp_process+0x694>
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	60da      	str	r2, [r3, #12]
 800ffda:	4b43      	ldr	r3, [pc, #268]	; (80100e8 <tcp_process+0x7c8>)
 800ffdc:	2201      	movs	r2, #1
 800ffde:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	220a      	movs	r2, #10
 800ffe4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ffe6:	4b41      	ldr	r3, [pc, #260]	; (80100ec <tcp_process+0x7cc>)
 800ffe8:	681a      	ldr	r2, [r3, #0]
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	60da      	str	r2, [r3, #12]
 800ffee:	4a3f      	ldr	r2, [pc, #252]	; (80100ec <tcp_process+0x7cc>)
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	6013      	str	r3, [r2, #0]
 800fff4:	f003 f8ea 	bl	80131cc <tcp_timer_needed>
      }
      break;
 800fff8:	e06c      	b.n	80100d4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f000 f984 	bl	8010308 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010000:	4b3b      	ldr	r3, [pc, #236]	; (80100f0 <tcp_process+0x7d0>)
 8010002:	781b      	ldrb	r3, [r3, #0]
 8010004:	f003 0310 	and.w	r3, r3, #16
 8010008:	2b00      	cmp	r3, #0
 801000a:	d065      	beq.n	80100d8 <tcp_process+0x7b8>
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010010:	4b38      	ldr	r3, [pc, #224]	; (80100f4 <tcp_process+0x7d4>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	429a      	cmp	r2, r3
 8010016:	d15f      	bne.n	80100d8 <tcp_process+0x7b8>
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801001c:	2b00      	cmp	r3, #0
 801001e:	d15b      	bne.n	80100d8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f7fe fcf1 	bl	800ea08 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010026:	4b35      	ldr	r3, [pc, #212]	; (80100fc <tcp_process+0x7dc>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	429a      	cmp	r2, r3
 801002e:	d105      	bne.n	801003c <tcp_process+0x71c>
 8010030:	4b32      	ldr	r3, [pc, #200]	; (80100fc <tcp_process+0x7dc>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	68db      	ldr	r3, [r3, #12]
 8010036:	4a31      	ldr	r2, [pc, #196]	; (80100fc <tcp_process+0x7dc>)
 8010038:	6013      	str	r3, [r2, #0]
 801003a:	e013      	b.n	8010064 <tcp_process+0x744>
 801003c:	4b2f      	ldr	r3, [pc, #188]	; (80100fc <tcp_process+0x7dc>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	60fb      	str	r3, [r7, #12]
 8010042:	e00c      	b.n	801005e <tcp_process+0x73e>
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	68db      	ldr	r3, [r3, #12]
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	429a      	cmp	r2, r3
 801004c:	d104      	bne.n	8010058 <tcp_process+0x738>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	68da      	ldr	r2, [r3, #12]
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	60da      	str	r2, [r3, #12]
 8010056:	e005      	b.n	8010064 <tcp_process+0x744>
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	68db      	ldr	r3, [r3, #12]
 801005c:	60fb      	str	r3, [r7, #12]
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d1ef      	bne.n	8010044 <tcp_process+0x724>
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2200      	movs	r2, #0
 8010068:	60da      	str	r2, [r3, #12]
 801006a:	4b1f      	ldr	r3, [pc, #124]	; (80100e8 <tcp_process+0x7c8>)
 801006c:	2201      	movs	r2, #1
 801006e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	220a      	movs	r2, #10
 8010074:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010076:	4b1d      	ldr	r3, [pc, #116]	; (80100ec <tcp_process+0x7cc>)
 8010078:	681a      	ldr	r2, [r3, #0]
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	60da      	str	r2, [r3, #12]
 801007e:	4a1b      	ldr	r2, [pc, #108]	; (80100ec <tcp_process+0x7cc>)
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6013      	str	r3, [r2, #0]
 8010084:	f003 f8a2 	bl	80131cc <tcp_timer_needed>
      }
      break;
 8010088:	e026      	b.n	80100d8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801008a:	6878      	ldr	r0, [r7, #4]
 801008c:	f000 f93c 	bl	8010308 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010090:	4b17      	ldr	r3, [pc, #92]	; (80100f0 <tcp_process+0x7d0>)
 8010092:	781b      	ldrb	r3, [r3, #0]
 8010094:	f003 0310 	and.w	r3, r3, #16
 8010098:	2b00      	cmp	r3, #0
 801009a:	d01f      	beq.n	80100dc <tcp_process+0x7bc>
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80100a0:	4b14      	ldr	r3, [pc, #80]	; (80100f4 <tcp_process+0x7d4>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	429a      	cmp	r2, r3
 80100a6:	d119      	bne.n	80100dc <tcp_process+0x7bc>
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d115      	bne.n	80100dc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80100b0:	4b11      	ldr	r3, [pc, #68]	; (80100f8 <tcp_process+0x7d8>)
 80100b2:	781b      	ldrb	r3, [r3, #0]
 80100b4:	f043 0310 	orr.w	r3, r3, #16
 80100b8:	b2da      	uxtb	r2, r3
 80100ba:	4b0f      	ldr	r3, [pc, #60]	; (80100f8 <tcp_process+0x7d8>)
 80100bc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80100be:	e00d      	b.n	80100dc <tcp_process+0x7bc>
    default:
      break;
 80100c0:	bf00      	nop
 80100c2:	e00c      	b.n	80100de <tcp_process+0x7be>
      break;
 80100c4:	bf00      	nop
 80100c6:	e00a      	b.n	80100de <tcp_process+0x7be>
      break;
 80100c8:	bf00      	nop
 80100ca:	e008      	b.n	80100de <tcp_process+0x7be>
      break;
 80100cc:	bf00      	nop
 80100ce:	e006      	b.n	80100de <tcp_process+0x7be>
      break;
 80100d0:	bf00      	nop
 80100d2:	e004      	b.n	80100de <tcp_process+0x7be>
      break;
 80100d4:	bf00      	nop
 80100d6:	e002      	b.n	80100de <tcp_process+0x7be>
      break;
 80100d8:	bf00      	nop
 80100da:	e000      	b.n	80100de <tcp_process+0x7be>
      break;
 80100dc:	bf00      	nop
  }
  return ERR_OK;
 80100de:	2300      	movs	r3, #0
}
 80100e0:	4618      	mov	r0, r3
 80100e2:	3724      	adds	r7, #36	; 0x24
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd90      	pop	{r4, r7, pc}
 80100e8:	20011490 	.word	0x20011490
 80100ec:	2001148c 	.word	0x2001148c
 80100f0:	200114c0 	.word	0x200114c0
 80100f4:	200114b8 	.word	0x200114b8
 80100f8:	200114c1 	.word	0x200114c1
 80100fc:	20011488 	.word	0x20011488

08010100 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010100:	b590      	push	{r4, r7, lr}
 8010102:	b085      	sub	sp, #20
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d106      	bne.n	801011e <tcp_oos_insert_segment+0x1e>
 8010110:	4b3b      	ldr	r3, [pc, #236]	; (8010200 <tcp_oos_insert_segment+0x100>)
 8010112:	f240 421f 	movw	r2, #1055	; 0x41f
 8010116:	493b      	ldr	r1, [pc, #236]	; (8010204 <tcp_oos_insert_segment+0x104>)
 8010118:	483b      	ldr	r0, [pc, #236]	; (8010208 <tcp_oos_insert_segment+0x108>)
 801011a:	f009 ffd7 	bl	801a0cc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	68db      	ldr	r3, [r3, #12]
 8010122:	899b      	ldrh	r3, [r3, #12]
 8010124:	b29b      	uxth	r3, r3
 8010126:	4618      	mov	r0, r3
 8010128:	f7fb f93e 	bl	800b3a8 <lwip_htons>
 801012c:	4603      	mov	r3, r0
 801012e:	b2db      	uxtb	r3, r3
 8010130:	f003 0301 	and.w	r3, r3, #1
 8010134:	2b00      	cmp	r3, #0
 8010136:	d028      	beq.n	801018a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010138:	6838      	ldr	r0, [r7, #0]
 801013a:	f7fe f995 	bl	800e468 <tcp_segs_free>
    next = NULL;
 801013e:	2300      	movs	r3, #0
 8010140:	603b      	str	r3, [r7, #0]
 8010142:	e056      	b.n	80101f2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	68db      	ldr	r3, [r3, #12]
 8010148:	899b      	ldrh	r3, [r3, #12]
 801014a:	b29b      	uxth	r3, r3
 801014c:	4618      	mov	r0, r3
 801014e:	f7fb f92b 	bl	800b3a8 <lwip_htons>
 8010152:	4603      	mov	r3, r0
 8010154:	b2db      	uxtb	r3, r3
 8010156:	f003 0301 	and.w	r3, r3, #1
 801015a:	2b00      	cmp	r3, #0
 801015c:	d00d      	beq.n	801017a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	68db      	ldr	r3, [r3, #12]
 8010162:	899b      	ldrh	r3, [r3, #12]
 8010164:	b29c      	uxth	r4, r3
 8010166:	2001      	movs	r0, #1
 8010168:	f7fb f91e 	bl	800b3a8 <lwip_htons>
 801016c:	4603      	mov	r3, r0
 801016e:	461a      	mov	r2, r3
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	68db      	ldr	r3, [r3, #12]
 8010174:	4322      	orrs	r2, r4
 8010176:	b292      	uxth	r2, r2
 8010178:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010184:	68f8      	ldr	r0, [r7, #12]
 8010186:	f7fe f984 	bl	800e492 <tcp_seg_free>
    while (next &&
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d00e      	beq.n	80101ae <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	891b      	ldrh	r3, [r3, #8]
 8010194:	461a      	mov	r2, r3
 8010196:	4b1d      	ldr	r3, [pc, #116]	; (801020c <tcp_oos_insert_segment+0x10c>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	441a      	add	r2, r3
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	68db      	ldr	r3, [r3, #12]
 80101a0:	685b      	ldr	r3, [r3, #4]
 80101a2:	6839      	ldr	r1, [r7, #0]
 80101a4:	8909      	ldrh	r1, [r1, #8]
 80101a6:	440b      	add	r3, r1
 80101a8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	daca      	bge.n	8010144 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d01e      	beq.n	80101f2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	891b      	ldrh	r3, [r3, #8]
 80101b8:	461a      	mov	r2, r3
 80101ba:	4b14      	ldr	r3, [pc, #80]	; (801020c <tcp_oos_insert_segment+0x10c>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	441a      	add	r2, r3
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	68db      	ldr	r3, [r3, #12]
 80101c4:	685b      	ldr	r3, [r3, #4]
 80101c6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	dd12      	ble.n	80101f2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	68db      	ldr	r3, [r3, #12]
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	b29a      	uxth	r2, r3
 80101d4:	4b0d      	ldr	r3, [pc, #52]	; (801020c <tcp_oos_insert_segment+0x10c>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	b29b      	uxth	r3, r3
 80101da:	1ad3      	subs	r3, r2, r3
 80101dc:	b29a      	uxth	r2, r3
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	685a      	ldr	r2, [r3, #4]
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	891b      	ldrh	r3, [r3, #8]
 80101ea:	4619      	mov	r1, r3
 80101ec:	4610      	mov	r0, r2
 80101ee:	f7fc fb47 	bl	800c880 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	683a      	ldr	r2, [r7, #0]
 80101f6:	601a      	str	r2, [r3, #0]
}
 80101f8:	bf00      	nop
 80101fa:	3714      	adds	r7, #20
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd90      	pop	{r4, r7, pc}
 8010200:	0801e4a0 	.word	0x0801e4a0
 8010204:	0801e760 	.word	0x0801e760
 8010208:	0801e4ec 	.word	0x0801e4ec
 801020c:	200114b4 	.word	0x200114b4

08010210 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010210:	b5b0      	push	{r4, r5, r7, lr}
 8010212:	b086      	sub	sp, #24
 8010214:	af00      	add	r7, sp, #0
 8010216:	60f8      	str	r0, [r7, #12]
 8010218:	60b9      	str	r1, [r7, #8]
 801021a:	607a      	str	r2, [r7, #4]
 801021c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801021e:	e03e      	b.n	801029e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	685b      	ldr	r3, [r3, #4]
 801022e:	4618      	mov	r0, r3
 8010230:	f7fc fd3a 	bl	800cca8 <pbuf_clen>
 8010234:	4603      	mov	r3, r0
 8010236:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801023e:	8a7a      	ldrh	r2, [r7, #18]
 8010240:	429a      	cmp	r2, r3
 8010242:	d906      	bls.n	8010252 <tcp_free_acked_segments+0x42>
 8010244:	4b2a      	ldr	r3, [pc, #168]	; (80102f0 <tcp_free_acked_segments+0xe0>)
 8010246:	f240 4257 	movw	r2, #1111	; 0x457
 801024a:	492a      	ldr	r1, [pc, #168]	; (80102f4 <tcp_free_acked_segments+0xe4>)
 801024c:	482a      	ldr	r0, [pc, #168]	; (80102f8 <tcp_free_acked_segments+0xe8>)
 801024e:	f009 ff3d 	bl	801a0cc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010258:	8a7b      	ldrh	r3, [r7, #18]
 801025a:	1ad3      	subs	r3, r2, r3
 801025c:	b29a      	uxth	r2, r3
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	891a      	ldrh	r2, [r3, #8]
 8010268:	4b24      	ldr	r3, [pc, #144]	; (80102fc <tcp_free_acked_segments+0xec>)
 801026a:	881b      	ldrh	r3, [r3, #0]
 801026c:	4413      	add	r3, r2
 801026e:	b29a      	uxth	r2, r3
 8010270:	4b22      	ldr	r3, [pc, #136]	; (80102fc <tcp_free_acked_segments+0xec>)
 8010272:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010274:	6978      	ldr	r0, [r7, #20]
 8010276:	f7fe f90c 	bl	800e492 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010280:	2b00      	cmp	r3, #0
 8010282:	d00c      	beq.n	801029e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d109      	bne.n	801029e <tcp_free_acked_segments+0x8e>
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d106      	bne.n	801029e <tcp_free_acked_segments+0x8e>
 8010290:	4b17      	ldr	r3, [pc, #92]	; (80102f0 <tcp_free_acked_segments+0xe0>)
 8010292:	f240 4261 	movw	r2, #1121	; 0x461
 8010296:	491a      	ldr	r1, [pc, #104]	; (8010300 <tcp_free_acked_segments+0xf0>)
 8010298:	4817      	ldr	r0, [pc, #92]	; (80102f8 <tcp_free_acked_segments+0xe8>)
 801029a:	f009 ff17 	bl	801a0cc <iprintf>
  while (seg_list != NULL &&
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d020      	beq.n	80102e6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	68db      	ldr	r3, [r3, #12]
 80102a8:	685b      	ldr	r3, [r3, #4]
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7fb f891 	bl	800b3d2 <lwip_htonl>
 80102b0:	4604      	mov	r4, r0
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	891b      	ldrh	r3, [r3, #8]
 80102b6:	461d      	mov	r5, r3
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	68db      	ldr	r3, [r3, #12]
 80102bc:	899b      	ldrh	r3, [r3, #12]
 80102be:	b29b      	uxth	r3, r3
 80102c0:	4618      	mov	r0, r3
 80102c2:	f7fb f871 	bl	800b3a8 <lwip_htons>
 80102c6:	4603      	mov	r3, r0
 80102c8:	b2db      	uxtb	r3, r3
 80102ca:	f003 0303 	and.w	r3, r3, #3
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d001      	beq.n	80102d6 <tcp_free_acked_segments+0xc6>
 80102d2:	2301      	movs	r3, #1
 80102d4:	e000      	b.n	80102d8 <tcp_free_acked_segments+0xc8>
 80102d6:	2300      	movs	r3, #0
 80102d8:	442b      	add	r3, r5
 80102da:	18e2      	adds	r2, r4, r3
 80102dc:	4b09      	ldr	r3, [pc, #36]	; (8010304 <tcp_free_acked_segments+0xf4>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	dd9c      	ble.n	8010220 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80102e6:	68bb      	ldr	r3, [r7, #8]
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	3718      	adds	r7, #24
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bdb0      	pop	{r4, r5, r7, pc}
 80102f0:	0801e4a0 	.word	0x0801e4a0
 80102f4:	0801e788 	.word	0x0801e788
 80102f8:	0801e4ec 	.word	0x0801e4ec
 80102fc:	200114bc 	.word	0x200114bc
 8010300:	0801e7b0 	.word	0x0801e7b0
 8010304:	200114b8 	.word	0x200114b8

08010308 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010308:	b5b0      	push	{r4, r5, r7, lr}
 801030a:	b094      	sub	sp, #80	; 0x50
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010310:	2300      	movs	r3, #0
 8010312:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d106      	bne.n	8010328 <tcp_receive+0x20>
 801031a:	4b91      	ldr	r3, [pc, #580]	; (8010560 <tcp_receive+0x258>)
 801031c:	f240 427b 	movw	r2, #1147	; 0x47b
 8010320:	4990      	ldr	r1, [pc, #576]	; (8010564 <tcp_receive+0x25c>)
 8010322:	4891      	ldr	r0, [pc, #580]	; (8010568 <tcp_receive+0x260>)
 8010324:	f009 fed2 	bl	801a0cc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	7d1b      	ldrb	r3, [r3, #20]
 801032c:	2b03      	cmp	r3, #3
 801032e:	d806      	bhi.n	801033e <tcp_receive+0x36>
 8010330:	4b8b      	ldr	r3, [pc, #556]	; (8010560 <tcp_receive+0x258>)
 8010332:	f240 427c 	movw	r2, #1148	; 0x47c
 8010336:	498d      	ldr	r1, [pc, #564]	; (801056c <tcp_receive+0x264>)
 8010338:	488b      	ldr	r0, [pc, #556]	; (8010568 <tcp_receive+0x260>)
 801033a:	f009 fec7 	bl	801a0cc <iprintf>

  if (flags & TCP_ACK) {
 801033e:	4b8c      	ldr	r3, [pc, #560]	; (8010570 <tcp_receive+0x268>)
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	f003 0310 	and.w	r3, r3, #16
 8010346:	2b00      	cmp	r3, #0
 8010348:	f000 8264 	beq.w	8010814 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010352:	461a      	mov	r2, r3
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010358:	4413      	add	r3, r2
 801035a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010360:	4b84      	ldr	r3, [pc, #528]	; (8010574 <tcp_receive+0x26c>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	1ad3      	subs	r3, r2, r3
 8010366:	2b00      	cmp	r3, #0
 8010368:	db1b      	blt.n	80103a2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801036e:	4b81      	ldr	r3, [pc, #516]	; (8010574 <tcp_receive+0x26c>)
 8010370:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010372:	429a      	cmp	r2, r3
 8010374:	d106      	bne.n	8010384 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801037a:	4b7f      	ldr	r3, [pc, #508]	; (8010578 <tcp_receive+0x270>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	1ad3      	subs	r3, r2, r3
 8010380:	2b00      	cmp	r3, #0
 8010382:	db0e      	blt.n	80103a2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010388:	4b7b      	ldr	r3, [pc, #492]	; (8010578 <tcp_receive+0x270>)
 801038a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801038c:	429a      	cmp	r2, r3
 801038e:	d125      	bne.n	80103dc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010390:	4b7a      	ldr	r3, [pc, #488]	; (801057c <tcp_receive+0x274>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	89db      	ldrh	r3, [r3, #14]
 8010396:	b29a      	uxth	r2, r3
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801039e:	429a      	cmp	r2, r3
 80103a0:	d91c      	bls.n	80103dc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80103a2:	4b76      	ldr	r3, [pc, #472]	; (801057c <tcp_receive+0x274>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	89db      	ldrh	r3, [r3, #14]
 80103a8:	b29a      	uxth	r2, r3
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80103bc:	429a      	cmp	r2, r3
 80103be:	d205      	bcs.n	80103cc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80103cc:	4b69      	ldr	r3, [pc, #420]	; (8010574 <tcp_receive+0x26c>)
 80103ce:	681a      	ldr	r2, [r3, #0]
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80103d4:	4b68      	ldr	r3, [pc, #416]	; (8010578 <tcp_receive+0x270>)
 80103d6:	681a      	ldr	r2, [r3, #0]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80103dc:	4b66      	ldr	r3, [pc, #408]	; (8010578 <tcp_receive+0x270>)
 80103de:	681a      	ldr	r2, [r3, #0]
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103e4:	1ad3      	subs	r3, r2, r3
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	dc58      	bgt.n	801049c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80103ea:	4b65      	ldr	r3, [pc, #404]	; (8010580 <tcp_receive+0x278>)
 80103ec:	881b      	ldrh	r3, [r3, #0]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d14b      	bne.n	801048a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103f6:	687a      	ldr	r2, [r7, #4]
 80103f8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80103fc:	4413      	add	r3, r2
 80103fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010400:	429a      	cmp	r2, r3
 8010402:	d142      	bne.n	801048a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801040a:	2b00      	cmp	r3, #0
 801040c:	db3d      	blt.n	801048a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010412:	4b59      	ldr	r3, [pc, #356]	; (8010578 <tcp_receive+0x270>)
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	429a      	cmp	r2, r3
 8010418:	d137      	bne.n	801048a <tcp_receive+0x182>
              found_dupack = 1;
 801041a:	2301      	movs	r3, #1
 801041c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010424:	2bff      	cmp	r3, #255	; 0xff
 8010426:	d007      	beq.n	8010438 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801042e:	3301      	adds	r3, #1
 8010430:	b2da      	uxtb	r2, r3
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801043e:	2b03      	cmp	r3, #3
 8010440:	d91b      	bls.n	801047a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801044c:	4413      	add	r3, r2
 801044e:	b29a      	uxth	r2, r3
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010456:	429a      	cmp	r2, r3
 8010458:	d30a      	bcc.n	8010470 <tcp_receive+0x168>
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010464:	4413      	add	r3, r2
 8010466:	b29a      	uxth	r2, r3
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801046e:	e004      	b.n	801047a <tcp_receive+0x172>
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010476:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010480:	2b02      	cmp	r3, #2
 8010482:	d902      	bls.n	801048a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010484:	6878      	ldr	r0, [r7, #4]
 8010486:	f002 fb43 	bl	8012b10 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801048a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801048c:	2b00      	cmp	r3, #0
 801048e:	f040 8161 	bne.w	8010754 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2200      	movs	r2, #0
 8010496:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801049a:	e15b      	b.n	8010754 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801049c:	4b36      	ldr	r3, [pc, #216]	; (8010578 <tcp_receive+0x270>)
 801049e:	681a      	ldr	r2, [r3, #0]
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104a4:	1ad3      	subs	r3, r2, r3
 80104a6:	3b01      	subs	r3, #1
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	f2c0 814e 	blt.w	801074a <tcp_receive+0x442>
 80104ae:	4b32      	ldr	r3, [pc, #200]	; (8010578 <tcp_receive+0x270>)
 80104b0:	681a      	ldr	r2, [r3, #0]
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104b6:	1ad3      	subs	r3, r2, r3
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	f300 8146 	bgt.w	801074a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	8b5b      	ldrh	r3, [r3, #26]
 80104c2:	f003 0304 	and.w	r3, r3, #4
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d010      	beq.n	80104ec <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	8b5b      	ldrh	r3, [r3, #26]
 80104ce:	f023 0304 	bic.w	r3, r3, #4
 80104d2:	b29a      	uxth	r2, r3
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2200      	movs	r2, #0
 80104e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	2200      	movs	r2, #0
 80104f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80104fa:	10db      	asrs	r3, r3, #3
 80104fc:	b21b      	sxth	r3, r3
 80104fe:	b29a      	uxth	r2, r3
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010506:	b29b      	uxth	r3, r3
 8010508:	4413      	add	r3, r2
 801050a:	b29b      	uxth	r3, r3
 801050c:	b21a      	sxth	r2, r3
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010514:	4b18      	ldr	r3, [pc, #96]	; (8010578 <tcp_receive+0x270>)
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	b29a      	uxth	r2, r3
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801051e:	b29b      	uxth	r3, r3
 8010520:	1ad3      	subs	r3, r2, r3
 8010522:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2200      	movs	r2, #0
 8010528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801052c:	4b12      	ldr	r3, [pc, #72]	; (8010578 <tcp_receive+0x270>)
 801052e:	681a      	ldr	r2, [r3, #0]
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	7d1b      	ldrb	r3, [r3, #20]
 8010538:	2b03      	cmp	r3, #3
 801053a:	f240 8097 	bls.w	801066c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801054a:	429a      	cmp	r2, r3
 801054c:	d245      	bcs.n	80105da <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	8b5b      	ldrh	r3, [r3, #26]
 8010552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010556:	2b00      	cmp	r3, #0
 8010558:	d014      	beq.n	8010584 <tcp_receive+0x27c>
 801055a:	2301      	movs	r3, #1
 801055c:	e013      	b.n	8010586 <tcp_receive+0x27e>
 801055e:	bf00      	nop
 8010560:	0801e4a0 	.word	0x0801e4a0
 8010564:	0801e7d0 	.word	0x0801e7d0
 8010568:	0801e4ec 	.word	0x0801e4ec
 801056c:	0801e7ec 	.word	0x0801e7ec
 8010570:	200114c0 	.word	0x200114c0
 8010574:	200114b4 	.word	0x200114b4
 8010578:	200114b8 	.word	0x200114b8
 801057c:	200114a4 	.word	0x200114a4
 8010580:	200114be 	.word	0x200114be
 8010584:	2302      	movs	r3, #2
 8010586:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801058a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801058e:	b29a      	uxth	r2, r3
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010594:	fb12 f303 	smulbb	r3, r2, r3
 8010598:	b29b      	uxth	r3, r3
 801059a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801059c:	4293      	cmp	r3, r2
 801059e:	bf28      	it	cs
 80105a0:	4613      	movcs	r3, r2
 80105a2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80105aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80105ac:	4413      	add	r3, r2
 80105ae:	b29a      	uxth	r2, r3
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d309      	bcc.n	80105ce <tcp_receive+0x2c6>
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80105c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80105c2:	4413      	add	r3, r2
 80105c4:	b29a      	uxth	r2, r3
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80105cc:	e04e      	b.n	801066c <tcp_receive+0x364>
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80105d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80105d8:	e048      	b.n	801066c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80105e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80105e2:	4413      	add	r3, r2
 80105e4:	b29a      	uxth	r2, r3
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80105ec:	429a      	cmp	r2, r3
 80105ee:	d309      	bcc.n	8010604 <tcp_receive+0x2fc>
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80105f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80105f8:	4413      	add	r3, r2
 80105fa:	b29a      	uxth	r2, r3
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010602:	e004      	b.n	801060e <tcp_receive+0x306>
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801060a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801061a:	429a      	cmp	r2, r3
 801061c:	d326      	bcc.n	801066c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801062a:	1ad3      	subs	r3, r2, r3
 801062c:	b29a      	uxth	r2, r3
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801063e:	4413      	add	r3, r2
 8010640:	b29a      	uxth	r2, r3
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010648:	429a      	cmp	r2, r3
 801064a:	d30a      	bcc.n	8010662 <tcp_receive+0x35a>
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010656:	4413      	add	r3, r2
 8010658:	b29a      	uxth	r2, r3
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010660:	e004      	b.n	801066c <tcp_receive+0x364>
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010668:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010674:	4a98      	ldr	r2, [pc, #608]	; (80108d8 <tcp_receive+0x5d0>)
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f7ff fdca 	bl	8010210 <tcp_free_acked_segments>
 801067c:	4602      	mov	r2, r0
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801068a:	4a94      	ldr	r2, [pc, #592]	; (80108dc <tcp_receive+0x5d4>)
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f7ff fdbf 	bl	8010210 <tcp_free_acked_segments>
 8010692:	4602      	mov	r2, r0
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801069c:	2b00      	cmp	r3, #0
 801069e:	d104      	bne.n	80106aa <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80106a6:	861a      	strh	r2, [r3, #48]	; 0x30
 80106a8:	e002      	b.n	80106b0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	2200      	movs	r2, #0
 80106ae:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2200      	movs	r2, #0
 80106b4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d103      	bne.n	80106c6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	2200      	movs	r2, #0
 80106c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80106cc:	4b84      	ldr	r3, [pc, #528]	; (80108e0 <tcp_receive+0x5d8>)
 80106ce:	881b      	ldrh	r3, [r3, #0]
 80106d0:	4413      	add	r3, r2
 80106d2:	b29a      	uxth	r2, r3
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	8b5b      	ldrh	r3, [r3, #26]
 80106de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d035      	beq.n	8010752 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d118      	bne.n	8010720 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d00c      	beq.n	8010710 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106fe:	68db      	ldr	r3, [r3, #12]
 8010700:	685b      	ldr	r3, [r3, #4]
 8010702:	4618      	mov	r0, r3
 8010704:	f7fa fe65 	bl	800b3d2 <lwip_htonl>
 8010708:	4603      	mov	r3, r0
 801070a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801070c:	2b00      	cmp	r3, #0
 801070e:	dc20      	bgt.n	8010752 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	8b5b      	ldrh	r3, [r3, #26]
 8010714:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010718:	b29a      	uxth	r2, r3
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801071e:	e018      	b.n	8010752 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010728:	68db      	ldr	r3, [r3, #12]
 801072a:	685b      	ldr	r3, [r3, #4]
 801072c:	4618      	mov	r0, r3
 801072e:	f7fa fe50 	bl	800b3d2 <lwip_htonl>
 8010732:	4603      	mov	r3, r0
 8010734:	1ae3      	subs	r3, r4, r3
 8010736:	2b00      	cmp	r3, #0
 8010738:	dc0b      	bgt.n	8010752 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	8b5b      	ldrh	r3, [r3, #26]
 801073e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010742:	b29a      	uxth	r2, r3
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010748:	e003      	b.n	8010752 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f002 fbce 	bl	8012eec <tcp_send_empty_ack>
 8010750:	e000      	b.n	8010754 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010752:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010758:	2b00      	cmp	r3, #0
 801075a:	d05b      	beq.n	8010814 <tcp_receive+0x50c>
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010760:	4b60      	ldr	r3, [pc, #384]	; (80108e4 <tcp_receive+0x5dc>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	1ad3      	subs	r3, r2, r3
 8010766:	2b00      	cmp	r3, #0
 8010768:	da54      	bge.n	8010814 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801076a:	4b5f      	ldr	r3, [pc, #380]	; (80108e8 <tcp_receive+0x5e0>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	b29a      	uxth	r2, r3
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010774:	b29b      	uxth	r3, r3
 8010776:	1ad3      	subs	r3, r2, r3
 8010778:	b29b      	uxth	r3, r3
 801077a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801077e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010788:	10db      	asrs	r3, r3, #3
 801078a:	b21b      	sxth	r3, r3
 801078c:	b29b      	uxth	r3, r3
 801078e:	1ad3      	subs	r3, r2, r3
 8010790:	b29b      	uxth	r3, r3
 8010792:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801079c:	b29a      	uxth	r2, r3
 801079e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80107a2:	4413      	add	r3, r2
 80107a4:	b29b      	uxth	r3, r3
 80107a6:	b21a      	sxth	r2, r3
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80107ac:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	da05      	bge.n	80107c0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80107b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80107b8:	425b      	negs	r3, r3
 80107ba:	b29b      	uxth	r3, r3
 80107bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80107c0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80107ca:	109b      	asrs	r3, r3, #2
 80107cc:	b21b      	sxth	r3, r3
 80107ce:	b29b      	uxth	r3, r3
 80107d0:	1ad3      	subs	r3, r2, r3
 80107d2:	b29b      	uxth	r3, r3
 80107d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80107de:	b29a      	uxth	r2, r3
 80107e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80107e4:	4413      	add	r3, r2
 80107e6:	b29b      	uxth	r3, r3
 80107e8:	b21a      	sxth	r2, r3
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80107f4:	10db      	asrs	r3, r3, #3
 80107f6:	b21b      	sxth	r3, r3
 80107f8:	b29a      	uxth	r2, r3
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010800:	b29b      	uxth	r3, r3
 8010802:	4413      	add	r3, r2
 8010804:	b29b      	uxth	r3, r3
 8010806:	b21a      	sxth	r2, r3
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	2200      	movs	r2, #0
 8010812:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010814:	4b35      	ldr	r3, [pc, #212]	; (80108ec <tcp_receive+0x5e4>)
 8010816:	881b      	ldrh	r3, [r3, #0]
 8010818:	2b00      	cmp	r3, #0
 801081a:	f000 84e2 	beq.w	80111e2 <tcp_receive+0xeda>
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	7d1b      	ldrb	r3, [r3, #20]
 8010822:	2b06      	cmp	r3, #6
 8010824:	f200 84dd 	bhi.w	80111e2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801082c:	4b30      	ldr	r3, [pc, #192]	; (80108f0 <tcp_receive+0x5e8>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	1ad3      	subs	r3, r2, r3
 8010832:	3b01      	subs	r3, #1
 8010834:	2b00      	cmp	r3, #0
 8010836:	f2c0 808f 	blt.w	8010958 <tcp_receive+0x650>
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801083e:	4b2b      	ldr	r3, [pc, #172]	; (80108ec <tcp_receive+0x5e4>)
 8010840:	881b      	ldrh	r3, [r3, #0]
 8010842:	4619      	mov	r1, r3
 8010844:	4b2a      	ldr	r3, [pc, #168]	; (80108f0 <tcp_receive+0x5e8>)
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	440b      	add	r3, r1
 801084a:	1ad3      	subs	r3, r2, r3
 801084c:	3301      	adds	r3, #1
 801084e:	2b00      	cmp	r3, #0
 8010850:	f300 8082 	bgt.w	8010958 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010854:	4b27      	ldr	r3, [pc, #156]	; (80108f4 <tcp_receive+0x5ec>)
 8010856:	685b      	ldr	r3, [r3, #4]
 8010858:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801085e:	4b24      	ldr	r3, [pc, #144]	; (80108f0 <tcp_receive+0x5e8>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	1ad3      	subs	r3, r2, r3
 8010864:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010866:	4b23      	ldr	r3, [pc, #140]	; (80108f4 <tcp_receive+0x5ec>)
 8010868:	685b      	ldr	r3, [r3, #4]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d106      	bne.n	801087c <tcp_receive+0x574>
 801086e:	4b22      	ldr	r3, [pc, #136]	; (80108f8 <tcp_receive+0x5f0>)
 8010870:	f240 5294 	movw	r2, #1428	; 0x594
 8010874:	4921      	ldr	r1, [pc, #132]	; (80108fc <tcp_receive+0x5f4>)
 8010876:	4822      	ldr	r0, [pc, #136]	; (8010900 <tcp_receive+0x5f8>)
 8010878:	f009 fc28 	bl	801a0cc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801087e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010882:	4293      	cmp	r3, r2
 8010884:	d906      	bls.n	8010894 <tcp_receive+0x58c>
 8010886:	4b1c      	ldr	r3, [pc, #112]	; (80108f8 <tcp_receive+0x5f0>)
 8010888:	f240 5295 	movw	r2, #1429	; 0x595
 801088c:	491d      	ldr	r1, [pc, #116]	; (8010904 <tcp_receive+0x5fc>)
 801088e:	481c      	ldr	r0, [pc, #112]	; (8010900 <tcp_receive+0x5f8>)
 8010890:	f009 fc1c 	bl	801a0cc <iprintf>
      off = (u16_t)off32;
 8010894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010896:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801089a:	4b16      	ldr	r3, [pc, #88]	; (80108f4 <tcp_receive+0x5ec>)
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	891b      	ldrh	r3, [r3, #8]
 80108a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80108a4:	429a      	cmp	r2, r3
 80108a6:	d906      	bls.n	80108b6 <tcp_receive+0x5ae>
 80108a8:	4b13      	ldr	r3, [pc, #76]	; (80108f8 <tcp_receive+0x5f0>)
 80108aa:	f240 5297 	movw	r2, #1431	; 0x597
 80108ae:	4916      	ldr	r1, [pc, #88]	; (8010908 <tcp_receive+0x600>)
 80108b0:	4813      	ldr	r0, [pc, #76]	; (8010900 <tcp_receive+0x5f8>)
 80108b2:	f009 fc0b 	bl	801a0cc <iprintf>
      inseg.len -= off;
 80108b6:	4b0f      	ldr	r3, [pc, #60]	; (80108f4 <tcp_receive+0x5ec>)
 80108b8:	891a      	ldrh	r2, [r3, #8]
 80108ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80108be:	1ad3      	subs	r3, r2, r3
 80108c0:	b29a      	uxth	r2, r3
 80108c2:	4b0c      	ldr	r3, [pc, #48]	; (80108f4 <tcp_receive+0x5ec>)
 80108c4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80108c6:	4b0b      	ldr	r3, [pc, #44]	; (80108f4 <tcp_receive+0x5ec>)
 80108c8:	685b      	ldr	r3, [r3, #4]
 80108ca:	891a      	ldrh	r2, [r3, #8]
 80108cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80108d0:	1ad3      	subs	r3, r2, r3
 80108d2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80108d4:	e02a      	b.n	801092c <tcp_receive+0x624>
 80108d6:	bf00      	nop
 80108d8:	0801e808 	.word	0x0801e808
 80108dc:	0801e810 	.word	0x0801e810
 80108e0:	200114bc 	.word	0x200114bc
 80108e4:	200114b8 	.word	0x200114b8
 80108e8:	2001147c 	.word	0x2001147c
 80108ec:	200114be 	.word	0x200114be
 80108f0:	200114b4 	.word	0x200114b4
 80108f4:	20011494 	.word	0x20011494
 80108f8:	0801e4a0 	.word	0x0801e4a0
 80108fc:	0801e818 	.word	0x0801e818
 8010900:	0801e4ec 	.word	0x0801e4ec
 8010904:	0801e828 	.word	0x0801e828
 8010908:	0801e838 	.word	0x0801e838
        off -= p->len;
 801090c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801090e:	895b      	ldrh	r3, [r3, #10]
 8010910:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010914:	1ad3      	subs	r3, r2, r3
 8010916:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801091a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801091c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801091e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010922:	2200      	movs	r2, #0
 8010924:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801092c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801092e:	895b      	ldrh	r3, [r3, #10]
 8010930:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010934:	429a      	cmp	r2, r3
 8010936:	d8e9      	bhi.n	801090c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010938:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801093c:	4619      	mov	r1, r3
 801093e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010940:	f7fc f89e 	bl	800ca80 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010948:	4a91      	ldr	r2, [pc, #580]	; (8010b90 <tcp_receive+0x888>)
 801094a:	6013      	str	r3, [r2, #0]
 801094c:	4b91      	ldr	r3, [pc, #580]	; (8010b94 <tcp_receive+0x88c>)
 801094e:	68db      	ldr	r3, [r3, #12]
 8010950:	4a8f      	ldr	r2, [pc, #572]	; (8010b90 <tcp_receive+0x888>)
 8010952:	6812      	ldr	r2, [r2, #0]
 8010954:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010956:	e00d      	b.n	8010974 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010958:	4b8d      	ldr	r3, [pc, #564]	; (8010b90 <tcp_receive+0x888>)
 801095a:	681a      	ldr	r2, [r3, #0]
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010960:	1ad3      	subs	r3, r2, r3
 8010962:	2b00      	cmp	r3, #0
 8010964:	da06      	bge.n	8010974 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	8b5b      	ldrh	r3, [r3, #26]
 801096a:	f043 0302 	orr.w	r3, r3, #2
 801096e:	b29a      	uxth	r2, r3
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010974:	4b86      	ldr	r3, [pc, #536]	; (8010b90 <tcp_receive+0x888>)
 8010976:	681a      	ldr	r2, [r3, #0]
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801097c:	1ad3      	subs	r3, r2, r3
 801097e:	2b00      	cmp	r3, #0
 8010980:	f2c0 842a 	blt.w	80111d8 <tcp_receive+0xed0>
 8010984:	4b82      	ldr	r3, [pc, #520]	; (8010b90 <tcp_receive+0x888>)
 8010986:	681a      	ldr	r2, [r3, #0]
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801098c:	6879      	ldr	r1, [r7, #4]
 801098e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010990:	440b      	add	r3, r1
 8010992:	1ad3      	subs	r3, r2, r3
 8010994:	3301      	adds	r3, #1
 8010996:	2b00      	cmp	r3, #0
 8010998:	f300 841e 	bgt.w	80111d8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80109a0:	4b7b      	ldr	r3, [pc, #492]	; (8010b90 <tcp_receive+0x888>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	f040 829a 	bne.w	8010ede <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80109aa:	4b7a      	ldr	r3, [pc, #488]	; (8010b94 <tcp_receive+0x88c>)
 80109ac:	891c      	ldrh	r4, [r3, #8]
 80109ae:	4b79      	ldr	r3, [pc, #484]	; (8010b94 <tcp_receive+0x88c>)
 80109b0:	68db      	ldr	r3, [r3, #12]
 80109b2:	899b      	ldrh	r3, [r3, #12]
 80109b4:	b29b      	uxth	r3, r3
 80109b6:	4618      	mov	r0, r3
 80109b8:	f7fa fcf6 	bl	800b3a8 <lwip_htons>
 80109bc:	4603      	mov	r3, r0
 80109be:	b2db      	uxtb	r3, r3
 80109c0:	f003 0303 	and.w	r3, r3, #3
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d001      	beq.n	80109cc <tcp_receive+0x6c4>
 80109c8:	2301      	movs	r3, #1
 80109ca:	e000      	b.n	80109ce <tcp_receive+0x6c6>
 80109cc:	2300      	movs	r3, #0
 80109ce:	4423      	add	r3, r4
 80109d0:	b29a      	uxth	r2, r3
 80109d2:	4b71      	ldr	r3, [pc, #452]	; (8010b98 <tcp_receive+0x890>)
 80109d4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80109da:	4b6f      	ldr	r3, [pc, #444]	; (8010b98 <tcp_receive+0x890>)
 80109dc:	881b      	ldrh	r3, [r3, #0]
 80109de:	429a      	cmp	r2, r3
 80109e0:	d275      	bcs.n	8010ace <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80109e2:	4b6c      	ldr	r3, [pc, #432]	; (8010b94 <tcp_receive+0x88c>)
 80109e4:	68db      	ldr	r3, [r3, #12]
 80109e6:	899b      	ldrh	r3, [r3, #12]
 80109e8:	b29b      	uxth	r3, r3
 80109ea:	4618      	mov	r0, r3
 80109ec:	f7fa fcdc 	bl	800b3a8 <lwip_htons>
 80109f0:	4603      	mov	r3, r0
 80109f2:	b2db      	uxtb	r3, r3
 80109f4:	f003 0301 	and.w	r3, r3, #1
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d01f      	beq.n	8010a3c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80109fc:	4b65      	ldr	r3, [pc, #404]	; (8010b94 <tcp_receive+0x88c>)
 80109fe:	68db      	ldr	r3, [r3, #12]
 8010a00:	899b      	ldrh	r3, [r3, #12]
 8010a02:	b29b      	uxth	r3, r3
 8010a04:	b21b      	sxth	r3, r3
 8010a06:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010a0a:	b21c      	sxth	r4, r3
 8010a0c:	4b61      	ldr	r3, [pc, #388]	; (8010b94 <tcp_receive+0x88c>)
 8010a0e:	68db      	ldr	r3, [r3, #12]
 8010a10:	899b      	ldrh	r3, [r3, #12]
 8010a12:	b29b      	uxth	r3, r3
 8010a14:	4618      	mov	r0, r3
 8010a16:	f7fa fcc7 	bl	800b3a8 <lwip_htons>
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	b2db      	uxtb	r3, r3
 8010a1e:	b29b      	uxth	r3, r3
 8010a20:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010a24:	b29b      	uxth	r3, r3
 8010a26:	4618      	mov	r0, r3
 8010a28:	f7fa fcbe 	bl	800b3a8 <lwip_htons>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	b21b      	sxth	r3, r3
 8010a30:	4323      	orrs	r3, r4
 8010a32:	b21a      	sxth	r2, r3
 8010a34:	4b57      	ldr	r3, [pc, #348]	; (8010b94 <tcp_receive+0x88c>)
 8010a36:	68db      	ldr	r3, [r3, #12]
 8010a38:	b292      	uxth	r2, r2
 8010a3a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010a40:	4b54      	ldr	r3, [pc, #336]	; (8010b94 <tcp_receive+0x88c>)
 8010a42:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010a44:	4b53      	ldr	r3, [pc, #332]	; (8010b94 <tcp_receive+0x88c>)
 8010a46:	68db      	ldr	r3, [r3, #12]
 8010a48:	899b      	ldrh	r3, [r3, #12]
 8010a4a:	b29b      	uxth	r3, r3
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f7fa fcab 	bl	800b3a8 <lwip_htons>
 8010a52:	4603      	mov	r3, r0
 8010a54:	b2db      	uxtb	r3, r3
 8010a56:	f003 0302 	and.w	r3, r3, #2
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d005      	beq.n	8010a6a <tcp_receive+0x762>
            inseg.len -= 1;
 8010a5e:	4b4d      	ldr	r3, [pc, #308]	; (8010b94 <tcp_receive+0x88c>)
 8010a60:	891b      	ldrh	r3, [r3, #8]
 8010a62:	3b01      	subs	r3, #1
 8010a64:	b29a      	uxth	r2, r3
 8010a66:	4b4b      	ldr	r3, [pc, #300]	; (8010b94 <tcp_receive+0x88c>)
 8010a68:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010a6a:	4b4a      	ldr	r3, [pc, #296]	; (8010b94 <tcp_receive+0x88c>)
 8010a6c:	685b      	ldr	r3, [r3, #4]
 8010a6e:	4a49      	ldr	r2, [pc, #292]	; (8010b94 <tcp_receive+0x88c>)
 8010a70:	8912      	ldrh	r2, [r2, #8]
 8010a72:	4611      	mov	r1, r2
 8010a74:	4618      	mov	r0, r3
 8010a76:	f7fb ff03 	bl	800c880 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010a7a:	4b46      	ldr	r3, [pc, #280]	; (8010b94 <tcp_receive+0x88c>)
 8010a7c:	891c      	ldrh	r4, [r3, #8]
 8010a7e:	4b45      	ldr	r3, [pc, #276]	; (8010b94 <tcp_receive+0x88c>)
 8010a80:	68db      	ldr	r3, [r3, #12]
 8010a82:	899b      	ldrh	r3, [r3, #12]
 8010a84:	b29b      	uxth	r3, r3
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7fa fc8e 	bl	800b3a8 <lwip_htons>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	b2db      	uxtb	r3, r3
 8010a90:	f003 0303 	and.w	r3, r3, #3
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d001      	beq.n	8010a9c <tcp_receive+0x794>
 8010a98:	2301      	movs	r3, #1
 8010a9a:	e000      	b.n	8010a9e <tcp_receive+0x796>
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	4423      	add	r3, r4
 8010aa0:	b29a      	uxth	r2, r3
 8010aa2:	4b3d      	ldr	r3, [pc, #244]	; (8010b98 <tcp_receive+0x890>)
 8010aa4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010aa6:	4b3c      	ldr	r3, [pc, #240]	; (8010b98 <tcp_receive+0x890>)
 8010aa8:	881b      	ldrh	r3, [r3, #0]
 8010aaa:	461a      	mov	r2, r3
 8010aac:	4b38      	ldr	r3, [pc, #224]	; (8010b90 <tcp_receive+0x888>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	441a      	add	r2, r3
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ab6:	6879      	ldr	r1, [r7, #4]
 8010ab8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010aba:	440b      	add	r3, r1
 8010abc:	429a      	cmp	r2, r3
 8010abe:	d006      	beq.n	8010ace <tcp_receive+0x7c6>
 8010ac0:	4b36      	ldr	r3, [pc, #216]	; (8010b9c <tcp_receive+0x894>)
 8010ac2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010ac6:	4936      	ldr	r1, [pc, #216]	; (8010ba0 <tcp_receive+0x898>)
 8010ac8:	4836      	ldr	r0, [pc, #216]	; (8010ba4 <tcp_receive+0x89c>)
 8010aca:	f009 faff 	bl	801a0cc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	f000 80e7 	beq.w	8010ca6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010ad8:	4b2e      	ldr	r3, [pc, #184]	; (8010b94 <tcp_receive+0x88c>)
 8010ada:	68db      	ldr	r3, [r3, #12]
 8010adc:	899b      	ldrh	r3, [r3, #12]
 8010ade:	b29b      	uxth	r3, r3
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f7fa fc61 	bl	800b3a8 <lwip_htons>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	b2db      	uxtb	r3, r3
 8010aea:	f003 0301 	and.w	r3, r3, #1
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d010      	beq.n	8010b14 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010af2:	e00a      	b.n	8010b0a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010af8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010afe:	681a      	ldr	r2, [r3, #0]
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010b04:	68f8      	ldr	r0, [r7, #12]
 8010b06:	f7fd fcc4 	bl	800e492 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d1f0      	bne.n	8010af4 <tcp_receive+0x7ec>
 8010b12:	e0c8      	b.n	8010ca6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b18:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010b1a:	e052      	b.n	8010bc2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b1e:	68db      	ldr	r3, [r3, #12]
 8010b20:	899b      	ldrh	r3, [r3, #12]
 8010b22:	b29b      	uxth	r3, r3
 8010b24:	4618      	mov	r0, r3
 8010b26:	f7fa fc3f 	bl	800b3a8 <lwip_htons>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	b2db      	uxtb	r3, r3
 8010b2e:	f003 0301 	and.w	r3, r3, #1
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d03d      	beq.n	8010bb2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010b36:	4b17      	ldr	r3, [pc, #92]	; (8010b94 <tcp_receive+0x88c>)
 8010b38:	68db      	ldr	r3, [r3, #12]
 8010b3a:	899b      	ldrh	r3, [r3, #12]
 8010b3c:	b29b      	uxth	r3, r3
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f7fa fc32 	bl	800b3a8 <lwip_htons>
 8010b44:	4603      	mov	r3, r0
 8010b46:	b2db      	uxtb	r3, r3
 8010b48:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d130      	bne.n	8010bb2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010b50:	4b10      	ldr	r3, [pc, #64]	; (8010b94 <tcp_receive+0x88c>)
 8010b52:	68db      	ldr	r3, [r3, #12]
 8010b54:	899b      	ldrh	r3, [r3, #12]
 8010b56:	b29c      	uxth	r4, r3
 8010b58:	2001      	movs	r0, #1
 8010b5a:	f7fa fc25 	bl	800b3a8 <lwip_htons>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	461a      	mov	r2, r3
 8010b62:	4b0c      	ldr	r3, [pc, #48]	; (8010b94 <tcp_receive+0x88c>)
 8010b64:	68db      	ldr	r3, [r3, #12]
 8010b66:	4322      	orrs	r2, r4
 8010b68:	b292      	uxth	r2, r2
 8010b6a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010b6c:	4b09      	ldr	r3, [pc, #36]	; (8010b94 <tcp_receive+0x88c>)
 8010b6e:	891c      	ldrh	r4, [r3, #8]
 8010b70:	4b08      	ldr	r3, [pc, #32]	; (8010b94 <tcp_receive+0x88c>)
 8010b72:	68db      	ldr	r3, [r3, #12]
 8010b74:	899b      	ldrh	r3, [r3, #12]
 8010b76:	b29b      	uxth	r3, r3
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7fa fc15 	bl	800b3a8 <lwip_htons>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	b2db      	uxtb	r3, r3
 8010b82:	f003 0303 	and.w	r3, r3, #3
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d00e      	beq.n	8010ba8 <tcp_receive+0x8a0>
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	e00d      	b.n	8010baa <tcp_receive+0x8a2>
 8010b8e:	bf00      	nop
 8010b90:	200114b4 	.word	0x200114b4
 8010b94:	20011494 	.word	0x20011494
 8010b98:	200114be 	.word	0x200114be
 8010b9c:	0801e4a0 	.word	0x0801e4a0
 8010ba0:	0801e848 	.word	0x0801e848
 8010ba4:	0801e4ec 	.word	0x0801e4ec
 8010ba8:	2300      	movs	r3, #0
 8010baa:	4423      	add	r3, r4
 8010bac:	b29a      	uxth	r2, r3
 8010bae:	4b98      	ldr	r3, [pc, #608]	; (8010e10 <tcp_receive+0xb08>)
 8010bb0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bb4:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010bbc:	6938      	ldr	r0, [r7, #16]
 8010bbe:	f7fd fc68 	bl	800e492 <tcp_seg_free>
            while (next &&
 8010bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d00e      	beq.n	8010be6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010bc8:	4b91      	ldr	r3, [pc, #580]	; (8010e10 <tcp_receive+0xb08>)
 8010bca:	881b      	ldrh	r3, [r3, #0]
 8010bcc:	461a      	mov	r2, r3
 8010bce:	4b91      	ldr	r3, [pc, #580]	; (8010e14 <tcp_receive+0xb0c>)
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	441a      	add	r2, r3
 8010bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bd6:	68db      	ldr	r3, [r3, #12]
 8010bd8:	685b      	ldr	r3, [r3, #4]
 8010bda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010bdc:	8909      	ldrh	r1, [r1, #8]
 8010bde:	440b      	add	r3, r1
 8010be0:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	da9a      	bge.n	8010b1c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d059      	beq.n	8010ca0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8010bec:	4b88      	ldr	r3, [pc, #544]	; (8010e10 <tcp_receive+0xb08>)
 8010bee:	881b      	ldrh	r3, [r3, #0]
 8010bf0:	461a      	mov	r2, r3
 8010bf2:	4b88      	ldr	r3, [pc, #544]	; (8010e14 <tcp_receive+0xb0c>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	441a      	add	r2, r3
 8010bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bfa:	68db      	ldr	r3, [r3, #12]
 8010bfc:	685b      	ldr	r3, [r3, #4]
 8010bfe:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	dd4d      	ble.n	8010ca0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c06:	68db      	ldr	r3, [r3, #12]
 8010c08:	685b      	ldr	r3, [r3, #4]
 8010c0a:	b29a      	uxth	r2, r3
 8010c0c:	4b81      	ldr	r3, [pc, #516]	; (8010e14 <tcp_receive+0xb0c>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	1ad3      	subs	r3, r2, r3
 8010c14:	b29a      	uxth	r2, r3
 8010c16:	4b80      	ldr	r3, [pc, #512]	; (8010e18 <tcp_receive+0xb10>)
 8010c18:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010c1a:	4b7f      	ldr	r3, [pc, #508]	; (8010e18 <tcp_receive+0xb10>)
 8010c1c:	68db      	ldr	r3, [r3, #12]
 8010c1e:	899b      	ldrh	r3, [r3, #12]
 8010c20:	b29b      	uxth	r3, r3
 8010c22:	4618      	mov	r0, r3
 8010c24:	f7fa fbc0 	bl	800b3a8 <lwip_htons>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	b2db      	uxtb	r3, r3
 8010c2c:	f003 0302 	and.w	r3, r3, #2
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d005      	beq.n	8010c40 <tcp_receive+0x938>
                inseg.len -= 1;
 8010c34:	4b78      	ldr	r3, [pc, #480]	; (8010e18 <tcp_receive+0xb10>)
 8010c36:	891b      	ldrh	r3, [r3, #8]
 8010c38:	3b01      	subs	r3, #1
 8010c3a:	b29a      	uxth	r2, r3
 8010c3c:	4b76      	ldr	r3, [pc, #472]	; (8010e18 <tcp_receive+0xb10>)
 8010c3e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010c40:	4b75      	ldr	r3, [pc, #468]	; (8010e18 <tcp_receive+0xb10>)
 8010c42:	685b      	ldr	r3, [r3, #4]
 8010c44:	4a74      	ldr	r2, [pc, #464]	; (8010e18 <tcp_receive+0xb10>)
 8010c46:	8912      	ldrh	r2, [r2, #8]
 8010c48:	4611      	mov	r1, r2
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7fb fe18 	bl	800c880 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010c50:	4b71      	ldr	r3, [pc, #452]	; (8010e18 <tcp_receive+0xb10>)
 8010c52:	891c      	ldrh	r4, [r3, #8]
 8010c54:	4b70      	ldr	r3, [pc, #448]	; (8010e18 <tcp_receive+0xb10>)
 8010c56:	68db      	ldr	r3, [r3, #12]
 8010c58:	899b      	ldrh	r3, [r3, #12]
 8010c5a:	b29b      	uxth	r3, r3
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f7fa fba3 	bl	800b3a8 <lwip_htons>
 8010c62:	4603      	mov	r3, r0
 8010c64:	b2db      	uxtb	r3, r3
 8010c66:	f003 0303 	and.w	r3, r3, #3
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d001      	beq.n	8010c72 <tcp_receive+0x96a>
 8010c6e:	2301      	movs	r3, #1
 8010c70:	e000      	b.n	8010c74 <tcp_receive+0x96c>
 8010c72:	2300      	movs	r3, #0
 8010c74:	4423      	add	r3, r4
 8010c76:	b29a      	uxth	r2, r3
 8010c78:	4b65      	ldr	r3, [pc, #404]	; (8010e10 <tcp_receive+0xb08>)
 8010c7a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010c7c:	4b64      	ldr	r3, [pc, #400]	; (8010e10 <tcp_receive+0xb08>)
 8010c7e:	881b      	ldrh	r3, [r3, #0]
 8010c80:	461a      	mov	r2, r3
 8010c82:	4b64      	ldr	r3, [pc, #400]	; (8010e14 <tcp_receive+0xb0c>)
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	441a      	add	r2, r3
 8010c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c8a:	68db      	ldr	r3, [r3, #12]
 8010c8c:	685b      	ldr	r3, [r3, #4]
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	d006      	beq.n	8010ca0 <tcp_receive+0x998>
 8010c92:	4b62      	ldr	r3, [pc, #392]	; (8010e1c <tcp_receive+0xb14>)
 8010c94:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010c98:	4961      	ldr	r1, [pc, #388]	; (8010e20 <tcp_receive+0xb18>)
 8010c9a:	4862      	ldr	r0, [pc, #392]	; (8010e24 <tcp_receive+0xb1c>)
 8010c9c:	f009 fa16 	bl	801a0cc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010ca4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010ca6:	4b5a      	ldr	r3, [pc, #360]	; (8010e10 <tcp_receive+0xb08>)
 8010ca8:	881b      	ldrh	r3, [r3, #0]
 8010caa:	461a      	mov	r2, r3
 8010cac:	4b59      	ldr	r3, [pc, #356]	; (8010e14 <tcp_receive+0xb0c>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	441a      	add	r2, r3
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010cba:	4b55      	ldr	r3, [pc, #340]	; (8010e10 <tcp_receive+0xb08>)
 8010cbc:	881b      	ldrh	r3, [r3, #0]
 8010cbe:	429a      	cmp	r2, r3
 8010cc0:	d206      	bcs.n	8010cd0 <tcp_receive+0x9c8>
 8010cc2:	4b56      	ldr	r3, [pc, #344]	; (8010e1c <tcp_receive+0xb14>)
 8010cc4:	f240 6207 	movw	r2, #1543	; 0x607
 8010cc8:	4957      	ldr	r1, [pc, #348]	; (8010e28 <tcp_receive+0xb20>)
 8010cca:	4856      	ldr	r0, [pc, #344]	; (8010e24 <tcp_receive+0xb1c>)
 8010ccc:	f009 f9fe 	bl	801a0cc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010cd4:	4b4e      	ldr	r3, [pc, #312]	; (8010e10 <tcp_receive+0xb08>)
 8010cd6:	881b      	ldrh	r3, [r3, #0]
 8010cd8:	1ad3      	subs	r3, r2, r3
 8010cda:	b29a      	uxth	r2, r3
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f7fc feb1 	bl	800da48 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010ce6:	4b4c      	ldr	r3, [pc, #304]	; (8010e18 <tcp_receive+0xb10>)
 8010ce8:	685b      	ldr	r3, [r3, #4]
 8010cea:	891b      	ldrh	r3, [r3, #8]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d006      	beq.n	8010cfe <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8010cf0:	4b49      	ldr	r3, [pc, #292]	; (8010e18 <tcp_receive+0xb10>)
 8010cf2:	685b      	ldr	r3, [r3, #4]
 8010cf4:	4a4d      	ldr	r2, [pc, #308]	; (8010e2c <tcp_receive+0xb24>)
 8010cf6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010cf8:	4b47      	ldr	r3, [pc, #284]	; (8010e18 <tcp_receive+0xb10>)
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010cfe:	4b46      	ldr	r3, [pc, #280]	; (8010e18 <tcp_receive+0xb10>)
 8010d00:	68db      	ldr	r3, [r3, #12]
 8010d02:	899b      	ldrh	r3, [r3, #12]
 8010d04:	b29b      	uxth	r3, r3
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7fa fb4e 	bl	800b3a8 <lwip_htons>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	b2db      	uxtb	r3, r3
 8010d10:	f003 0301 	and.w	r3, r3, #1
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	f000 80b8 	beq.w	8010e8a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010d1a:	4b45      	ldr	r3, [pc, #276]	; (8010e30 <tcp_receive+0xb28>)
 8010d1c:	781b      	ldrb	r3, [r3, #0]
 8010d1e:	f043 0320 	orr.w	r3, r3, #32
 8010d22:	b2da      	uxtb	r2, r3
 8010d24:	4b42      	ldr	r3, [pc, #264]	; (8010e30 <tcp_receive+0xb28>)
 8010d26:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010d28:	e0af      	b.n	8010e8a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d2e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d34:	68db      	ldr	r3, [r3, #12]
 8010d36:	685b      	ldr	r3, [r3, #4]
 8010d38:	4a36      	ldr	r2, [pc, #216]	; (8010e14 <tcp_receive+0xb0c>)
 8010d3a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	891b      	ldrh	r3, [r3, #8]
 8010d40:	461c      	mov	r4, r3
 8010d42:	68bb      	ldr	r3, [r7, #8]
 8010d44:	68db      	ldr	r3, [r3, #12]
 8010d46:	899b      	ldrh	r3, [r3, #12]
 8010d48:	b29b      	uxth	r3, r3
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f7fa fb2c 	bl	800b3a8 <lwip_htons>
 8010d50:	4603      	mov	r3, r0
 8010d52:	b2db      	uxtb	r3, r3
 8010d54:	f003 0303 	and.w	r3, r3, #3
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d001      	beq.n	8010d60 <tcp_receive+0xa58>
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	e000      	b.n	8010d62 <tcp_receive+0xa5a>
 8010d60:	2300      	movs	r3, #0
 8010d62:	191a      	adds	r2, r3, r4
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d68:	441a      	add	r2, r3
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d72:	461c      	mov	r4, r3
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	891b      	ldrh	r3, [r3, #8]
 8010d78:	461d      	mov	r5, r3
 8010d7a:	68bb      	ldr	r3, [r7, #8]
 8010d7c:	68db      	ldr	r3, [r3, #12]
 8010d7e:	899b      	ldrh	r3, [r3, #12]
 8010d80:	b29b      	uxth	r3, r3
 8010d82:	4618      	mov	r0, r3
 8010d84:	f7fa fb10 	bl	800b3a8 <lwip_htons>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	b2db      	uxtb	r3, r3
 8010d8c:	f003 0303 	and.w	r3, r3, #3
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d001      	beq.n	8010d98 <tcp_receive+0xa90>
 8010d94:	2301      	movs	r3, #1
 8010d96:	e000      	b.n	8010d9a <tcp_receive+0xa92>
 8010d98:	2300      	movs	r3, #0
 8010d9a:	442b      	add	r3, r5
 8010d9c:	429c      	cmp	r4, r3
 8010d9e:	d206      	bcs.n	8010dae <tcp_receive+0xaa6>
 8010da0:	4b1e      	ldr	r3, [pc, #120]	; (8010e1c <tcp_receive+0xb14>)
 8010da2:	f240 622b 	movw	r2, #1579	; 0x62b
 8010da6:	4923      	ldr	r1, [pc, #140]	; (8010e34 <tcp_receive+0xb2c>)
 8010da8:	481e      	ldr	r0, [pc, #120]	; (8010e24 <tcp_receive+0xb1c>)
 8010daa:	f009 f98f 	bl	801a0cc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010dae:	68bb      	ldr	r3, [r7, #8]
 8010db0:	891b      	ldrh	r3, [r3, #8]
 8010db2:	461c      	mov	r4, r3
 8010db4:	68bb      	ldr	r3, [r7, #8]
 8010db6:	68db      	ldr	r3, [r3, #12]
 8010db8:	899b      	ldrh	r3, [r3, #12]
 8010dba:	b29b      	uxth	r3, r3
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	f7fa faf3 	bl	800b3a8 <lwip_htons>
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	b2db      	uxtb	r3, r3
 8010dc6:	f003 0303 	and.w	r3, r3, #3
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d001      	beq.n	8010dd2 <tcp_receive+0xaca>
 8010dce:	2301      	movs	r3, #1
 8010dd0:	e000      	b.n	8010dd4 <tcp_receive+0xacc>
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	1919      	adds	r1, r3, r4
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010dda:	b28b      	uxth	r3, r1
 8010ddc:	1ad3      	subs	r3, r2, r3
 8010dde:	b29a      	uxth	r2, r3
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	f7fc fe2f 	bl	800da48 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010dea:	68bb      	ldr	r3, [r7, #8]
 8010dec:	685b      	ldr	r3, [r3, #4]
 8010dee:	891b      	ldrh	r3, [r3, #8]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d028      	beq.n	8010e46 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010df4:	4b0d      	ldr	r3, [pc, #52]	; (8010e2c <tcp_receive+0xb24>)
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d01d      	beq.n	8010e38 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8010dfc:	4b0b      	ldr	r3, [pc, #44]	; (8010e2c <tcp_receive+0xb24>)
 8010dfe:	681a      	ldr	r2, [r3, #0]
 8010e00:	68bb      	ldr	r3, [r7, #8]
 8010e02:	685b      	ldr	r3, [r3, #4]
 8010e04:	4619      	mov	r1, r3
 8010e06:	4610      	mov	r0, r2
 8010e08:	f7fb ff8e 	bl	800cd28 <pbuf_cat>
 8010e0c:	e018      	b.n	8010e40 <tcp_receive+0xb38>
 8010e0e:	bf00      	nop
 8010e10:	200114be 	.word	0x200114be
 8010e14:	200114b4 	.word	0x200114b4
 8010e18:	20011494 	.word	0x20011494
 8010e1c:	0801e4a0 	.word	0x0801e4a0
 8010e20:	0801e880 	.word	0x0801e880
 8010e24:	0801e4ec 	.word	0x0801e4ec
 8010e28:	0801e8bc 	.word	0x0801e8bc
 8010e2c:	200114c4 	.word	0x200114c4
 8010e30:	200114c1 	.word	0x200114c1
 8010e34:	0801e8dc 	.word	0x0801e8dc
            } else {
              recv_data = cseg->p;
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	685b      	ldr	r3, [r3, #4]
 8010e3c:	4a70      	ldr	r2, [pc, #448]	; (8011000 <tcp_receive+0xcf8>)
 8010e3e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010e40:	68bb      	ldr	r3, [r7, #8]
 8010e42:	2200      	movs	r2, #0
 8010e44:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010e46:	68bb      	ldr	r3, [r7, #8]
 8010e48:	68db      	ldr	r3, [r3, #12]
 8010e4a:	899b      	ldrh	r3, [r3, #12]
 8010e4c:	b29b      	uxth	r3, r3
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f7fa faaa 	bl	800b3a8 <lwip_htons>
 8010e54:	4603      	mov	r3, r0
 8010e56:	b2db      	uxtb	r3, r3
 8010e58:	f003 0301 	and.w	r3, r3, #1
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d00d      	beq.n	8010e7c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010e60:	4b68      	ldr	r3, [pc, #416]	; (8011004 <tcp_receive+0xcfc>)
 8010e62:	781b      	ldrb	r3, [r3, #0]
 8010e64:	f043 0320 	orr.w	r3, r3, #32
 8010e68:	b2da      	uxtb	r2, r3
 8010e6a:	4b66      	ldr	r3, [pc, #408]	; (8011004 <tcp_receive+0xcfc>)
 8010e6c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	7d1b      	ldrb	r3, [r3, #20]
 8010e72:	2b04      	cmp	r3, #4
 8010e74:	d102      	bne.n	8010e7c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	2207      	movs	r2, #7
 8010e7a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010e7c:	68bb      	ldr	r3, [r7, #8]
 8010e7e:	681a      	ldr	r2, [r3, #0]
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010e84:	68b8      	ldr	r0, [r7, #8]
 8010e86:	f7fd fb04 	bl	800e492 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d008      	beq.n	8010ea4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e96:	68db      	ldr	r3, [r3, #12]
 8010e98:	685a      	ldr	r2, [r3, #4]
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010e9e:	429a      	cmp	r2, r3
 8010ea0:	f43f af43 	beq.w	8010d2a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	8b5b      	ldrh	r3, [r3, #26]
 8010ea8:	f003 0301 	and.w	r3, r3, #1
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d00e      	beq.n	8010ece <tcp_receive+0xbc6>
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	8b5b      	ldrh	r3, [r3, #26]
 8010eb4:	f023 0301 	bic.w	r3, r3, #1
 8010eb8:	b29a      	uxth	r2, r3
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	835a      	strh	r2, [r3, #26]
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	8b5b      	ldrh	r3, [r3, #26]
 8010ec2:	f043 0302 	orr.w	r3, r3, #2
 8010ec6:	b29a      	uxth	r2, r3
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010ecc:	e188      	b.n	80111e0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	8b5b      	ldrh	r3, [r3, #26]
 8010ed2:	f043 0301 	orr.w	r3, r3, #1
 8010ed6:	b29a      	uxth	r2, r3
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010edc:	e180      	b.n	80111e0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d106      	bne.n	8010ef4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010ee6:	4848      	ldr	r0, [pc, #288]	; (8011008 <tcp_receive+0xd00>)
 8010ee8:	f7fd faec 	bl	800e4c4 <tcp_seg_copy>
 8010eec:	4602      	mov	r2, r0
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	675a      	str	r2, [r3, #116]	; 0x74
 8010ef2:	e16d      	b.n	80111d0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010efc:	63bb      	str	r3, [r7, #56]	; 0x38
 8010efe:	e157      	b.n	80111b0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8010f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f02:	68db      	ldr	r3, [r3, #12]
 8010f04:	685a      	ldr	r2, [r3, #4]
 8010f06:	4b41      	ldr	r3, [pc, #260]	; (801100c <tcp_receive+0xd04>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	429a      	cmp	r2, r3
 8010f0c:	d11d      	bne.n	8010f4a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010f0e:	4b3e      	ldr	r3, [pc, #248]	; (8011008 <tcp_receive+0xd00>)
 8010f10:	891a      	ldrh	r2, [r3, #8]
 8010f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f14:	891b      	ldrh	r3, [r3, #8]
 8010f16:	429a      	cmp	r2, r3
 8010f18:	f240 814f 	bls.w	80111ba <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010f1c:	483a      	ldr	r0, [pc, #232]	; (8011008 <tcp_receive+0xd00>)
 8010f1e:	f7fd fad1 	bl	800e4c4 <tcp_seg_copy>
 8010f22:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010f24:	697b      	ldr	r3, [r7, #20]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	f000 8149 	beq.w	80111be <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8010f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d003      	beq.n	8010f3a <tcp_receive+0xc32>
                    prev->next = cseg;
 8010f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f34:	697a      	ldr	r2, [r7, #20]
 8010f36:	601a      	str	r2, [r3, #0]
 8010f38:	e002      	b.n	8010f40 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	697a      	ldr	r2, [r7, #20]
 8010f3e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010f40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010f42:	6978      	ldr	r0, [r7, #20]
 8010f44:	f7ff f8dc 	bl	8010100 <tcp_oos_insert_segment>
                }
                break;
 8010f48:	e139      	b.n	80111be <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d117      	bne.n	8010f80 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010f50:	4b2e      	ldr	r3, [pc, #184]	; (801100c <tcp_receive+0xd04>)
 8010f52:	681a      	ldr	r2, [r3, #0]
 8010f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f56:	68db      	ldr	r3, [r3, #12]
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	1ad3      	subs	r3, r2, r3
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	da57      	bge.n	8011010 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010f60:	4829      	ldr	r0, [pc, #164]	; (8011008 <tcp_receive+0xd00>)
 8010f62:	f7fd faaf 	bl	800e4c4 <tcp_seg_copy>
 8010f66:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010f68:	69bb      	ldr	r3, [r7, #24]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	f000 8129 	beq.w	80111c2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	69ba      	ldr	r2, [r7, #24]
 8010f74:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010f76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010f78:	69b8      	ldr	r0, [r7, #24]
 8010f7a:	f7ff f8c1 	bl	8010100 <tcp_oos_insert_segment>
                  }
                  break;
 8010f7e:	e120      	b.n	80111c2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010f80:	4b22      	ldr	r3, [pc, #136]	; (801100c <tcp_receive+0xd04>)
 8010f82:	681a      	ldr	r2, [r3, #0]
 8010f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f86:	68db      	ldr	r3, [r3, #12]
 8010f88:	685b      	ldr	r3, [r3, #4]
 8010f8a:	1ad3      	subs	r3, r2, r3
 8010f8c:	3b01      	subs	r3, #1
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	db3e      	blt.n	8011010 <tcp_receive+0xd08>
 8010f92:	4b1e      	ldr	r3, [pc, #120]	; (801100c <tcp_receive+0xd04>)
 8010f94:	681a      	ldr	r2, [r3, #0]
 8010f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f98:	68db      	ldr	r3, [r3, #12]
 8010f9a:	685b      	ldr	r3, [r3, #4]
 8010f9c:	1ad3      	subs	r3, r2, r3
 8010f9e:	3301      	adds	r3, #1
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	dc35      	bgt.n	8011010 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010fa4:	4818      	ldr	r0, [pc, #96]	; (8011008 <tcp_receive+0xd00>)
 8010fa6:	f7fd fa8d 	bl	800e4c4 <tcp_seg_copy>
 8010faa:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010fac:	69fb      	ldr	r3, [r7, #28]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	f000 8109 	beq.w	80111c6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fb6:	68db      	ldr	r3, [r3, #12]
 8010fb8:	685b      	ldr	r3, [r3, #4]
 8010fba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010fbc:	8912      	ldrh	r2, [r2, #8]
 8010fbe:	441a      	add	r2, r3
 8010fc0:	4b12      	ldr	r3, [pc, #72]	; (801100c <tcp_receive+0xd04>)
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	1ad3      	subs	r3, r2, r3
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	dd12      	ble.n	8010ff0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010fca:	4b10      	ldr	r3, [pc, #64]	; (801100c <tcp_receive+0xd04>)
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	b29a      	uxth	r2, r3
 8010fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fd2:	68db      	ldr	r3, [r3, #12]
 8010fd4:	685b      	ldr	r3, [r3, #4]
 8010fd6:	b29b      	uxth	r3, r3
 8010fd8:	1ad3      	subs	r3, r2, r3
 8010fda:	b29a      	uxth	r2, r3
 8010fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fde:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fe2:	685a      	ldr	r2, [r3, #4]
 8010fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fe6:	891b      	ldrh	r3, [r3, #8]
 8010fe8:	4619      	mov	r1, r3
 8010fea:	4610      	mov	r0, r2
 8010fec:	f7fb fc48 	bl	800c880 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ff2:	69fa      	ldr	r2, [r7, #28]
 8010ff4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010ff6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010ff8:	69f8      	ldr	r0, [r7, #28]
 8010ffa:	f7ff f881 	bl	8010100 <tcp_oos_insert_segment>
                  }
                  break;
 8010ffe:	e0e2      	b.n	80111c6 <tcp_receive+0xebe>
 8011000:	200114c4 	.word	0x200114c4
 8011004:	200114c1 	.word	0x200114c1
 8011008:	20011494 	.word	0x20011494
 801100c:	200114b4 	.word	0x200114b4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011012:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	2b00      	cmp	r3, #0
 801101a:	f040 80c6 	bne.w	80111aa <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801101e:	4b80      	ldr	r3, [pc, #512]	; (8011220 <tcp_receive+0xf18>)
 8011020:	681a      	ldr	r2, [r3, #0]
 8011022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011024:	68db      	ldr	r3, [r3, #12]
 8011026:	685b      	ldr	r3, [r3, #4]
 8011028:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801102a:	2b00      	cmp	r3, #0
 801102c:	f340 80bd 	ble.w	80111aa <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011032:	68db      	ldr	r3, [r3, #12]
 8011034:	899b      	ldrh	r3, [r3, #12]
 8011036:	b29b      	uxth	r3, r3
 8011038:	4618      	mov	r0, r3
 801103a:	f7fa f9b5 	bl	800b3a8 <lwip_htons>
 801103e:	4603      	mov	r3, r0
 8011040:	b2db      	uxtb	r3, r3
 8011042:	f003 0301 	and.w	r3, r3, #1
 8011046:	2b00      	cmp	r3, #0
 8011048:	f040 80bf 	bne.w	80111ca <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801104c:	4875      	ldr	r0, [pc, #468]	; (8011224 <tcp_receive+0xf1c>)
 801104e:	f7fd fa39 	bl	800e4c4 <tcp_seg_copy>
 8011052:	4602      	mov	r2, r0
 8011054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011056:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	2b00      	cmp	r3, #0
 801105e:	f000 80b6 	beq.w	80111ce <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011064:	68db      	ldr	r3, [r3, #12]
 8011066:	685b      	ldr	r3, [r3, #4]
 8011068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801106a:	8912      	ldrh	r2, [r2, #8]
 801106c:	441a      	add	r2, r3
 801106e:	4b6c      	ldr	r3, [pc, #432]	; (8011220 <tcp_receive+0xf18>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	1ad3      	subs	r3, r2, r3
 8011074:	2b00      	cmp	r3, #0
 8011076:	dd12      	ble.n	801109e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011078:	4b69      	ldr	r3, [pc, #420]	; (8011220 <tcp_receive+0xf18>)
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	b29a      	uxth	r2, r3
 801107e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011080:	68db      	ldr	r3, [r3, #12]
 8011082:	685b      	ldr	r3, [r3, #4]
 8011084:	b29b      	uxth	r3, r3
 8011086:	1ad3      	subs	r3, r2, r3
 8011088:	b29a      	uxth	r2, r3
 801108a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801108c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801108e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011090:	685a      	ldr	r2, [r3, #4]
 8011092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011094:	891b      	ldrh	r3, [r3, #8]
 8011096:	4619      	mov	r1, r3
 8011098:	4610      	mov	r0, r2
 801109a:	f7fb fbf1 	bl	800c880 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801109e:	4b62      	ldr	r3, [pc, #392]	; (8011228 <tcp_receive+0xf20>)
 80110a0:	881b      	ldrh	r3, [r3, #0]
 80110a2:	461a      	mov	r2, r3
 80110a4:	4b5e      	ldr	r3, [pc, #376]	; (8011220 <tcp_receive+0xf18>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	441a      	add	r2, r3
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110ae:	6879      	ldr	r1, [r7, #4]
 80110b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80110b2:	440b      	add	r3, r1
 80110b4:	1ad3      	subs	r3, r2, r3
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	f340 8089 	ble.w	80111ce <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80110bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	68db      	ldr	r3, [r3, #12]
 80110c2:	899b      	ldrh	r3, [r3, #12]
 80110c4:	b29b      	uxth	r3, r3
 80110c6:	4618      	mov	r0, r3
 80110c8:	f7fa f96e 	bl	800b3a8 <lwip_htons>
 80110cc:	4603      	mov	r3, r0
 80110ce:	b2db      	uxtb	r3, r3
 80110d0:	f003 0301 	and.w	r3, r3, #1
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d022      	beq.n	801111e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80110d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	68db      	ldr	r3, [r3, #12]
 80110de:	899b      	ldrh	r3, [r3, #12]
 80110e0:	b29b      	uxth	r3, r3
 80110e2:	b21b      	sxth	r3, r3
 80110e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80110e8:	b21c      	sxth	r4, r3
 80110ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	68db      	ldr	r3, [r3, #12]
 80110f0:	899b      	ldrh	r3, [r3, #12]
 80110f2:	b29b      	uxth	r3, r3
 80110f4:	4618      	mov	r0, r3
 80110f6:	f7fa f957 	bl	800b3a8 <lwip_htons>
 80110fa:	4603      	mov	r3, r0
 80110fc:	b2db      	uxtb	r3, r3
 80110fe:	b29b      	uxth	r3, r3
 8011100:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011104:	b29b      	uxth	r3, r3
 8011106:	4618      	mov	r0, r3
 8011108:	f7fa f94e 	bl	800b3a8 <lwip_htons>
 801110c:	4603      	mov	r3, r0
 801110e:	b21b      	sxth	r3, r3
 8011110:	4323      	orrs	r3, r4
 8011112:	b21a      	sxth	r2, r3
 8011114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	68db      	ldr	r3, [r3, #12]
 801111a:	b292      	uxth	r2, r2
 801111c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011122:	b29a      	uxth	r2, r3
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011128:	4413      	add	r3, r2
 801112a:	b299      	uxth	r1, r3
 801112c:	4b3c      	ldr	r3, [pc, #240]	; (8011220 <tcp_receive+0xf18>)
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	b29a      	uxth	r2, r3
 8011132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	1a8a      	subs	r2, r1, r2
 8011138:	b292      	uxth	r2, r2
 801113a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801113c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	685a      	ldr	r2, [r3, #4]
 8011142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	891b      	ldrh	r3, [r3, #8]
 8011148:	4619      	mov	r1, r3
 801114a:	4610      	mov	r0, r2
 801114c:	f7fb fb98 	bl	800c880 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	891c      	ldrh	r4, [r3, #8]
 8011156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	68db      	ldr	r3, [r3, #12]
 801115c:	899b      	ldrh	r3, [r3, #12]
 801115e:	b29b      	uxth	r3, r3
 8011160:	4618      	mov	r0, r3
 8011162:	f7fa f921 	bl	800b3a8 <lwip_htons>
 8011166:	4603      	mov	r3, r0
 8011168:	b2db      	uxtb	r3, r3
 801116a:	f003 0303 	and.w	r3, r3, #3
 801116e:	2b00      	cmp	r3, #0
 8011170:	d001      	beq.n	8011176 <tcp_receive+0xe6e>
 8011172:	2301      	movs	r3, #1
 8011174:	e000      	b.n	8011178 <tcp_receive+0xe70>
 8011176:	2300      	movs	r3, #0
 8011178:	4423      	add	r3, r4
 801117a:	b29a      	uxth	r2, r3
 801117c:	4b2a      	ldr	r3, [pc, #168]	; (8011228 <tcp_receive+0xf20>)
 801117e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011180:	4b29      	ldr	r3, [pc, #164]	; (8011228 <tcp_receive+0xf20>)
 8011182:	881b      	ldrh	r3, [r3, #0]
 8011184:	461a      	mov	r2, r3
 8011186:	4b26      	ldr	r3, [pc, #152]	; (8011220 <tcp_receive+0xf18>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	441a      	add	r2, r3
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011190:	6879      	ldr	r1, [r7, #4]
 8011192:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011194:	440b      	add	r3, r1
 8011196:	429a      	cmp	r2, r3
 8011198:	d019      	beq.n	80111ce <tcp_receive+0xec6>
 801119a:	4b24      	ldr	r3, [pc, #144]	; (801122c <tcp_receive+0xf24>)
 801119c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80111a0:	4923      	ldr	r1, [pc, #140]	; (8011230 <tcp_receive+0xf28>)
 80111a2:	4824      	ldr	r0, [pc, #144]	; (8011234 <tcp_receive+0xf2c>)
 80111a4:	f008 ff92 	bl	801a0cc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80111a8:	e011      	b.n	80111ce <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80111aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80111b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	f47f aea4 	bne.w	8010f00 <tcp_receive+0xbf8>
 80111b8:	e00a      	b.n	80111d0 <tcp_receive+0xec8>
                break;
 80111ba:	bf00      	nop
 80111bc:	e008      	b.n	80111d0 <tcp_receive+0xec8>
                break;
 80111be:	bf00      	nop
 80111c0:	e006      	b.n	80111d0 <tcp_receive+0xec8>
                  break;
 80111c2:	bf00      	nop
 80111c4:	e004      	b.n	80111d0 <tcp_receive+0xec8>
                  break;
 80111c6:	bf00      	nop
 80111c8:	e002      	b.n	80111d0 <tcp_receive+0xec8>
                  break;
 80111ca:	bf00      	nop
 80111cc:	e000      	b.n	80111d0 <tcp_receive+0xec8>
                break;
 80111ce:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f001 fe8b 	bl	8012eec <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80111d6:	e003      	b.n	80111e0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80111d8:	6878      	ldr	r0, [r7, #4]
 80111da:	f001 fe87 	bl	8012eec <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80111de:	e01a      	b.n	8011216 <tcp_receive+0xf0e>
 80111e0:	e019      	b.n	8011216 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80111e2:	4b0f      	ldr	r3, [pc, #60]	; (8011220 <tcp_receive+0xf18>)
 80111e4:	681a      	ldr	r2, [r3, #0]
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111ea:	1ad3      	subs	r3, r2, r3
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	db0a      	blt.n	8011206 <tcp_receive+0xefe>
 80111f0:	4b0b      	ldr	r3, [pc, #44]	; (8011220 <tcp_receive+0xf18>)
 80111f2:	681a      	ldr	r2, [r3, #0]
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111f8:	6879      	ldr	r1, [r7, #4]
 80111fa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80111fc:	440b      	add	r3, r1
 80111fe:	1ad3      	subs	r3, r2, r3
 8011200:	3301      	adds	r3, #1
 8011202:	2b00      	cmp	r3, #0
 8011204:	dd07      	ble.n	8011216 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	8b5b      	ldrh	r3, [r3, #26]
 801120a:	f043 0302 	orr.w	r3, r3, #2
 801120e:	b29a      	uxth	r2, r3
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011214:	e7ff      	b.n	8011216 <tcp_receive+0xf0e>
 8011216:	bf00      	nop
 8011218:	3750      	adds	r7, #80	; 0x50
 801121a:	46bd      	mov	sp, r7
 801121c:	bdb0      	pop	{r4, r5, r7, pc}
 801121e:	bf00      	nop
 8011220:	200114b4 	.word	0x200114b4
 8011224:	20011494 	.word	0x20011494
 8011228:	200114be 	.word	0x200114be
 801122c:	0801e4a0 	.word	0x0801e4a0
 8011230:	0801e848 	.word	0x0801e848
 8011234:	0801e4ec 	.word	0x0801e4ec

08011238 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011238:	b480      	push	{r7}
 801123a:	b083      	sub	sp, #12
 801123c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801123e:	4b15      	ldr	r3, [pc, #84]	; (8011294 <tcp_get_next_optbyte+0x5c>)
 8011240:	881b      	ldrh	r3, [r3, #0]
 8011242:	1c5a      	adds	r2, r3, #1
 8011244:	b291      	uxth	r1, r2
 8011246:	4a13      	ldr	r2, [pc, #76]	; (8011294 <tcp_get_next_optbyte+0x5c>)
 8011248:	8011      	strh	r1, [r2, #0]
 801124a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801124c:	4b12      	ldr	r3, [pc, #72]	; (8011298 <tcp_get_next_optbyte+0x60>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d004      	beq.n	801125e <tcp_get_next_optbyte+0x26>
 8011254:	4b11      	ldr	r3, [pc, #68]	; (801129c <tcp_get_next_optbyte+0x64>)
 8011256:	881b      	ldrh	r3, [r3, #0]
 8011258:	88fa      	ldrh	r2, [r7, #6]
 801125a:	429a      	cmp	r2, r3
 801125c:	d208      	bcs.n	8011270 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801125e:	4b10      	ldr	r3, [pc, #64]	; (80112a0 <tcp_get_next_optbyte+0x68>)
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	3314      	adds	r3, #20
 8011264:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011266:	88fb      	ldrh	r3, [r7, #6]
 8011268:	683a      	ldr	r2, [r7, #0]
 801126a:	4413      	add	r3, r2
 801126c:	781b      	ldrb	r3, [r3, #0]
 801126e:	e00b      	b.n	8011288 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011270:	88fb      	ldrh	r3, [r7, #6]
 8011272:	b2da      	uxtb	r2, r3
 8011274:	4b09      	ldr	r3, [pc, #36]	; (801129c <tcp_get_next_optbyte+0x64>)
 8011276:	881b      	ldrh	r3, [r3, #0]
 8011278:	b2db      	uxtb	r3, r3
 801127a:	1ad3      	subs	r3, r2, r3
 801127c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801127e:	4b06      	ldr	r3, [pc, #24]	; (8011298 <tcp_get_next_optbyte+0x60>)
 8011280:	681a      	ldr	r2, [r3, #0]
 8011282:	797b      	ldrb	r3, [r7, #5]
 8011284:	4413      	add	r3, r2
 8011286:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011288:	4618      	mov	r0, r3
 801128a:	370c      	adds	r7, #12
 801128c:	46bd      	mov	sp, r7
 801128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011292:	4770      	bx	lr
 8011294:	200114b0 	.word	0x200114b0
 8011298:	200114ac 	.word	0x200114ac
 801129c:	200114aa 	.word	0x200114aa
 80112a0:	200114a4 	.word	0x200114a4

080112a4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b084      	sub	sp, #16
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d106      	bne.n	80112c0 <tcp_parseopt+0x1c>
 80112b2:	4b32      	ldr	r3, [pc, #200]	; (801137c <tcp_parseopt+0xd8>)
 80112b4:	f240 727d 	movw	r2, #1917	; 0x77d
 80112b8:	4931      	ldr	r1, [pc, #196]	; (8011380 <tcp_parseopt+0xdc>)
 80112ba:	4832      	ldr	r0, [pc, #200]	; (8011384 <tcp_parseopt+0xe0>)
 80112bc:	f008 ff06 	bl	801a0cc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80112c0:	4b31      	ldr	r3, [pc, #196]	; (8011388 <tcp_parseopt+0xe4>)
 80112c2:	881b      	ldrh	r3, [r3, #0]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d055      	beq.n	8011374 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80112c8:	4b30      	ldr	r3, [pc, #192]	; (801138c <tcp_parseopt+0xe8>)
 80112ca:	2200      	movs	r2, #0
 80112cc:	801a      	strh	r2, [r3, #0]
 80112ce:	e045      	b.n	801135c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80112d0:	f7ff ffb2 	bl	8011238 <tcp_get_next_optbyte>
 80112d4:	4603      	mov	r3, r0
 80112d6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80112d8:	7bfb      	ldrb	r3, [r7, #15]
 80112da:	2b02      	cmp	r3, #2
 80112dc:	d006      	beq.n	80112ec <tcp_parseopt+0x48>
 80112de:	2b02      	cmp	r3, #2
 80112e0:	dc2b      	bgt.n	801133a <tcp_parseopt+0x96>
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d041      	beq.n	801136a <tcp_parseopt+0xc6>
 80112e6:	2b01      	cmp	r3, #1
 80112e8:	d127      	bne.n	801133a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80112ea:	e037      	b.n	801135c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80112ec:	f7ff ffa4 	bl	8011238 <tcp_get_next_optbyte>
 80112f0:	4603      	mov	r3, r0
 80112f2:	2b04      	cmp	r3, #4
 80112f4:	d13b      	bne.n	801136e <tcp_parseopt+0xca>
 80112f6:	4b25      	ldr	r3, [pc, #148]	; (801138c <tcp_parseopt+0xe8>)
 80112f8:	881b      	ldrh	r3, [r3, #0]
 80112fa:	3301      	adds	r3, #1
 80112fc:	4a22      	ldr	r2, [pc, #136]	; (8011388 <tcp_parseopt+0xe4>)
 80112fe:	8812      	ldrh	r2, [r2, #0]
 8011300:	4293      	cmp	r3, r2
 8011302:	da34      	bge.n	801136e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011304:	f7ff ff98 	bl	8011238 <tcp_get_next_optbyte>
 8011308:	4603      	mov	r3, r0
 801130a:	b29b      	uxth	r3, r3
 801130c:	021b      	lsls	r3, r3, #8
 801130e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011310:	f7ff ff92 	bl	8011238 <tcp_get_next_optbyte>
 8011314:	4603      	mov	r3, r0
 8011316:	b29a      	uxth	r2, r3
 8011318:	89bb      	ldrh	r3, [r7, #12]
 801131a:	4313      	orrs	r3, r2
 801131c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801131e:	89bb      	ldrh	r3, [r7, #12]
 8011320:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011324:	d804      	bhi.n	8011330 <tcp_parseopt+0x8c>
 8011326:	89bb      	ldrh	r3, [r7, #12]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d001      	beq.n	8011330 <tcp_parseopt+0x8c>
 801132c:	89ba      	ldrh	r2, [r7, #12]
 801132e:	e001      	b.n	8011334 <tcp_parseopt+0x90>
 8011330:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011338:	e010      	b.n	801135c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801133a:	f7ff ff7d 	bl	8011238 <tcp_get_next_optbyte>
 801133e:	4603      	mov	r3, r0
 8011340:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011342:	7afb      	ldrb	r3, [r7, #11]
 8011344:	2b01      	cmp	r3, #1
 8011346:	d914      	bls.n	8011372 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011348:	7afb      	ldrb	r3, [r7, #11]
 801134a:	b29a      	uxth	r2, r3
 801134c:	4b0f      	ldr	r3, [pc, #60]	; (801138c <tcp_parseopt+0xe8>)
 801134e:	881b      	ldrh	r3, [r3, #0]
 8011350:	4413      	add	r3, r2
 8011352:	b29b      	uxth	r3, r3
 8011354:	3b02      	subs	r3, #2
 8011356:	b29a      	uxth	r2, r3
 8011358:	4b0c      	ldr	r3, [pc, #48]	; (801138c <tcp_parseopt+0xe8>)
 801135a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801135c:	4b0b      	ldr	r3, [pc, #44]	; (801138c <tcp_parseopt+0xe8>)
 801135e:	881a      	ldrh	r2, [r3, #0]
 8011360:	4b09      	ldr	r3, [pc, #36]	; (8011388 <tcp_parseopt+0xe4>)
 8011362:	881b      	ldrh	r3, [r3, #0]
 8011364:	429a      	cmp	r2, r3
 8011366:	d3b3      	bcc.n	80112d0 <tcp_parseopt+0x2c>
 8011368:	e004      	b.n	8011374 <tcp_parseopt+0xd0>
          return;
 801136a:	bf00      	nop
 801136c:	e002      	b.n	8011374 <tcp_parseopt+0xd0>
            return;
 801136e:	bf00      	nop
 8011370:	e000      	b.n	8011374 <tcp_parseopt+0xd0>
            return;
 8011372:	bf00      	nop
      }
    }
  }
}
 8011374:	3710      	adds	r7, #16
 8011376:	46bd      	mov	sp, r7
 8011378:	bd80      	pop	{r7, pc}
 801137a:	bf00      	nop
 801137c:	0801e4a0 	.word	0x0801e4a0
 8011380:	0801e904 	.word	0x0801e904
 8011384:	0801e4ec 	.word	0x0801e4ec
 8011388:	200114a8 	.word	0x200114a8
 801138c:	200114b0 	.word	0x200114b0

08011390 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011390:	b480      	push	{r7}
 8011392:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011394:	4b05      	ldr	r3, [pc, #20]	; (80113ac <tcp_trigger_input_pcb_close+0x1c>)
 8011396:	781b      	ldrb	r3, [r3, #0]
 8011398:	f043 0310 	orr.w	r3, r3, #16
 801139c:	b2da      	uxtb	r2, r3
 801139e:	4b03      	ldr	r3, [pc, #12]	; (80113ac <tcp_trigger_input_pcb_close+0x1c>)
 80113a0:	701a      	strb	r2, [r3, #0]
}
 80113a2:	bf00      	nop
 80113a4:	46bd      	mov	sp, r7
 80113a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113aa:	4770      	bx	lr
 80113ac:	200114c1 	.word	0x200114c1

080113b0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b084      	sub	sp, #16
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	60f8      	str	r0, [r7, #12]
 80113b8:	60b9      	str	r1, [r7, #8]
 80113ba:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d00a      	beq.n	80113d8 <tcp_route+0x28>
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	7a1b      	ldrb	r3, [r3, #8]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d006      	beq.n	80113d8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	7a1b      	ldrb	r3, [r3, #8]
 80113ce:	4618      	mov	r0, r3
 80113d0:	f7fb f84e 	bl	800c470 <netif_get_by_index>
 80113d4:	4603      	mov	r3, r0
 80113d6:	e003      	b.n	80113e0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f003 fc4b 	bl	8014c74 <ip4_route>
 80113de:	4603      	mov	r3, r0
  }
}
 80113e0:	4618      	mov	r0, r3
 80113e2:	3710      	adds	r7, #16
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}

080113e8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80113e8:	b590      	push	{r4, r7, lr}
 80113ea:	b087      	sub	sp, #28
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	60f8      	str	r0, [r7, #12]
 80113f0:	60b9      	str	r1, [r7, #8]
 80113f2:	603b      	str	r3, [r7, #0]
 80113f4:	4613      	mov	r3, r2
 80113f6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d105      	bne.n	801140a <tcp_create_segment+0x22>
 80113fe:	4b44      	ldr	r3, [pc, #272]	; (8011510 <tcp_create_segment+0x128>)
 8011400:	22a3      	movs	r2, #163	; 0xa3
 8011402:	4944      	ldr	r1, [pc, #272]	; (8011514 <tcp_create_segment+0x12c>)
 8011404:	4844      	ldr	r0, [pc, #272]	; (8011518 <tcp_create_segment+0x130>)
 8011406:	f008 fe61 	bl	801a0cc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801140a:	68bb      	ldr	r3, [r7, #8]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d105      	bne.n	801141c <tcp_create_segment+0x34>
 8011410:	4b3f      	ldr	r3, [pc, #252]	; (8011510 <tcp_create_segment+0x128>)
 8011412:	22a4      	movs	r2, #164	; 0xa4
 8011414:	4941      	ldr	r1, [pc, #260]	; (801151c <tcp_create_segment+0x134>)
 8011416:	4840      	ldr	r0, [pc, #256]	; (8011518 <tcp_create_segment+0x130>)
 8011418:	f008 fe58 	bl	801a0cc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801141c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011420:	009b      	lsls	r3, r3, #2
 8011422:	b2db      	uxtb	r3, r3
 8011424:	f003 0304 	and.w	r3, r3, #4
 8011428:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801142a:	2003      	movs	r0, #3
 801142c:	f7fa fc94 	bl	800bd58 <memp_malloc>
 8011430:	6138      	str	r0, [r7, #16]
 8011432:	693b      	ldr	r3, [r7, #16]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d104      	bne.n	8011442 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011438:	68b8      	ldr	r0, [r7, #8]
 801143a:	f7fb fba7 	bl	800cb8c <pbuf_free>
    return NULL;
 801143e:	2300      	movs	r3, #0
 8011440:	e061      	b.n	8011506 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011442:	693b      	ldr	r3, [r7, #16]
 8011444:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011448:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801144a:	693b      	ldr	r3, [r7, #16]
 801144c:	2200      	movs	r2, #0
 801144e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011450:	693b      	ldr	r3, [r7, #16]
 8011452:	68ba      	ldr	r2, [r7, #8]
 8011454:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	891a      	ldrh	r2, [r3, #8]
 801145a:	7dfb      	ldrb	r3, [r7, #23]
 801145c:	b29b      	uxth	r3, r3
 801145e:	429a      	cmp	r2, r3
 8011460:	d205      	bcs.n	801146e <tcp_create_segment+0x86>
 8011462:	4b2b      	ldr	r3, [pc, #172]	; (8011510 <tcp_create_segment+0x128>)
 8011464:	22b0      	movs	r2, #176	; 0xb0
 8011466:	492e      	ldr	r1, [pc, #184]	; (8011520 <tcp_create_segment+0x138>)
 8011468:	482b      	ldr	r0, [pc, #172]	; (8011518 <tcp_create_segment+0x130>)
 801146a:	f008 fe2f 	bl	801a0cc <iprintf>
  seg->len = p->tot_len - optlen;
 801146e:	68bb      	ldr	r3, [r7, #8]
 8011470:	891a      	ldrh	r2, [r3, #8]
 8011472:	7dfb      	ldrb	r3, [r7, #23]
 8011474:	b29b      	uxth	r3, r3
 8011476:	1ad3      	subs	r3, r2, r3
 8011478:	b29a      	uxth	r2, r3
 801147a:	693b      	ldr	r3, [r7, #16]
 801147c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801147e:	2114      	movs	r1, #20
 8011480:	68b8      	ldr	r0, [r7, #8]
 8011482:	f7fb faed 	bl	800ca60 <pbuf_add_header>
 8011486:	4603      	mov	r3, r0
 8011488:	2b00      	cmp	r3, #0
 801148a:	d004      	beq.n	8011496 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801148c:	6938      	ldr	r0, [r7, #16]
 801148e:	f7fd f800 	bl	800e492 <tcp_seg_free>
    return NULL;
 8011492:	2300      	movs	r3, #0
 8011494:	e037      	b.n	8011506 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	685b      	ldr	r3, [r3, #4]
 801149a:	685a      	ldr	r2, [r3, #4]
 801149c:	693b      	ldr	r3, [r7, #16]
 801149e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	8ada      	ldrh	r2, [r3, #22]
 80114a4:	693b      	ldr	r3, [r7, #16]
 80114a6:	68dc      	ldr	r4, [r3, #12]
 80114a8:	4610      	mov	r0, r2
 80114aa:	f7f9 ff7d 	bl	800b3a8 <lwip_htons>
 80114ae:	4603      	mov	r3, r0
 80114b0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	8b1a      	ldrh	r2, [r3, #24]
 80114b6:	693b      	ldr	r3, [r7, #16]
 80114b8:	68dc      	ldr	r4, [r3, #12]
 80114ba:	4610      	mov	r0, r2
 80114bc:	f7f9 ff74 	bl	800b3a8 <lwip_htons>
 80114c0:	4603      	mov	r3, r0
 80114c2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80114c4:	693b      	ldr	r3, [r7, #16]
 80114c6:	68dc      	ldr	r4, [r3, #12]
 80114c8:	6838      	ldr	r0, [r7, #0]
 80114ca:	f7f9 ff82 	bl	800b3d2 <lwip_htonl>
 80114ce:	4603      	mov	r3, r0
 80114d0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80114d2:	7dfb      	ldrb	r3, [r7, #23]
 80114d4:	089b      	lsrs	r3, r3, #2
 80114d6:	b2db      	uxtb	r3, r3
 80114d8:	b29b      	uxth	r3, r3
 80114da:	3305      	adds	r3, #5
 80114dc:	b29b      	uxth	r3, r3
 80114de:	031b      	lsls	r3, r3, #12
 80114e0:	b29a      	uxth	r2, r3
 80114e2:	79fb      	ldrb	r3, [r7, #7]
 80114e4:	b29b      	uxth	r3, r3
 80114e6:	4313      	orrs	r3, r2
 80114e8:	b29a      	uxth	r2, r3
 80114ea:	693b      	ldr	r3, [r7, #16]
 80114ec:	68dc      	ldr	r4, [r3, #12]
 80114ee:	4610      	mov	r0, r2
 80114f0:	f7f9 ff5a 	bl	800b3a8 <lwip_htons>
 80114f4:	4603      	mov	r3, r0
 80114f6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80114f8:	693b      	ldr	r3, [r7, #16]
 80114fa:	68db      	ldr	r3, [r3, #12]
 80114fc:	2200      	movs	r2, #0
 80114fe:	749a      	strb	r2, [r3, #18]
 8011500:	2200      	movs	r2, #0
 8011502:	74da      	strb	r2, [r3, #19]
  return seg;
 8011504:	693b      	ldr	r3, [r7, #16]
}
 8011506:	4618      	mov	r0, r3
 8011508:	371c      	adds	r7, #28
 801150a:	46bd      	mov	sp, r7
 801150c:	bd90      	pop	{r4, r7, pc}
 801150e:	bf00      	nop
 8011510:	0801e920 	.word	0x0801e920
 8011514:	0801e954 	.word	0x0801e954
 8011518:	0801e974 	.word	0x0801e974
 801151c:	0801e99c 	.word	0x0801e99c
 8011520:	0801e9c0 	.word	0x0801e9c0

08011524 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b086      	sub	sp, #24
 8011528:	af00      	add	r7, sp, #0
 801152a:	607b      	str	r3, [r7, #4]
 801152c:	4603      	mov	r3, r0
 801152e:	73fb      	strb	r3, [r7, #15]
 8011530:	460b      	mov	r3, r1
 8011532:	81bb      	strh	r3, [r7, #12]
 8011534:	4613      	mov	r3, r2
 8011536:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011538:	89bb      	ldrh	r3, [r7, #12]
 801153a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d105      	bne.n	801154e <tcp_pbuf_prealloc+0x2a>
 8011542:	4b30      	ldr	r3, [pc, #192]	; (8011604 <tcp_pbuf_prealloc+0xe0>)
 8011544:	22e8      	movs	r2, #232	; 0xe8
 8011546:	4930      	ldr	r1, [pc, #192]	; (8011608 <tcp_pbuf_prealloc+0xe4>)
 8011548:	4830      	ldr	r0, [pc, #192]	; (801160c <tcp_pbuf_prealloc+0xe8>)
 801154a:	f008 fdbf 	bl	801a0cc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801154e:	6a3b      	ldr	r3, [r7, #32]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d105      	bne.n	8011560 <tcp_pbuf_prealloc+0x3c>
 8011554:	4b2b      	ldr	r3, [pc, #172]	; (8011604 <tcp_pbuf_prealloc+0xe0>)
 8011556:	22e9      	movs	r2, #233	; 0xe9
 8011558:	492d      	ldr	r1, [pc, #180]	; (8011610 <tcp_pbuf_prealloc+0xec>)
 801155a:	482c      	ldr	r0, [pc, #176]	; (801160c <tcp_pbuf_prealloc+0xe8>)
 801155c:	f008 fdb6 	bl	801a0cc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011560:	89ba      	ldrh	r2, [r7, #12]
 8011562:	897b      	ldrh	r3, [r7, #10]
 8011564:	429a      	cmp	r2, r3
 8011566:	d221      	bcs.n	80115ac <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011568:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801156c:	f003 0302 	and.w	r3, r3, #2
 8011570:	2b00      	cmp	r3, #0
 8011572:	d111      	bne.n	8011598 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011574:	6a3b      	ldr	r3, [r7, #32]
 8011576:	8b5b      	ldrh	r3, [r3, #26]
 8011578:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801157c:	2b00      	cmp	r3, #0
 801157e:	d115      	bne.n	80115ac <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011580:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011584:	2b00      	cmp	r3, #0
 8011586:	d007      	beq.n	8011598 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011588:	6a3b      	ldr	r3, [r7, #32]
 801158a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801158c:	2b00      	cmp	r3, #0
 801158e:	d103      	bne.n	8011598 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011590:	6a3b      	ldr	r3, [r7, #32]
 8011592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011594:	2b00      	cmp	r3, #0
 8011596:	d009      	beq.n	80115ac <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011598:	89bb      	ldrh	r3, [r7, #12]
 801159a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801159e:	f023 0203 	bic.w	r2, r3, #3
 80115a2:	897b      	ldrh	r3, [r7, #10]
 80115a4:	4293      	cmp	r3, r2
 80115a6:	bf28      	it	cs
 80115a8:	4613      	movcs	r3, r2
 80115aa:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80115ac:	8af9      	ldrh	r1, [r7, #22]
 80115ae:	7bfb      	ldrb	r3, [r7, #15]
 80115b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80115b4:	4618      	mov	r0, r3
 80115b6:	f7fb f805 	bl	800c5c4 <pbuf_alloc>
 80115ba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80115bc:	693b      	ldr	r3, [r7, #16]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d101      	bne.n	80115c6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80115c2:	2300      	movs	r3, #0
 80115c4:	e019      	b.n	80115fa <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80115c6:	693b      	ldr	r3, [r7, #16]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d006      	beq.n	80115dc <tcp_pbuf_prealloc+0xb8>
 80115ce:	4b0d      	ldr	r3, [pc, #52]	; (8011604 <tcp_pbuf_prealloc+0xe0>)
 80115d0:	f240 120b 	movw	r2, #267	; 0x10b
 80115d4:	490f      	ldr	r1, [pc, #60]	; (8011614 <tcp_pbuf_prealloc+0xf0>)
 80115d6:	480d      	ldr	r0, [pc, #52]	; (801160c <tcp_pbuf_prealloc+0xe8>)
 80115d8:	f008 fd78 	bl	801a0cc <iprintf>
  *oversize = p->len - length;
 80115dc:	693b      	ldr	r3, [r7, #16]
 80115de:	895a      	ldrh	r2, [r3, #10]
 80115e0:	89bb      	ldrh	r3, [r7, #12]
 80115e2:	1ad3      	subs	r3, r2, r3
 80115e4:	b29a      	uxth	r2, r3
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80115ea:	693b      	ldr	r3, [r7, #16]
 80115ec:	89ba      	ldrh	r2, [r7, #12]
 80115ee:	811a      	strh	r2, [r3, #8]
 80115f0:	693b      	ldr	r3, [r7, #16]
 80115f2:	891a      	ldrh	r2, [r3, #8]
 80115f4:	693b      	ldr	r3, [r7, #16]
 80115f6:	815a      	strh	r2, [r3, #10]
  return p;
 80115f8:	693b      	ldr	r3, [r7, #16]
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	3718      	adds	r7, #24
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}
 8011602:	bf00      	nop
 8011604:	0801e920 	.word	0x0801e920
 8011608:	0801e9d8 	.word	0x0801e9d8
 801160c:	0801e974 	.word	0x0801e974
 8011610:	0801e9fc 	.word	0x0801e9fc
 8011614:	0801ea1c 	.word	0x0801ea1c

08011618 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b082      	sub	sp, #8
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	460b      	mov	r3, r1
 8011622:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d106      	bne.n	8011638 <tcp_write_checks+0x20>
 801162a:	4b33      	ldr	r3, [pc, #204]	; (80116f8 <tcp_write_checks+0xe0>)
 801162c:	f240 1233 	movw	r2, #307	; 0x133
 8011630:	4932      	ldr	r1, [pc, #200]	; (80116fc <tcp_write_checks+0xe4>)
 8011632:	4833      	ldr	r0, [pc, #204]	; (8011700 <tcp_write_checks+0xe8>)
 8011634:	f008 fd4a 	bl	801a0cc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	7d1b      	ldrb	r3, [r3, #20]
 801163c:	2b04      	cmp	r3, #4
 801163e:	d00e      	beq.n	801165e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011644:	2b07      	cmp	r3, #7
 8011646:	d00a      	beq.n	801165e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801164c:	2b02      	cmp	r3, #2
 801164e:	d006      	beq.n	801165e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011654:	2b03      	cmp	r3, #3
 8011656:	d002      	beq.n	801165e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011658:	f06f 030a 	mvn.w	r3, #10
 801165c:	e048      	b.n	80116f0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801165e:	887b      	ldrh	r3, [r7, #2]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d101      	bne.n	8011668 <tcp_write_checks+0x50>
    return ERR_OK;
 8011664:	2300      	movs	r3, #0
 8011666:	e043      	b.n	80116f0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801166e:	887a      	ldrh	r2, [r7, #2]
 8011670:	429a      	cmp	r2, r3
 8011672:	d909      	bls.n	8011688 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	8b5b      	ldrh	r3, [r3, #26]
 8011678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801167c:	b29a      	uxth	r2, r3
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011686:	e033      	b.n	80116f0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801168e:	2b0f      	cmp	r3, #15
 8011690:	d909      	bls.n	80116a6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	8b5b      	ldrh	r3, [r3, #26]
 8011696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801169a:	b29a      	uxth	r2, r3
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80116a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80116a4:	e024      	b.n	80116f0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d00f      	beq.n	80116d0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d11a      	bne.n	80116ee <tcp_write_checks+0xd6>
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d116      	bne.n	80116ee <tcp_write_checks+0xd6>
 80116c0:	4b0d      	ldr	r3, [pc, #52]	; (80116f8 <tcp_write_checks+0xe0>)
 80116c2:	f240 1255 	movw	r2, #341	; 0x155
 80116c6:	490f      	ldr	r1, [pc, #60]	; (8011704 <tcp_write_checks+0xec>)
 80116c8:	480d      	ldr	r0, [pc, #52]	; (8011700 <tcp_write_checks+0xe8>)
 80116ca:	f008 fcff 	bl	801a0cc <iprintf>
 80116ce:	e00e      	b.n	80116ee <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d103      	bne.n	80116e0 <tcp_write_checks+0xc8>
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d006      	beq.n	80116ee <tcp_write_checks+0xd6>
 80116e0:	4b05      	ldr	r3, [pc, #20]	; (80116f8 <tcp_write_checks+0xe0>)
 80116e2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80116e6:	4908      	ldr	r1, [pc, #32]	; (8011708 <tcp_write_checks+0xf0>)
 80116e8:	4805      	ldr	r0, [pc, #20]	; (8011700 <tcp_write_checks+0xe8>)
 80116ea:	f008 fcef 	bl	801a0cc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80116ee:	2300      	movs	r3, #0
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3708      	adds	r7, #8
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}
 80116f8:	0801e920 	.word	0x0801e920
 80116fc:	0801ea30 	.word	0x0801ea30
 8011700:	0801e974 	.word	0x0801e974
 8011704:	0801ea50 	.word	0x0801ea50
 8011708:	0801ea8c 	.word	0x0801ea8c

0801170c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801170c:	b590      	push	{r4, r7, lr}
 801170e:	b09b      	sub	sp, #108	; 0x6c
 8011710:	af04      	add	r7, sp, #16
 8011712:	60f8      	str	r0, [r7, #12]
 8011714:	60b9      	str	r1, [r7, #8]
 8011716:	4611      	mov	r1, r2
 8011718:	461a      	mov	r2, r3
 801171a:	460b      	mov	r3, r1
 801171c:	80fb      	strh	r3, [r7, #6]
 801171e:	4613      	mov	r3, r2
 8011720:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011722:	2300      	movs	r3, #0
 8011724:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011726:	2300      	movs	r3, #0
 8011728:	653b      	str	r3, [r7, #80]	; 0x50
 801172a:	2300      	movs	r3, #0
 801172c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801172e:	2300      	movs	r3, #0
 8011730:	64bb      	str	r3, [r7, #72]	; 0x48
 8011732:	2300      	movs	r3, #0
 8011734:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011736:	2300      	movs	r3, #0
 8011738:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801173c:	2300      	movs	r3, #0
 801173e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011742:	2300      	movs	r3, #0
 8011744:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011746:	2300      	movs	r3, #0
 8011748:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801174a:	2300      	movs	r3, #0
 801174c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d109      	bne.n	8011768 <tcp_write+0x5c>
 8011754:	4ba4      	ldr	r3, [pc, #656]	; (80119e8 <tcp_write+0x2dc>)
 8011756:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801175a:	49a4      	ldr	r1, [pc, #656]	; (80119ec <tcp_write+0x2e0>)
 801175c:	48a4      	ldr	r0, [pc, #656]	; (80119f0 <tcp_write+0x2e4>)
 801175e:	f008 fcb5 	bl	801a0cc <iprintf>
 8011762:	f06f 030f 	mvn.w	r3, #15
 8011766:	e32a      	b.n	8011dbe <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801176e:	085b      	lsrs	r3, r3, #1
 8011770:	b29a      	uxth	r2, r3
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011776:	4293      	cmp	r3, r2
 8011778:	bf28      	it	cs
 801177a:	4613      	movcs	r3, r2
 801177c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801177e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011780:	2b00      	cmp	r3, #0
 8011782:	d102      	bne.n	801178a <tcp_write+0x7e>
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011788:	e000      	b.n	801178c <tcp_write+0x80>
 801178a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801178c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801178e:	68bb      	ldr	r3, [r7, #8]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d109      	bne.n	80117a8 <tcp_write+0x9c>
 8011794:	4b94      	ldr	r3, [pc, #592]	; (80119e8 <tcp_write+0x2dc>)
 8011796:	f240 12ad 	movw	r2, #429	; 0x1ad
 801179a:	4996      	ldr	r1, [pc, #600]	; (80119f4 <tcp_write+0x2e8>)
 801179c:	4894      	ldr	r0, [pc, #592]	; (80119f0 <tcp_write+0x2e4>)
 801179e:	f008 fc95 	bl	801a0cc <iprintf>
 80117a2:	f06f 030f 	mvn.w	r3, #15
 80117a6:	e30a      	b.n	8011dbe <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80117a8:	88fb      	ldrh	r3, [r7, #6]
 80117aa:	4619      	mov	r1, r3
 80117ac:	68f8      	ldr	r0, [r7, #12]
 80117ae:	f7ff ff33 	bl	8011618 <tcp_write_checks>
 80117b2:	4603      	mov	r3, r0
 80117b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80117b8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d002      	beq.n	80117c6 <tcp_write+0xba>
    return err;
 80117c0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80117c4:	e2fb      	b.n	8011dbe <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80117cc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80117d0:	2300      	movs	r3, #0
 80117d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117da:	2b00      	cmp	r3, #0
 80117dc:	f000 80f6 	beq.w	80119cc <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117e4:	653b      	str	r3, [r7, #80]	; 0x50
 80117e6:	e002      	b.n	80117ee <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80117e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80117ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d1f8      	bne.n	80117e8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80117f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117f8:	7a9b      	ldrb	r3, [r3, #10]
 80117fa:	009b      	lsls	r3, r3, #2
 80117fc:	b29b      	uxth	r3, r3
 80117fe:	f003 0304 	and.w	r3, r3, #4
 8011802:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011804:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011808:	891b      	ldrh	r3, [r3, #8]
 801180a:	4619      	mov	r1, r3
 801180c:	8c3b      	ldrh	r3, [r7, #32]
 801180e:	440b      	add	r3, r1
 8011810:	429a      	cmp	r2, r3
 8011812:	da06      	bge.n	8011822 <tcp_write+0x116>
 8011814:	4b74      	ldr	r3, [pc, #464]	; (80119e8 <tcp_write+0x2dc>)
 8011816:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801181a:	4977      	ldr	r1, [pc, #476]	; (80119f8 <tcp_write+0x2ec>)
 801181c:	4874      	ldr	r0, [pc, #464]	; (80119f0 <tcp_write+0x2e4>)
 801181e:	f008 fc55 	bl	801a0cc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011824:	891a      	ldrh	r2, [r3, #8]
 8011826:	8c3b      	ldrh	r3, [r7, #32]
 8011828:	4413      	add	r3, r2
 801182a:	b29b      	uxth	r3, r3
 801182c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801182e:	1ad3      	subs	r3, r2, r3
 8011830:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011838:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801183a:	8a7b      	ldrh	r3, [r7, #18]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d026      	beq.n	801188e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011840:	8a7b      	ldrh	r3, [r7, #18]
 8011842:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011844:	429a      	cmp	r2, r3
 8011846:	d206      	bcs.n	8011856 <tcp_write+0x14a>
 8011848:	4b67      	ldr	r3, [pc, #412]	; (80119e8 <tcp_write+0x2dc>)
 801184a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801184e:	496b      	ldr	r1, [pc, #428]	; (80119fc <tcp_write+0x2f0>)
 8011850:	4867      	ldr	r0, [pc, #412]	; (80119f0 <tcp_write+0x2e4>)
 8011852:	f008 fc3b 	bl	801a0cc <iprintf>
      seg = last_unsent;
 8011856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011858:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801185a:	8a7b      	ldrh	r3, [r7, #18]
 801185c:	88fa      	ldrh	r2, [r7, #6]
 801185e:	4293      	cmp	r3, r2
 8011860:	bf28      	it	cs
 8011862:	4613      	movcs	r3, r2
 8011864:	b29b      	uxth	r3, r3
 8011866:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011868:	4293      	cmp	r3, r2
 801186a:	bf28      	it	cs
 801186c:	4613      	movcs	r3, r2
 801186e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011870:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011874:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011876:	4413      	add	r3, r2
 8011878:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801187c:	8a7a      	ldrh	r2, [r7, #18]
 801187e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011880:	1ad3      	subs	r3, r2, r3
 8011882:	b29b      	uxth	r3, r3
 8011884:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011886:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011888:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801188a:	1ad3      	subs	r3, r2, r3
 801188c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801188e:	8a7b      	ldrh	r3, [r7, #18]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d00b      	beq.n	80118ac <tcp_write+0x1a0>
 8011894:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011898:	88fb      	ldrh	r3, [r7, #6]
 801189a:	429a      	cmp	r2, r3
 801189c:	d006      	beq.n	80118ac <tcp_write+0x1a0>
 801189e:	4b52      	ldr	r3, [pc, #328]	; (80119e8 <tcp_write+0x2dc>)
 80118a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80118a4:	4956      	ldr	r1, [pc, #344]	; (8011a00 <tcp_write+0x2f4>)
 80118a6:	4852      	ldr	r0, [pc, #328]	; (80119f0 <tcp_write+0x2e4>)
 80118a8:	f008 fc10 	bl	801a0cc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80118ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80118b0:	88fb      	ldrh	r3, [r7, #6]
 80118b2:	429a      	cmp	r2, r3
 80118b4:	f080 8167 	bcs.w	8011b86 <tcp_write+0x47a>
 80118b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	f000 8163 	beq.w	8011b86 <tcp_write+0x47a>
 80118c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118c2:	891b      	ldrh	r3, [r3, #8]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	f000 815e 	beq.w	8011b86 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80118ca:	88fa      	ldrh	r2, [r7, #6]
 80118cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80118d0:	1ad2      	subs	r2, r2, r3
 80118d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80118d4:	4293      	cmp	r3, r2
 80118d6:	bfa8      	it	ge
 80118d8:	4613      	movge	r3, r2
 80118da:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80118dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118de:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80118e0:	797b      	ldrb	r3, [r7, #5]
 80118e2:	f003 0301 	and.w	r3, r3, #1
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d027      	beq.n	801193a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80118ea:	f107 0012 	add.w	r0, r7, #18
 80118ee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80118f0:	8bf9      	ldrh	r1, [r7, #30]
 80118f2:	2301      	movs	r3, #1
 80118f4:	9302      	str	r3, [sp, #8]
 80118f6:	797b      	ldrb	r3, [r7, #5]
 80118f8:	9301      	str	r3, [sp, #4]
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	9300      	str	r3, [sp, #0]
 80118fe:	4603      	mov	r3, r0
 8011900:	2000      	movs	r0, #0
 8011902:	f7ff fe0f 	bl	8011524 <tcp_pbuf_prealloc>
 8011906:	6578      	str	r0, [r7, #84]	; 0x54
 8011908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801190a:	2b00      	cmp	r3, #0
 801190c:	f000 8225 	beq.w	8011d5a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011912:	6858      	ldr	r0, [r3, #4]
 8011914:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011918:	68ba      	ldr	r2, [r7, #8]
 801191a:	4413      	add	r3, r2
 801191c:	8bfa      	ldrh	r2, [r7, #30]
 801191e:	4619      	mov	r1, r3
 8011920:	f007 ff62 	bl	80197e8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011924:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011926:	f7fb f9bf 	bl	800cca8 <pbuf_clen>
 801192a:	4603      	mov	r3, r0
 801192c:	461a      	mov	r2, r3
 801192e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011932:	4413      	add	r3, r2
 8011934:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011938:	e041      	b.n	80119be <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801193a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801193c:	685b      	ldr	r3, [r3, #4]
 801193e:	637b      	str	r3, [r7, #52]	; 0x34
 8011940:	e002      	b.n	8011948 <tcp_write+0x23c>
 8011942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	637b      	str	r3, [r7, #52]	; 0x34
 8011948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d1f8      	bne.n	8011942 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011952:	7b1b      	ldrb	r3, [r3, #12]
 8011954:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011958:	2b00      	cmp	r3, #0
 801195a:	d115      	bne.n	8011988 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801195c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801195e:	685b      	ldr	r3, [r3, #4]
 8011960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011962:	8952      	ldrh	r2, [r2, #10]
 8011964:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011966:	68ba      	ldr	r2, [r7, #8]
 8011968:	429a      	cmp	r2, r3
 801196a:	d10d      	bne.n	8011988 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801196c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011970:	2b00      	cmp	r3, #0
 8011972:	d006      	beq.n	8011982 <tcp_write+0x276>
 8011974:	4b1c      	ldr	r3, [pc, #112]	; (80119e8 <tcp_write+0x2dc>)
 8011976:	f240 2231 	movw	r2, #561	; 0x231
 801197a:	4922      	ldr	r1, [pc, #136]	; (8011a04 <tcp_write+0x2f8>)
 801197c:	481c      	ldr	r0, [pc, #112]	; (80119f0 <tcp_write+0x2e4>)
 801197e:	f008 fba5 	bl	801a0cc <iprintf>
          extendlen = seglen;
 8011982:	8bfb      	ldrh	r3, [r7, #30]
 8011984:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011986:	e01a      	b.n	80119be <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011988:	8bfb      	ldrh	r3, [r7, #30]
 801198a:	2201      	movs	r2, #1
 801198c:	4619      	mov	r1, r3
 801198e:	2000      	movs	r0, #0
 8011990:	f7fa fe18 	bl	800c5c4 <pbuf_alloc>
 8011994:	6578      	str	r0, [r7, #84]	; 0x54
 8011996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011998:	2b00      	cmp	r3, #0
 801199a:	f000 81e0 	beq.w	8011d5e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801199e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80119a2:	68ba      	ldr	r2, [r7, #8]
 80119a4:	441a      	add	r2, r3
 80119a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119a8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80119aa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80119ac:	f7fb f97c 	bl	800cca8 <pbuf_clen>
 80119b0:	4603      	mov	r3, r0
 80119b2:	461a      	mov	r2, r3
 80119b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80119b8:	4413      	add	r3, r2
 80119ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80119be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80119c2:	8bfb      	ldrh	r3, [r7, #30]
 80119c4:	4413      	add	r3, r2
 80119c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80119ca:	e0dc      	b.n	8011b86 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	f000 80d7 	beq.w	8011b86 <tcp_write+0x47a>
 80119d8:	4b03      	ldr	r3, [pc, #12]	; (80119e8 <tcp_write+0x2dc>)
 80119da:	f240 224a 	movw	r2, #586	; 0x24a
 80119de:	490a      	ldr	r1, [pc, #40]	; (8011a08 <tcp_write+0x2fc>)
 80119e0:	4803      	ldr	r0, [pc, #12]	; (80119f0 <tcp_write+0x2e4>)
 80119e2:	f008 fb73 	bl	801a0cc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80119e6:	e0ce      	b.n	8011b86 <tcp_write+0x47a>
 80119e8:	0801e920 	.word	0x0801e920
 80119ec:	0801eac0 	.word	0x0801eac0
 80119f0:	0801e974 	.word	0x0801e974
 80119f4:	0801ead8 	.word	0x0801ead8
 80119f8:	0801eb0c 	.word	0x0801eb0c
 80119fc:	0801eb24 	.word	0x0801eb24
 8011a00:	0801eb44 	.word	0x0801eb44
 8011a04:	0801eb64 	.word	0x0801eb64
 8011a08:	0801eb90 	.word	0x0801eb90
    struct pbuf *p;
    u16_t left = len - pos;
 8011a0c:	88fa      	ldrh	r2, [r7, #6]
 8011a0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011a12:	1ad3      	subs	r3, r2, r3
 8011a14:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011a16:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011a1a:	b29b      	uxth	r3, r3
 8011a1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011a1e:	1ad3      	subs	r3, r2, r3
 8011a20:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011a22:	8b7a      	ldrh	r2, [r7, #26]
 8011a24:	8bbb      	ldrh	r3, [r7, #28]
 8011a26:	4293      	cmp	r3, r2
 8011a28:	bf28      	it	cs
 8011a2a:	4613      	movcs	r3, r2
 8011a2c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011a2e:	797b      	ldrb	r3, [r7, #5]
 8011a30:	f003 0301 	and.w	r3, r3, #1
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d036      	beq.n	8011aa6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011a38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011a3c:	b29a      	uxth	r2, r3
 8011a3e:	8b3b      	ldrh	r3, [r7, #24]
 8011a40:	4413      	add	r3, r2
 8011a42:	b299      	uxth	r1, r3
 8011a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	bf0c      	ite	eq
 8011a4a:	2301      	moveq	r3, #1
 8011a4c:	2300      	movne	r3, #0
 8011a4e:	b2db      	uxtb	r3, r3
 8011a50:	f107 0012 	add.w	r0, r7, #18
 8011a54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011a56:	9302      	str	r3, [sp, #8]
 8011a58:	797b      	ldrb	r3, [r7, #5]
 8011a5a:	9301      	str	r3, [sp, #4]
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	9300      	str	r3, [sp, #0]
 8011a60:	4603      	mov	r3, r0
 8011a62:	2036      	movs	r0, #54	; 0x36
 8011a64:	f7ff fd5e 	bl	8011524 <tcp_pbuf_prealloc>
 8011a68:	6338      	str	r0, [r7, #48]	; 0x30
 8011a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	f000 8178 	beq.w	8011d62 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a74:	895b      	ldrh	r3, [r3, #10]
 8011a76:	8b3a      	ldrh	r2, [r7, #24]
 8011a78:	429a      	cmp	r2, r3
 8011a7a:	d906      	bls.n	8011a8a <tcp_write+0x37e>
 8011a7c:	4b8c      	ldr	r3, [pc, #560]	; (8011cb0 <tcp_write+0x5a4>)
 8011a7e:	f240 2266 	movw	r2, #614	; 0x266
 8011a82:	498c      	ldr	r1, [pc, #560]	; (8011cb4 <tcp_write+0x5a8>)
 8011a84:	488c      	ldr	r0, [pc, #560]	; (8011cb8 <tcp_write+0x5ac>)
 8011a86:	f008 fb21 	bl	801a0cc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a8c:	685a      	ldr	r2, [r3, #4]
 8011a8e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011a92:	18d0      	adds	r0, r2, r3
 8011a94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011a98:	68ba      	ldr	r2, [r7, #8]
 8011a9a:	4413      	add	r3, r2
 8011a9c:	8b3a      	ldrh	r2, [r7, #24]
 8011a9e:	4619      	mov	r1, r3
 8011aa0:	f007 fea2 	bl	80197e8 <memcpy>
 8011aa4:	e02f      	b.n	8011b06 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011aa6:	8a7b      	ldrh	r3, [r7, #18]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d006      	beq.n	8011aba <tcp_write+0x3ae>
 8011aac:	4b80      	ldr	r3, [pc, #512]	; (8011cb0 <tcp_write+0x5a4>)
 8011aae:	f240 2271 	movw	r2, #625	; 0x271
 8011ab2:	4982      	ldr	r1, [pc, #520]	; (8011cbc <tcp_write+0x5b0>)
 8011ab4:	4880      	ldr	r0, [pc, #512]	; (8011cb8 <tcp_write+0x5ac>)
 8011ab6:	f008 fb09 	bl	801a0cc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011aba:	8b3b      	ldrh	r3, [r7, #24]
 8011abc:	2201      	movs	r2, #1
 8011abe:	4619      	mov	r1, r3
 8011ac0:	2036      	movs	r0, #54	; 0x36
 8011ac2:	f7fa fd7f 	bl	800c5c4 <pbuf_alloc>
 8011ac6:	6178      	str	r0, [r7, #20]
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	f000 814b 	beq.w	8011d66 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011ad0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011ad4:	68ba      	ldr	r2, [r7, #8]
 8011ad6:	441a      	add	r2, r3
 8011ad8:	697b      	ldr	r3, [r7, #20]
 8011ada:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011adc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011ae0:	b29b      	uxth	r3, r3
 8011ae2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011ae6:	4619      	mov	r1, r3
 8011ae8:	2036      	movs	r0, #54	; 0x36
 8011aea:	f7fa fd6b 	bl	800c5c4 <pbuf_alloc>
 8011aee:	6338      	str	r0, [r7, #48]	; 0x30
 8011af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d103      	bne.n	8011afe <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011af6:	6978      	ldr	r0, [r7, #20]
 8011af8:	f7fb f848 	bl	800cb8c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011afc:	e136      	b.n	8011d6c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011afe:	6979      	ldr	r1, [r7, #20]
 8011b00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b02:	f7fb f911 	bl	800cd28 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011b06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b08:	f7fb f8ce 	bl	800cca8 <pbuf_clen>
 8011b0c:	4603      	mov	r3, r0
 8011b0e:	461a      	mov	r2, r3
 8011b10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011b14:	4413      	add	r3, r2
 8011b16:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011b1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011b1e:	2b10      	cmp	r3, #16
 8011b20:	d903      	bls.n	8011b2a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011b22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b24:	f7fb f832 	bl	800cb8c <pbuf_free>
      goto memerr;
 8011b28:	e120      	b.n	8011d6c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011b2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b32:	441a      	add	r2, r3
 8011b34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b38:	9300      	str	r3, [sp, #0]
 8011b3a:	4613      	mov	r3, r2
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011b40:	68f8      	ldr	r0, [r7, #12]
 8011b42:	f7ff fc51 	bl	80113e8 <tcp_create_segment>
 8011b46:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	f000 810d 	beq.w	8011d6a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d102      	bne.n	8011b5c <tcp_write+0x450>
      queue = seg;
 8011b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b58:	647b      	str	r3, [r7, #68]	; 0x44
 8011b5a:	e00c      	b.n	8011b76 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d106      	bne.n	8011b70 <tcp_write+0x464>
 8011b62:	4b53      	ldr	r3, [pc, #332]	; (8011cb0 <tcp_write+0x5a4>)
 8011b64:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011b68:	4955      	ldr	r1, [pc, #340]	; (8011cc0 <tcp_write+0x5b4>)
 8011b6a:	4853      	ldr	r0, [pc, #332]	; (8011cb8 <tcp_write+0x5ac>)
 8011b6c:	f008 faae 	bl	801a0cc <iprintf>
      prev_seg->next = seg;
 8011b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011b74:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b78:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011b7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b7e:	8b3b      	ldrh	r3, [r7, #24]
 8011b80:	4413      	add	r3, r2
 8011b82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011b86:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b8a:	88fb      	ldrh	r3, [r7, #6]
 8011b8c:	429a      	cmp	r2, r3
 8011b8e:	f4ff af3d 	bcc.w	8011a0c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011b92:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d02c      	beq.n	8011bf2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b9a:	685b      	ldr	r3, [r3, #4]
 8011b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011b9e:	e01e      	b.n	8011bde <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8011ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba2:	891a      	ldrh	r2, [r3, #8]
 8011ba4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011ba6:	4413      	add	r3, r2
 8011ba8:	b29a      	uxth	r2, r3
 8011baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bac:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d110      	bne.n	8011bd8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb8:	685b      	ldr	r3, [r3, #4]
 8011bba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bbc:	8952      	ldrh	r2, [r2, #10]
 8011bbe:	4413      	add	r3, r2
 8011bc0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011bc2:	68b9      	ldr	r1, [r7, #8]
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f007 fe0f 	bl	80197e8 <memcpy>
        p->len += oversize_used;
 8011bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bcc:	895a      	ldrh	r2, [r3, #10]
 8011bce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011bd0:	4413      	add	r3, r2
 8011bd2:	b29a      	uxth	r2, r3
 8011bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bd6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d1dd      	bne.n	8011ba0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8011be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011be6:	891a      	ldrh	r2, [r3, #8]
 8011be8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011bea:	4413      	add	r3, r2
 8011bec:	b29a      	uxth	r2, r3
 8011bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011bf0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011bf2:	8a7a      	ldrh	r2, [r7, #18]
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d018      	beq.n	8011c32 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d106      	bne.n	8011c14 <tcp_write+0x508>
 8011c06:	4b2a      	ldr	r3, [pc, #168]	; (8011cb0 <tcp_write+0x5a4>)
 8011c08:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8011c0c:	492d      	ldr	r1, [pc, #180]	; (8011cc4 <tcp_write+0x5b8>)
 8011c0e:	482a      	ldr	r0, [pc, #168]	; (8011cb8 <tcp_write+0x5ac>)
 8011c10:	f008 fa5c 	bl	801a0cc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c16:	685b      	ldr	r3, [r3, #4]
 8011c18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f7fb f884 	bl	800cd28 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c22:	891a      	ldrh	r2, [r3, #8]
 8011c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c26:	891b      	ldrh	r3, [r3, #8]
 8011c28:	4413      	add	r3, r2
 8011c2a:	b29a      	uxth	r2, r3
 8011c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c2e:	811a      	strh	r2, [r3, #8]
 8011c30:	e037      	b.n	8011ca2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8011c32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d034      	beq.n	8011ca2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d003      	beq.n	8011c46 <tcp_write+0x53a>
 8011c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c40:	685b      	ldr	r3, [r3, #4]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d106      	bne.n	8011c54 <tcp_write+0x548>
 8011c46:	4b1a      	ldr	r3, [pc, #104]	; (8011cb0 <tcp_write+0x5a4>)
 8011c48:	f240 22e6 	movw	r2, #742	; 0x2e6
 8011c4c:	491e      	ldr	r1, [pc, #120]	; (8011cc8 <tcp_write+0x5bc>)
 8011c4e:	481a      	ldr	r0, [pc, #104]	; (8011cb8 <tcp_write+0x5ac>)
 8011c50:	f008 fa3c 	bl	801a0cc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c56:	685b      	ldr	r3, [r3, #4]
 8011c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8011c5a:	e009      	b.n	8011c70 <tcp_write+0x564>
      p->tot_len += extendlen;
 8011c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c5e:	891a      	ldrh	r2, [r3, #8]
 8011c60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011c62:	4413      	add	r3, r2
 8011c64:	b29a      	uxth	r2, r3
 8011c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c68:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d1f1      	bne.n	8011c5c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8011c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c7a:	891a      	ldrh	r2, [r3, #8]
 8011c7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011c7e:	4413      	add	r3, r2
 8011c80:	b29a      	uxth	r2, r3
 8011c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c84:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c88:	895a      	ldrh	r2, [r3, #10]
 8011c8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011c8c:	4413      	add	r3, r2
 8011c8e:	b29a      	uxth	r2, r3
 8011c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c92:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c96:	891a      	ldrh	r2, [r3, #8]
 8011c98:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011c9a:	4413      	add	r3, r2
 8011c9c:	b29a      	uxth	r2, r3
 8011c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ca0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d111      	bne.n	8011ccc <tcp_write+0x5c0>
    pcb->unsent = queue;
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011cac:	66da      	str	r2, [r3, #108]	; 0x6c
 8011cae:	e010      	b.n	8011cd2 <tcp_write+0x5c6>
 8011cb0:	0801e920 	.word	0x0801e920
 8011cb4:	0801ebc0 	.word	0x0801ebc0
 8011cb8:	0801e974 	.word	0x0801e974
 8011cbc:	0801ec00 	.word	0x0801ec00
 8011cc0:	0801ec10 	.word	0x0801ec10
 8011cc4:	0801ec24 	.word	0x0801ec24
 8011cc8:	0801ec5c 	.word	0x0801ec5c
  } else {
    last_unsent->next = queue;
 8011ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011cd0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011cd6:	88fb      	ldrh	r3, [r7, #6]
 8011cd8:	441a      	add	r2, r3
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011ce4:	88fb      	ldrh	r3, [r7, #6]
 8011ce6:	1ad3      	subs	r3, r2, r3
 8011ce8:	b29a      	uxth	r2, r3
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011cf6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d00e      	beq.n	8011d22 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d10a      	bne.n	8011d22 <tcp_write+0x616>
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d106      	bne.n	8011d22 <tcp_write+0x616>
 8011d14:	4b2c      	ldr	r3, [pc, #176]	; (8011dc8 <tcp_write+0x6bc>)
 8011d16:	f240 3212 	movw	r2, #786	; 0x312
 8011d1a:	492c      	ldr	r1, [pc, #176]	; (8011dcc <tcp_write+0x6c0>)
 8011d1c:	482c      	ldr	r0, [pc, #176]	; (8011dd0 <tcp_write+0x6c4>)
 8011d1e:	f008 f9d5 	bl	801a0cc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d016      	beq.n	8011d56 <tcp_write+0x64a>
 8011d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d2a:	68db      	ldr	r3, [r3, #12]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d012      	beq.n	8011d56 <tcp_write+0x64a>
 8011d30:	797b      	ldrb	r3, [r7, #5]
 8011d32:	f003 0302 	and.w	r3, r3, #2
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d10d      	bne.n	8011d56 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d3c:	68db      	ldr	r3, [r3, #12]
 8011d3e:	899b      	ldrh	r3, [r3, #12]
 8011d40:	b29c      	uxth	r4, r3
 8011d42:	2008      	movs	r0, #8
 8011d44:	f7f9 fb30 	bl	800b3a8 <lwip_htons>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	461a      	mov	r2, r3
 8011d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d4e:	68db      	ldr	r3, [r3, #12]
 8011d50:	4322      	orrs	r2, r4
 8011d52:	b292      	uxth	r2, r2
 8011d54:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011d56:	2300      	movs	r3, #0
 8011d58:	e031      	b.n	8011dbe <tcp_write+0x6b2>
          goto memerr;
 8011d5a:	bf00      	nop
 8011d5c:	e006      	b.n	8011d6c <tcp_write+0x660>
            goto memerr;
 8011d5e:	bf00      	nop
 8011d60:	e004      	b.n	8011d6c <tcp_write+0x660>
        goto memerr;
 8011d62:	bf00      	nop
 8011d64:	e002      	b.n	8011d6c <tcp_write+0x660>
        goto memerr;
 8011d66:	bf00      	nop
 8011d68:	e000      	b.n	8011d6c <tcp_write+0x660>
      goto memerr;
 8011d6a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	8b5b      	ldrh	r3, [r3, #26]
 8011d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d74:	b29a      	uxth	r2, r3
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d002      	beq.n	8011d86 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8011d80:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011d82:	f7fa ff03 	bl	800cb8c <pbuf_free>
  }
  if (queue != NULL) {
 8011d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d002      	beq.n	8011d92 <tcp_write+0x686>
    tcp_segs_free(queue);
 8011d8c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011d8e:	f7fc fb6b 	bl	800e468 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d00e      	beq.n	8011dba <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d10a      	bne.n	8011dba <tcp_write+0x6ae>
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d106      	bne.n	8011dba <tcp_write+0x6ae>
 8011dac:	4b06      	ldr	r3, [pc, #24]	; (8011dc8 <tcp_write+0x6bc>)
 8011dae:	f240 3227 	movw	r2, #807	; 0x327
 8011db2:	4906      	ldr	r1, [pc, #24]	; (8011dcc <tcp_write+0x6c0>)
 8011db4:	4806      	ldr	r0, [pc, #24]	; (8011dd0 <tcp_write+0x6c4>)
 8011db6:	f008 f989 	bl	801a0cc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8011dba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	375c      	adds	r7, #92	; 0x5c
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd90      	pop	{r4, r7, pc}
 8011dc6:	bf00      	nop
 8011dc8:	0801e920 	.word	0x0801e920
 8011dcc:	0801ec94 	.word	0x0801ec94
 8011dd0:	0801e974 	.word	0x0801e974

08011dd4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011dd4:	b590      	push	{r4, r7, lr}
 8011dd6:	b08b      	sub	sp, #44	; 0x2c
 8011dd8:	af02      	add	r7, sp, #8
 8011dda:	6078      	str	r0, [r7, #4]
 8011ddc:	460b      	mov	r3, r1
 8011dde:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011de0:	2300      	movs	r3, #0
 8011de2:	61fb      	str	r3, [r7, #28]
 8011de4:	2300      	movs	r3, #0
 8011de6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011de8:	2300      	movs	r3, #0
 8011dea:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d106      	bne.n	8011e00 <tcp_split_unsent_seg+0x2c>
 8011df2:	4b95      	ldr	r3, [pc, #596]	; (8012048 <tcp_split_unsent_seg+0x274>)
 8011df4:	f240 324b 	movw	r2, #843	; 0x34b
 8011df8:	4994      	ldr	r1, [pc, #592]	; (801204c <tcp_split_unsent_seg+0x278>)
 8011dfa:	4895      	ldr	r0, [pc, #596]	; (8012050 <tcp_split_unsent_seg+0x27c>)
 8011dfc:	f008 f966 	bl	801a0cc <iprintf>

  useg = pcb->unsent;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e04:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011e06:	697b      	ldr	r3, [r7, #20]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d102      	bne.n	8011e12 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011e0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e10:	e116      	b.n	8012040 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011e12:	887b      	ldrh	r3, [r7, #2]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d109      	bne.n	8011e2c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011e18:	4b8b      	ldr	r3, [pc, #556]	; (8012048 <tcp_split_unsent_seg+0x274>)
 8011e1a:	f240 3253 	movw	r2, #851	; 0x353
 8011e1e:	498d      	ldr	r1, [pc, #564]	; (8012054 <tcp_split_unsent_seg+0x280>)
 8011e20:	488b      	ldr	r0, [pc, #556]	; (8012050 <tcp_split_unsent_seg+0x27c>)
 8011e22:	f008 f953 	bl	801a0cc <iprintf>
    return ERR_VAL;
 8011e26:	f06f 0305 	mvn.w	r3, #5
 8011e2a:	e109      	b.n	8012040 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011e2c:	697b      	ldr	r3, [r7, #20]
 8011e2e:	891b      	ldrh	r3, [r3, #8]
 8011e30:	887a      	ldrh	r2, [r7, #2]
 8011e32:	429a      	cmp	r2, r3
 8011e34:	d301      	bcc.n	8011e3a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011e36:	2300      	movs	r3, #0
 8011e38:	e102      	b.n	8012040 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e3e:	887a      	ldrh	r2, [r7, #2]
 8011e40:	429a      	cmp	r2, r3
 8011e42:	d906      	bls.n	8011e52 <tcp_split_unsent_seg+0x7e>
 8011e44:	4b80      	ldr	r3, [pc, #512]	; (8012048 <tcp_split_unsent_seg+0x274>)
 8011e46:	f240 325b 	movw	r2, #859	; 0x35b
 8011e4a:	4983      	ldr	r1, [pc, #524]	; (8012058 <tcp_split_unsent_seg+0x284>)
 8011e4c:	4880      	ldr	r0, [pc, #512]	; (8012050 <tcp_split_unsent_seg+0x27c>)
 8011e4e:	f008 f93d 	bl	801a0cc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011e52:	697b      	ldr	r3, [r7, #20]
 8011e54:	891b      	ldrh	r3, [r3, #8]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d106      	bne.n	8011e68 <tcp_split_unsent_seg+0x94>
 8011e5a:	4b7b      	ldr	r3, [pc, #492]	; (8012048 <tcp_split_unsent_seg+0x274>)
 8011e5c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011e60:	497e      	ldr	r1, [pc, #504]	; (801205c <tcp_split_unsent_seg+0x288>)
 8011e62:	487b      	ldr	r0, [pc, #492]	; (8012050 <tcp_split_unsent_seg+0x27c>)
 8011e64:	f008 f932 	bl	801a0cc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011e68:	697b      	ldr	r3, [r7, #20]
 8011e6a:	7a9b      	ldrb	r3, [r3, #10]
 8011e6c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011e6e:	7bfb      	ldrb	r3, [r7, #15]
 8011e70:	009b      	lsls	r3, r3, #2
 8011e72:	b2db      	uxtb	r3, r3
 8011e74:	f003 0304 	and.w	r3, r3, #4
 8011e78:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011e7a:	697b      	ldr	r3, [r7, #20]
 8011e7c:	891a      	ldrh	r2, [r3, #8]
 8011e7e:	887b      	ldrh	r3, [r7, #2]
 8011e80:	1ad3      	subs	r3, r2, r3
 8011e82:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011e84:	7bbb      	ldrb	r3, [r7, #14]
 8011e86:	b29a      	uxth	r2, r3
 8011e88:	89bb      	ldrh	r3, [r7, #12]
 8011e8a:	4413      	add	r3, r2
 8011e8c:	b29b      	uxth	r3, r3
 8011e8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011e92:	4619      	mov	r1, r3
 8011e94:	2036      	movs	r0, #54	; 0x36
 8011e96:	f7fa fb95 	bl	800c5c4 <pbuf_alloc>
 8011e9a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011e9c:	693b      	ldr	r3, [r7, #16]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	f000 80b7 	beq.w	8012012 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011ea4:	697b      	ldr	r3, [r7, #20]
 8011ea6:	685b      	ldr	r3, [r3, #4]
 8011ea8:	891a      	ldrh	r2, [r3, #8]
 8011eaa:	697b      	ldr	r3, [r7, #20]
 8011eac:	891b      	ldrh	r3, [r3, #8]
 8011eae:	1ad3      	subs	r3, r2, r3
 8011eb0:	b29a      	uxth	r2, r3
 8011eb2:	887b      	ldrh	r3, [r7, #2]
 8011eb4:	4413      	add	r3, r2
 8011eb6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011eb8:	697b      	ldr	r3, [r7, #20]
 8011eba:	6858      	ldr	r0, [r3, #4]
 8011ebc:	693b      	ldr	r3, [r7, #16]
 8011ebe:	685a      	ldr	r2, [r3, #4]
 8011ec0:	7bbb      	ldrb	r3, [r7, #14]
 8011ec2:	18d1      	adds	r1, r2, r3
 8011ec4:	897b      	ldrh	r3, [r7, #10]
 8011ec6:	89ba      	ldrh	r2, [r7, #12]
 8011ec8:	f7fb f856 	bl	800cf78 <pbuf_copy_partial>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	461a      	mov	r2, r3
 8011ed0:	89bb      	ldrh	r3, [r7, #12]
 8011ed2:	4293      	cmp	r3, r2
 8011ed4:	f040 809f 	bne.w	8012016 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011ed8:	697b      	ldr	r3, [r7, #20]
 8011eda:	68db      	ldr	r3, [r3, #12]
 8011edc:	899b      	ldrh	r3, [r3, #12]
 8011ede:	b29b      	uxth	r3, r3
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f7f9 fa61 	bl	800b3a8 <lwip_htons>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	b2db      	uxtb	r3, r3
 8011eea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011eee:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011ef4:	7efb      	ldrb	r3, [r7, #27]
 8011ef6:	f003 0308 	and.w	r3, r3, #8
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d007      	beq.n	8011f0e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011efe:	7efb      	ldrb	r3, [r7, #27]
 8011f00:	f023 0308 	bic.w	r3, r3, #8
 8011f04:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011f06:	7ebb      	ldrb	r3, [r7, #26]
 8011f08:	f043 0308 	orr.w	r3, r3, #8
 8011f0c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011f0e:	7efb      	ldrb	r3, [r7, #27]
 8011f10:	f003 0301 	and.w	r3, r3, #1
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d007      	beq.n	8011f28 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011f18:	7efb      	ldrb	r3, [r7, #27]
 8011f1a:	f023 0301 	bic.w	r3, r3, #1
 8011f1e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011f20:	7ebb      	ldrb	r3, [r7, #26]
 8011f22:	f043 0301 	orr.w	r3, r3, #1
 8011f26:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011f28:	697b      	ldr	r3, [r7, #20]
 8011f2a:	68db      	ldr	r3, [r3, #12]
 8011f2c:	685b      	ldr	r3, [r3, #4]
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f7f9 fa4f 	bl	800b3d2 <lwip_htonl>
 8011f34:	4602      	mov	r2, r0
 8011f36:	887b      	ldrh	r3, [r7, #2]
 8011f38:	18d1      	adds	r1, r2, r3
 8011f3a:	7eba      	ldrb	r2, [r7, #26]
 8011f3c:	7bfb      	ldrb	r3, [r7, #15]
 8011f3e:	9300      	str	r3, [sp, #0]
 8011f40:	460b      	mov	r3, r1
 8011f42:	6939      	ldr	r1, [r7, #16]
 8011f44:	6878      	ldr	r0, [r7, #4]
 8011f46:	f7ff fa4f 	bl	80113e8 <tcp_create_segment>
 8011f4a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011f4c:	69fb      	ldr	r3, [r7, #28]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d063      	beq.n	801201a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011f52:	697b      	ldr	r3, [r7, #20]
 8011f54:	685b      	ldr	r3, [r3, #4]
 8011f56:	4618      	mov	r0, r3
 8011f58:	f7fa fea6 	bl	800cca8 <pbuf_clen>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	461a      	mov	r2, r3
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f66:	1a9b      	subs	r3, r3, r2
 8011f68:	b29a      	uxth	r2, r3
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011f70:	697b      	ldr	r3, [r7, #20]
 8011f72:	6858      	ldr	r0, [r3, #4]
 8011f74:	697b      	ldr	r3, [r7, #20]
 8011f76:	685b      	ldr	r3, [r3, #4]
 8011f78:	891a      	ldrh	r2, [r3, #8]
 8011f7a:	89bb      	ldrh	r3, [r7, #12]
 8011f7c:	1ad3      	subs	r3, r2, r3
 8011f7e:	b29b      	uxth	r3, r3
 8011f80:	4619      	mov	r1, r3
 8011f82:	f7fa fc7d 	bl	800c880 <pbuf_realloc>
  useg->len -= remainder;
 8011f86:	697b      	ldr	r3, [r7, #20]
 8011f88:	891a      	ldrh	r2, [r3, #8]
 8011f8a:	89bb      	ldrh	r3, [r7, #12]
 8011f8c:	1ad3      	subs	r3, r2, r3
 8011f8e:	b29a      	uxth	r2, r3
 8011f90:	697b      	ldr	r3, [r7, #20]
 8011f92:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011f94:	697b      	ldr	r3, [r7, #20]
 8011f96:	68db      	ldr	r3, [r3, #12]
 8011f98:	899b      	ldrh	r3, [r3, #12]
 8011f9a:	b29c      	uxth	r4, r3
 8011f9c:	7efb      	ldrb	r3, [r7, #27]
 8011f9e:	b29b      	uxth	r3, r3
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	f7f9 fa01 	bl	800b3a8 <lwip_htons>
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	461a      	mov	r2, r3
 8011faa:	697b      	ldr	r3, [r7, #20]
 8011fac:	68db      	ldr	r3, [r3, #12]
 8011fae:	4322      	orrs	r2, r4
 8011fb0:	b292      	uxth	r2, r2
 8011fb2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011fb4:	697b      	ldr	r3, [r7, #20]
 8011fb6:	685b      	ldr	r3, [r3, #4]
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f7fa fe75 	bl	800cca8 <pbuf_clen>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	461a      	mov	r2, r3
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011fc8:	4413      	add	r3, r2
 8011fca:	b29a      	uxth	r2, r3
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011fd2:	69fb      	ldr	r3, [r7, #28]
 8011fd4:	685b      	ldr	r3, [r3, #4]
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f7fa fe66 	bl	800cca8 <pbuf_clen>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	461a      	mov	r2, r3
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011fe6:	4413      	add	r3, r2
 8011fe8:	b29a      	uxth	r2, r3
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011ff0:	697b      	ldr	r3, [r7, #20]
 8011ff2:	681a      	ldr	r2, [r3, #0]
 8011ff4:	69fb      	ldr	r3, [r7, #28]
 8011ff6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011ff8:	697b      	ldr	r3, [r7, #20]
 8011ffa:	69fa      	ldr	r2, [r7, #28]
 8011ffc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011ffe:	69fb      	ldr	r3, [r7, #28]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d103      	bne.n	801200e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	2200      	movs	r2, #0
 801200a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801200e:	2300      	movs	r3, #0
 8012010:	e016      	b.n	8012040 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012012:	bf00      	nop
 8012014:	e002      	b.n	801201c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012016:	bf00      	nop
 8012018:	e000      	b.n	801201c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801201a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801201c:	69fb      	ldr	r3, [r7, #28]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d006      	beq.n	8012030 <tcp_split_unsent_seg+0x25c>
 8012022:	4b09      	ldr	r3, [pc, #36]	; (8012048 <tcp_split_unsent_seg+0x274>)
 8012024:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012028:	490d      	ldr	r1, [pc, #52]	; (8012060 <tcp_split_unsent_seg+0x28c>)
 801202a:	4809      	ldr	r0, [pc, #36]	; (8012050 <tcp_split_unsent_seg+0x27c>)
 801202c:	f008 f84e 	bl	801a0cc <iprintf>
  if (p != NULL) {
 8012030:	693b      	ldr	r3, [r7, #16]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d002      	beq.n	801203c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012036:	6938      	ldr	r0, [r7, #16]
 8012038:	f7fa fda8 	bl	800cb8c <pbuf_free>
  }

  return ERR_MEM;
 801203c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012040:	4618      	mov	r0, r3
 8012042:	3724      	adds	r7, #36	; 0x24
 8012044:	46bd      	mov	sp, r7
 8012046:	bd90      	pop	{r4, r7, pc}
 8012048:	0801e920 	.word	0x0801e920
 801204c:	0801ecb4 	.word	0x0801ecb4
 8012050:	0801e974 	.word	0x0801e974
 8012054:	0801ecd8 	.word	0x0801ecd8
 8012058:	0801ecfc 	.word	0x0801ecfc
 801205c:	0801ed0c 	.word	0x0801ed0c
 8012060:	0801ed1c 	.word	0x0801ed1c

08012064 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012064:	b590      	push	{r4, r7, lr}
 8012066:	b085      	sub	sp, #20
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d106      	bne.n	8012080 <tcp_send_fin+0x1c>
 8012072:	4b21      	ldr	r3, [pc, #132]	; (80120f8 <tcp_send_fin+0x94>)
 8012074:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012078:	4920      	ldr	r1, [pc, #128]	; (80120fc <tcp_send_fin+0x98>)
 801207a:	4821      	ldr	r0, [pc, #132]	; (8012100 <tcp_send_fin+0x9c>)
 801207c:	f008 f826 	bl	801a0cc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012084:	2b00      	cmp	r3, #0
 8012086:	d02e      	beq.n	80120e6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801208c:	60fb      	str	r3, [r7, #12]
 801208e:	e002      	b.n	8012096 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d1f8      	bne.n	8012090 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	68db      	ldr	r3, [r3, #12]
 80120a2:	899b      	ldrh	r3, [r3, #12]
 80120a4:	b29b      	uxth	r3, r3
 80120a6:	4618      	mov	r0, r3
 80120a8:	f7f9 f97e 	bl	800b3a8 <lwip_htons>
 80120ac:	4603      	mov	r3, r0
 80120ae:	b2db      	uxtb	r3, r3
 80120b0:	f003 0307 	and.w	r3, r3, #7
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d116      	bne.n	80120e6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	68db      	ldr	r3, [r3, #12]
 80120bc:	899b      	ldrh	r3, [r3, #12]
 80120be:	b29c      	uxth	r4, r3
 80120c0:	2001      	movs	r0, #1
 80120c2:	f7f9 f971 	bl	800b3a8 <lwip_htons>
 80120c6:	4603      	mov	r3, r0
 80120c8:	461a      	mov	r2, r3
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	68db      	ldr	r3, [r3, #12]
 80120ce:	4322      	orrs	r2, r4
 80120d0:	b292      	uxth	r2, r2
 80120d2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	8b5b      	ldrh	r3, [r3, #26]
 80120d8:	f043 0320 	orr.w	r3, r3, #32
 80120dc:	b29a      	uxth	r2, r3
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80120e2:	2300      	movs	r3, #0
 80120e4:	e004      	b.n	80120f0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80120e6:	2101      	movs	r1, #1
 80120e8:	6878      	ldr	r0, [r7, #4]
 80120ea:	f000 f80b 	bl	8012104 <tcp_enqueue_flags>
 80120ee:	4603      	mov	r3, r0
}
 80120f0:	4618      	mov	r0, r3
 80120f2:	3714      	adds	r7, #20
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd90      	pop	{r4, r7, pc}
 80120f8:	0801e920 	.word	0x0801e920
 80120fc:	0801ed28 	.word	0x0801ed28
 8012100:	0801e974 	.word	0x0801e974

08012104 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b08a      	sub	sp, #40	; 0x28
 8012108:	af02      	add	r7, sp, #8
 801210a:	6078      	str	r0, [r7, #4]
 801210c:	460b      	mov	r3, r1
 801210e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012110:	2300      	movs	r3, #0
 8012112:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012114:	2300      	movs	r3, #0
 8012116:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012118:	78fb      	ldrb	r3, [r7, #3]
 801211a:	f003 0303 	and.w	r3, r3, #3
 801211e:	2b00      	cmp	r3, #0
 8012120:	d106      	bne.n	8012130 <tcp_enqueue_flags+0x2c>
 8012122:	4b67      	ldr	r3, [pc, #412]	; (80122c0 <tcp_enqueue_flags+0x1bc>)
 8012124:	f240 4211 	movw	r2, #1041	; 0x411
 8012128:	4966      	ldr	r1, [pc, #408]	; (80122c4 <tcp_enqueue_flags+0x1c0>)
 801212a:	4867      	ldr	r0, [pc, #412]	; (80122c8 <tcp_enqueue_flags+0x1c4>)
 801212c:	f007 ffce 	bl	801a0cc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d106      	bne.n	8012144 <tcp_enqueue_flags+0x40>
 8012136:	4b62      	ldr	r3, [pc, #392]	; (80122c0 <tcp_enqueue_flags+0x1bc>)
 8012138:	f240 4213 	movw	r2, #1043	; 0x413
 801213c:	4963      	ldr	r1, [pc, #396]	; (80122cc <tcp_enqueue_flags+0x1c8>)
 801213e:	4862      	ldr	r0, [pc, #392]	; (80122c8 <tcp_enqueue_flags+0x1c4>)
 8012140:	f007 ffc4 	bl	801a0cc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012144:	78fb      	ldrb	r3, [r7, #3]
 8012146:	f003 0302 	and.w	r3, r3, #2
 801214a:	2b00      	cmp	r3, #0
 801214c:	d001      	beq.n	8012152 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801214e:	2301      	movs	r3, #1
 8012150:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012152:	7ffb      	ldrb	r3, [r7, #31]
 8012154:	009b      	lsls	r3, r3, #2
 8012156:	b2db      	uxtb	r3, r3
 8012158:	f003 0304 	and.w	r3, r3, #4
 801215c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801215e:	7dfb      	ldrb	r3, [r7, #23]
 8012160:	b29b      	uxth	r3, r3
 8012162:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012166:	4619      	mov	r1, r3
 8012168:	2036      	movs	r0, #54	; 0x36
 801216a:	f7fa fa2b 	bl	800c5c4 <pbuf_alloc>
 801216e:	6138      	str	r0, [r7, #16]
 8012170:	693b      	ldr	r3, [r7, #16]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d109      	bne.n	801218a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	8b5b      	ldrh	r3, [r3, #26]
 801217a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801217e:	b29a      	uxth	r2, r3
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012184:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012188:	e095      	b.n	80122b6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801218a:	693b      	ldr	r3, [r7, #16]
 801218c:	895a      	ldrh	r2, [r3, #10]
 801218e:	7dfb      	ldrb	r3, [r7, #23]
 8012190:	b29b      	uxth	r3, r3
 8012192:	429a      	cmp	r2, r3
 8012194:	d206      	bcs.n	80121a4 <tcp_enqueue_flags+0xa0>
 8012196:	4b4a      	ldr	r3, [pc, #296]	; (80122c0 <tcp_enqueue_flags+0x1bc>)
 8012198:	f240 4239 	movw	r2, #1081	; 0x439
 801219c:	494c      	ldr	r1, [pc, #304]	; (80122d0 <tcp_enqueue_flags+0x1cc>)
 801219e:	484a      	ldr	r0, [pc, #296]	; (80122c8 <tcp_enqueue_flags+0x1c4>)
 80121a0:	f007 ff94 	bl	801a0cc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80121a8:	78fa      	ldrb	r2, [r7, #3]
 80121aa:	7ffb      	ldrb	r3, [r7, #31]
 80121ac:	9300      	str	r3, [sp, #0]
 80121ae:	460b      	mov	r3, r1
 80121b0:	6939      	ldr	r1, [r7, #16]
 80121b2:	6878      	ldr	r0, [r7, #4]
 80121b4:	f7ff f918 	bl	80113e8 <tcp_create_segment>
 80121b8:	60f8      	str	r0, [r7, #12]
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d109      	bne.n	80121d4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	8b5b      	ldrh	r3, [r3, #26]
 80121c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121c8:	b29a      	uxth	r2, r3
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80121ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80121d2:	e070      	b.n	80122b6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	68db      	ldr	r3, [r3, #12]
 80121d8:	f003 0303 	and.w	r3, r3, #3
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d006      	beq.n	80121ee <tcp_enqueue_flags+0xea>
 80121e0:	4b37      	ldr	r3, [pc, #220]	; (80122c0 <tcp_enqueue_flags+0x1bc>)
 80121e2:	f240 4242 	movw	r2, #1090	; 0x442
 80121e6:	493b      	ldr	r1, [pc, #236]	; (80122d4 <tcp_enqueue_flags+0x1d0>)
 80121e8:	4837      	ldr	r0, [pc, #220]	; (80122c8 <tcp_enqueue_flags+0x1c4>)
 80121ea:	f007 ff6f 	bl	801a0cc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	891b      	ldrh	r3, [r3, #8]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d006      	beq.n	8012204 <tcp_enqueue_flags+0x100>
 80121f6:	4b32      	ldr	r3, [pc, #200]	; (80122c0 <tcp_enqueue_flags+0x1bc>)
 80121f8:	f240 4243 	movw	r2, #1091	; 0x443
 80121fc:	4936      	ldr	r1, [pc, #216]	; (80122d8 <tcp_enqueue_flags+0x1d4>)
 80121fe:	4832      	ldr	r0, [pc, #200]	; (80122c8 <tcp_enqueue_flags+0x1c4>)
 8012200:	f007 ff64 	bl	801a0cc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012208:	2b00      	cmp	r3, #0
 801220a:	d103      	bne.n	8012214 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	68fa      	ldr	r2, [r7, #12]
 8012210:	66da      	str	r2, [r3, #108]	; 0x6c
 8012212:	e00d      	b.n	8012230 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012218:	61bb      	str	r3, [r7, #24]
 801221a:	e002      	b.n	8012222 <tcp_enqueue_flags+0x11e>
 801221c:	69bb      	ldr	r3, [r7, #24]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	61bb      	str	r3, [r7, #24]
 8012222:	69bb      	ldr	r3, [r7, #24]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d1f8      	bne.n	801221c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801222a:	69bb      	ldr	r3, [r7, #24]
 801222c:	68fa      	ldr	r2, [r7, #12]
 801222e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	2200      	movs	r2, #0
 8012234:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012238:	78fb      	ldrb	r3, [r7, #3]
 801223a:	f003 0302 	and.w	r3, r3, #2
 801223e:	2b00      	cmp	r3, #0
 8012240:	d104      	bne.n	801224c <tcp_enqueue_flags+0x148>
 8012242:	78fb      	ldrb	r3, [r7, #3]
 8012244:	f003 0301 	and.w	r3, r3, #1
 8012248:	2b00      	cmp	r3, #0
 801224a:	d004      	beq.n	8012256 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012250:	1c5a      	adds	r2, r3, #1
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012256:	78fb      	ldrb	r3, [r7, #3]
 8012258:	f003 0301 	and.w	r3, r3, #1
 801225c:	2b00      	cmp	r3, #0
 801225e:	d006      	beq.n	801226e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	8b5b      	ldrh	r3, [r3, #26]
 8012264:	f043 0320 	orr.w	r3, r3, #32
 8012268:	b29a      	uxth	r2, r3
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	685b      	ldr	r3, [r3, #4]
 8012272:	4618      	mov	r0, r3
 8012274:	f7fa fd18 	bl	800cca8 <pbuf_clen>
 8012278:	4603      	mov	r3, r0
 801227a:	461a      	mov	r2, r3
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012282:	4413      	add	r3, r2
 8012284:	b29a      	uxth	r2, r3
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012292:	2b00      	cmp	r3, #0
 8012294:	d00e      	beq.n	80122b4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801229a:	2b00      	cmp	r3, #0
 801229c:	d10a      	bne.n	80122b4 <tcp_enqueue_flags+0x1b0>
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d106      	bne.n	80122b4 <tcp_enqueue_flags+0x1b0>
 80122a6:	4b06      	ldr	r3, [pc, #24]	; (80122c0 <tcp_enqueue_flags+0x1bc>)
 80122a8:	f240 4265 	movw	r2, #1125	; 0x465
 80122ac:	490b      	ldr	r1, [pc, #44]	; (80122dc <tcp_enqueue_flags+0x1d8>)
 80122ae:	4806      	ldr	r0, [pc, #24]	; (80122c8 <tcp_enqueue_flags+0x1c4>)
 80122b0:	f007 ff0c 	bl	801a0cc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80122b4:	2300      	movs	r3, #0
}
 80122b6:	4618      	mov	r0, r3
 80122b8:	3720      	adds	r7, #32
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}
 80122be:	bf00      	nop
 80122c0:	0801e920 	.word	0x0801e920
 80122c4:	0801ed44 	.word	0x0801ed44
 80122c8:	0801e974 	.word	0x0801e974
 80122cc:	0801ed9c 	.word	0x0801ed9c
 80122d0:	0801edbc 	.word	0x0801edbc
 80122d4:	0801edf8 	.word	0x0801edf8
 80122d8:	0801ee10 	.word	0x0801ee10
 80122dc:	0801ee3c 	.word	0x0801ee3c

080122e0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80122e0:	b5b0      	push	{r4, r5, r7, lr}
 80122e2:	b08a      	sub	sp, #40	; 0x28
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d106      	bne.n	80122fc <tcp_output+0x1c>
 80122ee:	4b8a      	ldr	r3, [pc, #552]	; (8012518 <tcp_output+0x238>)
 80122f0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80122f4:	4989      	ldr	r1, [pc, #548]	; (801251c <tcp_output+0x23c>)
 80122f6:	488a      	ldr	r0, [pc, #552]	; (8012520 <tcp_output+0x240>)
 80122f8:	f007 fee8 	bl	801a0cc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	7d1b      	ldrb	r3, [r3, #20]
 8012300:	2b01      	cmp	r3, #1
 8012302:	d106      	bne.n	8012312 <tcp_output+0x32>
 8012304:	4b84      	ldr	r3, [pc, #528]	; (8012518 <tcp_output+0x238>)
 8012306:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801230a:	4986      	ldr	r1, [pc, #536]	; (8012524 <tcp_output+0x244>)
 801230c:	4884      	ldr	r0, [pc, #528]	; (8012520 <tcp_output+0x240>)
 801230e:	f007 fedd 	bl	801a0cc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012312:	4b85      	ldr	r3, [pc, #532]	; (8012528 <tcp_output+0x248>)
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	687a      	ldr	r2, [r7, #4]
 8012318:	429a      	cmp	r2, r3
 801231a:	d101      	bne.n	8012320 <tcp_output+0x40>
    return ERR_OK;
 801231c:	2300      	movs	r3, #0
 801231e:	e1ce      	b.n	80126be <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801232c:	4293      	cmp	r3, r2
 801232e:	bf28      	it	cs
 8012330:	4613      	movcs	r3, r2
 8012332:	b29b      	uxth	r3, r3
 8012334:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801233a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801233e:	2b00      	cmp	r3, #0
 8012340:	d10b      	bne.n	801235a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	8b5b      	ldrh	r3, [r3, #26]
 8012346:	f003 0302 	and.w	r3, r3, #2
 801234a:	2b00      	cmp	r3, #0
 801234c:	f000 81aa 	beq.w	80126a4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012350:	6878      	ldr	r0, [r7, #4]
 8012352:	f000 fdcb 	bl	8012eec <tcp_send_empty_ack>
 8012356:	4603      	mov	r3, r0
 8012358:	e1b1      	b.n	80126be <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801235a:	6879      	ldr	r1, [r7, #4]
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	3304      	adds	r3, #4
 8012360:	461a      	mov	r2, r3
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f7ff f824 	bl	80113b0 <tcp_route>
 8012368:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801236a:	697b      	ldr	r3, [r7, #20]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d102      	bne.n	8012376 <tcp_output+0x96>
    return ERR_RTE;
 8012370:	f06f 0303 	mvn.w	r3, #3
 8012374:	e1a3      	b.n	80126be <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d003      	beq.n	8012384 <tcp_output+0xa4>
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d111      	bne.n	80123a8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d002      	beq.n	8012390 <tcp_output+0xb0>
 801238a:	697b      	ldr	r3, [r7, #20]
 801238c:	3304      	adds	r3, #4
 801238e:	e000      	b.n	8012392 <tcp_output+0xb2>
 8012390:	2300      	movs	r3, #0
 8012392:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012394:	693b      	ldr	r3, [r7, #16]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d102      	bne.n	80123a0 <tcp_output+0xc0>
      return ERR_RTE;
 801239a:	f06f 0303 	mvn.w	r3, #3
 801239e:	e18e      	b.n	80126be <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80123a0:	693b      	ldr	r3, [r7, #16]
 80123a2:	681a      	ldr	r2, [r3, #0]
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80123a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123aa:	68db      	ldr	r3, [r3, #12]
 80123ac:	685b      	ldr	r3, [r3, #4]
 80123ae:	4618      	mov	r0, r3
 80123b0:	f7f9 f80f 	bl	800b3d2 <lwip_htonl>
 80123b4:	4602      	mov	r2, r0
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80123ba:	1ad3      	subs	r3, r2, r3
 80123bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123be:	8912      	ldrh	r2, [r2, #8]
 80123c0:	4413      	add	r3, r2
 80123c2:	69ba      	ldr	r2, [r7, #24]
 80123c4:	429a      	cmp	r2, r3
 80123c6:	d227      	bcs.n	8012418 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80123ce:	461a      	mov	r2, r3
 80123d0:	69bb      	ldr	r3, [r7, #24]
 80123d2:	4293      	cmp	r3, r2
 80123d4:	d114      	bne.n	8012400 <tcp_output+0x120>
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d110      	bne.n	8012400 <tcp_output+0x120>
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d10b      	bne.n	8012400 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	2200      	movs	r2, #0
 80123ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	2201      	movs	r2, #1
 80123f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	2200      	movs	r2, #0
 80123fc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	8b5b      	ldrh	r3, [r3, #26]
 8012404:	f003 0302 	and.w	r3, r3, #2
 8012408:	2b00      	cmp	r3, #0
 801240a:	f000 814d 	beq.w	80126a8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801240e:	6878      	ldr	r0, [r7, #4]
 8012410:	f000 fd6c 	bl	8012eec <tcp_send_empty_ack>
 8012414:	4603      	mov	r3, r0
 8012416:	e152      	b.n	80126be <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	2200      	movs	r2, #0
 801241c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012424:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012426:	6a3b      	ldr	r3, [r7, #32]
 8012428:	2b00      	cmp	r3, #0
 801242a:	f000 811c 	beq.w	8012666 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801242e:	e002      	b.n	8012436 <tcp_output+0x156>
 8012430:	6a3b      	ldr	r3, [r7, #32]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	623b      	str	r3, [r7, #32]
 8012436:	6a3b      	ldr	r3, [r7, #32]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d1f8      	bne.n	8012430 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801243e:	e112      	b.n	8012666 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012442:	68db      	ldr	r3, [r3, #12]
 8012444:	899b      	ldrh	r3, [r3, #12]
 8012446:	b29b      	uxth	r3, r3
 8012448:	4618      	mov	r0, r3
 801244a:	f7f8 ffad 	bl	800b3a8 <lwip_htons>
 801244e:	4603      	mov	r3, r0
 8012450:	b2db      	uxtb	r3, r3
 8012452:	f003 0304 	and.w	r3, r3, #4
 8012456:	2b00      	cmp	r3, #0
 8012458:	d006      	beq.n	8012468 <tcp_output+0x188>
 801245a:	4b2f      	ldr	r3, [pc, #188]	; (8012518 <tcp_output+0x238>)
 801245c:	f240 5236 	movw	r2, #1334	; 0x536
 8012460:	4932      	ldr	r1, [pc, #200]	; (801252c <tcp_output+0x24c>)
 8012462:	482f      	ldr	r0, [pc, #188]	; (8012520 <tcp_output+0x240>)
 8012464:	f007 fe32 	bl	801a0cc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801246c:	2b00      	cmp	r3, #0
 801246e:	d01f      	beq.n	80124b0 <tcp_output+0x1d0>
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	8b5b      	ldrh	r3, [r3, #26]
 8012474:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012478:	2b00      	cmp	r3, #0
 801247a:	d119      	bne.n	80124b0 <tcp_output+0x1d0>
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012480:	2b00      	cmp	r3, #0
 8012482:	d00b      	beq.n	801249c <tcp_output+0x1bc>
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d110      	bne.n	80124b0 <tcp_output+0x1d0>
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012492:	891a      	ldrh	r2, [r3, #8]
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012498:	429a      	cmp	r2, r3
 801249a:	d209      	bcs.n	80124b0 <tcp_output+0x1d0>
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d004      	beq.n	80124b0 <tcp_output+0x1d0>
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80124ac:	2b0f      	cmp	r3, #15
 80124ae:	d901      	bls.n	80124b4 <tcp_output+0x1d4>
 80124b0:	2301      	movs	r3, #1
 80124b2:	e000      	b.n	80124b6 <tcp_output+0x1d6>
 80124b4:	2300      	movs	r3, #0
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d106      	bne.n	80124c8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	8b5b      	ldrh	r3, [r3, #26]
 80124be:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	f000 80e4 	beq.w	8012690 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	7d1b      	ldrb	r3, [r3, #20]
 80124cc:	2b02      	cmp	r3, #2
 80124ce:	d00d      	beq.n	80124ec <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80124d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124d2:	68db      	ldr	r3, [r3, #12]
 80124d4:	899b      	ldrh	r3, [r3, #12]
 80124d6:	b29c      	uxth	r4, r3
 80124d8:	2010      	movs	r0, #16
 80124da:	f7f8 ff65 	bl	800b3a8 <lwip_htons>
 80124de:	4603      	mov	r3, r0
 80124e0:	461a      	mov	r2, r3
 80124e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e4:	68db      	ldr	r3, [r3, #12]
 80124e6:	4322      	orrs	r2, r4
 80124e8:	b292      	uxth	r2, r2
 80124ea:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80124ec:	697a      	ldr	r2, [r7, #20]
 80124ee:	6879      	ldr	r1, [r7, #4]
 80124f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80124f2:	f000 f909 	bl	8012708 <tcp_output_segment>
 80124f6:	4603      	mov	r3, r0
 80124f8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80124fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d016      	beq.n	8012530 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	8b5b      	ldrh	r3, [r3, #26]
 8012506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801250a:	b29a      	uxth	r2, r3
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	835a      	strh	r2, [r3, #26]
      return err;
 8012510:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012514:	e0d3      	b.n	80126be <tcp_output+0x3de>
 8012516:	bf00      	nop
 8012518:	0801e920 	.word	0x0801e920
 801251c:	0801ee64 	.word	0x0801ee64
 8012520:	0801e974 	.word	0x0801e974
 8012524:	0801ee7c 	.word	0x0801ee7c
 8012528:	200114c8 	.word	0x200114c8
 801252c:	0801eea4 	.word	0x0801eea4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012532:	681a      	ldr	r2, [r3, #0]
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	7d1b      	ldrb	r3, [r3, #20]
 801253c:	2b02      	cmp	r3, #2
 801253e:	d006      	beq.n	801254e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	8b5b      	ldrh	r3, [r3, #26]
 8012544:	f023 0303 	bic.w	r3, r3, #3
 8012548:	b29a      	uxth	r2, r3
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012550:	68db      	ldr	r3, [r3, #12]
 8012552:	685b      	ldr	r3, [r3, #4]
 8012554:	4618      	mov	r0, r3
 8012556:	f7f8 ff3c 	bl	800b3d2 <lwip_htonl>
 801255a:	4604      	mov	r4, r0
 801255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801255e:	891b      	ldrh	r3, [r3, #8]
 8012560:	461d      	mov	r5, r3
 8012562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012564:	68db      	ldr	r3, [r3, #12]
 8012566:	899b      	ldrh	r3, [r3, #12]
 8012568:	b29b      	uxth	r3, r3
 801256a:	4618      	mov	r0, r3
 801256c:	f7f8 ff1c 	bl	800b3a8 <lwip_htons>
 8012570:	4603      	mov	r3, r0
 8012572:	b2db      	uxtb	r3, r3
 8012574:	f003 0303 	and.w	r3, r3, #3
 8012578:	2b00      	cmp	r3, #0
 801257a:	d001      	beq.n	8012580 <tcp_output+0x2a0>
 801257c:	2301      	movs	r3, #1
 801257e:	e000      	b.n	8012582 <tcp_output+0x2a2>
 8012580:	2300      	movs	r3, #0
 8012582:	442b      	add	r3, r5
 8012584:	4423      	add	r3, r4
 8012586:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801258c:	68bb      	ldr	r3, [r7, #8]
 801258e:	1ad3      	subs	r3, r2, r3
 8012590:	2b00      	cmp	r3, #0
 8012592:	da02      	bge.n	801259a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	68ba      	ldr	r2, [r7, #8]
 8012598:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801259c:	891b      	ldrh	r3, [r3, #8]
 801259e:	461c      	mov	r4, r3
 80125a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125a2:	68db      	ldr	r3, [r3, #12]
 80125a4:	899b      	ldrh	r3, [r3, #12]
 80125a6:	b29b      	uxth	r3, r3
 80125a8:	4618      	mov	r0, r3
 80125aa:	f7f8 fefd 	bl	800b3a8 <lwip_htons>
 80125ae:	4603      	mov	r3, r0
 80125b0:	b2db      	uxtb	r3, r3
 80125b2:	f003 0303 	and.w	r3, r3, #3
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d001      	beq.n	80125be <tcp_output+0x2de>
 80125ba:	2301      	movs	r3, #1
 80125bc:	e000      	b.n	80125c0 <tcp_output+0x2e0>
 80125be:	2300      	movs	r3, #0
 80125c0:	4423      	add	r3, r4
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d049      	beq.n	801265a <tcp_output+0x37a>
      seg->next = NULL;
 80125c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125c8:	2200      	movs	r2, #0
 80125ca:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d105      	bne.n	80125e0 <tcp_output+0x300>
        pcb->unacked = seg;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125d8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80125da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125dc:	623b      	str	r3, [r7, #32]
 80125de:	e03f      	b.n	8012660 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80125e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e2:	68db      	ldr	r3, [r3, #12]
 80125e4:	685b      	ldr	r3, [r3, #4]
 80125e6:	4618      	mov	r0, r3
 80125e8:	f7f8 fef3 	bl	800b3d2 <lwip_htonl>
 80125ec:	4604      	mov	r4, r0
 80125ee:	6a3b      	ldr	r3, [r7, #32]
 80125f0:	68db      	ldr	r3, [r3, #12]
 80125f2:	685b      	ldr	r3, [r3, #4]
 80125f4:	4618      	mov	r0, r3
 80125f6:	f7f8 feec 	bl	800b3d2 <lwip_htonl>
 80125fa:	4603      	mov	r3, r0
 80125fc:	1ae3      	subs	r3, r4, r3
 80125fe:	2b00      	cmp	r3, #0
 8012600:	da24      	bge.n	801264c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	3370      	adds	r3, #112	; 0x70
 8012606:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012608:	e002      	b.n	8012610 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801260a:	69fb      	ldr	r3, [r7, #28]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012610:	69fb      	ldr	r3, [r7, #28]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d011      	beq.n	801263c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012618:	69fb      	ldr	r3, [r7, #28]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	68db      	ldr	r3, [r3, #12]
 801261e:	685b      	ldr	r3, [r3, #4]
 8012620:	4618      	mov	r0, r3
 8012622:	f7f8 fed6 	bl	800b3d2 <lwip_htonl>
 8012626:	4604      	mov	r4, r0
 8012628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801262a:	68db      	ldr	r3, [r3, #12]
 801262c:	685b      	ldr	r3, [r3, #4]
 801262e:	4618      	mov	r0, r3
 8012630:	f7f8 fecf 	bl	800b3d2 <lwip_htonl>
 8012634:	4603      	mov	r3, r0
 8012636:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012638:	2b00      	cmp	r3, #0
 801263a:	dbe6      	blt.n	801260a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801263c:	69fb      	ldr	r3, [r7, #28]
 801263e:	681a      	ldr	r2, [r3, #0]
 8012640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012642:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012644:	69fb      	ldr	r3, [r7, #28]
 8012646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012648:	601a      	str	r2, [r3, #0]
 801264a:	e009      	b.n	8012660 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801264c:	6a3b      	ldr	r3, [r7, #32]
 801264e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012650:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012652:	6a3b      	ldr	r3, [r7, #32]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	623b      	str	r3, [r7, #32]
 8012658:	e002      	b.n	8012660 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801265a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801265c:	f7fb ff19 	bl	800e492 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012664:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012668:	2b00      	cmp	r3, #0
 801266a:	d012      	beq.n	8012692 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801266e:	68db      	ldr	r3, [r3, #12]
 8012670:	685b      	ldr	r3, [r3, #4]
 8012672:	4618      	mov	r0, r3
 8012674:	f7f8 fead 	bl	800b3d2 <lwip_htonl>
 8012678:	4602      	mov	r2, r0
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801267e:	1ad3      	subs	r3, r2, r3
 8012680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012682:	8912      	ldrh	r2, [r2, #8]
 8012684:	4413      	add	r3, r2
  while (seg != NULL &&
 8012686:	69ba      	ldr	r2, [r7, #24]
 8012688:	429a      	cmp	r2, r3
 801268a:	f4bf aed9 	bcs.w	8012440 <tcp_output+0x160>
 801268e:	e000      	b.n	8012692 <tcp_output+0x3b2>
      break;
 8012690:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012696:	2b00      	cmp	r3, #0
 8012698:	d108      	bne.n	80126ac <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	2200      	movs	r2, #0
 801269e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80126a2:	e004      	b.n	80126ae <tcp_output+0x3ce>
    goto output_done;
 80126a4:	bf00      	nop
 80126a6:	e002      	b.n	80126ae <tcp_output+0x3ce>
    goto output_done;
 80126a8:	bf00      	nop
 80126aa:	e000      	b.n	80126ae <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80126ac:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	8b5b      	ldrh	r3, [r3, #26]
 80126b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80126b6:	b29a      	uxth	r2, r3
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80126bc:	2300      	movs	r3, #0
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3728      	adds	r7, #40	; 0x28
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bdb0      	pop	{r4, r5, r7, pc}
 80126c6:	bf00      	nop

080126c8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b082      	sub	sp, #8
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d106      	bne.n	80126e4 <tcp_output_segment_busy+0x1c>
 80126d6:	4b09      	ldr	r3, [pc, #36]	; (80126fc <tcp_output_segment_busy+0x34>)
 80126d8:	f240 529a 	movw	r2, #1434	; 0x59a
 80126dc:	4908      	ldr	r1, [pc, #32]	; (8012700 <tcp_output_segment_busy+0x38>)
 80126de:	4809      	ldr	r0, [pc, #36]	; (8012704 <tcp_output_segment_busy+0x3c>)
 80126e0:	f007 fcf4 	bl	801a0cc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	685b      	ldr	r3, [r3, #4]
 80126e8:	7b9b      	ldrb	r3, [r3, #14]
 80126ea:	2b01      	cmp	r3, #1
 80126ec:	d001      	beq.n	80126f2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80126ee:	2301      	movs	r3, #1
 80126f0:	e000      	b.n	80126f4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80126f2:	2300      	movs	r3, #0
}
 80126f4:	4618      	mov	r0, r3
 80126f6:	3708      	adds	r7, #8
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd80      	pop	{r7, pc}
 80126fc:	0801e920 	.word	0x0801e920
 8012700:	0801eebc 	.word	0x0801eebc
 8012704:	0801e974 	.word	0x0801e974

08012708 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012708:	b5b0      	push	{r4, r5, r7, lr}
 801270a:	b08c      	sub	sp, #48	; 0x30
 801270c:	af04      	add	r7, sp, #16
 801270e:	60f8      	str	r0, [r7, #12]
 8012710:	60b9      	str	r1, [r7, #8]
 8012712:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d106      	bne.n	8012728 <tcp_output_segment+0x20>
 801271a:	4b63      	ldr	r3, [pc, #396]	; (80128a8 <tcp_output_segment+0x1a0>)
 801271c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012720:	4962      	ldr	r1, [pc, #392]	; (80128ac <tcp_output_segment+0x1a4>)
 8012722:	4863      	ldr	r0, [pc, #396]	; (80128b0 <tcp_output_segment+0x1a8>)
 8012724:	f007 fcd2 	bl	801a0cc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012728:	68bb      	ldr	r3, [r7, #8]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d106      	bne.n	801273c <tcp_output_segment+0x34>
 801272e:	4b5e      	ldr	r3, [pc, #376]	; (80128a8 <tcp_output_segment+0x1a0>)
 8012730:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012734:	495f      	ldr	r1, [pc, #380]	; (80128b4 <tcp_output_segment+0x1ac>)
 8012736:	485e      	ldr	r0, [pc, #376]	; (80128b0 <tcp_output_segment+0x1a8>)
 8012738:	f007 fcc8 	bl	801a0cc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d106      	bne.n	8012750 <tcp_output_segment+0x48>
 8012742:	4b59      	ldr	r3, [pc, #356]	; (80128a8 <tcp_output_segment+0x1a0>)
 8012744:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012748:	495b      	ldr	r1, [pc, #364]	; (80128b8 <tcp_output_segment+0x1b0>)
 801274a:	4859      	ldr	r0, [pc, #356]	; (80128b0 <tcp_output_segment+0x1a8>)
 801274c:	f007 fcbe 	bl	801a0cc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012750:	68f8      	ldr	r0, [r7, #12]
 8012752:	f7ff ffb9 	bl	80126c8 <tcp_output_segment_busy>
 8012756:	4603      	mov	r3, r0
 8012758:	2b00      	cmp	r3, #0
 801275a:	d001      	beq.n	8012760 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801275c:	2300      	movs	r3, #0
 801275e:	e09f      	b.n	80128a0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012760:	68bb      	ldr	r3, [r7, #8]
 8012762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	68dc      	ldr	r4, [r3, #12]
 8012768:	4610      	mov	r0, r2
 801276a:	f7f8 fe32 	bl	800b3d2 <lwip_htonl>
 801276e:	4603      	mov	r3, r0
 8012770:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012772:	68bb      	ldr	r3, [r7, #8]
 8012774:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	68dc      	ldr	r4, [r3, #12]
 801277a:	4610      	mov	r0, r2
 801277c:	f7f8 fe14 	bl	800b3a8 <lwip_htons>
 8012780:	4603      	mov	r3, r0
 8012782:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012784:	68bb      	ldr	r3, [r7, #8]
 8012786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012788:	68ba      	ldr	r2, [r7, #8]
 801278a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801278c:	441a      	add	r2, r3
 801278e:	68bb      	ldr	r3, [r7, #8]
 8012790:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	68db      	ldr	r3, [r3, #12]
 8012796:	3314      	adds	r3, #20
 8012798:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	7a9b      	ldrb	r3, [r3, #10]
 801279e:	f003 0301 	and.w	r3, r3, #1
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d015      	beq.n	80127d2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80127a6:	68bb      	ldr	r3, [r7, #8]
 80127a8:	3304      	adds	r3, #4
 80127aa:	461a      	mov	r2, r3
 80127ac:	6879      	ldr	r1, [r7, #4]
 80127ae:	f44f 7006 	mov.w	r0, #536	; 0x218
 80127b2:	f7fc fa33 	bl	800ec1c <tcp_eff_send_mss_netif>
 80127b6:	4603      	mov	r3, r0
 80127b8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80127ba:	8b7b      	ldrh	r3, [r7, #26]
 80127bc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80127c0:	4618      	mov	r0, r3
 80127c2:	f7f8 fe06 	bl	800b3d2 <lwip_htonl>
 80127c6:	4602      	mov	r2, r0
 80127c8:	69fb      	ldr	r3, [r7, #28]
 80127ca:	601a      	str	r2, [r3, #0]
    opts += 1;
 80127cc:	69fb      	ldr	r3, [r7, #28]
 80127ce:	3304      	adds	r3, #4
 80127d0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80127d2:	68bb      	ldr	r3, [r7, #8]
 80127d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80127d8:	2b00      	cmp	r3, #0
 80127da:	da02      	bge.n	80127e2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80127dc:	68bb      	ldr	r3, [r7, #8]
 80127de:	2200      	movs	r2, #0
 80127e0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80127e2:	68bb      	ldr	r3, [r7, #8]
 80127e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d10c      	bne.n	8012804 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80127ea:	4b34      	ldr	r3, [pc, #208]	; (80128bc <tcp_output_segment+0x1b4>)
 80127ec:	681a      	ldr	r2, [r3, #0]
 80127ee:	68bb      	ldr	r3, [r7, #8]
 80127f0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	68db      	ldr	r3, [r3, #12]
 80127f6:	685b      	ldr	r3, [r3, #4]
 80127f8:	4618      	mov	r0, r3
 80127fa:	f7f8 fdea 	bl	800b3d2 <lwip_htonl>
 80127fe:	4602      	mov	r2, r0
 8012800:	68bb      	ldr	r3, [r7, #8]
 8012802:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	68da      	ldr	r2, [r3, #12]
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	685b      	ldr	r3, [r3, #4]
 801280c:	685b      	ldr	r3, [r3, #4]
 801280e:	1ad3      	subs	r3, r2, r3
 8012810:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	685b      	ldr	r3, [r3, #4]
 8012816:	8959      	ldrh	r1, [r3, #10]
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	685b      	ldr	r3, [r3, #4]
 801281c:	8b3a      	ldrh	r2, [r7, #24]
 801281e:	1a8a      	subs	r2, r1, r2
 8012820:	b292      	uxth	r2, r2
 8012822:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	685b      	ldr	r3, [r3, #4]
 8012828:	8919      	ldrh	r1, [r3, #8]
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	685b      	ldr	r3, [r3, #4]
 801282e:	8b3a      	ldrh	r2, [r7, #24]
 8012830:	1a8a      	subs	r2, r1, r2
 8012832:	b292      	uxth	r2, r2
 8012834:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	685b      	ldr	r3, [r3, #4]
 801283a:	68fa      	ldr	r2, [r7, #12]
 801283c:	68d2      	ldr	r2, [r2, #12]
 801283e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	68db      	ldr	r3, [r3, #12]
 8012844:	2200      	movs	r2, #0
 8012846:	741a      	strb	r2, [r3, #16]
 8012848:	2200      	movs	r2, #0
 801284a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	68db      	ldr	r3, [r3, #12]
 8012850:	f103 0214 	add.w	r2, r3, #20
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	7a9b      	ldrb	r3, [r3, #10]
 8012858:	009b      	lsls	r3, r3, #2
 801285a:	f003 0304 	and.w	r3, r3, #4
 801285e:	4413      	add	r3, r2
 8012860:	69fa      	ldr	r2, [r7, #28]
 8012862:	429a      	cmp	r2, r3
 8012864:	d006      	beq.n	8012874 <tcp_output_segment+0x16c>
 8012866:	4b10      	ldr	r3, [pc, #64]	; (80128a8 <tcp_output_segment+0x1a0>)
 8012868:	f240 621c 	movw	r2, #1564	; 0x61c
 801286c:	4914      	ldr	r1, [pc, #80]	; (80128c0 <tcp_output_segment+0x1b8>)
 801286e:	4810      	ldr	r0, [pc, #64]	; (80128b0 <tcp_output_segment+0x1a8>)
 8012870:	f007 fc2c 	bl	801a0cc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	6858      	ldr	r0, [r3, #4]
 8012878:	68b9      	ldr	r1, [r7, #8]
 801287a:	68bb      	ldr	r3, [r7, #8]
 801287c:	1d1c      	adds	r4, r3, #4
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	7add      	ldrb	r5, [r3, #11]
 8012882:	68bb      	ldr	r3, [r7, #8]
 8012884:	7a9b      	ldrb	r3, [r3, #10]
 8012886:	687a      	ldr	r2, [r7, #4]
 8012888:	9202      	str	r2, [sp, #8]
 801288a:	2206      	movs	r2, #6
 801288c:	9201      	str	r2, [sp, #4]
 801288e:	9300      	str	r3, [sp, #0]
 8012890:	462b      	mov	r3, r5
 8012892:	4622      	mov	r2, r4
 8012894:	f002 fbac 	bl	8014ff0 <ip4_output_if>
 8012898:	4603      	mov	r3, r0
 801289a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801289c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80128a0:	4618      	mov	r0, r3
 80128a2:	3720      	adds	r7, #32
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bdb0      	pop	{r4, r5, r7, pc}
 80128a8:	0801e920 	.word	0x0801e920
 80128ac:	0801eee4 	.word	0x0801eee4
 80128b0:	0801e974 	.word	0x0801e974
 80128b4:	0801ef04 	.word	0x0801ef04
 80128b8:	0801ef24 	.word	0x0801ef24
 80128bc:	2001147c 	.word	0x2001147c
 80128c0:	0801ef48 	.word	0x0801ef48

080128c4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80128c4:	b5b0      	push	{r4, r5, r7, lr}
 80128c6:	b084      	sub	sp, #16
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d106      	bne.n	80128e0 <tcp_rexmit_rto_prepare+0x1c>
 80128d2:	4b31      	ldr	r3, [pc, #196]	; (8012998 <tcp_rexmit_rto_prepare+0xd4>)
 80128d4:	f240 6263 	movw	r2, #1635	; 0x663
 80128d8:	4930      	ldr	r1, [pc, #192]	; (801299c <tcp_rexmit_rto_prepare+0xd8>)
 80128da:	4831      	ldr	r0, [pc, #196]	; (80129a0 <tcp_rexmit_rto_prepare+0xdc>)
 80128dc:	f007 fbf6 	bl	801a0cc <iprintf>

  if (pcb->unacked == NULL) {
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d102      	bne.n	80128ee <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80128e8:	f06f 0305 	mvn.w	r3, #5
 80128ec:	e050      	b.n	8012990 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128f2:	60fb      	str	r3, [r7, #12]
 80128f4:	e00b      	b.n	801290e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80128f6:	68f8      	ldr	r0, [r7, #12]
 80128f8:	f7ff fee6 	bl	80126c8 <tcp_output_segment_busy>
 80128fc:	4603      	mov	r3, r0
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d002      	beq.n	8012908 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012902:	f06f 0305 	mvn.w	r3, #5
 8012906:	e043      	b.n	8012990 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	60fb      	str	r3, [r7, #12]
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d1ef      	bne.n	80128f6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012916:	68f8      	ldr	r0, [r7, #12]
 8012918:	f7ff fed6 	bl	80126c8 <tcp_output_segment_busy>
 801291c:	4603      	mov	r3, r0
 801291e:	2b00      	cmp	r3, #0
 8012920:	d002      	beq.n	8012928 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012922:	f06f 0305 	mvn.w	r3, #5
 8012926:	e033      	b.n	8012990 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	2200      	movs	r2, #0
 801293c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	8b5b      	ldrh	r3, [r3, #26]
 8012942:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012946:	b29a      	uxth	r2, r3
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	68db      	ldr	r3, [r3, #12]
 8012950:	685b      	ldr	r3, [r3, #4]
 8012952:	4618      	mov	r0, r3
 8012954:	f7f8 fd3d 	bl	800b3d2 <lwip_htonl>
 8012958:	4604      	mov	r4, r0
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	891b      	ldrh	r3, [r3, #8]
 801295e:	461d      	mov	r5, r3
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	68db      	ldr	r3, [r3, #12]
 8012964:	899b      	ldrh	r3, [r3, #12]
 8012966:	b29b      	uxth	r3, r3
 8012968:	4618      	mov	r0, r3
 801296a:	f7f8 fd1d 	bl	800b3a8 <lwip_htons>
 801296e:	4603      	mov	r3, r0
 8012970:	b2db      	uxtb	r3, r3
 8012972:	f003 0303 	and.w	r3, r3, #3
 8012976:	2b00      	cmp	r3, #0
 8012978:	d001      	beq.n	801297e <tcp_rexmit_rto_prepare+0xba>
 801297a:	2301      	movs	r3, #1
 801297c:	e000      	b.n	8012980 <tcp_rexmit_rto_prepare+0xbc>
 801297e:	2300      	movs	r3, #0
 8012980:	442b      	add	r3, r5
 8012982:	18e2      	adds	r2, r4, r3
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2200      	movs	r2, #0
 801298c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801298e:	2300      	movs	r3, #0
}
 8012990:	4618      	mov	r0, r3
 8012992:	3710      	adds	r7, #16
 8012994:	46bd      	mov	sp, r7
 8012996:	bdb0      	pop	{r4, r5, r7, pc}
 8012998:	0801e920 	.word	0x0801e920
 801299c:	0801ef5c 	.word	0x0801ef5c
 80129a0:	0801e974 	.word	0x0801e974

080129a4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b082      	sub	sp, #8
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d106      	bne.n	80129c0 <tcp_rexmit_rto_commit+0x1c>
 80129b2:	4b0d      	ldr	r3, [pc, #52]	; (80129e8 <tcp_rexmit_rto_commit+0x44>)
 80129b4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80129b8:	490c      	ldr	r1, [pc, #48]	; (80129ec <tcp_rexmit_rto_commit+0x48>)
 80129ba:	480d      	ldr	r0, [pc, #52]	; (80129f0 <tcp_rexmit_rto_commit+0x4c>)
 80129bc:	f007 fb86 	bl	801a0cc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80129c6:	2bff      	cmp	r3, #255	; 0xff
 80129c8:	d007      	beq.n	80129da <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80129d0:	3301      	adds	r3, #1
 80129d2:	b2da      	uxtb	r2, r3
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80129da:	6878      	ldr	r0, [r7, #4]
 80129dc:	f7ff fc80 	bl	80122e0 <tcp_output>
}
 80129e0:	bf00      	nop
 80129e2:	3708      	adds	r7, #8
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}
 80129e8:	0801e920 	.word	0x0801e920
 80129ec:	0801ef80 	.word	0x0801ef80
 80129f0:	0801e974 	.word	0x0801e974

080129f4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b082      	sub	sp, #8
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d106      	bne.n	8012a10 <tcp_rexmit_rto+0x1c>
 8012a02:	4b0a      	ldr	r3, [pc, #40]	; (8012a2c <tcp_rexmit_rto+0x38>)
 8012a04:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012a08:	4909      	ldr	r1, [pc, #36]	; (8012a30 <tcp_rexmit_rto+0x3c>)
 8012a0a:	480a      	ldr	r0, [pc, #40]	; (8012a34 <tcp_rexmit_rto+0x40>)
 8012a0c:	f007 fb5e 	bl	801a0cc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f7ff ff57 	bl	80128c4 <tcp_rexmit_rto_prepare>
 8012a16:	4603      	mov	r3, r0
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d102      	bne.n	8012a22 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012a1c:	6878      	ldr	r0, [r7, #4]
 8012a1e:	f7ff ffc1 	bl	80129a4 <tcp_rexmit_rto_commit>
  }
}
 8012a22:	bf00      	nop
 8012a24:	3708      	adds	r7, #8
 8012a26:	46bd      	mov	sp, r7
 8012a28:	bd80      	pop	{r7, pc}
 8012a2a:	bf00      	nop
 8012a2c:	0801e920 	.word	0x0801e920
 8012a30:	0801efa4 	.word	0x0801efa4
 8012a34:	0801e974 	.word	0x0801e974

08012a38 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012a38:	b590      	push	{r4, r7, lr}
 8012a3a:	b085      	sub	sp, #20
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d106      	bne.n	8012a54 <tcp_rexmit+0x1c>
 8012a46:	4b2f      	ldr	r3, [pc, #188]	; (8012b04 <tcp_rexmit+0xcc>)
 8012a48:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012a4c:	492e      	ldr	r1, [pc, #184]	; (8012b08 <tcp_rexmit+0xd0>)
 8012a4e:	482f      	ldr	r0, [pc, #188]	; (8012b0c <tcp_rexmit+0xd4>)
 8012a50:	f007 fb3c 	bl	801a0cc <iprintf>

  if (pcb->unacked == NULL) {
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d102      	bne.n	8012a62 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012a5c:	f06f 0305 	mvn.w	r3, #5
 8012a60:	e04c      	b.n	8012afc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a66:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012a68:	68b8      	ldr	r0, [r7, #8]
 8012a6a:	f7ff fe2d 	bl	80126c8 <tcp_output_segment_busy>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d002      	beq.n	8012a7a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012a74:	f06f 0305 	mvn.w	r3, #5
 8012a78:	e040      	b.n	8012afc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012a7a:	68bb      	ldr	r3, [r7, #8]
 8012a7c:	681a      	ldr	r2, [r3, #0]
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	336c      	adds	r3, #108	; 0x6c
 8012a86:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012a88:	e002      	b.n	8012a90 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d011      	beq.n	8012abc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	68db      	ldr	r3, [r3, #12]
 8012a9e:	685b      	ldr	r3, [r3, #4]
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f7f8 fc96 	bl	800b3d2 <lwip_htonl>
 8012aa6:	4604      	mov	r4, r0
 8012aa8:	68bb      	ldr	r3, [r7, #8]
 8012aaa:	68db      	ldr	r3, [r3, #12]
 8012aac:	685b      	ldr	r3, [r3, #4]
 8012aae:	4618      	mov	r0, r3
 8012ab0:	f7f8 fc8f 	bl	800b3d2 <lwip_htonl>
 8012ab4:	4603      	mov	r3, r0
 8012ab6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	dbe6      	blt.n	8012a8a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	681a      	ldr	r2, [r3, #0]
 8012ac0:	68bb      	ldr	r3, [r7, #8]
 8012ac2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	68ba      	ldr	r2, [r7, #8]
 8012ac8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d103      	bne.n	8012ada <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012ae0:	2bff      	cmp	r3, #255	; 0xff
 8012ae2:	d007      	beq.n	8012af4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012aea:	3301      	adds	r3, #1
 8012aec:	b2da      	uxtb	r2, r3
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	2200      	movs	r2, #0
 8012af8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012afa:	2300      	movs	r3, #0
}
 8012afc:	4618      	mov	r0, r3
 8012afe:	3714      	adds	r7, #20
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd90      	pop	{r4, r7, pc}
 8012b04:	0801e920 	.word	0x0801e920
 8012b08:	0801efc0 	.word	0x0801efc0
 8012b0c:	0801e974 	.word	0x0801e974

08012b10 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b082      	sub	sp, #8
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d106      	bne.n	8012b2c <tcp_rexmit_fast+0x1c>
 8012b1e:	4b2a      	ldr	r3, [pc, #168]	; (8012bc8 <tcp_rexmit_fast+0xb8>)
 8012b20:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012b24:	4929      	ldr	r1, [pc, #164]	; (8012bcc <tcp_rexmit_fast+0xbc>)
 8012b26:	482a      	ldr	r0, [pc, #168]	; (8012bd0 <tcp_rexmit_fast+0xc0>)
 8012b28:	f007 fad0 	bl	801a0cc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d045      	beq.n	8012bc0 <tcp_rexmit_fast+0xb0>
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	8b5b      	ldrh	r3, [r3, #26]
 8012b38:	f003 0304 	and.w	r3, r3, #4
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d13f      	bne.n	8012bc0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f7ff ff79 	bl	8012a38 <tcp_rexmit>
 8012b46:	4603      	mov	r3, r0
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d139      	bne.n	8012bc0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012b58:	4293      	cmp	r3, r2
 8012b5a:	bf28      	it	cs
 8012b5c:	4613      	movcs	r3, r2
 8012b5e:	b29b      	uxth	r3, r3
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	da00      	bge.n	8012b66 <tcp_rexmit_fast+0x56>
 8012b64:	3301      	adds	r3, #1
 8012b66:	105b      	asrs	r3, r3, #1
 8012b68:	b29a      	uxth	r2, r3
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012b76:	461a      	mov	r2, r3
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b7c:	005b      	lsls	r3, r3, #1
 8012b7e:	429a      	cmp	r2, r3
 8012b80:	d206      	bcs.n	8012b90 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b86:	005b      	lsls	r3, r3, #1
 8012b88:	b29a      	uxth	r2, r3
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b9a:	4619      	mov	r1, r3
 8012b9c:	0049      	lsls	r1, r1, #1
 8012b9e:	440b      	add	r3, r1
 8012ba0:	b29b      	uxth	r3, r3
 8012ba2:	4413      	add	r3, r2
 8012ba4:	b29a      	uxth	r2, r3
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	8b5b      	ldrh	r3, [r3, #26]
 8012bb0:	f043 0304 	orr.w	r3, r3, #4
 8012bb4:	b29a      	uxth	r2, r3
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012bc0:	bf00      	nop
 8012bc2:	3708      	adds	r7, #8
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	bd80      	pop	{r7, pc}
 8012bc8:	0801e920 	.word	0x0801e920
 8012bcc:	0801efd8 	.word	0x0801efd8
 8012bd0:	0801e974 	.word	0x0801e974

08012bd4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b086      	sub	sp, #24
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	60f8      	str	r0, [r7, #12]
 8012bdc:	607b      	str	r3, [r7, #4]
 8012bde:	460b      	mov	r3, r1
 8012be0:	817b      	strh	r3, [r7, #10]
 8012be2:	4613      	mov	r3, r2
 8012be4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012be6:	897a      	ldrh	r2, [r7, #10]
 8012be8:	893b      	ldrh	r3, [r7, #8]
 8012bea:	4413      	add	r3, r2
 8012bec:	b29b      	uxth	r3, r3
 8012bee:	3314      	adds	r3, #20
 8012bf0:	b29b      	uxth	r3, r3
 8012bf2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012bf6:	4619      	mov	r1, r3
 8012bf8:	2022      	movs	r0, #34	; 0x22
 8012bfa:	f7f9 fce3 	bl	800c5c4 <pbuf_alloc>
 8012bfe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012c00:	697b      	ldr	r3, [r7, #20]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d04d      	beq.n	8012ca2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012c06:	897b      	ldrh	r3, [r7, #10]
 8012c08:	3313      	adds	r3, #19
 8012c0a:	697a      	ldr	r2, [r7, #20]
 8012c0c:	8952      	ldrh	r2, [r2, #10]
 8012c0e:	4293      	cmp	r3, r2
 8012c10:	db06      	blt.n	8012c20 <tcp_output_alloc_header_common+0x4c>
 8012c12:	4b26      	ldr	r3, [pc, #152]	; (8012cac <tcp_output_alloc_header_common+0xd8>)
 8012c14:	f240 7223 	movw	r2, #1827	; 0x723
 8012c18:	4925      	ldr	r1, [pc, #148]	; (8012cb0 <tcp_output_alloc_header_common+0xdc>)
 8012c1a:	4826      	ldr	r0, [pc, #152]	; (8012cb4 <tcp_output_alloc_header_common+0xe0>)
 8012c1c:	f007 fa56 	bl	801a0cc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012c20:	697b      	ldr	r3, [r7, #20]
 8012c22:	685b      	ldr	r3, [r3, #4]
 8012c24:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012c26:	8c3b      	ldrh	r3, [r7, #32]
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f7f8 fbbd 	bl	800b3a8 <lwip_htons>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	461a      	mov	r2, r3
 8012c32:	693b      	ldr	r3, [r7, #16]
 8012c34:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012c36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7f8 fbb5 	bl	800b3a8 <lwip_htons>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	461a      	mov	r2, r3
 8012c42:	693b      	ldr	r3, [r7, #16]
 8012c44:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	687a      	ldr	r2, [r7, #4]
 8012c4a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012c4c:	68f8      	ldr	r0, [r7, #12]
 8012c4e:	f7f8 fbc0 	bl	800b3d2 <lwip_htonl>
 8012c52:	4602      	mov	r2, r0
 8012c54:	693b      	ldr	r3, [r7, #16]
 8012c56:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012c58:	897b      	ldrh	r3, [r7, #10]
 8012c5a:	089b      	lsrs	r3, r3, #2
 8012c5c:	b29b      	uxth	r3, r3
 8012c5e:	3305      	adds	r3, #5
 8012c60:	b29b      	uxth	r3, r3
 8012c62:	031b      	lsls	r3, r3, #12
 8012c64:	b29a      	uxth	r2, r3
 8012c66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012c6a:	b29b      	uxth	r3, r3
 8012c6c:	4313      	orrs	r3, r2
 8012c6e:	b29b      	uxth	r3, r3
 8012c70:	4618      	mov	r0, r3
 8012c72:	f7f8 fb99 	bl	800b3a8 <lwip_htons>
 8012c76:	4603      	mov	r3, r0
 8012c78:	461a      	mov	r2, r3
 8012c7a:	693b      	ldr	r3, [r7, #16]
 8012c7c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012c7e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012c80:	4618      	mov	r0, r3
 8012c82:	f7f8 fb91 	bl	800b3a8 <lwip_htons>
 8012c86:	4603      	mov	r3, r0
 8012c88:	461a      	mov	r2, r3
 8012c8a:	693b      	ldr	r3, [r7, #16]
 8012c8c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012c8e:	693b      	ldr	r3, [r7, #16]
 8012c90:	2200      	movs	r2, #0
 8012c92:	741a      	strb	r2, [r3, #16]
 8012c94:	2200      	movs	r2, #0
 8012c96:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012c98:	693b      	ldr	r3, [r7, #16]
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	749a      	strb	r2, [r3, #18]
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012ca2:	697b      	ldr	r3, [r7, #20]
}
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	3718      	adds	r7, #24
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bd80      	pop	{r7, pc}
 8012cac:	0801e920 	.word	0x0801e920
 8012cb0:	0801eff8 	.word	0x0801eff8
 8012cb4:	0801e974 	.word	0x0801e974

08012cb8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012cb8:	b5b0      	push	{r4, r5, r7, lr}
 8012cba:	b08a      	sub	sp, #40	; 0x28
 8012cbc:	af04      	add	r7, sp, #16
 8012cbe:	60f8      	str	r0, [r7, #12]
 8012cc0:	607b      	str	r3, [r7, #4]
 8012cc2:	460b      	mov	r3, r1
 8012cc4:	817b      	strh	r3, [r7, #10]
 8012cc6:	4613      	mov	r3, r2
 8012cc8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d106      	bne.n	8012cde <tcp_output_alloc_header+0x26>
 8012cd0:	4b15      	ldr	r3, [pc, #84]	; (8012d28 <tcp_output_alloc_header+0x70>)
 8012cd2:	f240 7242 	movw	r2, #1858	; 0x742
 8012cd6:	4915      	ldr	r1, [pc, #84]	; (8012d2c <tcp_output_alloc_header+0x74>)
 8012cd8:	4815      	ldr	r0, [pc, #84]	; (8012d30 <tcp_output_alloc_header+0x78>)
 8012cda:	f007 f9f7 	bl	801a0cc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	8adb      	ldrh	r3, [r3, #22]
 8012ce6:	68fa      	ldr	r2, [r7, #12]
 8012ce8:	8b12      	ldrh	r2, [r2, #24]
 8012cea:	68f9      	ldr	r1, [r7, #12]
 8012cec:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012cee:	893d      	ldrh	r5, [r7, #8]
 8012cf0:	897c      	ldrh	r4, [r7, #10]
 8012cf2:	9103      	str	r1, [sp, #12]
 8012cf4:	2110      	movs	r1, #16
 8012cf6:	9102      	str	r1, [sp, #8]
 8012cf8:	9201      	str	r2, [sp, #4]
 8012cfa:	9300      	str	r3, [sp, #0]
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	462a      	mov	r2, r5
 8012d00:	4621      	mov	r1, r4
 8012d02:	f7ff ff67 	bl	8012bd4 <tcp_output_alloc_header_common>
 8012d06:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012d08:	697b      	ldr	r3, [r7, #20]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d006      	beq.n	8012d1c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d12:	68fa      	ldr	r2, [r7, #12]
 8012d14:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012d16:	441a      	add	r2, r3
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012d1c:	697b      	ldr	r3, [r7, #20]
}
 8012d1e:	4618      	mov	r0, r3
 8012d20:	3718      	adds	r7, #24
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bdb0      	pop	{r4, r5, r7, pc}
 8012d26:	bf00      	nop
 8012d28:	0801e920 	.word	0x0801e920
 8012d2c:	0801f028 	.word	0x0801f028
 8012d30:	0801e974 	.word	0x0801e974

08012d34 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b088      	sub	sp, #32
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	60f8      	str	r0, [r7, #12]
 8012d3c:	60b9      	str	r1, [r7, #8]
 8012d3e:	4611      	mov	r1, r2
 8012d40:	461a      	mov	r2, r3
 8012d42:	460b      	mov	r3, r1
 8012d44:	71fb      	strb	r3, [r7, #7]
 8012d46:	4613      	mov	r3, r2
 8012d48:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012d4e:	68bb      	ldr	r3, [r7, #8]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d106      	bne.n	8012d62 <tcp_output_fill_options+0x2e>
 8012d54:	4b13      	ldr	r3, [pc, #76]	; (8012da4 <tcp_output_fill_options+0x70>)
 8012d56:	f240 7256 	movw	r2, #1878	; 0x756
 8012d5a:	4913      	ldr	r1, [pc, #76]	; (8012da8 <tcp_output_fill_options+0x74>)
 8012d5c:	4813      	ldr	r0, [pc, #76]	; (8012dac <tcp_output_fill_options+0x78>)
 8012d5e:	f007 f9b5 	bl	801a0cc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012d62:	68bb      	ldr	r3, [r7, #8]
 8012d64:	685b      	ldr	r3, [r3, #4]
 8012d66:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012d68:	69bb      	ldr	r3, [r7, #24]
 8012d6a:	3314      	adds	r3, #20
 8012d6c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012d6e:	69bb      	ldr	r3, [r7, #24]
 8012d70:	f103 0214 	add.w	r2, r3, #20
 8012d74:	8bfb      	ldrh	r3, [r7, #30]
 8012d76:	009b      	lsls	r3, r3, #2
 8012d78:	4619      	mov	r1, r3
 8012d7a:	79fb      	ldrb	r3, [r7, #7]
 8012d7c:	009b      	lsls	r3, r3, #2
 8012d7e:	f003 0304 	and.w	r3, r3, #4
 8012d82:	440b      	add	r3, r1
 8012d84:	4413      	add	r3, r2
 8012d86:	697a      	ldr	r2, [r7, #20]
 8012d88:	429a      	cmp	r2, r3
 8012d8a:	d006      	beq.n	8012d9a <tcp_output_fill_options+0x66>
 8012d8c:	4b05      	ldr	r3, [pc, #20]	; (8012da4 <tcp_output_fill_options+0x70>)
 8012d8e:	f240 7275 	movw	r2, #1909	; 0x775
 8012d92:	4907      	ldr	r1, [pc, #28]	; (8012db0 <tcp_output_fill_options+0x7c>)
 8012d94:	4805      	ldr	r0, [pc, #20]	; (8012dac <tcp_output_fill_options+0x78>)
 8012d96:	f007 f999 	bl	801a0cc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012d9a:	bf00      	nop
 8012d9c:	3720      	adds	r7, #32
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd80      	pop	{r7, pc}
 8012da2:	bf00      	nop
 8012da4:	0801e920 	.word	0x0801e920
 8012da8:	0801f050 	.word	0x0801f050
 8012dac:	0801e974 	.word	0x0801e974
 8012db0:	0801ef48 	.word	0x0801ef48

08012db4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b08a      	sub	sp, #40	; 0x28
 8012db8:	af04      	add	r7, sp, #16
 8012dba:	60f8      	str	r0, [r7, #12]
 8012dbc:	60b9      	str	r1, [r7, #8]
 8012dbe:	607a      	str	r2, [r7, #4]
 8012dc0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012dc2:	68bb      	ldr	r3, [r7, #8]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d106      	bne.n	8012dd6 <tcp_output_control_segment+0x22>
 8012dc8:	4b1c      	ldr	r3, [pc, #112]	; (8012e3c <tcp_output_control_segment+0x88>)
 8012dca:	f240 7287 	movw	r2, #1927	; 0x787
 8012dce:	491c      	ldr	r1, [pc, #112]	; (8012e40 <tcp_output_control_segment+0x8c>)
 8012dd0:	481c      	ldr	r0, [pc, #112]	; (8012e44 <tcp_output_control_segment+0x90>)
 8012dd2:	f007 f97b 	bl	801a0cc <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012dd6:	683a      	ldr	r2, [r7, #0]
 8012dd8:	6879      	ldr	r1, [r7, #4]
 8012dda:	68f8      	ldr	r0, [r7, #12]
 8012ddc:	f7fe fae8 	bl	80113b0 <tcp_route>
 8012de0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012de2:	693b      	ldr	r3, [r7, #16]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d102      	bne.n	8012dee <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012de8:	23fc      	movs	r3, #252	; 0xfc
 8012dea:	75fb      	strb	r3, [r7, #23]
 8012dec:	e01c      	b.n	8012e28 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d006      	beq.n	8012e02 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	7adb      	ldrb	r3, [r3, #11]
 8012df8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	7a9b      	ldrb	r3, [r3, #10]
 8012dfe:	757b      	strb	r3, [r7, #21]
 8012e00:	e003      	b.n	8012e0a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012e02:	23ff      	movs	r3, #255	; 0xff
 8012e04:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012e06:	2300      	movs	r3, #0
 8012e08:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012e0a:	7dba      	ldrb	r2, [r7, #22]
 8012e0c:	693b      	ldr	r3, [r7, #16]
 8012e0e:	9302      	str	r3, [sp, #8]
 8012e10:	2306      	movs	r3, #6
 8012e12:	9301      	str	r3, [sp, #4]
 8012e14:	7d7b      	ldrb	r3, [r7, #21]
 8012e16:	9300      	str	r3, [sp, #0]
 8012e18:	4613      	mov	r3, r2
 8012e1a:	683a      	ldr	r2, [r7, #0]
 8012e1c:	6879      	ldr	r1, [r7, #4]
 8012e1e:	68b8      	ldr	r0, [r7, #8]
 8012e20:	f002 f8e6 	bl	8014ff0 <ip4_output_if>
 8012e24:	4603      	mov	r3, r0
 8012e26:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012e28:	68b8      	ldr	r0, [r7, #8]
 8012e2a:	f7f9 feaf 	bl	800cb8c <pbuf_free>
  return err;
 8012e2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012e32:	4618      	mov	r0, r3
 8012e34:	3718      	adds	r7, #24
 8012e36:	46bd      	mov	sp, r7
 8012e38:	bd80      	pop	{r7, pc}
 8012e3a:	bf00      	nop
 8012e3c:	0801e920 	.word	0x0801e920
 8012e40:	0801f078 	.word	0x0801f078
 8012e44:	0801e974 	.word	0x0801e974

08012e48 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012e48:	b590      	push	{r4, r7, lr}
 8012e4a:	b08b      	sub	sp, #44	; 0x2c
 8012e4c:	af04      	add	r7, sp, #16
 8012e4e:	60f8      	str	r0, [r7, #12]
 8012e50:	60b9      	str	r1, [r7, #8]
 8012e52:	607a      	str	r2, [r7, #4]
 8012e54:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d106      	bne.n	8012e6a <tcp_rst+0x22>
 8012e5c:	4b1f      	ldr	r3, [pc, #124]	; (8012edc <tcp_rst+0x94>)
 8012e5e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012e62:	491f      	ldr	r1, [pc, #124]	; (8012ee0 <tcp_rst+0x98>)
 8012e64:	481f      	ldr	r0, [pc, #124]	; (8012ee4 <tcp_rst+0x9c>)
 8012e66:	f007 f931 	bl	801a0cc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d106      	bne.n	8012e7e <tcp_rst+0x36>
 8012e70:	4b1a      	ldr	r3, [pc, #104]	; (8012edc <tcp_rst+0x94>)
 8012e72:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012e76:	491c      	ldr	r1, [pc, #112]	; (8012ee8 <tcp_rst+0xa0>)
 8012e78:	481a      	ldr	r0, [pc, #104]	; (8012ee4 <tcp_rst+0x9c>)
 8012e7a:	f007 f927 	bl	801a0cc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012e7e:	2300      	movs	r3, #0
 8012e80:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012e82:	f246 0308 	movw	r3, #24584	; 0x6008
 8012e86:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012e88:	7dfb      	ldrb	r3, [r7, #23]
 8012e8a:	b29c      	uxth	r4, r3
 8012e8c:	68b8      	ldr	r0, [r7, #8]
 8012e8e:	f7f8 faa0 	bl	800b3d2 <lwip_htonl>
 8012e92:	4602      	mov	r2, r0
 8012e94:	8abb      	ldrh	r3, [r7, #20]
 8012e96:	9303      	str	r3, [sp, #12]
 8012e98:	2314      	movs	r3, #20
 8012e9a:	9302      	str	r3, [sp, #8]
 8012e9c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012e9e:	9301      	str	r3, [sp, #4]
 8012ea0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012ea2:	9300      	str	r3, [sp, #0]
 8012ea4:	4613      	mov	r3, r2
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	4621      	mov	r1, r4
 8012eaa:	6878      	ldr	r0, [r7, #4]
 8012eac:	f7ff fe92 	bl	8012bd4 <tcp_output_alloc_header_common>
 8012eb0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012eb2:	693b      	ldr	r3, [r7, #16]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d00c      	beq.n	8012ed2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012eb8:	7dfb      	ldrb	r3, [r7, #23]
 8012eba:	2200      	movs	r2, #0
 8012ebc:	6939      	ldr	r1, [r7, #16]
 8012ebe:	68f8      	ldr	r0, [r7, #12]
 8012ec0:	f7ff ff38 	bl	8012d34 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ec6:	683a      	ldr	r2, [r7, #0]
 8012ec8:	6939      	ldr	r1, [r7, #16]
 8012eca:	68f8      	ldr	r0, [r7, #12]
 8012ecc:	f7ff ff72 	bl	8012db4 <tcp_output_control_segment>
 8012ed0:	e000      	b.n	8012ed4 <tcp_rst+0x8c>
    return;
 8012ed2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012ed4:	371c      	adds	r7, #28
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	bd90      	pop	{r4, r7, pc}
 8012eda:	bf00      	nop
 8012edc:	0801e920 	.word	0x0801e920
 8012ee0:	0801f0a4 	.word	0x0801f0a4
 8012ee4:	0801e974 	.word	0x0801e974
 8012ee8:	0801f0c0 	.word	0x0801f0c0

08012eec <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012eec:	b590      	push	{r4, r7, lr}
 8012eee:	b087      	sub	sp, #28
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012ef8:	2300      	movs	r3, #0
 8012efa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d106      	bne.n	8012f10 <tcp_send_empty_ack+0x24>
 8012f02:	4b28      	ldr	r3, [pc, #160]	; (8012fa4 <tcp_send_empty_ack+0xb8>)
 8012f04:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012f08:	4927      	ldr	r1, [pc, #156]	; (8012fa8 <tcp_send_empty_ack+0xbc>)
 8012f0a:	4828      	ldr	r0, [pc, #160]	; (8012fac <tcp_send_empty_ack+0xc0>)
 8012f0c:	f007 f8de 	bl	801a0cc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012f10:	7dfb      	ldrb	r3, [r7, #23]
 8012f12:	009b      	lsls	r3, r3, #2
 8012f14:	b2db      	uxtb	r3, r3
 8012f16:	f003 0304 	and.w	r3, r3, #4
 8012f1a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012f1c:	7d7b      	ldrb	r3, [r7, #21]
 8012f1e:	b29c      	uxth	r4, r3
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012f24:	4618      	mov	r0, r3
 8012f26:	f7f8 fa54 	bl	800b3d2 <lwip_htonl>
 8012f2a:	4603      	mov	r3, r0
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	4621      	mov	r1, r4
 8012f30:	6878      	ldr	r0, [r7, #4]
 8012f32:	f7ff fec1 	bl	8012cb8 <tcp_output_alloc_header>
 8012f36:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012f38:	693b      	ldr	r3, [r7, #16]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d109      	bne.n	8012f52 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	8b5b      	ldrh	r3, [r3, #26]
 8012f42:	f043 0303 	orr.w	r3, r3, #3
 8012f46:	b29a      	uxth	r2, r3
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012f4c:	f06f 0301 	mvn.w	r3, #1
 8012f50:	e023      	b.n	8012f9a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012f52:	7dbb      	ldrb	r3, [r7, #22]
 8012f54:	7dfa      	ldrb	r2, [r7, #23]
 8012f56:	6939      	ldr	r1, [r7, #16]
 8012f58:	6878      	ldr	r0, [r7, #4]
 8012f5a:	f7ff feeb 	bl	8012d34 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012f5e:	687a      	ldr	r2, [r7, #4]
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	3304      	adds	r3, #4
 8012f64:	6939      	ldr	r1, [r7, #16]
 8012f66:	6878      	ldr	r0, [r7, #4]
 8012f68:	f7ff ff24 	bl	8012db4 <tcp_output_control_segment>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d007      	beq.n	8012f88 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	8b5b      	ldrh	r3, [r3, #26]
 8012f7c:	f043 0303 	orr.w	r3, r3, #3
 8012f80:	b29a      	uxth	r2, r3
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	835a      	strh	r2, [r3, #26]
 8012f86:	e006      	b.n	8012f96 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	8b5b      	ldrh	r3, [r3, #26]
 8012f8c:	f023 0303 	bic.w	r3, r3, #3
 8012f90:	b29a      	uxth	r2, r3
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	371c      	adds	r7, #28
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	bd90      	pop	{r4, r7, pc}
 8012fa2:	bf00      	nop
 8012fa4:	0801e920 	.word	0x0801e920
 8012fa8:	0801f0dc 	.word	0x0801f0dc
 8012fac:	0801e974 	.word	0x0801e974

08012fb0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012fb0:	b590      	push	{r4, r7, lr}
 8012fb2:	b087      	sub	sp, #28
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012fb8:	2300      	movs	r3, #0
 8012fba:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d106      	bne.n	8012fd0 <tcp_keepalive+0x20>
 8012fc2:	4b18      	ldr	r3, [pc, #96]	; (8013024 <tcp_keepalive+0x74>)
 8012fc4:	f640 0224 	movw	r2, #2084	; 0x824
 8012fc8:	4917      	ldr	r1, [pc, #92]	; (8013028 <tcp_keepalive+0x78>)
 8012fca:	4818      	ldr	r0, [pc, #96]	; (801302c <tcp_keepalive+0x7c>)
 8012fcc:	f007 f87e 	bl	801a0cc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012fd0:	7dfb      	ldrb	r3, [r7, #23]
 8012fd2:	b29c      	uxth	r4, r3
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012fd8:	3b01      	subs	r3, #1
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f7f8 f9f9 	bl	800b3d2 <lwip_htonl>
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	4621      	mov	r1, r4
 8012fe6:	6878      	ldr	r0, [r7, #4]
 8012fe8:	f7ff fe66 	bl	8012cb8 <tcp_output_alloc_header>
 8012fec:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012fee:	693b      	ldr	r3, [r7, #16]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d102      	bne.n	8012ffa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012ff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ff8:	e010      	b.n	801301c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012ffa:	7dfb      	ldrb	r3, [r7, #23]
 8012ffc:	2200      	movs	r2, #0
 8012ffe:	6939      	ldr	r1, [r7, #16]
 8013000:	6878      	ldr	r0, [r7, #4]
 8013002:	f7ff fe97 	bl	8012d34 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013006:	687a      	ldr	r2, [r7, #4]
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	3304      	adds	r3, #4
 801300c:	6939      	ldr	r1, [r7, #16]
 801300e:	6878      	ldr	r0, [r7, #4]
 8013010:	f7ff fed0 	bl	8012db4 <tcp_output_control_segment>
 8013014:	4603      	mov	r3, r0
 8013016:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013018:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801301c:	4618      	mov	r0, r3
 801301e:	371c      	adds	r7, #28
 8013020:	46bd      	mov	sp, r7
 8013022:	bd90      	pop	{r4, r7, pc}
 8013024:	0801e920 	.word	0x0801e920
 8013028:	0801f0fc 	.word	0x0801f0fc
 801302c:	0801e974 	.word	0x0801e974

08013030 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013030:	b590      	push	{r4, r7, lr}
 8013032:	b08b      	sub	sp, #44	; 0x2c
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013038:	2300      	movs	r3, #0
 801303a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d106      	bne.n	8013052 <tcp_zero_window_probe+0x22>
 8013044:	4b4c      	ldr	r3, [pc, #304]	; (8013178 <tcp_zero_window_probe+0x148>)
 8013046:	f640 024f 	movw	r2, #2127	; 0x84f
 801304a:	494c      	ldr	r1, [pc, #304]	; (801317c <tcp_zero_window_probe+0x14c>)
 801304c:	484c      	ldr	r0, [pc, #304]	; (8013180 <tcp_zero_window_probe+0x150>)
 801304e:	f007 f83d 	bl	801a0cc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013056:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013058:	6a3b      	ldr	r3, [r7, #32]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d101      	bne.n	8013062 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801305e:	2300      	movs	r3, #0
 8013060:	e086      	b.n	8013170 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013068:	2bff      	cmp	r3, #255	; 0xff
 801306a:	d007      	beq.n	801307c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013072:	3301      	adds	r3, #1
 8013074:	b2da      	uxtb	r2, r3
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801307c:	6a3b      	ldr	r3, [r7, #32]
 801307e:	68db      	ldr	r3, [r3, #12]
 8013080:	899b      	ldrh	r3, [r3, #12]
 8013082:	b29b      	uxth	r3, r3
 8013084:	4618      	mov	r0, r3
 8013086:	f7f8 f98f 	bl	800b3a8 <lwip_htons>
 801308a:	4603      	mov	r3, r0
 801308c:	b2db      	uxtb	r3, r3
 801308e:	f003 0301 	and.w	r3, r3, #1
 8013092:	2b00      	cmp	r3, #0
 8013094:	d005      	beq.n	80130a2 <tcp_zero_window_probe+0x72>
 8013096:	6a3b      	ldr	r3, [r7, #32]
 8013098:	891b      	ldrh	r3, [r3, #8]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d101      	bne.n	80130a2 <tcp_zero_window_probe+0x72>
 801309e:	2301      	movs	r3, #1
 80130a0:	e000      	b.n	80130a4 <tcp_zero_window_probe+0x74>
 80130a2:	2300      	movs	r3, #0
 80130a4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80130a6:	7ffb      	ldrb	r3, [r7, #31]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	bf0c      	ite	eq
 80130ac:	2301      	moveq	r3, #1
 80130ae:	2300      	movne	r3, #0
 80130b0:	b2db      	uxtb	r3, r3
 80130b2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80130b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130b8:	b299      	uxth	r1, r3
 80130ba:	6a3b      	ldr	r3, [r7, #32]
 80130bc:	68db      	ldr	r3, [r3, #12]
 80130be:	685b      	ldr	r3, [r3, #4]
 80130c0:	8bba      	ldrh	r2, [r7, #28]
 80130c2:	6878      	ldr	r0, [r7, #4]
 80130c4:	f7ff fdf8 	bl	8012cb8 <tcp_output_alloc_header>
 80130c8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80130ca:	69bb      	ldr	r3, [r7, #24]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d102      	bne.n	80130d6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80130d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130d4:	e04c      	b.n	8013170 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80130d6:	69bb      	ldr	r3, [r7, #24]
 80130d8:	685b      	ldr	r3, [r3, #4]
 80130da:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80130dc:	7ffb      	ldrb	r3, [r7, #31]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d011      	beq.n	8013106 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80130e2:	697b      	ldr	r3, [r7, #20]
 80130e4:	899b      	ldrh	r3, [r3, #12]
 80130e6:	b29b      	uxth	r3, r3
 80130e8:	b21b      	sxth	r3, r3
 80130ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80130ee:	b21c      	sxth	r4, r3
 80130f0:	2011      	movs	r0, #17
 80130f2:	f7f8 f959 	bl	800b3a8 <lwip_htons>
 80130f6:	4603      	mov	r3, r0
 80130f8:	b21b      	sxth	r3, r3
 80130fa:	4323      	orrs	r3, r4
 80130fc:	b21b      	sxth	r3, r3
 80130fe:	b29a      	uxth	r2, r3
 8013100:	697b      	ldr	r3, [r7, #20]
 8013102:	819a      	strh	r2, [r3, #12]
 8013104:	e010      	b.n	8013128 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013106:	69bb      	ldr	r3, [r7, #24]
 8013108:	685b      	ldr	r3, [r3, #4]
 801310a:	3314      	adds	r3, #20
 801310c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801310e:	6a3b      	ldr	r3, [r7, #32]
 8013110:	6858      	ldr	r0, [r3, #4]
 8013112:	6a3b      	ldr	r3, [r7, #32]
 8013114:	685b      	ldr	r3, [r3, #4]
 8013116:	891a      	ldrh	r2, [r3, #8]
 8013118:	6a3b      	ldr	r3, [r7, #32]
 801311a:	891b      	ldrh	r3, [r3, #8]
 801311c:	1ad3      	subs	r3, r2, r3
 801311e:	b29b      	uxth	r3, r3
 8013120:	2201      	movs	r2, #1
 8013122:	6939      	ldr	r1, [r7, #16]
 8013124:	f7f9 ff28 	bl	800cf78 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013128:	6a3b      	ldr	r3, [r7, #32]
 801312a:	68db      	ldr	r3, [r3, #12]
 801312c:	685b      	ldr	r3, [r3, #4]
 801312e:	4618      	mov	r0, r3
 8013130:	f7f8 f94f 	bl	800b3d2 <lwip_htonl>
 8013134:	4603      	mov	r3, r0
 8013136:	3301      	adds	r3, #1
 8013138:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	1ad3      	subs	r3, r2, r3
 8013142:	2b00      	cmp	r3, #0
 8013144:	da02      	bge.n	801314c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	68fa      	ldr	r2, [r7, #12]
 801314a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801314c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013150:	2200      	movs	r2, #0
 8013152:	69b9      	ldr	r1, [r7, #24]
 8013154:	6878      	ldr	r0, [r7, #4]
 8013156:	f7ff fded 	bl	8012d34 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801315a:	687a      	ldr	r2, [r7, #4]
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	3304      	adds	r3, #4
 8013160:	69b9      	ldr	r1, [r7, #24]
 8013162:	6878      	ldr	r0, [r7, #4]
 8013164:	f7ff fe26 	bl	8012db4 <tcp_output_control_segment>
 8013168:	4603      	mov	r3, r0
 801316a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801316c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013170:	4618      	mov	r0, r3
 8013172:	372c      	adds	r7, #44	; 0x2c
 8013174:	46bd      	mov	sp, r7
 8013176:	bd90      	pop	{r4, r7, pc}
 8013178:	0801e920 	.word	0x0801e920
 801317c:	0801f118 	.word	0x0801f118
 8013180:	0801e974 	.word	0x0801e974

08013184 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b082      	sub	sp, #8
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801318c:	f7f9 ffe2 	bl	800d154 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013190:	4b0a      	ldr	r3, [pc, #40]	; (80131bc <tcpip_tcp_timer+0x38>)
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d103      	bne.n	80131a0 <tcpip_tcp_timer+0x1c>
 8013198:	4b09      	ldr	r3, [pc, #36]	; (80131c0 <tcpip_tcp_timer+0x3c>)
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d005      	beq.n	80131ac <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80131a0:	2200      	movs	r2, #0
 80131a2:	4908      	ldr	r1, [pc, #32]	; (80131c4 <tcpip_tcp_timer+0x40>)
 80131a4:	20fa      	movs	r0, #250	; 0xfa
 80131a6:	f000 f8f3 	bl	8013390 <sys_timeout>
 80131aa:	e003      	b.n	80131b4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80131ac:	4b06      	ldr	r3, [pc, #24]	; (80131c8 <tcpip_tcp_timer+0x44>)
 80131ae:	2200      	movs	r2, #0
 80131b0:	601a      	str	r2, [r3, #0]
  }
}
 80131b2:	bf00      	nop
 80131b4:	bf00      	nop
 80131b6:	3708      	adds	r7, #8
 80131b8:	46bd      	mov	sp, r7
 80131ba:	bd80      	pop	{r7, pc}
 80131bc:	20011488 	.word	0x20011488
 80131c0:	2001148c 	.word	0x2001148c
 80131c4:	08013185 	.word	0x08013185
 80131c8:	200114d4 	.word	0x200114d4

080131cc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80131d0:	4b0a      	ldr	r3, [pc, #40]	; (80131fc <tcp_timer_needed+0x30>)
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d10f      	bne.n	80131f8 <tcp_timer_needed+0x2c>
 80131d8:	4b09      	ldr	r3, [pc, #36]	; (8013200 <tcp_timer_needed+0x34>)
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d103      	bne.n	80131e8 <tcp_timer_needed+0x1c>
 80131e0:	4b08      	ldr	r3, [pc, #32]	; (8013204 <tcp_timer_needed+0x38>)
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d007      	beq.n	80131f8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80131e8:	4b04      	ldr	r3, [pc, #16]	; (80131fc <tcp_timer_needed+0x30>)
 80131ea:	2201      	movs	r2, #1
 80131ec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80131ee:	2200      	movs	r2, #0
 80131f0:	4905      	ldr	r1, [pc, #20]	; (8013208 <tcp_timer_needed+0x3c>)
 80131f2:	20fa      	movs	r0, #250	; 0xfa
 80131f4:	f000 f8cc 	bl	8013390 <sys_timeout>
  }
}
 80131f8:	bf00      	nop
 80131fa:	bd80      	pop	{r7, pc}
 80131fc:	200114d4 	.word	0x200114d4
 8013200:	20011488 	.word	0x20011488
 8013204:	2001148c 	.word	0x2001148c
 8013208:	08013185 	.word	0x08013185

0801320c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b086      	sub	sp, #24
 8013210:	af00      	add	r7, sp, #0
 8013212:	60f8      	str	r0, [r7, #12]
 8013214:	60b9      	str	r1, [r7, #8]
 8013216:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013218:	200a      	movs	r0, #10
 801321a:	f7f8 fd9d 	bl	800bd58 <memp_malloc>
 801321e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013220:	693b      	ldr	r3, [r7, #16]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d109      	bne.n	801323a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d151      	bne.n	80132d0 <sys_timeout_abs+0xc4>
 801322c:	4b2a      	ldr	r3, [pc, #168]	; (80132d8 <sys_timeout_abs+0xcc>)
 801322e:	22be      	movs	r2, #190	; 0xbe
 8013230:	492a      	ldr	r1, [pc, #168]	; (80132dc <sys_timeout_abs+0xd0>)
 8013232:	482b      	ldr	r0, [pc, #172]	; (80132e0 <sys_timeout_abs+0xd4>)
 8013234:	f006 ff4a 	bl	801a0cc <iprintf>
    return;
 8013238:	e04a      	b.n	80132d0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801323a:	693b      	ldr	r3, [r7, #16]
 801323c:	2200      	movs	r2, #0
 801323e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013240:	693b      	ldr	r3, [r7, #16]
 8013242:	68ba      	ldr	r2, [r7, #8]
 8013244:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013246:	693b      	ldr	r3, [r7, #16]
 8013248:	687a      	ldr	r2, [r7, #4]
 801324a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801324c:	693b      	ldr	r3, [r7, #16]
 801324e:	68fa      	ldr	r2, [r7, #12]
 8013250:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013252:	4b24      	ldr	r3, [pc, #144]	; (80132e4 <sys_timeout_abs+0xd8>)
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d103      	bne.n	8013262 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801325a:	4a22      	ldr	r2, [pc, #136]	; (80132e4 <sys_timeout_abs+0xd8>)
 801325c:	693b      	ldr	r3, [r7, #16]
 801325e:	6013      	str	r3, [r2, #0]
    return;
 8013260:	e037      	b.n	80132d2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013262:	693b      	ldr	r3, [r7, #16]
 8013264:	685a      	ldr	r2, [r3, #4]
 8013266:	4b1f      	ldr	r3, [pc, #124]	; (80132e4 <sys_timeout_abs+0xd8>)
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	685b      	ldr	r3, [r3, #4]
 801326c:	1ad3      	subs	r3, r2, r3
 801326e:	0fdb      	lsrs	r3, r3, #31
 8013270:	f003 0301 	and.w	r3, r3, #1
 8013274:	b2db      	uxtb	r3, r3
 8013276:	2b00      	cmp	r3, #0
 8013278:	d007      	beq.n	801328a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801327a:	4b1a      	ldr	r3, [pc, #104]	; (80132e4 <sys_timeout_abs+0xd8>)
 801327c:	681a      	ldr	r2, [r3, #0]
 801327e:	693b      	ldr	r3, [r7, #16]
 8013280:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013282:	4a18      	ldr	r2, [pc, #96]	; (80132e4 <sys_timeout_abs+0xd8>)
 8013284:	693b      	ldr	r3, [r7, #16]
 8013286:	6013      	str	r3, [r2, #0]
 8013288:	e023      	b.n	80132d2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801328a:	4b16      	ldr	r3, [pc, #88]	; (80132e4 <sys_timeout_abs+0xd8>)
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	617b      	str	r3, [r7, #20]
 8013290:	e01a      	b.n	80132c8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013292:	697b      	ldr	r3, [r7, #20]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d00b      	beq.n	80132b2 <sys_timeout_abs+0xa6>
 801329a:	693b      	ldr	r3, [r7, #16]
 801329c:	685a      	ldr	r2, [r3, #4]
 801329e:	697b      	ldr	r3, [r7, #20]
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	685b      	ldr	r3, [r3, #4]
 80132a4:	1ad3      	subs	r3, r2, r3
 80132a6:	0fdb      	lsrs	r3, r3, #31
 80132a8:	f003 0301 	and.w	r3, r3, #1
 80132ac:	b2db      	uxtb	r3, r3
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d007      	beq.n	80132c2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80132b2:	697b      	ldr	r3, [r7, #20]
 80132b4:	681a      	ldr	r2, [r3, #0]
 80132b6:	693b      	ldr	r3, [r7, #16]
 80132b8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80132ba:	697b      	ldr	r3, [r7, #20]
 80132bc:	693a      	ldr	r2, [r7, #16]
 80132be:	601a      	str	r2, [r3, #0]
        break;
 80132c0:	e007      	b.n	80132d2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80132c2:	697b      	ldr	r3, [r7, #20]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	617b      	str	r3, [r7, #20]
 80132c8:	697b      	ldr	r3, [r7, #20]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d1e1      	bne.n	8013292 <sys_timeout_abs+0x86>
 80132ce:	e000      	b.n	80132d2 <sys_timeout_abs+0xc6>
    return;
 80132d0:	bf00      	nop
      }
    }
  }
}
 80132d2:	3718      	adds	r7, #24
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bd80      	pop	{r7, pc}
 80132d8:	0801f13c 	.word	0x0801f13c
 80132dc:	0801f170 	.word	0x0801f170
 80132e0:	0801f1b0 	.word	0x0801f1b0
 80132e4:	200114cc 	.word	0x200114cc

080132e8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b086      	sub	sp, #24
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80132f4:	697b      	ldr	r3, [r7, #20]
 80132f6:	685b      	ldr	r3, [r3, #4]
 80132f8:	4798      	blx	r3

  now = sys_now();
 80132fa:	f7f2 f9c9 	bl	8005690 <sys_now>
 80132fe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013300:	697b      	ldr	r3, [r7, #20]
 8013302:	681a      	ldr	r2, [r3, #0]
 8013304:	4b0f      	ldr	r3, [pc, #60]	; (8013344 <lwip_cyclic_timer+0x5c>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	4413      	add	r3, r2
 801330a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801330c:	68fa      	ldr	r2, [r7, #12]
 801330e:	693b      	ldr	r3, [r7, #16]
 8013310:	1ad3      	subs	r3, r2, r3
 8013312:	0fdb      	lsrs	r3, r3, #31
 8013314:	f003 0301 	and.w	r3, r3, #1
 8013318:	b2db      	uxtb	r3, r3
 801331a:	2b00      	cmp	r3, #0
 801331c:	d009      	beq.n	8013332 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801331e:	697b      	ldr	r3, [r7, #20]
 8013320:	681a      	ldr	r2, [r3, #0]
 8013322:	693b      	ldr	r3, [r7, #16]
 8013324:	4413      	add	r3, r2
 8013326:	687a      	ldr	r2, [r7, #4]
 8013328:	4907      	ldr	r1, [pc, #28]	; (8013348 <lwip_cyclic_timer+0x60>)
 801332a:	4618      	mov	r0, r3
 801332c:	f7ff ff6e 	bl	801320c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013330:	e004      	b.n	801333c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013332:	687a      	ldr	r2, [r7, #4]
 8013334:	4904      	ldr	r1, [pc, #16]	; (8013348 <lwip_cyclic_timer+0x60>)
 8013336:	68f8      	ldr	r0, [r7, #12]
 8013338:	f7ff ff68 	bl	801320c <sys_timeout_abs>
}
 801333c:	bf00      	nop
 801333e:	3718      	adds	r7, #24
 8013340:	46bd      	mov	sp, r7
 8013342:	bd80      	pop	{r7, pc}
 8013344:	200114d0 	.word	0x200114d0
 8013348:	080132e9 	.word	0x080132e9

0801334c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b082      	sub	sp, #8
 8013350:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013352:	2301      	movs	r3, #1
 8013354:	607b      	str	r3, [r7, #4]
 8013356:	e00e      	b.n	8013376 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013358:	4a0b      	ldr	r2, [pc, #44]	; (8013388 <sys_timeouts_init+0x3c>)
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	00db      	lsls	r3, r3, #3
 8013364:	4a08      	ldr	r2, [pc, #32]	; (8013388 <sys_timeouts_init+0x3c>)
 8013366:	4413      	add	r3, r2
 8013368:	461a      	mov	r2, r3
 801336a:	4908      	ldr	r1, [pc, #32]	; (801338c <sys_timeouts_init+0x40>)
 801336c:	f000 f810 	bl	8013390 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	3301      	adds	r3, #1
 8013374:	607b      	str	r3, [r7, #4]
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	2b02      	cmp	r3, #2
 801337a:	d9ed      	bls.n	8013358 <sys_timeouts_init+0xc>
  }
}
 801337c:	bf00      	nop
 801337e:	bf00      	nop
 8013380:	3708      	adds	r7, #8
 8013382:	46bd      	mov	sp, r7
 8013384:	bd80      	pop	{r7, pc}
 8013386:	bf00      	nop
 8013388:	08029540 	.word	0x08029540
 801338c:	080132e9 	.word	0x080132e9

08013390 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b086      	sub	sp, #24
 8013394:	af00      	add	r7, sp, #0
 8013396:	60f8      	str	r0, [r7, #12]
 8013398:	60b9      	str	r1, [r7, #8]
 801339a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80133a2:	d306      	bcc.n	80133b2 <sys_timeout+0x22>
 80133a4:	4b0a      	ldr	r3, [pc, #40]	; (80133d0 <sys_timeout+0x40>)
 80133a6:	f240 1229 	movw	r2, #297	; 0x129
 80133aa:	490a      	ldr	r1, [pc, #40]	; (80133d4 <sys_timeout+0x44>)
 80133ac:	480a      	ldr	r0, [pc, #40]	; (80133d8 <sys_timeout+0x48>)
 80133ae:	f006 fe8d 	bl	801a0cc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80133b2:	f7f2 f96d 	bl	8005690 <sys_now>
 80133b6:	4602      	mov	r2, r0
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	4413      	add	r3, r2
 80133bc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80133be:	687a      	ldr	r2, [r7, #4]
 80133c0:	68b9      	ldr	r1, [r7, #8]
 80133c2:	6978      	ldr	r0, [r7, #20]
 80133c4:	f7ff ff22 	bl	801320c <sys_timeout_abs>
#endif
}
 80133c8:	bf00      	nop
 80133ca:	3718      	adds	r7, #24
 80133cc:	46bd      	mov	sp, r7
 80133ce:	bd80      	pop	{r7, pc}
 80133d0:	0801f13c 	.word	0x0801f13c
 80133d4:	0801f1d8 	.word	0x0801f1d8
 80133d8:	0801f1b0 	.word	0x0801f1b0

080133dc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b084      	sub	sp, #16
 80133e0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80133e2:	f7f2 f955 	bl	8005690 <sys_now>
 80133e6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80133e8:	4b17      	ldr	r3, [pc, #92]	; (8013448 <sys_check_timeouts+0x6c>)
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80133ee:	68bb      	ldr	r3, [r7, #8]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d022      	beq.n	801343a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80133f4:	68bb      	ldr	r3, [r7, #8]
 80133f6:	685b      	ldr	r3, [r3, #4]
 80133f8:	68fa      	ldr	r2, [r7, #12]
 80133fa:	1ad3      	subs	r3, r2, r3
 80133fc:	0fdb      	lsrs	r3, r3, #31
 80133fe:	f003 0301 	and.w	r3, r3, #1
 8013402:	b2db      	uxtb	r3, r3
 8013404:	2b00      	cmp	r3, #0
 8013406:	d11a      	bne.n	801343e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013408:	68bb      	ldr	r3, [r7, #8]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	4a0e      	ldr	r2, [pc, #56]	; (8013448 <sys_check_timeouts+0x6c>)
 801340e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013410:	68bb      	ldr	r3, [r7, #8]
 8013412:	689b      	ldr	r3, [r3, #8]
 8013414:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013416:	68bb      	ldr	r3, [r7, #8]
 8013418:	68db      	ldr	r3, [r3, #12]
 801341a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801341c:	68bb      	ldr	r3, [r7, #8]
 801341e:	685b      	ldr	r3, [r3, #4]
 8013420:	4a0a      	ldr	r2, [pc, #40]	; (801344c <sys_check_timeouts+0x70>)
 8013422:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013424:	68b9      	ldr	r1, [r7, #8]
 8013426:	200a      	movs	r0, #10
 8013428:	f7f8 fd0c 	bl	800be44 <memp_free>
    if (handler != NULL) {
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d0da      	beq.n	80133e8 <sys_check_timeouts+0xc>
      handler(arg);
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	6838      	ldr	r0, [r7, #0]
 8013436:	4798      	blx	r3
  do {
 8013438:	e7d6      	b.n	80133e8 <sys_check_timeouts+0xc>
      return;
 801343a:	bf00      	nop
 801343c:	e000      	b.n	8013440 <sys_check_timeouts+0x64>
      return;
 801343e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013440:	3710      	adds	r7, #16
 8013442:	46bd      	mov	sp, r7
 8013444:	bd80      	pop	{r7, pc}
 8013446:	bf00      	nop
 8013448:	200114cc 	.word	0x200114cc
 801344c:	200114d0 	.word	0x200114d0

08013450 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b082      	sub	sp, #8
 8013454:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013456:	4b16      	ldr	r3, [pc, #88]	; (80134b0 <sys_timeouts_sleeptime+0x60>)
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d102      	bne.n	8013464 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801345e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013462:	e020      	b.n	80134a6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013464:	f7f2 f914 	bl	8005690 <sys_now>
 8013468:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801346a:	4b11      	ldr	r3, [pc, #68]	; (80134b0 <sys_timeouts_sleeptime+0x60>)
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	685a      	ldr	r2, [r3, #4]
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	1ad3      	subs	r3, r2, r3
 8013474:	0fdb      	lsrs	r3, r3, #31
 8013476:	f003 0301 	and.w	r3, r3, #1
 801347a:	b2db      	uxtb	r3, r3
 801347c:	2b00      	cmp	r3, #0
 801347e:	d001      	beq.n	8013484 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013480:	2300      	movs	r3, #0
 8013482:	e010      	b.n	80134a6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013484:	4b0a      	ldr	r3, [pc, #40]	; (80134b0 <sys_timeouts_sleeptime+0x60>)
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	685a      	ldr	r2, [r3, #4]
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	1ad3      	subs	r3, r2, r3
 801348e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013490:	683b      	ldr	r3, [r7, #0]
 8013492:	2b00      	cmp	r3, #0
 8013494:	da06      	bge.n	80134a4 <sys_timeouts_sleeptime+0x54>
 8013496:	4b07      	ldr	r3, [pc, #28]	; (80134b4 <sys_timeouts_sleeptime+0x64>)
 8013498:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801349c:	4906      	ldr	r1, [pc, #24]	; (80134b8 <sys_timeouts_sleeptime+0x68>)
 801349e:	4807      	ldr	r0, [pc, #28]	; (80134bc <sys_timeouts_sleeptime+0x6c>)
 80134a0:	f006 fe14 	bl	801a0cc <iprintf>
    return ret;
 80134a4:	683b      	ldr	r3, [r7, #0]
  }
}
 80134a6:	4618      	mov	r0, r3
 80134a8:	3708      	adds	r7, #8
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bd80      	pop	{r7, pc}
 80134ae:	bf00      	nop
 80134b0:	200114cc 	.word	0x200114cc
 80134b4:	0801f13c 	.word	0x0801f13c
 80134b8:	0801f210 	.word	0x0801f210
 80134bc:	0801f1b0 	.word	0x0801f1b0

080134c0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80134c4:	f006 fe1a 	bl	801a0fc <rand>
 80134c8:	4603      	mov	r3, r0
 80134ca:	b29b      	uxth	r3, r3
 80134cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80134d0:	b29b      	uxth	r3, r3
 80134d2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80134d6:	b29a      	uxth	r2, r3
 80134d8:	4b01      	ldr	r3, [pc, #4]	; (80134e0 <udp_init+0x20>)
 80134da:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80134dc:	bf00      	nop
 80134de:	bd80      	pop	{r7, pc}
 80134e0:	20000030 	.word	0x20000030

080134e4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80134e4:	b480      	push	{r7}
 80134e6:	b083      	sub	sp, #12
 80134e8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80134ea:	2300      	movs	r3, #0
 80134ec:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80134ee:	4b17      	ldr	r3, [pc, #92]	; (801354c <udp_new_port+0x68>)
 80134f0:	881b      	ldrh	r3, [r3, #0]
 80134f2:	1c5a      	adds	r2, r3, #1
 80134f4:	b291      	uxth	r1, r2
 80134f6:	4a15      	ldr	r2, [pc, #84]	; (801354c <udp_new_port+0x68>)
 80134f8:	8011      	strh	r1, [r2, #0]
 80134fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80134fe:	4293      	cmp	r3, r2
 8013500:	d103      	bne.n	801350a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013502:	4b12      	ldr	r3, [pc, #72]	; (801354c <udp_new_port+0x68>)
 8013504:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013508:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801350a:	4b11      	ldr	r3, [pc, #68]	; (8013550 <udp_new_port+0x6c>)
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	603b      	str	r3, [r7, #0]
 8013510:	e011      	b.n	8013536 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013512:	683b      	ldr	r3, [r7, #0]
 8013514:	8a5a      	ldrh	r2, [r3, #18]
 8013516:	4b0d      	ldr	r3, [pc, #52]	; (801354c <udp_new_port+0x68>)
 8013518:	881b      	ldrh	r3, [r3, #0]
 801351a:	429a      	cmp	r2, r3
 801351c:	d108      	bne.n	8013530 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801351e:	88fb      	ldrh	r3, [r7, #6]
 8013520:	3301      	adds	r3, #1
 8013522:	80fb      	strh	r3, [r7, #6]
 8013524:	88fb      	ldrh	r3, [r7, #6]
 8013526:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801352a:	d3e0      	bcc.n	80134ee <udp_new_port+0xa>
        return 0;
 801352c:	2300      	movs	r3, #0
 801352e:	e007      	b.n	8013540 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013530:	683b      	ldr	r3, [r7, #0]
 8013532:	68db      	ldr	r3, [r3, #12]
 8013534:	603b      	str	r3, [r7, #0]
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d1ea      	bne.n	8013512 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801353c:	4b03      	ldr	r3, [pc, #12]	; (801354c <udp_new_port+0x68>)
 801353e:	881b      	ldrh	r3, [r3, #0]
}
 8013540:	4618      	mov	r0, r3
 8013542:	370c      	adds	r7, #12
 8013544:	46bd      	mov	sp, r7
 8013546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801354a:	4770      	bx	lr
 801354c:	20000030 	.word	0x20000030
 8013550:	200114d8 	.word	0x200114d8

08013554 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013554:	b580      	push	{r7, lr}
 8013556:	b084      	sub	sp, #16
 8013558:	af00      	add	r7, sp, #0
 801355a:	60f8      	str	r0, [r7, #12]
 801355c:	60b9      	str	r1, [r7, #8]
 801355e:	4613      	mov	r3, r2
 8013560:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d105      	bne.n	8013574 <udp_input_local_match+0x20>
 8013568:	4b27      	ldr	r3, [pc, #156]	; (8013608 <udp_input_local_match+0xb4>)
 801356a:	2287      	movs	r2, #135	; 0x87
 801356c:	4927      	ldr	r1, [pc, #156]	; (801360c <udp_input_local_match+0xb8>)
 801356e:	4828      	ldr	r0, [pc, #160]	; (8013610 <udp_input_local_match+0xbc>)
 8013570:	f006 fdac 	bl	801a0cc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d105      	bne.n	8013586 <udp_input_local_match+0x32>
 801357a:	4b23      	ldr	r3, [pc, #140]	; (8013608 <udp_input_local_match+0xb4>)
 801357c:	2288      	movs	r2, #136	; 0x88
 801357e:	4925      	ldr	r1, [pc, #148]	; (8013614 <udp_input_local_match+0xc0>)
 8013580:	4823      	ldr	r0, [pc, #140]	; (8013610 <udp_input_local_match+0xbc>)
 8013582:	f006 fda3 	bl	801a0cc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	7a1b      	ldrb	r3, [r3, #8]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d00b      	beq.n	80135a6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	7a1a      	ldrb	r2, [r3, #8]
 8013592:	4b21      	ldr	r3, [pc, #132]	; (8013618 <udp_input_local_match+0xc4>)
 8013594:	685b      	ldr	r3, [r3, #4]
 8013596:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801359a:	3301      	adds	r3, #1
 801359c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801359e:	429a      	cmp	r2, r3
 80135a0:	d001      	beq.n	80135a6 <udp_input_local_match+0x52>
    return 0;
 80135a2:	2300      	movs	r3, #0
 80135a4:	e02b      	b.n	80135fe <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80135a6:	79fb      	ldrb	r3, [r7, #7]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d018      	beq.n	80135de <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d013      	beq.n	80135da <udp_input_local_match+0x86>
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d00f      	beq.n	80135da <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80135ba:	4b17      	ldr	r3, [pc, #92]	; (8013618 <udp_input_local_match+0xc4>)
 80135bc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80135be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80135c2:	d00a      	beq.n	80135da <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	681a      	ldr	r2, [r3, #0]
 80135c8:	4b13      	ldr	r3, [pc, #76]	; (8013618 <udp_input_local_match+0xc4>)
 80135ca:	695b      	ldr	r3, [r3, #20]
 80135cc:	405a      	eors	r2, r3
 80135ce:	68bb      	ldr	r3, [r7, #8]
 80135d0:	3308      	adds	r3, #8
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d110      	bne.n	80135fc <udp_input_local_match+0xa8>
          return 1;
 80135da:	2301      	movs	r3, #1
 80135dc:	e00f      	b.n	80135fe <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d009      	beq.n	80135f8 <udp_input_local_match+0xa4>
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d005      	beq.n	80135f8 <udp_input_local_match+0xa4>
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	681a      	ldr	r2, [r3, #0]
 80135f0:	4b09      	ldr	r3, [pc, #36]	; (8013618 <udp_input_local_match+0xc4>)
 80135f2:	695b      	ldr	r3, [r3, #20]
 80135f4:	429a      	cmp	r2, r3
 80135f6:	d101      	bne.n	80135fc <udp_input_local_match+0xa8>
        return 1;
 80135f8:	2301      	movs	r3, #1
 80135fa:	e000      	b.n	80135fe <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80135fc:	2300      	movs	r3, #0
}
 80135fe:	4618      	mov	r0, r3
 8013600:	3710      	adds	r7, #16
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}
 8013606:	bf00      	nop
 8013608:	0801f224 	.word	0x0801f224
 801360c:	0801f254 	.word	0x0801f254
 8013610:	0801f278 	.word	0x0801f278
 8013614:	0801f2a0 	.word	0x0801f2a0
 8013618:	20008f5c 	.word	0x20008f5c

0801361c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801361c:	b590      	push	{r4, r7, lr}
 801361e:	b08d      	sub	sp, #52	; 0x34
 8013620:	af02      	add	r7, sp, #8
 8013622:	6078      	str	r0, [r7, #4]
 8013624:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013626:	2300      	movs	r3, #0
 8013628:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d105      	bne.n	801363c <udp_input+0x20>
 8013630:	4b7c      	ldr	r3, [pc, #496]	; (8013824 <udp_input+0x208>)
 8013632:	22cf      	movs	r2, #207	; 0xcf
 8013634:	497c      	ldr	r1, [pc, #496]	; (8013828 <udp_input+0x20c>)
 8013636:	487d      	ldr	r0, [pc, #500]	; (801382c <udp_input+0x210>)
 8013638:	f006 fd48 	bl	801a0cc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801363c:	683b      	ldr	r3, [r7, #0]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d105      	bne.n	801364e <udp_input+0x32>
 8013642:	4b78      	ldr	r3, [pc, #480]	; (8013824 <udp_input+0x208>)
 8013644:	22d0      	movs	r2, #208	; 0xd0
 8013646:	497a      	ldr	r1, [pc, #488]	; (8013830 <udp_input+0x214>)
 8013648:	4878      	ldr	r0, [pc, #480]	; (801382c <udp_input+0x210>)
 801364a:	f006 fd3f 	bl	801a0cc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	895b      	ldrh	r3, [r3, #10]
 8013652:	2b07      	cmp	r3, #7
 8013654:	d803      	bhi.n	801365e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013656:	6878      	ldr	r0, [r7, #4]
 8013658:	f7f9 fa98 	bl	800cb8c <pbuf_free>
    goto end;
 801365c:	e0de      	b.n	801381c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	685b      	ldr	r3, [r3, #4]
 8013662:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013664:	4b73      	ldr	r3, [pc, #460]	; (8013834 <udp_input+0x218>)
 8013666:	695b      	ldr	r3, [r3, #20]
 8013668:	4a72      	ldr	r2, [pc, #456]	; (8013834 <udp_input+0x218>)
 801366a:	6812      	ldr	r2, [r2, #0]
 801366c:	4611      	mov	r1, r2
 801366e:	4618      	mov	r0, r3
 8013670:	f001 fd96 	bl	80151a0 <ip4_addr_isbroadcast_u32>
 8013674:	4603      	mov	r3, r0
 8013676:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013678:	697b      	ldr	r3, [r7, #20]
 801367a:	881b      	ldrh	r3, [r3, #0]
 801367c:	b29b      	uxth	r3, r3
 801367e:	4618      	mov	r0, r3
 8013680:	f7f7 fe92 	bl	800b3a8 <lwip_htons>
 8013684:	4603      	mov	r3, r0
 8013686:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013688:	697b      	ldr	r3, [r7, #20]
 801368a:	885b      	ldrh	r3, [r3, #2]
 801368c:	b29b      	uxth	r3, r3
 801368e:	4618      	mov	r0, r3
 8013690:	f7f7 fe8a 	bl	800b3a8 <lwip_htons>
 8013694:	4603      	mov	r3, r0
 8013696:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013698:	2300      	movs	r3, #0
 801369a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801369c:	2300      	movs	r3, #0
 801369e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80136a0:	2300      	movs	r3, #0
 80136a2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80136a4:	4b64      	ldr	r3, [pc, #400]	; (8013838 <udp_input+0x21c>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	627b      	str	r3, [r7, #36]	; 0x24
 80136aa:	e054      	b.n	8013756 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80136ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ae:	8a5b      	ldrh	r3, [r3, #18]
 80136b0:	89fa      	ldrh	r2, [r7, #14]
 80136b2:	429a      	cmp	r2, r3
 80136b4:	d14a      	bne.n	801374c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80136b6:	7cfb      	ldrb	r3, [r7, #19]
 80136b8:	461a      	mov	r2, r3
 80136ba:	6839      	ldr	r1, [r7, #0]
 80136bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80136be:	f7ff ff49 	bl	8013554 <udp_input_local_match>
 80136c2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d041      	beq.n	801374c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80136c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ca:	7c1b      	ldrb	r3, [r3, #16]
 80136cc:	f003 0304 	and.w	r3, r3, #4
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d11d      	bne.n	8013710 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80136d4:	69fb      	ldr	r3, [r7, #28]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d102      	bne.n	80136e0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80136da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136dc:	61fb      	str	r3, [r7, #28]
 80136de:	e017      	b.n	8013710 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80136e0:	7cfb      	ldrb	r3, [r7, #19]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d014      	beq.n	8013710 <udp_input+0xf4>
 80136e6:	4b53      	ldr	r3, [pc, #332]	; (8013834 <udp_input+0x218>)
 80136e8:	695b      	ldr	r3, [r3, #20]
 80136ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80136ee:	d10f      	bne.n	8013710 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80136f0:	69fb      	ldr	r3, [r7, #28]
 80136f2:	681a      	ldr	r2, [r3, #0]
 80136f4:	683b      	ldr	r3, [r7, #0]
 80136f6:	3304      	adds	r3, #4
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	429a      	cmp	r2, r3
 80136fc:	d008      	beq.n	8013710 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80136fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013700:	681a      	ldr	r2, [r3, #0]
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	3304      	adds	r3, #4
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	429a      	cmp	r2, r3
 801370a:	d101      	bne.n	8013710 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801370e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013712:	8a9b      	ldrh	r3, [r3, #20]
 8013714:	8a3a      	ldrh	r2, [r7, #16]
 8013716:	429a      	cmp	r2, r3
 8013718:	d118      	bne.n	801374c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801371c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801371e:	2b00      	cmp	r3, #0
 8013720:	d005      	beq.n	801372e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013724:	685a      	ldr	r2, [r3, #4]
 8013726:	4b43      	ldr	r3, [pc, #268]	; (8013834 <udp_input+0x218>)
 8013728:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801372a:	429a      	cmp	r2, r3
 801372c:	d10e      	bne.n	801374c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801372e:	6a3b      	ldr	r3, [r7, #32]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d014      	beq.n	801375e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013736:	68da      	ldr	r2, [r3, #12]
 8013738:	6a3b      	ldr	r3, [r7, #32]
 801373a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801373c:	4b3e      	ldr	r3, [pc, #248]	; (8013838 <udp_input+0x21c>)
 801373e:	681a      	ldr	r2, [r3, #0]
 8013740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013742:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013744:	4a3c      	ldr	r2, [pc, #240]	; (8013838 <udp_input+0x21c>)
 8013746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013748:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801374a:	e008      	b.n	801375e <udp_input+0x142>
      }
    }

    prev = pcb;
 801374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801374e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013752:	68db      	ldr	r3, [r3, #12]
 8013754:	627b      	str	r3, [r7, #36]	; 0x24
 8013756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013758:	2b00      	cmp	r3, #0
 801375a:	d1a7      	bne.n	80136ac <udp_input+0x90>
 801375c:	e000      	b.n	8013760 <udp_input+0x144>
        break;
 801375e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013762:	2b00      	cmp	r3, #0
 8013764:	d101      	bne.n	801376a <udp_input+0x14e>
    pcb = uncon_pcb;
 8013766:	69fb      	ldr	r3, [r7, #28]
 8013768:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801376c:	2b00      	cmp	r3, #0
 801376e:	d002      	beq.n	8013776 <udp_input+0x15a>
    for_us = 1;
 8013770:	2301      	movs	r3, #1
 8013772:	76fb      	strb	r3, [r7, #27]
 8013774:	e00a      	b.n	801378c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013776:	683b      	ldr	r3, [r7, #0]
 8013778:	3304      	adds	r3, #4
 801377a:	681a      	ldr	r2, [r3, #0]
 801377c:	4b2d      	ldr	r3, [pc, #180]	; (8013834 <udp_input+0x218>)
 801377e:	695b      	ldr	r3, [r3, #20]
 8013780:	429a      	cmp	r2, r3
 8013782:	bf0c      	ite	eq
 8013784:	2301      	moveq	r3, #1
 8013786:	2300      	movne	r3, #0
 8013788:	b2db      	uxtb	r3, r3
 801378a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801378c:	7efb      	ldrb	r3, [r7, #27]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d041      	beq.n	8013816 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013792:	2108      	movs	r1, #8
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	f7f9 f973 	bl	800ca80 <pbuf_remove_header>
 801379a:	4603      	mov	r3, r0
 801379c:	2b00      	cmp	r3, #0
 801379e:	d00a      	beq.n	80137b6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80137a0:	4b20      	ldr	r3, [pc, #128]	; (8013824 <udp_input+0x208>)
 80137a2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80137a6:	4925      	ldr	r1, [pc, #148]	; (801383c <udp_input+0x220>)
 80137a8:	4820      	ldr	r0, [pc, #128]	; (801382c <udp_input+0x210>)
 80137aa:	f006 fc8f 	bl	801a0cc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80137ae:	6878      	ldr	r0, [r7, #4]
 80137b0:	f7f9 f9ec 	bl	800cb8c <pbuf_free>
      goto end;
 80137b4:	e032      	b.n	801381c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80137b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d012      	beq.n	80137e2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80137bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137be:	699b      	ldr	r3, [r3, #24]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d00a      	beq.n	80137da <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80137c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137c6:	699c      	ldr	r4, [r3, #24]
 80137c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ca:	69d8      	ldr	r0, [r3, #28]
 80137cc:	8a3b      	ldrh	r3, [r7, #16]
 80137ce:	9300      	str	r3, [sp, #0]
 80137d0:	4b1b      	ldr	r3, [pc, #108]	; (8013840 <udp_input+0x224>)
 80137d2:	687a      	ldr	r2, [r7, #4]
 80137d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80137d6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80137d8:	e021      	b.n	801381e <udp_input+0x202>
        pbuf_free(p);
 80137da:	6878      	ldr	r0, [r7, #4]
 80137dc:	f7f9 f9d6 	bl	800cb8c <pbuf_free>
        goto end;
 80137e0:	e01c      	b.n	801381c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80137e2:	7cfb      	ldrb	r3, [r7, #19]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d112      	bne.n	801380e <udp_input+0x1f2>
 80137e8:	4b12      	ldr	r3, [pc, #72]	; (8013834 <udp_input+0x218>)
 80137ea:	695b      	ldr	r3, [r3, #20]
 80137ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80137f0:	2be0      	cmp	r3, #224	; 0xe0
 80137f2:	d00c      	beq.n	801380e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80137f4:	4b0f      	ldr	r3, [pc, #60]	; (8013834 <udp_input+0x218>)
 80137f6:	899b      	ldrh	r3, [r3, #12]
 80137f8:	3308      	adds	r3, #8
 80137fa:	b29b      	uxth	r3, r3
 80137fc:	b21b      	sxth	r3, r3
 80137fe:	4619      	mov	r1, r3
 8013800:	6878      	ldr	r0, [r7, #4]
 8013802:	f7f9 f9b0 	bl	800cb66 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013806:	2103      	movs	r1, #3
 8013808:	6878      	ldr	r0, [r7, #4]
 801380a:	f001 f9a9 	bl	8014b60 <icmp_dest_unreach>
      pbuf_free(p);
 801380e:	6878      	ldr	r0, [r7, #4]
 8013810:	f7f9 f9bc 	bl	800cb8c <pbuf_free>
  return;
 8013814:	e003      	b.n	801381e <udp_input+0x202>
    pbuf_free(p);
 8013816:	6878      	ldr	r0, [r7, #4]
 8013818:	f7f9 f9b8 	bl	800cb8c <pbuf_free>
  return;
 801381c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801381e:	372c      	adds	r7, #44	; 0x2c
 8013820:	46bd      	mov	sp, r7
 8013822:	bd90      	pop	{r4, r7, pc}
 8013824:	0801f224 	.word	0x0801f224
 8013828:	0801f2c8 	.word	0x0801f2c8
 801382c:	0801f278 	.word	0x0801f278
 8013830:	0801f2e0 	.word	0x0801f2e0
 8013834:	20008f5c 	.word	0x20008f5c
 8013838:	200114d8 	.word	0x200114d8
 801383c:	0801f2fc 	.word	0x0801f2fc
 8013840:	20008f6c 	.word	0x20008f6c

08013844 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b086      	sub	sp, #24
 8013848:	af00      	add	r7, sp, #0
 801384a:	60f8      	str	r0, [r7, #12]
 801384c:	60b9      	str	r1, [r7, #8]
 801384e:	4613      	mov	r3, r2
 8013850:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d101      	bne.n	801385c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013858:	4b39      	ldr	r3, [pc, #228]	; (8013940 <udp_bind+0xfc>)
 801385a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d109      	bne.n	8013876 <udp_bind+0x32>
 8013862:	4b38      	ldr	r3, [pc, #224]	; (8013944 <udp_bind+0x100>)
 8013864:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013868:	4937      	ldr	r1, [pc, #220]	; (8013948 <udp_bind+0x104>)
 801386a:	4838      	ldr	r0, [pc, #224]	; (801394c <udp_bind+0x108>)
 801386c:	f006 fc2e 	bl	801a0cc <iprintf>
 8013870:	f06f 030f 	mvn.w	r3, #15
 8013874:	e060      	b.n	8013938 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013876:	2300      	movs	r3, #0
 8013878:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801387a:	4b35      	ldr	r3, [pc, #212]	; (8013950 <udp_bind+0x10c>)
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	617b      	str	r3, [r7, #20]
 8013880:	e009      	b.n	8013896 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013882:	68fa      	ldr	r2, [r7, #12]
 8013884:	697b      	ldr	r3, [r7, #20]
 8013886:	429a      	cmp	r2, r3
 8013888:	d102      	bne.n	8013890 <udp_bind+0x4c>
      rebind = 1;
 801388a:	2301      	movs	r3, #1
 801388c:	74fb      	strb	r3, [r7, #19]
      break;
 801388e:	e005      	b.n	801389c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013890:	697b      	ldr	r3, [r7, #20]
 8013892:	68db      	ldr	r3, [r3, #12]
 8013894:	617b      	str	r3, [r7, #20]
 8013896:	697b      	ldr	r3, [r7, #20]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d1f2      	bne.n	8013882 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801389c:	88fb      	ldrh	r3, [r7, #6]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d109      	bne.n	80138b6 <udp_bind+0x72>
    port = udp_new_port();
 80138a2:	f7ff fe1f 	bl	80134e4 <udp_new_port>
 80138a6:	4603      	mov	r3, r0
 80138a8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80138aa:	88fb      	ldrh	r3, [r7, #6]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d12c      	bne.n	801390a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80138b0:	f06f 0307 	mvn.w	r3, #7
 80138b4:	e040      	b.n	8013938 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80138b6:	4b26      	ldr	r3, [pc, #152]	; (8013950 <udp_bind+0x10c>)
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	617b      	str	r3, [r7, #20]
 80138bc:	e022      	b.n	8013904 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80138be:	68fa      	ldr	r2, [r7, #12]
 80138c0:	697b      	ldr	r3, [r7, #20]
 80138c2:	429a      	cmp	r2, r3
 80138c4:	d01b      	beq.n	80138fe <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80138c6:	697b      	ldr	r3, [r7, #20]
 80138c8:	8a5b      	ldrh	r3, [r3, #18]
 80138ca:	88fa      	ldrh	r2, [r7, #6]
 80138cc:	429a      	cmp	r2, r3
 80138ce:	d116      	bne.n	80138fe <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80138d0:	697b      	ldr	r3, [r7, #20]
 80138d2:	681a      	ldr	r2, [r3, #0]
 80138d4:	68bb      	ldr	r3, [r7, #8]
 80138d6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80138d8:	429a      	cmp	r2, r3
 80138da:	d00d      	beq.n	80138f8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80138dc:	68bb      	ldr	r3, [r7, #8]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d00a      	beq.n	80138f8 <udp_bind+0xb4>
 80138e2:	68bb      	ldr	r3, [r7, #8]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d006      	beq.n	80138f8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80138ea:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d003      	beq.n	80138f8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80138f0:	697b      	ldr	r3, [r7, #20]
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d102      	bne.n	80138fe <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80138f8:	f06f 0307 	mvn.w	r3, #7
 80138fc:	e01c      	b.n	8013938 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80138fe:	697b      	ldr	r3, [r7, #20]
 8013900:	68db      	ldr	r3, [r3, #12]
 8013902:	617b      	str	r3, [r7, #20]
 8013904:	697b      	ldr	r3, [r7, #20]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d1d9      	bne.n	80138be <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d002      	beq.n	8013916 <udp_bind+0xd2>
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	e000      	b.n	8013918 <udp_bind+0xd4>
 8013916:	2300      	movs	r3, #0
 8013918:	68fa      	ldr	r2, [r7, #12]
 801391a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	88fa      	ldrh	r2, [r7, #6]
 8013920:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013922:	7cfb      	ldrb	r3, [r7, #19]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d106      	bne.n	8013936 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013928:	4b09      	ldr	r3, [pc, #36]	; (8013950 <udp_bind+0x10c>)
 801392a:	681a      	ldr	r2, [r3, #0]
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013930:	4a07      	ldr	r2, [pc, #28]	; (8013950 <udp_bind+0x10c>)
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013936:	2300      	movs	r3, #0
}
 8013938:	4618      	mov	r0, r3
 801393a:	3718      	adds	r7, #24
 801393c:	46bd      	mov	sp, r7
 801393e:	bd80      	pop	{r7, pc}
 8013940:	08029558 	.word	0x08029558
 8013944:	0801f224 	.word	0x0801f224
 8013948:	0801f4ec 	.word	0x0801f4ec
 801394c:	0801f278 	.word	0x0801f278
 8013950:	200114d8 	.word	0x200114d8

08013954 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b084      	sub	sp, #16
 8013958:	af00      	add	r7, sp, #0
 801395a:	60f8      	str	r0, [r7, #12]
 801395c:	60b9      	str	r1, [r7, #8]
 801395e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d107      	bne.n	8013976 <udp_recv+0x22>
 8013966:	4b08      	ldr	r3, [pc, #32]	; (8013988 <udp_recv+0x34>)
 8013968:	f240 428a 	movw	r2, #1162	; 0x48a
 801396c:	4907      	ldr	r1, [pc, #28]	; (801398c <udp_recv+0x38>)
 801396e:	4808      	ldr	r0, [pc, #32]	; (8013990 <udp_recv+0x3c>)
 8013970:	f006 fbac 	bl	801a0cc <iprintf>
 8013974:	e005      	b.n	8013982 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	68ba      	ldr	r2, [r7, #8]
 801397a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	687a      	ldr	r2, [r7, #4]
 8013980:	61da      	str	r2, [r3, #28]
}
 8013982:	3710      	adds	r7, #16
 8013984:	46bd      	mov	sp, r7
 8013986:	bd80      	pop	{r7, pc}
 8013988:	0801f224 	.word	0x0801f224
 801398c:	0801f558 	.word	0x0801f558
 8013990:	0801f278 	.word	0x0801f278

08013994 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013994:	b580      	push	{r7, lr}
 8013996:	b084      	sub	sp, #16
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d107      	bne.n	80139b2 <udp_remove+0x1e>
 80139a2:	4b19      	ldr	r3, [pc, #100]	; (8013a08 <udp_remove+0x74>)
 80139a4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80139a8:	4918      	ldr	r1, [pc, #96]	; (8013a0c <udp_remove+0x78>)
 80139aa:	4819      	ldr	r0, [pc, #100]	; (8013a10 <udp_remove+0x7c>)
 80139ac:	f006 fb8e 	bl	801a0cc <iprintf>
 80139b0:	e026      	b.n	8013a00 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80139b2:	4b18      	ldr	r3, [pc, #96]	; (8013a14 <udp_remove+0x80>)
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	687a      	ldr	r2, [r7, #4]
 80139b8:	429a      	cmp	r2, r3
 80139ba:	d105      	bne.n	80139c8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80139bc:	4b15      	ldr	r3, [pc, #84]	; (8013a14 <udp_remove+0x80>)
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	68db      	ldr	r3, [r3, #12]
 80139c2:	4a14      	ldr	r2, [pc, #80]	; (8013a14 <udp_remove+0x80>)
 80139c4:	6013      	str	r3, [r2, #0]
 80139c6:	e017      	b.n	80139f8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80139c8:	4b12      	ldr	r3, [pc, #72]	; (8013a14 <udp_remove+0x80>)
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	60fb      	str	r3, [r7, #12]
 80139ce:	e010      	b.n	80139f2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	68db      	ldr	r3, [r3, #12]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d009      	beq.n	80139ec <udp_remove+0x58>
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	68db      	ldr	r3, [r3, #12]
 80139dc:	687a      	ldr	r2, [r7, #4]
 80139de:	429a      	cmp	r2, r3
 80139e0:	d104      	bne.n	80139ec <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	68da      	ldr	r2, [r3, #12]
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	60da      	str	r2, [r3, #12]
        break;
 80139ea:	e005      	b.n	80139f8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	68db      	ldr	r3, [r3, #12]
 80139f0:	60fb      	str	r3, [r7, #12]
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d1eb      	bne.n	80139d0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80139f8:	6879      	ldr	r1, [r7, #4]
 80139fa:	2000      	movs	r0, #0
 80139fc:	f7f8 fa22 	bl	800be44 <memp_free>
}
 8013a00:	3710      	adds	r7, #16
 8013a02:	46bd      	mov	sp, r7
 8013a04:	bd80      	pop	{r7, pc}
 8013a06:	bf00      	nop
 8013a08:	0801f224 	.word	0x0801f224
 8013a0c:	0801f570 	.word	0x0801f570
 8013a10:	0801f278 	.word	0x0801f278
 8013a14:	200114d8 	.word	0x200114d8

08013a18 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b082      	sub	sp, #8
 8013a1c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013a1e:	2000      	movs	r0, #0
 8013a20:	f7f8 f99a 	bl	800bd58 <memp_malloc>
 8013a24:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d007      	beq.n	8013a3c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013a2c:	2220      	movs	r2, #32
 8013a2e:	2100      	movs	r1, #0
 8013a30:	6878      	ldr	r0, [r7, #4]
 8013a32:	f005 ff01 	bl	8019838 <memset>
    pcb->ttl = UDP_TTL;
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	22ff      	movs	r2, #255	; 0xff
 8013a3a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013a3c:	687b      	ldr	r3, [r7, #4]
}
 8013a3e:	4618      	mov	r0, r3
 8013a40:	3708      	adds	r7, #8
 8013a42:	46bd      	mov	sp, r7
 8013a44:	bd80      	pop	{r7, pc}

08013a46 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8013a46:	b580      	push	{r7, lr}
 8013a48:	b084      	sub	sp, #16
 8013a4a:	af00      	add	r7, sp, #0
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8013a50:	f7ff ffe2 	bl	8013a18 <udp_new>
 8013a54:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013a56:	68fb      	ldr	r3, [r7, #12]
}
 8013a58:	4618      	mov	r0, r3
 8013a5a:	3710      	adds	r7, #16
 8013a5c:	46bd      	mov	sp, r7
 8013a5e:	bd80      	pop	{r7, pc}

08013a60 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013a60:	b480      	push	{r7}
 8013a62:	b085      	sub	sp, #20
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
 8013a68:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d01e      	beq.n	8013aae <udp_netif_ip_addr_changed+0x4e>
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d01a      	beq.n	8013aae <udp_netif_ip_addr_changed+0x4e>
 8013a78:	683b      	ldr	r3, [r7, #0]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d017      	beq.n	8013aae <udp_netif_ip_addr_changed+0x4e>
 8013a7e:	683b      	ldr	r3, [r7, #0]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d013      	beq.n	8013aae <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013a86:	4b0d      	ldr	r3, [pc, #52]	; (8013abc <udp_netif_ip_addr_changed+0x5c>)
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	60fb      	str	r3, [r7, #12]
 8013a8c:	e00c      	b.n	8013aa8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	681a      	ldr	r2, [r3, #0]
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	429a      	cmp	r2, r3
 8013a98:	d103      	bne.n	8013aa2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013a9a:	683b      	ldr	r3, [r7, #0]
 8013a9c:	681a      	ldr	r2, [r3, #0]
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	68db      	ldr	r3, [r3, #12]
 8013aa6:	60fb      	str	r3, [r7, #12]
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d1ef      	bne.n	8013a8e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013aae:	bf00      	nop
 8013ab0:	3714      	adds	r7, #20
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab8:	4770      	bx	lr
 8013aba:	bf00      	nop
 8013abc:	200114d8 	.word	0x200114d8

08013ac0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b082      	sub	sp, #8
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013ac8:	4915      	ldr	r1, [pc, #84]	; (8013b20 <etharp_free_entry+0x60>)
 8013aca:	687a      	ldr	r2, [r7, #4]
 8013acc:	4613      	mov	r3, r2
 8013ace:	005b      	lsls	r3, r3, #1
 8013ad0:	4413      	add	r3, r2
 8013ad2:	00db      	lsls	r3, r3, #3
 8013ad4:	440b      	add	r3, r1
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d013      	beq.n	8013b04 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013adc:	4910      	ldr	r1, [pc, #64]	; (8013b20 <etharp_free_entry+0x60>)
 8013ade:	687a      	ldr	r2, [r7, #4]
 8013ae0:	4613      	mov	r3, r2
 8013ae2:	005b      	lsls	r3, r3, #1
 8013ae4:	4413      	add	r3, r2
 8013ae6:	00db      	lsls	r3, r3, #3
 8013ae8:	440b      	add	r3, r1
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	4618      	mov	r0, r3
 8013aee:	f7f9 f84d 	bl	800cb8c <pbuf_free>
    arp_table[i].q = NULL;
 8013af2:	490b      	ldr	r1, [pc, #44]	; (8013b20 <etharp_free_entry+0x60>)
 8013af4:	687a      	ldr	r2, [r7, #4]
 8013af6:	4613      	mov	r3, r2
 8013af8:	005b      	lsls	r3, r3, #1
 8013afa:	4413      	add	r3, r2
 8013afc:	00db      	lsls	r3, r3, #3
 8013afe:	440b      	add	r3, r1
 8013b00:	2200      	movs	r2, #0
 8013b02:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013b04:	4906      	ldr	r1, [pc, #24]	; (8013b20 <etharp_free_entry+0x60>)
 8013b06:	687a      	ldr	r2, [r7, #4]
 8013b08:	4613      	mov	r3, r2
 8013b0a:	005b      	lsls	r3, r3, #1
 8013b0c:	4413      	add	r3, r2
 8013b0e:	00db      	lsls	r3, r3, #3
 8013b10:	440b      	add	r3, r1
 8013b12:	3314      	adds	r3, #20
 8013b14:	2200      	movs	r2, #0
 8013b16:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013b18:	bf00      	nop
 8013b1a:	3708      	adds	r7, #8
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	bd80      	pop	{r7, pc}
 8013b20:	200114dc 	.word	0x200114dc

08013b24 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b082      	sub	sp, #8
 8013b28:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	607b      	str	r3, [r7, #4]
 8013b2e:	e096      	b.n	8013c5e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013b30:	494f      	ldr	r1, [pc, #316]	; (8013c70 <etharp_tmr+0x14c>)
 8013b32:	687a      	ldr	r2, [r7, #4]
 8013b34:	4613      	mov	r3, r2
 8013b36:	005b      	lsls	r3, r3, #1
 8013b38:	4413      	add	r3, r2
 8013b3a:	00db      	lsls	r3, r3, #3
 8013b3c:	440b      	add	r3, r1
 8013b3e:	3314      	adds	r3, #20
 8013b40:	781b      	ldrb	r3, [r3, #0]
 8013b42:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013b44:	78fb      	ldrb	r3, [r7, #3]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	f000 8086 	beq.w	8013c58 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013b4c:	4948      	ldr	r1, [pc, #288]	; (8013c70 <etharp_tmr+0x14c>)
 8013b4e:	687a      	ldr	r2, [r7, #4]
 8013b50:	4613      	mov	r3, r2
 8013b52:	005b      	lsls	r3, r3, #1
 8013b54:	4413      	add	r3, r2
 8013b56:	00db      	lsls	r3, r3, #3
 8013b58:	440b      	add	r3, r1
 8013b5a:	3312      	adds	r3, #18
 8013b5c:	881b      	ldrh	r3, [r3, #0]
 8013b5e:	3301      	adds	r3, #1
 8013b60:	b298      	uxth	r0, r3
 8013b62:	4943      	ldr	r1, [pc, #268]	; (8013c70 <etharp_tmr+0x14c>)
 8013b64:	687a      	ldr	r2, [r7, #4]
 8013b66:	4613      	mov	r3, r2
 8013b68:	005b      	lsls	r3, r3, #1
 8013b6a:	4413      	add	r3, r2
 8013b6c:	00db      	lsls	r3, r3, #3
 8013b6e:	440b      	add	r3, r1
 8013b70:	3312      	adds	r3, #18
 8013b72:	4602      	mov	r2, r0
 8013b74:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013b76:	493e      	ldr	r1, [pc, #248]	; (8013c70 <etharp_tmr+0x14c>)
 8013b78:	687a      	ldr	r2, [r7, #4]
 8013b7a:	4613      	mov	r3, r2
 8013b7c:	005b      	lsls	r3, r3, #1
 8013b7e:	4413      	add	r3, r2
 8013b80:	00db      	lsls	r3, r3, #3
 8013b82:	440b      	add	r3, r1
 8013b84:	3312      	adds	r3, #18
 8013b86:	881b      	ldrh	r3, [r3, #0]
 8013b88:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013b8c:	d215      	bcs.n	8013bba <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013b8e:	4938      	ldr	r1, [pc, #224]	; (8013c70 <etharp_tmr+0x14c>)
 8013b90:	687a      	ldr	r2, [r7, #4]
 8013b92:	4613      	mov	r3, r2
 8013b94:	005b      	lsls	r3, r3, #1
 8013b96:	4413      	add	r3, r2
 8013b98:	00db      	lsls	r3, r3, #3
 8013b9a:	440b      	add	r3, r1
 8013b9c:	3314      	adds	r3, #20
 8013b9e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013ba0:	2b01      	cmp	r3, #1
 8013ba2:	d10e      	bne.n	8013bc2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013ba4:	4932      	ldr	r1, [pc, #200]	; (8013c70 <etharp_tmr+0x14c>)
 8013ba6:	687a      	ldr	r2, [r7, #4]
 8013ba8:	4613      	mov	r3, r2
 8013baa:	005b      	lsls	r3, r3, #1
 8013bac:	4413      	add	r3, r2
 8013bae:	00db      	lsls	r3, r3, #3
 8013bb0:	440b      	add	r3, r1
 8013bb2:	3312      	adds	r3, #18
 8013bb4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013bb6:	2b04      	cmp	r3, #4
 8013bb8:	d903      	bls.n	8013bc2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013bba:	6878      	ldr	r0, [r7, #4]
 8013bbc:	f7ff ff80 	bl	8013ac0 <etharp_free_entry>
 8013bc0:	e04a      	b.n	8013c58 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013bc2:	492b      	ldr	r1, [pc, #172]	; (8013c70 <etharp_tmr+0x14c>)
 8013bc4:	687a      	ldr	r2, [r7, #4]
 8013bc6:	4613      	mov	r3, r2
 8013bc8:	005b      	lsls	r3, r3, #1
 8013bca:	4413      	add	r3, r2
 8013bcc:	00db      	lsls	r3, r3, #3
 8013bce:	440b      	add	r3, r1
 8013bd0:	3314      	adds	r3, #20
 8013bd2:	781b      	ldrb	r3, [r3, #0]
 8013bd4:	2b03      	cmp	r3, #3
 8013bd6:	d10a      	bne.n	8013bee <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013bd8:	4925      	ldr	r1, [pc, #148]	; (8013c70 <etharp_tmr+0x14c>)
 8013bda:	687a      	ldr	r2, [r7, #4]
 8013bdc:	4613      	mov	r3, r2
 8013bde:	005b      	lsls	r3, r3, #1
 8013be0:	4413      	add	r3, r2
 8013be2:	00db      	lsls	r3, r3, #3
 8013be4:	440b      	add	r3, r1
 8013be6:	3314      	adds	r3, #20
 8013be8:	2204      	movs	r2, #4
 8013bea:	701a      	strb	r2, [r3, #0]
 8013bec:	e034      	b.n	8013c58 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013bee:	4920      	ldr	r1, [pc, #128]	; (8013c70 <etharp_tmr+0x14c>)
 8013bf0:	687a      	ldr	r2, [r7, #4]
 8013bf2:	4613      	mov	r3, r2
 8013bf4:	005b      	lsls	r3, r3, #1
 8013bf6:	4413      	add	r3, r2
 8013bf8:	00db      	lsls	r3, r3, #3
 8013bfa:	440b      	add	r3, r1
 8013bfc:	3314      	adds	r3, #20
 8013bfe:	781b      	ldrb	r3, [r3, #0]
 8013c00:	2b04      	cmp	r3, #4
 8013c02:	d10a      	bne.n	8013c1a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013c04:	491a      	ldr	r1, [pc, #104]	; (8013c70 <etharp_tmr+0x14c>)
 8013c06:	687a      	ldr	r2, [r7, #4]
 8013c08:	4613      	mov	r3, r2
 8013c0a:	005b      	lsls	r3, r3, #1
 8013c0c:	4413      	add	r3, r2
 8013c0e:	00db      	lsls	r3, r3, #3
 8013c10:	440b      	add	r3, r1
 8013c12:	3314      	adds	r3, #20
 8013c14:	2202      	movs	r2, #2
 8013c16:	701a      	strb	r2, [r3, #0]
 8013c18:	e01e      	b.n	8013c58 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013c1a:	4915      	ldr	r1, [pc, #84]	; (8013c70 <etharp_tmr+0x14c>)
 8013c1c:	687a      	ldr	r2, [r7, #4]
 8013c1e:	4613      	mov	r3, r2
 8013c20:	005b      	lsls	r3, r3, #1
 8013c22:	4413      	add	r3, r2
 8013c24:	00db      	lsls	r3, r3, #3
 8013c26:	440b      	add	r3, r1
 8013c28:	3314      	adds	r3, #20
 8013c2a:	781b      	ldrb	r3, [r3, #0]
 8013c2c:	2b01      	cmp	r3, #1
 8013c2e:	d113      	bne.n	8013c58 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013c30:	490f      	ldr	r1, [pc, #60]	; (8013c70 <etharp_tmr+0x14c>)
 8013c32:	687a      	ldr	r2, [r7, #4]
 8013c34:	4613      	mov	r3, r2
 8013c36:	005b      	lsls	r3, r3, #1
 8013c38:	4413      	add	r3, r2
 8013c3a:	00db      	lsls	r3, r3, #3
 8013c3c:	440b      	add	r3, r1
 8013c3e:	3308      	adds	r3, #8
 8013c40:	6818      	ldr	r0, [r3, #0]
 8013c42:	687a      	ldr	r2, [r7, #4]
 8013c44:	4613      	mov	r3, r2
 8013c46:	005b      	lsls	r3, r3, #1
 8013c48:	4413      	add	r3, r2
 8013c4a:	00db      	lsls	r3, r3, #3
 8013c4c:	4a08      	ldr	r2, [pc, #32]	; (8013c70 <etharp_tmr+0x14c>)
 8013c4e:	4413      	add	r3, r2
 8013c50:	3304      	adds	r3, #4
 8013c52:	4619      	mov	r1, r3
 8013c54:	f000 fe6e 	bl	8014934 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	3301      	adds	r3, #1
 8013c5c:	607b      	str	r3, [r7, #4]
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	2b09      	cmp	r3, #9
 8013c62:	f77f af65 	ble.w	8013b30 <etharp_tmr+0xc>
      }
    }
  }
}
 8013c66:	bf00      	nop
 8013c68:	bf00      	nop
 8013c6a:	3708      	adds	r7, #8
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	bd80      	pop	{r7, pc}
 8013c70:	200114dc 	.word	0x200114dc

08013c74 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b08a      	sub	sp, #40	; 0x28
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	60f8      	str	r0, [r7, #12]
 8013c7c:	460b      	mov	r3, r1
 8013c7e:	607a      	str	r2, [r7, #4]
 8013c80:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013c82:	230a      	movs	r3, #10
 8013c84:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013c86:	230a      	movs	r3, #10
 8013c88:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013c8a:	230a      	movs	r3, #10
 8013c8c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013c8e:	2300      	movs	r3, #0
 8013c90:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013c92:	230a      	movs	r3, #10
 8013c94:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013c96:	2300      	movs	r3, #0
 8013c98:	83bb      	strh	r3, [r7, #28]
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	837b      	strh	r3, [r7, #26]
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	843b      	strh	r3, [r7, #32]
 8013ca6:	e0ae      	b.n	8013e06 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013ca8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013cac:	49a6      	ldr	r1, [pc, #664]	; (8013f48 <etharp_find_entry+0x2d4>)
 8013cae:	4613      	mov	r3, r2
 8013cb0:	005b      	lsls	r3, r3, #1
 8013cb2:	4413      	add	r3, r2
 8013cb4:	00db      	lsls	r3, r3, #3
 8013cb6:	440b      	add	r3, r1
 8013cb8:	3314      	adds	r3, #20
 8013cba:	781b      	ldrb	r3, [r3, #0]
 8013cbc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013cbe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013cc2:	2b0a      	cmp	r3, #10
 8013cc4:	d105      	bne.n	8013cd2 <etharp_find_entry+0x5e>
 8013cc6:	7dfb      	ldrb	r3, [r7, #23]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d102      	bne.n	8013cd2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013ccc:	8c3b      	ldrh	r3, [r7, #32]
 8013cce:	847b      	strh	r3, [r7, #34]	; 0x22
 8013cd0:	e095      	b.n	8013dfe <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013cd2:	7dfb      	ldrb	r3, [r7, #23]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	f000 8092 	beq.w	8013dfe <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013cda:	7dfb      	ldrb	r3, [r7, #23]
 8013cdc:	2b01      	cmp	r3, #1
 8013cde:	d009      	beq.n	8013cf4 <etharp_find_entry+0x80>
 8013ce0:	7dfb      	ldrb	r3, [r7, #23]
 8013ce2:	2b01      	cmp	r3, #1
 8013ce4:	d806      	bhi.n	8013cf4 <etharp_find_entry+0x80>
 8013ce6:	4b99      	ldr	r3, [pc, #612]	; (8013f4c <etharp_find_entry+0x2d8>)
 8013ce8:	f240 1223 	movw	r2, #291	; 0x123
 8013cec:	4998      	ldr	r1, [pc, #608]	; (8013f50 <etharp_find_entry+0x2dc>)
 8013cee:	4899      	ldr	r0, [pc, #612]	; (8013f54 <etharp_find_entry+0x2e0>)
 8013cf0:	f006 f9ec 	bl	801a0cc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d020      	beq.n	8013d3c <etharp_find_entry+0xc8>
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	6819      	ldr	r1, [r3, #0]
 8013cfe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d02:	4891      	ldr	r0, [pc, #580]	; (8013f48 <etharp_find_entry+0x2d4>)
 8013d04:	4613      	mov	r3, r2
 8013d06:	005b      	lsls	r3, r3, #1
 8013d08:	4413      	add	r3, r2
 8013d0a:	00db      	lsls	r3, r3, #3
 8013d0c:	4403      	add	r3, r0
 8013d0e:	3304      	adds	r3, #4
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	4299      	cmp	r1, r3
 8013d14:	d112      	bne.n	8013d3c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d00c      	beq.n	8013d36 <etharp_find_entry+0xc2>
 8013d1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d20:	4989      	ldr	r1, [pc, #548]	; (8013f48 <etharp_find_entry+0x2d4>)
 8013d22:	4613      	mov	r3, r2
 8013d24:	005b      	lsls	r3, r3, #1
 8013d26:	4413      	add	r3, r2
 8013d28:	00db      	lsls	r3, r3, #3
 8013d2a:	440b      	add	r3, r1
 8013d2c:	3308      	adds	r3, #8
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	687a      	ldr	r2, [r7, #4]
 8013d32:	429a      	cmp	r2, r3
 8013d34:	d102      	bne.n	8013d3c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013d36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013d3a:	e100      	b.n	8013f3e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013d3c:	7dfb      	ldrb	r3, [r7, #23]
 8013d3e:	2b01      	cmp	r3, #1
 8013d40:	d140      	bne.n	8013dc4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013d42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d46:	4980      	ldr	r1, [pc, #512]	; (8013f48 <etharp_find_entry+0x2d4>)
 8013d48:	4613      	mov	r3, r2
 8013d4a:	005b      	lsls	r3, r3, #1
 8013d4c:	4413      	add	r3, r2
 8013d4e:	00db      	lsls	r3, r3, #3
 8013d50:	440b      	add	r3, r1
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d01a      	beq.n	8013d8e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013d58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d5c:	497a      	ldr	r1, [pc, #488]	; (8013f48 <etharp_find_entry+0x2d4>)
 8013d5e:	4613      	mov	r3, r2
 8013d60:	005b      	lsls	r3, r3, #1
 8013d62:	4413      	add	r3, r2
 8013d64:	00db      	lsls	r3, r3, #3
 8013d66:	440b      	add	r3, r1
 8013d68:	3312      	adds	r3, #18
 8013d6a:	881b      	ldrh	r3, [r3, #0]
 8013d6c:	8bba      	ldrh	r2, [r7, #28]
 8013d6e:	429a      	cmp	r2, r3
 8013d70:	d845      	bhi.n	8013dfe <etharp_find_entry+0x18a>
            old_queue = i;
 8013d72:	8c3b      	ldrh	r3, [r7, #32]
 8013d74:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013d76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d7a:	4973      	ldr	r1, [pc, #460]	; (8013f48 <etharp_find_entry+0x2d4>)
 8013d7c:	4613      	mov	r3, r2
 8013d7e:	005b      	lsls	r3, r3, #1
 8013d80:	4413      	add	r3, r2
 8013d82:	00db      	lsls	r3, r3, #3
 8013d84:	440b      	add	r3, r1
 8013d86:	3312      	adds	r3, #18
 8013d88:	881b      	ldrh	r3, [r3, #0]
 8013d8a:	83bb      	strh	r3, [r7, #28]
 8013d8c:	e037      	b.n	8013dfe <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013d8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d92:	496d      	ldr	r1, [pc, #436]	; (8013f48 <etharp_find_entry+0x2d4>)
 8013d94:	4613      	mov	r3, r2
 8013d96:	005b      	lsls	r3, r3, #1
 8013d98:	4413      	add	r3, r2
 8013d9a:	00db      	lsls	r3, r3, #3
 8013d9c:	440b      	add	r3, r1
 8013d9e:	3312      	adds	r3, #18
 8013da0:	881b      	ldrh	r3, [r3, #0]
 8013da2:	8b7a      	ldrh	r2, [r7, #26]
 8013da4:	429a      	cmp	r2, r3
 8013da6:	d82a      	bhi.n	8013dfe <etharp_find_entry+0x18a>
            old_pending = i;
 8013da8:	8c3b      	ldrh	r3, [r7, #32]
 8013daa:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013dac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013db0:	4965      	ldr	r1, [pc, #404]	; (8013f48 <etharp_find_entry+0x2d4>)
 8013db2:	4613      	mov	r3, r2
 8013db4:	005b      	lsls	r3, r3, #1
 8013db6:	4413      	add	r3, r2
 8013db8:	00db      	lsls	r3, r3, #3
 8013dba:	440b      	add	r3, r1
 8013dbc:	3312      	adds	r3, #18
 8013dbe:	881b      	ldrh	r3, [r3, #0]
 8013dc0:	837b      	strh	r3, [r7, #26]
 8013dc2:	e01c      	b.n	8013dfe <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013dc4:	7dfb      	ldrb	r3, [r7, #23]
 8013dc6:	2b01      	cmp	r3, #1
 8013dc8:	d919      	bls.n	8013dfe <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013dca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013dce:	495e      	ldr	r1, [pc, #376]	; (8013f48 <etharp_find_entry+0x2d4>)
 8013dd0:	4613      	mov	r3, r2
 8013dd2:	005b      	lsls	r3, r3, #1
 8013dd4:	4413      	add	r3, r2
 8013dd6:	00db      	lsls	r3, r3, #3
 8013dd8:	440b      	add	r3, r1
 8013dda:	3312      	adds	r3, #18
 8013ddc:	881b      	ldrh	r3, [r3, #0]
 8013dde:	8b3a      	ldrh	r2, [r7, #24]
 8013de0:	429a      	cmp	r2, r3
 8013de2:	d80c      	bhi.n	8013dfe <etharp_find_entry+0x18a>
            old_stable = i;
 8013de4:	8c3b      	ldrh	r3, [r7, #32]
 8013de6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013de8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013dec:	4956      	ldr	r1, [pc, #344]	; (8013f48 <etharp_find_entry+0x2d4>)
 8013dee:	4613      	mov	r3, r2
 8013df0:	005b      	lsls	r3, r3, #1
 8013df2:	4413      	add	r3, r2
 8013df4:	00db      	lsls	r3, r3, #3
 8013df6:	440b      	add	r3, r1
 8013df8:	3312      	adds	r3, #18
 8013dfa:	881b      	ldrh	r3, [r3, #0]
 8013dfc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013dfe:	8c3b      	ldrh	r3, [r7, #32]
 8013e00:	3301      	adds	r3, #1
 8013e02:	b29b      	uxth	r3, r3
 8013e04:	843b      	strh	r3, [r7, #32]
 8013e06:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013e0a:	2b09      	cmp	r3, #9
 8013e0c:	f77f af4c 	ble.w	8013ca8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013e10:	7afb      	ldrb	r3, [r7, #11]
 8013e12:	f003 0302 	and.w	r3, r3, #2
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d108      	bne.n	8013e2c <etharp_find_entry+0x1b8>
 8013e1a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013e1e:	2b0a      	cmp	r3, #10
 8013e20:	d107      	bne.n	8013e32 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013e22:	7afb      	ldrb	r3, [r7, #11]
 8013e24:	f003 0301 	and.w	r3, r3, #1
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d102      	bne.n	8013e32 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013e30:	e085      	b.n	8013f3e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013e32:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013e36:	2b09      	cmp	r3, #9
 8013e38:	dc02      	bgt.n	8013e40 <etharp_find_entry+0x1cc>
    i = empty;
 8013e3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013e3c:	843b      	strh	r3, [r7, #32]
 8013e3e:	e039      	b.n	8013eb4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013e40:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013e44:	2b09      	cmp	r3, #9
 8013e46:	dc14      	bgt.n	8013e72 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013e48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e4a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013e4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e50:	493d      	ldr	r1, [pc, #244]	; (8013f48 <etharp_find_entry+0x2d4>)
 8013e52:	4613      	mov	r3, r2
 8013e54:	005b      	lsls	r3, r3, #1
 8013e56:	4413      	add	r3, r2
 8013e58:	00db      	lsls	r3, r3, #3
 8013e5a:	440b      	add	r3, r1
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d018      	beq.n	8013e94 <etharp_find_entry+0x220>
 8013e62:	4b3a      	ldr	r3, [pc, #232]	; (8013f4c <etharp_find_entry+0x2d8>)
 8013e64:	f240 126d 	movw	r2, #365	; 0x16d
 8013e68:	493b      	ldr	r1, [pc, #236]	; (8013f58 <etharp_find_entry+0x2e4>)
 8013e6a:	483a      	ldr	r0, [pc, #232]	; (8013f54 <etharp_find_entry+0x2e0>)
 8013e6c:	f006 f92e 	bl	801a0cc <iprintf>
 8013e70:	e010      	b.n	8013e94 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013e72:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013e76:	2b09      	cmp	r3, #9
 8013e78:	dc02      	bgt.n	8013e80 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013e7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013e7c:	843b      	strh	r3, [r7, #32]
 8013e7e:	e009      	b.n	8013e94 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013e80:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013e84:	2b09      	cmp	r3, #9
 8013e86:	dc02      	bgt.n	8013e8e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013e88:	8bfb      	ldrh	r3, [r7, #30]
 8013e8a:	843b      	strh	r3, [r7, #32]
 8013e8c:	e002      	b.n	8013e94 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013e92:	e054      	b.n	8013f3e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013e94:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013e98:	2b09      	cmp	r3, #9
 8013e9a:	dd06      	ble.n	8013eaa <etharp_find_entry+0x236>
 8013e9c:	4b2b      	ldr	r3, [pc, #172]	; (8013f4c <etharp_find_entry+0x2d8>)
 8013e9e:	f240 127f 	movw	r2, #383	; 0x17f
 8013ea2:	492e      	ldr	r1, [pc, #184]	; (8013f5c <etharp_find_entry+0x2e8>)
 8013ea4:	482b      	ldr	r0, [pc, #172]	; (8013f54 <etharp_find_entry+0x2e0>)
 8013ea6:	f006 f911 	bl	801a0cc <iprintf>
    etharp_free_entry(i);
 8013eaa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013eae:	4618      	mov	r0, r3
 8013eb0:	f7ff fe06 	bl	8013ac0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013eb4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013eb8:	2b09      	cmp	r3, #9
 8013eba:	dd06      	ble.n	8013eca <etharp_find_entry+0x256>
 8013ebc:	4b23      	ldr	r3, [pc, #140]	; (8013f4c <etharp_find_entry+0x2d8>)
 8013ebe:	f240 1283 	movw	r2, #387	; 0x183
 8013ec2:	4926      	ldr	r1, [pc, #152]	; (8013f5c <etharp_find_entry+0x2e8>)
 8013ec4:	4823      	ldr	r0, [pc, #140]	; (8013f54 <etharp_find_entry+0x2e0>)
 8013ec6:	f006 f901 	bl	801a0cc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013eca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ece:	491e      	ldr	r1, [pc, #120]	; (8013f48 <etharp_find_entry+0x2d4>)
 8013ed0:	4613      	mov	r3, r2
 8013ed2:	005b      	lsls	r3, r3, #1
 8013ed4:	4413      	add	r3, r2
 8013ed6:	00db      	lsls	r3, r3, #3
 8013ed8:	440b      	add	r3, r1
 8013eda:	3314      	adds	r3, #20
 8013edc:	781b      	ldrb	r3, [r3, #0]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d006      	beq.n	8013ef0 <etharp_find_entry+0x27c>
 8013ee2:	4b1a      	ldr	r3, [pc, #104]	; (8013f4c <etharp_find_entry+0x2d8>)
 8013ee4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8013ee8:	491d      	ldr	r1, [pc, #116]	; (8013f60 <etharp_find_entry+0x2ec>)
 8013eea:	481a      	ldr	r0, [pc, #104]	; (8013f54 <etharp_find_entry+0x2e0>)
 8013eec:	f006 f8ee 	bl	801a0cc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d00b      	beq.n	8013f0e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013ef6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	6819      	ldr	r1, [r3, #0]
 8013efe:	4812      	ldr	r0, [pc, #72]	; (8013f48 <etharp_find_entry+0x2d4>)
 8013f00:	4613      	mov	r3, r2
 8013f02:	005b      	lsls	r3, r3, #1
 8013f04:	4413      	add	r3, r2
 8013f06:	00db      	lsls	r3, r3, #3
 8013f08:	4403      	add	r3, r0
 8013f0a:	3304      	adds	r3, #4
 8013f0c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013f0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f12:	490d      	ldr	r1, [pc, #52]	; (8013f48 <etharp_find_entry+0x2d4>)
 8013f14:	4613      	mov	r3, r2
 8013f16:	005b      	lsls	r3, r3, #1
 8013f18:	4413      	add	r3, r2
 8013f1a:	00db      	lsls	r3, r3, #3
 8013f1c:	440b      	add	r3, r1
 8013f1e:	3312      	adds	r3, #18
 8013f20:	2200      	movs	r2, #0
 8013f22:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013f24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f28:	4907      	ldr	r1, [pc, #28]	; (8013f48 <etharp_find_entry+0x2d4>)
 8013f2a:	4613      	mov	r3, r2
 8013f2c:	005b      	lsls	r3, r3, #1
 8013f2e:	4413      	add	r3, r2
 8013f30:	00db      	lsls	r3, r3, #3
 8013f32:	440b      	add	r3, r1
 8013f34:	3308      	adds	r3, #8
 8013f36:	687a      	ldr	r2, [r7, #4]
 8013f38:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013f3a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013f3e:	4618      	mov	r0, r3
 8013f40:	3728      	adds	r7, #40	; 0x28
 8013f42:	46bd      	mov	sp, r7
 8013f44:	bd80      	pop	{r7, pc}
 8013f46:	bf00      	nop
 8013f48:	200114dc 	.word	0x200114dc
 8013f4c:	0801f588 	.word	0x0801f588
 8013f50:	0801f5c0 	.word	0x0801f5c0
 8013f54:	0801f600 	.word	0x0801f600
 8013f58:	0801f628 	.word	0x0801f628
 8013f5c:	0801f640 	.word	0x0801f640
 8013f60:	0801f654 	.word	0x0801f654

08013f64 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b088      	sub	sp, #32
 8013f68:	af02      	add	r7, sp, #8
 8013f6a:	60f8      	str	r0, [r7, #12]
 8013f6c:	60b9      	str	r1, [r7, #8]
 8013f6e:	607a      	str	r2, [r7, #4]
 8013f70:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013f78:	2b06      	cmp	r3, #6
 8013f7a:	d006      	beq.n	8013f8a <etharp_update_arp_entry+0x26>
 8013f7c:	4b48      	ldr	r3, [pc, #288]	; (80140a0 <etharp_update_arp_entry+0x13c>)
 8013f7e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8013f82:	4948      	ldr	r1, [pc, #288]	; (80140a4 <etharp_update_arp_entry+0x140>)
 8013f84:	4848      	ldr	r0, [pc, #288]	; (80140a8 <etharp_update_arp_entry+0x144>)
 8013f86:	f006 f8a1 	bl	801a0cc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013f8a:	68bb      	ldr	r3, [r7, #8]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d012      	beq.n	8013fb6 <etharp_update_arp_entry+0x52>
 8013f90:	68bb      	ldr	r3, [r7, #8]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d00e      	beq.n	8013fb6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013f98:	68bb      	ldr	r3, [r7, #8]
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	68f9      	ldr	r1, [r7, #12]
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	f001 f8fe 	bl	80151a0 <ip4_addr_isbroadcast_u32>
 8013fa4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d105      	bne.n	8013fb6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013faa:	68bb      	ldr	r3, [r7, #8]
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013fb2:	2be0      	cmp	r3, #224	; 0xe0
 8013fb4:	d102      	bne.n	8013fbc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013fb6:	f06f 030f 	mvn.w	r3, #15
 8013fba:	e06c      	b.n	8014096 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013fbc:	78fb      	ldrb	r3, [r7, #3]
 8013fbe:	68fa      	ldr	r2, [r7, #12]
 8013fc0:	4619      	mov	r1, r3
 8013fc2:	68b8      	ldr	r0, [r7, #8]
 8013fc4:	f7ff fe56 	bl	8013c74 <etharp_find_entry>
 8013fc8:	4603      	mov	r3, r0
 8013fca:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013fcc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	da02      	bge.n	8013fda <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013fd4:	8afb      	ldrh	r3, [r7, #22]
 8013fd6:	b25b      	sxtb	r3, r3
 8013fd8:	e05d      	b.n	8014096 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013fda:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013fde:	4933      	ldr	r1, [pc, #204]	; (80140ac <etharp_update_arp_entry+0x148>)
 8013fe0:	4613      	mov	r3, r2
 8013fe2:	005b      	lsls	r3, r3, #1
 8013fe4:	4413      	add	r3, r2
 8013fe6:	00db      	lsls	r3, r3, #3
 8013fe8:	440b      	add	r3, r1
 8013fea:	3314      	adds	r3, #20
 8013fec:	2202      	movs	r2, #2
 8013fee:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013ff0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013ff4:	492d      	ldr	r1, [pc, #180]	; (80140ac <etharp_update_arp_entry+0x148>)
 8013ff6:	4613      	mov	r3, r2
 8013ff8:	005b      	lsls	r3, r3, #1
 8013ffa:	4413      	add	r3, r2
 8013ffc:	00db      	lsls	r3, r3, #3
 8013ffe:	440b      	add	r3, r1
 8014000:	3308      	adds	r3, #8
 8014002:	68fa      	ldr	r2, [r7, #12]
 8014004:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014006:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801400a:	4613      	mov	r3, r2
 801400c:	005b      	lsls	r3, r3, #1
 801400e:	4413      	add	r3, r2
 8014010:	00db      	lsls	r3, r3, #3
 8014012:	3308      	adds	r3, #8
 8014014:	4a25      	ldr	r2, [pc, #148]	; (80140ac <etharp_update_arp_entry+0x148>)
 8014016:	4413      	add	r3, r2
 8014018:	3304      	adds	r3, #4
 801401a:	2206      	movs	r2, #6
 801401c:	6879      	ldr	r1, [r7, #4]
 801401e:	4618      	mov	r0, r3
 8014020:	f005 fbe2 	bl	80197e8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014024:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014028:	4920      	ldr	r1, [pc, #128]	; (80140ac <etharp_update_arp_entry+0x148>)
 801402a:	4613      	mov	r3, r2
 801402c:	005b      	lsls	r3, r3, #1
 801402e:	4413      	add	r3, r2
 8014030:	00db      	lsls	r3, r3, #3
 8014032:	440b      	add	r3, r1
 8014034:	3312      	adds	r3, #18
 8014036:	2200      	movs	r2, #0
 8014038:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801403a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801403e:	491b      	ldr	r1, [pc, #108]	; (80140ac <etharp_update_arp_entry+0x148>)
 8014040:	4613      	mov	r3, r2
 8014042:	005b      	lsls	r3, r3, #1
 8014044:	4413      	add	r3, r2
 8014046:	00db      	lsls	r3, r3, #3
 8014048:	440b      	add	r3, r1
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d021      	beq.n	8014094 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014050:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014054:	4915      	ldr	r1, [pc, #84]	; (80140ac <etharp_update_arp_entry+0x148>)
 8014056:	4613      	mov	r3, r2
 8014058:	005b      	lsls	r3, r3, #1
 801405a:	4413      	add	r3, r2
 801405c:	00db      	lsls	r3, r3, #3
 801405e:	440b      	add	r3, r1
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014064:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014068:	4910      	ldr	r1, [pc, #64]	; (80140ac <etharp_update_arp_entry+0x148>)
 801406a:	4613      	mov	r3, r2
 801406c:	005b      	lsls	r3, r3, #1
 801406e:	4413      	add	r3, r2
 8014070:	00db      	lsls	r3, r3, #3
 8014072:	440b      	add	r3, r1
 8014074:	2200      	movs	r2, #0
 8014076:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801407e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014082:	9300      	str	r3, [sp, #0]
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	6939      	ldr	r1, [r7, #16]
 8014088:	68f8      	ldr	r0, [r7, #12]
 801408a:	f001 ff97 	bl	8015fbc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801408e:	6938      	ldr	r0, [r7, #16]
 8014090:	f7f8 fd7c 	bl	800cb8c <pbuf_free>
  }
  return ERR_OK;
 8014094:	2300      	movs	r3, #0
}
 8014096:	4618      	mov	r0, r3
 8014098:	3718      	adds	r7, #24
 801409a:	46bd      	mov	sp, r7
 801409c:	bd80      	pop	{r7, pc}
 801409e:	bf00      	nop
 80140a0:	0801f588 	.word	0x0801f588
 80140a4:	0801f680 	.word	0x0801f680
 80140a8:	0801f600 	.word	0x0801f600
 80140ac:	200114dc 	.word	0x200114dc

080140b0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b084      	sub	sp, #16
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80140b8:	2300      	movs	r3, #0
 80140ba:	60fb      	str	r3, [r7, #12]
 80140bc:	e01e      	b.n	80140fc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80140be:	4913      	ldr	r1, [pc, #76]	; (801410c <etharp_cleanup_netif+0x5c>)
 80140c0:	68fa      	ldr	r2, [r7, #12]
 80140c2:	4613      	mov	r3, r2
 80140c4:	005b      	lsls	r3, r3, #1
 80140c6:	4413      	add	r3, r2
 80140c8:	00db      	lsls	r3, r3, #3
 80140ca:	440b      	add	r3, r1
 80140cc:	3314      	adds	r3, #20
 80140ce:	781b      	ldrb	r3, [r3, #0]
 80140d0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80140d2:	7afb      	ldrb	r3, [r7, #11]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d00e      	beq.n	80140f6 <etharp_cleanup_netif+0x46>
 80140d8:	490c      	ldr	r1, [pc, #48]	; (801410c <etharp_cleanup_netif+0x5c>)
 80140da:	68fa      	ldr	r2, [r7, #12]
 80140dc:	4613      	mov	r3, r2
 80140de:	005b      	lsls	r3, r3, #1
 80140e0:	4413      	add	r3, r2
 80140e2:	00db      	lsls	r3, r3, #3
 80140e4:	440b      	add	r3, r1
 80140e6:	3308      	adds	r3, #8
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	687a      	ldr	r2, [r7, #4]
 80140ec:	429a      	cmp	r2, r3
 80140ee:	d102      	bne.n	80140f6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80140f0:	68f8      	ldr	r0, [r7, #12]
 80140f2:	f7ff fce5 	bl	8013ac0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	3301      	adds	r3, #1
 80140fa:	60fb      	str	r3, [r7, #12]
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	2b09      	cmp	r3, #9
 8014100:	dddd      	ble.n	80140be <etharp_cleanup_netif+0xe>
    }
  }
}
 8014102:	bf00      	nop
 8014104:	bf00      	nop
 8014106:	3710      	adds	r7, #16
 8014108:	46bd      	mov	sp, r7
 801410a:	bd80      	pop	{r7, pc}
 801410c:	200114dc 	.word	0x200114dc

08014110 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014110:	b5b0      	push	{r4, r5, r7, lr}
 8014112:	b08a      	sub	sp, #40	; 0x28
 8014114:	af04      	add	r7, sp, #16
 8014116:	6078      	str	r0, [r7, #4]
 8014118:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801411a:	683b      	ldr	r3, [r7, #0]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d107      	bne.n	8014130 <etharp_input+0x20>
 8014120:	4b3d      	ldr	r3, [pc, #244]	; (8014218 <etharp_input+0x108>)
 8014122:	f240 228a 	movw	r2, #650	; 0x28a
 8014126:	493d      	ldr	r1, [pc, #244]	; (801421c <etharp_input+0x10c>)
 8014128:	483d      	ldr	r0, [pc, #244]	; (8014220 <etharp_input+0x110>)
 801412a:	f005 ffcf 	bl	801a0cc <iprintf>
 801412e:	e06f      	b.n	8014210 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	685b      	ldr	r3, [r3, #4]
 8014134:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014136:	693b      	ldr	r3, [r7, #16]
 8014138:	881b      	ldrh	r3, [r3, #0]
 801413a:	b29b      	uxth	r3, r3
 801413c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014140:	d10c      	bne.n	801415c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014142:	693b      	ldr	r3, [r7, #16]
 8014144:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014146:	2b06      	cmp	r3, #6
 8014148:	d108      	bne.n	801415c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801414a:	693b      	ldr	r3, [r7, #16]
 801414c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801414e:	2b04      	cmp	r3, #4
 8014150:	d104      	bne.n	801415c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014152:	693b      	ldr	r3, [r7, #16]
 8014154:	885b      	ldrh	r3, [r3, #2]
 8014156:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014158:	2b08      	cmp	r3, #8
 801415a:	d003      	beq.n	8014164 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801415c:	6878      	ldr	r0, [r7, #4]
 801415e:	f7f8 fd15 	bl	800cb8c <pbuf_free>
    return;
 8014162:	e055      	b.n	8014210 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014164:	693b      	ldr	r3, [r7, #16]
 8014166:	330e      	adds	r3, #14
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801416c:	693b      	ldr	r3, [r7, #16]
 801416e:	3318      	adds	r3, #24
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014174:	683b      	ldr	r3, [r7, #0]
 8014176:	3304      	adds	r3, #4
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	2b00      	cmp	r3, #0
 801417c:	d102      	bne.n	8014184 <etharp_input+0x74>
    for_us = 0;
 801417e:	2300      	movs	r3, #0
 8014180:	75fb      	strb	r3, [r7, #23]
 8014182:	e009      	b.n	8014198 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014184:	68ba      	ldr	r2, [r7, #8]
 8014186:	683b      	ldr	r3, [r7, #0]
 8014188:	3304      	adds	r3, #4
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	429a      	cmp	r2, r3
 801418e:	bf0c      	ite	eq
 8014190:	2301      	moveq	r3, #1
 8014192:	2300      	movne	r3, #0
 8014194:	b2db      	uxtb	r3, r3
 8014196:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014198:	693b      	ldr	r3, [r7, #16]
 801419a:	f103 0208 	add.w	r2, r3, #8
 801419e:	7dfb      	ldrb	r3, [r7, #23]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d001      	beq.n	80141a8 <etharp_input+0x98>
 80141a4:	2301      	movs	r3, #1
 80141a6:	e000      	b.n	80141aa <etharp_input+0x9a>
 80141a8:	2302      	movs	r3, #2
 80141aa:	f107 010c 	add.w	r1, r7, #12
 80141ae:	6838      	ldr	r0, [r7, #0]
 80141b0:	f7ff fed8 	bl	8013f64 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80141b4:	693b      	ldr	r3, [r7, #16]
 80141b6:	88db      	ldrh	r3, [r3, #6]
 80141b8:	b29b      	uxth	r3, r3
 80141ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80141be:	d003      	beq.n	80141c8 <etharp_input+0xb8>
 80141c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80141c4:	d01e      	beq.n	8014204 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80141c6:	e020      	b.n	801420a <etharp_input+0xfa>
      if (for_us) {
 80141c8:	7dfb      	ldrb	r3, [r7, #23]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d01c      	beq.n	8014208 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80141ce:	683b      	ldr	r3, [r7, #0]
 80141d0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80141d4:	693b      	ldr	r3, [r7, #16]
 80141d6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80141da:	683b      	ldr	r3, [r7, #0]
 80141dc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80141e0:	683b      	ldr	r3, [r7, #0]
 80141e2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80141e4:	693a      	ldr	r2, [r7, #16]
 80141e6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80141e8:	2102      	movs	r1, #2
 80141ea:	9103      	str	r1, [sp, #12]
 80141ec:	f107 010c 	add.w	r1, r7, #12
 80141f0:	9102      	str	r1, [sp, #8]
 80141f2:	9201      	str	r2, [sp, #4]
 80141f4:	9300      	str	r3, [sp, #0]
 80141f6:	462b      	mov	r3, r5
 80141f8:	4622      	mov	r2, r4
 80141fa:	4601      	mov	r1, r0
 80141fc:	6838      	ldr	r0, [r7, #0]
 80141fe:	f000 faeb 	bl	80147d8 <etharp_raw>
      break;
 8014202:	e001      	b.n	8014208 <etharp_input+0xf8>
      break;
 8014204:	bf00      	nop
 8014206:	e000      	b.n	801420a <etharp_input+0xfa>
      break;
 8014208:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801420a:	6878      	ldr	r0, [r7, #4]
 801420c:	f7f8 fcbe 	bl	800cb8c <pbuf_free>
}
 8014210:	3718      	adds	r7, #24
 8014212:	46bd      	mov	sp, r7
 8014214:	bdb0      	pop	{r4, r5, r7, pc}
 8014216:	bf00      	nop
 8014218:	0801f588 	.word	0x0801f588
 801421c:	0801f6d8 	.word	0x0801f6d8
 8014220:	0801f600 	.word	0x0801f600

08014224 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b086      	sub	sp, #24
 8014228:	af02      	add	r7, sp, #8
 801422a:	60f8      	str	r0, [r7, #12]
 801422c:	60b9      	str	r1, [r7, #8]
 801422e:	4613      	mov	r3, r2
 8014230:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014232:	79fa      	ldrb	r2, [r7, #7]
 8014234:	4944      	ldr	r1, [pc, #272]	; (8014348 <etharp_output_to_arp_index+0x124>)
 8014236:	4613      	mov	r3, r2
 8014238:	005b      	lsls	r3, r3, #1
 801423a:	4413      	add	r3, r2
 801423c:	00db      	lsls	r3, r3, #3
 801423e:	440b      	add	r3, r1
 8014240:	3314      	adds	r3, #20
 8014242:	781b      	ldrb	r3, [r3, #0]
 8014244:	2b01      	cmp	r3, #1
 8014246:	d806      	bhi.n	8014256 <etharp_output_to_arp_index+0x32>
 8014248:	4b40      	ldr	r3, [pc, #256]	; (801434c <etharp_output_to_arp_index+0x128>)
 801424a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801424e:	4940      	ldr	r1, [pc, #256]	; (8014350 <etharp_output_to_arp_index+0x12c>)
 8014250:	4840      	ldr	r0, [pc, #256]	; (8014354 <etharp_output_to_arp_index+0x130>)
 8014252:	f005 ff3b 	bl	801a0cc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014256:	79fa      	ldrb	r2, [r7, #7]
 8014258:	493b      	ldr	r1, [pc, #236]	; (8014348 <etharp_output_to_arp_index+0x124>)
 801425a:	4613      	mov	r3, r2
 801425c:	005b      	lsls	r3, r3, #1
 801425e:	4413      	add	r3, r2
 8014260:	00db      	lsls	r3, r3, #3
 8014262:	440b      	add	r3, r1
 8014264:	3314      	adds	r3, #20
 8014266:	781b      	ldrb	r3, [r3, #0]
 8014268:	2b02      	cmp	r3, #2
 801426a:	d153      	bne.n	8014314 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801426c:	79fa      	ldrb	r2, [r7, #7]
 801426e:	4936      	ldr	r1, [pc, #216]	; (8014348 <etharp_output_to_arp_index+0x124>)
 8014270:	4613      	mov	r3, r2
 8014272:	005b      	lsls	r3, r3, #1
 8014274:	4413      	add	r3, r2
 8014276:	00db      	lsls	r3, r3, #3
 8014278:	440b      	add	r3, r1
 801427a:	3312      	adds	r3, #18
 801427c:	881b      	ldrh	r3, [r3, #0]
 801427e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014282:	d919      	bls.n	80142b8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014284:	79fa      	ldrb	r2, [r7, #7]
 8014286:	4613      	mov	r3, r2
 8014288:	005b      	lsls	r3, r3, #1
 801428a:	4413      	add	r3, r2
 801428c:	00db      	lsls	r3, r3, #3
 801428e:	4a2e      	ldr	r2, [pc, #184]	; (8014348 <etharp_output_to_arp_index+0x124>)
 8014290:	4413      	add	r3, r2
 8014292:	3304      	adds	r3, #4
 8014294:	4619      	mov	r1, r3
 8014296:	68f8      	ldr	r0, [r7, #12]
 8014298:	f000 fb4c 	bl	8014934 <etharp_request>
 801429c:	4603      	mov	r3, r0
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d138      	bne.n	8014314 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80142a2:	79fa      	ldrb	r2, [r7, #7]
 80142a4:	4928      	ldr	r1, [pc, #160]	; (8014348 <etharp_output_to_arp_index+0x124>)
 80142a6:	4613      	mov	r3, r2
 80142a8:	005b      	lsls	r3, r3, #1
 80142aa:	4413      	add	r3, r2
 80142ac:	00db      	lsls	r3, r3, #3
 80142ae:	440b      	add	r3, r1
 80142b0:	3314      	adds	r3, #20
 80142b2:	2203      	movs	r2, #3
 80142b4:	701a      	strb	r2, [r3, #0]
 80142b6:	e02d      	b.n	8014314 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80142b8:	79fa      	ldrb	r2, [r7, #7]
 80142ba:	4923      	ldr	r1, [pc, #140]	; (8014348 <etharp_output_to_arp_index+0x124>)
 80142bc:	4613      	mov	r3, r2
 80142be:	005b      	lsls	r3, r3, #1
 80142c0:	4413      	add	r3, r2
 80142c2:	00db      	lsls	r3, r3, #3
 80142c4:	440b      	add	r3, r1
 80142c6:	3312      	adds	r3, #18
 80142c8:	881b      	ldrh	r3, [r3, #0]
 80142ca:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80142ce:	d321      	bcc.n	8014314 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80142d0:	79fa      	ldrb	r2, [r7, #7]
 80142d2:	4613      	mov	r3, r2
 80142d4:	005b      	lsls	r3, r3, #1
 80142d6:	4413      	add	r3, r2
 80142d8:	00db      	lsls	r3, r3, #3
 80142da:	4a1b      	ldr	r2, [pc, #108]	; (8014348 <etharp_output_to_arp_index+0x124>)
 80142dc:	4413      	add	r3, r2
 80142de:	1d19      	adds	r1, r3, #4
 80142e0:	79fa      	ldrb	r2, [r7, #7]
 80142e2:	4613      	mov	r3, r2
 80142e4:	005b      	lsls	r3, r3, #1
 80142e6:	4413      	add	r3, r2
 80142e8:	00db      	lsls	r3, r3, #3
 80142ea:	3308      	adds	r3, #8
 80142ec:	4a16      	ldr	r2, [pc, #88]	; (8014348 <etharp_output_to_arp_index+0x124>)
 80142ee:	4413      	add	r3, r2
 80142f0:	3304      	adds	r3, #4
 80142f2:	461a      	mov	r2, r3
 80142f4:	68f8      	ldr	r0, [r7, #12]
 80142f6:	f000 fafb 	bl	80148f0 <etharp_request_dst>
 80142fa:	4603      	mov	r3, r0
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d109      	bne.n	8014314 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014300:	79fa      	ldrb	r2, [r7, #7]
 8014302:	4911      	ldr	r1, [pc, #68]	; (8014348 <etharp_output_to_arp_index+0x124>)
 8014304:	4613      	mov	r3, r2
 8014306:	005b      	lsls	r3, r3, #1
 8014308:	4413      	add	r3, r2
 801430a:	00db      	lsls	r3, r3, #3
 801430c:	440b      	add	r3, r1
 801430e:	3314      	adds	r3, #20
 8014310:	2203      	movs	r2, #3
 8014312:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801431a:	79fa      	ldrb	r2, [r7, #7]
 801431c:	4613      	mov	r3, r2
 801431e:	005b      	lsls	r3, r3, #1
 8014320:	4413      	add	r3, r2
 8014322:	00db      	lsls	r3, r3, #3
 8014324:	3308      	adds	r3, #8
 8014326:	4a08      	ldr	r2, [pc, #32]	; (8014348 <etharp_output_to_arp_index+0x124>)
 8014328:	4413      	add	r3, r2
 801432a:	3304      	adds	r3, #4
 801432c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014330:	9200      	str	r2, [sp, #0]
 8014332:	460a      	mov	r2, r1
 8014334:	68b9      	ldr	r1, [r7, #8]
 8014336:	68f8      	ldr	r0, [r7, #12]
 8014338:	f001 fe40 	bl	8015fbc <ethernet_output>
 801433c:	4603      	mov	r3, r0
}
 801433e:	4618      	mov	r0, r3
 8014340:	3710      	adds	r7, #16
 8014342:	46bd      	mov	sp, r7
 8014344:	bd80      	pop	{r7, pc}
 8014346:	bf00      	nop
 8014348:	200114dc 	.word	0x200114dc
 801434c:	0801f588 	.word	0x0801f588
 8014350:	0801f6f8 	.word	0x0801f6f8
 8014354:	0801f600 	.word	0x0801f600

08014358 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b08a      	sub	sp, #40	; 0x28
 801435c:	af02      	add	r7, sp, #8
 801435e:	60f8      	str	r0, [r7, #12]
 8014360:	60b9      	str	r1, [r7, #8]
 8014362:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d106      	bne.n	801437c <etharp_output+0x24>
 801436e:	4b73      	ldr	r3, [pc, #460]	; (801453c <etharp_output+0x1e4>)
 8014370:	f240 321e 	movw	r2, #798	; 0x31e
 8014374:	4972      	ldr	r1, [pc, #456]	; (8014540 <etharp_output+0x1e8>)
 8014376:	4873      	ldr	r0, [pc, #460]	; (8014544 <etharp_output+0x1ec>)
 8014378:	f005 fea8 	bl	801a0cc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801437c:	68bb      	ldr	r3, [r7, #8]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d106      	bne.n	8014390 <etharp_output+0x38>
 8014382:	4b6e      	ldr	r3, [pc, #440]	; (801453c <etharp_output+0x1e4>)
 8014384:	f240 321f 	movw	r2, #799	; 0x31f
 8014388:	496f      	ldr	r1, [pc, #444]	; (8014548 <etharp_output+0x1f0>)
 801438a:	486e      	ldr	r0, [pc, #440]	; (8014544 <etharp_output+0x1ec>)
 801438c:	f005 fe9e 	bl	801a0cc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d106      	bne.n	80143a4 <etharp_output+0x4c>
 8014396:	4b69      	ldr	r3, [pc, #420]	; (801453c <etharp_output+0x1e4>)
 8014398:	f44f 7248 	mov.w	r2, #800	; 0x320
 801439c:	496b      	ldr	r1, [pc, #428]	; (801454c <etharp_output+0x1f4>)
 801439e:	4869      	ldr	r0, [pc, #420]	; (8014544 <etharp_output+0x1ec>)
 80143a0:	f005 fe94 	bl	801a0cc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	68f9      	ldr	r1, [r7, #12]
 80143aa:	4618      	mov	r0, r3
 80143ac:	f000 fef8 	bl	80151a0 <ip4_addr_isbroadcast_u32>
 80143b0:	4603      	mov	r3, r0
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d002      	beq.n	80143bc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80143b6:	4b66      	ldr	r3, [pc, #408]	; (8014550 <etharp_output+0x1f8>)
 80143b8:	61fb      	str	r3, [r7, #28]
 80143ba:	e0af      	b.n	801451c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80143c4:	2be0      	cmp	r3, #224	; 0xe0
 80143c6:	d118      	bne.n	80143fa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80143c8:	2301      	movs	r3, #1
 80143ca:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80143cc:	2300      	movs	r3, #0
 80143ce:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80143d0:	235e      	movs	r3, #94	; 0x5e
 80143d2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	3301      	adds	r3, #1
 80143d8:	781b      	ldrb	r3, [r3, #0]
 80143da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80143de:	b2db      	uxtb	r3, r3
 80143e0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	3302      	adds	r3, #2
 80143e6:	781b      	ldrb	r3, [r3, #0]
 80143e8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	3303      	adds	r3, #3
 80143ee:	781b      	ldrb	r3, [r3, #0]
 80143f0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80143f2:	f107 0310 	add.w	r3, r7, #16
 80143f6:	61fb      	str	r3, [r7, #28]
 80143f8:	e090      	b.n	801451c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	681a      	ldr	r2, [r3, #0]
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	3304      	adds	r3, #4
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	405a      	eors	r2, r3
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	3308      	adds	r3, #8
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	4013      	ands	r3, r2
 801440e:	2b00      	cmp	r3, #0
 8014410:	d012      	beq.n	8014438 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014418:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801441c:	4293      	cmp	r3, r2
 801441e:	d00b      	beq.n	8014438 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	330c      	adds	r3, #12
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	2b00      	cmp	r3, #0
 8014428:	d003      	beq.n	8014432 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	330c      	adds	r3, #12
 801442e:	61bb      	str	r3, [r7, #24]
 8014430:	e002      	b.n	8014438 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014432:	f06f 0303 	mvn.w	r3, #3
 8014436:	e07d      	b.n	8014534 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014438:	4b46      	ldr	r3, [pc, #280]	; (8014554 <etharp_output+0x1fc>)
 801443a:	781b      	ldrb	r3, [r3, #0]
 801443c:	4619      	mov	r1, r3
 801443e:	4a46      	ldr	r2, [pc, #280]	; (8014558 <etharp_output+0x200>)
 8014440:	460b      	mov	r3, r1
 8014442:	005b      	lsls	r3, r3, #1
 8014444:	440b      	add	r3, r1
 8014446:	00db      	lsls	r3, r3, #3
 8014448:	4413      	add	r3, r2
 801444a:	3314      	adds	r3, #20
 801444c:	781b      	ldrb	r3, [r3, #0]
 801444e:	2b01      	cmp	r3, #1
 8014450:	d925      	bls.n	801449e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014452:	4b40      	ldr	r3, [pc, #256]	; (8014554 <etharp_output+0x1fc>)
 8014454:	781b      	ldrb	r3, [r3, #0]
 8014456:	4619      	mov	r1, r3
 8014458:	4a3f      	ldr	r2, [pc, #252]	; (8014558 <etharp_output+0x200>)
 801445a:	460b      	mov	r3, r1
 801445c:	005b      	lsls	r3, r3, #1
 801445e:	440b      	add	r3, r1
 8014460:	00db      	lsls	r3, r3, #3
 8014462:	4413      	add	r3, r2
 8014464:	3308      	adds	r3, #8
 8014466:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014468:	68fa      	ldr	r2, [r7, #12]
 801446a:	429a      	cmp	r2, r3
 801446c:	d117      	bne.n	801449e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801446e:	69bb      	ldr	r3, [r7, #24]
 8014470:	681a      	ldr	r2, [r3, #0]
 8014472:	4b38      	ldr	r3, [pc, #224]	; (8014554 <etharp_output+0x1fc>)
 8014474:	781b      	ldrb	r3, [r3, #0]
 8014476:	4618      	mov	r0, r3
 8014478:	4937      	ldr	r1, [pc, #220]	; (8014558 <etharp_output+0x200>)
 801447a:	4603      	mov	r3, r0
 801447c:	005b      	lsls	r3, r3, #1
 801447e:	4403      	add	r3, r0
 8014480:	00db      	lsls	r3, r3, #3
 8014482:	440b      	add	r3, r1
 8014484:	3304      	adds	r3, #4
 8014486:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014488:	429a      	cmp	r2, r3
 801448a:	d108      	bne.n	801449e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801448c:	4b31      	ldr	r3, [pc, #196]	; (8014554 <etharp_output+0x1fc>)
 801448e:	781b      	ldrb	r3, [r3, #0]
 8014490:	461a      	mov	r2, r3
 8014492:	68b9      	ldr	r1, [r7, #8]
 8014494:	68f8      	ldr	r0, [r7, #12]
 8014496:	f7ff fec5 	bl	8014224 <etharp_output_to_arp_index>
 801449a:	4603      	mov	r3, r0
 801449c:	e04a      	b.n	8014534 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801449e:	2300      	movs	r3, #0
 80144a0:	75fb      	strb	r3, [r7, #23]
 80144a2:	e031      	b.n	8014508 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80144a4:	7dfa      	ldrb	r2, [r7, #23]
 80144a6:	492c      	ldr	r1, [pc, #176]	; (8014558 <etharp_output+0x200>)
 80144a8:	4613      	mov	r3, r2
 80144aa:	005b      	lsls	r3, r3, #1
 80144ac:	4413      	add	r3, r2
 80144ae:	00db      	lsls	r3, r3, #3
 80144b0:	440b      	add	r3, r1
 80144b2:	3314      	adds	r3, #20
 80144b4:	781b      	ldrb	r3, [r3, #0]
 80144b6:	2b01      	cmp	r3, #1
 80144b8:	d923      	bls.n	8014502 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80144ba:	7dfa      	ldrb	r2, [r7, #23]
 80144bc:	4926      	ldr	r1, [pc, #152]	; (8014558 <etharp_output+0x200>)
 80144be:	4613      	mov	r3, r2
 80144c0:	005b      	lsls	r3, r3, #1
 80144c2:	4413      	add	r3, r2
 80144c4:	00db      	lsls	r3, r3, #3
 80144c6:	440b      	add	r3, r1
 80144c8:	3308      	adds	r3, #8
 80144ca:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80144cc:	68fa      	ldr	r2, [r7, #12]
 80144ce:	429a      	cmp	r2, r3
 80144d0:	d117      	bne.n	8014502 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80144d2:	69bb      	ldr	r3, [r7, #24]
 80144d4:	6819      	ldr	r1, [r3, #0]
 80144d6:	7dfa      	ldrb	r2, [r7, #23]
 80144d8:	481f      	ldr	r0, [pc, #124]	; (8014558 <etharp_output+0x200>)
 80144da:	4613      	mov	r3, r2
 80144dc:	005b      	lsls	r3, r3, #1
 80144de:	4413      	add	r3, r2
 80144e0:	00db      	lsls	r3, r3, #3
 80144e2:	4403      	add	r3, r0
 80144e4:	3304      	adds	r3, #4
 80144e6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80144e8:	4299      	cmp	r1, r3
 80144ea:	d10a      	bne.n	8014502 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80144ec:	4a19      	ldr	r2, [pc, #100]	; (8014554 <etharp_output+0x1fc>)
 80144ee:	7dfb      	ldrb	r3, [r7, #23]
 80144f0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80144f2:	7dfb      	ldrb	r3, [r7, #23]
 80144f4:	461a      	mov	r2, r3
 80144f6:	68b9      	ldr	r1, [r7, #8]
 80144f8:	68f8      	ldr	r0, [r7, #12]
 80144fa:	f7ff fe93 	bl	8014224 <etharp_output_to_arp_index>
 80144fe:	4603      	mov	r3, r0
 8014500:	e018      	b.n	8014534 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014502:	7dfb      	ldrb	r3, [r7, #23]
 8014504:	3301      	adds	r3, #1
 8014506:	75fb      	strb	r3, [r7, #23]
 8014508:	7dfb      	ldrb	r3, [r7, #23]
 801450a:	2b09      	cmp	r3, #9
 801450c:	d9ca      	bls.n	80144a4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801450e:	68ba      	ldr	r2, [r7, #8]
 8014510:	69b9      	ldr	r1, [r7, #24]
 8014512:	68f8      	ldr	r0, [r7, #12]
 8014514:	f000 f822 	bl	801455c <etharp_query>
 8014518:	4603      	mov	r3, r0
 801451a:	e00b      	b.n	8014534 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014522:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014526:	9300      	str	r3, [sp, #0]
 8014528:	69fb      	ldr	r3, [r7, #28]
 801452a:	68b9      	ldr	r1, [r7, #8]
 801452c:	68f8      	ldr	r0, [r7, #12]
 801452e:	f001 fd45 	bl	8015fbc <ethernet_output>
 8014532:	4603      	mov	r3, r0
}
 8014534:	4618      	mov	r0, r3
 8014536:	3720      	adds	r7, #32
 8014538:	46bd      	mov	sp, r7
 801453a:	bd80      	pop	{r7, pc}
 801453c:	0801f588 	.word	0x0801f588
 8014540:	0801f6d8 	.word	0x0801f6d8
 8014544:	0801f600 	.word	0x0801f600
 8014548:	0801f728 	.word	0x0801f728
 801454c:	0801f6c8 	.word	0x0801f6c8
 8014550:	0802955c 	.word	0x0802955c
 8014554:	200115cc 	.word	0x200115cc
 8014558:	200114dc 	.word	0x200114dc

0801455c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b08c      	sub	sp, #48	; 0x30
 8014560:	af02      	add	r7, sp, #8
 8014562:	60f8      	str	r0, [r7, #12]
 8014564:	60b9      	str	r1, [r7, #8]
 8014566:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	3326      	adds	r3, #38	; 0x26
 801456c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801456e:	23ff      	movs	r3, #255	; 0xff
 8014570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014574:	2300      	movs	r3, #0
 8014576:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014578:	68bb      	ldr	r3, [r7, #8]
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	68f9      	ldr	r1, [r7, #12]
 801457e:	4618      	mov	r0, r3
 8014580:	f000 fe0e 	bl	80151a0 <ip4_addr_isbroadcast_u32>
 8014584:	4603      	mov	r3, r0
 8014586:	2b00      	cmp	r3, #0
 8014588:	d10c      	bne.n	80145a4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014592:	2be0      	cmp	r3, #224	; 0xe0
 8014594:	d006      	beq.n	80145a4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014596:	68bb      	ldr	r3, [r7, #8]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d003      	beq.n	80145a4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801459c:	68bb      	ldr	r3, [r7, #8]
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d102      	bne.n	80145aa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80145a4:	f06f 030f 	mvn.w	r3, #15
 80145a8:	e101      	b.n	80147ae <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80145aa:	68fa      	ldr	r2, [r7, #12]
 80145ac:	2101      	movs	r1, #1
 80145ae:	68b8      	ldr	r0, [r7, #8]
 80145b0:	f7ff fb60 	bl	8013c74 <etharp_find_entry>
 80145b4:	4603      	mov	r3, r0
 80145b6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80145b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	da02      	bge.n	80145c6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80145c0:	8a7b      	ldrh	r3, [r7, #18]
 80145c2:	b25b      	sxtb	r3, r3
 80145c4:	e0f3      	b.n	80147ae <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80145c6:	8a7b      	ldrh	r3, [r7, #18]
 80145c8:	2b7e      	cmp	r3, #126	; 0x7e
 80145ca:	d906      	bls.n	80145da <etharp_query+0x7e>
 80145cc:	4b7a      	ldr	r3, [pc, #488]	; (80147b8 <etharp_query+0x25c>)
 80145ce:	f240 32c1 	movw	r2, #961	; 0x3c1
 80145d2:	497a      	ldr	r1, [pc, #488]	; (80147bc <etharp_query+0x260>)
 80145d4:	487a      	ldr	r0, [pc, #488]	; (80147c0 <etharp_query+0x264>)
 80145d6:	f005 fd79 	bl	801a0cc <iprintf>
  i = (netif_addr_idx_t)i_err;
 80145da:	8a7b      	ldrh	r3, [r7, #18]
 80145dc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80145de:	7c7a      	ldrb	r2, [r7, #17]
 80145e0:	4978      	ldr	r1, [pc, #480]	; (80147c4 <etharp_query+0x268>)
 80145e2:	4613      	mov	r3, r2
 80145e4:	005b      	lsls	r3, r3, #1
 80145e6:	4413      	add	r3, r2
 80145e8:	00db      	lsls	r3, r3, #3
 80145ea:	440b      	add	r3, r1
 80145ec:	3314      	adds	r3, #20
 80145ee:	781b      	ldrb	r3, [r3, #0]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d115      	bne.n	8014620 <etharp_query+0xc4>
    is_new_entry = 1;
 80145f4:	2301      	movs	r3, #1
 80145f6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80145f8:	7c7a      	ldrb	r2, [r7, #17]
 80145fa:	4972      	ldr	r1, [pc, #456]	; (80147c4 <etharp_query+0x268>)
 80145fc:	4613      	mov	r3, r2
 80145fe:	005b      	lsls	r3, r3, #1
 8014600:	4413      	add	r3, r2
 8014602:	00db      	lsls	r3, r3, #3
 8014604:	440b      	add	r3, r1
 8014606:	3314      	adds	r3, #20
 8014608:	2201      	movs	r2, #1
 801460a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801460c:	7c7a      	ldrb	r2, [r7, #17]
 801460e:	496d      	ldr	r1, [pc, #436]	; (80147c4 <etharp_query+0x268>)
 8014610:	4613      	mov	r3, r2
 8014612:	005b      	lsls	r3, r3, #1
 8014614:	4413      	add	r3, r2
 8014616:	00db      	lsls	r3, r3, #3
 8014618:	440b      	add	r3, r1
 801461a:	3308      	adds	r3, #8
 801461c:	68fa      	ldr	r2, [r7, #12]
 801461e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014620:	7c7a      	ldrb	r2, [r7, #17]
 8014622:	4968      	ldr	r1, [pc, #416]	; (80147c4 <etharp_query+0x268>)
 8014624:	4613      	mov	r3, r2
 8014626:	005b      	lsls	r3, r3, #1
 8014628:	4413      	add	r3, r2
 801462a:	00db      	lsls	r3, r3, #3
 801462c:	440b      	add	r3, r1
 801462e:	3314      	adds	r3, #20
 8014630:	781b      	ldrb	r3, [r3, #0]
 8014632:	2b01      	cmp	r3, #1
 8014634:	d011      	beq.n	801465a <etharp_query+0xfe>
 8014636:	7c7a      	ldrb	r2, [r7, #17]
 8014638:	4962      	ldr	r1, [pc, #392]	; (80147c4 <etharp_query+0x268>)
 801463a:	4613      	mov	r3, r2
 801463c:	005b      	lsls	r3, r3, #1
 801463e:	4413      	add	r3, r2
 8014640:	00db      	lsls	r3, r3, #3
 8014642:	440b      	add	r3, r1
 8014644:	3314      	adds	r3, #20
 8014646:	781b      	ldrb	r3, [r3, #0]
 8014648:	2b01      	cmp	r3, #1
 801464a:	d806      	bhi.n	801465a <etharp_query+0xfe>
 801464c:	4b5a      	ldr	r3, [pc, #360]	; (80147b8 <etharp_query+0x25c>)
 801464e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014652:	495d      	ldr	r1, [pc, #372]	; (80147c8 <etharp_query+0x26c>)
 8014654:	485a      	ldr	r0, [pc, #360]	; (80147c0 <etharp_query+0x264>)
 8014656:	f005 fd39 	bl	801a0cc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801465a:	6a3b      	ldr	r3, [r7, #32]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d102      	bne.n	8014666 <etharp_query+0x10a>
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d10c      	bne.n	8014680 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014666:	68b9      	ldr	r1, [r7, #8]
 8014668:	68f8      	ldr	r0, [r7, #12]
 801466a:	f000 f963 	bl	8014934 <etharp_request>
 801466e:	4603      	mov	r3, r0
 8014670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d102      	bne.n	8014680 <etharp_query+0x124>
      return result;
 801467a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801467e:	e096      	b.n	80147ae <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d106      	bne.n	8014694 <etharp_query+0x138>
 8014686:	4b4c      	ldr	r3, [pc, #304]	; (80147b8 <etharp_query+0x25c>)
 8014688:	f240 32e1 	movw	r2, #993	; 0x3e1
 801468c:	494f      	ldr	r1, [pc, #316]	; (80147cc <etharp_query+0x270>)
 801468e:	484c      	ldr	r0, [pc, #304]	; (80147c0 <etharp_query+0x264>)
 8014690:	f005 fd1c 	bl	801a0cc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014694:	7c7a      	ldrb	r2, [r7, #17]
 8014696:	494b      	ldr	r1, [pc, #300]	; (80147c4 <etharp_query+0x268>)
 8014698:	4613      	mov	r3, r2
 801469a:	005b      	lsls	r3, r3, #1
 801469c:	4413      	add	r3, r2
 801469e:	00db      	lsls	r3, r3, #3
 80146a0:	440b      	add	r3, r1
 80146a2:	3314      	adds	r3, #20
 80146a4:	781b      	ldrb	r3, [r3, #0]
 80146a6:	2b01      	cmp	r3, #1
 80146a8:	d917      	bls.n	80146da <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80146aa:	4a49      	ldr	r2, [pc, #292]	; (80147d0 <etharp_query+0x274>)
 80146ac:	7c7b      	ldrb	r3, [r7, #17]
 80146ae:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80146b0:	7c7a      	ldrb	r2, [r7, #17]
 80146b2:	4613      	mov	r3, r2
 80146b4:	005b      	lsls	r3, r3, #1
 80146b6:	4413      	add	r3, r2
 80146b8:	00db      	lsls	r3, r3, #3
 80146ba:	3308      	adds	r3, #8
 80146bc:	4a41      	ldr	r2, [pc, #260]	; (80147c4 <etharp_query+0x268>)
 80146be:	4413      	add	r3, r2
 80146c0:	3304      	adds	r3, #4
 80146c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80146c6:	9200      	str	r2, [sp, #0]
 80146c8:	697a      	ldr	r2, [r7, #20]
 80146ca:	6879      	ldr	r1, [r7, #4]
 80146cc:	68f8      	ldr	r0, [r7, #12]
 80146ce:	f001 fc75 	bl	8015fbc <ethernet_output>
 80146d2:	4603      	mov	r3, r0
 80146d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80146d8:	e067      	b.n	80147aa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80146da:	7c7a      	ldrb	r2, [r7, #17]
 80146dc:	4939      	ldr	r1, [pc, #228]	; (80147c4 <etharp_query+0x268>)
 80146de:	4613      	mov	r3, r2
 80146e0:	005b      	lsls	r3, r3, #1
 80146e2:	4413      	add	r3, r2
 80146e4:	00db      	lsls	r3, r3, #3
 80146e6:	440b      	add	r3, r1
 80146e8:	3314      	adds	r3, #20
 80146ea:	781b      	ldrb	r3, [r3, #0]
 80146ec:	2b01      	cmp	r3, #1
 80146ee:	d15c      	bne.n	80147aa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80146f0:	2300      	movs	r3, #0
 80146f2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80146f8:	e01c      	b.n	8014734 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80146fa:	69fb      	ldr	r3, [r7, #28]
 80146fc:	895a      	ldrh	r2, [r3, #10]
 80146fe:	69fb      	ldr	r3, [r7, #28]
 8014700:	891b      	ldrh	r3, [r3, #8]
 8014702:	429a      	cmp	r2, r3
 8014704:	d10a      	bne.n	801471c <etharp_query+0x1c0>
 8014706:	69fb      	ldr	r3, [r7, #28]
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d006      	beq.n	801471c <etharp_query+0x1c0>
 801470e:	4b2a      	ldr	r3, [pc, #168]	; (80147b8 <etharp_query+0x25c>)
 8014710:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014714:	492f      	ldr	r1, [pc, #188]	; (80147d4 <etharp_query+0x278>)
 8014716:	482a      	ldr	r0, [pc, #168]	; (80147c0 <etharp_query+0x264>)
 8014718:	f005 fcd8 	bl	801a0cc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801471c:	69fb      	ldr	r3, [r7, #28]
 801471e:	7b1b      	ldrb	r3, [r3, #12]
 8014720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014724:	2b00      	cmp	r3, #0
 8014726:	d002      	beq.n	801472e <etharp_query+0x1d2>
        copy_needed = 1;
 8014728:	2301      	movs	r3, #1
 801472a:	61bb      	str	r3, [r7, #24]
        break;
 801472c:	e005      	b.n	801473a <etharp_query+0x1de>
      }
      p = p->next;
 801472e:	69fb      	ldr	r3, [r7, #28]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014734:	69fb      	ldr	r3, [r7, #28]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d1df      	bne.n	80146fa <etharp_query+0x19e>
    }
    if (copy_needed) {
 801473a:	69bb      	ldr	r3, [r7, #24]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d007      	beq.n	8014750 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014740:	687a      	ldr	r2, [r7, #4]
 8014742:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014746:	200e      	movs	r0, #14
 8014748:	f7f8 fc88 	bl	800d05c <pbuf_clone>
 801474c:	61f8      	str	r0, [r7, #28]
 801474e:	e004      	b.n	801475a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014754:	69f8      	ldr	r0, [r7, #28]
 8014756:	f7f8 fabf 	bl	800ccd8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801475a:	69fb      	ldr	r3, [r7, #28]
 801475c:	2b00      	cmp	r3, #0
 801475e:	d021      	beq.n	80147a4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014760:	7c7a      	ldrb	r2, [r7, #17]
 8014762:	4918      	ldr	r1, [pc, #96]	; (80147c4 <etharp_query+0x268>)
 8014764:	4613      	mov	r3, r2
 8014766:	005b      	lsls	r3, r3, #1
 8014768:	4413      	add	r3, r2
 801476a:	00db      	lsls	r3, r3, #3
 801476c:	440b      	add	r3, r1
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d00a      	beq.n	801478a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014774:	7c7a      	ldrb	r2, [r7, #17]
 8014776:	4913      	ldr	r1, [pc, #76]	; (80147c4 <etharp_query+0x268>)
 8014778:	4613      	mov	r3, r2
 801477a:	005b      	lsls	r3, r3, #1
 801477c:	4413      	add	r3, r2
 801477e:	00db      	lsls	r3, r3, #3
 8014780:	440b      	add	r3, r1
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	4618      	mov	r0, r3
 8014786:	f7f8 fa01 	bl	800cb8c <pbuf_free>
      }
      arp_table[i].q = p;
 801478a:	7c7a      	ldrb	r2, [r7, #17]
 801478c:	490d      	ldr	r1, [pc, #52]	; (80147c4 <etharp_query+0x268>)
 801478e:	4613      	mov	r3, r2
 8014790:	005b      	lsls	r3, r3, #1
 8014792:	4413      	add	r3, r2
 8014794:	00db      	lsls	r3, r3, #3
 8014796:	440b      	add	r3, r1
 8014798:	69fa      	ldr	r2, [r7, #28]
 801479a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801479c:	2300      	movs	r3, #0
 801479e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80147a2:	e002      	b.n	80147aa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80147a4:	23ff      	movs	r3, #255	; 0xff
 80147a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80147aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80147ae:	4618      	mov	r0, r3
 80147b0:	3728      	adds	r7, #40	; 0x28
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bd80      	pop	{r7, pc}
 80147b6:	bf00      	nop
 80147b8:	0801f588 	.word	0x0801f588
 80147bc:	0801f734 	.word	0x0801f734
 80147c0:	0801f600 	.word	0x0801f600
 80147c4:	200114dc 	.word	0x200114dc
 80147c8:	0801f744 	.word	0x0801f744
 80147cc:	0801f728 	.word	0x0801f728
 80147d0:	200115cc 	.word	0x200115cc
 80147d4:	0801f76c 	.word	0x0801f76c

080147d8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b08a      	sub	sp, #40	; 0x28
 80147dc:	af02      	add	r7, sp, #8
 80147de:	60f8      	str	r0, [r7, #12]
 80147e0:	60b9      	str	r1, [r7, #8]
 80147e2:	607a      	str	r2, [r7, #4]
 80147e4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80147e6:	2300      	movs	r3, #0
 80147e8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d106      	bne.n	80147fe <etharp_raw+0x26>
 80147f0:	4b3a      	ldr	r3, [pc, #232]	; (80148dc <etharp_raw+0x104>)
 80147f2:	f240 4257 	movw	r2, #1111	; 0x457
 80147f6:	493a      	ldr	r1, [pc, #232]	; (80148e0 <etharp_raw+0x108>)
 80147f8:	483a      	ldr	r0, [pc, #232]	; (80148e4 <etharp_raw+0x10c>)
 80147fa:	f005 fc67 	bl	801a0cc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80147fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014802:	211c      	movs	r1, #28
 8014804:	200e      	movs	r0, #14
 8014806:	f7f7 fedd 	bl	800c5c4 <pbuf_alloc>
 801480a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801480c:	69bb      	ldr	r3, [r7, #24]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d102      	bne.n	8014818 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014816:	e05d      	b.n	80148d4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014818:	69bb      	ldr	r3, [r7, #24]
 801481a:	895b      	ldrh	r3, [r3, #10]
 801481c:	2b1b      	cmp	r3, #27
 801481e:	d806      	bhi.n	801482e <etharp_raw+0x56>
 8014820:	4b2e      	ldr	r3, [pc, #184]	; (80148dc <etharp_raw+0x104>)
 8014822:	f240 4262 	movw	r2, #1122	; 0x462
 8014826:	4930      	ldr	r1, [pc, #192]	; (80148e8 <etharp_raw+0x110>)
 8014828:	482e      	ldr	r0, [pc, #184]	; (80148e4 <etharp_raw+0x10c>)
 801482a:	f005 fc4f 	bl	801a0cc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801482e:	69bb      	ldr	r3, [r7, #24]
 8014830:	685b      	ldr	r3, [r3, #4]
 8014832:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014834:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014836:	4618      	mov	r0, r3
 8014838:	f7f6 fdb6 	bl	800b3a8 <lwip_htons>
 801483c:	4603      	mov	r3, r0
 801483e:	461a      	mov	r2, r3
 8014840:	697b      	ldr	r3, [r7, #20]
 8014842:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801484a:	2b06      	cmp	r3, #6
 801484c:	d006      	beq.n	801485c <etharp_raw+0x84>
 801484e:	4b23      	ldr	r3, [pc, #140]	; (80148dc <etharp_raw+0x104>)
 8014850:	f240 4269 	movw	r2, #1129	; 0x469
 8014854:	4925      	ldr	r1, [pc, #148]	; (80148ec <etharp_raw+0x114>)
 8014856:	4823      	ldr	r0, [pc, #140]	; (80148e4 <etharp_raw+0x10c>)
 8014858:	f005 fc38 	bl	801a0cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801485c:	697b      	ldr	r3, [r7, #20]
 801485e:	3308      	adds	r3, #8
 8014860:	2206      	movs	r2, #6
 8014862:	6839      	ldr	r1, [r7, #0]
 8014864:	4618      	mov	r0, r3
 8014866:	f004 ffbf 	bl	80197e8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801486a:	697b      	ldr	r3, [r7, #20]
 801486c:	3312      	adds	r3, #18
 801486e:	2206      	movs	r2, #6
 8014870:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014872:	4618      	mov	r0, r3
 8014874:	f004 ffb8 	bl	80197e8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014878:	697b      	ldr	r3, [r7, #20]
 801487a:	330e      	adds	r3, #14
 801487c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801487e:	6812      	ldr	r2, [r2, #0]
 8014880:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014882:	697b      	ldr	r3, [r7, #20]
 8014884:	3318      	adds	r3, #24
 8014886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014888:	6812      	ldr	r2, [r2, #0]
 801488a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801488c:	697b      	ldr	r3, [r7, #20]
 801488e:	2200      	movs	r2, #0
 8014890:	701a      	strb	r2, [r3, #0]
 8014892:	2200      	movs	r2, #0
 8014894:	f042 0201 	orr.w	r2, r2, #1
 8014898:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801489a:	697b      	ldr	r3, [r7, #20]
 801489c:	2200      	movs	r2, #0
 801489e:	f042 0208 	orr.w	r2, r2, #8
 80148a2:	709a      	strb	r2, [r3, #2]
 80148a4:	2200      	movs	r2, #0
 80148a6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80148a8:	697b      	ldr	r3, [r7, #20]
 80148aa:	2206      	movs	r2, #6
 80148ac:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80148ae:	697b      	ldr	r3, [r7, #20]
 80148b0:	2204      	movs	r2, #4
 80148b2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80148b4:	f640 0306 	movw	r3, #2054	; 0x806
 80148b8:	9300      	str	r3, [sp, #0]
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	68ba      	ldr	r2, [r7, #8]
 80148be:	69b9      	ldr	r1, [r7, #24]
 80148c0:	68f8      	ldr	r0, [r7, #12]
 80148c2:	f001 fb7b 	bl	8015fbc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80148c6:	69b8      	ldr	r0, [r7, #24]
 80148c8:	f7f8 f960 	bl	800cb8c <pbuf_free>
  p = NULL;
 80148cc:	2300      	movs	r3, #0
 80148ce:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80148d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80148d4:	4618      	mov	r0, r3
 80148d6:	3720      	adds	r7, #32
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd80      	pop	{r7, pc}
 80148dc:	0801f588 	.word	0x0801f588
 80148e0:	0801f6d8 	.word	0x0801f6d8
 80148e4:	0801f600 	.word	0x0801f600
 80148e8:	0801f788 	.word	0x0801f788
 80148ec:	0801f7bc 	.word	0x0801f7bc

080148f0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80148f0:	b580      	push	{r7, lr}
 80148f2:	b088      	sub	sp, #32
 80148f4:	af04      	add	r7, sp, #16
 80148f6:	60f8      	str	r0, [r7, #12]
 80148f8:	60b9      	str	r1, [r7, #8]
 80148fa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801490c:	2201      	movs	r2, #1
 801490e:	9203      	str	r2, [sp, #12]
 8014910:	68ba      	ldr	r2, [r7, #8]
 8014912:	9202      	str	r2, [sp, #8]
 8014914:	4a06      	ldr	r2, [pc, #24]	; (8014930 <etharp_request_dst+0x40>)
 8014916:	9201      	str	r2, [sp, #4]
 8014918:	9300      	str	r3, [sp, #0]
 801491a:	4603      	mov	r3, r0
 801491c:	687a      	ldr	r2, [r7, #4]
 801491e:	68f8      	ldr	r0, [r7, #12]
 8014920:	f7ff ff5a 	bl	80147d8 <etharp_raw>
 8014924:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014926:	4618      	mov	r0, r3
 8014928:	3710      	adds	r7, #16
 801492a:	46bd      	mov	sp, r7
 801492c:	bd80      	pop	{r7, pc}
 801492e:	bf00      	nop
 8014930:	08029564 	.word	0x08029564

08014934 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b082      	sub	sp, #8
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
 801493c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801493e:	4a05      	ldr	r2, [pc, #20]	; (8014954 <etharp_request+0x20>)
 8014940:	6839      	ldr	r1, [r7, #0]
 8014942:	6878      	ldr	r0, [r7, #4]
 8014944:	f7ff ffd4 	bl	80148f0 <etharp_request_dst>
 8014948:	4603      	mov	r3, r0
}
 801494a:	4618      	mov	r0, r3
 801494c:	3708      	adds	r7, #8
 801494e:	46bd      	mov	sp, r7
 8014950:	bd80      	pop	{r7, pc}
 8014952:	bf00      	nop
 8014954:	0802955c 	.word	0x0802955c

08014958 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014958:	b580      	push	{r7, lr}
 801495a:	b08e      	sub	sp, #56	; 0x38
 801495c:	af04      	add	r7, sp, #16
 801495e:	6078      	str	r0, [r7, #4]
 8014960:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014962:	4b79      	ldr	r3, [pc, #484]	; (8014b48 <icmp_input+0x1f0>)
 8014964:	689b      	ldr	r3, [r3, #8]
 8014966:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801496a:	781b      	ldrb	r3, [r3, #0]
 801496c:	f003 030f 	and.w	r3, r3, #15
 8014970:	b2db      	uxtb	r3, r3
 8014972:	009b      	lsls	r3, r3, #2
 8014974:	b2db      	uxtb	r3, r3
 8014976:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014978:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801497a:	2b13      	cmp	r3, #19
 801497c:	f240 80cd 	bls.w	8014b1a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	895b      	ldrh	r3, [r3, #10]
 8014984:	2b03      	cmp	r3, #3
 8014986:	f240 80ca 	bls.w	8014b1e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	685b      	ldr	r3, [r3, #4]
 801498e:	781b      	ldrb	r3, [r3, #0]
 8014990:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014994:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014998:	2b00      	cmp	r3, #0
 801499a:	f000 80b7 	beq.w	8014b0c <icmp_input+0x1b4>
 801499e:	2b08      	cmp	r3, #8
 80149a0:	f040 80b7 	bne.w	8014b12 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80149a4:	4b69      	ldr	r3, [pc, #420]	; (8014b4c <icmp_input+0x1f4>)
 80149a6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80149a8:	4b67      	ldr	r3, [pc, #412]	; (8014b48 <icmp_input+0x1f0>)
 80149aa:	695b      	ldr	r3, [r3, #20]
 80149ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80149b0:	2be0      	cmp	r3, #224	; 0xe0
 80149b2:	f000 80bb 	beq.w	8014b2c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80149b6:	4b64      	ldr	r3, [pc, #400]	; (8014b48 <icmp_input+0x1f0>)
 80149b8:	695b      	ldr	r3, [r3, #20]
 80149ba:	4a63      	ldr	r2, [pc, #396]	; (8014b48 <icmp_input+0x1f0>)
 80149bc:	6812      	ldr	r2, [r2, #0]
 80149be:	4611      	mov	r1, r2
 80149c0:	4618      	mov	r0, r3
 80149c2:	f000 fbed 	bl	80151a0 <ip4_addr_isbroadcast_u32>
 80149c6:	4603      	mov	r3, r0
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	f040 80b1 	bne.w	8014b30 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	891b      	ldrh	r3, [r3, #8]
 80149d2:	2b07      	cmp	r3, #7
 80149d4:	f240 80a5 	bls.w	8014b22 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80149d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80149da:	330e      	adds	r3, #14
 80149dc:	4619      	mov	r1, r3
 80149de:	6878      	ldr	r0, [r7, #4]
 80149e0:	f7f8 f83e 	bl	800ca60 <pbuf_add_header>
 80149e4:	4603      	mov	r3, r0
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d04b      	beq.n	8014a82 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	891a      	ldrh	r2, [r3, #8]
 80149ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80149f0:	4413      	add	r3, r2
 80149f2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	891b      	ldrh	r3, [r3, #8]
 80149f8:	8b7a      	ldrh	r2, [r7, #26]
 80149fa:	429a      	cmp	r2, r3
 80149fc:	f0c0 809a 	bcc.w	8014b34 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014a00:	8b7b      	ldrh	r3, [r7, #26]
 8014a02:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014a06:	4619      	mov	r1, r3
 8014a08:	200e      	movs	r0, #14
 8014a0a:	f7f7 fddb 	bl	800c5c4 <pbuf_alloc>
 8014a0e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014a10:	697b      	ldr	r3, [r7, #20]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	f000 8090 	beq.w	8014b38 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014a18:	697b      	ldr	r3, [r7, #20]
 8014a1a:	895b      	ldrh	r3, [r3, #10]
 8014a1c:	461a      	mov	r2, r3
 8014a1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014a20:	3308      	adds	r3, #8
 8014a22:	429a      	cmp	r2, r3
 8014a24:	d203      	bcs.n	8014a2e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014a26:	6978      	ldr	r0, [r7, #20]
 8014a28:	f7f8 f8b0 	bl	800cb8c <pbuf_free>
          goto icmperr;
 8014a2c:	e085      	b.n	8014b3a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014a2e:	697b      	ldr	r3, [r7, #20]
 8014a30:	685b      	ldr	r3, [r3, #4]
 8014a32:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014a34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014a36:	4618      	mov	r0, r3
 8014a38:	f004 fed6 	bl	80197e8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014a3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014a3e:	4619      	mov	r1, r3
 8014a40:	6978      	ldr	r0, [r7, #20]
 8014a42:	f7f8 f81d 	bl	800ca80 <pbuf_remove_header>
 8014a46:	4603      	mov	r3, r0
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d009      	beq.n	8014a60 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014a4c:	4b40      	ldr	r3, [pc, #256]	; (8014b50 <icmp_input+0x1f8>)
 8014a4e:	22b6      	movs	r2, #182	; 0xb6
 8014a50:	4940      	ldr	r1, [pc, #256]	; (8014b54 <icmp_input+0x1fc>)
 8014a52:	4841      	ldr	r0, [pc, #260]	; (8014b58 <icmp_input+0x200>)
 8014a54:	f005 fb3a 	bl	801a0cc <iprintf>
          pbuf_free(r);
 8014a58:	6978      	ldr	r0, [r7, #20]
 8014a5a:	f7f8 f897 	bl	800cb8c <pbuf_free>
          goto icmperr;
 8014a5e:	e06c      	b.n	8014b3a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014a60:	6879      	ldr	r1, [r7, #4]
 8014a62:	6978      	ldr	r0, [r7, #20]
 8014a64:	f7f8 f9b6 	bl	800cdd4 <pbuf_copy>
 8014a68:	4603      	mov	r3, r0
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d003      	beq.n	8014a76 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014a6e:	6978      	ldr	r0, [r7, #20]
 8014a70:	f7f8 f88c 	bl	800cb8c <pbuf_free>
          goto icmperr;
 8014a74:	e061      	b.n	8014b3a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014a76:	6878      	ldr	r0, [r7, #4]
 8014a78:	f7f8 f888 	bl	800cb8c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014a7c:	697b      	ldr	r3, [r7, #20]
 8014a7e:	607b      	str	r3, [r7, #4]
 8014a80:	e00f      	b.n	8014aa2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014a82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014a84:	330e      	adds	r3, #14
 8014a86:	4619      	mov	r1, r3
 8014a88:	6878      	ldr	r0, [r7, #4]
 8014a8a:	f7f7 fff9 	bl	800ca80 <pbuf_remove_header>
 8014a8e:	4603      	mov	r3, r0
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d006      	beq.n	8014aa2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014a94:	4b2e      	ldr	r3, [pc, #184]	; (8014b50 <icmp_input+0x1f8>)
 8014a96:	22c7      	movs	r2, #199	; 0xc7
 8014a98:	4930      	ldr	r1, [pc, #192]	; (8014b5c <icmp_input+0x204>)
 8014a9a:	482f      	ldr	r0, [pc, #188]	; (8014b58 <icmp_input+0x200>)
 8014a9c:	f005 fb16 	bl	801a0cc <iprintf>
          goto icmperr;
 8014aa0:	e04b      	b.n	8014b3a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	685b      	ldr	r3, [r3, #4]
 8014aa6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014aa8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014aaa:	4619      	mov	r1, r3
 8014aac:	6878      	ldr	r0, [r7, #4]
 8014aae:	f7f7 ffd7 	bl	800ca60 <pbuf_add_header>
 8014ab2:	4603      	mov	r3, r0
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d12b      	bne.n	8014b10 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	685b      	ldr	r3, [r3, #4]
 8014abc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014abe:	69fb      	ldr	r3, [r7, #28]
 8014ac0:	681a      	ldr	r2, [r3, #0]
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014ac6:	4b20      	ldr	r3, [pc, #128]	; (8014b48 <icmp_input+0x1f0>)
 8014ac8:	691a      	ldr	r2, [r3, #16]
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014ace:	693b      	ldr	r3, [r7, #16]
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014ad4:	693b      	ldr	r3, [r7, #16]
 8014ad6:	2200      	movs	r2, #0
 8014ad8:	709a      	strb	r2, [r3, #2]
 8014ada:	2200      	movs	r2, #0
 8014adc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	22ff      	movs	r2, #255	; 0xff
 8014ae2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	729a      	strb	r2, [r3, #10]
 8014aea:	2200      	movs	r2, #0
 8014aec:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014aee:	683b      	ldr	r3, [r7, #0]
 8014af0:	9302      	str	r3, [sp, #8]
 8014af2:	2301      	movs	r3, #1
 8014af4:	9301      	str	r3, [sp, #4]
 8014af6:	2300      	movs	r3, #0
 8014af8:	9300      	str	r3, [sp, #0]
 8014afa:	23ff      	movs	r3, #255	; 0xff
 8014afc:	2200      	movs	r2, #0
 8014afe:	69f9      	ldr	r1, [r7, #28]
 8014b00:	6878      	ldr	r0, [r7, #4]
 8014b02:	f000 fa75 	bl	8014ff0 <ip4_output_if>
 8014b06:	4603      	mov	r3, r0
 8014b08:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014b0a:	e001      	b.n	8014b10 <icmp_input+0x1b8>
      break;
 8014b0c:	bf00      	nop
 8014b0e:	e000      	b.n	8014b12 <icmp_input+0x1ba>
      break;
 8014b10:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014b12:	6878      	ldr	r0, [r7, #4]
 8014b14:	f7f8 f83a 	bl	800cb8c <pbuf_free>
  return;
 8014b18:	e013      	b.n	8014b42 <icmp_input+0x1ea>
    goto lenerr;
 8014b1a:	bf00      	nop
 8014b1c:	e002      	b.n	8014b24 <icmp_input+0x1cc>
    goto lenerr;
 8014b1e:	bf00      	nop
 8014b20:	e000      	b.n	8014b24 <icmp_input+0x1cc>
        goto lenerr;
 8014b22:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014b24:	6878      	ldr	r0, [r7, #4]
 8014b26:	f7f8 f831 	bl	800cb8c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014b2a:	e00a      	b.n	8014b42 <icmp_input+0x1ea>
        goto icmperr;
 8014b2c:	bf00      	nop
 8014b2e:	e004      	b.n	8014b3a <icmp_input+0x1e2>
        goto icmperr;
 8014b30:	bf00      	nop
 8014b32:	e002      	b.n	8014b3a <icmp_input+0x1e2>
          goto icmperr;
 8014b34:	bf00      	nop
 8014b36:	e000      	b.n	8014b3a <icmp_input+0x1e2>
          goto icmperr;
 8014b38:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014b3a:	6878      	ldr	r0, [r7, #4]
 8014b3c:	f7f8 f826 	bl	800cb8c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014b40:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014b42:	3728      	adds	r7, #40	; 0x28
 8014b44:	46bd      	mov	sp, r7
 8014b46:	bd80      	pop	{r7, pc}
 8014b48:	20008f5c 	.word	0x20008f5c
 8014b4c:	20008f70 	.word	0x20008f70
 8014b50:	0801f800 	.word	0x0801f800
 8014b54:	0801f838 	.word	0x0801f838
 8014b58:	0801f870 	.word	0x0801f870
 8014b5c:	0801f898 	.word	0x0801f898

08014b60 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	b082      	sub	sp, #8
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	6078      	str	r0, [r7, #4]
 8014b68:	460b      	mov	r3, r1
 8014b6a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014b6c:	78fb      	ldrb	r3, [r7, #3]
 8014b6e:	461a      	mov	r2, r3
 8014b70:	2103      	movs	r1, #3
 8014b72:	6878      	ldr	r0, [r7, #4]
 8014b74:	f000 f814 	bl	8014ba0 <icmp_send_response>
}
 8014b78:	bf00      	nop
 8014b7a:	3708      	adds	r7, #8
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	bd80      	pop	{r7, pc}

08014b80 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b082      	sub	sp, #8
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
 8014b88:	460b      	mov	r3, r1
 8014b8a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014b8c:	78fb      	ldrb	r3, [r7, #3]
 8014b8e:	461a      	mov	r2, r3
 8014b90:	210b      	movs	r1, #11
 8014b92:	6878      	ldr	r0, [r7, #4]
 8014b94:	f000 f804 	bl	8014ba0 <icmp_send_response>
}
 8014b98:	bf00      	nop
 8014b9a:	3708      	adds	r7, #8
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bd80      	pop	{r7, pc}

08014ba0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b08c      	sub	sp, #48	; 0x30
 8014ba4:	af04      	add	r7, sp, #16
 8014ba6:	6078      	str	r0, [r7, #4]
 8014ba8:	460b      	mov	r3, r1
 8014baa:	70fb      	strb	r3, [r7, #3]
 8014bac:	4613      	mov	r3, r2
 8014bae:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014bb0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014bb4:	2124      	movs	r1, #36	; 0x24
 8014bb6:	2022      	movs	r0, #34	; 0x22
 8014bb8:	f7f7 fd04 	bl	800c5c4 <pbuf_alloc>
 8014bbc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014bbe:	69fb      	ldr	r3, [r7, #28]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d04c      	beq.n	8014c5e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014bc4:	69fb      	ldr	r3, [r7, #28]
 8014bc6:	895b      	ldrh	r3, [r3, #10]
 8014bc8:	2b23      	cmp	r3, #35	; 0x23
 8014bca:	d806      	bhi.n	8014bda <icmp_send_response+0x3a>
 8014bcc:	4b26      	ldr	r3, [pc, #152]	; (8014c68 <icmp_send_response+0xc8>)
 8014bce:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014bd2:	4926      	ldr	r1, [pc, #152]	; (8014c6c <icmp_send_response+0xcc>)
 8014bd4:	4826      	ldr	r0, [pc, #152]	; (8014c70 <icmp_send_response+0xd0>)
 8014bd6:	f005 fa79 	bl	801a0cc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	685b      	ldr	r3, [r3, #4]
 8014bde:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014be0:	69fb      	ldr	r3, [r7, #28]
 8014be2:	685b      	ldr	r3, [r3, #4]
 8014be4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014be6:	697b      	ldr	r3, [r7, #20]
 8014be8:	78fa      	ldrb	r2, [r7, #3]
 8014bea:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014bec:	697b      	ldr	r3, [r7, #20]
 8014bee:	78ba      	ldrb	r2, [r7, #2]
 8014bf0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014bf2:	697b      	ldr	r3, [r7, #20]
 8014bf4:	2200      	movs	r2, #0
 8014bf6:	711a      	strb	r2, [r3, #4]
 8014bf8:	2200      	movs	r2, #0
 8014bfa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	2200      	movs	r2, #0
 8014c00:	719a      	strb	r2, [r3, #6]
 8014c02:	2200      	movs	r2, #0
 8014c04:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014c06:	69fb      	ldr	r3, [r7, #28]
 8014c08:	685b      	ldr	r3, [r3, #4]
 8014c0a:	f103 0008 	add.w	r0, r3, #8
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	685b      	ldr	r3, [r3, #4]
 8014c12:	221c      	movs	r2, #28
 8014c14:	4619      	mov	r1, r3
 8014c16:	f004 fde7 	bl	80197e8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014c1a:	69bb      	ldr	r3, [r7, #24]
 8014c1c:	68db      	ldr	r3, [r3, #12]
 8014c1e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014c20:	f107 030c 	add.w	r3, r7, #12
 8014c24:	4618      	mov	r0, r3
 8014c26:	f000 f825 	bl	8014c74 <ip4_route>
 8014c2a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014c2c:	693b      	ldr	r3, [r7, #16]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d011      	beq.n	8014c56 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014c32:	697b      	ldr	r3, [r7, #20]
 8014c34:	2200      	movs	r2, #0
 8014c36:	709a      	strb	r2, [r3, #2]
 8014c38:	2200      	movs	r2, #0
 8014c3a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014c3c:	f107 020c 	add.w	r2, r7, #12
 8014c40:	693b      	ldr	r3, [r7, #16]
 8014c42:	9302      	str	r3, [sp, #8]
 8014c44:	2301      	movs	r3, #1
 8014c46:	9301      	str	r3, [sp, #4]
 8014c48:	2300      	movs	r3, #0
 8014c4a:	9300      	str	r3, [sp, #0]
 8014c4c:	23ff      	movs	r3, #255	; 0xff
 8014c4e:	2100      	movs	r1, #0
 8014c50:	69f8      	ldr	r0, [r7, #28]
 8014c52:	f000 f9cd 	bl	8014ff0 <ip4_output_if>
  }
  pbuf_free(q);
 8014c56:	69f8      	ldr	r0, [r7, #28]
 8014c58:	f7f7 ff98 	bl	800cb8c <pbuf_free>
 8014c5c:	e000      	b.n	8014c60 <icmp_send_response+0xc0>
    return;
 8014c5e:	bf00      	nop
}
 8014c60:	3720      	adds	r7, #32
 8014c62:	46bd      	mov	sp, r7
 8014c64:	bd80      	pop	{r7, pc}
 8014c66:	bf00      	nop
 8014c68:	0801f800 	.word	0x0801f800
 8014c6c:	0801f8cc 	.word	0x0801f8cc
 8014c70:	0801f870 	.word	0x0801f870

08014c74 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014c74:	b480      	push	{r7}
 8014c76:	b085      	sub	sp, #20
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014c7c:	4b33      	ldr	r3, [pc, #204]	; (8014d4c <ip4_route+0xd8>)
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	60fb      	str	r3, [r7, #12]
 8014c82:	e036      	b.n	8014cf2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014c8a:	f003 0301 	and.w	r3, r3, #1
 8014c8e:	b2db      	uxtb	r3, r3
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d02b      	beq.n	8014cec <ip4_route+0x78>
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014c9a:	089b      	lsrs	r3, r3, #2
 8014c9c:	f003 0301 	and.w	r3, r3, #1
 8014ca0:	b2db      	uxtb	r3, r3
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d022      	beq.n	8014cec <ip4_route+0x78>
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	3304      	adds	r3, #4
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d01d      	beq.n	8014cec <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	681a      	ldr	r2, [r3, #0]
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	3304      	adds	r3, #4
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	405a      	eors	r2, r3
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	3308      	adds	r3, #8
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	4013      	ands	r3, r2
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d101      	bne.n	8014ccc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	e038      	b.n	8014d3e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014cd2:	f003 0302 	and.w	r3, r3, #2
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d108      	bne.n	8014cec <ip4_route+0x78>
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	681a      	ldr	r2, [r3, #0]
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	330c      	adds	r3, #12
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	429a      	cmp	r2, r3
 8014ce6:	d101      	bne.n	8014cec <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	e028      	b.n	8014d3e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	60fb      	str	r3, [r7, #12]
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d1c5      	bne.n	8014c84 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014cf8:	4b15      	ldr	r3, [pc, #84]	; (8014d50 <ip4_route+0xdc>)
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d01a      	beq.n	8014d36 <ip4_route+0xc2>
 8014d00:	4b13      	ldr	r3, [pc, #76]	; (8014d50 <ip4_route+0xdc>)
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014d08:	f003 0301 	and.w	r3, r3, #1
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d012      	beq.n	8014d36 <ip4_route+0xc2>
 8014d10:	4b0f      	ldr	r3, [pc, #60]	; (8014d50 <ip4_route+0xdc>)
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014d18:	f003 0304 	and.w	r3, r3, #4
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d00a      	beq.n	8014d36 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014d20:	4b0b      	ldr	r3, [pc, #44]	; (8014d50 <ip4_route+0xdc>)
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	3304      	adds	r3, #4
 8014d26:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d004      	beq.n	8014d36 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	b2db      	uxtb	r3, r3
 8014d32:	2b7f      	cmp	r3, #127	; 0x7f
 8014d34:	d101      	bne.n	8014d3a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014d36:	2300      	movs	r3, #0
 8014d38:	e001      	b.n	8014d3e <ip4_route+0xca>
  }

  return netif_default;
 8014d3a:	4b05      	ldr	r3, [pc, #20]	; (8014d50 <ip4_route+0xdc>)
 8014d3c:	681b      	ldr	r3, [r3, #0]
}
 8014d3e:	4618      	mov	r0, r3
 8014d40:	3714      	adds	r7, #20
 8014d42:	46bd      	mov	sp, r7
 8014d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d48:	4770      	bx	lr
 8014d4a:	bf00      	nop
 8014d4c:	20011470 	.word	0x20011470
 8014d50:	20011474 	.word	0x20011474

08014d54 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014d54:	b580      	push	{r7, lr}
 8014d56:	b082      	sub	sp, #8
 8014d58:	af00      	add	r7, sp, #0
 8014d5a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014d62:	f003 0301 	and.w	r3, r3, #1
 8014d66:	b2db      	uxtb	r3, r3
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d016      	beq.n	8014d9a <ip4_input_accept+0x46>
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	3304      	adds	r3, #4
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d011      	beq.n	8014d9a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014d76:	4b0b      	ldr	r3, [pc, #44]	; (8014da4 <ip4_input_accept+0x50>)
 8014d78:	695a      	ldr	r2, [r3, #20]
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	3304      	adds	r3, #4
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	429a      	cmp	r2, r3
 8014d82:	d008      	beq.n	8014d96 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014d84:	4b07      	ldr	r3, [pc, #28]	; (8014da4 <ip4_input_accept+0x50>)
 8014d86:	695b      	ldr	r3, [r3, #20]
 8014d88:	6879      	ldr	r1, [r7, #4]
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	f000 fa08 	bl	80151a0 <ip4_addr_isbroadcast_u32>
 8014d90:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d001      	beq.n	8014d9a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014d96:	2301      	movs	r3, #1
 8014d98:	e000      	b.n	8014d9c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014d9a:	2300      	movs	r3, #0
}
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	3708      	adds	r7, #8
 8014da0:	46bd      	mov	sp, r7
 8014da2:	bd80      	pop	{r7, pc}
 8014da4:	20008f5c 	.word	0x20008f5c

08014da8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b086      	sub	sp, #24
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	6078      	str	r0, [r7, #4]
 8014db0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	685b      	ldr	r3, [r3, #4]
 8014db6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014db8:	697b      	ldr	r3, [r7, #20]
 8014dba:	781b      	ldrb	r3, [r3, #0]
 8014dbc:	091b      	lsrs	r3, r3, #4
 8014dbe:	b2db      	uxtb	r3, r3
 8014dc0:	2b04      	cmp	r3, #4
 8014dc2:	d004      	beq.n	8014dce <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014dc4:	6878      	ldr	r0, [r7, #4]
 8014dc6:	f7f7 fee1 	bl	800cb8c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014dca:	2300      	movs	r3, #0
 8014dcc:	e107      	b.n	8014fde <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014dce:	697b      	ldr	r3, [r7, #20]
 8014dd0:	781b      	ldrb	r3, [r3, #0]
 8014dd2:	f003 030f 	and.w	r3, r3, #15
 8014dd6:	b2db      	uxtb	r3, r3
 8014dd8:	009b      	lsls	r3, r3, #2
 8014dda:	b2db      	uxtb	r3, r3
 8014ddc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014dde:	697b      	ldr	r3, [r7, #20]
 8014de0:	885b      	ldrh	r3, [r3, #2]
 8014de2:	b29b      	uxth	r3, r3
 8014de4:	4618      	mov	r0, r3
 8014de6:	f7f6 fadf 	bl	800b3a8 <lwip_htons>
 8014dea:	4603      	mov	r3, r0
 8014dec:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	891b      	ldrh	r3, [r3, #8]
 8014df2:	89ba      	ldrh	r2, [r7, #12]
 8014df4:	429a      	cmp	r2, r3
 8014df6:	d204      	bcs.n	8014e02 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014df8:	89bb      	ldrh	r3, [r7, #12]
 8014dfa:	4619      	mov	r1, r3
 8014dfc:	6878      	ldr	r0, [r7, #4]
 8014dfe:	f7f7 fd3f 	bl	800c880 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	895b      	ldrh	r3, [r3, #10]
 8014e06:	89fa      	ldrh	r2, [r7, #14]
 8014e08:	429a      	cmp	r2, r3
 8014e0a:	d807      	bhi.n	8014e1c <ip4_input+0x74>
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	891b      	ldrh	r3, [r3, #8]
 8014e10:	89ba      	ldrh	r2, [r7, #12]
 8014e12:	429a      	cmp	r2, r3
 8014e14:	d802      	bhi.n	8014e1c <ip4_input+0x74>
 8014e16:	89fb      	ldrh	r3, [r7, #14]
 8014e18:	2b13      	cmp	r3, #19
 8014e1a:	d804      	bhi.n	8014e26 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014e1c:	6878      	ldr	r0, [r7, #4]
 8014e1e:	f7f7 feb5 	bl	800cb8c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014e22:	2300      	movs	r3, #0
 8014e24:	e0db      	b.n	8014fde <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014e26:	697b      	ldr	r3, [r7, #20]
 8014e28:	691b      	ldr	r3, [r3, #16]
 8014e2a:	4a6f      	ldr	r2, [pc, #444]	; (8014fe8 <ip4_input+0x240>)
 8014e2c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014e2e:	697b      	ldr	r3, [r7, #20]
 8014e30:	68db      	ldr	r3, [r3, #12]
 8014e32:	4a6d      	ldr	r2, [pc, #436]	; (8014fe8 <ip4_input+0x240>)
 8014e34:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014e36:	4b6c      	ldr	r3, [pc, #432]	; (8014fe8 <ip4_input+0x240>)
 8014e38:	695b      	ldr	r3, [r3, #20]
 8014e3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014e3e:	2be0      	cmp	r3, #224	; 0xe0
 8014e40:	d112      	bne.n	8014e68 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014e42:	683b      	ldr	r3, [r7, #0]
 8014e44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014e48:	f003 0301 	and.w	r3, r3, #1
 8014e4c:	b2db      	uxtb	r3, r3
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d007      	beq.n	8014e62 <ip4_input+0xba>
 8014e52:	683b      	ldr	r3, [r7, #0]
 8014e54:	3304      	adds	r3, #4
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d002      	beq.n	8014e62 <ip4_input+0xba>
      netif = inp;
 8014e5c:	683b      	ldr	r3, [r7, #0]
 8014e5e:	613b      	str	r3, [r7, #16]
 8014e60:	e02a      	b.n	8014eb8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014e62:	2300      	movs	r3, #0
 8014e64:	613b      	str	r3, [r7, #16]
 8014e66:	e027      	b.n	8014eb8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014e68:	6838      	ldr	r0, [r7, #0]
 8014e6a:	f7ff ff73 	bl	8014d54 <ip4_input_accept>
 8014e6e:	4603      	mov	r3, r0
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d002      	beq.n	8014e7a <ip4_input+0xd2>
      netif = inp;
 8014e74:	683b      	ldr	r3, [r7, #0]
 8014e76:	613b      	str	r3, [r7, #16]
 8014e78:	e01e      	b.n	8014eb8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014e7e:	4b5a      	ldr	r3, [pc, #360]	; (8014fe8 <ip4_input+0x240>)
 8014e80:	695b      	ldr	r3, [r3, #20]
 8014e82:	b2db      	uxtb	r3, r3
 8014e84:	2b7f      	cmp	r3, #127	; 0x7f
 8014e86:	d017      	beq.n	8014eb8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014e88:	4b58      	ldr	r3, [pc, #352]	; (8014fec <ip4_input+0x244>)
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	613b      	str	r3, [r7, #16]
 8014e8e:	e00e      	b.n	8014eae <ip4_input+0x106>
          if (netif == inp) {
 8014e90:	693a      	ldr	r2, [r7, #16]
 8014e92:	683b      	ldr	r3, [r7, #0]
 8014e94:	429a      	cmp	r2, r3
 8014e96:	d006      	beq.n	8014ea6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014e98:	6938      	ldr	r0, [r7, #16]
 8014e9a:	f7ff ff5b 	bl	8014d54 <ip4_input_accept>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d108      	bne.n	8014eb6 <ip4_input+0x10e>
 8014ea4:	e000      	b.n	8014ea8 <ip4_input+0x100>
            continue;
 8014ea6:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014ea8:	693b      	ldr	r3, [r7, #16]
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	613b      	str	r3, [r7, #16]
 8014eae:	693b      	ldr	r3, [r7, #16]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d1ed      	bne.n	8014e90 <ip4_input+0xe8>
 8014eb4:	e000      	b.n	8014eb8 <ip4_input+0x110>
            break;
 8014eb6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014eb8:	4b4b      	ldr	r3, [pc, #300]	; (8014fe8 <ip4_input+0x240>)
 8014eba:	691b      	ldr	r3, [r3, #16]
 8014ebc:	6839      	ldr	r1, [r7, #0]
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f000 f96e 	bl	80151a0 <ip4_addr_isbroadcast_u32>
 8014ec4:	4603      	mov	r3, r0
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d105      	bne.n	8014ed6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014eca:	4b47      	ldr	r3, [pc, #284]	; (8014fe8 <ip4_input+0x240>)
 8014ecc:	691b      	ldr	r3, [r3, #16]
 8014ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014ed2:	2be0      	cmp	r3, #224	; 0xe0
 8014ed4:	d104      	bne.n	8014ee0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014ed6:	6878      	ldr	r0, [r7, #4]
 8014ed8:	f7f7 fe58 	bl	800cb8c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014edc:	2300      	movs	r3, #0
 8014ede:	e07e      	b.n	8014fde <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014ee0:	693b      	ldr	r3, [r7, #16]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d104      	bne.n	8014ef0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014ee6:	6878      	ldr	r0, [r7, #4]
 8014ee8:	f7f7 fe50 	bl	800cb8c <pbuf_free>
    return ERR_OK;
 8014eec:	2300      	movs	r3, #0
 8014eee:	e076      	b.n	8014fde <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014ef0:	697b      	ldr	r3, [r7, #20]
 8014ef2:	88db      	ldrh	r3, [r3, #6]
 8014ef4:	b29b      	uxth	r3, r3
 8014ef6:	461a      	mov	r2, r3
 8014ef8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8014efc:	4013      	ands	r3, r2
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d00b      	beq.n	8014f1a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014f02:	6878      	ldr	r0, [r7, #4]
 8014f04:	f000 fc92 	bl	801582c <ip4_reass>
 8014f08:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d101      	bne.n	8014f14 <ip4_input+0x16c>
      return ERR_OK;
 8014f10:	2300      	movs	r3, #0
 8014f12:	e064      	b.n	8014fde <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	685b      	ldr	r3, [r3, #4]
 8014f18:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014f1a:	4a33      	ldr	r2, [pc, #204]	; (8014fe8 <ip4_input+0x240>)
 8014f1c:	693b      	ldr	r3, [r7, #16]
 8014f1e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014f20:	4a31      	ldr	r2, [pc, #196]	; (8014fe8 <ip4_input+0x240>)
 8014f22:	683b      	ldr	r3, [r7, #0]
 8014f24:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014f26:	4a30      	ldr	r2, [pc, #192]	; (8014fe8 <ip4_input+0x240>)
 8014f28:	697b      	ldr	r3, [r7, #20]
 8014f2a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014f2c:	697b      	ldr	r3, [r7, #20]
 8014f2e:	781b      	ldrb	r3, [r3, #0]
 8014f30:	f003 030f 	and.w	r3, r3, #15
 8014f34:	b2db      	uxtb	r3, r3
 8014f36:	009b      	lsls	r3, r3, #2
 8014f38:	b2db      	uxtb	r3, r3
 8014f3a:	b29a      	uxth	r2, r3
 8014f3c:	4b2a      	ldr	r3, [pc, #168]	; (8014fe8 <ip4_input+0x240>)
 8014f3e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014f40:	89fb      	ldrh	r3, [r7, #14]
 8014f42:	4619      	mov	r1, r3
 8014f44:	6878      	ldr	r0, [r7, #4]
 8014f46:	f7f7 fd9b 	bl	800ca80 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014f4a:	697b      	ldr	r3, [r7, #20]
 8014f4c:	7a5b      	ldrb	r3, [r3, #9]
 8014f4e:	2b11      	cmp	r3, #17
 8014f50:	d006      	beq.n	8014f60 <ip4_input+0x1b8>
 8014f52:	2b11      	cmp	r3, #17
 8014f54:	dc13      	bgt.n	8014f7e <ip4_input+0x1d6>
 8014f56:	2b01      	cmp	r3, #1
 8014f58:	d00c      	beq.n	8014f74 <ip4_input+0x1cc>
 8014f5a:	2b06      	cmp	r3, #6
 8014f5c:	d005      	beq.n	8014f6a <ip4_input+0x1c2>
 8014f5e:	e00e      	b.n	8014f7e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014f60:	6839      	ldr	r1, [r7, #0]
 8014f62:	6878      	ldr	r0, [r7, #4]
 8014f64:	f7fe fb5a 	bl	801361c <udp_input>
        break;
 8014f68:	e026      	b.n	8014fb8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014f6a:	6839      	ldr	r1, [r7, #0]
 8014f6c:	6878      	ldr	r0, [r7, #4]
 8014f6e:	f7f9 ff13 	bl	800ed98 <tcp_input>
        break;
 8014f72:	e021      	b.n	8014fb8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014f74:	6839      	ldr	r1, [r7, #0]
 8014f76:	6878      	ldr	r0, [r7, #4]
 8014f78:	f7ff fcee 	bl	8014958 <icmp_input>
        break;
 8014f7c:	e01c      	b.n	8014fb8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014f7e:	4b1a      	ldr	r3, [pc, #104]	; (8014fe8 <ip4_input+0x240>)
 8014f80:	695b      	ldr	r3, [r3, #20]
 8014f82:	6939      	ldr	r1, [r7, #16]
 8014f84:	4618      	mov	r0, r3
 8014f86:	f000 f90b 	bl	80151a0 <ip4_addr_isbroadcast_u32>
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d10f      	bne.n	8014fb0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014f90:	4b15      	ldr	r3, [pc, #84]	; (8014fe8 <ip4_input+0x240>)
 8014f92:	695b      	ldr	r3, [r3, #20]
 8014f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014f98:	2be0      	cmp	r3, #224	; 0xe0
 8014f9a:	d009      	beq.n	8014fb0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014f9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014fa0:	4619      	mov	r1, r3
 8014fa2:	6878      	ldr	r0, [r7, #4]
 8014fa4:	f7f7 fddf 	bl	800cb66 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014fa8:	2102      	movs	r1, #2
 8014faa:	6878      	ldr	r0, [r7, #4]
 8014fac:	f7ff fdd8 	bl	8014b60 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014fb0:	6878      	ldr	r0, [r7, #4]
 8014fb2:	f7f7 fdeb 	bl	800cb8c <pbuf_free>
        break;
 8014fb6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014fb8:	4b0b      	ldr	r3, [pc, #44]	; (8014fe8 <ip4_input+0x240>)
 8014fba:	2200      	movs	r2, #0
 8014fbc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014fbe:	4b0a      	ldr	r3, [pc, #40]	; (8014fe8 <ip4_input+0x240>)
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014fc4:	4b08      	ldr	r3, [pc, #32]	; (8014fe8 <ip4_input+0x240>)
 8014fc6:	2200      	movs	r2, #0
 8014fc8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014fca:	4b07      	ldr	r3, [pc, #28]	; (8014fe8 <ip4_input+0x240>)
 8014fcc:	2200      	movs	r2, #0
 8014fce:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014fd0:	4b05      	ldr	r3, [pc, #20]	; (8014fe8 <ip4_input+0x240>)
 8014fd2:	2200      	movs	r2, #0
 8014fd4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014fd6:	4b04      	ldr	r3, [pc, #16]	; (8014fe8 <ip4_input+0x240>)
 8014fd8:	2200      	movs	r2, #0
 8014fda:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014fdc:	2300      	movs	r3, #0
}
 8014fde:	4618      	mov	r0, r3
 8014fe0:	3718      	adds	r7, #24
 8014fe2:	46bd      	mov	sp, r7
 8014fe4:	bd80      	pop	{r7, pc}
 8014fe6:	bf00      	nop
 8014fe8:	20008f5c 	.word	0x20008f5c
 8014fec:	20011470 	.word	0x20011470

08014ff0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b08a      	sub	sp, #40	; 0x28
 8014ff4:	af04      	add	r7, sp, #16
 8014ff6:	60f8      	str	r0, [r7, #12]
 8014ff8:	60b9      	str	r1, [r7, #8]
 8014ffa:	607a      	str	r2, [r7, #4]
 8014ffc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014ffe:	68bb      	ldr	r3, [r7, #8]
 8015000:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d009      	beq.n	801501c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015008:	68bb      	ldr	r3, [r7, #8]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d003      	beq.n	8015016 <ip4_output_if+0x26>
 801500e:	68bb      	ldr	r3, [r7, #8]
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d102      	bne.n	801501c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015018:	3304      	adds	r3, #4
 801501a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801501c:	78fa      	ldrb	r2, [r7, #3]
 801501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015020:	9302      	str	r3, [sp, #8]
 8015022:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015026:	9301      	str	r3, [sp, #4]
 8015028:	f897 3020 	ldrb.w	r3, [r7, #32]
 801502c:	9300      	str	r3, [sp, #0]
 801502e:	4613      	mov	r3, r2
 8015030:	687a      	ldr	r2, [r7, #4]
 8015032:	6979      	ldr	r1, [r7, #20]
 8015034:	68f8      	ldr	r0, [r7, #12]
 8015036:	f000 f805 	bl	8015044 <ip4_output_if_src>
 801503a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801503c:	4618      	mov	r0, r3
 801503e:	3718      	adds	r7, #24
 8015040:	46bd      	mov	sp, r7
 8015042:	bd80      	pop	{r7, pc}

08015044 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b088      	sub	sp, #32
 8015048:	af00      	add	r7, sp, #0
 801504a:	60f8      	str	r0, [r7, #12]
 801504c:	60b9      	str	r1, [r7, #8]
 801504e:	607a      	str	r2, [r7, #4]
 8015050:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	7b9b      	ldrb	r3, [r3, #14]
 8015056:	2b01      	cmp	r3, #1
 8015058:	d006      	beq.n	8015068 <ip4_output_if_src+0x24>
 801505a:	4b4b      	ldr	r3, [pc, #300]	; (8015188 <ip4_output_if_src+0x144>)
 801505c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015060:	494a      	ldr	r1, [pc, #296]	; (801518c <ip4_output_if_src+0x148>)
 8015062:	484b      	ldr	r0, [pc, #300]	; (8015190 <ip4_output_if_src+0x14c>)
 8015064:	f005 f832 	bl	801a0cc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d060      	beq.n	8015130 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801506e:	2314      	movs	r3, #20
 8015070:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015072:	2114      	movs	r1, #20
 8015074:	68f8      	ldr	r0, [r7, #12]
 8015076:	f7f7 fcf3 	bl	800ca60 <pbuf_add_header>
 801507a:	4603      	mov	r3, r0
 801507c:	2b00      	cmp	r3, #0
 801507e:	d002      	beq.n	8015086 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015080:	f06f 0301 	mvn.w	r3, #1
 8015084:	e07c      	b.n	8015180 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	685b      	ldr	r3, [r3, #4]
 801508a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	895b      	ldrh	r3, [r3, #10]
 8015090:	2b13      	cmp	r3, #19
 8015092:	d806      	bhi.n	80150a2 <ip4_output_if_src+0x5e>
 8015094:	4b3c      	ldr	r3, [pc, #240]	; (8015188 <ip4_output_if_src+0x144>)
 8015096:	f44f 7262 	mov.w	r2, #904	; 0x388
 801509a:	493e      	ldr	r1, [pc, #248]	; (8015194 <ip4_output_if_src+0x150>)
 801509c:	483c      	ldr	r0, [pc, #240]	; (8015190 <ip4_output_if_src+0x14c>)
 801509e:	f005 f815 	bl	801a0cc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80150a2:	69fb      	ldr	r3, [r7, #28]
 80150a4:	78fa      	ldrb	r2, [r7, #3]
 80150a6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80150a8:	69fb      	ldr	r3, [r7, #28]
 80150aa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80150ae:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	681a      	ldr	r2, [r3, #0]
 80150b4:	69fb      	ldr	r3, [r7, #28]
 80150b6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80150b8:	8b7b      	ldrh	r3, [r7, #26]
 80150ba:	089b      	lsrs	r3, r3, #2
 80150bc:	b29b      	uxth	r3, r3
 80150be:	b2db      	uxtb	r3, r3
 80150c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80150c4:	b2da      	uxtb	r2, r3
 80150c6:	69fb      	ldr	r3, [r7, #28]
 80150c8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80150ca:	69fb      	ldr	r3, [r7, #28]
 80150cc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80150d0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	891b      	ldrh	r3, [r3, #8]
 80150d6:	4618      	mov	r0, r3
 80150d8:	f7f6 f966 	bl	800b3a8 <lwip_htons>
 80150dc:	4603      	mov	r3, r0
 80150de:	461a      	mov	r2, r3
 80150e0:	69fb      	ldr	r3, [r7, #28]
 80150e2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80150e4:	69fb      	ldr	r3, [r7, #28]
 80150e6:	2200      	movs	r2, #0
 80150e8:	719a      	strb	r2, [r3, #6]
 80150ea:	2200      	movs	r2, #0
 80150ec:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80150ee:	4b2a      	ldr	r3, [pc, #168]	; (8015198 <ip4_output_if_src+0x154>)
 80150f0:	881b      	ldrh	r3, [r3, #0]
 80150f2:	4618      	mov	r0, r3
 80150f4:	f7f6 f958 	bl	800b3a8 <lwip_htons>
 80150f8:	4603      	mov	r3, r0
 80150fa:	461a      	mov	r2, r3
 80150fc:	69fb      	ldr	r3, [r7, #28]
 80150fe:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015100:	4b25      	ldr	r3, [pc, #148]	; (8015198 <ip4_output_if_src+0x154>)
 8015102:	881b      	ldrh	r3, [r3, #0]
 8015104:	3301      	adds	r3, #1
 8015106:	b29a      	uxth	r2, r3
 8015108:	4b23      	ldr	r3, [pc, #140]	; (8015198 <ip4_output_if_src+0x154>)
 801510a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801510c:	68bb      	ldr	r3, [r7, #8]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d104      	bne.n	801511c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015112:	4b22      	ldr	r3, [pc, #136]	; (801519c <ip4_output_if_src+0x158>)
 8015114:	681a      	ldr	r2, [r3, #0]
 8015116:	69fb      	ldr	r3, [r7, #28]
 8015118:	60da      	str	r2, [r3, #12]
 801511a:	e003      	b.n	8015124 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801511c:	68bb      	ldr	r3, [r7, #8]
 801511e:	681a      	ldr	r2, [r3, #0]
 8015120:	69fb      	ldr	r3, [r7, #28]
 8015122:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015124:	69fb      	ldr	r3, [r7, #28]
 8015126:	2200      	movs	r2, #0
 8015128:	729a      	strb	r2, [r3, #10]
 801512a:	2200      	movs	r2, #0
 801512c:	72da      	strb	r2, [r3, #11]
 801512e:	e00f      	b.n	8015150 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	895b      	ldrh	r3, [r3, #10]
 8015134:	2b13      	cmp	r3, #19
 8015136:	d802      	bhi.n	801513e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015138:	f06f 0301 	mvn.w	r3, #1
 801513c:	e020      	b.n	8015180 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	685b      	ldr	r3, [r3, #4]
 8015142:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015144:	69fb      	ldr	r3, [r7, #28]
 8015146:	691b      	ldr	r3, [r3, #16]
 8015148:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801514a:	f107 0314 	add.w	r3, r7, #20
 801514e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015152:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015154:	2b00      	cmp	r3, #0
 8015156:	d00c      	beq.n	8015172 <ip4_output_if_src+0x12e>
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	891a      	ldrh	r2, [r3, #8]
 801515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801515e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015160:	429a      	cmp	r2, r3
 8015162:	d906      	bls.n	8015172 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015164:	687a      	ldr	r2, [r7, #4]
 8015166:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015168:	68f8      	ldr	r0, [r7, #12]
 801516a:	f000 fd53 	bl	8015c14 <ip4_frag>
 801516e:	4603      	mov	r3, r0
 8015170:	e006      	b.n	8015180 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015174:	695b      	ldr	r3, [r3, #20]
 8015176:	687a      	ldr	r2, [r7, #4]
 8015178:	68f9      	ldr	r1, [r7, #12]
 801517a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801517c:	4798      	blx	r3
 801517e:	4603      	mov	r3, r0
}
 8015180:	4618      	mov	r0, r3
 8015182:	3720      	adds	r7, #32
 8015184:	46bd      	mov	sp, r7
 8015186:	bd80      	pop	{r7, pc}
 8015188:	0801f8f8 	.word	0x0801f8f8
 801518c:	0801f92c 	.word	0x0801f92c
 8015190:	0801f938 	.word	0x0801f938
 8015194:	0801f960 	.word	0x0801f960
 8015198:	200115ce 	.word	0x200115ce
 801519c:	08029558 	.word	0x08029558

080151a0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80151a0:	b480      	push	{r7}
 80151a2:	b085      	sub	sp, #20
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	6078      	str	r0, [r7, #4]
 80151a8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80151b4:	d002      	beq.n	80151bc <ip4_addr_isbroadcast_u32+0x1c>
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d101      	bne.n	80151c0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80151bc:	2301      	movs	r3, #1
 80151be:	e02a      	b.n	8015216 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80151c0:	683b      	ldr	r3, [r7, #0]
 80151c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80151c6:	f003 0302 	and.w	r3, r3, #2
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d101      	bne.n	80151d2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80151ce:	2300      	movs	r3, #0
 80151d0:	e021      	b.n	8015216 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80151d2:	683b      	ldr	r3, [r7, #0]
 80151d4:	3304      	adds	r3, #4
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	687a      	ldr	r2, [r7, #4]
 80151da:	429a      	cmp	r2, r3
 80151dc:	d101      	bne.n	80151e2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80151de:	2300      	movs	r3, #0
 80151e0:	e019      	b.n	8015216 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80151e2:	68fa      	ldr	r2, [r7, #12]
 80151e4:	683b      	ldr	r3, [r7, #0]
 80151e6:	3304      	adds	r3, #4
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	405a      	eors	r2, r3
 80151ec:	683b      	ldr	r3, [r7, #0]
 80151ee:	3308      	adds	r3, #8
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	4013      	ands	r3, r2
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d10d      	bne.n	8015214 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80151f8:	683b      	ldr	r3, [r7, #0]
 80151fa:	3308      	adds	r3, #8
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	43da      	mvns	r2, r3
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015204:	683b      	ldr	r3, [r7, #0]
 8015206:	3308      	adds	r3, #8
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801520c:	429a      	cmp	r2, r3
 801520e:	d101      	bne.n	8015214 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015210:	2301      	movs	r3, #1
 8015212:	e000      	b.n	8015216 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015214:	2300      	movs	r3, #0
  }
}
 8015216:	4618      	mov	r0, r3
 8015218:	3714      	adds	r7, #20
 801521a:	46bd      	mov	sp, r7
 801521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015220:	4770      	bx	lr
	...

08015224 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015224:	b580      	push	{r7, lr}
 8015226:	b084      	sub	sp, #16
 8015228:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801522a:	2300      	movs	r3, #0
 801522c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801522e:	4b12      	ldr	r3, [pc, #72]	; (8015278 <ip_reass_tmr+0x54>)
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015234:	e018      	b.n	8015268 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	7fdb      	ldrb	r3, [r3, #31]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d00b      	beq.n	8015256 <ip_reass_tmr+0x32>
      r->timer--;
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	7fdb      	ldrb	r3, [r3, #31]
 8015242:	3b01      	subs	r3, #1
 8015244:	b2da      	uxtb	r2, r3
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	60fb      	str	r3, [r7, #12]
 8015254:	e008      	b.n	8015268 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015260:	68b9      	ldr	r1, [r7, #8]
 8015262:	6878      	ldr	r0, [r7, #4]
 8015264:	f000 f80a 	bl	801527c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d1e3      	bne.n	8015236 <ip_reass_tmr+0x12>
    }
  }
}
 801526e:	bf00      	nop
 8015270:	bf00      	nop
 8015272:	3710      	adds	r7, #16
 8015274:	46bd      	mov	sp, r7
 8015276:	bd80      	pop	{r7, pc}
 8015278:	200115d0 	.word	0x200115d0

0801527c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b088      	sub	sp, #32
 8015280:	af00      	add	r7, sp, #0
 8015282:	6078      	str	r0, [r7, #4]
 8015284:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015286:	2300      	movs	r3, #0
 8015288:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801528a:	683a      	ldr	r2, [r7, #0]
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	429a      	cmp	r2, r3
 8015290:	d105      	bne.n	801529e <ip_reass_free_complete_datagram+0x22>
 8015292:	4b45      	ldr	r3, [pc, #276]	; (80153a8 <ip_reass_free_complete_datagram+0x12c>)
 8015294:	22ab      	movs	r2, #171	; 0xab
 8015296:	4945      	ldr	r1, [pc, #276]	; (80153ac <ip_reass_free_complete_datagram+0x130>)
 8015298:	4845      	ldr	r0, [pc, #276]	; (80153b0 <ip_reass_free_complete_datagram+0x134>)
 801529a:	f004 ff17 	bl	801a0cc <iprintf>
  if (prev != NULL) {
 801529e:	683b      	ldr	r3, [r7, #0]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d00a      	beq.n	80152ba <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80152a4:	683b      	ldr	r3, [r7, #0]
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	687a      	ldr	r2, [r7, #4]
 80152aa:	429a      	cmp	r2, r3
 80152ac:	d005      	beq.n	80152ba <ip_reass_free_complete_datagram+0x3e>
 80152ae:	4b3e      	ldr	r3, [pc, #248]	; (80153a8 <ip_reass_free_complete_datagram+0x12c>)
 80152b0:	22ad      	movs	r2, #173	; 0xad
 80152b2:	4940      	ldr	r1, [pc, #256]	; (80153b4 <ip_reass_free_complete_datagram+0x138>)
 80152b4:	483e      	ldr	r0, [pc, #248]	; (80153b0 <ip_reass_free_complete_datagram+0x134>)
 80152b6:	f004 ff09 	bl	801a0cc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	685b      	ldr	r3, [r3, #4]
 80152be:	685b      	ldr	r3, [r3, #4]
 80152c0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80152c2:	697b      	ldr	r3, [r7, #20]
 80152c4:	889b      	ldrh	r3, [r3, #4]
 80152c6:	b29b      	uxth	r3, r3
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d12a      	bne.n	8015322 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	685b      	ldr	r3, [r3, #4]
 80152d0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80152d2:	697b      	ldr	r3, [r7, #20]
 80152d4:	681a      	ldr	r2, [r3, #0]
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80152da:	69bb      	ldr	r3, [r7, #24]
 80152dc:	6858      	ldr	r0, [r3, #4]
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	3308      	adds	r3, #8
 80152e2:	2214      	movs	r2, #20
 80152e4:	4619      	mov	r1, r3
 80152e6:	f004 fa7f 	bl	80197e8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80152ea:	2101      	movs	r1, #1
 80152ec:	69b8      	ldr	r0, [r7, #24]
 80152ee:	f7ff fc47 	bl	8014b80 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80152f2:	69b8      	ldr	r0, [r7, #24]
 80152f4:	f7f7 fcd8 	bl	800cca8 <pbuf_clen>
 80152f8:	4603      	mov	r3, r0
 80152fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80152fc:	8bfa      	ldrh	r2, [r7, #30]
 80152fe:	8a7b      	ldrh	r3, [r7, #18]
 8015300:	4413      	add	r3, r2
 8015302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015306:	db05      	blt.n	8015314 <ip_reass_free_complete_datagram+0x98>
 8015308:	4b27      	ldr	r3, [pc, #156]	; (80153a8 <ip_reass_free_complete_datagram+0x12c>)
 801530a:	22bc      	movs	r2, #188	; 0xbc
 801530c:	492a      	ldr	r1, [pc, #168]	; (80153b8 <ip_reass_free_complete_datagram+0x13c>)
 801530e:	4828      	ldr	r0, [pc, #160]	; (80153b0 <ip_reass_free_complete_datagram+0x134>)
 8015310:	f004 fedc 	bl	801a0cc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015314:	8bfa      	ldrh	r2, [r7, #30]
 8015316:	8a7b      	ldrh	r3, [r7, #18]
 8015318:	4413      	add	r3, r2
 801531a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801531c:	69b8      	ldr	r0, [r7, #24]
 801531e:	f7f7 fc35 	bl	800cb8c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	685b      	ldr	r3, [r3, #4]
 8015326:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015328:	e01f      	b.n	801536a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801532a:	69bb      	ldr	r3, [r7, #24]
 801532c:	685b      	ldr	r3, [r3, #4]
 801532e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015330:	69bb      	ldr	r3, [r7, #24]
 8015332:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015334:	697b      	ldr	r3, [r7, #20]
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801533a:	68f8      	ldr	r0, [r7, #12]
 801533c:	f7f7 fcb4 	bl	800cca8 <pbuf_clen>
 8015340:	4603      	mov	r3, r0
 8015342:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015344:	8bfa      	ldrh	r2, [r7, #30]
 8015346:	8a7b      	ldrh	r3, [r7, #18]
 8015348:	4413      	add	r3, r2
 801534a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801534e:	db05      	blt.n	801535c <ip_reass_free_complete_datagram+0xe0>
 8015350:	4b15      	ldr	r3, [pc, #84]	; (80153a8 <ip_reass_free_complete_datagram+0x12c>)
 8015352:	22cc      	movs	r2, #204	; 0xcc
 8015354:	4918      	ldr	r1, [pc, #96]	; (80153b8 <ip_reass_free_complete_datagram+0x13c>)
 8015356:	4816      	ldr	r0, [pc, #88]	; (80153b0 <ip_reass_free_complete_datagram+0x134>)
 8015358:	f004 feb8 	bl	801a0cc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801535c:	8bfa      	ldrh	r2, [r7, #30]
 801535e:	8a7b      	ldrh	r3, [r7, #18]
 8015360:	4413      	add	r3, r2
 8015362:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015364:	68f8      	ldr	r0, [r7, #12]
 8015366:	f7f7 fc11 	bl	800cb8c <pbuf_free>
  while (p != NULL) {
 801536a:	69bb      	ldr	r3, [r7, #24]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d1dc      	bne.n	801532a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015370:	6839      	ldr	r1, [r7, #0]
 8015372:	6878      	ldr	r0, [r7, #4]
 8015374:	f000 f8c2 	bl	80154fc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015378:	4b10      	ldr	r3, [pc, #64]	; (80153bc <ip_reass_free_complete_datagram+0x140>)
 801537a:	881b      	ldrh	r3, [r3, #0]
 801537c:	8bfa      	ldrh	r2, [r7, #30]
 801537e:	429a      	cmp	r2, r3
 8015380:	d905      	bls.n	801538e <ip_reass_free_complete_datagram+0x112>
 8015382:	4b09      	ldr	r3, [pc, #36]	; (80153a8 <ip_reass_free_complete_datagram+0x12c>)
 8015384:	22d2      	movs	r2, #210	; 0xd2
 8015386:	490e      	ldr	r1, [pc, #56]	; (80153c0 <ip_reass_free_complete_datagram+0x144>)
 8015388:	4809      	ldr	r0, [pc, #36]	; (80153b0 <ip_reass_free_complete_datagram+0x134>)
 801538a:	f004 fe9f 	bl	801a0cc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801538e:	4b0b      	ldr	r3, [pc, #44]	; (80153bc <ip_reass_free_complete_datagram+0x140>)
 8015390:	881a      	ldrh	r2, [r3, #0]
 8015392:	8bfb      	ldrh	r3, [r7, #30]
 8015394:	1ad3      	subs	r3, r2, r3
 8015396:	b29a      	uxth	r2, r3
 8015398:	4b08      	ldr	r3, [pc, #32]	; (80153bc <ip_reass_free_complete_datagram+0x140>)
 801539a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801539c:	8bfb      	ldrh	r3, [r7, #30]
}
 801539e:	4618      	mov	r0, r3
 80153a0:	3720      	adds	r7, #32
 80153a2:	46bd      	mov	sp, r7
 80153a4:	bd80      	pop	{r7, pc}
 80153a6:	bf00      	nop
 80153a8:	0801f990 	.word	0x0801f990
 80153ac:	0801f9cc 	.word	0x0801f9cc
 80153b0:	0801f9d8 	.word	0x0801f9d8
 80153b4:	0801fa00 	.word	0x0801fa00
 80153b8:	0801fa14 	.word	0x0801fa14
 80153bc:	200115d4 	.word	0x200115d4
 80153c0:	0801fa34 	.word	0x0801fa34

080153c4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80153c4:	b580      	push	{r7, lr}
 80153c6:	b08a      	sub	sp, #40	; 0x28
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
 80153cc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80153ce:	2300      	movs	r3, #0
 80153d0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80153d2:	2300      	movs	r3, #0
 80153d4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80153d6:	2300      	movs	r3, #0
 80153d8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80153da:	2300      	movs	r3, #0
 80153dc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80153de:	2300      	movs	r3, #0
 80153e0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80153e2:	4b28      	ldr	r3, [pc, #160]	; (8015484 <ip_reass_remove_oldest_datagram+0xc0>)
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80153e8:	e030      	b.n	801544c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80153ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ec:	695a      	ldr	r2, [r3, #20]
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	68db      	ldr	r3, [r3, #12]
 80153f2:	429a      	cmp	r2, r3
 80153f4:	d10c      	bne.n	8015410 <ip_reass_remove_oldest_datagram+0x4c>
 80153f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153f8:	699a      	ldr	r2, [r3, #24]
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	691b      	ldr	r3, [r3, #16]
 80153fe:	429a      	cmp	r2, r3
 8015400:	d106      	bne.n	8015410 <ip_reass_remove_oldest_datagram+0x4c>
 8015402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015404:	899a      	ldrh	r2, [r3, #12]
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	889b      	ldrh	r3, [r3, #4]
 801540a:	b29b      	uxth	r3, r3
 801540c:	429a      	cmp	r2, r3
 801540e:	d014      	beq.n	801543a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015410:	693b      	ldr	r3, [r7, #16]
 8015412:	3301      	adds	r3, #1
 8015414:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015416:	6a3b      	ldr	r3, [r7, #32]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d104      	bne.n	8015426 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801541e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015420:	69fb      	ldr	r3, [r7, #28]
 8015422:	61bb      	str	r3, [r7, #24]
 8015424:	e009      	b.n	801543a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015428:	7fda      	ldrb	r2, [r3, #31]
 801542a:	6a3b      	ldr	r3, [r7, #32]
 801542c:	7fdb      	ldrb	r3, [r3, #31]
 801542e:	429a      	cmp	r2, r3
 8015430:	d803      	bhi.n	801543a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015434:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015436:	69fb      	ldr	r3, [r7, #28]
 8015438:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d001      	beq.n	8015446 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015444:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801544e:	2b00      	cmp	r3, #0
 8015450:	d1cb      	bne.n	80153ea <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015452:	6a3b      	ldr	r3, [r7, #32]
 8015454:	2b00      	cmp	r3, #0
 8015456:	d008      	beq.n	801546a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015458:	69b9      	ldr	r1, [r7, #24]
 801545a:	6a38      	ldr	r0, [r7, #32]
 801545c:	f7ff ff0e 	bl	801527c <ip_reass_free_complete_datagram>
 8015460:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015462:	697a      	ldr	r2, [r7, #20]
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	4413      	add	r3, r2
 8015468:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801546a:	697a      	ldr	r2, [r7, #20]
 801546c:	683b      	ldr	r3, [r7, #0]
 801546e:	429a      	cmp	r2, r3
 8015470:	da02      	bge.n	8015478 <ip_reass_remove_oldest_datagram+0xb4>
 8015472:	693b      	ldr	r3, [r7, #16]
 8015474:	2b01      	cmp	r3, #1
 8015476:	dcac      	bgt.n	80153d2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015478:	697b      	ldr	r3, [r7, #20]
}
 801547a:	4618      	mov	r0, r3
 801547c:	3728      	adds	r7, #40	; 0x28
 801547e:	46bd      	mov	sp, r7
 8015480:	bd80      	pop	{r7, pc}
 8015482:	bf00      	nop
 8015484:	200115d0 	.word	0x200115d0

08015488 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015488:	b580      	push	{r7, lr}
 801548a:	b084      	sub	sp, #16
 801548c:	af00      	add	r7, sp, #0
 801548e:	6078      	str	r0, [r7, #4]
 8015490:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015492:	2004      	movs	r0, #4
 8015494:	f7f6 fc60 	bl	800bd58 <memp_malloc>
 8015498:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	2b00      	cmp	r3, #0
 801549e:	d110      	bne.n	80154c2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80154a0:	6839      	ldr	r1, [r7, #0]
 80154a2:	6878      	ldr	r0, [r7, #4]
 80154a4:	f7ff ff8e 	bl	80153c4 <ip_reass_remove_oldest_datagram>
 80154a8:	4602      	mov	r2, r0
 80154aa:	683b      	ldr	r3, [r7, #0]
 80154ac:	4293      	cmp	r3, r2
 80154ae:	dc03      	bgt.n	80154b8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80154b0:	2004      	movs	r0, #4
 80154b2:	f7f6 fc51 	bl	800bd58 <memp_malloc>
 80154b6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d101      	bne.n	80154c2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80154be:	2300      	movs	r3, #0
 80154c0:	e016      	b.n	80154f0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80154c2:	2220      	movs	r2, #32
 80154c4:	2100      	movs	r1, #0
 80154c6:	68f8      	ldr	r0, [r7, #12]
 80154c8:	f004 f9b6 	bl	8019838 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	220f      	movs	r2, #15
 80154d0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80154d2:	4b09      	ldr	r3, [pc, #36]	; (80154f8 <ip_reass_enqueue_new_datagram+0x70>)
 80154d4:	681a      	ldr	r2, [r3, #0]
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80154da:	4a07      	ldr	r2, [pc, #28]	; (80154f8 <ip_reass_enqueue_new_datagram+0x70>)
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	3308      	adds	r3, #8
 80154e4:	2214      	movs	r2, #20
 80154e6:	6879      	ldr	r1, [r7, #4]
 80154e8:	4618      	mov	r0, r3
 80154ea:	f004 f97d 	bl	80197e8 <memcpy>
  return ipr;
 80154ee:	68fb      	ldr	r3, [r7, #12]
}
 80154f0:	4618      	mov	r0, r3
 80154f2:	3710      	adds	r7, #16
 80154f4:	46bd      	mov	sp, r7
 80154f6:	bd80      	pop	{r7, pc}
 80154f8:	200115d0 	.word	0x200115d0

080154fc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b082      	sub	sp, #8
 8015500:	af00      	add	r7, sp, #0
 8015502:	6078      	str	r0, [r7, #4]
 8015504:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015506:	4b10      	ldr	r3, [pc, #64]	; (8015548 <ip_reass_dequeue_datagram+0x4c>)
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	687a      	ldr	r2, [r7, #4]
 801550c:	429a      	cmp	r2, r3
 801550e:	d104      	bne.n	801551a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	4a0c      	ldr	r2, [pc, #48]	; (8015548 <ip_reass_dequeue_datagram+0x4c>)
 8015516:	6013      	str	r3, [r2, #0]
 8015518:	e00d      	b.n	8015536 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801551a:	683b      	ldr	r3, [r7, #0]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d106      	bne.n	801552e <ip_reass_dequeue_datagram+0x32>
 8015520:	4b0a      	ldr	r3, [pc, #40]	; (801554c <ip_reass_dequeue_datagram+0x50>)
 8015522:	f240 1245 	movw	r2, #325	; 0x145
 8015526:	490a      	ldr	r1, [pc, #40]	; (8015550 <ip_reass_dequeue_datagram+0x54>)
 8015528:	480a      	ldr	r0, [pc, #40]	; (8015554 <ip_reass_dequeue_datagram+0x58>)
 801552a:	f004 fdcf 	bl	801a0cc <iprintf>
    prev->next = ipr->next;
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	681a      	ldr	r2, [r3, #0]
 8015532:	683b      	ldr	r3, [r7, #0]
 8015534:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015536:	6879      	ldr	r1, [r7, #4]
 8015538:	2004      	movs	r0, #4
 801553a:	f7f6 fc83 	bl	800be44 <memp_free>
}
 801553e:	bf00      	nop
 8015540:	3708      	adds	r7, #8
 8015542:	46bd      	mov	sp, r7
 8015544:	bd80      	pop	{r7, pc}
 8015546:	bf00      	nop
 8015548:	200115d0 	.word	0x200115d0
 801554c:	0801f990 	.word	0x0801f990
 8015550:	0801fa58 	.word	0x0801fa58
 8015554:	0801f9d8 	.word	0x0801f9d8

08015558 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b08c      	sub	sp, #48	; 0x30
 801555c:	af00      	add	r7, sp, #0
 801555e:	60f8      	str	r0, [r7, #12]
 8015560:	60b9      	str	r1, [r7, #8]
 8015562:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015564:	2300      	movs	r3, #0
 8015566:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015568:	2301      	movs	r3, #1
 801556a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801556c:	68bb      	ldr	r3, [r7, #8]
 801556e:	685b      	ldr	r3, [r3, #4]
 8015570:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015572:	69fb      	ldr	r3, [r7, #28]
 8015574:	885b      	ldrh	r3, [r3, #2]
 8015576:	b29b      	uxth	r3, r3
 8015578:	4618      	mov	r0, r3
 801557a:	f7f5 ff15 	bl	800b3a8 <lwip_htons>
 801557e:	4603      	mov	r3, r0
 8015580:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015582:	69fb      	ldr	r3, [r7, #28]
 8015584:	781b      	ldrb	r3, [r3, #0]
 8015586:	f003 030f 	and.w	r3, r3, #15
 801558a:	b2db      	uxtb	r3, r3
 801558c:	009b      	lsls	r3, r3, #2
 801558e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015590:	7e7b      	ldrb	r3, [r7, #25]
 8015592:	b29b      	uxth	r3, r3
 8015594:	8b7a      	ldrh	r2, [r7, #26]
 8015596:	429a      	cmp	r2, r3
 8015598:	d202      	bcs.n	80155a0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801559a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801559e:	e135      	b.n	801580c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80155a0:	7e7b      	ldrb	r3, [r7, #25]
 80155a2:	b29b      	uxth	r3, r3
 80155a4:	8b7a      	ldrh	r2, [r7, #26]
 80155a6:	1ad3      	subs	r3, r2, r3
 80155a8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80155aa:	69fb      	ldr	r3, [r7, #28]
 80155ac:	88db      	ldrh	r3, [r3, #6]
 80155ae:	b29b      	uxth	r3, r3
 80155b0:	4618      	mov	r0, r3
 80155b2:	f7f5 fef9 	bl	800b3a8 <lwip_htons>
 80155b6:	4603      	mov	r3, r0
 80155b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80155bc:	b29b      	uxth	r3, r3
 80155be:	00db      	lsls	r3, r3, #3
 80155c0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80155c2:	68bb      	ldr	r3, [r7, #8]
 80155c4:	685b      	ldr	r3, [r3, #4]
 80155c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80155c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155ca:	2200      	movs	r2, #0
 80155cc:	701a      	strb	r2, [r3, #0]
 80155ce:	2200      	movs	r2, #0
 80155d0:	705a      	strb	r2, [r3, #1]
 80155d2:	2200      	movs	r2, #0
 80155d4:	709a      	strb	r2, [r3, #2]
 80155d6:	2200      	movs	r2, #0
 80155d8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80155da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155dc:	8afa      	ldrh	r2, [r7, #22]
 80155de:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80155e0:	8afa      	ldrh	r2, [r7, #22]
 80155e2:	8b7b      	ldrh	r3, [r7, #26]
 80155e4:	4413      	add	r3, r2
 80155e6:	b29a      	uxth	r2, r3
 80155e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155ea:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80155ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155ee:	88db      	ldrh	r3, [r3, #6]
 80155f0:	b29b      	uxth	r3, r3
 80155f2:	8afa      	ldrh	r2, [r7, #22]
 80155f4:	429a      	cmp	r2, r3
 80155f6:	d902      	bls.n	80155fe <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80155f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80155fc:	e106      	b.n	801580c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	685b      	ldr	r3, [r3, #4]
 8015602:	627b      	str	r3, [r7, #36]	; 0x24
 8015604:	e068      	b.n	80156d8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015608:	685b      	ldr	r3, [r3, #4]
 801560a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801560c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801560e:	889b      	ldrh	r3, [r3, #4]
 8015610:	b29a      	uxth	r2, r3
 8015612:	693b      	ldr	r3, [r7, #16]
 8015614:	889b      	ldrh	r3, [r3, #4]
 8015616:	b29b      	uxth	r3, r3
 8015618:	429a      	cmp	r2, r3
 801561a:	d235      	bcs.n	8015688 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801561c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801561e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015620:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015624:	2b00      	cmp	r3, #0
 8015626:	d020      	beq.n	801566a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801562a:	889b      	ldrh	r3, [r3, #4]
 801562c:	b29a      	uxth	r2, r3
 801562e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015630:	88db      	ldrh	r3, [r3, #6]
 8015632:	b29b      	uxth	r3, r3
 8015634:	429a      	cmp	r2, r3
 8015636:	d307      	bcc.n	8015648 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801563a:	88db      	ldrh	r3, [r3, #6]
 801563c:	b29a      	uxth	r2, r3
 801563e:	693b      	ldr	r3, [r7, #16]
 8015640:	889b      	ldrh	r3, [r3, #4]
 8015642:	b29b      	uxth	r3, r3
 8015644:	429a      	cmp	r2, r3
 8015646:	d902      	bls.n	801564e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801564c:	e0de      	b.n	801580c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801564e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015650:	68ba      	ldr	r2, [r7, #8]
 8015652:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015656:	88db      	ldrh	r3, [r3, #6]
 8015658:	b29a      	uxth	r2, r3
 801565a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801565c:	889b      	ldrh	r3, [r3, #4]
 801565e:	b29b      	uxth	r3, r3
 8015660:	429a      	cmp	r2, r3
 8015662:	d03d      	beq.n	80156e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015664:	2300      	movs	r3, #0
 8015666:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015668:	e03a      	b.n	80156e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801566a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801566c:	88db      	ldrh	r3, [r3, #6]
 801566e:	b29a      	uxth	r2, r3
 8015670:	693b      	ldr	r3, [r7, #16]
 8015672:	889b      	ldrh	r3, [r3, #4]
 8015674:	b29b      	uxth	r3, r3
 8015676:	429a      	cmp	r2, r3
 8015678:	d902      	bls.n	8015680 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801567a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801567e:	e0c5      	b.n	801580c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	68ba      	ldr	r2, [r7, #8]
 8015684:	605a      	str	r2, [r3, #4]
      break;
 8015686:	e02b      	b.n	80156e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801568a:	889b      	ldrh	r3, [r3, #4]
 801568c:	b29a      	uxth	r2, r3
 801568e:	693b      	ldr	r3, [r7, #16]
 8015690:	889b      	ldrh	r3, [r3, #4]
 8015692:	b29b      	uxth	r3, r3
 8015694:	429a      	cmp	r2, r3
 8015696:	d102      	bne.n	801569e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801569c:	e0b6      	b.n	801580c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156a0:	889b      	ldrh	r3, [r3, #4]
 80156a2:	b29a      	uxth	r2, r3
 80156a4:	693b      	ldr	r3, [r7, #16]
 80156a6:	88db      	ldrh	r3, [r3, #6]
 80156a8:	b29b      	uxth	r3, r3
 80156aa:	429a      	cmp	r2, r3
 80156ac:	d202      	bcs.n	80156b4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80156ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80156b2:	e0ab      	b.n	801580c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80156b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d009      	beq.n	80156ce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80156ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156bc:	88db      	ldrh	r3, [r3, #6]
 80156be:	b29a      	uxth	r2, r3
 80156c0:	693b      	ldr	r3, [r7, #16]
 80156c2:	889b      	ldrh	r3, [r3, #4]
 80156c4:	b29b      	uxth	r3, r3
 80156c6:	429a      	cmp	r2, r3
 80156c8:	d001      	beq.n	80156ce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80156ca:	2300      	movs	r3, #0
 80156cc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80156ce:	693b      	ldr	r3, [r7, #16]
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80156d4:	693b      	ldr	r3, [r7, #16]
 80156d6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80156d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d193      	bne.n	8015606 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80156de:	e000      	b.n	80156e2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80156e0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80156e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d12d      	bne.n	8015744 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80156e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d01c      	beq.n	8015728 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80156ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156f0:	88db      	ldrh	r3, [r3, #6]
 80156f2:	b29a      	uxth	r2, r3
 80156f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156f6:	889b      	ldrh	r3, [r3, #4]
 80156f8:	b29b      	uxth	r3, r3
 80156fa:	429a      	cmp	r2, r3
 80156fc:	d906      	bls.n	801570c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80156fe:	4b45      	ldr	r3, [pc, #276]	; (8015814 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015700:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015704:	4944      	ldr	r1, [pc, #272]	; (8015818 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015706:	4845      	ldr	r0, [pc, #276]	; (801581c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015708:	f004 fce0 	bl	801a0cc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801570c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801570e:	68ba      	ldr	r2, [r7, #8]
 8015710:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015714:	88db      	ldrh	r3, [r3, #6]
 8015716:	b29a      	uxth	r2, r3
 8015718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801571a:	889b      	ldrh	r3, [r3, #4]
 801571c:	b29b      	uxth	r3, r3
 801571e:	429a      	cmp	r2, r3
 8015720:	d010      	beq.n	8015744 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015722:	2300      	movs	r3, #0
 8015724:	623b      	str	r3, [r7, #32]
 8015726:	e00d      	b.n	8015744 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	685b      	ldr	r3, [r3, #4]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d006      	beq.n	801573e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015730:	4b38      	ldr	r3, [pc, #224]	; (8015814 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015732:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015736:	493a      	ldr	r1, [pc, #232]	; (8015820 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015738:	4838      	ldr	r0, [pc, #224]	; (801581c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801573a:	f004 fcc7 	bl	801a0cc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	68ba      	ldr	r2, [r7, #8]
 8015742:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d105      	bne.n	8015756 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	7f9b      	ldrb	r3, [r3, #30]
 801574e:	f003 0301 	and.w	r3, r3, #1
 8015752:	2b00      	cmp	r3, #0
 8015754:	d059      	beq.n	801580a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015756:	6a3b      	ldr	r3, [r7, #32]
 8015758:	2b00      	cmp	r3, #0
 801575a:	d04f      	beq.n	80157fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	685b      	ldr	r3, [r3, #4]
 8015760:	2b00      	cmp	r3, #0
 8015762:	d006      	beq.n	8015772 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	685b      	ldr	r3, [r3, #4]
 8015768:	685b      	ldr	r3, [r3, #4]
 801576a:	889b      	ldrh	r3, [r3, #4]
 801576c:	b29b      	uxth	r3, r3
 801576e:	2b00      	cmp	r3, #0
 8015770:	d002      	beq.n	8015778 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015772:	2300      	movs	r3, #0
 8015774:	623b      	str	r3, [r7, #32]
 8015776:	e041      	b.n	80157fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801577a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801577c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015782:	e012      	b.n	80157aa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015786:	685b      	ldr	r3, [r3, #4]
 8015788:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801578c:	88db      	ldrh	r3, [r3, #6]
 801578e:	b29a      	uxth	r2, r3
 8015790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015792:	889b      	ldrh	r3, [r3, #4]
 8015794:	b29b      	uxth	r3, r3
 8015796:	429a      	cmp	r2, r3
 8015798:	d002      	beq.n	80157a0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801579a:	2300      	movs	r3, #0
 801579c:	623b      	str	r3, [r7, #32]
            break;
 801579e:	e007      	b.n	80157b0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80157a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157a2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80157a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80157aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d1e9      	bne.n	8015784 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80157b0:	6a3b      	ldr	r3, [r7, #32]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d022      	beq.n	80157fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	685b      	ldr	r3, [r3, #4]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d106      	bne.n	80157cc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80157be:	4b15      	ldr	r3, [pc, #84]	; (8015814 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80157c0:	f240 12df 	movw	r2, #479	; 0x1df
 80157c4:	4917      	ldr	r1, [pc, #92]	; (8015824 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80157c6:	4815      	ldr	r0, [pc, #84]	; (801581c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80157c8:	f004 fc80 	bl	801a0cc <iprintf>
          LWIP_ASSERT("sanity check",
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	685b      	ldr	r3, [r3, #4]
 80157d0:	685b      	ldr	r3, [r3, #4]
 80157d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80157d4:	429a      	cmp	r2, r3
 80157d6:	d106      	bne.n	80157e6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80157d8:	4b0e      	ldr	r3, [pc, #56]	; (8015814 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80157da:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80157de:	4911      	ldr	r1, [pc, #68]	; (8015824 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80157e0:	480e      	ldr	r0, [pc, #56]	; (801581c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80157e2:	f004 fc73 	bl	801a0cc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80157e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d006      	beq.n	80157fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80157ee:	4b09      	ldr	r3, [pc, #36]	; (8015814 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80157f0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80157f4:	490c      	ldr	r1, [pc, #48]	; (8015828 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80157f6:	4809      	ldr	r0, [pc, #36]	; (801581c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80157f8:	f004 fc68 	bl	801a0cc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80157fc:	6a3b      	ldr	r3, [r7, #32]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	bf14      	ite	ne
 8015802:	2301      	movne	r3, #1
 8015804:	2300      	moveq	r3, #0
 8015806:	b2db      	uxtb	r3, r3
 8015808:	e000      	b.n	801580c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801580a:	2300      	movs	r3, #0
}
 801580c:	4618      	mov	r0, r3
 801580e:	3730      	adds	r7, #48	; 0x30
 8015810:	46bd      	mov	sp, r7
 8015812:	bd80      	pop	{r7, pc}
 8015814:	0801f990 	.word	0x0801f990
 8015818:	0801fa74 	.word	0x0801fa74
 801581c:	0801f9d8 	.word	0x0801f9d8
 8015820:	0801fa94 	.word	0x0801fa94
 8015824:	0801facc 	.word	0x0801facc
 8015828:	0801fadc 	.word	0x0801fadc

0801582c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801582c:	b580      	push	{r7, lr}
 801582e:	b08e      	sub	sp, #56	; 0x38
 8015830:	af00      	add	r7, sp, #0
 8015832:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	685b      	ldr	r3, [r3, #4]
 8015838:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801583c:	781b      	ldrb	r3, [r3, #0]
 801583e:	f003 030f 	and.w	r3, r3, #15
 8015842:	b2db      	uxtb	r3, r3
 8015844:	009b      	lsls	r3, r3, #2
 8015846:	b2db      	uxtb	r3, r3
 8015848:	2b14      	cmp	r3, #20
 801584a:	f040 8171 	bne.w	8015b30 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801584e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015850:	88db      	ldrh	r3, [r3, #6]
 8015852:	b29b      	uxth	r3, r3
 8015854:	4618      	mov	r0, r3
 8015856:	f7f5 fda7 	bl	800b3a8 <lwip_htons>
 801585a:	4603      	mov	r3, r0
 801585c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015860:	b29b      	uxth	r3, r3
 8015862:	00db      	lsls	r3, r3, #3
 8015864:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015868:	885b      	ldrh	r3, [r3, #2]
 801586a:	b29b      	uxth	r3, r3
 801586c:	4618      	mov	r0, r3
 801586e:	f7f5 fd9b 	bl	800b3a8 <lwip_htons>
 8015872:	4603      	mov	r3, r0
 8015874:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015878:	781b      	ldrb	r3, [r3, #0]
 801587a:	f003 030f 	and.w	r3, r3, #15
 801587e:	b2db      	uxtb	r3, r3
 8015880:	009b      	lsls	r3, r3, #2
 8015882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015886:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801588a:	b29b      	uxth	r3, r3
 801588c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801588e:	429a      	cmp	r2, r3
 8015890:	f0c0 8150 	bcc.w	8015b34 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015894:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015898:	b29b      	uxth	r3, r3
 801589a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801589c:	1ad3      	subs	r3, r2, r3
 801589e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80158a0:	6878      	ldr	r0, [r7, #4]
 80158a2:	f7f7 fa01 	bl	800cca8 <pbuf_clen>
 80158a6:	4603      	mov	r3, r0
 80158a8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80158aa:	4b8c      	ldr	r3, [pc, #560]	; (8015adc <ip4_reass+0x2b0>)
 80158ac:	881b      	ldrh	r3, [r3, #0]
 80158ae:	461a      	mov	r2, r3
 80158b0:	8c3b      	ldrh	r3, [r7, #32]
 80158b2:	4413      	add	r3, r2
 80158b4:	2b0a      	cmp	r3, #10
 80158b6:	dd10      	ble.n	80158da <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80158b8:	8c3b      	ldrh	r3, [r7, #32]
 80158ba:	4619      	mov	r1, r3
 80158bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80158be:	f7ff fd81 	bl	80153c4 <ip_reass_remove_oldest_datagram>
 80158c2:	4603      	mov	r3, r0
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	f000 8137 	beq.w	8015b38 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80158ca:	4b84      	ldr	r3, [pc, #528]	; (8015adc <ip4_reass+0x2b0>)
 80158cc:	881b      	ldrh	r3, [r3, #0]
 80158ce:	461a      	mov	r2, r3
 80158d0:	8c3b      	ldrh	r3, [r7, #32]
 80158d2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80158d4:	2b0a      	cmp	r3, #10
 80158d6:	f300 812f 	bgt.w	8015b38 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80158da:	4b81      	ldr	r3, [pc, #516]	; (8015ae0 <ip4_reass+0x2b4>)
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	633b      	str	r3, [r7, #48]	; 0x30
 80158e0:	e015      	b.n	801590e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80158e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158e4:	695a      	ldr	r2, [r3, #20]
 80158e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158e8:	68db      	ldr	r3, [r3, #12]
 80158ea:	429a      	cmp	r2, r3
 80158ec:	d10c      	bne.n	8015908 <ip4_reass+0xdc>
 80158ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158f0:	699a      	ldr	r2, [r3, #24]
 80158f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158f4:	691b      	ldr	r3, [r3, #16]
 80158f6:	429a      	cmp	r2, r3
 80158f8:	d106      	bne.n	8015908 <ip4_reass+0xdc>
 80158fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158fc:	899a      	ldrh	r2, [r3, #12]
 80158fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015900:	889b      	ldrh	r3, [r3, #4]
 8015902:	b29b      	uxth	r3, r3
 8015904:	429a      	cmp	r2, r3
 8015906:	d006      	beq.n	8015916 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	633b      	str	r3, [r7, #48]	; 0x30
 801590e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015910:	2b00      	cmp	r3, #0
 8015912:	d1e6      	bne.n	80158e2 <ip4_reass+0xb6>
 8015914:	e000      	b.n	8015918 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015916:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801591a:	2b00      	cmp	r3, #0
 801591c:	d109      	bne.n	8015932 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801591e:	8c3b      	ldrh	r3, [r7, #32]
 8015920:	4619      	mov	r1, r3
 8015922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015924:	f7ff fdb0 	bl	8015488 <ip_reass_enqueue_new_datagram>
 8015928:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801592c:	2b00      	cmp	r3, #0
 801592e:	d11c      	bne.n	801596a <ip4_reass+0x13e>
      goto nullreturn;
 8015930:	e105      	b.n	8015b3e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015934:	88db      	ldrh	r3, [r3, #6]
 8015936:	b29b      	uxth	r3, r3
 8015938:	4618      	mov	r0, r3
 801593a:	f7f5 fd35 	bl	800b3a8 <lwip_htons>
 801593e:	4603      	mov	r3, r0
 8015940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015944:	2b00      	cmp	r3, #0
 8015946:	d110      	bne.n	801596a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801594a:	89db      	ldrh	r3, [r3, #14]
 801594c:	4618      	mov	r0, r3
 801594e:	f7f5 fd2b 	bl	800b3a8 <lwip_htons>
 8015952:	4603      	mov	r3, r0
 8015954:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015958:	2b00      	cmp	r3, #0
 801595a:	d006      	beq.n	801596a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801595c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801595e:	3308      	adds	r3, #8
 8015960:	2214      	movs	r2, #20
 8015962:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015964:	4618      	mov	r0, r3
 8015966:	f003 ff3f 	bl	80197e8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801596c:	88db      	ldrh	r3, [r3, #6]
 801596e:	b29b      	uxth	r3, r3
 8015970:	f003 0320 	and.w	r3, r3, #32
 8015974:	2b00      	cmp	r3, #0
 8015976:	bf0c      	ite	eq
 8015978:	2301      	moveq	r3, #1
 801597a:	2300      	movne	r3, #0
 801597c:	b2db      	uxtb	r3, r3
 801597e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015980:	69fb      	ldr	r3, [r7, #28]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d00e      	beq.n	80159a4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015986:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015988:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801598a:	4413      	add	r3, r2
 801598c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801598e:	8b7a      	ldrh	r2, [r7, #26]
 8015990:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015992:	429a      	cmp	r2, r3
 8015994:	f0c0 80a0 	bcc.w	8015ad8 <ip4_reass+0x2ac>
 8015998:	8b7b      	ldrh	r3, [r7, #26]
 801599a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801599e:	4293      	cmp	r3, r2
 80159a0:	f200 809a 	bhi.w	8015ad8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80159a4:	69fa      	ldr	r2, [r7, #28]
 80159a6:	6879      	ldr	r1, [r7, #4]
 80159a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80159aa:	f7ff fdd5 	bl	8015558 <ip_reass_chain_frag_into_datagram_and_validate>
 80159ae:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80159b0:	697b      	ldr	r3, [r7, #20]
 80159b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80159b6:	f000 809b 	beq.w	8015af0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80159ba:	4b48      	ldr	r3, [pc, #288]	; (8015adc <ip4_reass+0x2b0>)
 80159bc:	881a      	ldrh	r2, [r3, #0]
 80159be:	8c3b      	ldrh	r3, [r7, #32]
 80159c0:	4413      	add	r3, r2
 80159c2:	b29a      	uxth	r2, r3
 80159c4:	4b45      	ldr	r3, [pc, #276]	; (8015adc <ip4_reass+0x2b0>)
 80159c6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80159c8:	69fb      	ldr	r3, [r7, #28]
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d00d      	beq.n	80159ea <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80159ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80159d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80159d2:	4413      	add	r3, r2
 80159d4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80159d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159d8:	8a7a      	ldrh	r2, [r7, #18]
 80159da:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80159dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159de:	7f9b      	ldrb	r3, [r3, #30]
 80159e0:	f043 0301 	orr.w	r3, r3, #1
 80159e4:	b2da      	uxtb	r2, r3
 80159e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159e8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80159ea:	697b      	ldr	r3, [r7, #20]
 80159ec:	2b01      	cmp	r3, #1
 80159ee:	d171      	bne.n	8015ad4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80159f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159f2:	8b9b      	ldrh	r3, [r3, #28]
 80159f4:	3314      	adds	r3, #20
 80159f6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80159f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159fa:	685b      	ldr	r3, [r3, #4]
 80159fc:	685b      	ldr	r3, [r3, #4]
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a04:	685b      	ldr	r3, [r3, #4]
 8015a06:	685b      	ldr	r3, [r3, #4]
 8015a08:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a0c:	3308      	adds	r3, #8
 8015a0e:	2214      	movs	r2, #20
 8015a10:	4619      	mov	r1, r3
 8015a12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015a14:	f003 fee8 	bl	80197e8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015a18:	8a3b      	ldrh	r3, [r7, #16]
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	f7f5 fcc4 	bl	800b3a8 <lwip_htons>
 8015a20:	4603      	mov	r3, r0
 8015a22:	461a      	mov	r2, r3
 8015a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a26:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	719a      	strb	r2, [r3, #6]
 8015a2e:	2200      	movs	r2, #0
 8015a30:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a34:	2200      	movs	r2, #0
 8015a36:	729a      	strb	r2, [r3, #10]
 8015a38:	2200      	movs	r2, #0
 8015a3a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a3e:	685b      	ldr	r3, [r3, #4]
 8015a40:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015a42:	e00d      	b.n	8015a60 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a46:	685b      	ldr	r3, [r3, #4]
 8015a48:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015a4a:	2114      	movs	r1, #20
 8015a4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015a4e:	f7f7 f817 	bl	800ca80 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015a52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015a54:	6878      	ldr	r0, [r7, #4]
 8015a56:	f7f7 f967 	bl	800cd28 <pbuf_cat>
      r = iprh->next_pbuf;
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d1ee      	bne.n	8015a44 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015a66:	4b1e      	ldr	r3, [pc, #120]	; (8015ae0 <ip4_reass+0x2b4>)
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a6c:	429a      	cmp	r2, r3
 8015a6e:	d102      	bne.n	8015a76 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015a70:	2300      	movs	r3, #0
 8015a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015a74:	e010      	b.n	8015a98 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015a76:	4b1a      	ldr	r3, [pc, #104]	; (8015ae0 <ip4_reass+0x2b4>)
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015a7c:	e007      	b.n	8015a8e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a84:	429a      	cmp	r2, r3
 8015a86:	d006      	beq.n	8015a96 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d1f4      	bne.n	8015a7e <ip4_reass+0x252>
 8015a94:	e000      	b.n	8015a98 <ip4_reass+0x26c>
          break;
 8015a96:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015a98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015a9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015a9c:	f7ff fd2e 	bl	80154fc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015aa0:	6878      	ldr	r0, [r7, #4]
 8015aa2:	f7f7 f901 	bl	800cca8 <pbuf_clen>
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015aaa:	4b0c      	ldr	r3, [pc, #48]	; (8015adc <ip4_reass+0x2b0>)
 8015aac:	881b      	ldrh	r3, [r3, #0]
 8015aae:	8c3a      	ldrh	r2, [r7, #32]
 8015ab0:	429a      	cmp	r2, r3
 8015ab2:	d906      	bls.n	8015ac2 <ip4_reass+0x296>
 8015ab4:	4b0b      	ldr	r3, [pc, #44]	; (8015ae4 <ip4_reass+0x2b8>)
 8015ab6:	f240 229b 	movw	r2, #667	; 0x29b
 8015aba:	490b      	ldr	r1, [pc, #44]	; (8015ae8 <ip4_reass+0x2bc>)
 8015abc:	480b      	ldr	r0, [pc, #44]	; (8015aec <ip4_reass+0x2c0>)
 8015abe:	f004 fb05 	bl	801a0cc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015ac2:	4b06      	ldr	r3, [pc, #24]	; (8015adc <ip4_reass+0x2b0>)
 8015ac4:	881a      	ldrh	r2, [r3, #0]
 8015ac6:	8c3b      	ldrh	r3, [r7, #32]
 8015ac8:	1ad3      	subs	r3, r2, r3
 8015aca:	b29a      	uxth	r2, r3
 8015acc:	4b03      	ldr	r3, [pc, #12]	; (8015adc <ip4_reass+0x2b0>)
 8015ace:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	e038      	b.n	8015b46 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	e036      	b.n	8015b46 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015ad8:	bf00      	nop
 8015ada:	e00a      	b.n	8015af2 <ip4_reass+0x2c6>
 8015adc:	200115d4 	.word	0x200115d4
 8015ae0:	200115d0 	.word	0x200115d0
 8015ae4:	0801f990 	.word	0x0801f990
 8015ae8:	0801fb00 	.word	0x0801fb00
 8015aec:	0801f9d8 	.word	0x0801f9d8
    goto nullreturn_ipr;
 8015af0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d106      	bne.n	8015b06 <ip4_reass+0x2da>
 8015af8:	4b15      	ldr	r3, [pc, #84]	; (8015b50 <ip4_reass+0x324>)
 8015afa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015afe:	4915      	ldr	r1, [pc, #84]	; (8015b54 <ip4_reass+0x328>)
 8015b00:	4815      	ldr	r0, [pc, #84]	; (8015b58 <ip4_reass+0x32c>)
 8015b02:	f004 fae3 	bl	801a0cc <iprintf>
  if (ipr->p == NULL) {
 8015b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b08:	685b      	ldr	r3, [r3, #4]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d116      	bne.n	8015b3c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015b0e:	4b13      	ldr	r3, [pc, #76]	; (8015b5c <ip4_reass+0x330>)
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b14:	429a      	cmp	r2, r3
 8015b16:	d006      	beq.n	8015b26 <ip4_reass+0x2fa>
 8015b18:	4b0d      	ldr	r3, [pc, #52]	; (8015b50 <ip4_reass+0x324>)
 8015b1a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015b1e:	4910      	ldr	r1, [pc, #64]	; (8015b60 <ip4_reass+0x334>)
 8015b20:	480d      	ldr	r0, [pc, #52]	; (8015b58 <ip4_reass+0x32c>)
 8015b22:	f004 fad3 	bl	801a0cc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015b26:	2100      	movs	r1, #0
 8015b28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b2a:	f7ff fce7 	bl	80154fc <ip_reass_dequeue_datagram>
 8015b2e:	e006      	b.n	8015b3e <ip4_reass+0x312>
    goto nullreturn;
 8015b30:	bf00      	nop
 8015b32:	e004      	b.n	8015b3e <ip4_reass+0x312>
    goto nullreturn;
 8015b34:	bf00      	nop
 8015b36:	e002      	b.n	8015b3e <ip4_reass+0x312>
      goto nullreturn;
 8015b38:	bf00      	nop
 8015b3a:	e000      	b.n	8015b3e <ip4_reass+0x312>
  }

nullreturn:
 8015b3c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015b3e:	6878      	ldr	r0, [r7, #4]
 8015b40:	f7f7 f824 	bl	800cb8c <pbuf_free>
  return NULL;
 8015b44:	2300      	movs	r3, #0
}
 8015b46:	4618      	mov	r0, r3
 8015b48:	3738      	adds	r7, #56	; 0x38
 8015b4a:	46bd      	mov	sp, r7
 8015b4c:	bd80      	pop	{r7, pc}
 8015b4e:	bf00      	nop
 8015b50:	0801f990 	.word	0x0801f990
 8015b54:	0801fb1c 	.word	0x0801fb1c
 8015b58:	0801f9d8 	.word	0x0801f9d8
 8015b5c:	200115d0 	.word	0x200115d0
 8015b60:	0801fb28 	.word	0x0801fb28

08015b64 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015b64:	b580      	push	{r7, lr}
 8015b66:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015b68:	2005      	movs	r0, #5
 8015b6a:	f7f6 f8f5 	bl	800bd58 <memp_malloc>
 8015b6e:	4603      	mov	r3, r0
}
 8015b70:	4618      	mov	r0, r3
 8015b72:	bd80      	pop	{r7, pc}

08015b74 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015b74:	b580      	push	{r7, lr}
 8015b76:	b082      	sub	sp, #8
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d106      	bne.n	8015b90 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015b82:	4b07      	ldr	r3, [pc, #28]	; (8015ba0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015b84:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015b88:	4906      	ldr	r1, [pc, #24]	; (8015ba4 <ip_frag_free_pbuf_custom_ref+0x30>)
 8015b8a:	4807      	ldr	r0, [pc, #28]	; (8015ba8 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015b8c:	f004 fa9e 	bl	801a0cc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015b90:	6879      	ldr	r1, [r7, #4]
 8015b92:	2005      	movs	r0, #5
 8015b94:	f7f6 f956 	bl	800be44 <memp_free>
}
 8015b98:	bf00      	nop
 8015b9a:	3708      	adds	r7, #8
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	bd80      	pop	{r7, pc}
 8015ba0:	0801f990 	.word	0x0801f990
 8015ba4:	0801fb48 	.word	0x0801fb48
 8015ba8:	0801f9d8 	.word	0x0801f9d8

08015bac <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b084      	sub	sp, #16
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d106      	bne.n	8015bcc <ipfrag_free_pbuf_custom+0x20>
 8015bbe:	4b11      	ldr	r3, [pc, #68]	; (8015c04 <ipfrag_free_pbuf_custom+0x58>)
 8015bc0:	f240 22ce 	movw	r2, #718	; 0x2ce
 8015bc4:	4910      	ldr	r1, [pc, #64]	; (8015c08 <ipfrag_free_pbuf_custom+0x5c>)
 8015bc6:	4811      	ldr	r0, [pc, #68]	; (8015c0c <ipfrag_free_pbuf_custom+0x60>)
 8015bc8:	f004 fa80 	bl	801a0cc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015bcc:	68fa      	ldr	r2, [r7, #12]
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	429a      	cmp	r2, r3
 8015bd2:	d006      	beq.n	8015be2 <ipfrag_free_pbuf_custom+0x36>
 8015bd4:	4b0b      	ldr	r3, [pc, #44]	; (8015c04 <ipfrag_free_pbuf_custom+0x58>)
 8015bd6:	f240 22cf 	movw	r2, #719	; 0x2cf
 8015bda:	490d      	ldr	r1, [pc, #52]	; (8015c10 <ipfrag_free_pbuf_custom+0x64>)
 8015bdc:	480b      	ldr	r0, [pc, #44]	; (8015c0c <ipfrag_free_pbuf_custom+0x60>)
 8015bde:	f004 fa75 	bl	801a0cc <iprintf>
  if (pcr->original != NULL) {
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	695b      	ldr	r3, [r3, #20]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d004      	beq.n	8015bf4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	695b      	ldr	r3, [r3, #20]
 8015bee:	4618      	mov	r0, r3
 8015bf0:	f7f6 ffcc 	bl	800cb8c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015bf4:	68f8      	ldr	r0, [r7, #12]
 8015bf6:	f7ff ffbd 	bl	8015b74 <ip_frag_free_pbuf_custom_ref>
}
 8015bfa:	bf00      	nop
 8015bfc:	3710      	adds	r7, #16
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	bd80      	pop	{r7, pc}
 8015c02:	bf00      	nop
 8015c04:	0801f990 	.word	0x0801f990
 8015c08:	0801fb54 	.word	0x0801fb54
 8015c0c:	0801f9d8 	.word	0x0801f9d8
 8015c10:	0801fb60 	.word	0x0801fb60

08015c14 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015c14:	b580      	push	{r7, lr}
 8015c16:	b094      	sub	sp, #80	; 0x50
 8015c18:	af02      	add	r7, sp, #8
 8015c1a:	60f8      	str	r0, [r7, #12]
 8015c1c:	60b9      	str	r1, [r7, #8]
 8015c1e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015c20:	2300      	movs	r3, #0
 8015c22:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015c26:	68bb      	ldr	r3, [r7, #8]
 8015c28:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015c2a:	3b14      	subs	r3, #20
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	da00      	bge.n	8015c32 <ip4_frag+0x1e>
 8015c30:	3307      	adds	r3, #7
 8015c32:	10db      	asrs	r3, r3, #3
 8015c34:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015c36:	2314      	movs	r3, #20
 8015c38:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	685b      	ldr	r3, [r3, #4]
 8015c3e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c42:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c46:	781b      	ldrb	r3, [r3, #0]
 8015c48:	f003 030f 	and.w	r3, r3, #15
 8015c4c:	b2db      	uxtb	r3, r3
 8015c4e:	009b      	lsls	r3, r3, #2
 8015c50:	b2db      	uxtb	r3, r3
 8015c52:	2b14      	cmp	r3, #20
 8015c54:	d002      	beq.n	8015c5c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015c56:	f06f 0305 	mvn.w	r3, #5
 8015c5a:	e110      	b.n	8015e7e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	895b      	ldrh	r3, [r3, #10]
 8015c60:	2b13      	cmp	r3, #19
 8015c62:	d809      	bhi.n	8015c78 <ip4_frag+0x64>
 8015c64:	4b88      	ldr	r3, [pc, #544]	; (8015e88 <ip4_frag+0x274>)
 8015c66:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015c6a:	4988      	ldr	r1, [pc, #544]	; (8015e8c <ip4_frag+0x278>)
 8015c6c:	4888      	ldr	r0, [pc, #544]	; (8015e90 <ip4_frag+0x27c>)
 8015c6e:	f004 fa2d 	bl	801a0cc <iprintf>
 8015c72:	f06f 0305 	mvn.w	r3, #5
 8015c76:	e102      	b.n	8015e7e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c7a:	88db      	ldrh	r3, [r3, #6]
 8015c7c:	b29b      	uxth	r3, r3
 8015c7e:	4618      	mov	r0, r3
 8015c80:	f7f5 fb92 	bl	800b3a8 <lwip_htons>
 8015c84:	4603      	mov	r3, r0
 8015c86:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015c88:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015c8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015c8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015c92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015c94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015c98:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	891b      	ldrh	r3, [r3, #8]
 8015c9e:	3b14      	subs	r3, #20
 8015ca0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015ca4:	e0e1      	b.n	8015e6a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015ca6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015ca8:	00db      	lsls	r3, r3, #3
 8015caa:	b29b      	uxth	r3, r3
 8015cac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015cb0:	4293      	cmp	r3, r2
 8015cb2:	bf28      	it	cs
 8015cb4:	4613      	movcs	r3, r2
 8015cb6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015cb8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015cbc:	2114      	movs	r1, #20
 8015cbe:	200e      	movs	r0, #14
 8015cc0:	f7f6 fc80 	bl	800c5c4 <pbuf_alloc>
 8015cc4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8015cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	f000 80d5 	beq.w	8015e78 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cd0:	895b      	ldrh	r3, [r3, #10]
 8015cd2:	2b13      	cmp	r3, #19
 8015cd4:	d806      	bhi.n	8015ce4 <ip4_frag+0xd0>
 8015cd6:	4b6c      	ldr	r3, [pc, #432]	; (8015e88 <ip4_frag+0x274>)
 8015cd8:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015cdc:	496d      	ldr	r1, [pc, #436]	; (8015e94 <ip4_frag+0x280>)
 8015cde:	486c      	ldr	r0, [pc, #432]	; (8015e90 <ip4_frag+0x27c>)
 8015ce0:	f004 f9f4 	bl	801a0cc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ce6:	685b      	ldr	r3, [r3, #4]
 8015ce8:	2214      	movs	r2, #20
 8015cea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015cec:	4618      	mov	r0, r3
 8015cee:	f003 fd7b 	bl	80197e8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cf4:	685b      	ldr	r3, [r3, #4]
 8015cf6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015cf8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015cfa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015cfe:	e064      	b.n	8015dca <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	895a      	ldrh	r2, [r3, #10]
 8015d04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015d06:	1ad3      	subs	r3, r2, r3
 8015d08:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	895b      	ldrh	r3, [r3, #10]
 8015d0e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015d10:	429a      	cmp	r2, r3
 8015d12:	d906      	bls.n	8015d22 <ip4_frag+0x10e>
 8015d14:	4b5c      	ldr	r3, [pc, #368]	; (8015e88 <ip4_frag+0x274>)
 8015d16:	f240 322d 	movw	r2, #813	; 0x32d
 8015d1a:	495f      	ldr	r1, [pc, #380]	; (8015e98 <ip4_frag+0x284>)
 8015d1c:	485c      	ldr	r0, [pc, #368]	; (8015e90 <ip4_frag+0x27c>)
 8015d1e:	f004 f9d5 	bl	801a0cc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015d22:	8bfa      	ldrh	r2, [r7, #30]
 8015d24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015d28:	4293      	cmp	r3, r2
 8015d2a:	bf28      	it	cs
 8015d2c:	4613      	movcs	r3, r2
 8015d2e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015d32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d105      	bne.n	8015d46 <ip4_frag+0x132>
        poff = 0;
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	60fb      	str	r3, [r7, #12]
        continue;
 8015d44:	e041      	b.n	8015dca <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015d46:	f7ff ff0d 	bl	8015b64 <ip_frag_alloc_pbuf_custom_ref>
 8015d4a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015d4c:	69bb      	ldr	r3, [r7, #24]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d103      	bne.n	8015d5a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015d52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015d54:	f7f6 ff1a 	bl	800cb8c <pbuf_free>
        goto memerr;
 8015d58:	e08f      	b.n	8015e7a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015d5a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015d60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015d62:	4413      	add	r3, r2
 8015d64:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015d68:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015d6c:	9201      	str	r2, [sp, #4]
 8015d6e:	9300      	str	r3, [sp, #0]
 8015d70:	4603      	mov	r3, r0
 8015d72:	2241      	movs	r2, #65	; 0x41
 8015d74:	2000      	movs	r0, #0
 8015d76:	f7f6 fd4f 	bl	800c818 <pbuf_alloced_custom>
 8015d7a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015d7c:	697b      	ldr	r3, [r7, #20]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d106      	bne.n	8015d90 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015d82:	69b8      	ldr	r0, [r7, #24]
 8015d84:	f7ff fef6 	bl	8015b74 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015d88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015d8a:	f7f6 feff 	bl	800cb8c <pbuf_free>
        goto memerr;
 8015d8e:	e074      	b.n	8015e7a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015d90:	68f8      	ldr	r0, [r7, #12]
 8015d92:	f7f6 ffa1 	bl	800ccd8 <pbuf_ref>
      pcr->original = p;
 8015d96:	69bb      	ldr	r3, [r7, #24]
 8015d98:	68fa      	ldr	r2, [r7, #12]
 8015d9a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015d9c:	69bb      	ldr	r3, [r7, #24]
 8015d9e:	4a3f      	ldr	r2, [pc, #252]	; (8015e9c <ip4_frag+0x288>)
 8015da0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015da2:	6979      	ldr	r1, [r7, #20]
 8015da4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015da6:	f7f6 ffbf 	bl	800cd28 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015daa:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015dae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015db2:	1ad3      	subs	r3, r2, r3
 8015db4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015db8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d004      	beq.n	8015dca <ip4_frag+0x1b6>
        poff = 0;
 8015dc0:	2300      	movs	r3, #0
 8015dc2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015dca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d196      	bne.n	8015d00 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015dd2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015dd4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015dd8:	4413      	add	r3, r2
 8015dda:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015ddc:	68bb      	ldr	r3, [r7, #8]
 8015dde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015de0:	f1a3 0213 	sub.w	r2, r3, #19
 8015de4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015de8:	429a      	cmp	r2, r3
 8015dea:	bfcc      	ite	gt
 8015dec:	2301      	movgt	r3, #1
 8015dee:	2300      	movle	r3, #0
 8015df0:	b2db      	uxtb	r3, r3
 8015df2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015df4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015df8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015dfc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8015dfe:	6a3b      	ldr	r3, [r7, #32]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d002      	beq.n	8015e0a <ip4_frag+0x1f6>
 8015e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d003      	beq.n	8015e12 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015e0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015e0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015e10:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015e12:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015e14:	4618      	mov	r0, r3
 8015e16:	f7f5 fac7 	bl	800b3a8 <lwip_htons>
 8015e1a:	4603      	mov	r3, r0
 8015e1c:	461a      	mov	r2, r3
 8015e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e20:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015e22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015e24:	3314      	adds	r3, #20
 8015e26:	b29b      	uxth	r3, r3
 8015e28:	4618      	mov	r0, r3
 8015e2a:	f7f5 fabd 	bl	800b3a8 <lwip_htons>
 8015e2e:	4603      	mov	r3, r0
 8015e30:	461a      	mov	r2, r3
 8015e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e34:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e38:	2200      	movs	r2, #0
 8015e3a:	729a      	strb	r2, [r3, #10]
 8015e3c:	2200      	movs	r2, #0
 8015e3e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015e40:	68bb      	ldr	r3, [r7, #8]
 8015e42:	695b      	ldr	r3, [r3, #20]
 8015e44:	687a      	ldr	r2, [r7, #4]
 8015e46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015e48:	68b8      	ldr	r0, [r7, #8]
 8015e4a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015e4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015e4e:	f7f6 fe9d 	bl	800cb8c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015e52:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015e56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015e58:	1ad3      	subs	r3, r2, r3
 8015e5a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8015e5e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015e62:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e64:	4413      	add	r3, r2
 8015e66:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8015e6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	f47f af19 	bne.w	8015ca6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015e74:	2300      	movs	r3, #0
 8015e76:	e002      	b.n	8015e7e <ip4_frag+0x26a>
      goto memerr;
 8015e78:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015e7e:	4618      	mov	r0, r3
 8015e80:	3748      	adds	r7, #72	; 0x48
 8015e82:	46bd      	mov	sp, r7
 8015e84:	bd80      	pop	{r7, pc}
 8015e86:	bf00      	nop
 8015e88:	0801f990 	.word	0x0801f990
 8015e8c:	0801fb6c 	.word	0x0801fb6c
 8015e90:	0801f9d8 	.word	0x0801f9d8
 8015e94:	0801fb88 	.word	0x0801fb88
 8015e98:	0801fba8 	.word	0x0801fba8
 8015e9c:	08015bad 	.word	0x08015bad

08015ea0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015ea0:	b580      	push	{r7, lr}
 8015ea2:	b086      	sub	sp, #24
 8015ea4:	af00      	add	r7, sp, #0
 8015ea6:	6078      	str	r0, [r7, #4]
 8015ea8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015eaa:	230e      	movs	r3, #14
 8015eac:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	895b      	ldrh	r3, [r3, #10]
 8015eb2:	2b0e      	cmp	r3, #14
 8015eb4:	d96e      	bls.n	8015f94 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	7bdb      	ldrb	r3, [r3, #15]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d106      	bne.n	8015ecc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015ebe:	683b      	ldr	r3, [r7, #0]
 8015ec0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015ec4:	3301      	adds	r3, #1
 8015ec6:	b2da      	uxtb	r2, r3
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	685b      	ldr	r3, [r3, #4]
 8015ed0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015ed2:	693b      	ldr	r3, [r7, #16]
 8015ed4:	7b1a      	ldrb	r2, [r3, #12]
 8015ed6:	7b5b      	ldrb	r3, [r3, #13]
 8015ed8:	021b      	lsls	r3, r3, #8
 8015eda:	4313      	orrs	r3, r2
 8015edc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015ede:	693b      	ldr	r3, [r7, #16]
 8015ee0:	781b      	ldrb	r3, [r3, #0]
 8015ee2:	f003 0301 	and.w	r3, r3, #1
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d023      	beq.n	8015f32 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015eea:	693b      	ldr	r3, [r7, #16]
 8015eec:	781b      	ldrb	r3, [r3, #0]
 8015eee:	2b01      	cmp	r3, #1
 8015ef0:	d10f      	bne.n	8015f12 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015ef2:	693b      	ldr	r3, [r7, #16]
 8015ef4:	785b      	ldrb	r3, [r3, #1]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d11b      	bne.n	8015f32 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015efa:	693b      	ldr	r3, [r7, #16]
 8015efc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015efe:	2b5e      	cmp	r3, #94	; 0x5e
 8015f00:	d117      	bne.n	8015f32 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	7b5b      	ldrb	r3, [r3, #13]
 8015f06:	f043 0310 	orr.w	r3, r3, #16
 8015f0a:	b2da      	uxtb	r2, r3
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	735a      	strb	r2, [r3, #13]
 8015f10:	e00f      	b.n	8015f32 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015f12:	693b      	ldr	r3, [r7, #16]
 8015f14:	2206      	movs	r2, #6
 8015f16:	4928      	ldr	r1, [pc, #160]	; (8015fb8 <ethernet_input+0x118>)
 8015f18:	4618      	mov	r0, r3
 8015f1a:	f003 fc55 	bl	80197c8 <memcmp>
 8015f1e:	4603      	mov	r3, r0
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d106      	bne.n	8015f32 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	7b5b      	ldrb	r3, [r3, #13]
 8015f28:	f043 0308 	orr.w	r3, r3, #8
 8015f2c:	b2da      	uxtb	r2, r3
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015f32:	89fb      	ldrh	r3, [r7, #14]
 8015f34:	2b08      	cmp	r3, #8
 8015f36:	d003      	beq.n	8015f40 <ethernet_input+0xa0>
 8015f38:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015f3c:	d014      	beq.n	8015f68 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015f3e:	e032      	b.n	8015fa6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015f40:	683b      	ldr	r3, [r7, #0]
 8015f42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f46:	f003 0308 	and.w	r3, r3, #8
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d024      	beq.n	8015f98 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015f4e:	8afb      	ldrh	r3, [r7, #22]
 8015f50:	4619      	mov	r1, r3
 8015f52:	6878      	ldr	r0, [r7, #4]
 8015f54:	f7f6 fd94 	bl	800ca80 <pbuf_remove_header>
 8015f58:	4603      	mov	r3, r0
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d11e      	bne.n	8015f9c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015f5e:	6839      	ldr	r1, [r7, #0]
 8015f60:	6878      	ldr	r0, [r7, #4]
 8015f62:	f7fe ff21 	bl	8014da8 <ip4_input>
      break;
 8015f66:	e013      	b.n	8015f90 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015f68:	683b      	ldr	r3, [r7, #0]
 8015f6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f6e:	f003 0308 	and.w	r3, r3, #8
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d014      	beq.n	8015fa0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015f76:	8afb      	ldrh	r3, [r7, #22]
 8015f78:	4619      	mov	r1, r3
 8015f7a:	6878      	ldr	r0, [r7, #4]
 8015f7c:	f7f6 fd80 	bl	800ca80 <pbuf_remove_header>
 8015f80:	4603      	mov	r3, r0
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d10e      	bne.n	8015fa4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015f86:	6839      	ldr	r1, [r7, #0]
 8015f88:	6878      	ldr	r0, [r7, #4]
 8015f8a:	f7fe f8c1 	bl	8014110 <etharp_input>
      break;
 8015f8e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015f90:	2300      	movs	r3, #0
 8015f92:	e00c      	b.n	8015fae <ethernet_input+0x10e>
    goto free_and_return;
 8015f94:	bf00      	nop
 8015f96:	e006      	b.n	8015fa6 <ethernet_input+0x106>
        goto free_and_return;
 8015f98:	bf00      	nop
 8015f9a:	e004      	b.n	8015fa6 <ethernet_input+0x106>
        goto free_and_return;
 8015f9c:	bf00      	nop
 8015f9e:	e002      	b.n	8015fa6 <ethernet_input+0x106>
        goto free_and_return;
 8015fa0:	bf00      	nop
 8015fa2:	e000      	b.n	8015fa6 <ethernet_input+0x106>
        goto free_and_return;
 8015fa4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015fa6:	6878      	ldr	r0, [r7, #4]
 8015fa8:	f7f6 fdf0 	bl	800cb8c <pbuf_free>
  return ERR_OK;
 8015fac:	2300      	movs	r3, #0
}
 8015fae:	4618      	mov	r0, r3
 8015fb0:	3718      	adds	r7, #24
 8015fb2:	46bd      	mov	sp, r7
 8015fb4:	bd80      	pop	{r7, pc}
 8015fb6:	bf00      	nop
 8015fb8:	0802955c 	.word	0x0802955c

08015fbc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b086      	sub	sp, #24
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	60f8      	str	r0, [r7, #12]
 8015fc4:	60b9      	str	r1, [r7, #8]
 8015fc6:	607a      	str	r2, [r7, #4]
 8015fc8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015fca:	8c3b      	ldrh	r3, [r7, #32]
 8015fcc:	4618      	mov	r0, r3
 8015fce:	f7f5 f9eb 	bl	800b3a8 <lwip_htons>
 8015fd2:	4603      	mov	r3, r0
 8015fd4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015fd6:	210e      	movs	r1, #14
 8015fd8:	68b8      	ldr	r0, [r7, #8]
 8015fda:	f7f6 fd41 	bl	800ca60 <pbuf_add_header>
 8015fde:	4603      	mov	r3, r0
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d125      	bne.n	8016030 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015fe4:	68bb      	ldr	r3, [r7, #8]
 8015fe6:	685b      	ldr	r3, [r3, #4]
 8015fe8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015fea:	693b      	ldr	r3, [r7, #16]
 8015fec:	8afa      	ldrh	r2, [r7, #22]
 8015fee:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015ff0:	693b      	ldr	r3, [r7, #16]
 8015ff2:	2206      	movs	r2, #6
 8015ff4:	6839      	ldr	r1, [r7, #0]
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	f003 fbf6 	bl	80197e8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015ffc:	693b      	ldr	r3, [r7, #16]
 8015ffe:	3306      	adds	r3, #6
 8016000:	2206      	movs	r2, #6
 8016002:	6879      	ldr	r1, [r7, #4]
 8016004:	4618      	mov	r0, r3
 8016006:	f003 fbef 	bl	80197e8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016010:	2b06      	cmp	r3, #6
 8016012:	d006      	beq.n	8016022 <ethernet_output+0x66>
 8016014:	4b0a      	ldr	r3, [pc, #40]	; (8016040 <ethernet_output+0x84>)
 8016016:	f44f 7299 	mov.w	r2, #306	; 0x132
 801601a:	490a      	ldr	r1, [pc, #40]	; (8016044 <ethernet_output+0x88>)
 801601c:	480a      	ldr	r0, [pc, #40]	; (8016048 <ethernet_output+0x8c>)
 801601e:	f004 f855 	bl	801a0cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	699b      	ldr	r3, [r3, #24]
 8016026:	68b9      	ldr	r1, [r7, #8]
 8016028:	68f8      	ldr	r0, [r7, #12]
 801602a:	4798      	blx	r3
 801602c:	4603      	mov	r3, r0
 801602e:	e002      	b.n	8016036 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016030:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016032:	f06f 0301 	mvn.w	r3, #1
}
 8016036:	4618      	mov	r0, r3
 8016038:	3718      	adds	r7, #24
 801603a:	46bd      	mov	sp, r7
 801603c:	bd80      	pop	{r7, pc}
 801603e:	bf00      	nop
 8016040:	0801fbb8 	.word	0x0801fbb8
 8016044:	0801fbf0 	.word	0x0801fbf0
 8016048:	0801fc24 	.word	0x0801fc24

0801604c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b086      	sub	sp, #24
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
 8016054:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8016056:	683b      	ldr	r3, [r7, #0]
 8016058:	60bb      	str	r3, [r7, #8]
 801605a:	2304      	movs	r3, #4
 801605c:	60fb      	str	r3, [r7, #12]
 801605e:	2300      	movs	r3, #0
 8016060:	613b      	str	r3, [r7, #16]
 8016062:	2300      	movs	r3, #0
 8016064:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8016066:	f107 0308 	add.w	r3, r7, #8
 801606a:	2100      	movs	r1, #0
 801606c:	4618      	mov	r0, r3
 801606e:	f7ef ff36 	bl	8005ede <osMessageCreate>
 8016072:	4602      	mov	r2, r0
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	2b00      	cmp	r3, #0
 801607e:	d102      	bne.n	8016086 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8016080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016084:	e000      	b.n	8016088 <sys_mbox_new+0x3c>

  return ERR_OK;
 8016086:	2300      	movs	r3, #0
}
 8016088:	4618      	mov	r0, r3
 801608a:	3718      	adds	r7, #24
 801608c:	46bd      	mov	sp, r7
 801608e:	bd80      	pop	{r7, pc}

08016090 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b082      	sub	sp, #8
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	4618      	mov	r0, r3
 801609e:	f7ef fffb 	bl	8006098 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	4618      	mov	r0, r3
 80160a8:	f7f0 f80c 	bl	80060c4 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80160ac:	bf00      	nop
 80160ae:	3708      	adds	r7, #8
 80160b0:	46bd      	mov	sp, r7
 80160b2:	bd80      	pop	{r7, pc}

080160b4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80160b4:	b580      	push	{r7, lr}
 80160b6:	b084      	sub	sp, #16
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	6078      	str	r0, [r7, #4]
 80160bc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	6839      	ldr	r1, [r7, #0]
 80160c4:	2200      	movs	r2, #0
 80160c6:	4618      	mov	r0, r3
 80160c8:	f7ef ff32 	bl	8005f30 <osMessagePut>
 80160cc:	4603      	mov	r3, r0
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d102      	bne.n	80160d8 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80160d2:	2300      	movs	r3, #0
 80160d4:	73fb      	strb	r3, [r7, #15]
 80160d6:	e001      	b.n	80160dc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80160d8:	23ff      	movs	r3, #255	; 0xff
 80160da:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80160dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80160e0:	4618      	mov	r0, r3
 80160e2:	3710      	adds	r7, #16
 80160e4:	46bd      	mov	sp, r7
 80160e6:	bd80      	pop	{r7, pc}

080160e8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80160e8:	b580      	push	{r7, lr}
 80160ea:	b08c      	sub	sp, #48	; 0x30
 80160ec:	af00      	add	r7, sp, #0
 80160ee:	61f8      	str	r0, [r7, #28]
 80160f0:	61b9      	str	r1, [r7, #24]
 80160f2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80160f4:	f7ef fd1e 	bl	8005b34 <osKernelSysTick>
 80160f8:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80160fa:	697b      	ldr	r3, [r7, #20]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d017      	beq.n	8016130 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8016100:	69fb      	ldr	r3, [r7, #28]
 8016102:	6819      	ldr	r1, [r3, #0]
 8016104:	f107 0320 	add.w	r3, r7, #32
 8016108:	697a      	ldr	r2, [r7, #20]
 801610a:	4618      	mov	r0, r3
 801610c:	f7ef ff50 	bl	8005fb0 <osMessageGet>

    if(event.status == osEventMessage)
 8016110:	6a3b      	ldr	r3, [r7, #32]
 8016112:	2b10      	cmp	r3, #16
 8016114:	d109      	bne.n	801612a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8016116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016118:	461a      	mov	r2, r3
 801611a:	69bb      	ldr	r3, [r7, #24]
 801611c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801611e:	f7ef fd09 	bl	8005b34 <osKernelSysTick>
 8016122:	4602      	mov	r2, r0
 8016124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016126:	1ad3      	subs	r3, r2, r3
 8016128:	e019      	b.n	801615e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801612a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801612e:	e016      	b.n	801615e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8016130:	69fb      	ldr	r3, [r7, #28]
 8016132:	6819      	ldr	r1, [r3, #0]
 8016134:	463b      	mov	r3, r7
 8016136:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801613a:	4618      	mov	r0, r3
 801613c:	f7ef ff38 	bl	8005fb0 <osMessageGet>
 8016140:	f107 0320 	add.w	r3, r7, #32
 8016144:	463a      	mov	r2, r7
 8016146:	ca07      	ldmia	r2, {r0, r1, r2}
 8016148:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801614e:	461a      	mov	r2, r3
 8016150:	69bb      	ldr	r3, [r7, #24]
 8016152:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8016154:	f7ef fcee 	bl	8005b34 <osKernelSysTick>
 8016158:	4602      	mov	r2, r0
 801615a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801615c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801615e:	4618      	mov	r0, r3
 8016160:	3730      	adds	r7, #48	; 0x30
 8016162:	46bd      	mov	sp, r7
 8016164:	bd80      	pop	{r7, pc}

08016166 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8016166:	b580      	push	{r7, lr}
 8016168:	b086      	sub	sp, #24
 801616a:	af00      	add	r7, sp, #0
 801616c:	6078      	str	r0, [r7, #4]
 801616e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	6819      	ldr	r1, [r3, #0]
 8016174:	f107 030c 	add.w	r3, r7, #12
 8016178:	2200      	movs	r2, #0
 801617a:	4618      	mov	r0, r3
 801617c:	f7ef ff18 	bl	8005fb0 <osMessageGet>

  if(event.status == osEventMessage)
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	2b10      	cmp	r3, #16
 8016184:	d105      	bne.n	8016192 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8016186:	693b      	ldr	r3, [r7, #16]
 8016188:	461a      	mov	r2, r3
 801618a:	683b      	ldr	r3, [r7, #0]
 801618c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801618e:	2300      	movs	r3, #0
 8016190:	e001      	b.n	8016196 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8016192:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8016196:	4618      	mov	r0, r3
 8016198:	3718      	adds	r7, #24
 801619a:	46bd      	mov	sp, r7
 801619c:	bd80      	pop	{r7, pc}

0801619e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801619e:	b480      	push	{r7}
 80161a0:	b083      	sub	sp, #12
 80161a2:	af00      	add	r7, sp, #0
 80161a4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d101      	bne.n	80161b2 <sys_mbox_valid+0x14>
    return 0;
 80161ae:	2300      	movs	r3, #0
 80161b0:	e000      	b.n	80161b4 <sys_mbox_valid+0x16>
  else
    return 1;
 80161b2:	2301      	movs	r3, #1
}
 80161b4:	4618      	mov	r0, r3
 80161b6:	370c      	adds	r7, #12
 80161b8:	46bd      	mov	sp, r7
 80161ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161be:	4770      	bx	lr

080161c0 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80161c0:	b480      	push	{r7}
 80161c2:	b083      	sub	sp, #12
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	2200      	movs	r2, #0
 80161cc:	601a      	str	r2, [r3, #0]
}
 80161ce:	bf00      	nop
 80161d0:	370c      	adds	r7, #12
 80161d2:	46bd      	mov	sp, r7
 80161d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d8:	4770      	bx	lr

080161da <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80161da:	b580      	push	{r7, lr}
 80161dc:	b084      	sub	sp, #16
 80161de:	af00      	add	r7, sp, #0
 80161e0:	6078      	str	r0, [r7, #4]
 80161e2:	460b      	mov	r3, r1
 80161e4:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80161e6:	2300      	movs	r3, #0
 80161e8:	60bb      	str	r3, [r7, #8]
 80161ea:	2300      	movs	r3, #0
 80161ec:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80161ee:	f107 0308 	add.w	r3, r7, #8
 80161f2:	2101      	movs	r1, #1
 80161f4:	4618      	mov	r0, r3
 80161f6:	f7ef fda9 	bl	8005d4c <osSemaphoreCreate>
 80161fa:	4602      	mov	r2, r0
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	2b00      	cmp	r3, #0
 8016206:	d102      	bne.n	801620e <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801620c:	e009      	b.n	8016222 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801620e:	78fb      	ldrb	r3, [r7, #3]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d105      	bne.n	8016220 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	2100      	movs	r1, #0
 801621a:	4618      	mov	r0, r3
 801621c:	f7ef fdc8 	bl	8005db0 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8016220:	2300      	movs	r3, #0
}
 8016222:	4618      	mov	r0, r3
 8016224:	3710      	adds	r7, #16
 8016226:	46bd      	mov	sp, r7
 8016228:	bd80      	pop	{r7, pc}

0801622a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801622a:	b580      	push	{r7, lr}
 801622c:	b084      	sub	sp, #16
 801622e:	af00      	add	r7, sp, #0
 8016230:	6078      	str	r0, [r7, #4]
 8016232:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8016234:	f7ef fc7e 	bl	8005b34 <osKernelSysTick>
 8016238:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801623a:	683b      	ldr	r3, [r7, #0]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d011      	beq.n	8016264 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	6839      	ldr	r1, [r7, #0]
 8016246:	4618      	mov	r0, r3
 8016248:	f7ef fdb2 	bl	8005db0 <osSemaphoreWait>
 801624c:	4603      	mov	r3, r0
 801624e:	2b00      	cmp	r3, #0
 8016250:	d105      	bne.n	801625e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8016252:	f7ef fc6f 	bl	8005b34 <osKernelSysTick>
 8016256:	4602      	mov	r2, r0
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	1ad3      	subs	r3, r2, r3
 801625c:	e012      	b.n	8016284 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801625e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016262:	e00f      	b.n	8016284 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8016264:	bf00      	nop
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801626e:	4618      	mov	r0, r3
 8016270:	f7ef fd9e 	bl	8005db0 <osSemaphoreWait>
 8016274:	4603      	mov	r3, r0
 8016276:	2b00      	cmp	r3, #0
 8016278:	d1f5      	bne.n	8016266 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801627a:	f7ef fc5b 	bl	8005b34 <osKernelSysTick>
 801627e:	4602      	mov	r2, r0
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016284:	4618      	mov	r0, r3
 8016286:	3710      	adds	r7, #16
 8016288:	46bd      	mov	sp, r7
 801628a:	bd80      	pop	{r7, pc}

0801628c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801628c:	b580      	push	{r7, lr}
 801628e:	b082      	sub	sp, #8
 8016290:	af00      	add	r7, sp, #0
 8016292:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	4618      	mov	r0, r3
 801629a:	f7ef fdd7 	bl	8005e4c <osSemaphoreRelease>
}
 801629e:	bf00      	nop
 80162a0:	3708      	adds	r7, #8
 80162a2:	46bd      	mov	sp, r7
 80162a4:	bd80      	pop	{r7, pc}

080162a6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80162a6:	b580      	push	{r7, lr}
 80162a8:	b082      	sub	sp, #8
 80162aa:	af00      	add	r7, sp, #0
 80162ac:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	4618      	mov	r0, r3
 80162b4:	f7ef fe00 	bl	8005eb8 <osSemaphoreDelete>
}
 80162b8:	bf00      	nop
 80162ba:	3708      	adds	r7, #8
 80162bc:	46bd      	mov	sp, r7
 80162be:	bd80      	pop	{r7, pc}

080162c0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80162c0:	b480      	push	{r7}
 80162c2:	b083      	sub	sp, #12
 80162c4:	af00      	add	r7, sp, #0
 80162c6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d101      	bne.n	80162d4 <sys_sem_valid+0x14>
    return 0;
 80162d0:	2300      	movs	r3, #0
 80162d2:	e000      	b.n	80162d6 <sys_sem_valid+0x16>
  else
    return 1;
 80162d4:	2301      	movs	r3, #1
}
 80162d6:	4618      	mov	r0, r3
 80162d8:	370c      	adds	r7, #12
 80162da:	46bd      	mov	sp, r7
 80162dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e0:	4770      	bx	lr

080162e2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80162e2:	b480      	push	{r7}
 80162e4:	b083      	sub	sp, #12
 80162e6:	af00      	add	r7, sp, #0
 80162e8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	2200      	movs	r2, #0
 80162ee:	601a      	str	r2, [r3, #0]
}
 80162f0:	bf00      	nop
 80162f2:	370c      	adds	r7, #12
 80162f4:	46bd      	mov	sp, r7
 80162f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162fa:	4770      	bx	lr

080162fc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80162fc:	b580      	push	{r7, lr}
 80162fe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016300:	4803      	ldr	r0, [pc, #12]	; (8016310 <sys_init+0x14>)
 8016302:	f7ef fc87 	bl	8005c14 <osMutexCreate>
 8016306:	4603      	mov	r3, r0
 8016308:	4a02      	ldr	r2, [pc, #8]	; (8016314 <sys_init+0x18>)
 801630a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801630c:	bf00      	nop
 801630e:	bd80      	pop	{r7, pc}
 8016310:	0802956c 	.word	0x0802956c
 8016314:	200115dc 	.word	0x200115dc

08016318 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016318:	b580      	push	{r7, lr}
 801631a:	b084      	sub	sp, #16
 801631c:	af00      	add	r7, sp, #0
 801631e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8016320:	2300      	movs	r3, #0
 8016322:	60bb      	str	r3, [r7, #8]
 8016324:	2300      	movs	r3, #0
 8016326:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016328:	f107 0308 	add.w	r3, r7, #8
 801632c:	4618      	mov	r0, r3
 801632e:	f7ef fc71 	bl	8005c14 <osMutexCreate>
 8016332:	4602      	mov	r2, r0
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d102      	bne.n	8016346 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016344:	e000      	b.n	8016348 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016346:	2300      	movs	r3, #0
}
 8016348:	4618      	mov	r0, r3
 801634a:	3710      	adds	r7, #16
 801634c:	46bd      	mov	sp, r7
 801634e:	bd80      	pop	{r7, pc}

08016350 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016350:	b580      	push	{r7, lr}
 8016352:	b082      	sub	sp, #8
 8016354:	af00      	add	r7, sp, #0
 8016356:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016360:	4618      	mov	r0, r3
 8016362:	f7ef fc6f 	bl	8005c44 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8016366:	bf00      	nop
 8016368:	3708      	adds	r7, #8
 801636a:	46bd      	mov	sp, r7
 801636c:	bd80      	pop	{r7, pc}

0801636e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801636e:	b580      	push	{r7, lr}
 8016370:	b082      	sub	sp, #8
 8016372:	af00      	add	r7, sp, #0
 8016374:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	4618      	mov	r0, r3
 801637c:	f7ef fcb0 	bl	8005ce0 <osMutexRelease>
}
 8016380:	bf00      	nop
 8016382:	3708      	adds	r7, #8
 8016384:	46bd      	mov	sp, r7
 8016386:	bd80      	pop	{r7, pc}

08016388 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016388:	b580      	push	{r7, lr}
 801638a:	b08c      	sub	sp, #48	; 0x30
 801638c:	af00      	add	r7, sp, #0
 801638e:	60f8      	str	r0, [r7, #12]
 8016390:	60b9      	str	r1, [r7, #8]
 8016392:	607a      	str	r2, [r7, #4]
 8016394:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016396:	f107 0314 	add.w	r3, r7, #20
 801639a:	2200      	movs	r2, #0
 801639c:	601a      	str	r2, [r3, #0]
 801639e:	605a      	str	r2, [r3, #4]
 80163a0:	609a      	str	r2, [r3, #8]
 80163a2:	60da      	str	r2, [r3, #12]
 80163a4:	611a      	str	r2, [r3, #16]
 80163a6:	615a      	str	r2, [r3, #20]
 80163a8:	619a      	str	r2, [r3, #24]
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	617b      	str	r3, [r7, #20]
 80163ae:	68bb      	ldr	r3, [r7, #8]
 80163b0:	61bb      	str	r3, [r7, #24]
 80163b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163b4:	b21b      	sxth	r3, r3
 80163b6:	83bb      	strh	r3, [r7, #28]
 80163b8:	683b      	ldr	r3, [r7, #0]
 80163ba:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80163bc:	f107 0314 	add.w	r3, r7, #20
 80163c0:	6879      	ldr	r1, [r7, #4]
 80163c2:	4618      	mov	r0, r3
 80163c4:	f7ef fbc6 	bl	8005b54 <osThreadCreate>
 80163c8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80163ca:	4618      	mov	r0, r3
 80163cc:	3730      	adds	r7, #48	; 0x30
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bd80      	pop	{r7, pc}
	...

080163d4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80163d4:	b580      	push	{r7, lr}
 80163d6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80163d8:	4b04      	ldr	r3, [pc, #16]	; (80163ec <sys_arch_protect+0x18>)
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80163e0:	4618      	mov	r0, r3
 80163e2:	f7ef fc2f 	bl	8005c44 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80163e6:	2301      	movs	r3, #1
}
 80163e8:	4618      	mov	r0, r3
 80163ea:	bd80      	pop	{r7, pc}
 80163ec:	200115dc 	.word	0x200115dc

080163f0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b082      	sub	sp, #8
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80163f8:	4b04      	ldr	r3, [pc, #16]	; (801640c <sys_arch_unprotect+0x1c>)
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	4618      	mov	r0, r3
 80163fe:	f7ef fc6f 	bl	8005ce0 <osMutexRelease>
}
 8016402:	bf00      	nop
 8016404:	3708      	adds	r7, #8
 8016406:	46bd      	mov	sp, r7
 8016408:	bd80      	pop	{r7, pc}
 801640a:	bf00      	nop
 801640c:	200115dc 	.word	0x200115dc

08016410 <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 8016410:	b480      	push	{r7}
 8016412:	b08f      	sub	sp, #60	; 0x3c
 8016414:	af00      	add	r7, sp, #0
 8016416:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	891a      	ldrh	r2, [r3, #8]
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	8a1b      	ldrh	r3, [r3, #16]
 8016422:	429a      	cmp	r2, r3
 8016424:	d301      	bcc.n	801642a <load_descriptor_values+0x1a>
        return false;
 8016426:	2300      	movs	r3, #0
 8016428:	e156      	b.n	80166d8 <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	681a      	ldr	r2, [r3, #0]
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	895b      	ldrh	r3, [r3, #10]
 8016434:	009b      	lsls	r3, r3, #2
 8016436:	4413      	add	r3, r2
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	62fb      	str	r3, [r7, #44]	; 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 801643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801643e:	0a1b      	lsrs	r3, r3, #8
 8016440:	b2da      	uxtb	r2, r3
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 8016446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016448:	f003 0303 	and.w	r3, r3, #3
 801644c:	2b02      	cmp	r3, #2
 801644e:	d05a      	beq.n	8016506 <load_descriptor_values+0xf6>
 8016450:	2b02      	cmp	r3, #2
 8016452:	f200 8094 	bhi.w	801657e <load_descriptor_values+0x16e>
 8016456:	2b00      	cmp	r3, #0
 8016458:	d002      	beq.n	8016460 <load_descriptor_values+0x50>
 801645a:	2b01      	cmp	r3, #1
 801645c:	d01f      	beq.n	801649e <load_descriptor_values+0x8e>
 801645e:	e08e      	b.n	801657e <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	2201      	movs	r2, #1
 8016464:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 8016466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016468:	089b      	lsrs	r3, r3, #2
 801646a:	b29b      	uxth	r3, r3
 801646c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016470:	b29a      	uxth	r2, r3
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 8016476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016478:	0e1b      	lsrs	r3, r3, #24
 801647a:	b25b      	sxtb	r3, r3
 801647c:	f003 030f 	and.w	r3, r3, #15
 8016480:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = (word0 >> 16) & 0xFF;
 8016484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016486:	0c1b      	lsrs	r3, r3, #16
 8016488:	b2db      	uxtb	r3, r3
 801648a:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 801648c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801648e:	0f1b      	lsrs	r3, r3, #28
 8016490:	b29b      	uxth	r3, r3
 8016492:	f003 030f 	and.w	r3, r3, #15
 8016496:	b29a      	uxth	r2, r3
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	825a      	strh	r2, [r3, #18]
            break;
 801649c:	e0b4      	b.n	8016608 <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	681a      	ldr	r2, [r3, #0]
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	895b      	ldrh	r3, [r3, #10]
 80164a8:	3301      	adds	r3, #1
 80164aa:	009b      	lsls	r3, r3, #2
 80164ac:	4413      	add	r3, r2
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 80164b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164b4:	0c1b      	lsrs	r3, r3, #16
 80164b6:	b29b      	uxth	r3, r3
 80164b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80164bc:	b29a      	uxth	r2, r3
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 80164c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164c4:	089b      	lsrs	r3, r3, #2
 80164c6:	b29b      	uxth	r3, r3
 80164c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80164cc:	b29a      	uxth	r2, r3
 80164ce:	69fb      	ldr	r3, [r7, #28]
 80164d0:	0f1b      	lsrs	r3, r3, #28
 80164d2:	b29b      	uxth	r3, r3
 80164d4:	019b      	lsls	r3, r3, #6
 80164d6:	b29b      	uxth	r3, r3
 80164d8:	4313      	orrs	r3, r2
 80164da:	b29a      	uxth	r2, r3
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 80164e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164e2:	0f1b      	lsrs	r3, r3, #28
 80164e4:	b25b      	sxtb	r3, r3
 80164e6:	f003 030f 	and.w	r3, r3, #15
 80164ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word1 & 0xFFFF;
 80164ee:	69fb      	ldr	r3, [r7, #28]
 80164f0:	b29b      	uxth	r3, r3
 80164f2:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 80164f4:	69fb      	ldr	r3, [r7, #28]
 80164f6:	0c1b      	lsrs	r3, r3, #16
 80164f8:	b29b      	uxth	r3, r3
 80164fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80164fe:	b29a      	uxth	r2, r3
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	825a      	strh	r2, [r3, #18]
            break;
 8016504:	e080      	b.n	8016608 <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	681a      	ldr	r2, [r3, #0]
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	895b      	ldrh	r3, [r3, #10]
 8016510:	3301      	adds	r3, #1
 8016512:	009b      	lsls	r3, r3, #2
 8016514:	4413      	add	r3, r2
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	62bb      	str	r3, [r7, #40]	; 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	681a      	ldr	r2, [r3, #0]
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	895b      	ldrh	r3, [r3, #10]
 8016524:	3302      	adds	r3, #2
 8016526:	009b      	lsls	r3, r3, #2
 8016528:	4413      	add	r3, r2
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	627b      	str	r3, [r7, #36]	; 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	681a      	ldr	r2, [r3, #0]
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	895b      	ldrh	r3, [r3, #10]
 8016538:	3303      	adds	r3, #3
 801653a:	009b      	lsls	r3, r3, #2
 801653c:	4413      	add	r3, r2
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 8016542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016544:	0c1b      	lsrs	r3, r3, #16
 8016546:	b29a      	uxth	r2, r3
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 801654c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801654e:	089b      	lsrs	r3, r3, #2
 8016550:	b29b      	uxth	r3, r3
 8016552:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016556:	b29a      	uxth	r2, r3
 8016558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801655a:	0a1b      	lsrs	r3, r3, #8
 801655c:	b29b      	uxth	r3, r3
 801655e:	019b      	lsls	r3, r3, #6
 8016560:	b29b      	uxth	r3, r3
 8016562:	4313      	orrs	r3, r2
 8016564:	b29a      	uxth	r2, r3
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 801656a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801656c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 8016570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016572:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 8016574:	6a3b      	ldr	r3, [r7, #32]
 8016576:	b29a      	uxth	r2, r3
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	825a      	strh	r2, [r3, #18]
            break;
 801657c:	e044      	b.n	8016608 <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	681a      	ldr	r2, [r3, #0]
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	895b      	ldrh	r3, [r3, #10]
 8016588:	3301      	adds	r3, #1
 801658a:	009b      	lsls	r3, r3, #2
 801658c:	4413      	add	r3, r2
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	681a      	ldr	r2, [r3, #0]
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	895b      	ldrh	r3, [r3, #10]
 801659c:	3302      	adds	r3, #2
 801659e:	009b      	lsls	r3, r3, #2
 80165a0:	4413      	add	r3, r2
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	681a      	ldr	r2, [r3, #0]
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	895b      	ldrh	r3, [r3, #10]
 80165b0:	3303      	adds	r3, #3
 80165b2:	009b      	lsls	r3, r3, #2
 80165b4:	4413      	add	r3, r2
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	681a      	ldr	r2, [r3, #0]
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	895b      	ldrh	r3, [r3, #10]
 80165c4:	3304      	adds	r3, #4
 80165c6:	009b      	lsls	r3, r3, #2
 80165c8:	4413      	add	r3, r2
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	b29a      	uxth	r2, r3
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 80165d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165d8:	089b      	lsrs	r3, r3, #2
 80165da:	b29b      	uxth	r3, r3
 80165dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80165e0:	b29a      	uxth	r2, r3
 80165e2:	69bb      	ldr	r3, [r7, #24]
 80165e4:	0a1b      	lsrs	r3, r3, #8
 80165e6:	b29b      	uxth	r3, r3
 80165e8:	019b      	lsls	r3, r3, #6
 80165ea:	b29b      	uxth	r3, r3
 80165ec:	4313      	orrs	r3, r2
 80165ee:	b29a      	uxth	r2, r3
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 80165f4:	69bb      	ldr	r3, [r7, #24]
 80165f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 80165fa:	697b      	ldr	r3, [r7, #20]
 80165fc:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 80165fe:	693b      	ldr	r3, [r7, #16]
 8016600:	b29a      	uxth	r2, r3
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	825a      	strh	r2, [r3, #18]
            break;
 8016606:	bf00      	nop
        }
    }

    if (!iter->message)
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	685b      	ldr	r3, [r3, #4]
 801660c:	2b00      	cmp	r3, #0
 801660e:	d106      	bne.n	801661e <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	2200      	movs	r2, #0
 8016614:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	2200      	movs	r2, #0
 801661a:	621a      	str	r2, [r3, #32]
 801661c:	e041      	b.n	80166a2 <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	685a      	ldr	r2, [r3, #4]
 8016622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016624:	441a      	add	r2, r3
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	619a      	str	r2, [r3, #24]

        if (size_offset)
 801662a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801662e:	2b00      	cmp	r3, #0
 8016630:	d008      	beq.n	8016644 <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	699a      	ldr	r2, [r3, #24]
 8016636:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801663a:	425b      	negs	r3, r3
 801663c:	441a      	add	r2, r3
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	621a      	str	r2, [r3, #32]
 8016642:	e01a      	b.n	801667a <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	7d9b      	ldrb	r3, [r3, #22]
 8016648:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801664c:	2b20      	cmp	r3, #32
 801664e:	d111      	bne.n	8016674 <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	7d9b      	ldrb	r3, [r3, #22]
 8016654:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8016658:	2b00      	cmp	r3, #0
 801665a:	d005      	beq.n	8016668 <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	7d9b      	ldrb	r3, [r3, #22]
 8016660:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8016664:	2b80      	cmp	r3, #128	; 0x80
 8016666:	d105      	bne.n	8016674 <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	f103 0214 	add.w	r2, r3, #20
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	621a      	str	r2, [r3, #32]
 8016672:	e002      	b.n	801667a <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	2200      	movs	r2, #0
 8016678:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	7d9b      	ldrb	r3, [r3, #22]
 801667e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8016682:	2b80      	cmp	r3, #128	; 0x80
 8016684:	d109      	bne.n	801669a <load_descriptor_values+0x28a>
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	699b      	ldr	r3, [r3, #24]
 801668a:	2b00      	cmp	r3, #0
 801668c:	d005      	beq.n	801669a <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	699b      	ldr	r3, [r3, #24]
 8016692:	681a      	ldr	r2, [r3, #0]
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	61da      	str	r2, [r3, #28]
 8016698:	e003      	b.n	80166a2 <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	699a      	ldr	r2, [r3, #24]
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	7d9b      	ldrb	r3, [r3, #22]
 80166a6:	f003 030f 	and.w	r3, r3, #15
 80166aa:	2b08      	cmp	r3, #8
 80166ac:	d005      	beq.n	80166ba <load_descriptor_values+0x2aa>
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	7d9b      	ldrb	r3, [r3, #22]
 80166b2:	f003 030f 	and.w	r3, r3, #15
 80166b6:	2b09      	cmp	r3, #9
 80166b8:	d10a      	bne.n	80166d0 <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	685a      	ldr	r2, [r3, #4]
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	89db      	ldrh	r3, [r3, #14]
 80166c4:	009b      	lsls	r3, r3, #2
 80166c6:	4413      	add	r3, r2
 80166c8:	681a      	ldr	r2, [r3, #0]
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	625a      	str	r2, [r3, #36]	; 0x24
 80166ce:	e002      	b.n	80166d6 <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	2200      	movs	r2, #0
 80166d4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return true;
 80166d6:	2301      	movs	r3, #1
}
 80166d8:	4618      	mov	r0, r3
 80166da:	373c      	adds	r7, #60	; 0x3c
 80166dc:	46bd      	mov	sp, r7
 80166de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e2:	4770      	bx	lr

080166e4 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 80166e4:	b480      	push	{r7}
 80166e6:	b085      	sub	sp, #20
 80166e8:	af00      	add	r7, sp, #0
 80166ea:	6078      	str	r0, [r7, #4]
    iter->index++;
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	891b      	ldrh	r3, [r3, #8]
 80166f0:	3301      	adds	r3, #1
 80166f2:	b29a      	uxth	r2, r3
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	891a      	ldrh	r2, [r3, #8]
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	8a1b      	ldrh	r3, [r3, #16]
 8016702:	429a      	cmp	r2, r3
 8016704:	d30c      	bcc.n	8016720 <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	2200      	movs	r2, #0
 801670a:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	2200      	movs	r2, #0
 8016710:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	2200      	movs	r2, #0
 8016716:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	2200      	movs	r2, #0
 801671c:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 801671e:	e03c      	b.n	801679a <advance_iterator+0xb6>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	681a      	ldr	r2, [r3, #0]
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	895b      	ldrh	r3, [r3, #10]
 801672a:	009b      	lsls	r3, r3, #2
 801672c:	4413      	add	r3, r2
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	0a1b      	lsrs	r3, r3, #8
 8016736:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	f003 0303 	and.w	r3, r3, #3
 801673e:	2201      	movs	r2, #1
 8016740:	fa02 f303 	lsl.w	r3, r2, r3
 8016744:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	895a      	ldrh	r2, [r3, #10]
 801674a:	893b      	ldrh	r3, [r7, #8]
 801674c:	4413      	add	r3, r2
 801674e:	b29a      	uxth	r2, r3
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	899a      	ldrh	r2, [r3, #12]
 8016758:	7afb      	ldrb	r3, [r7, #11]
 801675a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801675e:	2b00      	cmp	r3, #0
 8016760:	bf0c      	ite	eq
 8016762:	2301      	moveq	r3, #1
 8016764:	2300      	movne	r3, #0
 8016766:	b2db      	uxtb	r3, r3
 8016768:	b29b      	uxth	r3, r3
 801676a:	4413      	add	r3, r2
 801676c:	b29a      	uxth	r2, r3
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	89da      	ldrh	r2, [r3, #14]
 8016776:	7afb      	ldrb	r3, [r7, #11]
 8016778:	f003 030f 	and.w	r3, r3, #15
 801677c:	2b08      	cmp	r3, #8
 801677e:	d004      	beq.n	801678a <advance_iterator+0xa6>
 8016780:	7afb      	ldrb	r3, [r7, #11]
 8016782:	f003 030f 	and.w	r3, r3, #15
 8016786:	2b09      	cmp	r3, #9
 8016788:	d101      	bne.n	801678e <advance_iterator+0xaa>
 801678a:	2301      	movs	r3, #1
 801678c:	e000      	b.n	8016790 <advance_iterator+0xac>
 801678e:	2300      	movs	r3, #0
 8016790:	b29b      	uxth	r3, r3
 8016792:	4413      	add	r3, r2
 8016794:	b29a      	uxth	r2, r3
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	81da      	strh	r2, [r3, #14]
}
 801679a:	bf00      	nop
 801679c:	3714      	adds	r7, #20
 801679e:	46bd      	mov	sp, r7
 80167a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a4:	4770      	bx	lr

080167a6 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 80167a6:	b580      	push	{r7, lr}
 80167a8:	b084      	sub	sp, #16
 80167aa:	af00      	add	r7, sp, #0
 80167ac:	60f8      	str	r0, [r7, #12]
 80167ae:	60b9      	str	r1, [r7, #8]
 80167b0:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 80167b2:	2228      	movs	r2, #40	; 0x28
 80167b4:	2100      	movs	r1, #0
 80167b6:	68f8      	ldr	r0, [r7, #12]
 80167b8:	f003 f83e 	bl	8019838 <memset>

    iter->descriptor = desc;
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	68ba      	ldr	r2, [r7, #8]
 80167c0:	601a      	str	r2, [r3, #0]
    iter->message = message;
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	687a      	ldr	r2, [r7, #4]
 80167c6:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 80167c8:	68f8      	ldr	r0, [r7, #12]
 80167ca:	f7ff fe21 	bl	8016410 <load_descriptor_values>
 80167ce:	4603      	mov	r3, r0
}
 80167d0:	4618      	mov	r0, r3
 80167d2:	3710      	adds	r7, #16
 80167d4:	46bd      	mov	sp, r7
 80167d6:	bd80      	pop	{r7, pc}

080167d8 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b086      	sub	sp, #24
 80167dc:	af00      	add	r7, sp, #0
 80167de:	6078      	str	r0, [r7, #4]
 80167e0:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 80167e2:	683b      	ldr	r3, [r7, #0]
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	689b      	ldr	r3, [r3, #8]
 80167e8:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 80167ea:	693b      	ldr	r3, [r7, #16]
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	0a1b      	lsrs	r3, r3, #8
 80167f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80167fa:	2b80      	cmp	r3, #128	; 0x80
 80167fc:	d109      	bne.n	8016812 <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 80167fe:	683b      	ldr	r3, [r7, #0]
 8016800:	3304      	adds	r3, #4
 8016802:	461a      	mov	r2, r3
 8016804:	6939      	ldr	r1, [r7, #16]
 8016806:	6878      	ldr	r0, [r7, #4]
 8016808:	f7ff ffcd 	bl	80167a6 <pb_field_iter_begin>
 801680c:	4603      	mov	r3, r0
 801680e:	75fb      	strb	r3, [r7, #23]
 8016810:	e008      	b.n	8016824 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 8016812:	683b      	ldr	r3, [r7, #0]
 8016814:	685b      	ldr	r3, [r3, #4]
 8016816:	461a      	mov	r2, r3
 8016818:	6939      	ldr	r1, [r7, #16]
 801681a:	6878      	ldr	r0, [r7, #4]
 801681c:	f7ff ffc3 	bl	80167a6 <pb_field_iter_begin>
 8016820:	4603      	mov	r3, r0
 8016822:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 8016824:	683b      	ldr	r3, [r7, #0]
 8016826:	f103 020c 	add.w	r2, r3, #12
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	621a      	str	r2, [r3, #32]
    return status;
 801682e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016830:	4618      	mov	r0, r3
 8016832:	3718      	adds	r7, #24
 8016834:	46bd      	mov	sp, r7
 8016836:	bd80      	pop	{r7, pc}

08016838 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 8016838:	b580      	push	{r7, lr}
 801683a:	b082      	sub	sp, #8
 801683c:	af00      	add	r7, sp, #0
 801683e:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 8016840:	6878      	ldr	r0, [r7, #4]
 8016842:	f7ff ff4f 	bl	80166e4 <advance_iterator>
    (void)load_descriptor_values(iter);
 8016846:	6878      	ldr	r0, [r7, #4]
 8016848:	f7ff fde2 	bl	8016410 <load_descriptor_values>
    return iter->index != 0;
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	891b      	ldrh	r3, [r3, #8]
 8016850:	2b00      	cmp	r3, #0
 8016852:	bf14      	ite	ne
 8016854:	2301      	movne	r3, #1
 8016856:	2300      	moveq	r3, #0
 8016858:	b2db      	uxtb	r3, r3
}
 801685a:	4618      	mov	r0, r3
 801685c:	3708      	adds	r7, #8
 801685e:	46bd      	mov	sp, r7
 8016860:	bd80      	pop	{r7, pc}

08016862 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 8016862:	b580      	push	{r7, lr}
 8016864:	b084      	sub	sp, #16
 8016866:	af00      	add	r7, sp, #0
 8016868:	6078      	str	r0, [r7, #4]
 801686a:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	8a1b      	ldrh	r3, [r3, #16]
 8016870:	461a      	mov	r2, r3
 8016872:	683b      	ldr	r3, [r7, #0]
 8016874:	4293      	cmp	r3, r2
 8016876:	d101      	bne.n	801687c <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 8016878:	2301      	movs	r3, #1
 801687a:	e044      	b.n	8016906 <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	8a9b      	ldrh	r3, [r3, #20]
 8016882:	461a      	mov	r2, r3
 8016884:	683b      	ldr	r3, [r7, #0]
 8016886:	4293      	cmp	r3, r2
 8016888:	d901      	bls.n	801688e <pb_field_iter_find+0x2c>
    {
        return false;
 801688a:	2300      	movs	r3, #0
 801688c:	e03b      	b.n	8016906 <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	891b      	ldrh	r3, [r3, #8]
 8016892:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	8a1b      	ldrh	r3, [r3, #16]
 8016898:	461a      	mov	r2, r3
 801689a:	683b      	ldr	r3, [r7, #0]
 801689c:	4293      	cmp	r3, r2
 801689e:	d204      	bcs.n	80168aa <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	8a1a      	ldrh	r2, [r3, #16]
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 80168aa:	6878      	ldr	r0, [r7, #4]
 80168ac:	f7ff ff1a 	bl	80166e4 <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	681a      	ldr	r2, [r3, #0]
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	895b      	ldrh	r3, [r3, #10]
 80168ba:	009b      	lsls	r3, r3, #2
 80168bc:	4413      	add	r3, r2
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 80168c2:	68bb      	ldr	r3, [r7, #8]
 80168c4:	089a      	lsrs	r2, r3, #2
 80168c6:	683b      	ldr	r3, [r7, #0]
 80168c8:	4053      	eors	r3, r2
 80168ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d110      	bne.n	80168f4 <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 80168d2:	6878      	ldr	r0, [r7, #4]
 80168d4:	f7ff fd9c 	bl	8016410 <load_descriptor_values>

                if (iter->tag == tag &&
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	8a1b      	ldrh	r3, [r3, #16]
 80168dc:	461a      	mov	r2, r3
 80168de:	683b      	ldr	r3, [r7, #0]
 80168e0:	4293      	cmp	r3, r2
 80168e2:	d107      	bne.n	80168f4 <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	7d9b      	ldrb	r3, [r3, #22]
 80168e8:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 80168ec:	2b0a      	cmp	r3, #10
 80168ee:	d001      	beq.n	80168f4 <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 80168f0:	2301      	movs	r3, #1
 80168f2:	e008      	b.n	8016906 <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	891b      	ldrh	r3, [r3, #8]
 80168f8:	89fa      	ldrh	r2, [r7, #14]
 80168fa:	429a      	cmp	r2, r3
 80168fc:	d1d5      	bne.n	80168aa <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 80168fe:	6878      	ldr	r0, [r7, #4]
 8016900:	f7ff fd86 	bl	8016410 <load_descriptor_values>
        return false;
 8016904:	2300      	movs	r3, #0
    }
}
 8016906:	4618      	mov	r0, r3
 8016908:	3710      	adds	r7, #16
 801690a:	46bd      	mov	sp, r7
 801690c:	bd80      	pop	{r7, pc}

0801690e <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 801690e:	b580      	push	{r7, lr}
 8016910:	b084      	sub	sp, #16
 8016912:	af00      	add	r7, sp, #0
 8016914:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	7d9b      	ldrb	r3, [r3, #22]
 801691a:	f003 030f 	and.w	r3, r3, #15
 801691e:	2b0a      	cmp	r3, #10
 8016920:	d101      	bne.n	8016926 <pb_field_iter_find_extension+0x18>
    {
        return true;
 8016922:	2301      	movs	r3, #1
 8016924:	e022      	b.n	801696c <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	891b      	ldrh	r3, [r3, #8]
 801692a:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 801692c:	6878      	ldr	r0, [r7, #4]
 801692e:	f7ff fed9 	bl	80166e4 <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	681a      	ldr	r2, [r3, #0]
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	895b      	ldrh	r3, [r3, #10]
 801693c:	009b      	lsls	r3, r3, #2
 801693e:	4413      	add	r3, r2
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 8016944:	68bb      	ldr	r3, [r7, #8]
 8016946:	0a1b      	lsrs	r3, r3, #8
 8016948:	f003 030f 	and.w	r3, r3, #15
 801694c:	2b0a      	cmp	r3, #10
 801694e:	d104      	bne.n	801695a <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 8016950:	6878      	ldr	r0, [r7, #4]
 8016952:	f7ff fd5d 	bl	8016410 <load_descriptor_values>
 8016956:	4603      	mov	r3, r0
 8016958:	e008      	b.n	801696c <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	891b      	ldrh	r3, [r3, #8]
 801695e:	89fa      	ldrh	r2, [r7, #14]
 8016960:	429a      	cmp	r2, r3
 8016962:	d1e3      	bne.n	801692c <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8016964:	6878      	ldr	r0, [r7, #4]
 8016966:	f7ff fd53 	bl	8016410 <load_descriptor_values>
        return false;
 801696a:	2300      	movs	r3, #0
    }
}
 801696c:	4618      	mov	r0, r3
 801696e:	3710      	adds	r7, #16
 8016970:	46bd      	mov	sp, r7
 8016972:	bd80      	pop	{r7, pc}

08016974 <pb_const_cast>:

static void *pb_const_cast(const void *p)
{
 8016974:	b480      	push	{r7}
 8016976:	b085      	sub	sp, #20
 8016978:	af00      	add	r7, sp, #0
 801697a:	6078      	str	r0, [r7, #4]
     * to avoid spurious compiler warnings. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	60fb      	str	r3, [r7, #12]
    return t.p1;
 8016980:	68fb      	ldr	r3, [r7, #12]
}
 8016982:	4618      	mov	r0, r3
 8016984:	3714      	adds	r7, #20
 8016986:	46bd      	mov	sp, r7
 8016988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801698c:	4770      	bx	lr

0801698e <pb_field_iter_begin_const>:

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
 801698e:	b580      	push	{r7, lr}
 8016990:	b084      	sub	sp, #16
 8016992:	af00      	add	r7, sp, #0
 8016994:	60f8      	str	r0, [r7, #12]
 8016996:	60b9      	str	r1, [r7, #8]
 8016998:	607a      	str	r2, [r7, #4]
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
 801699a:	6878      	ldr	r0, [r7, #4]
 801699c:	f7ff ffea 	bl	8016974 <pb_const_cast>
 80169a0:	4603      	mov	r3, r0
 80169a2:	461a      	mov	r2, r3
 80169a4:	68b9      	ldr	r1, [r7, #8]
 80169a6:	68f8      	ldr	r0, [r7, #12]
 80169a8:	f7ff fefd 	bl	80167a6 <pb_field_iter_begin>
 80169ac:	4603      	mov	r3, r0
}
 80169ae:	4618      	mov	r0, r3
 80169b0:	3710      	adds	r7, #16
 80169b2:	46bd      	mov	sp, r7
 80169b4:	bd80      	pop	{r7, pc}

080169b6 <pb_field_iter_begin_extension_const>:

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
 80169b6:	b580      	push	{r7, lr}
 80169b8:	b082      	sub	sp, #8
 80169ba:	af00      	add	r7, sp, #0
 80169bc:	6078      	str	r0, [r7, #4]
 80169be:	6039      	str	r1, [r7, #0]
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
 80169c0:	6838      	ldr	r0, [r7, #0]
 80169c2:	f7ff ffd7 	bl	8016974 <pb_const_cast>
 80169c6:	4603      	mov	r3, r0
 80169c8:	4619      	mov	r1, r3
 80169ca:	6878      	ldr	r0, [r7, #4]
 80169cc:	f7ff ff04 	bl	80167d8 <pb_field_iter_begin_extension>
 80169d0:	4603      	mov	r3, r0
}
 80169d2:	4618      	mov	r0, r3
 80169d4:	3708      	adds	r7, #8
 80169d6:	46bd      	mov	sp, r7
 80169d8:	bd80      	pop	{r7, pc}

080169da <pb_default_field_callback>:

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
 80169da:	b580      	push	{r7, lr}
 80169dc:	b086      	sub	sp, #24
 80169de:	af00      	add	r7, sp, #0
 80169e0:	60f8      	str	r0, [r7, #12]
 80169e2:	60b9      	str	r1, [r7, #8]
 80169e4:	607a      	str	r2, [r7, #4]
    if (field->data_size == sizeof(pb_callback_t))
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	8a5b      	ldrh	r3, [r3, #18]
 80169ea:	2b08      	cmp	r3, #8
 80169ec:	d125      	bne.n	8016a3a <pb_default_field_callback+0x60>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	69db      	ldr	r3, [r3, #28]
 80169f2:	617b      	str	r3, [r7, #20]

        if (pCallback != NULL)
 80169f4:	697b      	ldr	r3, [r7, #20]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d01f      	beq.n	8016a3a <pb_default_field_callback+0x60>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d00c      	beq.n	8016a1a <pb_default_field_callback+0x40>
 8016a00:	697b      	ldr	r3, [r7, #20]
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d008      	beq.n	8016a1a <pb_default_field_callback+0x40>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
 8016a08:	697b      	ldr	r3, [r7, #20]
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	697a      	ldr	r2, [r7, #20]
 8016a0e:	3204      	adds	r2, #4
 8016a10:	6879      	ldr	r1, [r7, #4]
 8016a12:	68f8      	ldr	r0, [r7, #12]
 8016a14:	4798      	blx	r3
 8016a16:	4603      	mov	r3, r0
 8016a18:	e010      	b.n	8016a3c <pb_default_field_callback+0x62>
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
 8016a1a:	68bb      	ldr	r3, [r7, #8]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d00c      	beq.n	8016a3a <pb_default_field_callback+0x60>
 8016a20:	697b      	ldr	r3, [r7, #20]
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d008      	beq.n	8016a3a <pb_default_field_callback+0x60>
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
 8016a28:	697b      	ldr	r3, [r7, #20]
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	697a      	ldr	r2, [r7, #20]
 8016a2e:	3204      	adds	r2, #4
 8016a30:	6879      	ldr	r1, [r7, #4]
 8016a32:	68b8      	ldr	r0, [r7, #8]
 8016a34:	4798      	blx	r3
 8016a36:	4603      	mov	r3, r0
 8016a38:	e000      	b.n	8016a3c <pb_default_field_callback+0x62>
            }
        }
    }

    return true; /* Success, but didn't do anything */
 8016a3a:	2301      	movs	r3, #1

}
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	3718      	adds	r7, #24
 8016a40:	46bd      	mov	sp, r7
 8016a42:	bd80      	pop	{r7, pc}

08016a44 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b086      	sub	sp, #24
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	60f8      	str	r0, [r7, #12]
 8016a4c:	60b9      	str	r1, [r7, #8]
 8016a4e:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	685b      	ldr	r3, [r3, #4]
 8016a54:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	685a      	ldr	r2, [r3, #4]
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	441a      	add	r2, r3
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 8016a62:	68bb      	ldr	r3, [r7, #8]
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d004      	beq.n	8016a72 <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 8016a68:	687a      	ldr	r2, [r7, #4]
 8016a6a:	6979      	ldr	r1, [r7, #20]
 8016a6c:	68b8      	ldr	r0, [r7, #8]
 8016a6e:	f002 febb 	bl	80197e8 <memcpy>
    }
    
    return true;
 8016a72:	2301      	movs	r3, #1
}
 8016a74:	4618      	mov	r0, r3
 8016a76:	3718      	adds	r7, #24
 8016a78:	46bd      	mov	sp, r7
 8016a7a:	bd80      	pop	{r7, pc}

08016a7c <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8016a7c:	b580      	push	{r7, lr}
 8016a7e:	b088      	sub	sp, #32
 8016a80:	af00      	add	r7, sp, #0
 8016a82:	60f8      	str	r0, [r7, #12]
 8016a84:	60b9      	str	r1, [r7, #8]
 8016a86:	607a      	str	r2, [r7, #4]
    if (count == 0)
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d101      	bne.n	8016a92 <pb_read+0x16>
        return true;
 8016a8e:	2301      	movs	r3, #1
 8016a90:	e05f      	b.n	8016b52 <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 8016a92:	68bb      	ldr	r3, [r7, #8]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d123      	bne.n	8016ae0 <pb_read+0x64>
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	4a2f      	ldr	r2, [pc, #188]	; (8016b5c <pb_read+0xe0>)
 8016a9e:	4293      	cmp	r3, r2
 8016aa0:	d01e      	beq.n	8016ae0 <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 8016aa2:	e011      	b.n	8016ac8 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 8016aa4:	f107 0310 	add.w	r3, r7, #16
 8016aa8:	2210      	movs	r2, #16
 8016aaa:	4619      	mov	r1, r3
 8016aac:	68f8      	ldr	r0, [r7, #12]
 8016aae:	f7ff ffe5 	bl	8016a7c <pb_read>
 8016ab2:	4603      	mov	r3, r0
 8016ab4:	f083 0301 	eor.w	r3, r3, #1
 8016ab8:	b2db      	uxtb	r3, r3
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d001      	beq.n	8016ac2 <pb_read+0x46>
				return false;
 8016abe:	2300      	movs	r3, #0
 8016ac0:	e047      	b.n	8016b52 <pb_read+0xd6>
			
			count -= 16;
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	3b10      	subs	r3, #16
 8016ac6:	607b      	str	r3, [r7, #4]
		while (count > 16)
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	2b10      	cmp	r3, #16
 8016acc:	d8ea      	bhi.n	8016aa4 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 8016ace:	f107 0310 	add.w	r3, r7, #16
 8016ad2:	687a      	ldr	r2, [r7, #4]
 8016ad4:	4619      	mov	r1, r3
 8016ad6:	68f8      	ldr	r0, [r7, #12]
 8016ad8:	f7ff ffd0 	bl	8016a7c <pb_read>
 8016adc:	4603      	mov	r3, r0
 8016ade:	e038      	b.n	8016b52 <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	689b      	ldr	r3, [r3, #8]
 8016ae4:	687a      	ldr	r2, [r7, #4]
 8016ae6:	429a      	cmp	r2, r3
 8016ae8:	d90b      	bls.n	8016b02 <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	68db      	ldr	r3, [r3, #12]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d002      	beq.n	8016af8 <pb_read+0x7c>
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	68db      	ldr	r3, [r3, #12]
 8016af6:	e000      	b.n	8016afa <pb_read+0x7e>
 8016af8:	4b19      	ldr	r3, [pc, #100]	; (8016b60 <pb_read+0xe4>)
 8016afa:	68fa      	ldr	r2, [r7, #12]
 8016afc:	60d3      	str	r3, [r2, #12]
 8016afe:	2300      	movs	r3, #0
 8016b00:	e027      	b.n	8016b52 <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	687a      	ldr	r2, [r7, #4]
 8016b08:	68b9      	ldr	r1, [r7, #8]
 8016b0a:	68f8      	ldr	r0, [r7, #12]
 8016b0c:	4798      	blx	r3
 8016b0e:	4603      	mov	r3, r0
 8016b10:	f083 0301 	eor.w	r3, r3, #1
 8016b14:	b2db      	uxtb	r3, r3
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d00b      	beq.n	8016b32 <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	68db      	ldr	r3, [r3, #12]
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d002      	beq.n	8016b28 <pb_read+0xac>
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	68db      	ldr	r3, [r3, #12]
 8016b26:	e000      	b.n	8016b2a <pb_read+0xae>
 8016b28:	4b0e      	ldr	r3, [pc, #56]	; (8016b64 <pb_read+0xe8>)
 8016b2a:	68fa      	ldr	r2, [r7, #12]
 8016b2c:	60d3      	str	r3, [r2, #12]
 8016b2e:	2300      	movs	r3, #0
 8016b30:	e00f      	b.n	8016b52 <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	689b      	ldr	r3, [r3, #8]
 8016b36:	687a      	ldr	r2, [r7, #4]
 8016b38:	429a      	cmp	r2, r3
 8016b3a:	d903      	bls.n	8016b44 <pb_read+0xc8>
        stream->bytes_left = 0;
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	2200      	movs	r2, #0
 8016b40:	609a      	str	r2, [r3, #8]
 8016b42:	e005      	b.n	8016b50 <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	689a      	ldr	r2, [r3, #8]
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	1ad2      	subs	r2, r2, r3
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	609a      	str	r2, [r3, #8]

    return true;
 8016b50:	2301      	movs	r3, #1
}
 8016b52:	4618      	mov	r0, r3
 8016b54:	3720      	adds	r7, #32
 8016b56:	46bd      	mov	sp, r7
 8016b58:	bd80      	pop	{r7, pc}
 8016b5a:	bf00      	nop
 8016b5c:	08016a45 	.word	0x08016a45
 8016b60:	0801fc4c 	.word	0x0801fc4c
 8016b64:	0801fc5c 	.word	0x0801fc5c

08016b68 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b082      	sub	sp, #8
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	6078      	str	r0, [r7, #4]
 8016b70:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	689b      	ldr	r3, [r3, #8]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d10b      	bne.n	8016b92 <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	68db      	ldr	r3, [r3, #12]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d002      	beq.n	8016b88 <pb_readbyte+0x20>
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	68db      	ldr	r3, [r3, #12]
 8016b86:	e000      	b.n	8016b8a <pb_readbyte+0x22>
 8016b88:	4b13      	ldr	r3, [pc, #76]	; (8016bd8 <pb_readbyte+0x70>)
 8016b8a:	687a      	ldr	r2, [r7, #4]
 8016b8c:	60d3      	str	r3, [r2, #12]
 8016b8e:	2300      	movs	r3, #0
 8016b90:	e01d      	b.n	8016bce <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	2201      	movs	r2, #1
 8016b98:	6839      	ldr	r1, [r7, #0]
 8016b9a:	6878      	ldr	r0, [r7, #4]
 8016b9c:	4798      	blx	r3
 8016b9e:	4603      	mov	r3, r0
 8016ba0:	f083 0301 	eor.w	r3, r3, #1
 8016ba4:	b2db      	uxtb	r3, r3
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d00b      	beq.n	8016bc2 <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	68db      	ldr	r3, [r3, #12]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d002      	beq.n	8016bb8 <pb_readbyte+0x50>
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	68db      	ldr	r3, [r3, #12]
 8016bb6:	e000      	b.n	8016bba <pb_readbyte+0x52>
 8016bb8:	4b08      	ldr	r3, [pc, #32]	; (8016bdc <pb_readbyte+0x74>)
 8016bba:	687a      	ldr	r2, [r7, #4]
 8016bbc:	60d3      	str	r3, [r2, #12]
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	e005      	b.n	8016bce <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	689b      	ldr	r3, [r3, #8]
 8016bc6:	1e5a      	subs	r2, r3, #1
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	609a      	str	r2, [r3, #8]
    
    return true;    
 8016bcc:	2301      	movs	r3, #1
}
 8016bce:	4618      	mov	r0, r3
 8016bd0:	3708      	adds	r7, #8
 8016bd2:	46bd      	mov	sp, r7
 8016bd4:	bd80      	pop	{r7, pc}
 8016bd6:	bf00      	nop
 8016bd8:	0801fc4c 	.word	0x0801fc4c
 8016bdc:	0801fc5c 	.word	0x0801fc5c

08016be0 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 8016be0:	b490      	push	{r4, r7}
 8016be2:	b08a      	sub	sp, #40	; 0x28
 8016be4:	af00      	add	r7, sp, #0
 8016be6:	60f8      	str	r0, [r7, #12]
 8016be8:	60b9      	str	r1, [r7, #8]
 8016bea:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 8016bec:	4b0a      	ldr	r3, [pc, #40]	; (8016c18 <pb_istream_from_buffer+0x38>)
 8016bee:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 8016bf0:	68bb      	ldr	r3, [r7, #8]
 8016bf2:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 8016bf4:	697b      	ldr	r3, [r7, #20]
 8016bf6:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8016bfc:	2300      	movs	r3, #0
 8016bfe:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	461c      	mov	r4, r3
 8016c04:	f107 0318 	add.w	r3, r7, #24
 8016c08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016c0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8016c0e:	68f8      	ldr	r0, [r7, #12]
 8016c10:	3728      	adds	r7, #40	; 0x28
 8016c12:	46bd      	mov	sp, r7
 8016c14:	bc90      	pop	{r4, r7}
 8016c16:	4770      	bx	lr
 8016c18:	08016a45 	.word	0x08016a45

08016c1c <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b088      	sub	sp, #32
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	60f8      	str	r0, [r7, #12]
 8016c24:	60b9      	str	r1, [r7, #8]
 8016c26:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8016c28:	f107 0315 	add.w	r3, r7, #21
 8016c2c:	4619      	mov	r1, r3
 8016c2e:	68f8      	ldr	r0, [r7, #12]
 8016c30:	f7ff ff9a 	bl	8016b68 <pb_readbyte>
 8016c34:	4603      	mov	r3, r0
 8016c36:	f083 0301 	eor.w	r3, r3, #1
 8016c3a:	b2db      	uxtb	r3, r3
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d00b      	beq.n	8016c58 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	689b      	ldr	r3, [r3, #8]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d105      	bne.n	8016c54 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d002      	beq.n	8016c54 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	2201      	movs	r2, #1
 8016c52:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 8016c54:	2300      	movs	r3, #0
 8016c56:	e084      	b.n	8016d62 <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 8016c58:	7d7b      	ldrb	r3, [r7, #21]
 8016c5a:	b25b      	sxtb	r3, r3
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	db02      	blt.n	8016c66 <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 8016c60:	7d7b      	ldrb	r3, [r7, #21]
 8016c62:	61fb      	str	r3, [r7, #28]
 8016c64:	e079      	b.n	8016d5a <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 8016c66:	2307      	movs	r3, #7
 8016c68:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 8016c6a:	7d7b      	ldrb	r3, [r7, #21]
 8016c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016c70:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 8016c72:	f107 0315 	add.w	r3, r7, #21
 8016c76:	4619      	mov	r1, r3
 8016c78:	68f8      	ldr	r0, [r7, #12]
 8016c7a:	f7ff ff75 	bl	8016b68 <pb_readbyte>
 8016c7e:	4603      	mov	r3, r0
 8016c80:	f083 0301 	eor.w	r3, r3, #1
 8016c84:	b2db      	uxtb	r3, r3
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d001      	beq.n	8016c8e <pb_decode_varint32_eof+0x72>
                return false;
 8016c8a:	2300      	movs	r3, #0
 8016c8c:	e069      	b.n	8016d62 <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 8016c8e:	69bb      	ldr	r3, [r7, #24]
 8016c90:	2b1f      	cmp	r3, #31
 8016c92:	d92f      	bls.n	8016cf4 <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8016c94:	69bb      	ldr	r3, [r7, #24]
 8016c96:	2b3e      	cmp	r3, #62	; 0x3e
 8016c98:	d801      	bhi.n	8016c9e <pb_decode_varint32_eof+0x82>
 8016c9a:	23ff      	movs	r3, #255	; 0xff
 8016c9c:	e000      	b.n	8016ca0 <pb_decode_varint32_eof+0x84>
 8016c9e:	2301      	movs	r3, #1
 8016ca0:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8016ca2:	7d7b      	ldrb	r3, [r7, #21]
 8016ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d006      	beq.n	8016cba <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 8016cac:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	da05      	bge.n	8016cbe <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 8016cb2:	7d7b      	ldrb	r3, [r7, #21]
 8016cb4:	7dfa      	ldrb	r2, [r7, #23]
 8016cb6:	429a      	cmp	r2, r3
 8016cb8:	d101      	bne.n	8016cbe <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8016cba:	2301      	movs	r3, #1
 8016cbc:	e000      	b.n	8016cc0 <pb_decode_varint32_eof+0xa4>
 8016cbe:	2300      	movs	r3, #0
 8016cc0:	75bb      	strb	r3, [r7, #22]
 8016cc2:	7dbb      	ldrb	r3, [r7, #22]
 8016cc4:	f003 0301 	and.w	r3, r3, #1
 8016cc8:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 8016cca:	69bb      	ldr	r3, [r7, #24]
 8016ccc:	2b3f      	cmp	r3, #63	; 0x3f
 8016cce:	d805      	bhi.n	8016cdc <pb_decode_varint32_eof+0xc0>
 8016cd0:	7dbb      	ldrb	r3, [r7, #22]
 8016cd2:	f083 0301 	eor.w	r3, r3, #1
 8016cd6:	b2db      	uxtb	r3, r3
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d037      	beq.n	8016d4c <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	68db      	ldr	r3, [r3, #12]
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d002      	beq.n	8016cea <pb_decode_varint32_eof+0xce>
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	68db      	ldr	r3, [r3, #12]
 8016ce8:	e000      	b.n	8016cec <pb_decode_varint32_eof+0xd0>
 8016cea:	4b20      	ldr	r3, [pc, #128]	; (8016d6c <pb_decode_varint32_eof+0x150>)
 8016cec:	68fa      	ldr	r2, [r7, #12]
 8016cee:	60d3      	str	r3, [r2, #12]
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	e036      	b.n	8016d62 <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 8016cf4:	69bb      	ldr	r3, [r7, #24]
 8016cf6:	2b1c      	cmp	r3, #28
 8016cf8:	d11f      	bne.n	8016d3a <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 8016cfa:	7d7b      	ldrb	r3, [r7, #21]
 8016cfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d010      	beq.n	8016d26 <pb_decode_varint32_eof+0x10a>
 8016d04:	7d7b      	ldrb	r3, [r7, #21]
 8016d06:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8016d0a:	2b78      	cmp	r3, #120	; 0x78
 8016d0c:	d00b      	beq.n	8016d26 <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	68db      	ldr	r3, [r3, #12]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d002      	beq.n	8016d1c <pb_decode_varint32_eof+0x100>
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	68db      	ldr	r3, [r3, #12]
 8016d1a:	e000      	b.n	8016d1e <pb_decode_varint32_eof+0x102>
 8016d1c:	4b13      	ldr	r3, [pc, #76]	; (8016d6c <pb_decode_varint32_eof+0x150>)
 8016d1e:	68fa      	ldr	r2, [r7, #12]
 8016d20:	60d3      	str	r3, [r2, #12]
 8016d22:	2300      	movs	r3, #0
 8016d24:	e01d      	b.n	8016d62 <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 8016d26:	7d7b      	ldrb	r3, [r7, #21]
 8016d28:	f003 020f 	and.w	r2, r3, #15
 8016d2c:	69bb      	ldr	r3, [r7, #24]
 8016d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8016d32:	69fa      	ldr	r2, [r7, #28]
 8016d34:	4313      	orrs	r3, r2
 8016d36:	61fb      	str	r3, [r7, #28]
 8016d38:	e008      	b.n	8016d4c <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8016d3a:	7d7b      	ldrb	r3, [r7, #21]
 8016d3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016d40:	69bb      	ldr	r3, [r7, #24]
 8016d42:	fa02 f303 	lsl.w	r3, r2, r3
 8016d46:	69fa      	ldr	r2, [r7, #28]
 8016d48:	4313      	orrs	r3, r2
 8016d4a:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 8016d4c:	69bb      	ldr	r3, [r7, #24]
 8016d4e:	3307      	adds	r3, #7
 8016d50:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 8016d52:	7d7b      	ldrb	r3, [r7, #21]
 8016d54:	b25b      	sxtb	r3, r3
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	db8b      	blt.n	8016c72 <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 8016d5a:	68bb      	ldr	r3, [r7, #8]
 8016d5c:	69fa      	ldr	r2, [r7, #28]
 8016d5e:	601a      	str	r2, [r3, #0]
   return true;
 8016d60:	2301      	movs	r3, #1
}
 8016d62:	4618      	mov	r0, r3
 8016d64:	3720      	adds	r7, #32
 8016d66:	46bd      	mov	sp, r7
 8016d68:	bd80      	pop	{r7, pc}
 8016d6a:	bf00      	nop
 8016d6c:	0801fc68 	.word	0x0801fc68

08016d70 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 8016d70:	b580      	push	{r7, lr}
 8016d72:	b082      	sub	sp, #8
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	6078      	str	r0, [r7, #4]
 8016d78:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 8016d7a:	2200      	movs	r2, #0
 8016d7c:	6839      	ldr	r1, [r7, #0]
 8016d7e:	6878      	ldr	r0, [r7, #4]
 8016d80:	f7ff ff4c 	bl	8016c1c <pb_decode_varint32_eof>
 8016d84:	4603      	mov	r3, r0
}
 8016d86:	4618      	mov	r0, r3
 8016d88:	3708      	adds	r7, #8
 8016d8a:	46bd      	mov	sp, r7
 8016d8c:	bd80      	pop	{r7, pc}
	...

08016d90 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 8016d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016d94:	b08a      	sub	sp, #40	; 0x28
 8016d96:	af00      	add	r7, sp, #0
 8016d98:	60f8      	str	r0, [r7, #12]
 8016d9a:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	627b      	str	r3, [r7, #36]	; 0x24
    uint64_t result = 0;
 8016da0:	f04f 0200 	mov.w	r2, #0
 8016da4:	f04f 0300 	mov.w	r3, #0
 8016da8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 8016dac:	f107 0317 	add.w	r3, r7, #23
 8016db0:	4619      	mov	r1, r3
 8016db2:	68f8      	ldr	r0, [r7, #12]
 8016db4:	f7ff fed8 	bl	8016b68 <pb_readbyte>
 8016db8:	4603      	mov	r3, r0
 8016dba:	f083 0301 	eor.w	r3, r3, #1
 8016dbe:	b2db      	uxtb	r3, r3
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d001      	beq.n	8016dc8 <pb_decode_varint+0x38>
            return false;
 8016dc4:	2300      	movs	r3, #0
 8016dc6:	e041      	b.n	8016e4c <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 8016dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dca:	2b3e      	cmp	r3, #62	; 0x3e
 8016dcc:	d910      	bls.n	8016df0 <pb_decode_varint+0x60>
 8016dce:	7dfb      	ldrb	r3, [r7, #23]
 8016dd0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d00b      	beq.n	8016df0 <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	68db      	ldr	r3, [r3, #12]
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d002      	beq.n	8016de6 <pb_decode_varint+0x56>
 8016de0:	68fb      	ldr	r3, [r7, #12]
 8016de2:	68db      	ldr	r3, [r3, #12]
 8016de4:	e000      	b.n	8016de8 <pb_decode_varint+0x58>
 8016de6:	4b1c      	ldr	r3, [pc, #112]	; (8016e58 <pb_decode_varint+0xc8>)
 8016de8:	68fa      	ldr	r2, [r7, #12]
 8016dea:	60d3      	str	r3, [r2, #12]
 8016dec:	2300      	movs	r3, #0
 8016dee:	e02d      	b.n	8016e4c <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8016df0:	7dfb      	ldrb	r3, [r7, #23]
 8016df2:	b2db      	uxtb	r3, r3
 8016df4:	2200      	movs	r2, #0
 8016df6:	603b      	str	r3, [r7, #0]
 8016df8:	607a      	str	r2, [r7, #4]
 8016dfa:	683b      	ldr	r3, [r7, #0]
 8016dfc:	f003 087f 	and.w	r8, r3, #127	; 0x7f
 8016e00:	f04f 0900 	mov.w	r9, #0
 8016e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e06:	f1a3 0120 	sub.w	r1, r3, #32
 8016e0a:	f1c3 0220 	rsb	r2, r3, #32
 8016e0e:	fa09 f503 	lsl.w	r5, r9, r3
 8016e12:	fa08 f101 	lsl.w	r1, r8, r1
 8016e16:	430d      	orrs	r5, r1
 8016e18:	fa28 f202 	lsr.w	r2, r8, r2
 8016e1c:	4315      	orrs	r5, r2
 8016e1e:	fa08 f403 	lsl.w	r4, r8, r3
 8016e22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016e26:	ea42 0a04 	orr.w	sl, r2, r4
 8016e2a:	ea43 0b05 	orr.w	fp, r3, r5
 8016e2e:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 8016e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e34:	3307      	adds	r3, #7
 8016e36:	627b      	str	r3, [r7, #36]	; 0x24
    } while (byte & 0x80);
 8016e38:	7dfb      	ldrb	r3, [r7, #23]
 8016e3a:	b25b      	sxtb	r3, r3
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	dbb5      	blt.n	8016dac <pb_decode_varint+0x1c>
    
    *dest = result;
 8016e40:	68b9      	ldr	r1, [r7, #8]
 8016e42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016e46:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 8016e4a:	2301      	movs	r3, #1
}
 8016e4c:	4618      	mov	r0, r3
 8016e4e:	3728      	adds	r7, #40	; 0x28
 8016e50:	46bd      	mov	sp, r7
 8016e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016e56:	bf00      	nop
 8016e58:	0801fc68 	.word	0x0801fc68

08016e5c <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 8016e5c:	b580      	push	{r7, lr}
 8016e5e:	b084      	sub	sp, #16
 8016e60:	af00      	add	r7, sp, #0
 8016e62:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 8016e64:	f107 030f 	add.w	r3, r7, #15
 8016e68:	2201      	movs	r2, #1
 8016e6a:	4619      	mov	r1, r3
 8016e6c:	6878      	ldr	r0, [r7, #4]
 8016e6e:	f7ff fe05 	bl	8016a7c <pb_read>
 8016e72:	4603      	mov	r3, r0
 8016e74:	f083 0301 	eor.w	r3, r3, #1
 8016e78:	b2db      	uxtb	r3, r3
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d001      	beq.n	8016e82 <pb_skip_varint+0x26>
            return false;
 8016e7e:	2300      	movs	r3, #0
 8016e80:	e004      	b.n	8016e8c <pb_skip_varint+0x30>
    } while (byte & 0x80);
 8016e82:	7bfb      	ldrb	r3, [r7, #15]
 8016e84:	b25b      	sxtb	r3, r3
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	dbec      	blt.n	8016e64 <pb_skip_varint+0x8>
    return true;
 8016e8a:	2301      	movs	r3, #1
}
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	3710      	adds	r7, #16
 8016e90:	46bd      	mov	sp, r7
 8016e92:	bd80      	pop	{r7, pc}

08016e94 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 8016e94:	b580      	push	{r7, lr}
 8016e96:	b084      	sub	sp, #16
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 8016e9c:	f107 030c 	add.w	r3, r7, #12
 8016ea0:	4619      	mov	r1, r3
 8016ea2:	6878      	ldr	r0, [r7, #4]
 8016ea4:	f7ff ff64 	bl	8016d70 <pb_decode_varint32>
 8016ea8:	4603      	mov	r3, r0
 8016eaa:	f083 0301 	eor.w	r3, r3, #1
 8016eae:	b2db      	uxtb	r3, r3
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d001      	beq.n	8016eb8 <pb_skip_string+0x24>
        return false;
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	e006      	b.n	8016ec6 <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	461a      	mov	r2, r3
 8016ebc:	2100      	movs	r1, #0
 8016ebe:	6878      	ldr	r0, [r7, #4]
 8016ec0:	f7ff fddc 	bl	8016a7c <pb_read>
 8016ec4:	4603      	mov	r3, r0
}
 8016ec6:	4618      	mov	r0, r3
 8016ec8:	3710      	adds	r7, #16
 8016eca:	46bd      	mov	sp, r7
 8016ecc:	bd80      	pop	{r7, pc}

08016ece <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 8016ece:	b580      	push	{r7, lr}
 8016ed0:	b086      	sub	sp, #24
 8016ed2:	af00      	add	r7, sp, #0
 8016ed4:	60f8      	str	r0, [r7, #12]
 8016ed6:	60b9      	str	r1, [r7, #8]
 8016ed8:	607a      	str	r2, [r7, #4]
 8016eda:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 8016edc:	683b      	ldr	r3, [r7, #0]
 8016ede:	2200      	movs	r2, #0
 8016ee0:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 8016ee2:	68bb      	ldr	r3, [r7, #8]
 8016ee4:	2200      	movs	r2, #0
 8016ee6:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	2200      	movs	r2, #0
 8016eec:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8016eee:	f107 0314 	add.w	r3, r7, #20
 8016ef2:	683a      	ldr	r2, [r7, #0]
 8016ef4:	4619      	mov	r1, r3
 8016ef6:	68f8      	ldr	r0, [r7, #12]
 8016ef8:	f7ff fe90 	bl	8016c1c <pb_decode_varint32_eof>
 8016efc:	4603      	mov	r3, r0
 8016efe:	f083 0301 	eor.w	r3, r3, #1
 8016f02:	b2db      	uxtb	r3, r3
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d001      	beq.n	8016f0c <pb_decode_tag+0x3e>
    {
        return false;
 8016f08:	2300      	movs	r3, #0
 8016f0a:	e00b      	b.n	8016f24 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 8016f0c:	697b      	ldr	r3, [r7, #20]
 8016f0e:	08da      	lsrs	r2, r3, #3
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8016f14:	697b      	ldr	r3, [r7, #20]
 8016f16:	b2db      	uxtb	r3, r3
 8016f18:	f003 0307 	and.w	r3, r3, #7
 8016f1c:	b2da      	uxtb	r2, r3
 8016f1e:	68bb      	ldr	r3, [r7, #8]
 8016f20:	701a      	strb	r2, [r3, #0]
    return true;
 8016f22:	2301      	movs	r3, #1
}
 8016f24:	4618      	mov	r0, r3
 8016f26:	3718      	adds	r7, #24
 8016f28:	46bd      	mov	sp, r7
 8016f2a:	bd80      	pop	{r7, pc}

08016f2c <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 8016f2c:	b580      	push	{r7, lr}
 8016f2e:	b082      	sub	sp, #8
 8016f30:	af00      	add	r7, sp, #0
 8016f32:	6078      	str	r0, [r7, #4]
 8016f34:	460b      	mov	r3, r1
 8016f36:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 8016f38:	78fb      	ldrb	r3, [r7, #3]
 8016f3a:	2b05      	cmp	r3, #5
 8016f3c:	d826      	bhi.n	8016f8c <pb_skip_field+0x60>
 8016f3e:	a201      	add	r2, pc, #4	; (adr r2, 8016f44 <pb_skip_field+0x18>)
 8016f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f44:	08016f5d 	.word	0x08016f5d
 8016f48:	08016f67 	.word	0x08016f67
 8016f4c:	08016f75 	.word	0x08016f75
 8016f50:	08016f8d 	.word	0x08016f8d
 8016f54:	08016f8d 	.word	0x08016f8d
 8016f58:	08016f7f 	.word	0x08016f7f
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 8016f5c:	6878      	ldr	r0, [r7, #4]
 8016f5e:	f7ff ff7d 	bl	8016e5c <pb_skip_varint>
 8016f62:	4603      	mov	r3, r0
 8016f64:	e01d      	b.n	8016fa2 <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8016f66:	2208      	movs	r2, #8
 8016f68:	2100      	movs	r1, #0
 8016f6a:	6878      	ldr	r0, [r7, #4]
 8016f6c:	f7ff fd86 	bl	8016a7c <pb_read>
 8016f70:	4603      	mov	r3, r0
 8016f72:	e016      	b.n	8016fa2 <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 8016f74:	6878      	ldr	r0, [r7, #4]
 8016f76:	f7ff ff8d 	bl	8016e94 <pb_skip_string>
 8016f7a:	4603      	mov	r3, r0
 8016f7c:	e011      	b.n	8016fa2 <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8016f7e:	2204      	movs	r2, #4
 8016f80:	2100      	movs	r1, #0
 8016f82:	6878      	ldr	r0, [r7, #4]
 8016f84:	f7ff fd7a 	bl	8016a7c <pb_read>
 8016f88:	4603      	mov	r3, r0
 8016f8a:	e00a      	b.n	8016fa2 <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	68db      	ldr	r3, [r3, #12]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d002      	beq.n	8016f9a <pb_skip_field+0x6e>
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	68db      	ldr	r3, [r3, #12]
 8016f98:	e000      	b.n	8016f9c <pb_skip_field+0x70>
 8016f9a:	4b04      	ldr	r3, [pc, #16]	; (8016fac <pb_skip_field+0x80>)
 8016f9c:	687a      	ldr	r2, [r7, #4]
 8016f9e:	60d3      	str	r3, [r2, #12]
 8016fa0:	2300      	movs	r3, #0
    }
}
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	3708      	adds	r7, #8
 8016fa6:	46bd      	mov	sp, r7
 8016fa8:	bd80      	pop	{r7, pc}
 8016faa:	bf00      	nop
 8016fac:	0801fc78 	.word	0x0801fc78

08016fb0 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 8016fb0:	b580      	push	{r7, lr}
 8016fb2:	b086      	sub	sp, #24
 8016fb4:	af00      	add	r7, sp, #0
 8016fb6:	60f8      	str	r0, [r7, #12]
 8016fb8:	607a      	str	r2, [r7, #4]
 8016fba:	603b      	str	r3, [r7, #0]
 8016fbc:	460b      	mov	r3, r1
 8016fbe:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 8016fc0:	683b      	ldr	r3, [r7, #0]
 8016fc2:	681b      	ldr	r3, [r3, #0]
 8016fc4:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 8016fc6:	7afb      	ldrb	r3, [r7, #11]
 8016fc8:	2b05      	cmp	r3, #5
 8016fca:	d03f      	beq.n	801704c <read_raw_value+0x9c>
 8016fcc:	2b05      	cmp	r3, #5
 8016fce:	dc47      	bgt.n	8017060 <read_raw_value+0xb0>
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d002      	beq.n	8016fda <read_raw_value+0x2a>
 8016fd4:	2b01      	cmp	r3, #1
 8016fd6:	d02f      	beq.n	8017038 <read_raw_value+0x88>
 8016fd8:	e042      	b.n	8017060 <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 8016fda:	683b      	ldr	r3, [r7, #0]
 8016fdc:	2200      	movs	r2, #0
 8016fde:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 8016fe0:	683b      	ldr	r3, [r7, #0]
 8016fe2:	681b      	ldr	r3, [r3, #0]
 8016fe4:	1c5a      	adds	r2, r3, #1
 8016fe6:	683b      	ldr	r3, [r7, #0]
 8016fe8:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 8016fea:	683b      	ldr	r3, [r7, #0]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	697a      	ldr	r2, [r7, #20]
 8016ff0:	429a      	cmp	r2, r3
 8016ff2:	d20b      	bcs.n	801700c <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	68db      	ldr	r3, [r3, #12]
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d002      	beq.n	8017002 <read_raw_value+0x52>
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	68db      	ldr	r3, [r3, #12]
 8017000:	e000      	b.n	8017004 <read_raw_value+0x54>
 8017002:	4b1f      	ldr	r3, [pc, #124]	; (8017080 <read_raw_value+0xd0>)
 8017004:	68fa      	ldr	r2, [r7, #12]
 8017006:	60d3      	str	r3, [r2, #12]
 8017008:	2300      	movs	r3, #0
 801700a:	e034      	b.n	8017076 <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 801700c:	2201      	movs	r2, #1
 801700e:	6879      	ldr	r1, [r7, #4]
 8017010:	68f8      	ldr	r0, [r7, #12]
 8017012:	f7ff fd33 	bl	8016a7c <pb_read>
 8017016:	4603      	mov	r3, r0
 8017018:	f083 0301 	eor.w	r3, r3, #1
 801701c:	b2db      	uxtb	r3, r3
 801701e:	2b00      	cmp	r3, #0
 8017020:	d001      	beq.n	8017026 <read_raw_value+0x76>
                    return false;
 8017022:	2300      	movs	r3, #0
 8017024:	e027      	b.n	8017076 <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	1c5a      	adds	r2, r3, #1
 801702a:	607a      	str	r2, [r7, #4]
 801702c:	781b      	ldrb	r3, [r3, #0]
 801702e:	b25b      	sxtb	r3, r3
 8017030:	2b00      	cmp	r3, #0
 8017032:	dbd5      	blt.n	8016fe0 <read_raw_value+0x30>
            return true;
 8017034:	2301      	movs	r3, #1
 8017036:	e01e      	b.n	8017076 <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 8017038:	683b      	ldr	r3, [r7, #0]
 801703a:	2208      	movs	r2, #8
 801703c:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 801703e:	2208      	movs	r2, #8
 8017040:	6879      	ldr	r1, [r7, #4]
 8017042:	68f8      	ldr	r0, [r7, #12]
 8017044:	f7ff fd1a 	bl	8016a7c <pb_read>
 8017048:	4603      	mov	r3, r0
 801704a:	e014      	b.n	8017076 <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 801704c:	683b      	ldr	r3, [r7, #0]
 801704e:	2204      	movs	r2, #4
 8017050:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 8017052:	2204      	movs	r2, #4
 8017054:	6879      	ldr	r1, [r7, #4]
 8017056:	68f8      	ldr	r0, [r7, #12]
 8017058:	f7ff fd10 	bl	8016a7c <pb_read>
 801705c:	4603      	mov	r3, r0
 801705e:	e00a      	b.n	8017076 <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	68db      	ldr	r3, [r3, #12]
 8017064:	2b00      	cmp	r3, #0
 8017066:	d002      	beq.n	801706e <read_raw_value+0xbe>
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	68db      	ldr	r3, [r3, #12]
 801706c:	e000      	b.n	8017070 <read_raw_value+0xc0>
 801706e:	4b05      	ldr	r3, [pc, #20]	; (8017084 <read_raw_value+0xd4>)
 8017070:	68fa      	ldr	r2, [r7, #12]
 8017072:	60d3      	str	r3, [r2, #12]
 8017074:	2300      	movs	r3, #0
    }
}
 8017076:	4618      	mov	r0, r3
 8017078:	3718      	adds	r7, #24
 801707a:	46bd      	mov	sp, r7
 801707c:	bd80      	pop	{r7, pc}
 801707e:	bf00      	nop
 8017080:	0801fc68 	.word	0x0801fc68
 8017084:	0801fc78 	.word	0x0801fc78

08017088 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8017088:	b590      	push	{r4, r7, lr}
 801708a:	b085      	sub	sp, #20
 801708c:	af00      	add	r7, sp, #0
 801708e:	6078      	str	r0, [r7, #4]
 8017090:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 8017092:	f107 030c 	add.w	r3, r7, #12
 8017096:	4619      	mov	r1, r3
 8017098:	6878      	ldr	r0, [r7, #4]
 801709a:	f7ff fe69 	bl	8016d70 <pb_decode_varint32>
 801709e:	4603      	mov	r3, r0
 80170a0:	f083 0301 	eor.w	r3, r3, #1
 80170a4:	b2db      	uxtb	r3, r3
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d001      	beq.n	80170ae <pb_make_string_substream+0x26>
        return false;
 80170aa:	2300      	movs	r3, #0
 80170ac:	e020      	b.n	80170f0 <pb_make_string_substream+0x68>
    
    *substream = *stream;
 80170ae:	683a      	ldr	r2, [r7, #0]
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	4614      	mov	r4, r2
 80170b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80170b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 80170ba:	683b      	ldr	r3, [r7, #0]
 80170bc:	689a      	ldr	r2, [r3, #8]
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	429a      	cmp	r2, r3
 80170c2:	d20b      	bcs.n	80170dc <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	68db      	ldr	r3, [r3, #12]
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d002      	beq.n	80170d2 <pb_make_string_substream+0x4a>
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	68db      	ldr	r3, [r3, #12]
 80170d0:	e000      	b.n	80170d4 <pb_make_string_substream+0x4c>
 80170d2:	4b09      	ldr	r3, [pc, #36]	; (80170f8 <pb_make_string_substream+0x70>)
 80170d4:	687a      	ldr	r2, [r7, #4]
 80170d6:	60d3      	str	r3, [r2, #12]
 80170d8:	2300      	movs	r3, #0
 80170da:	e009      	b.n	80170f0 <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 80170dc:	68fa      	ldr	r2, [r7, #12]
 80170de:	683b      	ldr	r3, [r7, #0]
 80170e0:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	689a      	ldr	r2, [r3, #8]
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	1ad2      	subs	r2, r2, r3
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	609a      	str	r2, [r3, #8]
    return true;
 80170ee:	2301      	movs	r3, #1
}
 80170f0:	4618      	mov	r0, r3
 80170f2:	3714      	adds	r7, #20
 80170f4:	46bd      	mov	sp, r7
 80170f6:	bd90      	pop	{r4, r7, pc}
 80170f8:	0801fc8c 	.word	0x0801fc8c

080170fc <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 80170fc:	b580      	push	{r7, lr}
 80170fe:	b082      	sub	sp, #8
 8017100:	af00      	add	r7, sp, #0
 8017102:	6078      	str	r0, [r7, #4]
 8017104:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 8017106:	683b      	ldr	r3, [r7, #0]
 8017108:	689b      	ldr	r3, [r3, #8]
 801710a:	2b00      	cmp	r3, #0
 801710c:	d00e      	beq.n	801712c <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 801710e:	683b      	ldr	r3, [r7, #0]
 8017110:	689b      	ldr	r3, [r3, #8]
 8017112:	461a      	mov	r2, r3
 8017114:	2100      	movs	r1, #0
 8017116:	6838      	ldr	r0, [r7, #0]
 8017118:	f7ff fcb0 	bl	8016a7c <pb_read>
 801711c:	4603      	mov	r3, r0
 801711e:	f083 0301 	eor.w	r3, r3, #1
 8017122:	b2db      	uxtb	r3, r3
 8017124:	2b00      	cmp	r3, #0
 8017126:	d001      	beq.n	801712c <pb_close_string_substream+0x30>
            return false;
 8017128:	2300      	movs	r3, #0
 801712a:	e008      	b.n	801713e <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 801712c:	683b      	ldr	r3, [r7, #0]
 801712e:	685a      	ldr	r2, [r3, #4]
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 8017134:	683b      	ldr	r3, [r7, #0]
 8017136:	68da      	ldr	r2, [r3, #12]
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	60da      	str	r2, [r3, #12]
#endif
    return true;
 801713c:	2301      	movs	r3, #1
}
 801713e:	4618      	mov	r0, r3
 8017140:	3708      	adds	r7, #8
 8017142:	46bd      	mov	sp, r7
 8017144:	bd80      	pop	{r7, pc}
	...

08017148 <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8017148:	b580      	push	{r7, lr}
 801714a:	b084      	sub	sp, #16
 801714c:	af00      	add	r7, sp, #0
 801714e:	60f8      	str	r0, [r7, #12]
 8017150:	460b      	mov	r3, r1
 8017152:	607a      	str	r2, [r7, #4]
 8017154:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	7d9b      	ldrb	r3, [r3, #22]
 801715a:	f003 030f 	and.w	r3, r3, #15
 801715e:	2b0b      	cmp	r3, #11
 8017160:	f200 80d4 	bhi.w	801730c <decode_basic_field+0x1c4>
 8017164:	a201      	add	r2, pc, #4	; (adr r2, 801716c <decode_basic_field+0x24>)
 8017166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801716a:	bf00      	nop
 801716c:	0801719d 	.word	0x0801719d
 8017170:	080171cd 	.word	0x080171cd
 8017174:	080171cd 	.word	0x080171cd
 8017178:	080171cd 	.word	0x080171cd
 801717c:	080171fd 	.word	0x080171fd
 8017180:	08017231 	.word	0x08017231
 8017184:	08017265 	.word	0x08017265
 8017188:	0801728f 	.word	0x0801728f
 801718c:	080172b9 	.word	0x080172b9
 8017190:	080172b9 	.word	0x080172b9
 8017194:	0801730d 	.word	0x0801730d
 8017198:	080172e3 	.word	0x080172e3
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 801719c:	7afb      	ldrb	r3, [r7, #11]
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d00e      	beq.n	80171c0 <decode_basic_field+0x78>
 80171a2:	7afb      	ldrb	r3, [r7, #11]
 80171a4:	2bff      	cmp	r3, #255	; 0xff
 80171a6:	d00b      	beq.n	80171c0 <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	68db      	ldr	r3, [r3, #12]
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d002      	beq.n	80171b6 <decode_basic_field+0x6e>
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	68db      	ldr	r3, [r3, #12]
 80171b4:	e000      	b.n	80171b8 <decode_basic_field+0x70>
 80171b6:	4b5d      	ldr	r3, [pc, #372]	; (801732c <decode_basic_field+0x1e4>)
 80171b8:	68fa      	ldr	r2, [r7, #12]
 80171ba:	60d3      	str	r3, [r2, #12]
 80171bc:	2300      	movs	r3, #0
 80171be:	e0b0      	b.n	8017322 <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 80171c0:	6879      	ldr	r1, [r7, #4]
 80171c2:	68f8      	ldr	r0, [r7, #12]
 80171c4:	f000 fef6 	bl	8017fb4 <pb_dec_bool>
 80171c8:	4603      	mov	r3, r0
 80171ca:	e0aa      	b.n	8017322 <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 80171cc:	7afb      	ldrb	r3, [r7, #11]
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d00e      	beq.n	80171f0 <decode_basic_field+0xa8>
 80171d2:	7afb      	ldrb	r3, [r7, #11]
 80171d4:	2bff      	cmp	r3, #255	; 0xff
 80171d6:	d00b      	beq.n	80171f0 <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	68db      	ldr	r3, [r3, #12]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d002      	beq.n	80171e6 <decode_basic_field+0x9e>
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	68db      	ldr	r3, [r3, #12]
 80171e4:	e000      	b.n	80171e8 <decode_basic_field+0xa0>
 80171e6:	4b51      	ldr	r3, [pc, #324]	; (801732c <decode_basic_field+0x1e4>)
 80171e8:	68fa      	ldr	r2, [r7, #12]
 80171ea:	60d3      	str	r3, [r2, #12]
 80171ec:	2300      	movs	r3, #0
 80171ee:	e098      	b.n	8017322 <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 80171f0:	6879      	ldr	r1, [r7, #4]
 80171f2:	68f8      	ldr	r0, [r7, #12]
 80171f4:	f000 feee 	bl	8017fd4 <pb_dec_varint>
 80171f8:	4603      	mov	r3, r0
 80171fa:	e092      	b.n	8017322 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 80171fc:	7afb      	ldrb	r3, [r7, #11]
 80171fe:	2b05      	cmp	r3, #5
 8017200:	d00e      	beq.n	8017220 <decode_basic_field+0xd8>
 8017202:	7afb      	ldrb	r3, [r7, #11]
 8017204:	2bff      	cmp	r3, #255	; 0xff
 8017206:	d00b      	beq.n	8017220 <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	68db      	ldr	r3, [r3, #12]
 801720c:	2b00      	cmp	r3, #0
 801720e:	d002      	beq.n	8017216 <decode_basic_field+0xce>
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	68db      	ldr	r3, [r3, #12]
 8017214:	e000      	b.n	8017218 <decode_basic_field+0xd0>
 8017216:	4b45      	ldr	r3, [pc, #276]	; (801732c <decode_basic_field+0x1e4>)
 8017218:	68fa      	ldr	r2, [r7, #12]
 801721a:	60d3      	str	r3, [r2, #12]
 801721c:	2300      	movs	r3, #0
 801721e:	e080      	b.n	8017322 <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	69db      	ldr	r3, [r3, #28]
 8017224:	4619      	mov	r1, r3
 8017226:	68f8      	ldr	r0, [r7, #12]
 8017228:	f000 fe8a 	bl	8017f40 <pb_decode_fixed32>
 801722c:	4603      	mov	r3, r0
 801722e:	e078      	b.n	8017322 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 8017230:	7afb      	ldrb	r3, [r7, #11]
 8017232:	2b01      	cmp	r3, #1
 8017234:	d00e      	beq.n	8017254 <decode_basic_field+0x10c>
 8017236:	7afb      	ldrb	r3, [r7, #11]
 8017238:	2bff      	cmp	r3, #255	; 0xff
 801723a:	d00b      	beq.n	8017254 <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	68db      	ldr	r3, [r3, #12]
 8017240:	2b00      	cmp	r3, #0
 8017242:	d002      	beq.n	801724a <decode_basic_field+0x102>
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	68db      	ldr	r3, [r3, #12]
 8017248:	e000      	b.n	801724c <decode_basic_field+0x104>
 801724a:	4b38      	ldr	r3, [pc, #224]	; (801732c <decode_basic_field+0x1e4>)
 801724c:	68fa      	ldr	r2, [r7, #12]
 801724e:	60d3      	str	r3, [r2, #12]
 8017250:	2300      	movs	r3, #0
 8017252:	e066      	b.n	8017322 <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	69db      	ldr	r3, [r3, #28]
 8017258:	4619      	mov	r1, r3
 801725a:	68f8      	ldr	r0, [r7, #12]
 801725c:	f000 fe8c 	bl	8017f78 <pb_decode_fixed64>
 8017260:	4603      	mov	r3, r0
 8017262:	e05e      	b.n	8017322 <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 8017264:	7afb      	ldrb	r3, [r7, #11]
 8017266:	2b02      	cmp	r3, #2
 8017268:	d00b      	beq.n	8017282 <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	68db      	ldr	r3, [r3, #12]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d002      	beq.n	8017278 <decode_basic_field+0x130>
 8017272:	68fb      	ldr	r3, [r7, #12]
 8017274:	68db      	ldr	r3, [r3, #12]
 8017276:	e000      	b.n	801727a <decode_basic_field+0x132>
 8017278:	4b2c      	ldr	r3, [pc, #176]	; (801732c <decode_basic_field+0x1e4>)
 801727a:	68fa      	ldr	r2, [r7, #12]
 801727c:	60d3      	str	r3, [r2, #12]
 801727e:	2300      	movs	r3, #0
 8017280:	e04f      	b.n	8017322 <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 8017282:	6879      	ldr	r1, [r7, #4]
 8017284:	68f8      	ldr	r0, [r7, #12]
 8017286:	f000 ffd1 	bl	801822c <pb_dec_bytes>
 801728a:	4603      	mov	r3, r0
 801728c:	e049      	b.n	8017322 <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 801728e:	7afb      	ldrb	r3, [r7, #11]
 8017290:	2b02      	cmp	r3, #2
 8017292:	d00b      	beq.n	80172ac <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	68db      	ldr	r3, [r3, #12]
 8017298:	2b00      	cmp	r3, #0
 801729a:	d002      	beq.n	80172a2 <decode_basic_field+0x15a>
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	68db      	ldr	r3, [r3, #12]
 80172a0:	e000      	b.n	80172a4 <decode_basic_field+0x15c>
 80172a2:	4b22      	ldr	r3, [pc, #136]	; (801732c <decode_basic_field+0x1e4>)
 80172a4:	68fa      	ldr	r2, [r7, #12]
 80172a6:	60d3      	str	r3, [r2, #12]
 80172a8:	2300      	movs	r3, #0
 80172aa:	e03a      	b.n	8017322 <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 80172ac:	6879      	ldr	r1, [r7, #4]
 80172ae:	68f8      	ldr	r0, [r7, #12]
 80172b0:	f001 f830 	bl	8018314 <pb_dec_string>
 80172b4:	4603      	mov	r3, r0
 80172b6:	e034      	b.n	8017322 <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 80172b8:	7afb      	ldrb	r3, [r7, #11]
 80172ba:	2b02      	cmp	r3, #2
 80172bc:	d00b      	beq.n	80172d6 <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	68db      	ldr	r3, [r3, #12]
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d002      	beq.n	80172cc <decode_basic_field+0x184>
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	68db      	ldr	r3, [r3, #12]
 80172ca:	e000      	b.n	80172ce <decode_basic_field+0x186>
 80172cc:	4b17      	ldr	r3, [pc, #92]	; (801732c <decode_basic_field+0x1e4>)
 80172ce:	68fa      	ldr	r2, [r7, #12]
 80172d0:	60d3      	str	r3, [r2, #12]
 80172d2:	2300      	movs	r3, #0
 80172d4:	e025      	b.n	8017322 <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 80172d6:	6879      	ldr	r1, [r7, #4]
 80172d8:	68f8      	ldr	r0, [r7, #12]
 80172da:	f001 f897 	bl	801840c <pb_dec_submessage>
 80172de:	4603      	mov	r3, r0
 80172e0:	e01f      	b.n	8017322 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 80172e2:	7afb      	ldrb	r3, [r7, #11]
 80172e4:	2b02      	cmp	r3, #2
 80172e6:	d00b      	beq.n	8017300 <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	68db      	ldr	r3, [r3, #12]
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d002      	beq.n	80172f6 <decode_basic_field+0x1ae>
 80172f0:	68fb      	ldr	r3, [r7, #12]
 80172f2:	68db      	ldr	r3, [r3, #12]
 80172f4:	e000      	b.n	80172f8 <decode_basic_field+0x1b0>
 80172f6:	4b0d      	ldr	r3, [pc, #52]	; (801732c <decode_basic_field+0x1e4>)
 80172f8:	68fa      	ldr	r2, [r7, #12]
 80172fa:	60d3      	str	r3, [r2, #12]
 80172fc:	2300      	movs	r3, #0
 80172fe:	e010      	b.n	8017322 <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 8017300:	6879      	ldr	r1, [r7, #4]
 8017302:	68f8      	ldr	r0, [r7, #12]
 8017304:	f001 f90c 	bl	8018520 <pb_dec_fixed_length_bytes>
 8017308:	4603      	mov	r3, r0
 801730a:	e00a      	b.n	8017322 <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	68db      	ldr	r3, [r3, #12]
 8017310:	2b00      	cmp	r3, #0
 8017312:	d002      	beq.n	801731a <decode_basic_field+0x1d2>
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	68db      	ldr	r3, [r3, #12]
 8017318:	e000      	b.n	801731c <decode_basic_field+0x1d4>
 801731a:	4b05      	ldr	r3, [pc, #20]	; (8017330 <decode_basic_field+0x1e8>)
 801731c:	68fa      	ldr	r2, [r7, #12]
 801731e:	60d3      	str	r3, [r2, #12]
 8017320:	2300      	movs	r3, #0
    }
}
 8017322:	4618      	mov	r0, r3
 8017324:	3710      	adds	r7, #16
 8017326:	46bd      	mov	sp, r7
 8017328:	bd80      	pop	{r7, pc}
 801732a:	bf00      	nop
 801732c:	0801fca4 	.word	0x0801fca4
 8017330:	0801fcb4 	.word	0x0801fcb4

08017334 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8017334:	b580      	push	{r7, lr}
 8017336:	b096      	sub	sp, #88	; 0x58
 8017338:	af00      	add	r7, sp, #0
 801733a:	60f8      	str	r0, [r7, #12]
 801733c:	460b      	mov	r3, r1
 801733e:	607a      	str	r2, [r7, #4]
 8017340:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	7d9b      	ldrb	r3, [r3, #22]
 8017346:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801734a:	2b30      	cmp	r3, #48	; 0x30
 801734c:	f000 80c2 	beq.w	80174d4 <decode_static_field+0x1a0>
 8017350:	2b30      	cmp	r3, #48	; 0x30
 8017352:	f200 811a 	bhi.w	801758a <decode_static_field+0x256>
 8017356:	2b20      	cmp	r3, #32
 8017358:	d01f      	beq.n	801739a <decode_static_field+0x66>
 801735a:	2b20      	cmp	r3, #32
 801735c:	f200 8115 	bhi.w	801758a <decode_static_field+0x256>
 8017360:	2b00      	cmp	r3, #0
 8017362:	d002      	beq.n	801736a <decode_static_field+0x36>
 8017364:	2b10      	cmp	r3, #16
 8017366:	d008      	beq.n	801737a <decode_static_field+0x46>
 8017368:	e10f      	b.n	801758a <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 801736a:	7afb      	ldrb	r3, [r7, #11]
 801736c:	687a      	ldr	r2, [r7, #4]
 801736e:	4619      	mov	r1, r3
 8017370:	68f8      	ldr	r0, [r7, #12]
 8017372:	f7ff fee9 	bl	8017148 <decode_basic_field>
 8017376:	4603      	mov	r3, r0
 8017378:	e112      	b.n	80175a0 <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	6a1b      	ldr	r3, [r3, #32]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d003      	beq.n	801738a <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	6a1b      	ldr	r3, [r3, #32]
 8017386:	2201      	movs	r2, #1
 8017388:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 801738a:	7afb      	ldrb	r3, [r7, #11]
 801738c:	687a      	ldr	r2, [r7, #4]
 801738e:	4619      	mov	r1, r3
 8017390:	68f8      	ldr	r0, [r7, #12]
 8017392:	f7ff fed9 	bl	8017148 <decode_basic_field>
 8017396:	4603      	mov	r3, r0
 8017398:	e102      	b.n	80175a0 <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 801739a:	7afb      	ldrb	r3, [r7, #11]
 801739c:	2b02      	cmp	r3, #2
 801739e:	d16c      	bne.n	801747a <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	7d9b      	ldrb	r3, [r3, #22]
 80173a4:	f003 030f 	and.w	r3, r3, #15
 80173a8:	2b05      	cmp	r3, #5
 80173aa:	d866      	bhi.n	801747a <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 80173ac:	2301      	movs	r3, #1
 80173ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	6a1b      	ldr	r3, [r3, #32]
 80173b6:	653b      	str	r3, [r7, #80]	; 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	699b      	ldr	r3, [r3, #24]
 80173bc:	687a      	ldr	r2, [r7, #4]
 80173be:	8a52      	ldrh	r2, [r2, #18]
 80173c0:	4611      	mov	r1, r2
 80173c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80173c4:	8812      	ldrh	r2, [r2, #0]
 80173c6:	fb01 f202 	mul.w	r2, r1, r2
 80173ca:	441a      	add	r2, r3
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 80173d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80173d4:	4619      	mov	r1, r3
 80173d6:	68f8      	ldr	r0, [r7, #12]
 80173d8:	f7ff fe56 	bl	8017088 <pb_make_string_substream>
 80173dc:	4603      	mov	r3, r0
 80173de:	f083 0301 	eor.w	r3, r3, #1
 80173e2:	b2db      	uxtb	r3, r3
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d01f      	beq.n	8017428 <decode_static_field+0xf4>
                    return false;
 80173e8:	2300      	movs	r3, #0
 80173ea:	e0d9      	b.n	80175a0 <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 80173ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80173f0:	687a      	ldr	r2, [r7, #4]
 80173f2:	21ff      	movs	r1, #255	; 0xff
 80173f4:	4618      	mov	r0, r3
 80173f6:	f7ff fea7 	bl	8017148 <decode_basic_field>
 80173fa:	4603      	mov	r3, r0
 80173fc:	f083 0301 	eor.w	r3, r3, #1
 8017400:	b2db      	uxtb	r3, r3
 8017402:	2b00      	cmp	r3, #0
 8017404:	d003      	beq.n	801740e <decode_static_field+0xda>
                    {
                        status = false;
 8017406:	2300      	movs	r3, #0
 8017408:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 801740c:	e015      	b.n	801743a <decode_static_field+0x106>
                    }
                    (*size)++;
 801740e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017410:	881b      	ldrh	r3, [r3, #0]
 8017412:	3301      	adds	r3, #1
 8017414:	b29a      	uxth	r2, r3
 8017416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017418:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	69db      	ldr	r3, [r3, #28]
 801741e:	687a      	ldr	r2, [r7, #4]
 8017420:	8a52      	ldrh	r2, [r2, #18]
 8017422:	441a      	add	r2, r3
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 8017428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801742a:	2b00      	cmp	r3, #0
 801742c:	d005      	beq.n	801743a <decode_static_field+0x106>
 801742e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017430:	881a      	ldrh	r2, [r3, #0]
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	8a9b      	ldrh	r3, [r3, #20]
 8017436:	429a      	cmp	r2, r3
 8017438:	d3d8      	bcc.n	80173ec <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 801743a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801743c:	2b00      	cmp	r3, #0
 801743e:	d00b      	beq.n	8017458 <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	68db      	ldr	r3, [r3, #12]
 8017444:	2b00      	cmp	r3, #0
 8017446:	d002      	beq.n	801744e <decode_static_field+0x11a>
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	68db      	ldr	r3, [r3, #12]
 801744c:	e000      	b.n	8017450 <decode_static_field+0x11c>
 801744e:	4b56      	ldr	r3, [pc, #344]	; (80175a8 <decode_static_field+0x274>)
 8017450:	68fa      	ldr	r2, [r7, #12]
 8017452:	60d3      	str	r3, [r2, #12]
 8017454:	2300      	movs	r3, #0
 8017456:	e0a3      	b.n	80175a0 <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 8017458:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801745c:	4619      	mov	r1, r3
 801745e:	68f8      	ldr	r0, [r7, #12]
 8017460:	f7ff fe4c 	bl	80170fc <pb_close_string_substream>
 8017464:	4603      	mov	r3, r0
 8017466:	f083 0301 	eor.w	r3, r3, #1
 801746a:	b2db      	uxtb	r3, r3
 801746c:	2b00      	cmp	r3, #0
 801746e:	d001      	beq.n	8017474 <decode_static_field+0x140>
                    return false;
 8017470:	2300      	movs	r3, #0
 8017472:	e095      	b.n	80175a0 <decode_static_field+0x26c>

                return status;
 8017474:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017478:	e092      	b.n	80175a0 <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	6a1b      	ldr	r3, [r3, #32]
 801747e:	64fb      	str	r3, [r7, #76]	; 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	699b      	ldr	r3, [r3, #24]
 8017484:	687a      	ldr	r2, [r7, #4]
 8017486:	8a52      	ldrh	r2, [r2, #18]
 8017488:	4611      	mov	r1, r2
 801748a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801748c:	8812      	ldrh	r2, [r2, #0]
 801748e:	fb01 f202 	mul.w	r2, r1, r2
 8017492:	441a      	add	r2, r3
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 8017498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801749a:	881b      	ldrh	r3, [r3, #0]
 801749c:	1c5a      	adds	r2, r3, #1
 801749e:	b291      	uxth	r1, r2
 80174a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80174a2:	8011      	strh	r1, [r2, #0]
 80174a4:	687a      	ldr	r2, [r7, #4]
 80174a6:	8a92      	ldrh	r2, [r2, #20]
 80174a8:	4293      	cmp	r3, r2
 80174aa:	d30b      	bcc.n	80174c4 <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	68db      	ldr	r3, [r3, #12]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d002      	beq.n	80174ba <decode_static_field+0x186>
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	68db      	ldr	r3, [r3, #12]
 80174b8:	e000      	b.n	80174bc <decode_static_field+0x188>
 80174ba:	4b3b      	ldr	r3, [pc, #236]	; (80175a8 <decode_static_field+0x274>)
 80174bc:	68fa      	ldr	r2, [r7, #12]
 80174be:	60d3      	str	r3, [r2, #12]
 80174c0:	2300      	movs	r3, #0
 80174c2:	e06d      	b.n	80175a0 <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 80174c4:	7afb      	ldrb	r3, [r7, #11]
 80174c6:	687a      	ldr	r2, [r7, #4]
 80174c8:	4619      	mov	r1, r3
 80174ca:	68f8      	ldr	r0, [r7, #12]
 80174cc:	f7ff fe3c 	bl	8017148 <decode_basic_field>
 80174d0:	4603      	mov	r3, r0
 80174d2:	e065      	b.n	80175a0 <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	7d9b      	ldrb	r3, [r3, #22]
 80174d8:	f003 030f 	and.w	r3, r3, #15
 80174dc:	2b08      	cmp	r3, #8
 80174de:	d005      	beq.n	80174ec <decode_static_field+0x1b8>
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	7d9b      	ldrb	r3, [r3, #22]
 80174e4:	f003 030f 	and.w	r3, r3, #15
 80174e8:	2b09      	cmp	r3, #9
 80174ea:	d141      	bne.n	8017570 <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	6a1b      	ldr	r3, [r3, #32]
 80174f0:	881a      	ldrh	r2, [r3, #0]
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 80174f6:	429a      	cmp	r2, r3
 80174f8:	d03a      	beq.n	8017570 <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	69d8      	ldr	r0, [r3, #28]
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	8a5b      	ldrh	r3, [r3, #18]
 8017502:	461a      	mov	r2, r3
 8017504:	2100      	movs	r1, #0
 8017506:	f002 f997 	bl	8019838 <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801750e:	689b      	ldr	r3, [r3, #8]
 8017510:	2b00      	cmp	r3, #0
 8017512:	d10a      	bne.n	801752a <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017518:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 801751a:	2b00      	cmp	r3, #0
 801751c:	d105      	bne.n	801752a <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017522:	685b      	ldr	r3, [r3, #4]
 8017524:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 8017526:	2b00      	cmp	r3, #0
 8017528:	d022      	beq.n	8017570 <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	69da      	ldr	r2, [r3, #28]
 8017532:	f107 0314 	add.w	r3, r7, #20
 8017536:	4618      	mov	r0, r3
 8017538:	f7ff f935 	bl	80167a6 <pb_field_iter_begin>
 801753c:	4603      	mov	r3, r0
 801753e:	2b00      	cmp	r3, #0
 8017540:	d016      	beq.n	8017570 <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 8017542:	f107 0314 	add.w	r3, r7, #20
 8017546:	4618      	mov	r0, r3
 8017548:	f000 fa4d 	bl	80179e6 <pb_message_set_to_defaults>
 801754c:	4603      	mov	r3, r0
 801754e:	f083 0301 	eor.w	r3, r3, #1
 8017552:	b2db      	uxtb	r3, r3
 8017554:	2b00      	cmp	r3, #0
 8017556:	d00b      	beq.n	8017570 <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	68db      	ldr	r3, [r3, #12]
 801755c:	2b00      	cmp	r3, #0
 801755e:	d002      	beq.n	8017566 <decode_static_field+0x232>
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	68db      	ldr	r3, [r3, #12]
 8017564:	e000      	b.n	8017568 <decode_static_field+0x234>
 8017566:	4b11      	ldr	r3, [pc, #68]	; (80175ac <decode_static_field+0x278>)
 8017568:	68fa      	ldr	r2, [r7, #12]
 801756a:	60d3      	str	r3, [r2, #12]
 801756c:	2300      	movs	r3, #0
 801756e:	e017      	b.n	80175a0 <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	6a1b      	ldr	r3, [r3, #32]
 8017574:	687a      	ldr	r2, [r7, #4]
 8017576:	8a12      	ldrh	r2, [r2, #16]
 8017578:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 801757a:	7afb      	ldrb	r3, [r7, #11]
 801757c:	687a      	ldr	r2, [r7, #4]
 801757e:	4619      	mov	r1, r3
 8017580:	68f8      	ldr	r0, [r7, #12]
 8017582:	f7ff fde1 	bl	8017148 <decode_basic_field>
 8017586:	4603      	mov	r3, r0
 8017588:	e00a      	b.n	80175a0 <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 801758a:	68fb      	ldr	r3, [r7, #12]
 801758c:	68db      	ldr	r3, [r3, #12]
 801758e:	2b00      	cmp	r3, #0
 8017590:	d002      	beq.n	8017598 <decode_static_field+0x264>
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	68db      	ldr	r3, [r3, #12]
 8017596:	e000      	b.n	801759a <decode_static_field+0x266>
 8017598:	4b05      	ldr	r3, [pc, #20]	; (80175b0 <decode_static_field+0x27c>)
 801759a:	68fa      	ldr	r2, [r7, #12]
 801759c:	60d3      	str	r3, [r2, #12]
 801759e:	2300      	movs	r3, #0
    }
}
 80175a0:	4618      	mov	r0, r3
 80175a2:	3758      	adds	r7, #88	; 0x58
 80175a4:	46bd      	mov	sp, r7
 80175a6:	bd80      	pop	{r7, pc}
 80175a8:	0801fcc8 	.word	0x0801fcc8
 80175ac:	0801fcd8 	.word	0x0801fcd8
 80175b0:	0801fcb4 	.word	0x0801fcb4

080175b4 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80175b4:	b480      	push	{r7}
 80175b6:	b085      	sub	sp, #20
 80175b8:	af00      	add	r7, sp, #0
 80175ba:	60f8      	str	r0, [r7, #12]
 80175bc:	460b      	mov	r3, r1
 80175be:	607a      	str	r2, [r7, #4]
 80175c0:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	68db      	ldr	r3, [r3, #12]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d002      	beq.n	80175d0 <decode_pointer_field+0x1c>
 80175ca:	68fb      	ldr	r3, [r7, #12]
 80175cc:	68db      	ldr	r3, [r3, #12]
 80175ce:	e000      	b.n	80175d2 <decode_pointer_field+0x1e>
 80175d0:	4b04      	ldr	r3, [pc, #16]	; (80175e4 <decode_pointer_field+0x30>)
 80175d2:	68fa      	ldr	r2, [r7, #12]
 80175d4:	60d3      	str	r3, [r2, #12]
 80175d6:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 80175d8:	4618      	mov	r0, r3
 80175da:	3714      	adds	r7, #20
 80175dc:	46bd      	mov	sp, r7
 80175de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175e2:	4770      	bx	lr
 80175e4:	0801fcf0 	.word	0x0801fcf0

080175e8 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80175e8:	b590      	push	{r4, r7, lr}
 80175ea:	b097      	sub	sp, #92	; 0x5c
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	61f8      	str	r0, [r7, #28]
 80175f0:	460b      	mov	r3, r1
 80175f2:	617a      	str	r2, [r7, #20]
 80175f4:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 80175f6:	697b      	ldr	r3, [r7, #20]
 80175f8:	681b      	ldr	r3, [r3, #0]
 80175fa:	68db      	ldr	r3, [r3, #12]
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d106      	bne.n	801760e <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 8017600:	7efb      	ldrb	r3, [r7, #27]
 8017602:	4619      	mov	r1, r3
 8017604:	69f8      	ldr	r0, [r7, #28]
 8017606:	f7ff fc91 	bl	8016f2c <pb_skip_field>
 801760a:	4603      	mov	r3, r0
 801760c:	e070      	b.n	80176f0 <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 801760e:	7efb      	ldrb	r3, [r7, #27]
 8017610:	2b02      	cmp	r3, #2
 8017612:	d145      	bne.n	80176a0 <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 8017614:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017618:	4619      	mov	r1, r3
 801761a:	69f8      	ldr	r0, [r7, #28]
 801761c:	f7ff fd34 	bl	8017088 <pb_make_string_substream>
 8017620:	4603      	mov	r3, r0
 8017622:	f083 0301 	eor.w	r3, r3, #1
 8017626:	b2db      	uxtb	r3, r3
 8017628:	2b00      	cmp	r3, #0
 801762a:	d001      	beq.n	8017630 <decode_callback_field+0x48>
            return false;
 801762c:	2300      	movs	r3, #0
 801762e:	e05f      	b.n	80176f0 <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 8017630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017632:	657b      	str	r3, [r7, #84]	; 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 8017634:	697b      	ldr	r3, [r7, #20]
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	68db      	ldr	r3, [r3, #12]
 801763a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 801763e:	697a      	ldr	r2, [r7, #20]
 8017640:	2100      	movs	r1, #0
 8017642:	4798      	blx	r3
 8017644:	4603      	mov	r3, r0
 8017646:	f083 0301 	eor.w	r3, r3, #1
 801764a:	b2db      	uxtb	r3, r3
 801764c:	2b00      	cmp	r3, #0
 801764e:	d010      	beq.n	8017672 <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 8017650:	69fb      	ldr	r3, [r7, #28]
 8017652:	68db      	ldr	r3, [r3, #12]
 8017654:	2b00      	cmp	r3, #0
 8017656:	d002      	beq.n	801765e <decode_callback_field+0x76>
 8017658:	69fb      	ldr	r3, [r7, #28]
 801765a:	68db      	ldr	r3, [r3, #12]
 801765c:	e005      	b.n	801766a <decode_callback_field+0x82>
 801765e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017660:	2b00      	cmp	r3, #0
 8017662:	d001      	beq.n	8017668 <decode_callback_field+0x80>
 8017664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017666:	e000      	b.n	801766a <decode_callback_field+0x82>
 8017668:	4b23      	ldr	r3, [pc, #140]	; (80176f8 <decode_callback_field+0x110>)
 801766a:	69fa      	ldr	r2, [r7, #28]
 801766c:	60d3      	str	r3, [r2, #12]
                return false;
 801766e:	2300      	movs	r3, #0
 8017670:	e03e      	b.n	80176f0 <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 8017672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017674:	2b00      	cmp	r3, #0
 8017676:	d003      	beq.n	8017680 <decode_callback_field+0x98>
 8017678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801767a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801767c:	429a      	cmp	r2, r3
 801767e:	d8d7      	bhi.n	8017630 <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 8017680:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017684:	4619      	mov	r1, r3
 8017686:	69f8      	ldr	r0, [r7, #28]
 8017688:	f7ff fd38 	bl	80170fc <pb_close_string_substream>
 801768c:	4603      	mov	r3, r0
 801768e:	f083 0301 	eor.w	r3, r3, #1
 8017692:	b2db      	uxtb	r3, r3
 8017694:	2b00      	cmp	r3, #0
 8017696:	d001      	beq.n	801769c <decode_callback_field+0xb4>
            return false;
 8017698:	2300      	movs	r3, #0
 801769a:	e029      	b.n	80176f0 <decode_callback_field+0x108>

        return true;
 801769c:	2301      	movs	r3, #1
 801769e:	e027      	b.n	80176f0 <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 80176a0:	230a      	movs	r3, #10
 80176a2:	627b      	str	r3, [r7, #36]	; 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 80176a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80176a8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80176ac:	7ef9      	ldrb	r1, [r7, #27]
 80176ae:	69f8      	ldr	r0, [r7, #28]
 80176b0:	f7ff fc7e 	bl	8016fb0 <read_raw_value>
 80176b4:	4603      	mov	r3, r0
 80176b6:	f083 0301 	eor.w	r3, r3, #1
 80176ba:	b2db      	uxtb	r3, r3
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d001      	beq.n	80176c4 <decode_callback_field+0xdc>
            return false;
 80176c0:	2300      	movs	r3, #0
 80176c2:	e015      	b.n	80176f0 <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 80176c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80176c6:	463b      	mov	r3, r7
 80176c8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80176cc:	4618      	mov	r0, r3
 80176ce:	f7ff fa87 	bl	8016be0 <pb_istream_from_buffer>
 80176d2:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80176d6:	463b      	mov	r3, r7
 80176d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80176da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 80176de:	697b      	ldr	r3, [r7, #20]
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	68db      	ldr	r3, [r3, #12]
 80176e4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80176e8:	697a      	ldr	r2, [r7, #20]
 80176ea:	2100      	movs	r1, #0
 80176ec:	4798      	blx	r3
 80176ee:	4603      	mov	r3, r0
    }
}
 80176f0:	4618      	mov	r0, r3
 80176f2:	375c      	adds	r7, #92	; 0x5c
 80176f4:	46bd      	mov	sp, r7
 80176f6:	bd90      	pop	{r4, r7, pc}
 80176f8:	0801fd04 	.word	0x0801fd04

080176fc <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80176fc:	b580      	push	{r7, lr}
 80176fe:	b084      	sub	sp, #16
 8017700:	af00      	add	r7, sp, #0
 8017702:	60f8      	str	r0, [r7, #12]
 8017704:	460b      	mov	r3, r1
 8017706:	607a      	str	r2, [r7, #4]
 8017708:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	7d9b      	ldrb	r3, [r3, #22]
 801770e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8017712:	2b80      	cmp	r3, #128	; 0x80
 8017714:	d00e      	beq.n	8017734 <decode_field+0x38>
 8017716:	2b80      	cmp	r3, #128	; 0x80
 8017718:	d81c      	bhi.n	8017754 <decode_field+0x58>
 801771a:	2b00      	cmp	r3, #0
 801771c:	d002      	beq.n	8017724 <decode_field+0x28>
 801771e:	2b40      	cmp	r3, #64	; 0x40
 8017720:	d010      	beq.n	8017744 <decode_field+0x48>
 8017722:	e017      	b.n	8017754 <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 8017724:	7afb      	ldrb	r3, [r7, #11]
 8017726:	687a      	ldr	r2, [r7, #4]
 8017728:	4619      	mov	r1, r3
 801772a:	68f8      	ldr	r0, [r7, #12]
 801772c:	f7ff fe02 	bl	8017334 <decode_static_field>
 8017730:	4603      	mov	r3, r0
 8017732:	e01a      	b.n	801776a <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 8017734:	7afb      	ldrb	r3, [r7, #11]
 8017736:	687a      	ldr	r2, [r7, #4]
 8017738:	4619      	mov	r1, r3
 801773a:	68f8      	ldr	r0, [r7, #12]
 801773c:	f7ff ff3a 	bl	80175b4 <decode_pointer_field>
 8017740:	4603      	mov	r3, r0
 8017742:	e012      	b.n	801776a <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 8017744:	7afb      	ldrb	r3, [r7, #11]
 8017746:	687a      	ldr	r2, [r7, #4]
 8017748:	4619      	mov	r1, r3
 801774a:	68f8      	ldr	r0, [r7, #12]
 801774c:	f7ff ff4c 	bl	80175e8 <decode_callback_field>
 8017750:	4603      	mov	r3, r0
 8017752:	e00a      	b.n	801776a <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	68db      	ldr	r3, [r3, #12]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d002      	beq.n	8017762 <decode_field+0x66>
 801775c:	68fb      	ldr	r3, [r7, #12]
 801775e:	68db      	ldr	r3, [r3, #12]
 8017760:	e000      	b.n	8017764 <decode_field+0x68>
 8017762:	4b04      	ldr	r3, [pc, #16]	; (8017774 <decode_field+0x78>)
 8017764:	68fa      	ldr	r2, [r7, #12]
 8017766:	60d3      	str	r3, [r2, #12]
 8017768:	2300      	movs	r3, #0
    }
}
 801776a:	4618      	mov	r0, r3
 801776c:	3710      	adds	r7, #16
 801776e:	46bd      	mov	sp, r7
 8017770:	bd80      	pop	{r7, pc}
 8017772:	bf00      	nop
 8017774:	0801fcb4 	.word	0x0801fcb4

08017778 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 8017778:	b580      	push	{r7, lr}
 801777a:	b08e      	sub	sp, #56	; 0x38
 801777c:	af00      	add	r7, sp, #0
 801777e:	60f8      	str	r0, [r7, #12]
 8017780:	60b9      	str	r1, [r7, #8]
 8017782:	607a      	str	r2, [r7, #4]
 8017784:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 8017786:	f107 0310 	add.w	r3, r7, #16
 801778a:	68b9      	ldr	r1, [r7, #8]
 801778c:	4618      	mov	r0, r3
 801778e:	f7ff f823 	bl	80167d8 <pb_field_iter_begin_extension>
 8017792:	4603      	mov	r3, r0
 8017794:	f083 0301 	eor.w	r3, r3, #1
 8017798:	b2db      	uxtb	r3, r3
 801779a:	2b00      	cmp	r3, #0
 801779c:	d00b      	beq.n	80177b6 <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	68db      	ldr	r3, [r3, #12]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d002      	beq.n	80177ac <default_extension_decoder+0x34>
 80177a6:	68fb      	ldr	r3, [r7, #12]
 80177a8:	68db      	ldr	r3, [r3, #12]
 80177aa:	e000      	b.n	80177ae <default_extension_decoder+0x36>
 80177ac:	4b0e      	ldr	r3, [pc, #56]	; (80177e8 <default_extension_decoder+0x70>)
 80177ae:	68fa      	ldr	r2, [r7, #12]
 80177b0:	60d3      	str	r3, [r2, #12]
 80177b2:	2300      	movs	r3, #0
 80177b4:	e014      	b.n	80177e0 <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 80177b6:	8c3b      	ldrh	r3, [r7, #32]
 80177b8:	461a      	mov	r2, r3
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	4293      	cmp	r3, r2
 80177be:	d102      	bne.n	80177c6 <default_extension_decoder+0x4e>
 80177c0:	697b      	ldr	r3, [r7, #20]
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d101      	bne.n	80177ca <default_extension_decoder+0x52>
        return true;
 80177c6:	2301      	movs	r3, #1
 80177c8:	e00a      	b.n	80177e0 <default_extension_decoder+0x68>

    extension->found = true;
 80177ca:	68bb      	ldr	r3, [r7, #8]
 80177cc:	2201      	movs	r2, #1
 80177ce:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 80177d0:	f107 0210 	add.w	r2, r7, #16
 80177d4:	78fb      	ldrb	r3, [r7, #3]
 80177d6:	4619      	mov	r1, r3
 80177d8:	68f8      	ldr	r0, [r7, #12]
 80177da:	f7ff ff8f 	bl	80176fc <decode_field>
 80177de:	4603      	mov	r3, r0
}
 80177e0:	4618      	mov	r0, r3
 80177e2:	3738      	adds	r7, #56	; 0x38
 80177e4:	46bd      	mov	sp, r7
 80177e6:	bd80      	pop	{r7, pc}
 80177e8:	0801fd14 	.word	0x0801fd14

080177ec <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 80177ec:	b590      	push	{r4, r7, lr}
 80177ee:	b087      	sub	sp, #28
 80177f0:	af00      	add	r7, sp, #0
 80177f2:	60f8      	str	r0, [r7, #12]
 80177f4:	60b9      	str	r1, [r7, #8]
 80177f6:	603b      	str	r3, [r7, #0]
 80177f8:	4613      	mov	r3, r2
 80177fa:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 80177fc:	68fb      	ldr	r3, [r7, #12]
 80177fe:	689b      	ldr	r3, [r3, #8]
 8017800:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 8017802:	e022      	b.n	801784a <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 8017804:	683b      	ldr	r3, [r7, #0]
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	2b00      	cmp	r3, #0
 801780c:	d00a      	beq.n	8017824 <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 801780e:	683b      	ldr	r3, [r7, #0]
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	681c      	ldr	r4, [r3, #0]
 8017814:	79fb      	ldrb	r3, [r7, #7]
 8017816:	68ba      	ldr	r2, [r7, #8]
 8017818:	6839      	ldr	r1, [r7, #0]
 801781a:	68f8      	ldr	r0, [r7, #12]
 801781c:	47a0      	blx	r4
 801781e:	4603      	mov	r3, r0
 8017820:	75fb      	strb	r3, [r7, #23]
 8017822:	e007      	b.n	8017834 <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 8017824:	79fb      	ldrb	r3, [r7, #7]
 8017826:	68ba      	ldr	r2, [r7, #8]
 8017828:	6839      	ldr	r1, [r7, #0]
 801782a:	68f8      	ldr	r0, [r7, #12]
 801782c:	f7ff ffa4 	bl	8017778 <default_extension_decoder>
 8017830:	4603      	mov	r3, r0
 8017832:	75fb      	strb	r3, [r7, #23]

        if (!status)
 8017834:	7dfb      	ldrb	r3, [r7, #23]
 8017836:	f083 0301 	eor.w	r3, r3, #1
 801783a:	b2db      	uxtb	r3, r3
 801783c:	2b00      	cmp	r3, #0
 801783e:	d001      	beq.n	8017844 <decode_extension+0x58>
            return false;
 8017840:	2300      	movs	r3, #0
 8017842:	e00b      	b.n	801785c <decode_extension+0x70>
        
        extension = extension->next;
 8017844:	683b      	ldr	r3, [r7, #0]
 8017846:	689b      	ldr	r3, [r3, #8]
 8017848:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 801784a:	683b      	ldr	r3, [r7, #0]
 801784c:	2b00      	cmp	r3, #0
 801784e:	d004      	beq.n	801785a <decode_extension+0x6e>
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	689b      	ldr	r3, [r3, #8]
 8017854:	693a      	ldr	r2, [r7, #16]
 8017856:	429a      	cmp	r2, r3
 8017858:	d0d4      	beq.n	8017804 <decode_extension+0x18>
    }
    
    return true;
 801785a:	2301      	movs	r3, #1
}
 801785c:	4618      	mov	r0, r3
 801785e:	371c      	adds	r7, #28
 8017860:	46bd      	mov	sp, r7
 8017862:	bd90      	pop	{r4, r7, pc}

08017864 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 8017864:	b580      	push	{r7, lr}
 8017866:	b08e      	sub	sp, #56	; 0x38
 8017868:	af00      	add	r7, sp, #0
 801786a:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	7d9b      	ldrb	r3, [r3, #22]
 8017870:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8017874:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8017878:	f003 030f 	and.w	r3, r3, #15
 801787c:	2b0a      	cmp	r3, #10
 801787e:	d124      	bne.n	80178ca <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	69db      	ldr	r3, [r3, #28]
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 8017888:	e01b      	b.n	80178c2 <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 801788a:	f107 0308 	add.w	r3, r7, #8
 801788e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017890:	4618      	mov	r0, r3
 8017892:	f7fe ffa1 	bl	80167d8 <pb_field_iter_begin_extension>
 8017896:	4603      	mov	r3, r0
 8017898:	2b00      	cmp	r3, #0
 801789a:	d00f      	beq.n	80178bc <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 801789c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801789e:	2200      	movs	r2, #0
 80178a0:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 80178a2:	f107 0308 	add.w	r3, r7, #8
 80178a6:	4618      	mov	r0, r3
 80178a8:	f000 f89d 	bl	80179e6 <pb_message_set_to_defaults>
 80178ac:	4603      	mov	r3, r0
 80178ae:	f083 0301 	eor.w	r3, r3, #1
 80178b2:	b2db      	uxtb	r3, r3
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d001      	beq.n	80178bc <pb_field_set_to_default+0x58>
                    return false;
 80178b8:	2300      	movs	r3, #0
 80178ba:	e090      	b.n	80179de <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 80178bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80178be:	689b      	ldr	r3, [r3, #8]
 80178c0:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 80178c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d1e0      	bne.n	801788a <pb_field_set_to_default+0x26>
 80178c8:	e088      	b.n	80179dc <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80178ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80178ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d166      	bne.n	80179a4 <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 80178d6:	2301      	movs	r3, #1
 80178d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 80178dc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80178e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80178e4:	2b10      	cmp	r3, #16
 80178e6:	d108      	bne.n	80178fa <pb_field_set_to_default+0x96>
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	6a1b      	ldr	r3, [r3, #32]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d004      	beq.n	80178fa <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	6a1b      	ldr	r3, [r3, #32]
 80178f4:	2200      	movs	r2, #0
 80178f6:	701a      	strb	r2, [r3, #0]
 80178f8:	e012      	b.n	8017920 <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80178fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80178fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8017902:	2b20      	cmp	r3, #32
 8017904:	d005      	beq.n	8017912 <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8017906:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801790a:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 801790e:	2b30      	cmp	r3, #48	; 0x30
 8017910:	d106      	bne.n	8017920 <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	6a1b      	ldr	r3, [r3, #32]
 8017916:	2200      	movs	r2, #0
 8017918:	801a      	strh	r2, [r3, #0]
            init_data = false;
 801791a:	2300      	movs	r3, #0
 801791c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        if (init_data)
 8017920:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017924:	2b00      	cmp	r3, #0
 8017926:	d059      	beq.n	80179dc <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	7d9b      	ldrb	r3, [r3, #22]
 801792c:	f003 030f 	and.w	r3, r3, #15
 8017930:	2b08      	cmp	r3, #8
 8017932:	d005      	beq.n	8017940 <pb_field_set_to_default+0xdc>
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	7d9b      	ldrb	r3, [r3, #22]
 8017938:	f003 030f 	and.w	r3, r3, #15
 801793c:	2b09      	cmp	r3, #9
 801793e:	d128      	bne.n	8017992 <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017944:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8017946:	2b00      	cmp	r3, #0
 8017948:	d10a      	bne.n	8017960 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801794e:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 8017950:	2b00      	cmp	r3, #0
 8017952:	d105      	bne.n	8017960 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017958:	685b      	ldr	r3, [r3, #4]
 801795a:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 801795c:	2b00      	cmp	r3, #0
 801795e:	d018      	beq.n	8017992 <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	69da      	ldr	r2, [r3, #28]
 8017968:	f107 0308 	add.w	r3, r7, #8
 801796c:	4618      	mov	r0, r3
 801796e:	f7fe ff1a 	bl	80167a6 <pb_field_iter_begin>
 8017972:	4603      	mov	r3, r0
 8017974:	2b00      	cmp	r3, #0
 8017976:	d030      	beq.n	80179da <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 8017978:	f107 0308 	add.w	r3, r7, #8
 801797c:	4618      	mov	r0, r3
 801797e:	f000 f832 	bl	80179e6 <pb_message_set_to_defaults>
 8017982:	4603      	mov	r3, r0
 8017984:	f083 0301 	eor.w	r3, r3, #1
 8017988:	b2db      	uxtb	r3, r3
 801798a:	2b00      	cmp	r3, #0
 801798c:	d025      	beq.n	80179da <pb_field_set_to_default+0x176>
                        return false;
 801798e:	2300      	movs	r3, #0
 8017990:	e025      	b.n	80179de <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	69d8      	ldr	r0, [r3, #28]
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	8a5b      	ldrh	r3, [r3, #18]
 801799a:	461a      	mov	r2, r3
 801799c:	2100      	movs	r1, #0
 801799e:	f001 ff4b 	bl	8019838 <memset>
 80179a2:	e01b      	b.n	80179dc <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 80179a4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80179a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80179ac:	2b80      	cmp	r3, #128	; 0x80
 80179ae:	d115      	bne.n	80179dc <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	699b      	ldr	r3, [r3, #24]
 80179b4:	2200      	movs	r2, #0
 80179b6:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80179b8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80179bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80179c0:	2b20      	cmp	r3, #32
 80179c2:	d005      	beq.n	80179d0 <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 80179c4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80179c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80179cc:	2b30      	cmp	r3, #48	; 0x30
 80179ce:	d105      	bne.n	80179dc <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	6a1b      	ldr	r3, [r3, #32]
 80179d4:	2200      	movs	r2, #0
 80179d6:	801a      	strh	r2, [r3, #0]
 80179d8:	e000      	b.n	80179dc <pb_field_set_to_default+0x178>
            {
 80179da:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 80179dc:	2301      	movs	r3, #1
}
 80179de:	4618      	mov	r0, r3
 80179e0:	3738      	adds	r7, #56	; 0x38
 80179e2:	46bd      	mov	sp, r7
 80179e4:	bd80      	pop	{r7, pc}

080179e6 <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 80179e6:	b590      	push	{r4, r7, lr}
 80179e8:	b08d      	sub	sp, #52	; 0x34
 80179ea:	af00      	add	r7, sp, #0
 80179ec:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 80179ee:	f107 0320 	add.w	r3, r7, #32
 80179f2:	2200      	movs	r2, #0
 80179f4:	601a      	str	r2, [r3, #0]
 80179f6:	605a      	str	r2, [r3, #4]
 80179f8:	609a      	str	r2, [r3, #8]
 80179fa:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 80179fc:	2300      	movs	r3, #0
 80179fe:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 8017a00:	2300      	movs	r3, #0
 8017a02:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 8017a04:	697b      	ldr	r3, [r7, #20]
 8017a06:	681b      	ldr	r3, [r3, #0]
 8017a08:	689b      	ldr	r3, [r3, #8]
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d020      	beq.n	8017a50 <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 8017a0e:	697b      	ldr	r3, [r7, #20]
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	6899      	ldr	r1, [r3, #8]
 8017a14:	463b      	mov	r3, r7
 8017a16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	f7ff f8e0 	bl	8016be0 <pb_istream_from_buffer>
 8017a20:	f107 0420 	add.w	r4, r7, #32
 8017a24:	463b      	mov	r3, r7
 8017a26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017a28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8017a2c:	f107 031a 	add.w	r3, r7, #26
 8017a30:	f107 021c 	add.w	r2, r7, #28
 8017a34:	f107 011b 	add.w	r1, r7, #27
 8017a38:	f107 0020 	add.w	r0, r7, #32
 8017a3c:	f7ff fa47 	bl	8016ece <pb_decode_tag>
 8017a40:	4603      	mov	r3, r0
 8017a42:	f083 0301 	eor.w	r3, r3, #1
 8017a46:	b2db      	uxtb	r3, r3
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d001      	beq.n	8017a50 <pb_message_set_to_defaults+0x6a>
            return false;
 8017a4c:	2300      	movs	r3, #0
 8017a4e:	e043      	b.n	8017ad8 <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 8017a50:	6978      	ldr	r0, [r7, #20]
 8017a52:	f7ff ff07 	bl	8017864 <pb_field_set_to_default>
 8017a56:	4603      	mov	r3, r0
 8017a58:	f083 0301 	eor.w	r3, r3, #1
 8017a5c:	b2db      	uxtb	r3, r3
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d001      	beq.n	8017a66 <pb_message_set_to_defaults+0x80>
            return false;
 8017a62:	2300      	movs	r3, #0
 8017a64:	e038      	b.n	8017ad8 <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 8017a66:	69fb      	ldr	r3, [r7, #28]
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d02e      	beq.n	8017aca <pb_message_set_to_defaults+0xe4>
 8017a6c:	697b      	ldr	r3, [r7, #20]
 8017a6e:	8a1b      	ldrh	r3, [r3, #16]
 8017a70:	461a      	mov	r2, r3
 8017a72:	69fb      	ldr	r3, [r7, #28]
 8017a74:	429a      	cmp	r2, r3
 8017a76:	d128      	bne.n	8017aca <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 8017a78:	7ef9      	ldrb	r1, [r7, #27]
 8017a7a:	f107 0320 	add.w	r3, r7, #32
 8017a7e:	697a      	ldr	r2, [r7, #20]
 8017a80:	4618      	mov	r0, r3
 8017a82:	f7ff fe3b 	bl	80176fc <decode_field>
 8017a86:	4603      	mov	r3, r0
 8017a88:	f083 0301 	eor.w	r3, r3, #1
 8017a8c:	b2db      	uxtb	r3, r3
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d001      	beq.n	8017a96 <pb_message_set_to_defaults+0xb0>
                return false;
 8017a92:	2300      	movs	r3, #0
 8017a94:	e020      	b.n	8017ad8 <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8017a96:	f107 031a 	add.w	r3, r7, #26
 8017a9a:	f107 021c 	add.w	r2, r7, #28
 8017a9e:	f107 011b 	add.w	r1, r7, #27
 8017aa2:	f107 0020 	add.w	r0, r7, #32
 8017aa6:	f7ff fa12 	bl	8016ece <pb_decode_tag>
 8017aaa:	4603      	mov	r3, r0
 8017aac:	f083 0301 	eor.w	r3, r3, #1
 8017ab0:	b2db      	uxtb	r3, r3
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d001      	beq.n	8017aba <pb_message_set_to_defaults+0xd4>
                return false;
 8017ab6:	2300      	movs	r3, #0
 8017ab8:	e00e      	b.n	8017ad8 <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 8017aba:	697b      	ldr	r3, [r7, #20]
 8017abc:	6a1b      	ldr	r3, [r3, #32]
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d003      	beq.n	8017aca <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 8017ac2:	697b      	ldr	r3, [r7, #20]
 8017ac4:	6a1b      	ldr	r3, [r3, #32]
 8017ac6:	2200      	movs	r2, #0
 8017ac8:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 8017aca:	6978      	ldr	r0, [r7, #20]
 8017acc:	f7fe feb4 	bl	8016838 <pb_field_iter_next>
 8017ad0:	4603      	mov	r3, r0
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d1bc      	bne.n	8017a50 <pb_message_set_to_defaults+0x6a>

    return true;
 8017ad6:	2301      	movs	r3, #1
}
 8017ad8:	4618      	mov	r0, r3
 8017ada:	3734      	adds	r7, #52	; 0x34
 8017adc:	46bd      	mov	sp, r7
 8017ade:	bd90      	pop	{r4, r7, pc}

08017ae0 <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 8017ae0:	b580      	push	{r7, lr}
 8017ae2:	b09a      	sub	sp, #104	; 0x68
 8017ae4:	af00      	add	r7, sp, #0
 8017ae6:	60f8      	str	r0, [r7, #12]
 8017ae8:	60b9      	str	r1, [r7, #8]
 8017aea:	607a      	str	r2, [r7, #4]
 8017aec:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 8017aee:	2300      	movs	r3, #0
 8017af0:	667b      	str	r3, [r7, #100]	; 0x64
    pb_extension_t *extensions = NULL;
 8017af2:	2300      	movs	r3, #0
 8017af4:	663b      	str	r3, [r7, #96]	; 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 8017af6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017afa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    pb_size_t fixed_count_size = 0;
 8017afe:	2300      	movs	r3, #0
 8017b00:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    pb_size_t fixed_count_total_size = 0;
 8017b04:	2300      	movs	r3, #0
 8017b06:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 8017b0a:	2300      	movs	r3, #0
 8017b0c:	643b      	str	r3, [r7, #64]	; 0x40
 8017b0e:	2300      	movs	r3, #0
 8017b10:	647b      	str	r3, [r7, #68]	; 0x44
    const uint32_t allbits = ~(uint32_t)0;
 8017b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017b16:	657b      	str	r3, [r7, #84]	; 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 8017b18:	f107 0318 	add.w	r3, r7, #24
 8017b1c:	687a      	ldr	r2, [r7, #4]
 8017b1e:	68b9      	ldr	r1, [r7, #8]
 8017b20:	4618      	mov	r0, r3
 8017b22:	f7fe fe40 	bl	80167a6 <pb_field_iter_begin>
 8017b26:	4603      	mov	r3, r0
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	f000 8102 	beq.w	8017d32 <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 8017b2e:	683b      	ldr	r3, [r7, #0]
 8017b30:	f003 0301 	and.w	r3, r3, #1
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	f040 80fc 	bne.w	8017d32 <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 8017b3a:	f107 0318 	add.w	r3, r7, #24
 8017b3e:	4618      	mov	r0, r3
 8017b40:	f7ff ff51 	bl	80179e6 <pb_message_set_to_defaults>
 8017b44:	4603      	mov	r3, r0
 8017b46:	f083 0301 	eor.w	r3, r3, #1
 8017b4a:	b2db      	uxtb	r3, r3
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	f000 80f0 	beq.w	8017d32 <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	68db      	ldr	r3, [r3, #12]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d002      	beq.n	8017b60 <pb_decode_inner+0x80>
 8017b5a:	68fb      	ldr	r3, [r7, #12]
 8017b5c:	68db      	ldr	r3, [r3, #12]
 8017b5e:	e000      	b.n	8017b62 <pb_decode_inner+0x82>
 8017b60:	4b99      	ldr	r3, [pc, #612]	; (8017dc8 <pb_decode_inner+0x2e8>)
 8017b62:	68fa      	ldr	r2, [r7, #12]
 8017b64:	60d3      	str	r3, [r2, #12]
 8017b66:	2300      	movs	r3, #0
 8017b68:	e16d      	b.n	8017e46 <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8017b6a:	f107 0312 	add.w	r3, r7, #18
 8017b6e:	f107 0214 	add.w	r2, r7, #20
 8017b72:	f107 0113 	add.w	r1, r7, #19
 8017b76:	68f8      	ldr	r0, [r7, #12]
 8017b78:	f7ff f9a9 	bl	8016ece <pb_decode_tag>
 8017b7c:	4603      	mov	r3, r0
 8017b7e:	f083 0301 	eor.w	r3, r3, #1
 8017b82:	b2db      	uxtb	r3, r3
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d005      	beq.n	8017b94 <pb_decode_inner+0xb4>
        {
            if (eof)
 8017b88:	7cbb      	ldrb	r3, [r7, #18]
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	f040 80d7 	bne.w	8017d3e <pb_decode_inner+0x25e>
                break;
            else
                return false;
 8017b90:	2300      	movs	r3, #0
 8017b92:	e158      	b.n	8017e46 <pb_decode_inner+0x366>
        }

        if (tag == 0)
 8017b94:	697b      	ldr	r3, [r7, #20]
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d111      	bne.n	8017bbe <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 8017b9a:	683b      	ldr	r3, [r7, #0]
 8017b9c:	f003 0304 	and.w	r3, r3, #4
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	f040 80ce 	bne.w	8017d42 <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 8017ba6:	68fb      	ldr	r3, [r7, #12]
 8017ba8:	68db      	ldr	r3, [r3, #12]
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d002      	beq.n	8017bb4 <pb_decode_inner+0xd4>
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	68db      	ldr	r3, [r3, #12]
 8017bb2:	e000      	b.n	8017bb6 <pb_decode_inner+0xd6>
 8017bb4:	4b85      	ldr	r3, [pc, #532]	; (8017dcc <pb_decode_inner+0x2ec>)
 8017bb6:	68fa      	ldr	r2, [r7, #12]
 8017bb8:	60d3      	str	r3, [r2, #12]
 8017bba:	2300      	movs	r3, #0
 8017bbc:	e143      	b.n	8017e46 <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8017bbe:	697a      	ldr	r2, [r7, #20]
 8017bc0:	f107 0318 	add.w	r3, r7, #24
 8017bc4:	4611      	mov	r1, r2
 8017bc6:	4618      	mov	r0, r3
 8017bc8:	f7fe fe4b 	bl	8016862 <pb_field_iter_find>
 8017bcc:	4603      	mov	r3, r0
 8017bce:	f083 0301 	eor.w	r3, r3, #1
 8017bd2:	b2db      	uxtb	r3, r3
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d105      	bne.n	8017be4 <pb_decode_inner+0x104>
 8017bd8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8017bdc:	f003 030f 	and.w	r3, r3, #15
 8017be0:	2b0a      	cmp	r3, #10
 8017be2:	d13c      	bne.n	8017c5e <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 8017be4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d112      	bne.n	8017c10 <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 8017bea:	f107 0318 	add.w	r3, r7, #24
 8017bee:	4618      	mov	r0, r3
 8017bf0:	f7fe fe8d 	bl	801690e <pb_field_iter_find_extension>
 8017bf4:	4603      	mov	r3, r0
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d004      	beq.n	8017c04 <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 8017bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	663b      	str	r3, [r7, #96]	; 0x60
                    extension_range_start = iter.tag;
 8017c00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017c02:	667b      	str	r3, [r7, #100]	; 0x64
                }

                if (!extensions)
 8017c04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d102      	bne.n	8017c10 <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 8017c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017c0e:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            if (tag >= extension_range_start)
 8017c10:	697b      	ldr	r3, [r7, #20]
 8017c12:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017c14:	429a      	cmp	r2, r3
 8017c16:	d815      	bhi.n	8017c44 <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	689b      	ldr	r3, [r3, #8]
 8017c1c:	64fb      	str	r3, [r7, #76]	; 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 8017c1e:	6979      	ldr	r1, [r7, #20]
 8017c20:	7cfa      	ldrb	r2, [r7, #19]
 8017c22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017c24:	68f8      	ldr	r0, [r7, #12]
 8017c26:	f7ff fde1 	bl	80177ec <decode_extension>
 8017c2a:	4603      	mov	r3, r0
 8017c2c:	f083 0301 	eor.w	r3, r3, #1
 8017c30:	b2db      	uxtb	r3, r3
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d001      	beq.n	8017c3a <pb_decode_inner+0x15a>
                    return false;
 8017c36:	2300      	movs	r3, #0
 8017c38:	e105      	b.n	8017e46 <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	689b      	ldr	r3, [r3, #8]
 8017c3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017c40:	429a      	cmp	r2, r3
 8017c42:	d173      	bne.n	8017d2c <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 8017c44:	7cfb      	ldrb	r3, [r7, #19]
 8017c46:	4619      	mov	r1, r3
 8017c48:	68f8      	ldr	r0, [r7, #12]
 8017c4a:	f7ff f96f 	bl	8016f2c <pb_skip_field>
 8017c4e:	4603      	mov	r3, r0
 8017c50:	f083 0301 	eor.w	r3, r3, #1
 8017c54:	b2db      	uxtb	r3, r3
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d06a      	beq.n	8017d30 <pb_decode_inner+0x250>
                return false;
 8017c5a:	2300      	movs	r3, #0
 8017c5c:	e0f3      	b.n	8017e46 <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 8017c5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8017c62:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8017c66:	2b20      	cmp	r3, #32
 8017c68:	d12e      	bne.n	8017cc8 <pb_decode_inner+0x1e8>
 8017c6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017c6c:	f107 0318 	add.w	r3, r7, #24
 8017c70:	3314      	adds	r3, #20
 8017c72:	429a      	cmp	r2, r3
 8017c74:	d128      	bne.n	8017cc8 <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 8017c76:	8c3b      	ldrh	r3, [r7, #32]
 8017c78:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8017c7c:	429a      	cmp	r2, r3
 8017c7e:	d020      	beq.n	8017cc2 <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 8017c80:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8017c84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c88:	4293      	cmp	r3, r2
 8017c8a:	d011      	beq.n	8017cb0 <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 8017c8c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 8017c90:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8017c94:	429a      	cmp	r2, r3
 8017c96:	d00b      	beq.n	8017cb0 <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8017c98:	68fb      	ldr	r3, [r7, #12]
 8017c9a:	68db      	ldr	r3, [r3, #12]
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d002      	beq.n	8017ca6 <pb_decode_inner+0x1c6>
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	68db      	ldr	r3, [r3, #12]
 8017ca4:	e000      	b.n	8017ca8 <pb_decode_inner+0x1c8>
 8017ca6:	4b4a      	ldr	r3, [pc, #296]	; (8017dd0 <pb_decode_inner+0x2f0>)
 8017ca8:	68fa      	ldr	r2, [r7, #12]
 8017caa:	60d3      	str	r3, [r2, #12]
 8017cac:	2300      	movs	r3, #0
 8017cae:	e0ca      	b.n	8017e46 <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 8017cb0:	8c3b      	ldrh	r3, [r7, #32]
 8017cb2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                fixed_count_size = 0;
 8017cb6:	2300      	movs	r3, #0
 8017cb8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                fixed_count_total_size = iter.array_size;
 8017cbc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017cbe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }

            iter.pSize = &fixed_count_size;
 8017cc2:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 8017cc6:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 8017cc8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8017ccc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d11c      	bne.n	8017d0e <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8017cd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017cd6:	2b3f      	cmp	r3, #63	; 0x3f
 8017cd8:	d819      	bhi.n	8017d0e <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8017cda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017cdc:	f003 031f 	and.w	r3, r3, #31
 8017ce0:	2201      	movs	r2, #1
 8017ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8017ce6:	653b      	str	r3, [r7, #80]	; 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 8017ce8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017cea:	095b      	lsrs	r3, r3, #5
 8017cec:	b29b      	uxth	r3, r3
 8017cee:	009b      	lsls	r3, r3, #2
 8017cf0:	3368      	adds	r3, #104	; 0x68
 8017cf2:	443b      	add	r3, r7
 8017cf4:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8017cf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017cfa:	095b      	lsrs	r3, r3, #5
 8017cfc:	b29b      	uxth	r3, r3
 8017cfe:	4619      	mov	r1, r3
 8017d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d02:	431a      	orrs	r2, r3
 8017d04:	008b      	lsls	r3, r1, #2
 8017d06:	3368      	adds	r3, #104	; 0x68
 8017d08:	443b      	add	r3, r7
 8017d0a:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 8017d0e:	7cfb      	ldrb	r3, [r7, #19]
 8017d10:	f107 0218 	add.w	r2, r7, #24
 8017d14:	4619      	mov	r1, r3
 8017d16:	68f8      	ldr	r0, [r7, #12]
 8017d18:	f7ff fcf0 	bl	80176fc <decode_field>
 8017d1c:	4603      	mov	r3, r0
 8017d1e:	f083 0301 	eor.w	r3, r3, #1
 8017d22:	b2db      	uxtb	r3, r3
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d004      	beq.n	8017d32 <pb_decode_inner+0x252>
            return false;
 8017d28:	2300      	movs	r3, #0
 8017d2a:	e08c      	b.n	8017e46 <pb_decode_inner+0x366>
                    continue;
 8017d2c:	bf00      	nop
 8017d2e:	e000      	b.n	8017d32 <pb_decode_inner+0x252>
            continue;
 8017d30:	bf00      	nop
    while (stream->bytes_left)
 8017d32:	68fb      	ldr	r3, [r7, #12]
 8017d34:	689b      	ldr	r3, [r3, #8]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	f47f af17 	bne.w	8017b6a <pb_decode_inner+0x8a>
 8017d3c:	e002      	b.n	8017d44 <pb_decode_inner+0x264>
                break;
 8017d3e:	bf00      	nop
 8017d40:	e000      	b.n	8017d44 <pb_decode_inner+0x264>
            break;
 8017d42:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 8017d44:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8017d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017d4c:	4293      	cmp	r3, r2
 8017d4e:	d011      	beq.n	8017d74 <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 8017d50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 8017d54:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8017d58:	429a      	cmp	r2, r3
 8017d5a:	d00b      	beq.n	8017d74 <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8017d5c:	68fb      	ldr	r3, [r7, #12]
 8017d5e:	68db      	ldr	r3, [r3, #12]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d002      	beq.n	8017d6a <pb_decode_inner+0x28a>
 8017d64:	68fb      	ldr	r3, [r7, #12]
 8017d66:	68db      	ldr	r3, [r3, #12]
 8017d68:	e000      	b.n	8017d6c <pb_decode_inner+0x28c>
 8017d6a:	4b19      	ldr	r3, [pc, #100]	; (8017dd0 <pb_decode_inner+0x2f0>)
 8017d6c:	68fa      	ldr	r2, [r7, #12]
 8017d6e:	60d3      	str	r3, [r2, #12]
 8017d70:	2300      	movs	r3, #0
 8017d72:	e068      	b.n	8017e46 <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 8017d74:	69bb      	ldr	r3, [r7, #24]
 8017d76:	8a5b      	ldrh	r3, [r3, #18]
 8017d78:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

        if (req_field_count > 0)
 8017d7c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d05f      	beq.n	8017e44 <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8017d84:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8017d88:	2b40      	cmp	r3, #64	; 0x40
 8017d8a:	d902      	bls.n	8017d92 <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 8017d8c:	2340      	movs	r3, #64	; 0x40
 8017d8e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 8017d92:	2300      	movs	r3, #0
 8017d94:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8017d98:	e023      	b.n	8017de2 <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 8017d9a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8017d9e:	009b      	lsls	r3, r3, #2
 8017da0:	3368      	adds	r3, #104	; 0x68
 8017da2:	443b      	add	r3, r7
 8017da4:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8017da8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017daa:	429a      	cmp	r2, r3
 8017dac:	d014      	beq.n	8017dd8 <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 8017dae:	68fb      	ldr	r3, [r7, #12]
 8017db0:	68db      	ldr	r3, [r3, #12]
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d002      	beq.n	8017dbc <pb_decode_inner+0x2dc>
 8017db6:	68fb      	ldr	r3, [r7, #12]
 8017db8:	68db      	ldr	r3, [r3, #12]
 8017dba:	e000      	b.n	8017dbe <pb_decode_inner+0x2de>
 8017dbc:	4b05      	ldr	r3, [pc, #20]	; (8017dd4 <pb_decode_inner+0x2f4>)
 8017dbe:	68fa      	ldr	r2, [r7, #12]
 8017dc0:	60d3      	str	r3, [r2, #12]
 8017dc2:	2300      	movs	r3, #0
 8017dc4:	e03f      	b.n	8017e46 <pb_decode_inner+0x366>
 8017dc6:	bf00      	nop
 8017dc8:	0801fcd8 	.word	0x0801fcd8
 8017dcc:	0801fd28 	.word	0x0801fd28
 8017dd0:	0801fd34 	.word	0x0801fd34
 8017dd4:	0801fd58 	.word	0x0801fd58
            for (i = 0; i < (req_field_count >> 5); i++)
 8017dd8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8017ddc:	3301      	adds	r3, #1
 8017dde:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8017de2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8017de6:	095b      	lsrs	r3, r3, #5
 8017de8:	b29b      	uxth	r3, r3
 8017dea:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8017dee:	429a      	cmp	r2, r3
 8017df0:	d3d3      	bcc.n	8017d9a <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 8017df2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8017df6:	f003 031f 	and.w	r3, r3, #31
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d022      	beq.n	8017e44 <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8017dfe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8017e02:	095b      	lsrs	r3, r3, #5
 8017e04:	b29b      	uxth	r3, r3
 8017e06:	009b      	lsls	r3, r3, #2
 8017e08:	3368      	adds	r3, #104	; 0x68
 8017e0a:	443b      	add	r3, r7
 8017e0c:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 8017e10:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8017e14:	b2db      	uxtb	r3, r3
 8017e16:	f003 031f 	and.w	r3, r3, #31
 8017e1a:	b2db      	uxtb	r3, r3
 8017e1c:	f1c3 0320 	rsb	r3, r3, #32
 8017e20:	b2db      	uxtb	r3, r3
 8017e22:	4619      	mov	r1, r3
 8017e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017e26:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8017e28:	429a      	cmp	r2, r3
 8017e2a:	d00b      	beq.n	8017e44 <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	68db      	ldr	r3, [r3, #12]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d002      	beq.n	8017e3a <pb_decode_inner+0x35a>
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	68db      	ldr	r3, [r3, #12]
 8017e38:	e000      	b.n	8017e3c <pb_decode_inner+0x35c>
 8017e3a:	4b05      	ldr	r3, [pc, #20]	; (8017e50 <pb_decode_inner+0x370>)
 8017e3c:	68fa      	ldr	r2, [r7, #12]
 8017e3e:	60d3      	str	r3, [r2, #12]
 8017e40:	2300      	movs	r3, #0
 8017e42:	e000      	b.n	8017e46 <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 8017e44:	2301      	movs	r3, #1
}
 8017e46:	4618      	mov	r0, r3
 8017e48:	3768      	adds	r7, #104	; 0x68
 8017e4a:	46bd      	mov	sp, r7
 8017e4c:	bd80      	pop	{r7, pc}
 8017e4e:	bf00      	nop
 8017e50:	0801fd58 	.word	0x0801fd58

08017e54 <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 8017e54:	b580      	push	{r7, lr}
 8017e56:	b086      	sub	sp, #24
 8017e58:	af00      	add	r7, sp, #0
 8017e5a:	60f8      	str	r0, [r7, #12]
 8017e5c:	60b9      	str	r1, [r7, #8]
 8017e5e:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 8017e60:	2300      	movs	r3, #0
 8017e62:	687a      	ldr	r2, [r7, #4]
 8017e64:	68b9      	ldr	r1, [r7, #8]
 8017e66:	68f8      	ldr	r0, [r7, #12]
 8017e68:	f7ff fe3a 	bl	8017ae0 <pb_decode_inner>
 8017e6c:	4603      	mov	r3, r0
 8017e6e:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 8017e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8017e72:	4618      	mov	r0, r3
 8017e74:	3718      	adds	r7, #24
 8017e76:	46bd      	mov	sp, r7
 8017e78:	bd80      	pop	{r7, pc}

08017e7a <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 8017e7a:	b580      	push	{r7, lr}
 8017e7c:	b084      	sub	sp, #16
 8017e7e:	af00      	add	r7, sp, #0
 8017e80:	6078      	str	r0, [r7, #4]
 8017e82:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 8017e84:	f107 030c 	add.w	r3, r7, #12
 8017e88:	4619      	mov	r1, r3
 8017e8a:	6878      	ldr	r0, [r7, #4]
 8017e8c:	f7fe ff70 	bl	8016d70 <pb_decode_varint32>
 8017e90:	4603      	mov	r3, r0
 8017e92:	f083 0301 	eor.w	r3, r3, #1
 8017e96:	b2db      	uxtb	r3, r3
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d001      	beq.n	8017ea0 <pb_decode_bool+0x26>
        return false;
 8017e9c:	2300      	movs	r3, #0
 8017e9e:	e008      	b.n	8017eb2 <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	bf14      	ite	ne
 8017ea6:	2301      	movne	r3, #1
 8017ea8:	2300      	moveq	r3, #0
 8017eaa:	b2da      	uxtb	r2, r3
 8017eac:	683b      	ldr	r3, [r7, #0]
 8017eae:	701a      	strb	r2, [r3, #0]
    return true;
 8017eb0:	2301      	movs	r3, #1
}
 8017eb2:	4618      	mov	r0, r3
 8017eb4:	3710      	adds	r7, #16
 8017eb6:	46bd      	mov	sp, r7
 8017eb8:	bd80      	pop	{r7, pc}

08017eba <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 8017eba:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8017ebe:	b084      	sub	sp, #16
 8017ec0:	af00      	add	r7, sp, #0
 8017ec2:	6078      	str	r0, [r7, #4]
 8017ec4:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 8017ec6:	f107 0308 	add.w	r3, r7, #8
 8017eca:	4619      	mov	r1, r3
 8017ecc:	6878      	ldr	r0, [r7, #4]
 8017ece:	f7fe ff5f 	bl	8016d90 <pb_decode_varint>
 8017ed2:	4603      	mov	r3, r0
 8017ed4:	f083 0301 	eor.w	r3, r3, #1
 8017ed8:	b2db      	uxtb	r3, r3
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d001      	beq.n	8017ee2 <pb_decode_svarint+0x28>
        return false;
 8017ede:	2300      	movs	r3, #0
 8017ee0:	e029      	b.n	8017f36 <pb_decode_svarint+0x7c>
    
    if (value & 1)
 8017ee2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8017ee6:	f002 0401 	and.w	r4, r2, #1
 8017eea:	2500      	movs	r5, #0
 8017eec:	ea54 0305 	orrs.w	r3, r4, r5
 8017ef0:	d013      	beq.n	8017f1a <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 8017ef2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8017ef6:	f04f 0200 	mov.w	r2, #0
 8017efa:	f04f 0300 	mov.w	r3, #0
 8017efe:	0842      	lsrs	r2, r0, #1
 8017f00:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8017f04:	084b      	lsrs	r3, r1, #1
 8017f06:	ea6f 0802 	mvn.w	r8, r2
 8017f0a:	ea6f 0903 	mvn.w	r9, r3
 8017f0e:	4642      	mov	r2, r8
 8017f10:	464b      	mov	r3, r9
 8017f12:	6839      	ldr	r1, [r7, #0]
 8017f14:	e9c1 2300 	strd	r2, r3, [r1]
 8017f18:	e00c      	b.n	8017f34 <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 8017f1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8017f1e:	f04f 0200 	mov.w	r2, #0
 8017f22:	f04f 0300 	mov.w	r3, #0
 8017f26:	0842      	lsrs	r2, r0, #1
 8017f28:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8017f2c:	084b      	lsrs	r3, r1, #1
 8017f2e:	6839      	ldr	r1, [r7, #0]
 8017f30:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 8017f34:	2301      	movs	r3, #1
}
 8017f36:	4618      	mov	r0, r3
 8017f38:	3710      	adds	r7, #16
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08017f40 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 8017f40:	b580      	push	{r7, lr}
 8017f42:	b084      	sub	sp, #16
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	6078      	str	r0, [r7, #4]
 8017f48:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 8017f4a:	f107 030c 	add.w	r3, r7, #12
 8017f4e:	2204      	movs	r2, #4
 8017f50:	4619      	mov	r1, r3
 8017f52:	6878      	ldr	r0, [r7, #4]
 8017f54:	f7fe fd92 	bl	8016a7c <pb_read>
 8017f58:	4603      	mov	r3, r0
 8017f5a:	f083 0301 	eor.w	r3, r3, #1
 8017f5e:	b2db      	uxtb	r3, r3
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d001      	beq.n	8017f68 <pb_decode_fixed32+0x28>
        return false;
 8017f64:	2300      	movs	r3, #0
 8017f66:	e003      	b.n	8017f70 <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 8017f68:	68fa      	ldr	r2, [r7, #12]
 8017f6a:	683b      	ldr	r3, [r7, #0]
 8017f6c:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 8017f6e:	2301      	movs	r3, #1
}
 8017f70:	4618      	mov	r0, r3
 8017f72:	3710      	adds	r7, #16
 8017f74:	46bd      	mov	sp, r7
 8017f76:	bd80      	pop	{r7, pc}

08017f78 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 8017f78:	b580      	push	{r7, lr}
 8017f7a:	b084      	sub	sp, #16
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	6078      	str	r0, [r7, #4]
 8017f80:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 8017f82:	f107 0308 	add.w	r3, r7, #8
 8017f86:	2208      	movs	r2, #8
 8017f88:	4619      	mov	r1, r3
 8017f8a:	6878      	ldr	r0, [r7, #4]
 8017f8c:	f7fe fd76 	bl	8016a7c <pb_read>
 8017f90:	4603      	mov	r3, r0
 8017f92:	f083 0301 	eor.w	r3, r3, #1
 8017f96:	b2db      	uxtb	r3, r3
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d001      	beq.n	8017fa0 <pb_decode_fixed64+0x28>
        return false;
 8017f9c:	2300      	movs	r3, #0
 8017f9e:	e005      	b.n	8017fac <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 8017fa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8017fa4:	6839      	ldr	r1, [r7, #0]
 8017fa6:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 8017faa:	2301      	movs	r3, #1
}
 8017fac:	4618      	mov	r0, r3
 8017fae:	3710      	adds	r7, #16
 8017fb0:	46bd      	mov	sp, r7
 8017fb2:	bd80      	pop	{r7, pc}

08017fb4 <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8017fb4:	b580      	push	{r7, lr}
 8017fb6:	b082      	sub	sp, #8
 8017fb8:	af00      	add	r7, sp, #0
 8017fba:	6078      	str	r0, [r7, #4]
 8017fbc:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 8017fbe:	683b      	ldr	r3, [r7, #0]
 8017fc0:	69db      	ldr	r3, [r3, #28]
 8017fc2:	4619      	mov	r1, r3
 8017fc4:	6878      	ldr	r0, [r7, #4]
 8017fc6:	f7ff ff58 	bl	8017e7a <pb_decode_bool>
 8017fca:	4603      	mov	r3, r0
}
 8017fcc:	4618      	mov	r0, r3
 8017fce:	3708      	adds	r7, #8
 8017fd0:	46bd      	mov	sp, r7
 8017fd2:	bd80      	pop	{r7, pc}

08017fd4 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8017fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017fd8:	b094      	sub	sp, #80	; 0x50
 8017fda:	af00      	add	r7, sp, #0
 8017fdc:	6278      	str	r0, [r7, #36]	; 0x24
 8017fde:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8017fe0:	6a3b      	ldr	r3, [r7, #32]
 8017fe2:	7d9b      	ldrb	r3, [r3, #22]
 8017fe4:	f003 030f 	and.w	r3, r3, #15
 8017fe8:	2b02      	cmp	r3, #2
 8017fea:	d179      	bne.n	80180e0 <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 8017fec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017ff0:	4619      	mov	r1, r3
 8017ff2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ff4:	f7fe fecc 	bl	8016d90 <pb_decode_varint>
 8017ff8:	4603      	mov	r3, r0
 8017ffa:	f083 0301 	eor.w	r3, r3, #1
 8017ffe:	b2db      	uxtb	r3, r3
 8018000:	2b00      	cmp	r3, #0
 8018002:	d001      	beq.n	8018008 <pb_dec_varint+0x34>
            return false;
 8018004:	2300      	movs	r3, #0
 8018006:	e107      	b.n	8018218 <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 8018008:	6a3b      	ldr	r3, [r7, #32]
 801800a:	8a5b      	ldrh	r3, [r3, #18]
 801800c:	2b08      	cmp	r3, #8
 801800e:	d10a      	bne.n	8018026 <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 8018010:	6a3b      	ldr	r3, [r7, #32]
 8018012:	69d9      	ldr	r1, [r3, #28]
 8018014:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8018018:	e9c1 2300 	strd	r2, r3, [r1]
 801801c:	e9d1 2300 	ldrd	r2, r3, [r1]
 8018020:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8018024:	e046      	b.n	80180b4 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 8018026:	6a3b      	ldr	r3, [r7, #32]
 8018028:	8a5b      	ldrh	r3, [r3, #18]
 801802a:	2b04      	cmp	r3, #4
 801802c:	d10e      	bne.n	801804c <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 801802e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8018032:	6a3b      	ldr	r3, [r7, #32]
 8018034:	69db      	ldr	r3, [r3, #28]
 8018036:	4602      	mov	r2, r0
 8018038:	601a      	str	r2, [r3, #0]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	2200      	movs	r2, #0
 801803e:	613b      	str	r3, [r7, #16]
 8018040:	617a      	str	r2, [r7, #20]
 8018042:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8018046:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 801804a:	e033      	b.n	80180b4 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 801804c:	6a3b      	ldr	r3, [r7, #32]
 801804e:	8a5b      	ldrh	r3, [r3, #18]
 8018050:	2b02      	cmp	r3, #2
 8018052:	d10f      	bne.n	8018074 <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 8018054:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8018058:	6a3b      	ldr	r3, [r7, #32]
 801805a:	69db      	ldr	r3, [r3, #28]
 801805c:	b282      	uxth	r2, r0
 801805e:	801a      	strh	r2, [r3, #0]
 8018060:	881b      	ldrh	r3, [r3, #0]
 8018062:	b29b      	uxth	r3, r3
 8018064:	2200      	movs	r2, #0
 8018066:	60bb      	str	r3, [r7, #8]
 8018068:	60fa      	str	r2, [r7, #12]
 801806a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801806e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8018072:	e01f      	b.n	80180b4 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 8018074:	6a3b      	ldr	r3, [r7, #32]
 8018076:	8a5b      	ldrh	r3, [r3, #18]
 8018078:	2b01      	cmp	r3, #1
 801807a:	d10f      	bne.n	801809c <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 801807c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8018080:	6a3b      	ldr	r3, [r7, #32]
 8018082:	69db      	ldr	r3, [r3, #28]
 8018084:	b2c2      	uxtb	r2, r0
 8018086:	701a      	strb	r2, [r3, #0]
 8018088:	781b      	ldrb	r3, [r3, #0]
 801808a:	b2db      	uxtb	r3, r3
 801808c:	2200      	movs	r2, #0
 801808e:	603b      	str	r3, [r7, #0]
 8018090:	607a      	str	r2, [r7, #4]
 8018092:	e9d7 3400 	ldrd	r3, r4, [r7]
 8018096:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 801809a:	e00b      	b.n	80180b4 <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 801809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801809e:	68db      	ldr	r3, [r3, #12]
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d002      	beq.n	80180aa <pb_dec_varint+0xd6>
 80180a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180a6:	68db      	ldr	r3, [r3, #12]
 80180a8:	e000      	b.n	80180ac <pb_dec_varint+0xd8>
 80180aa:	4b5e      	ldr	r3, [pc, #376]	; (8018224 <pb_dec_varint+0x250>)
 80180ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80180ae:	60d3      	str	r3, [r2, #12]
 80180b0:	2300      	movs	r3, #0
 80180b2:	e0b1      	b.n	8018218 <pb_dec_varint+0x244>

        if (clamped != value)
 80180b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80180b8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80180bc:	4299      	cmp	r1, r3
 80180be:	bf08      	it	eq
 80180c0:	4290      	cmpeq	r0, r2
 80180c2:	d00b      	beq.n	80180dc <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 80180c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180c6:	68db      	ldr	r3, [r3, #12]
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d002      	beq.n	80180d2 <pb_dec_varint+0xfe>
 80180cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ce:	68db      	ldr	r3, [r3, #12]
 80180d0:	e000      	b.n	80180d4 <pb_dec_varint+0x100>
 80180d2:	4b55      	ldr	r3, [pc, #340]	; (8018228 <pb_dec_varint+0x254>)
 80180d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80180d6:	60d3      	str	r3, [r2, #12]
 80180d8:	2300      	movs	r3, #0
 80180da:	e09d      	b.n	8018218 <pb_dec_varint+0x244>

        return true;
 80180dc:	2301      	movs	r3, #1
 80180de:	e09b      	b.n	8018218 <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 80180e0:	6a3b      	ldr	r3, [r7, #32]
 80180e2:	7d9b      	ldrb	r3, [r3, #22]
 80180e4:	f003 030f 	and.w	r3, r3, #15
 80180e8:	2b03      	cmp	r3, #3
 80180ea:	d10d      	bne.n	8018108 <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 80180ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80180f0:	4619      	mov	r1, r3
 80180f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80180f4:	f7ff fee1 	bl	8017eba <pb_decode_svarint>
 80180f8:	4603      	mov	r3, r0
 80180fa:	f083 0301 	eor.w	r3, r3, #1
 80180fe:	b2db      	uxtb	r3, r3
 8018100:	2b00      	cmp	r3, #0
 8018102:	d022      	beq.n	801814a <pb_dec_varint+0x176>
                return false;
 8018104:	2300      	movs	r3, #0
 8018106:	e087      	b.n	8018218 <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 8018108:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801810c:	4619      	mov	r1, r3
 801810e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018110:	f7fe fe3e 	bl	8016d90 <pb_decode_varint>
 8018114:	4603      	mov	r3, r0
 8018116:	f083 0301 	eor.w	r3, r3, #1
 801811a:	b2db      	uxtb	r3, r3
 801811c:	2b00      	cmp	r3, #0
 801811e:	d001      	beq.n	8018124 <pb_dec_varint+0x150>
                return false;
 8018120:	2300      	movs	r3, #0
 8018122:	e079      	b.n	8018218 <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 8018124:	6a3b      	ldr	r3, [r7, #32]
 8018126:	8a5b      	ldrh	r3, [r3, #18]
 8018128:	2b08      	cmp	r3, #8
 801812a:	d104      	bne.n	8018136 <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 801812c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8018130:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8018134:	e009      	b.n	801814a <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 8018136:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801813a:	4613      	mov	r3, r2
 801813c:	17da      	asrs	r2, r3, #31
 801813e:	61bb      	str	r3, [r7, #24]
 8018140:	61fa      	str	r2, [r7, #28]
 8018142:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8018146:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 801814a:	6a3b      	ldr	r3, [r7, #32]
 801814c:	8a5b      	ldrh	r3, [r3, #18]
 801814e:	2b08      	cmp	r3, #8
 8018150:	d10a      	bne.n	8018168 <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 8018152:	6a3b      	ldr	r3, [r7, #32]
 8018154:	69d9      	ldr	r1, [r3, #28]
 8018156:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801815a:	e9c1 2300 	strd	r2, r3, [r1]
 801815e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8018162:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8018166:	e042      	b.n	80181ee <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 8018168:	6a3b      	ldr	r3, [r7, #32]
 801816a:	8a5b      	ldrh	r3, [r3, #18]
 801816c:	2b04      	cmp	r3, #4
 801816e:	d10c      	bne.n	801818a <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 8018170:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8018174:	6a3b      	ldr	r3, [r7, #32]
 8018176:	69db      	ldr	r3, [r3, #28]
 8018178:	4602      	mov	r2, r0
 801817a:	601a      	str	r2, [r3, #0]
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	17da      	asrs	r2, r3, #31
 8018180:	469a      	mov	sl, r3
 8018182:	4693      	mov	fp, r2
 8018184:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
 8018188:	e031      	b.n	80181ee <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 801818a:	6a3b      	ldr	r3, [r7, #32]
 801818c:	8a5b      	ldrh	r3, [r3, #18]
 801818e:	2b02      	cmp	r3, #2
 8018190:	d10e      	bne.n	80181b0 <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 8018192:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8018196:	6a3b      	ldr	r3, [r7, #32]
 8018198:	69db      	ldr	r3, [r3, #28]
 801819a:	b202      	sxth	r2, r0
 801819c:	801a      	strh	r2, [r3, #0]
 801819e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80181a2:	b21b      	sxth	r3, r3
 80181a4:	17da      	asrs	r2, r3, #31
 80181a6:	4698      	mov	r8, r3
 80181a8:	4691      	mov	r9, r2
 80181aa:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
 80181ae:	e01e      	b.n	80181ee <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 80181b0:	6a3b      	ldr	r3, [r7, #32]
 80181b2:	8a5b      	ldrh	r3, [r3, #18]
 80181b4:	2b01      	cmp	r3, #1
 80181b6:	d10e      	bne.n	80181d6 <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 80181b8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80181bc:	6a3b      	ldr	r3, [r7, #32]
 80181be:	69db      	ldr	r3, [r3, #28]
 80181c0:	b242      	sxtb	r2, r0
 80181c2:	701a      	strb	r2, [r3, #0]
 80181c4:	f993 3000 	ldrsb.w	r3, [r3]
 80181c8:	b25b      	sxtb	r3, r3
 80181ca:	17da      	asrs	r2, r3, #31
 80181cc:	461c      	mov	r4, r3
 80181ce:	4615      	mov	r5, r2
 80181d0:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 80181d4:	e00b      	b.n	80181ee <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80181d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181d8:	68db      	ldr	r3, [r3, #12]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d002      	beq.n	80181e4 <pb_dec_varint+0x210>
 80181de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181e0:	68db      	ldr	r3, [r3, #12]
 80181e2:	e000      	b.n	80181e6 <pb_dec_varint+0x212>
 80181e4:	4b0f      	ldr	r3, [pc, #60]	; (8018224 <pb_dec_varint+0x250>)
 80181e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181e8:	60d3      	str	r3, [r2, #12]
 80181ea:	2300      	movs	r3, #0
 80181ec:	e014      	b.n	8018218 <pb_dec_varint+0x244>

        if (clamped != svalue)
 80181ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80181f2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80181f6:	4299      	cmp	r1, r3
 80181f8:	bf08      	it	eq
 80181fa:	4290      	cmpeq	r0, r2
 80181fc:	d00b      	beq.n	8018216 <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 80181fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018200:	68db      	ldr	r3, [r3, #12]
 8018202:	2b00      	cmp	r3, #0
 8018204:	d002      	beq.n	801820c <pb_dec_varint+0x238>
 8018206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018208:	68db      	ldr	r3, [r3, #12]
 801820a:	e000      	b.n	801820e <pb_dec_varint+0x23a>
 801820c:	4b06      	ldr	r3, [pc, #24]	; (8018228 <pb_dec_varint+0x254>)
 801820e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018210:	60d3      	str	r3, [r2, #12]
 8018212:	2300      	movs	r3, #0
 8018214:	e000      	b.n	8018218 <pb_dec_varint+0x244>

        return true;
 8018216:	2301      	movs	r3, #1
    }
}
 8018218:	4618      	mov	r0, r3
 801821a:	3750      	adds	r7, #80	; 0x50
 801821c:	46bd      	mov	sp, r7
 801821e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018222:	bf00      	nop
 8018224:	0801fd70 	.word	0x0801fd70
 8018228:	0801fd84 	.word	0x0801fd84

0801822c <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 801822c:	b580      	push	{r7, lr}
 801822e:	b086      	sub	sp, #24
 8018230:	af00      	add	r7, sp, #0
 8018232:	6078      	str	r0, [r7, #4]
 8018234:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 8018236:	f107 030c 	add.w	r3, r7, #12
 801823a:	4619      	mov	r1, r3
 801823c:	6878      	ldr	r0, [r7, #4]
 801823e:	f7fe fd97 	bl	8016d70 <pb_decode_varint32>
 8018242:	4603      	mov	r3, r0
 8018244:	f083 0301 	eor.w	r3, r3, #1
 8018248:	b2db      	uxtb	r3, r3
 801824a:	2b00      	cmp	r3, #0
 801824c:	d001      	beq.n	8018252 <pb_dec_bytes+0x26>
        return false;
 801824e:	2300      	movs	r3, #0
 8018250:	e055      	b.n	80182fe <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 8018252:	68fb      	ldr	r3, [r7, #12]
 8018254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018258:	d30b      	bcc.n	8018272 <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	68db      	ldr	r3, [r3, #12]
 801825e:	2b00      	cmp	r3, #0
 8018260:	d002      	beq.n	8018268 <pb_dec_bytes+0x3c>
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	68db      	ldr	r3, [r3, #12]
 8018266:	e000      	b.n	801826a <pb_dec_bytes+0x3e>
 8018268:	4b27      	ldr	r3, [pc, #156]	; (8018308 <pb_dec_bytes+0xdc>)
 801826a:	687a      	ldr	r2, [r7, #4]
 801826c:	60d3      	str	r3, [r2, #12]
 801826e:	2300      	movs	r3, #0
 8018270:	e045      	b.n	80182fe <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 8018272:	68fb      	ldr	r3, [r7, #12]
 8018274:	3302      	adds	r3, #2
 8018276:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	697a      	ldr	r2, [r7, #20]
 801827c:	429a      	cmp	r2, r3
 801827e:	d20b      	bcs.n	8018298 <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	68db      	ldr	r3, [r3, #12]
 8018284:	2b00      	cmp	r3, #0
 8018286:	d002      	beq.n	801828e <pb_dec_bytes+0x62>
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	68db      	ldr	r3, [r3, #12]
 801828c:	e000      	b.n	8018290 <pb_dec_bytes+0x64>
 801828e:	4b1f      	ldr	r3, [pc, #124]	; (801830c <pb_dec_bytes+0xe0>)
 8018290:	687a      	ldr	r2, [r7, #4]
 8018292:	60d3      	str	r3, [r2, #12]
 8018294:	2300      	movs	r3, #0
 8018296:	e032      	b.n	80182fe <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8018298:	683b      	ldr	r3, [r7, #0]
 801829a:	7d9b      	ldrb	r3, [r3, #22]
 801829c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80182a0:	2b80      	cmp	r3, #128	; 0x80
 80182a2:	d10b      	bne.n	80182bc <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	68db      	ldr	r3, [r3, #12]
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d002      	beq.n	80182b2 <pb_dec_bytes+0x86>
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	68db      	ldr	r3, [r3, #12]
 80182b0:	e000      	b.n	80182b4 <pb_dec_bytes+0x88>
 80182b2:	4b17      	ldr	r3, [pc, #92]	; (8018310 <pb_dec_bytes+0xe4>)
 80182b4:	687a      	ldr	r2, [r7, #4]
 80182b6:	60d3      	str	r3, [r2, #12]
 80182b8:	2300      	movs	r3, #0
 80182ba:	e020      	b.n	80182fe <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 80182bc:	683b      	ldr	r3, [r7, #0]
 80182be:	8a5b      	ldrh	r3, [r3, #18]
 80182c0:	461a      	mov	r2, r3
 80182c2:	697b      	ldr	r3, [r7, #20]
 80182c4:	4293      	cmp	r3, r2
 80182c6:	d90b      	bls.n	80182e0 <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	68db      	ldr	r3, [r3, #12]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d002      	beq.n	80182d6 <pb_dec_bytes+0xaa>
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	68db      	ldr	r3, [r3, #12]
 80182d4:	e000      	b.n	80182d8 <pb_dec_bytes+0xac>
 80182d6:	4b0c      	ldr	r3, [pc, #48]	; (8018308 <pb_dec_bytes+0xdc>)
 80182d8:	687a      	ldr	r2, [r7, #4]
 80182da:	60d3      	str	r3, [r2, #12]
 80182dc:	2300      	movs	r3, #0
 80182de:	e00e      	b.n	80182fe <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 80182e0:	683b      	ldr	r3, [r7, #0]
 80182e2:	69db      	ldr	r3, [r3, #28]
 80182e4:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 80182e6:	68fb      	ldr	r3, [r7, #12]
 80182e8:	b29a      	uxth	r2, r3
 80182ea:	693b      	ldr	r3, [r7, #16]
 80182ec:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 80182ee:	693b      	ldr	r3, [r7, #16]
 80182f0:	3302      	adds	r3, #2
 80182f2:	68fa      	ldr	r2, [r7, #12]
 80182f4:	4619      	mov	r1, r3
 80182f6:	6878      	ldr	r0, [r7, #4]
 80182f8:	f7fe fbc0 	bl	8016a7c <pb_read>
 80182fc:	4603      	mov	r3, r0
}
 80182fe:	4618      	mov	r0, r3
 8018300:	3718      	adds	r7, #24
 8018302:	46bd      	mov	sp, r7
 8018304:	bd80      	pop	{r7, pc}
 8018306:	bf00      	nop
 8018308:	0801fd98 	.word	0x0801fd98
 801830c:	0801fda8 	.word	0x0801fda8
 8018310:	0801fcf0 	.word	0x0801fcf0

08018314 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8018314:	b580      	push	{r7, lr}
 8018316:	b086      	sub	sp, #24
 8018318:	af00      	add	r7, sp, #0
 801831a:	6078      	str	r0, [r7, #4]
 801831c:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 801831e:	683b      	ldr	r3, [r7, #0]
 8018320:	69db      	ldr	r3, [r3, #28]
 8018322:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 8018324:	f107 030c 	add.w	r3, r7, #12
 8018328:	4619      	mov	r1, r3
 801832a:	6878      	ldr	r0, [r7, #4]
 801832c:	f7fe fd20 	bl	8016d70 <pb_decode_varint32>
 8018330:	4603      	mov	r3, r0
 8018332:	f083 0301 	eor.w	r3, r3, #1
 8018336:	b2db      	uxtb	r3, r3
 8018338:	2b00      	cmp	r3, #0
 801833a:	d001      	beq.n	8018340 <pb_dec_string+0x2c>
        return false;
 801833c:	2300      	movs	r3, #0
 801833e:	e05a      	b.n	80183f6 <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 8018340:	68fb      	ldr	r3, [r7, #12]
 8018342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018346:	d10b      	bne.n	8018360 <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	68db      	ldr	r3, [r3, #12]
 801834c:	2b00      	cmp	r3, #0
 801834e:	d002      	beq.n	8018356 <pb_dec_string+0x42>
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	68db      	ldr	r3, [r3, #12]
 8018354:	e000      	b.n	8018358 <pb_dec_string+0x44>
 8018356:	4b2a      	ldr	r3, [pc, #168]	; (8018400 <pb_dec_string+0xec>)
 8018358:	687a      	ldr	r2, [r7, #4]
 801835a:	60d3      	str	r3, [r2, #12]
 801835c:	2300      	movs	r3, #0
 801835e:	e04a      	b.n	80183f6 <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	3301      	adds	r3, #1
 8018364:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	693a      	ldr	r2, [r7, #16]
 801836a:	429a      	cmp	r2, r3
 801836c:	d20b      	bcs.n	8018386 <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	68db      	ldr	r3, [r3, #12]
 8018372:	2b00      	cmp	r3, #0
 8018374:	d002      	beq.n	801837c <pb_dec_string+0x68>
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	68db      	ldr	r3, [r3, #12]
 801837a:	e000      	b.n	801837e <pb_dec_string+0x6a>
 801837c:	4b20      	ldr	r3, [pc, #128]	; (8018400 <pb_dec_string+0xec>)
 801837e:	687a      	ldr	r2, [r7, #4]
 8018380:	60d3      	str	r3, [r2, #12]
 8018382:	2300      	movs	r3, #0
 8018384:	e037      	b.n	80183f6 <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8018386:	683b      	ldr	r3, [r7, #0]
 8018388:	7d9b      	ldrb	r3, [r3, #22]
 801838a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801838e:	2b80      	cmp	r3, #128	; 0x80
 8018390:	d10b      	bne.n	80183aa <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	68db      	ldr	r3, [r3, #12]
 8018396:	2b00      	cmp	r3, #0
 8018398:	d002      	beq.n	80183a0 <pb_dec_string+0x8c>
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	68db      	ldr	r3, [r3, #12]
 801839e:	e000      	b.n	80183a2 <pb_dec_string+0x8e>
 80183a0:	4b18      	ldr	r3, [pc, #96]	; (8018404 <pb_dec_string+0xf0>)
 80183a2:	687a      	ldr	r2, [r7, #4]
 80183a4:	60d3      	str	r3, [r2, #12]
 80183a6:	2300      	movs	r3, #0
 80183a8:	e025      	b.n	80183f6 <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 80183aa:	683b      	ldr	r3, [r7, #0]
 80183ac:	8a5b      	ldrh	r3, [r3, #18]
 80183ae:	461a      	mov	r2, r3
 80183b0:	693b      	ldr	r3, [r7, #16]
 80183b2:	4293      	cmp	r3, r2
 80183b4:	d90b      	bls.n	80183ce <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	68db      	ldr	r3, [r3, #12]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d002      	beq.n	80183c4 <pb_dec_string+0xb0>
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	68db      	ldr	r3, [r3, #12]
 80183c2:	e000      	b.n	80183c6 <pb_dec_string+0xb2>
 80183c4:	4b10      	ldr	r3, [pc, #64]	; (8018408 <pb_dec_string+0xf4>)
 80183c6:	687a      	ldr	r2, [r7, #4]
 80183c8:	60d3      	str	r3, [r2, #12]
 80183ca:	2300      	movs	r3, #0
 80183cc:	e013      	b.n	80183f6 <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	697a      	ldr	r2, [r7, #20]
 80183d2:	4413      	add	r3, r2
 80183d4:	2200      	movs	r2, #0
 80183d6:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	461a      	mov	r2, r3
 80183dc:	6979      	ldr	r1, [r7, #20]
 80183de:	6878      	ldr	r0, [r7, #4]
 80183e0:	f7fe fb4c 	bl	8016a7c <pb_read>
 80183e4:	4603      	mov	r3, r0
 80183e6:	f083 0301 	eor.w	r3, r3, #1
 80183ea:	b2db      	uxtb	r3, r3
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d001      	beq.n	80183f4 <pb_dec_string+0xe0>
        return false;
 80183f0:	2300      	movs	r3, #0
 80183f2:	e000      	b.n	80183f6 <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 80183f4:	2301      	movs	r3, #1
}
 80183f6:	4618      	mov	r0, r3
 80183f8:	3718      	adds	r7, #24
 80183fa:	46bd      	mov	sp, r7
 80183fc:	bd80      	pop	{r7, pc}
 80183fe:	bf00      	nop
 8018400:	0801fda8 	.word	0x0801fda8
 8018404:	0801fcf0 	.word	0x0801fcf0
 8018408:	0801fdb8 	.word	0x0801fdb8

0801840c <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 801840c:	b580      	push	{r7, lr}
 801840e:	b08a      	sub	sp, #40	; 0x28
 8018410:	af00      	add	r7, sp, #0
 8018412:	6078      	str	r0, [r7, #4]
 8018414:	6039      	str	r1, [r7, #0]
    bool status = true;
 8018416:	2301      	movs	r3, #1
 8018418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool submsg_consumed = false;
 801841c:	2300      	movs	r3, #0
 801841e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 8018422:	f107 030c 	add.w	r3, r7, #12
 8018426:	4619      	mov	r1, r3
 8018428:	6878      	ldr	r0, [r7, #4]
 801842a:	f7fe fe2d 	bl	8017088 <pb_make_string_substream>
 801842e:	4603      	mov	r3, r0
 8018430:	f083 0301 	eor.w	r3, r3, #1
 8018434:	b2db      	uxtb	r3, r3
 8018436:	2b00      	cmp	r3, #0
 8018438:	d001      	beq.n	801843e <pb_dec_submessage+0x32>
        return false;
 801843a:	2300      	movs	r3, #0
 801843c:	e069      	b.n	8018512 <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 801843e:	683b      	ldr	r3, [r7, #0]
 8018440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018442:	2b00      	cmp	r3, #0
 8018444:	d10b      	bne.n	801845e <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	68db      	ldr	r3, [r3, #12]
 801844a:	2b00      	cmp	r3, #0
 801844c:	d002      	beq.n	8018454 <pb_dec_submessage+0x48>
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	68db      	ldr	r3, [r3, #12]
 8018452:	e000      	b.n	8018456 <pb_dec_submessage+0x4a>
 8018454:	4b31      	ldr	r3, [pc, #196]	; (801851c <pb_dec_submessage+0x110>)
 8018456:	687a      	ldr	r2, [r7, #4]
 8018458:	60d3      	str	r3, [r2, #12]
 801845a:	2300      	movs	r3, #0
 801845c:	e059      	b.n	8018512 <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 801845e:	683b      	ldr	r3, [r7, #0]
 8018460:	7d9b      	ldrb	r3, [r3, #22]
 8018462:	f003 030f 	and.w	r3, r3, #15
 8018466:	2b09      	cmp	r3, #9
 8018468:	d11c      	bne.n	80184a4 <pb_dec_submessage+0x98>
 801846a:	683b      	ldr	r3, [r7, #0]
 801846c:	6a1b      	ldr	r3, [r3, #32]
 801846e:	2b00      	cmp	r3, #0
 8018470:	d018      	beq.n	80184a4 <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8018472:	683b      	ldr	r3, [r7, #0]
 8018474:	6a1b      	ldr	r3, [r3, #32]
 8018476:	3b08      	subs	r3, #8
 8018478:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 801847a:	69fb      	ldr	r3, [r7, #28]
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	2b00      	cmp	r3, #0
 8018480:	d010      	beq.n	80184a4 <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 8018482:	69fb      	ldr	r3, [r7, #28]
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	69fa      	ldr	r2, [r7, #28]
 8018488:	3204      	adds	r2, #4
 801848a:	f107 000c 	add.w	r0, r7, #12
 801848e:	6839      	ldr	r1, [r7, #0]
 8018490:	4798      	blx	r3
 8018492:	4603      	mov	r3, r0
 8018494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if (substream.bytes_left == 0)
 8018498:	697b      	ldr	r3, [r7, #20]
 801849a:	2b00      	cmp	r3, #0
 801849c:	d102      	bne.n	80184a4 <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 801849e:	2301      	movs	r3, #1
 80184a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 80184a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d022      	beq.n	80184f2 <pb_dec_submessage+0xe6>
 80184ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80184b0:	f083 0301 	eor.w	r3, r3, #1
 80184b4:	b2db      	uxtb	r3, r3
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d01b      	beq.n	80184f2 <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 80184ba:	2300      	movs	r3, #0
 80184bc:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80184be:	683b      	ldr	r3, [r7, #0]
 80184c0:	7d9b      	ldrb	r3, [r3, #22]
 80184c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d107      	bne.n	80184da <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 80184ca:	683b      	ldr	r3, [r7, #0]
 80184cc:	7d9b      	ldrb	r3, [r3, #22]
 80184ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80184d2:	2b20      	cmp	r3, #32
 80184d4:	d001      	beq.n	80184da <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 80184d6:	2301      	movs	r3, #1
 80184d8:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 80184da:	683b      	ldr	r3, [r7, #0]
 80184dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80184de:	683b      	ldr	r3, [r7, #0]
 80184e0:	69da      	ldr	r2, [r3, #28]
 80184e2:	f107 000c 	add.w	r0, r7, #12
 80184e6:	6a3b      	ldr	r3, [r7, #32]
 80184e8:	f7ff fafa 	bl	8017ae0 <pb_decode_inner>
 80184ec:	4603      	mov	r3, r0
 80184ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 80184f2:	f107 030c 	add.w	r3, r7, #12
 80184f6:	4619      	mov	r1, r3
 80184f8:	6878      	ldr	r0, [r7, #4]
 80184fa:	f7fe fdff 	bl	80170fc <pb_close_string_substream>
 80184fe:	4603      	mov	r3, r0
 8018500:	f083 0301 	eor.w	r3, r3, #1
 8018504:	b2db      	uxtb	r3, r3
 8018506:	2b00      	cmp	r3, #0
 8018508:	d001      	beq.n	801850e <pb_dec_submessage+0x102>
        return false;
 801850a:	2300      	movs	r3, #0
 801850c:	e001      	b.n	8018512 <pb_dec_submessage+0x106>

    return status;
 801850e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8018512:	4618      	mov	r0, r3
 8018514:	3728      	adds	r7, #40	; 0x28
 8018516:	46bd      	mov	sp, r7
 8018518:	bd80      	pop	{r7, pc}
 801851a:	bf00      	nop
 801851c:	0801fdc8 	.word	0x0801fdc8

08018520 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8018520:	b580      	push	{r7, lr}
 8018522:	b084      	sub	sp, #16
 8018524:	af00      	add	r7, sp, #0
 8018526:	6078      	str	r0, [r7, #4]
 8018528:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 801852a:	f107 030c 	add.w	r3, r7, #12
 801852e:	4619      	mov	r1, r3
 8018530:	6878      	ldr	r0, [r7, #4]
 8018532:	f7fe fc1d 	bl	8016d70 <pb_decode_varint32>
 8018536:	4603      	mov	r3, r0
 8018538:	f083 0301 	eor.w	r3, r3, #1
 801853c:	b2db      	uxtb	r3, r3
 801853e:	2b00      	cmp	r3, #0
 8018540:	d001      	beq.n	8018546 <pb_dec_fixed_length_bytes+0x26>
        return false;
 8018542:	2300      	movs	r3, #0
 8018544:	e037      	b.n	80185b6 <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801854c:	d30b      	bcc.n	8018566 <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	68db      	ldr	r3, [r3, #12]
 8018552:	2b00      	cmp	r3, #0
 8018554:	d002      	beq.n	801855c <pb_dec_fixed_length_bytes+0x3c>
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	68db      	ldr	r3, [r3, #12]
 801855a:	e000      	b.n	801855e <pb_dec_fixed_length_bytes+0x3e>
 801855c:	4b18      	ldr	r3, [pc, #96]	; (80185c0 <pb_dec_fixed_length_bytes+0xa0>)
 801855e:	687a      	ldr	r2, [r7, #4]
 8018560:	60d3      	str	r3, [r2, #12]
 8018562:	2300      	movs	r3, #0
 8018564:	e027      	b.n	80185b6 <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 8018566:	68fb      	ldr	r3, [r7, #12]
 8018568:	2b00      	cmp	r3, #0
 801856a:	d109      	bne.n	8018580 <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 801856c:	683b      	ldr	r3, [r7, #0]
 801856e:	69d8      	ldr	r0, [r3, #28]
 8018570:	683b      	ldr	r3, [r7, #0]
 8018572:	8a5b      	ldrh	r3, [r3, #18]
 8018574:	461a      	mov	r2, r3
 8018576:	2100      	movs	r1, #0
 8018578:	f001 f95e 	bl	8019838 <memset>
        return true;
 801857c:	2301      	movs	r3, #1
 801857e:	e01a      	b.n	80185b6 <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 8018580:	683b      	ldr	r3, [r7, #0]
 8018582:	8a5b      	ldrh	r3, [r3, #18]
 8018584:	461a      	mov	r2, r3
 8018586:	68fb      	ldr	r3, [r7, #12]
 8018588:	429a      	cmp	r2, r3
 801858a:	d00b      	beq.n	80185a4 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	68db      	ldr	r3, [r3, #12]
 8018590:	2b00      	cmp	r3, #0
 8018592:	d002      	beq.n	801859a <pb_dec_fixed_length_bytes+0x7a>
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	68db      	ldr	r3, [r3, #12]
 8018598:	e000      	b.n	801859c <pb_dec_fixed_length_bytes+0x7c>
 801859a:	4b0a      	ldr	r3, [pc, #40]	; (80185c4 <pb_dec_fixed_length_bytes+0xa4>)
 801859c:	687a      	ldr	r2, [r7, #4]
 801859e:	60d3      	str	r3, [r2, #12]
 80185a0:	2300      	movs	r3, #0
 80185a2:	e008      	b.n	80185b6 <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 80185a4:	683b      	ldr	r3, [r7, #0]
 80185a6:	69d9      	ldr	r1, [r3, #28]
 80185a8:	683b      	ldr	r3, [r7, #0]
 80185aa:	8a5b      	ldrh	r3, [r3, #18]
 80185ac:	461a      	mov	r2, r3
 80185ae:	6878      	ldr	r0, [r7, #4]
 80185b0:	f7fe fa64 	bl	8016a7c <pb_read>
 80185b4:	4603      	mov	r3, r0
}
 80185b6:	4618      	mov	r0, r3
 80185b8:	3710      	adds	r7, #16
 80185ba:	46bd      	mov	sp, r7
 80185bc:	bd80      	pop	{r7, pc}
 80185be:	bf00      	nop
 80185c0:	0801fd98 	.word	0x0801fd98
 80185c4:	0801fde4 	.word	0x0801fde4

080185c8 <buf_write>:
/*******************************
 * pb_ostream_t implementation *
 *******************************/

static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 80185c8:	b580      	push	{r7, lr}
 80185ca:	b086      	sub	sp, #24
 80185cc:	af00      	add	r7, sp, #0
 80185ce:	60f8      	str	r0, [r7, #12]
 80185d0:	60b9      	str	r1, [r7, #8]
 80185d2:	607a      	str	r2, [r7, #4]
    pb_byte_t *dest = (pb_byte_t*)stream->state;
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	685b      	ldr	r3, [r3, #4]
 80185d8:	617b      	str	r3, [r7, #20]
    stream->state = dest + count;
 80185da:	697a      	ldr	r2, [r7, #20]
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	441a      	add	r2, r3
 80185e0:	68fb      	ldr	r3, [r7, #12]
 80185e2:	605a      	str	r2, [r3, #4]
    
    memcpy(dest, buf, count * sizeof(pb_byte_t));
 80185e4:	687a      	ldr	r2, [r7, #4]
 80185e6:	68b9      	ldr	r1, [r7, #8]
 80185e8:	6978      	ldr	r0, [r7, #20]
 80185ea:	f001 f8fd 	bl	80197e8 <memcpy>
    
    return true;
 80185ee:	2301      	movs	r3, #1
}
 80185f0:	4618      	mov	r0, r3
 80185f2:	3718      	adds	r7, #24
 80185f4:	46bd      	mov	sp, r7
 80185f6:	bd80      	pop	{r7, pc}

080185f8 <pb_ostream_from_buffer>:

pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
{
 80185f8:	b4b0      	push	{r4, r5, r7}
 80185fa:	b08b      	sub	sp, #44	; 0x2c
 80185fc:	af00      	add	r7, sp, #0
 80185fe:	60f8      	str	r0, [r7, #12]
 8018600:	60b9      	str	r1, [r7, #8]
 8018602:	607a      	str	r2, [r7, #4]
     * NULL pointer marks a sizing field, so put a non-NULL value to mark a buffer stream.
     */
    static const int marker = 0;
    stream.callback = &marker;
#else
    stream.callback = &buf_write;
 8018604:	4b0b      	ldr	r3, [pc, #44]	; (8018634 <pb_ostream_from_buffer+0x3c>)
 8018606:	617b      	str	r3, [r7, #20]
#endif
    stream.state = buf;
 8018608:	68bb      	ldr	r3, [r7, #8]
 801860a:	61bb      	str	r3, [r7, #24]
    stream.max_size = bufsize;
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	61fb      	str	r3, [r7, #28]
    stream.bytes_written = 0;
 8018610:	2300      	movs	r3, #0
 8018612:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8018614:	2300      	movs	r3, #0
 8018616:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	461d      	mov	r5, r3
 801861c:	f107 0414 	add.w	r4, r7, #20
 8018620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018622:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018624:	6823      	ldr	r3, [r4, #0]
 8018626:	602b      	str	r3, [r5, #0]
}
 8018628:	68f8      	ldr	r0, [r7, #12]
 801862a:	372c      	adds	r7, #44	; 0x2c
 801862c:	46bd      	mov	sp, r7
 801862e:	bcb0      	pop	{r4, r5, r7}
 8018630:	4770      	bx	lr
 8018632:	bf00      	nop
 8018634:	080185c9 	.word	0x080185c9

08018638 <pb_write>:

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8018638:	b580      	push	{r7, lr}
 801863a:	b084      	sub	sp, #16
 801863c:	af00      	add	r7, sp, #0
 801863e:	60f8      	str	r0, [r7, #12]
 8018640:	60b9      	str	r1, [r7, #8]
 8018642:	607a      	str	r2, [r7, #4]
    if (count > 0 && stream->callback != NULL)
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	2b00      	cmp	r3, #0
 8018648:	d037      	beq.n	80186ba <pb_write+0x82>
 801864a:	68fb      	ldr	r3, [r7, #12]
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	2b00      	cmp	r3, #0
 8018650:	d033      	beq.n	80186ba <pb_write+0x82>
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 8018652:	68fb      	ldr	r3, [r7, #12]
 8018654:	68da      	ldr	r2, [r3, #12]
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	441a      	add	r2, r3
 801865a:	68fb      	ldr	r3, [r7, #12]
 801865c:	68db      	ldr	r3, [r3, #12]
 801865e:	429a      	cmp	r2, r3
 8018660:	d307      	bcc.n	8018672 <pb_write+0x3a>
            stream->bytes_written + count > stream->max_size)
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	68da      	ldr	r2, [r3, #12]
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	441a      	add	r2, r3
 801866a:	68fb      	ldr	r3, [r7, #12]
 801866c:	689b      	ldr	r3, [r3, #8]
        if (stream->bytes_written + count < stream->bytes_written ||
 801866e:	429a      	cmp	r2, r3
 8018670:	d90b      	bls.n	801868a <pb_write+0x52>
        {
            PB_RETURN_ERROR(stream, "stream full");
 8018672:	68fb      	ldr	r3, [r7, #12]
 8018674:	691b      	ldr	r3, [r3, #16]
 8018676:	2b00      	cmp	r3, #0
 8018678:	d002      	beq.n	8018680 <pb_write+0x48>
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	691b      	ldr	r3, [r3, #16]
 801867e:	e000      	b.n	8018682 <pb_write+0x4a>
 8018680:	4b13      	ldr	r3, [pc, #76]	; (80186d0 <pb_write+0x98>)
 8018682:	68fa      	ldr	r2, [r7, #12]
 8018684:	6113      	str	r3, [r2, #16]
 8018686:	2300      	movs	r3, #0
 8018688:	e01e      	b.n	80186c8 <pb_write+0x90>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	687a      	ldr	r2, [r7, #4]
 8018690:	68b9      	ldr	r1, [r7, #8]
 8018692:	68f8      	ldr	r0, [r7, #12]
 8018694:	4798      	blx	r3
 8018696:	4603      	mov	r3, r0
 8018698:	f083 0301 	eor.w	r3, r3, #1
 801869c:	b2db      	uxtb	r3, r3
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d00b      	beq.n	80186ba <pb_write+0x82>
            PB_RETURN_ERROR(stream, "io error");
 80186a2:	68fb      	ldr	r3, [r7, #12]
 80186a4:	691b      	ldr	r3, [r3, #16]
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d002      	beq.n	80186b0 <pb_write+0x78>
 80186aa:	68fb      	ldr	r3, [r7, #12]
 80186ac:	691b      	ldr	r3, [r3, #16]
 80186ae:	e000      	b.n	80186b2 <pb_write+0x7a>
 80186b0:	4b08      	ldr	r3, [pc, #32]	; (80186d4 <pb_write+0x9c>)
 80186b2:	68fa      	ldr	r2, [r7, #12]
 80186b4:	6113      	str	r3, [r2, #16]
 80186b6:	2300      	movs	r3, #0
 80186b8:	e006      	b.n	80186c8 <pb_write+0x90>
#endif
    }
    
    stream->bytes_written += count;
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	68da      	ldr	r2, [r3, #12]
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	441a      	add	r2, r3
 80186c2:	68fb      	ldr	r3, [r7, #12]
 80186c4:	60da      	str	r2, [r3, #12]
    return true;
 80186c6:	2301      	movs	r3, #1
}
 80186c8:	4618      	mov	r0, r3
 80186ca:	3710      	adds	r7, #16
 80186cc:	46bd      	mov	sp, r7
 80186ce:	bd80      	pop	{r7, pc}
 80186d0:	0801fe08 	.word	0x0801fe08
 80186d4:	0801fe14 	.word	0x0801fe14

080186d8 <safe_read_bool>:
/* Read a bool value without causing undefined behavior even if the value
 * is invalid. See issue #434 and
 * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 */
static bool safe_read_bool(const void *pSize)
{
 80186d8:	b480      	push	{r7}
 80186da:	b085      	sub	sp, #20
 80186dc:	af00      	add	r7, sp, #0
 80186de:	6078      	str	r0, [r7, #4]
    const char *p = (const char *)pSize;
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	60bb      	str	r3, [r7, #8]
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 80186e4:	2300      	movs	r3, #0
 80186e6:	60fb      	str	r3, [r7, #12]
 80186e8:	e00a      	b.n	8018700 <safe_read_bool+0x28>
    {
        if (p[i] != 0)
 80186ea:	68ba      	ldr	r2, [r7, #8]
 80186ec:	68fb      	ldr	r3, [r7, #12]
 80186ee:	4413      	add	r3, r2
 80186f0:	781b      	ldrb	r3, [r3, #0]
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d001      	beq.n	80186fa <safe_read_bool+0x22>
            return true;
 80186f6:	2301      	movs	r3, #1
 80186f8:	e006      	b.n	8018708 <safe_read_bool+0x30>
    for (i = 0; i < sizeof(bool); i++)
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	3301      	adds	r3, #1
 80186fe:	60fb      	str	r3, [r7, #12]
 8018700:	68fb      	ldr	r3, [r7, #12]
 8018702:	2b00      	cmp	r3, #0
 8018704:	d0f1      	beq.n	80186ea <safe_read_bool+0x12>
    }
    return false;
 8018706:	2300      	movs	r3, #0
}
 8018708:	4618      	mov	r0, r3
 801870a:	3714      	adds	r7, #20
 801870c:	46bd      	mov	sp, r7
 801870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018712:	4770      	bx	lr

08018714 <encode_array>:

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8018714:	b5b0      	push	{r4, r5, r7, lr}
 8018716:	b08c      	sub	sp, #48	; 0x30
 8018718:	af00      	add	r7, sp, #0
 801871a:	6078      	str	r0, [r7, #4]
 801871c:	6039      	str	r1, [r7, #0]
    pb_size_t count;
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    size_t size;
#endif

    count = *(pb_size_t*)field->pSize;
 801871e:	683b      	ldr	r3, [r7, #0]
 8018720:	6a1b      	ldr	r3, [r3, #32]
 8018722:	881b      	ldrh	r3, [r3, #0]
 8018724:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (count == 0)
 8018726:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018728:	2b00      	cmp	r3, #0
 801872a:	d101      	bne.n	8018730 <encode_array+0x1c>
        return true;
 801872c:	2301      	movs	r3, #1
 801872e:	e13d      	b.n	80189ac <encode_array+0x298>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 8018730:	683b      	ldr	r3, [r7, #0]
 8018732:	7d9b      	ldrb	r3, [r3, #22]
 8018734:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8018738:	2b80      	cmp	r3, #128	; 0x80
 801873a:	d010      	beq.n	801875e <encode_array+0x4a>
 801873c:	683b      	ldr	r3, [r7, #0]
 801873e:	8a9b      	ldrh	r3, [r3, #20]
 8018740:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018742:	429a      	cmp	r2, r3
 8018744:	d90b      	bls.n	801875e <encode_array+0x4a>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	691b      	ldr	r3, [r3, #16]
 801874a:	2b00      	cmp	r3, #0
 801874c:	d002      	beq.n	8018754 <encode_array+0x40>
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	691b      	ldr	r3, [r3, #16]
 8018752:	e000      	b.n	8018756 <encode_array+0x42>
 8018754:	4b97      	ldr	r3, [pc, #604]	; (80189b4 <encode_array+0x2a0>)
 8018756:	687a      	ldr	r2, [r7, #4]
 8018758:	6113      	str	r3, [r2, #16]
 801875a:	2300      	movs	r3, #0
 801875c:	e126      	b.n	80189ac <encode_array+0x298>
    
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 801875e:	683b      	ldr	r3, [r7, #0]
 8018760:	7d9b      	ldrb	r3, [r3, #22]
 8018762:	f003 030f 	and.w	r3, r3, #15
 8018766:	2b05      	cmp	r3, #5
 8018768:	f200 80b3 	bhi.w	80188d2 <encode_array+0x1be>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 801876c:	683b      	ldr	r3, [r7, #0]
 801876e:	8a1b      	ldrh	r3, [r3, #16]
 8018770:	461a      	mov	r2, r3
 8018772:	2102      	movs	r1, #2
 8018774:	6878      	ldr	r0, [r7, #4]
 8018776:	f000 fcdd 	bl	8019134 <pb_encode_tag>
 801877a:	4603      	mov	r3, r0
 801877c:	f083 0301 	eor.w	r3, r3, #1
 8018780:	b2db      	uxtb	r3, r3
 8018782:	2b00      	cmp	r3, #0
 8018784:	d001      	beq.n	801878a <encode_array+0x76>
            return false;
 8018786:	2300      	movs	r3, #0
 8018788:	e110      	b.n	80189ac <encode_array+0x298>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 801878a:	683b      	ldr	r3, [r7, #0]
 801878c:	7d9b      	ldrb	r3, [r3, #22]
 801878e:	f003 030f 	and.w	r3, r3, #15
 8018792:	2b04      	cmp	r3, #4
 8018794:	d103      	bne.n	801879e <encode_array+0x8a>
        {
            size = 4 * (size_t)count;
 8018796:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018798:	009b      	lsls	r3, r3, #2
 801879a:	62bb      	str	r3, [r7, #40]	; 0x28
 801879c:	e047      	b.n	801882e <encode_array+0x11a>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 801879e:	683b      	ldr	r3, [r7, #0]
 80187a0:	7d9b      	ldrb	r3, [r3, #22]
 80187a2:	f003 030f 	and.w	r3, r3, #15
 80187a6:	2b05      	cmp	r3, #5
 80187a8:	d103      	bne.n	80187b2 <encode_array+0x9e>
        {
            size = 8 * (size_t)count;
 80187aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80187ac:	00db      	lsls	r3, r3, #3
 80187ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80187b0:	e03d      	b.n	801882e <encode_array+0x11a>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 80187b2:	f107 0308 	add.w	r3, r7, #8
 80187b6:	2200      	movs	r2, #0
 80187b8:	601a      	str	r2, [r3, #0]
 80187ba:	605a      	str	r2, [r3, #4]
 80187bc:	609a      	str	r2, [r3, #8]
 80187be:	60da      	str	r2, [r3, #12]
 80187c0:	611a      	str	r2, [r3, #16]
            void *pData_orig = field->pData;
 80187c2:	683b      	ldr	r3, [r7, #0]
 80187c4:	69db      	ldr	r3, [r3, #28]
 80187c6:	61fb      	str	r3, [r7, #28]
            for (i = 0; i < count; i++)
 80187c8:	2300      	movs	r3, #0
 80187ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80187cc:	e026      	b.n	801881c <encode_array+0x108>
            {
                if (!pb_enc_varint(&sizestream, field))
 80187ce:	f107 0308 	add.w	r3, r7, #8
 80187d2:	6839      	ldr	r1, [r7, #0]
 80187d4:	4618      	mov	r0, r3
 80187d6:	f000 fdef 	bl	80193b8 <pb_enc_varint>
 80187da:	4603      	mov	r3, r0
 80187dc:	f083 0301 	eor.w	r3, r3, #1
 80187e0:	b2db      	uxtb	r3, r3
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d010      	beq.n	8018808 <encode_array+0xf4>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	691b      	ldr	r3, [r3, #16]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d002      	beq.n	80187f4 <encode_array+0xe0>
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	691b      	ldr	r3, [r3, #16]
 80187f2:	e005      	b.n	8018800 <encode_array+0xec>
 80187f4:	69bb      	ldr	r3, [r7, #24]
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d001      	beq.n	80187fe <encode_array+0xea>
 80187fa:	69bb      	ldr	r3, [r7, #24]
 80187fc:	e000      	b.n	8018800 <encode_array+0xec>
 80187fe:	4b6e      	ldr	r3, [pc, #440]	; (80189b8 <encode_array+0x2a4>)
 8018800:	687a      	ldr	r2, [r7, #4]
 8018802:	6113      	str	r3, [r2, #16]
 8018804:	2300      	movs	r3, #0
 8018806:	e0d1      	b.n	80189ac <encode_array+0x298>
                field->pData = (char*)field->pData + field->data_size;
 8018808:	683b      	ldr	r3, [r7, #0]
 801880a:	69db      	ldr	r3, [r3, #28]
 801880c:	683a      	ldr	r2, [r7, #0]
 801880e:	8a52      	ldrh	r2, [r2, #18]
 8018810:	441a      	add	r2, r3
 8018812:	683b      	ldr	r3, [r7, #0]
 8018814:	61da      	str	r2, [r3, #28]
            for (i = 0; i < count; i++)
 8018816:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018818:	3301      	adds	r3, #1
 801881a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801881c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801881e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018820:	429a      	cmp	r2, r3
 8018822:	d3d4      	bcc.n	80187ce <encode_array+0xba>
            }
            field->pData = pData_orig;
 8018824:	683b      	ldr	r3, [r7, #0]
 8018826:	69fa      	ldr	r2, [r7, #28]
 8018828:	61da      	str	r2, [r3, #28]
            size = sizestream.bytes_written;
 801882a:	697b      	ldr	r3, [r7, #20]
 801882c:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 801882e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018830:	2200      	movs	r2, #0
 8018832:	461c      	mov	r4, r3
 8018834:	4615      	mov	r5, r2
 8018836:	4622      	mov	r2, r4
 8018838:	462b      	mov	r3, r5
 801883a:	6878      	ldr	r0, [r7, #4]
 801883c:	f000 fbf7 	bl	801902e <pb_encode_varint>
 8018840:	4603      	mov	r3, r0
 8018842:	f083 0301 	eor.w	r3, r3, #1
 8018846:	b2db      	uxtb	r3, r3
 8018848:	2b00      	cmp	r3, #0
 801884a:	d001      	beq.n	8018850 <encode_array+0x13c>
            return false;
 801884c:	2300      	movs	r3, #0
 801884e:	e0ad      	b.n	80189ac <encode_array+0x298>
        
        if (stream->callback == NULL)
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	2b00      	cmp	r3, #0
 8018856:	d106      	bne.n	8018866 <encode_array+0x152>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8018858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801885a:	2100      	movs	r1, #0
 801885c:	6878      	ldr	r0, [r7, #4]
 801885e:	f7ff feeb 	bl	8018638 <pb_write>
 8018862:	4603      	mov	r3, r0
 8018864:	e0a2      	b.n	80189ac <encode_array+0x298>
        
        /* Write the data */
        for (i = 0; i < count; i++)
 8018866:	2300      	movs	r3, #0
 8018868:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801886a:	e02d      	b.n	80188c8 <encode_array+0x1b4>
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 801886c:	683b      	ldr	r3, [r7, #0]
 801886e:	7d9b      	ldrb	r3, [r3, #22]
 8018870:	f003 030f 	and.w	r3, r3, #15
 8018874:	2b04      	cmp	r3, #4
 8018876:	d005      	beq.n	8018884 <encode_array+0x170>
 8018878:	683b      	ldr	r3, [r7, #0]
 801887a:	7d9b      	ldrb	r3, [r3, #22]
 801887c:	f003 030f 	and.w	r3, r3, #15
 8018880:	2b05      	cmp	r3, #5
 8018882:	d10b      	bne.n	801889c <encode_array+0x188>
            {
                if (!pb_enc_fixed(stream, field))
 8018884:	6839      	ldr	r1, [r7, #0]
 8018886:	6878      	ldr	r0, [r7, #4]
 8018888:	f000 fe58 	bl	801953c <pb_enc_fixed>
 801888c:	4603      	mov	r3, r0
 801888e:	f083 0301 	eor.w	r3, r3, #1
 8018892:	b2db      	uxtb	r3, r3
 8018894:	2b00      	cmp	r3, #0
 8018896:	d00d      	beq.n	80188b4 <encode_array+0x1a0>
                    return false;
 8018898:	2300      	movs	r3, #0
 801889a:	e087      	b.n	80189ac <encode_array+0x298>
            }
            else
            {
                if (!pb_enc_varint(stream, field))
 801889c:	6839      	ldr	r1, [r7, #0]
 801889e:	6878      	ldr	r0, [r7, #4]
 80188a0:	f000 fd8a 	bl	80193b8 <pb_enc_varint>
 80188a4:	4603      	mov	r3, r0
 80188a6:	f083 0301 	eor.w	r3, r3, #1
 80188aa:	b2db      	uxtb	r3, r3
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d001      	beq.n	80188b4 <encode_array+0x1a0>
                    return false;
 80188b0:	2300      	movs	r3, #0
 80188b2:	e07b      	b.n	80189ac <encode_array+0x298>
            }

            field->pData = (char*)field->pData + field->data_size;
 80188b4:	683b      	ldr	r3, [r7, #0]
 80188b6:	69db      	ldr	r3, [r3, #28]
 80188b8:	683a      	ldr	r2, [r7, #0]
 80188ba:	8a52      	ldrh	r2, [r2, #18]
 80188bc:	441a      	add	r2, r3
 80188be:	683b      	ldr	r3, [r7, #0]
 80188c0:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 80188c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80188c4:	3301      	adds	r3, #1
 80188c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80188c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80188ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80188cc:	429a      	cmp	r2, r3
 80188ce:	d3cd      	bcc.n	801886c <encode_array+0x158>
 80188d0:	e06b      	b.n	80189aa <encode_array+0x296>
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 80188d2:	2300      	movs	r3, #0
 80188d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80188d6:	e064      	b.n	80189a2 <encode_array+0x28e>
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 80188d8:	683b      	ldr	r3, [r7, #0]
 80188da:	7d9b      	ldrb	r3, [r3, #22]
 80188dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80188e0:	2b80      	cmp	r3, #128	; 0x80
 80188e2:	d147      	bne.n	8018974 <encode_array+0x260>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 80188e4:	683b      	ldr	r3, [r7, #0]
 80188e6:	7d9b      	ldrb	r3, [r3, #22]
 80188e8:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 80188ec:	2b07      	cmp	r3, #7
 80188ee:	d005      	beq.n	80188fc <encode_array+0x1e8>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 80188f0:	683b      	ldr	r3, [r7, #0]
 80188f2:	7d9b      	ldrb	r3, [r3, #22]
 80188f4:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 80188f8:	2b06      	cmp	r3, #6
 80188fa:	d13b      	bne.n	8018974 <encode_array+0x260>
            {
                bool status;
                void *pData_orig = field->pData;
 80188fc:	683b      	ldr	r3, [r7, #0]
 80188fe:	69db      	ldr	r3, [r3, #28]
 8018900:	623b      	str	r3, [r7, #32]
                field->pData = *(void* const*)field->pData;
 8018902:	683b      	ldr	r3, [r7, #0]
 8018904:	69db      	ldr	r3, [r3, #28]
 8018906:	681a      	ldr	r2, [r3, #0]
 8018908:	683b      	ldr	r3, [r7, #0]
 801890a:	61da      	str	r2, [r3, #28]

                if (!field->pData)
 801890c:	683b      	ldr	r3, [r7, #0]
 801890e:	69db      	ldr	r3, [r3, #28]
 8018910:	2b00      	cmp	r3, #0
 8018912:	d11c      	bne.n	801894e <encode_array+0x23a>
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 8018914:	6839      	ldr	r1, [r7, #0]
 8018916:	6878      	ldr	r0, [r7, #4]
 8018918:	f000 fc36 	bl	8019188 <pb_encode_tag_for_field>
 801891c:	4603      	mov	r3, r0
 801891e:	2b00      	cmp	r3, #0
 8018920:	d00b      	beq.n	801893a <encode_array+0x226>
                             pb_encode_varint(stream, 0);
 8018922:	f04f 0200 	mov.w	r2, #0
 8018926:	f04f 0300 	mov.w	r3, #0
 801892a:	6878      	ldr	r0, [r7, #4]
 801892c:	f000 fb7f 	bl	801902e <pb_encode_varint>
 8018930:	4603      	mov	r3, r0
                    status = pb_encode_tag_for_field(stream, field) &&
 8018932:	2b00      	cmp	r3, #0
 8018934:	d001      	beq.n	801893a <encode_array+0x226>
 8018936:	2301      	movs	r3, #1
 8018938:	e000      	b.n	801893c <encode_array+0x228>
 801893a:	2300      	movs	r3, #0
 801893c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018944:	f003 0301 	and.w	r3, r3, #1
 8018948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801894c:	e006      	b.n	801895c <encode_array+0x248>
                }
                else
                {
                    status = encode_basic_field(stream, field);
 801894e:	6839      	ldr	r1, [r7, #0]
 8018950:	6878      	ldr	r0, [r7, #4]
 8018952:	f000 f951 	bl	8018bf8 <encode_basic_field>
 8018956:	4603      	mov	r3, r0
 8018958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }

                field->pData = pData_orig;
 801895c:	683b      	ldr	r3, [r7, #0]
 801895e:	6a3a      	ldr	r2, [r7, #32]
 8018960:	61da      	str	r2, [r3, #28]

                if (!status)
 8018962:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018966:	f083 0301 	eor.w	r3, r3, #1
 801896a:	b2db      	uxtb	r3, r3
 801896c:	2b00      	cmp	r3, #0
 801896e:	d00d      	beq.n	801898c <encode_array+0x278>
                    return false;
 8018970:	2300      	movs	r3, #0
 8018972:	e01b      	b.n	80189ac <encode_array+0x298>
            }
            else
            {
                if (!encode_basic_field(stream, field))
 8018974:	6839      	ldr	r1, [r7, #0]
 8018976:	6878      	ldr	r0, [r7, #4]
 8018978:	f000 f93e 	bl	8018bf8 <encode_basic_field>
 801897c:	4603      	mov	r3, r0
 801897e:	f083 0301 	eor.w	r3, r3, #1
 8018982:	b2db      	uxtb	r3, r3
 8018984:	2b00      	cmp	r3, #0
 8018986:	d002      	beq.n	801898e <encode_array+0x27a>
                    return false;
 8018988:	2300      	movs	r3, #0
 801898a:	e00f      	b.n	80189ac <encode_array+0x298>
            {
 801898c:	bf00      	nop
            }
            field->pData = (char*)field->pData + field->data_size;
 801898e:	683b      	ldr	r3, [r7, #0]
 8018990:	69db      	ldr	r3, [r3, #28]
 8018992:	683a      	ldr	r2, [r7, #0]
 8018994:	8a52      	ldrh	r2, [r2, #18]
 8018996:	441a      	add	r2, r3
 8018998:	683b      	ldr	r3, [r7, #0]
 801899a:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 801899c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801899e:	3301      	adds	r3, #1
 80189a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80189a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80189a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80189a6:	429a      	cmp	r2, r3
 80189a8:	d396      	bcc.n	80188d8 <encode_array+0x1c4>
        }
    }
    
    return true;
 80189aa:	2301      	movs	r3, #1
}
 80189ac:	4618      	mov	r0, r3
 80189ae:	3730      	adds	r7, #48	; 0x30
 80189b0:	46bd      	mov	sp, r7
 80189b2:	bdb0      	pop	{r4, r5, r7, pc}
 80189b4:	0801fe20 	.word	0x0801fe20
 80189b8:	0801fe38 	.word	0x0801fe38

080189bc <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
 80189bc:	b580      	push	{r7, lr}
 80189be:	b092      	sub	sp, #72	; 0x48
 80189c0:	af00      	add	r7, sp, #0
 80189c2:	6078      	str	r0, [r7, #4]
    pb_type_t type = field->type;
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	7d9b      	ldrb	r3, [r3, #22]
 80189c8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80189cc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80189d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	f040 80c9 	bne.w	8018b6c <pb_check_proto3_default_value+0x1b0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 80189da:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80189de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d101      	bne.n	80189ea <pb_check_proto3_default_value+0x2e>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
 80189e6:	2300      	movs	r3, #0
 80189e8:	e100      	b.n	8018bec <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 80189ea:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80189ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80189f2:	2b20      	cmp	r3, #32
 80189f4:	d108      	bne.n	8018a08 <pb_check_proto3_default_value+0x4c>
        {
            /* Repeated fields inside proto3 submessage: present if count != 0 */
            return *(const pb_size_t*)field->pSize == 0;
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	6a1b      	ldr	r3, [r3, #32]
 80189fa:	881b      	ldrh	r3, [r3, #0]
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	bf0c      	ite	eq
 8018a00:	2301      	moveq	r3, #1
 8018a02:	2300      	movne	r3, #0
 8018a04:	b2db      	uxtb	r3, r3
 8018a06:	e0f1      	b.n	8018bec <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8018a08:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8018a0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8018a10:	2b30      	cmp	r3, #48	; 0x30
 8018a12:	d108      	bne.n	8018a26 <pb_check_proto3_default_value+0x6a>
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	6a1b      	ldr	r3, [r3, #32]
 8018a18:	881b      	ldrh	r3, [r3, #0]
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	bf0c      	ite	eq
 8018a1e:	2301      	moveq	r3, #1
 8018a20:	2300      	movne	r3, #0
 8018a22:	b2db      	uxtb	r3, r3
 8018a24:	e0e2      	b.n	8018bec <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8018a26:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8018a2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8018a2e:	2b10      	cmp	r3, #16
 8018a30:	d115      	bne.n	8018a5e <pb_check_proto3_default_value+0xa2>
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	6a1b      	ldr	r3, [r3, #32]
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d011      	beq.n	8018a5e <pb_check_proto3_default_value+0xa2>
        {
            /* Proto2 optional fields inside proto3 message, or proto3
             * submessage fields. */
            return safe_read_bool(field->pSize) == false;
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	6a1b      	ldr	r3, [r3, #32]
 8018a3e:	4618      	mov	r0, r3
 8018a40:	f7ff fe4a 	bl	80186d8 <safe_read_bool>
 8018a44:	4603      	mov	r3, r0
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	bf14      	ite	ne
 8018a4a:	2301      	movne	r3, #1
 8018a4c:	2300      	moveq	r3, #0
 8018a4e:	b2db      	uxtb	r3, r3
 8018a50:	f083 0301 	eor.w	r3, r3, #1
 8018a54:	b2db      	uxtb	r3, r3
 8018a56:	f003 0301 	and.w	r3, r3, #1
 8018a5a:	b2db      	uxtb	r3, r3
 8018a5c:	e0c6      	b.n	8018bec <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->default_value)
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	689b      	ldr	r3, [r3, #8]
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d001      	beq.n	8018a6c <pb_check_proto3_default_value+0xb0>
            /* Proto3 messages do not have default values, but proto2 messages
             * can contain optional fields without has_fields (generator option 'proto3').
             * In this case they must always be encoded, to make sure that the
             * non-zero default value is overwritten.
             */
            return false;
 8018a68:	2300      	movs	r3, #0
 8018a6a:	e0bf      	b.n	8018bec <pb_check_proto3_default_value+0x230>
        }

        /* Rest is proto3 singular fields */
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8018a6c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8018a70:	f003 030f 	and.w	r3, r3, #15
 8018a74:	2b05      	cmp	r3, #5
 8018a76:	d81c      	bhi.n	8018ab2 <pb_check_proto3_default_value+0xf6>
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	69db      	ldr	r3, [r3, #28]
 8018a7c:	637b      	str	r3, [r7, #52]	; 0x34
            for (i = 0; i < field->data_size; i++)
 8018a7e:	2300      	movs	r3, #0
 8018a80:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8018a84:	e00d      	b.n	8018aa2 <pb_check_proto3_default_value+0xe6>
            {
                if (p[i] != 0)
 8018a86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018a8c:	4413      	add	r3, r2
 8018a8e:	781b      	ldrb	r3, [r3, #0]
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	d001      	beq.n	8018a98 <pb_check_proto3_default_value+0xdc>
                {
                    return false;
 8018a94:	2300      	movs	r3, #0
 8018a96:	e0a9      	b.n	8018bec <pb_check_proto3_default_value+0x230>
            for (i = 0; i < field->data_size; i++)
 8018a98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018a9c:	3301      	adds	r3, #1
 8018a9e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	8a5b      	ldrh	r3, [r3, #18]
 8018aa6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018aaa:	429a      	cmp	r2, r3
 8018aac:	d3eb      	bcc.n	8018a86 <pb_check_proto3_default_value+0xca>
                }
            }

            return true;
 8018aae:	2301      	movs	r3, #1
 8018ab0:	e09c      	b.n	8018bec <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 8018ab2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8018ab6:	f003 030f 	and.w	r3, r3, #15
 8018aba:	2b06      	cmp	r3, #6
 8018abc:	d10a      	bne.n	8018ad4 <pb_check_proto3_default_value+0x118>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	69db      	ldr	r3, [r3, #28]
 8018ac2:	63bb      	str	r3, [r7, #56]	; 0x38
            return bytes->size == 0;
 8018ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ac6:	881b      	ldrh	r3, [r3, #0]
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	bf0c      	ite	eq
 8018acc:	2301      	moveq	r3, #1
 8018ace:	2300      	movne	r3, #0
 8018ad0:	b2db      	uxtb	r3, r3
 8018ad2:	e08b      	b.n	8018bec <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 8018ad4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8018ad8:	f003 030f 	and.w	r3, r3, #15
 8018adc:	2b07      	cmp	r3, #7
 8018ade:	d108      	bne.n	8018af2 <pb_check_proto3_default_value+0x136>
        {
            return *(const char*)field->pData == '\0';
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	69db      	ldr	r3, [r3, #28]
 8018ae4:	781b      	ldrb	r3, [r3, #0]
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	bf0c      	ite	eq
 8018aea:	2301      	moveq	r3, #1
 8018aec:	2300      	movne	r3, #0
 8018aee:	b2db      	uxtb	r3, r3
 8018af0:	e07c      	b.n	8018bec <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 8018af2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8018af6:	f003 030f 	and.w	r3, r3, #15
 8018afa:	2b0b      	cmp	r3, #11
 8018afc:	d107      	bne.n	8018b0e <pb_check_proto3_default_value+0x152>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	8a5b      	ldrh	r3, [r3, #18]
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	bf0c      	ite	eq
 8018b06:	2301      	moveq	r3, #1
 8018b08:	2300      	movne	r3, #0
 8018b0a:	b2db      	uxtb	r3, r3
 8018b0c:	e06e      	b.n	8018bec <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE_IS_SUBMSG(type))
 8018b0e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8018b12:	f003 030f 	and.w	r3, r3, #15
 8018b16:	2b08      	cmp	r3, #8
 8018b18:	d005      	beq.n	8018b26 <pb_check_proto3_default_value+0x16a>
 8018b1a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8018b1e:	f003 030f 	and.w	r3, r3, #15
 8018b22:	2b09      	cmp	r3, #9
 8018b24:	d161      	bne.n	8018bea <pb_check_proto3_default_value+0x22e>
             * because the C struct may contain padding bytes that must
             * be skipped. Note that usually proto3 submessages have
             * a separate has_field that is checked earlier in this if.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	69da      	ldr	r2, [r3, #28]
 8018b2e:	f107 030c 	add.w	r3, r7, #12
 8018b32:	4618      	mov	r0, r3
 8018b34:	f7fd fe37 	bl	80167a6 <pb_field_iter_begin>
 8018b38:	4603      	mov	r3, r0
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d014      	beq.n	8018b68 <pb_check_proto3_default_value+0x1ac>
            {
                do
                {
                    if (!pb_check_proto3_default_value(&iter))
 8018b3e:	f107 030c 	add.w	r3, r7, #12
 8018b42:	4618      	mov	r0, r3
 8018b44:	f7ff ff3a 	bl	80189bc <pb_check_proto3_default_value>
 8018b48:	4603      	mov	r3, r0
 8018b4a:	f083 0301 	eor.w	r3, r3, #1
 8018b4e:	b2db      	uxtb	r3, r3
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d001      	beq.n	8018b58 <pb_check_proto3_default_value+0x19c>
                    {
                        return false;
 8018b54:	2300      	movs	r3, #0
 8018b56:	e049      	b.n	8018bec <pb_check_proto3_default_value+0x230>
                    }
                } while (pb_field_iter_next(&iter));
 8018b58:	f107 030c 	add.w	r3, r7, #12
 8018b5c:	4618      	mov	r0, r3
 8018b5e:	f7fd fe6b 	bl	8016838 <pb_field_iter_next>
 8018b62:	4603      	mov	r3, r0
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d1ea      	bne.n	8018b3e <pb_check_proto3_default_value+0x182>
            }
            return true;
 8018b68:	2301      	movs	r3, #1
 8018b6a:	e03f      	b.n	8018bec <pb_check_proto3_default_value+0x230>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8018b6c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8018b70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8018b74:	2b80      	cmp	r3, #128	; 0x80
 8018b76:	d107      	bne.n	8018b88 <pb_check_proto3_default_value+0x1cc>
    {
        return field->pData == NULL;
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	69db      	ldr	r3, [r3, #28]
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	bf0c      	ite	eq
 8018b80:	2301      	moveq	r3, #1
 8018b82:	2300      	movne	r3, #0
 8018b84:	b2db      	uxtb	r3, r3
 8018b86:	e031      	b.n	8018bec <pb_check_proto3_default_value+0x230>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
 8018b88:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8018b8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8018b90:	2b40      	cmp	r3, #64	; 0x40
 8018b92:	d12a      	bne.n	8018bea <pb_check_proto3_default_value+0x22e>
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8018b94:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8018b98:	f003 030f 	and.w	r3, r3, #15
 8018b9c:	2b0a      	cmp	r3, #10
 8018b9e:	d10a      	bne.n	8018bb6 <pb_check_proto3_default_value+0x1fa>
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	69db      	ldr	r3, [r3, #28]
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
            return extension == NULL;
 8018ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	bf0c      	ite	eq
 8018bae:	2301      	moveq	r3, #1
 8018bb0:	2300      	movne	r3, #0
 8018bb2:	b2db      	uxtb	r3, r3
 8018bb4:	e01a      	b.n	8018bec <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->field_callback == pb_default_field_callback)
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	68db      	ldr	r3, [r3, #12]
 8018bbc:	4a0d      	ldr	r2, [pc, #52]	; (8018bf4 <pb_check_proto3_default_value+0x238>)
 8018bbe:	4293      	cmp	r3, r2
 8018bc0:	d10a      	bne.n	8018bd8 <pb_check_proto3_default_value+0x21c>
        {
            pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	69db      	ldr	r3, [r3, #28]
 8018bc6:	643b      	str	r3, [r7, #64]	; 0x40
            return pCallback->funcs.encode == NULL;
 8018bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018bca:	681b      	ldr	r3, [r3, #0]
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	bf0c      	ite	eq
 8018bd0:	2301      	moveq	r3, #1
 8018bd2:	2300      	movne	r3, #0
 8018bd4:	b2db      	uxtb	r3, r3
 8018bd6:	e009      	b.n	8018bec <pb_check_proto3_default_value+0x230>
        }
        else
        {
            return field->descriptor->field_callback == NULL;
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	68db      	ldr	r3, [r3, #12]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	bf0c      	ite	eq
 8018be2:	2301      	moveq	r3, #1
 8018be4:	2300      	movne	r3, #0
 8018be6:	b2db      	uxtb	r3, r3
 8018be8:	e000      	b.n	8018bec <pb_check_proto3_default_value+0x230>
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
 8018bea:	2300      	movs	r3, #0
}
 8018bec:	4618      	mov	r0, r3
 8018bee:	3748      	adds	r7, #72	; 0x48
 8018bf0:	46bd      	mov	sp, r7
 8018bf2:	bd80      	pop	{r7, pc}
 8018bf4:	080169db 	.word	0x080169db

08018bf8 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	b082      	sub	sp, #8
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	6078      	str	r0, [r7, #4]
 8018c00:	6039      	str	r1, [r7, #0]
    if (!field->pData)
 8018c02:	683b      	ldr	r3, [r7, #0]
 8018c04:	69db      	ldr	r3, [r3, #28]
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d101      	bne.n	8018c0e <encode_basic_field+0x16>
    {
        /* Missing pointer field */
        return true;
 8018c0a:	2301      	movs	r3, #1
 8018c0c:	e061      	b.n	8018cd2 <encode_basic_field+0xda>
    }

    if (!pb_encode_tag_for_field(stream, field))
 8018c0e:	6839      	ldr	r1, [r7, #0]
 8018c10:	6878      	ldr	r0, [r7, #4]
 8018c12:	f000 fab9 	bl	8019188 <pb_encode_tag_for_field>
 8018c16:	4603      	mov	r3, r0
 8018c18:	f083 0301 	eor.w	r3, r3, #1
 8018c1c:	b2db      	uxtb	r3, r3
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d001      	beq.n	8018c26 <encode_basic_field+0x2e>
        return false;
 8018c22:	2300      	movs	r3, #0
 8018c24:	e055      	b.n	8018cd2 <encode_basic_field+0xda>

    switch (PB_LTYPE(field->type))
 8018c26:	683b      	ldr	r3, [r7, #0]
 8018c28:	7d9b      	ldrb	r3, [r3, #22]
 8018c2a:	f003 030f 	and.w	r3, r3, #15
 8018c2e:	2b0b      	cmp	r3, #11
 8018c30:	d844      	bhi.n	8018cbc <encode_basic_field+0xc4>
 8018c32:	a201      	add	r2, pc, #4	; (adr r2, 8018c38 <encode_basic_field+0x40>)
 8018c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c38:	08018c69 	.word	0x08018c69
 8018c3c:	08018c75 	.word	0x08018c75
 8018c40:	08018c75 	.word	0x08018c75
 8018c44:	08018c75 	.word	0x08018c75
 8018c48:	08018c81 	.word	0x08018c81
 8018c4c:	08018c81 	.word	0x08018c81
 8018c50:	08018c8d 	.word	0x08018c8d
 8018c54:	08018c99 	.word	0x08018c99
 8018c58:	08018ca5 	.word	0x08018ca5
 8018c5c:	08018ca5 	.word	0x08018ca5
 8018c60:	08018cbd 	.word	0x08018cbd
 8018c64:	08018cb1 	.word	0x08018cb1
    {
        case PB_LTYPE_BOOL:
            return pb_enc_bool(stream, field);
 8018c68:	6839      	ldr	r1, [r7, #0]
 8018c6a:	6878      	ldr	r0, [r7, #4]
 8018c6c:	f000 fb8a 	bl	8019384 <pb_enc_bool>
 8018c70:	4603      	mov	r3, r0
 8018c72:	e02e      	b.n	8018cd2 <encode_basic_field+0xda>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_enc_varint(stream, field);
 8018c74:	6839      	ldr	r1, [r7, #0]
 8018c76:	6878      	ldr	r0, [r7, #4]
 8018c78:	f000 fb9e 	bl	80193b8 <pb_enc_varint>
 8018c7c:	4603      	mov	r3, r0
 8018c7e:	e028      	b.n	8018cd2 <encode_basic_field+0xda>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_enc_fixed(stream, field);
 8018c80:	6839      	ldr	r1, [r7, #0]
 8018c82:	6878      	ldr	r0, [r7, #4]
 8018c84:	f000 fc5a 	bl	801953c <pb_enc_fixed>
 8018c88:	4603      	mov	r3, r0
 8018c8a:	e022      	b.n	8018cd2 <encode_basic_field+0xda>

        case PB_LTYPE_BYTES:
            return pb_enc_bytes(stream, field);
 8018c8c:	6839      	ldr	r1, [r7, #0]
 8018c8e:	6878      	ldr	r0, [r7, #4]
 8018c90:	f000 fc82 	bl	8019598 <pb_enc_bytes>
 8018c94:	4603      	mov	r3, r0
 8018c96:	e01c      	b.n	8018cd2 <encode_basic_field+0xda>

        case PB_LTYPE_STRING:
            return pb_enc_string(stream, field);
 8018c98:	6839      	ldr	r1, [r7, #0]
 8018c9a:	6878      	ldr	r0, [r7, #4]
 8018c9c:	f000 fcba 	bl	8019614 <pb_enc_string>
 8018ca0:	4603      	mov	r3, r0
 8018ca2:	e016      	b.n	8018cd2 <encode_basic_field+0xda>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_enc_submessage(stream, field);
 8018ca4:	6839      	ldr	r1, [r7, #0]
 8018ca6:	6878      	ldr	r0, [r7, #4]
 8018ca8:	f000 fd12 	bl	80196d0 <pb_enc_submessage>
 8018cac:	4603      	mov	r3, r0
 8018cae:	e010      	b.n	8018cd2 <encode_basic_field+0xda>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_enc_fixed_length_bytes(stream, field);
 8018cb0:	6839      	ldr	r1, [r7, #0]
 8018cb2:	6878      	ldr	r0, [r7, #4]
 8018cb4:	f000 fd52 	bl	801975c <pb_enc_fixed_length_bytes>
 8018cb8:	4603      	mov	r3, r0
 8018cba:	e00a      	b.n	8018cd2 <encode_basic_field+0xda>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	691b      	ldr	r3, [r3, #16]
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d002      	beq.n	8018cca <encode_basic_field+0xd2>
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	691b      	ldr	r3, [r3, #16]
 8018cc8:	e000      	b.n	8018ccc <encode_basic_field+0xd4>
 8018cca:	4b04      	ldr	r3, [pc, #16]	; (8018cdc <encode_basic_field+0xe4>)
 8018ccc:	687a      	ldr	r2, [r7, #4]
 8018cce:	6113      	str	r3, [r2, #16]
 8018cd0:	2300      	movs	r3, #0
    }
}
 8018cd2:	4618      	mov	r0, r3
 8018cd4:	3708      	adds	r7, #8
 8018cd6:	46bd      	mov	sp, r7
 8018cd8:	bd80      	pop	{r7, pc}
 8018cda:	bf00      	nop
 8018cdc:	0801fe40 	.word	0x0801fe40

08018ce0 <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8018ce0:	b580      	push	{r7, lr}
 8018ce2:	b082      	sub	sp, #8
 8018ce4:	af00      	add	r7, sp, #0
 8018ce6:	6078      	str	r0, [r7, #4]
 8018ce8:	6039      	str	r1, [r7, #0]
    if (field->descriptor->field_callback != NULL)
 8018cea:	683b      	ldr	r3, [r7, #0]
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	68db      	ldr	r3, [r3, #12]
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d018      	beq.n	8018d26 <encode_callback_field+0x46>
    {
        if (!field->descriptor->field_callback(NULL, stream, field))
 8018cf4:	683b      	ldr	r3, [r7, #0]
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	68db      	ldr	r3, [r3, #12]
 8018cfa:	683a      	ldr	r2, [r7, #0]
 8018cfc:	6879      	ldr	r1, [r7, #4]
 8018cfe:	2000      	movs	r0, #0
 8018d00:	4798      	blx	r3
 8018d02:	4603      	mov	r3, r0
 8018d04:	f083 0301 	eor.w	r3, r3, #1
 8018d08:	b2db      	uxtb	r3, r3
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d00b      	beq.n	8018d26 <encode_callback_field+0x46>
            PB_RETURN_ERROR(stream, "callback error");
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	691b      	ldr	r3, [r3, #16]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d002      	beq.n	8018d1c <encode_callback_field+0x3c>
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	691b      	ldr	r3, [r3, #16]
 8018d1a:	e000      	b.n	8018d1e <encode_callback_field+0x3e>
 8018d1c:	4b04      	ldr	r3, [pc, #16]	; (8018d30 <encode_callback_field+0x50>)
 8018d1e:	687a      	ldr	r2, [r7, #4]
 8018d20:	6113      	str	r3, [r2, #16]
 8018d22:	2300      	movs	r3, #0
 8018d24:	e000      	b.n	8018d28 <encode_callback_field+0x48>
    }
    return true;
 8018d26:	2301      	movs	r3, #1
}
 8018d28:	4618      	mov	r0, r3
 8018d2a:	3708      	adds	r7, #8
 8018d2c:	46bd      	mov	sp, r7
 8018d2e:	bd80      	pop	{r7, pc}
 8018d30:	0801fe54 	.word	0x0801fe54

08018d34 <encode_field>:

/* Encode a single field of any callback, pointer or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8018d34:	b580      	push	{r7, lr}
 8018d36:	b082      	sub	sp, #8
 8018d38:	af00      	add	r7, sp, #0
 8018d3a:	6078      	str	r0, [r7, #4]
 8018d3c:	6039      	str	r1, [r7, #0]
    /* Check field presence */
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 8018d3e:	683b      	ldr	r3, [r7, #0]
 8018d40:	7d9b      	ldrb	r3, [r3, #22]
 8018d42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8018d46:	2b30      	cmp	r3, #48	; 0x30
 8018d48:	d108      	bne.n	8018d5c <encode_field+0x28>
    {
        if (*(const pb_size_t*)field->pSize != field->tag)
 8018d4a:	683b      	ldr	r3, [r7, #0]
 8018d4c:	6a1b      	ldr	r3, [r3, #32]
 8018d4e:	881a      	ldrh	r2, [r3, #0]
 8018d50:	683b      	ldr	r3, [r7, #0]
 8018d52:	8a1b      	ldrh	r3, [r3, #16]
 8018d54:	429a      	cmp	r2, r3
 8018d56:	d026      	beq.n	8018da6 <encode_field+0x72>
        {
            /* Different type oneof field */
            return true;
 8018d58:	2301      	movs	r3, #1
 8018d5a:	e059      	b.n	8018e10 <encode_field+0xdc>
        }
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 8018d5c:	683b      	ldr	r3, [r7, #0]
 8018d5e:	7d9b      	ldrb	r3, [r3, #22]
 8018d60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8018d64:	2b10      	cmp	r3, #16
 8018d66:	d11e      	bne.n	8018da6 <encode_field+0x72>
    {
        if (field->pSize)
 8018d68:	683b      	ldr	r3, [r7, #0]
 8018d6a:	6a1b      	ldr	r3, [r3, #32]
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d00c      	beq.n	8018d8a <encode_field+0x56>
        {
            if (safe_read_bool(field->pSize) == false)
 8018d70:	683b      	ldr	r3, [r7, #0]
 8018d72:	6a1b      	ldr	r3, [r3, #32]
 8018d74:	4618      	mov	r0, r3
 8018d76:	f7ff fcaf 	bl	80186d8 <safe_read_bool>
 8018d7a:	4603      	mov	r3, r0
 8018d7c:	f083 0301 	eor.w	r3, r3, #1
 8018d80:	b2db      	uxtb	r3, r3
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d00f      	beq.n	8018da6 <encode_field+0x72>
            {
                /* Missing optional field */
                return true;
 8018d86:	2301      	movs	r3, #1
 8018d88:	e042      	b.n	8018e10 <encode_field+0xdc>
            }
        }
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 8018d8a:	683b      	ldr	r3, [r7, #0]
 8018d8c:	7d9b      	ldrb	r3, [r3, #22]
 8018d8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d107      	bne.n	8018da6 <encode_field+0x72>
        {
            /* Proto3 singular field */
            if (pb_check_proto3_default_value(field))
 8018d96:	6838      	ldr	r0, [r7, #0]
 8018d98:	f7ff fe10 	bl	80189bc <pb_check_proto3_default_value>
 8018d9c:	4603      	mov	r3, r0
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	d001      	beq.n	8018da6 <encode_field+0x72>
                return true;
 8018da2:	2301      	movs	r3, #1
 8018da4:	e034      	b.n	8018e10 <encode_field+0xdc>
        }
    }

    if (!field->pData)
 8018da6:	683b      	ldr	r3, [r7, #0]
 8018da8:	69db      	ldr	r3, [r3, #28]
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d113      	bne.n	8018dd6 <encode_field+0xa2>
    {
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 8018dae:	683b      	ldr	r3, [r7, #0]
 8018db0:	7d9b      	ldrb	r3, [r3, #22]
 8018db2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d10b      	bne.n	8018dd2 <encode_field+0x9e>
            PB_RETURN_ERROR(stream, "missing required field");
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	691b      	ldr	r3, [r3, #16]
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d002      	beq.n	8018dc8 <encode_field+0x94>
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	691b      	ldr	r3, [r3, #16]
 8018dc6:	e000      	b.n	8018dca <encode_field+0x96>
 8018dc8:	4b13      	ldr	r3, [pc, #76]	; (8018e18 <encode_field+0xe4>)
 8018dca:	687a      	ldr	r2, [r7, #4]
 8018dcc:	6113      	str	r3, [r2, #16]
 8018dce:	2300      	movs	r3, #0
 8018dd0:	e01e      	b.n	8018e10 <encode_field+0xdc>

        /* Pointer field set to NULL */
        return true;
 8018dd2:	2301      	movs	r3, #1
 8018dd4:	e01c      	b.n	8018e10 <encode_field+0xdc>
    }

    /* Then encode field contents */
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 8018dd6:	683b      	ldr	r3, [r7, #0]
 8018dd8:	7d9b      	ldrb	r3, [r3, #22]
 8018dda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8018dde:	2b40      	cmp	r3, #64	; 0x40
 8018de0:	d105      	bne.n	8018dee <encode_field+0xba>
    {
        return encode_callback_field(stream, field);
 8018de2:	6839      	ldr	r1, [r7, #0]
 8018de4:	6878      	ldr	r0, [r7, #4]
 8018de6:	f7ff ff7b 	bl	8018ce0 <encode_callback_field>
 8018dea:	4603      	mov	r3, r0
 8018dec:	e010      	b.n	8018e10 <encode_field+0xdc>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8018dee:	683b      	ldr	r3, [r7, #0]
 8018df0:	7d9b      	ldrb	r3, [r3, #22]
 8018df2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8018df6:	2b20      	cmp	r3, #32
 8018df8:	d105      	bne.n	8018e06 <encode_field+0xd2>
    {
        return encode_array(stream, field);
 8018dfa:	6839      	ldr	r1, [r7, #0]
 8018dfc:	6878      	ldr	r0, [r7, #4]
 8018dfe:	f7ff fc89 	bl	8018714 <encode_array>
 8018e02:	4603      	mov	r3, r0
 8018e04:	e004      	b.n	8018e10 <encode_field+0xdc>
    }
    else
    {
        return encode_basic_field(stream, field);
 8018e06:	6839      	ldr	r1, [r7, #0]
 8018e08:	6878      	ldr	r0, [r7, #4]
 8018e0a:	f7ff fef5 	bl	8018bf8 <encode_basic_field>
 8018e0e:	4603      	mov	r3, r0
    }
}
 8018e10:	4618      	mov	r0, r3
 8018e12:	3708      	adds	r7, #8
 8018e14:	46bd      	mov	sp, r7
 8018e16:	bd80      	pop	{r7, pc}
 8018e18:	0801fe64 	.word	0x0801fe64

08018e1c <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *extension)
{
 8018e1c:	b580      	push	{r7, lr}
 8018e1e:	b08c      	sub	sp, #48	; 0x30
 8018e20:	af00      	add	r7, sp, #0
 8018e22:	6078      	str	r0, [r7, #4]
 8018e24:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension_const(&iter, extension))
 8018e26:	f107 0308 	add.w	r3, r7, #8
 8018e2a:	6839      	ldr	r1, [r7, #0]
 8018e2c:	4618      	mov	r0, r3
 8018e2e:	f7fd fdc2 	bl	80169b6 <pb_field_iter_begin_extension_const>
 8018e32:	4603      	mov	r3, r0
 8018e34:	f083 0301 	eor.w	r3, r3, #1
 8018e38:	b2db      	uxtb	r3, r3
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d00b      	beq.n	8018e56 <default_extension_encoder+0x3a>
        PB_RETURN_ERROR(stream, "invalid extension");
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	691b      	ldr	r3, [r3, #16]
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d002      	beq.n	8018e4c <default_extension_encoder+0x30>
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	691b      	ldr	r3, [r3, #16]
 8018e4a:	e000      	b.n	8018e4e <default_extension_encoder+0x32>
 8018e4c:	4b07      	ldr	r3, [pc, #28]	; (8018e6c <default_extension_encoder+0x50>)
 8018e4e:	687a      	ldr	r2, [r7, #4]
 8018e50:	6113      	str	r3, [r2, #16]
 8018e52:	2300      	movs	r3, #0
 8018e54:	e006      	b.n	8018e64 <default_extension_encoder+0x48>

    return encode_field(stream, &iter);
 8018e56:	f107 0308 	add.w	r3, r7, #8
 8018e5a:	4619      	mov	r1, r3
 8018e5c:	6878      	ldr	r0, [r7, #4]
 8018e5e:	f7ff ff69 	bl	8018d34 <encode_field>
 8018e62:	4603      	mov	r3, r0
}
 8018e64:	4618      	mov	r0, r3
 8018e66:	3730      	adds	r7, #48	; 0x30
 8018e68:	46bd      	mov	sp, r7
 8018e6a:	bd80      	pop	{r7, pc}
 8018e6c:	0801fe7c 	.word	0x0801fe7c

08018e70 <encode_extension_field>:


/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8018e70:	b580      	push	{r7, lr}
 8018e72:	b084      	sub	sp, #16
 8018e74:	af00      	add	r7, sp, #0
 8018e76:	6078      	str	r0, [r7, #4]
 8018e78:	6039      	str	r1, [r7, #0]
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 8018e7a:	683b      	ldr	r3, [r7, #0]
 8018e7c:	69db      	ldr	r3, [r3, #28]
 8018e7e:	681b      	ldr	r3, [r3, #0]
 8018e80:	60fb      	str	r3, [r7, #12]

    while (extension)
 8018e82:	e01e      	b.n	8018ec2 <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 8018e84:	68fb      	ldr	r3, [r7, #12]
 8018e86:	681b      	ldr	r3, [r3, #0]
 8018e88:	685b      	ldr	r3, [r3, #4]
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d008      	beq.n	8018ea0 <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 8018e8e:	68fb      	ldr	r3, [r7, #12]
 8018e90:	681b      	ldr	r3, [r3, #0]
 8018e92:	685b      	ldr	r3, [r3, #4]
 8018e94:	68f9      	ldr	r1, [r7, #12]
 8018e96:	6878      	ldr	r0, [r7, #4]
 8018e98:	4798      	blx	r3
 8018e9a:	4603      	mov	r3, r0
 8018e9c:	72fb      	strb	r3, [r7, #11]
 8018e9e:	e005      	b.n	8018eac <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 8018ea0:	68f9      	ldr	r1, [r7, #12]
 8018ea2:	6878      	ldr	r0, [r7, #4]
 8018ea4:	f7ff ffba 	bl	8018e1c <default_extension_encoder>
 8018ea8:	4603      	mov	r3, r0
 8018eaa:	72fb      	strb	r3, [r7, #11]

        if (!status)
 8018eac:	7afb      	ldrb	r3, [r7, #11]
 8018eae:	f083 0301 	eor.w	r3, r3, #1
 8018eb2:	b2db      	uxtb	r3, r3
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d001      	beq.n	8018ebc <encode_extension_field+0x4c>
            return false;
 8018eb8:	2300      	movs	r3, #0
 8018eba:	e006      	b.n	8018eca <encode_extension_field+0x5a>
        
        extension = extension->next;
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	689b      	ldr	r3, [r3, #8]
 8018ec0:	60fb      	str	r3, [r7, #12]
    while (extension)
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	d1dd      	bne.n	8018e84 <encode_extension_field+0x14>
    }
    
    return true;
 8018ec8:	2301      	movs	r3, #1
}
 8018eca:	4618      	mov	r0, r3
 8018ecc:	3710      	adds	r7, #16
 8018ece:	46bd      	mov	sp, r7
 8018ed0:	bd80      	pop	{r7, pc}

08018ed2 <pb_encode>:
/*********************
 * Encode all fields *
 *********************/

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 8018ed2:	b580      	push	{r7, lr}
 8018ed4:	b08e      	sub	sp, #56	; 0x38
 8018ed6:	af00      	add	r7, sp, #0
 8018ed8:	60f8      	str	r0, [r7, #12]
 8018eda:	60b9      	str	r1, [r7, #8]
 8018edc:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 8018ede:	f107 0310 	add.w	r3, r7, #16
 8018ee2:	687a      	ldr	r2, [r7, #4]
 8018ee4:	68b9      	ldr	r1, [r7, #8]
 8018ee6:	4618      	mov	r0, r3
 8018ee8:	f7fd fd51 	bl	801698e <pb_field_iter_begin_const>
 8018eec:	4603      	mov	r3, r0
 8018eee:	f083 0301 	eor.w	r3, r3, #1
 8018ef2:	b2db      	uxtb	r3, r3
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d001      	beq.n	8018efc <pb_encode+0x2a>
        return true; /* Empty message type */
 8018ef8:	2301      	movs	r3, #1
 8018efa:	e02a      	b.n	8018f52 <pb_encode+0x80>
    
    do {
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8018efc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018f00:	f003 030f 	and.w	r3, r3, #15
 8018f04:	2b0a      	cmp	r3, #10
 8018f06:	d10d      	bne.n	8018f24 <pb_encode+0x52>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, &iter))
 8018f08:	f107 0310 	add.w	r3, r7, #16
 8018f0c:	4619      	mov	r1, r3
 8018f0e:	68f8      	ldr	r0, [r7, #12]
 8018f10:	f7ff ffae 	bl	8018e70 <encode_extension_field>
 8018f14:	4603      	mov	r3, r0
 8018f16:	f083 0301 	eor.w	r3, r3, #1
 8018f1a:	b2db      	uxtb	r3, r3
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d00f      	beq.n	8018f40 <pb_encode+0x6e>
                return false;
 8018f20:	2300      	movs	r3, #0
 8018f22:	e016      	b.n	8018f52 <pb_encode+0x80>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, &iter))
 8018f24:	f107 0310 	add.w	r3, r7, #16
 8018f28:	4619      	mov	r1, r3
 8018f2a:	68f8      	ldr	r0, [r7, #12]
 8018f2c:	f7ff ff02 	bl	8018d34 <encode_field>
 8018f30:	4603      	mov	r3, r0
 8018f32:	f083 0301 	eor.w	r3, r3, #1
 8018f36:	b2db      	uxtb	r3, r3
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	d001      	beq.n	8018f40 <pb_encode+0x6e>
                return false;
 8018f3c:	2300      	movs	r3, #0
 8018f3e:	e008      	b.n	8018f52 <pb_encode+0x80>
        }
    } while (pb_field_iter_next(&iter));
 8018f40:	f107 0310 	add.w	r3, r7, #16
 8018f44:	4618      	mov	r0, r3
 8018f46:	f7fd fc77 	bl	8016838 <pb_field_iter_next>
 8018f4a:	4603      	mov	r3, r0
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	d1d5      	bne.n	8018efc <pb_encode+0x2a>
    
    return true;
 8018f50:	2301      	movs	r3, #1
}
 8018f52:	4618      	mov	r0, r3
 8018f54:	3738      	adds	r7, #56	; 0x38
 8018f56:	46bd      	mov	sp, r7
 8018f58:	bd80      	pop	{r7, pc}

08018f5a <pb_encode_varint_32>:
 * Helper functions *
 ********************/

/* This function avoids 64-bit shifts as they are quite slow on many platforms. */
static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
{
 8018f5a:	b580      	push	{r7, lr}
 8018f5c:	b088      	sub	sp, #32
 8018f5e:	af00      	add	r7, sp, #0
 8018f60:	60f8      	str	r0, [r7, #12]
 8018f62:	60b9      	str	r1, [r7, #8]
 8018f64:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 8018f66:	2300      	movs	r3, #0
 8018f68:	61fb      	str	r3, [r7, #28]
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 8018f6a:	68bb      	ldr	r3, [r7, #8]
 8018f6c:	b2db      	uxtb	r3, r3
 8018f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018f72:	76fb      	strb	r3, [r7, #27]
    low >>= 7;
 8018f74:	68bb      	ldr	r3, [r7, #8]
 8018f76:	09db      	lsrs	r3, r3, #7
 8018f78:	60bb      	str	r3, [r7, #8]

    while (i < 4 && (low != 0 || high != 0))
 8018f7a:	e013      	b.n	8018fa4 <pb_encode_varint_32+0x4a>
    {
        byte |= 0x80;
 8018f7c:	7efb      	ldrb	r3, [r7, #27]
 8018f7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018f82:	76fb      	strb	r3, [r7, #27]
        buffer[i++] = byte;
 8018f84:	69fb      	ldr	r3, [r7, #28]
 8018f86:	1c5a      	adds	r2, r3, #1
 8018f88:	61fa      	str	r2, [r7, #28]
 8018f8a:	3320      	adds	r3, #32
 8018f8c:	443b      	add	r3, r7
 8018f8e:	7efa      	ldrb	r2, [r7, #27]
 8018f90:	f803 2c10 	strb.w	r2, [r3, #-16]
        byte = (pb_byte_t)(low & 0x7F);
 8018f94:	68bb      	ldr	r3, [r7, #8]
 8018f96:	b2db      	uxtb	r3, r3
 8018f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018f9c:	76fb      	strb	r3, [r7, #27]
        low >>= 7;
 8018f9e:	68bb      	ldr	r3, [r7, #8]
 8018fa0:	09db      	lsrs	r3, r3, #7
 8018fa2:	60bb      	str	r3, [r7, #8]
    while (i < 4 && (low != 0 || high != 0))
 8018fa4:	69fb      	ldr	r3, [r7, #28]
 8018fa6:	2b03      	cmp	r3, #3
 8018fa8:	d805      	bhi.n	8018fb6 <pb_encode_varint_32+0x5c>
 8018faa:	68bb      	ldr	r3, [r7, #8]
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	d1e5      	bne.n	8018f7c <pb_encode_varint_32+0x22>
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d1e2      	bne.n	8018f7c <pb_encode_varint_32+0x22>
    }

    if (high)
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d024      	beq.n	8019006 <pb_encode_varint_32+0xac>
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	b2db      	uxtb	r3, r3
 8018fc0:	011b      	lsls	r3, r3, #4
 8018fc2:	b2db      	uxtb	r3, r3
 8018fc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8018fc8:	b2da      	uxtb	r2, r3
 8018fca:	7efb      	ldrb	r3, [r7, #27]
 8018fcc:	4313      	orrs	r3, r2
 8018fce:	76fb      	strb	r3, [r7, #27]
        high >>= 3;
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	08db      	lsrs	r3, r3, #3
 8018fd4:	607b      	str	r3, [r7, #4]

        while (high)
 8018fd6:	e013      	b.n	8019000 <pb_encode_varint_32+0xa6>
        {
            byte |= 0x80;
 8018fd8:	7efb      	ldrb	r3, [r7, #27]
 8018fda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018fde:	76fb      	strb	r3, [r7, #27]
            buffer[i++] = byte;
 8018fe0:	69fb      	ldr	r3, [r7, #28]
 8018fe2:	1c5a      	adds	r2, r3, #1
 8018fe4:	61fa      	str	r2, [r7, #28]
 8018fe6:	3320      	adds	r3, #32
 8018fe8:	443b      	add	r3, r7
 8018fea:	7efa      	ldrb	r2, [r7, #27]
 8018fec:	f803 2c10 	strb.w	r2, [r3, #-16]
            byte = (pb_byte_t)(high & 0x7F);
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	b2db      	uxtb	r3, r3
 8018ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018ff8:	76fb      	strb	r3, [r7, #27]
            high >>= 7;
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	09db      	lsrs	r3, r3, #7
 8018ffe:	607b      	str	r3, [r7, #4]
        while (high)
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	2b00      	cmp	r3, #0
 8019004:	d1e8      	bne.n	8018fd8 <pb_encode_varint_32+0x7e>
        }
    }

    buffer[i++] = byte;
 8019006:	69fb      	ldr	r3, [r7, #28]
 8019008:	1c5a      	adds	r2, r3, #1
 801900a:	61fa      	str	r2, [r7, #28]
 801900c:	3320      	adds	r3, #32
 801900e:	443b      	add	r3, r7
 8019010:	7efa      	ldrb	r2, [r7, #27]
 8019012:	f803 2c10 	strb.w	r2, [r3, #-16]

    return pb_write(stream, buffer, i);
 8019016:	f107 0310 	add.w	r3, r7, #16
 801901a:	69fa      	ldr	r2, [r7, #28]
 801901c:	4619      	mov	r1, r3
 801901e:	68f8      	ldr	r0, [r7, #12]
 8019020:	f7ff fb0a 	bl	8018638 <pb_write>
 8019024:	4603      	mov	r3, r0
}
 8019026:	4618      	mov	r0, r3
 8019028:	3720      	adds	r7, #32
 801902a:	46bd      	mov	sp, r7
 801902c:	bd80      	pop	{r7, pc}

0801902e <pb_encode_varint>:

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 801902e:	b590      	push	{r4, r7, lr}
 8019030:	b087      	sub	sp, #28
 8019032:	af00      	add	r7, sp, #0
 8019034:	60f8      	str	r0, [r7, #12]
 8019036:	e9c7 2300 	strd	r2, r3, [r7]
    if (value <= 0x7F)
 801903a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801903e:	2a80      	cmp	r2, #128	; 0x80
 8019040:	f173 0300 	sbcs.w	r3, r3, #0
 8019044:	d20a      	bcs.n	801905c <pb_encode_varint+0x2e>
    {
        /* Fast path: single byte */
        pb_byte_t byte = (pb_byte_t)value;
 8019046:	783b      	ldrb	r3, [r7, #0]
 8019048:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &byte, 1);
 801904a:	f107 0317 	add.w	r3, r7, #23
 801904e:	2201      	movs	r2, #1
 8019050:	4619      	mov	r1, r3
 8019052:	68f8      	ldr	r0, [r7, #12]
 8019054:	f7ff faf0 	bl	8018638 <pb_write>
 8019058:	4603      	mov	r3, r0
 801905a:	e00f      	b.n	801907c <pb_encode_varint+0x4e>
    else
    {
#ifdef PB_WITHOUT_64BIT
        return pb_encode_varint_32(stream, value, 0);
#else
        return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 801905c:	683c      	ldr	r4, [r7, #0]
 801905e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8019062:	f04f 0200 	mov.w	r2, #0
 8019066:	f04f 0300 	mov.w	r3, #0
 801906a:	000a      	movs	r2, r1
 801906c:	2300      	movs	r3, #0
 801906e:	4613      	mov	r3, r2
 8019070:	461a      	mov	r2, r3
 8019072:	4621      	mov	r1, r4
 8019074:	68f8      	ldr	r0, [r7, #12]
 8019076:	f7ff ff70 	bl	8018f5a <pb_encode_varint_32>
 801907a:	4603      	mov	r3, r0
#endif
    }
}
 801907c:	4618      	mov	r0, r3
 801907e:	371c      	adds	r7, #28
 8019080:	46bd      	mov	sp, r7
 8019082:	bd90      	pop	{r4, r7, pc}

08019084 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 8019084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019088:	b08a      	sub	sp, #40	; 0x28
 801908a:	af00      	add	r7, sp, #0
 801908c:	6178      	str	r0, [r7, #20]
 801908e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    pb_uint64_t zigzagged;
    pb_uint64_t mask = ((pb_uint64_t)-1) >> 1; /* Satisfy clang -fsanitize=integer */
 8019092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019096:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801909a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (value < 0)
 801909e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	da15      	bge.n	80190d2 <pb_encode_svarint+0x4e>
        zigzagged = ~(((pb_uint64_t)value & mask) << 1);
 80190a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80190aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80190ae:	ea00 0402 	and.w	r4, r0, r2
 80190b2:	ea01 0503 	and.w	r5, r1, r3
 80190b6:	1923      	adds	r3, r4, r4
 80190b8:	603b      	str	r3, [r7, #0]
 80190ba:	eb45 0305 	adc.w	r3, r5, r5
 80190be:	607b      	str	r3, [r7, #4]
 80190c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80190c4:	ea6f 0a02 	mvn.w	sl, r2
 80190c8:	ea6f 0b03 	mvn.w	fp, r3
 80190cc:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 80190d0:	e007      	b.n	80190e2 <pb_encode_svarint+0x5e>
    else
        zigzagged = (pb_uint64_t)value << 1;
 80190d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80190d6:	eb12 0802 	adds.w	r8, r2, r2
 80190da:	eb43 0903 	adc.w	r9, r3, r3
 80190de:	e9c7 8908 	strd	r8, r9, [r7, #32]
    
    return pb_encode_varint(stream, zigzagged);
 80190e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80190e6:	6978      	ldr	r0, [r7, #20]
 80190e8:	f7ff ffa1 	bl	801902e <pb_encode_varint>
 80190ec:	4603      	mov	r3, r0
}
 80190ee:	4618      	mov	r0, r3
 80190f0:	3728      	adds	r7, #40	; 0x28
 80190f2:	46bd      	mov	sp, r7
 80190f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080190f8 <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 80190f8:	b580      	push	{r7, lr}
 80190fa:	b082      	sub	sp, #8
 80190fc:	af00      	add	r7, sp, #0
 80190fe:	6078      	str	r0, [r7, #4]
 8019100:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 4);
 8019102:	2204      	movs	r2, #4
 8019104:	6839      	ldr	r1, [r7, #0]
 8019106:	6878      	ldr	r0, [r7, #4]
 8019108:	f7ff fa96 	bl	8018638 <pb_write>
 801910c:	4603      	mov	r3, r0
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
    return pb_write(stream, bytes, 4);
#endif
}
 801910e:	4618      	mov	r0, r3
 8019110:	3708      	adds	r7, #8
 8019112:	46bd      	mov	sp, r7
 8019114:	bd80      	pop	{r7, pc}

08019116 <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 8019116:	b580      	push	{r7, lr}
 8019118:	b082      	sub	sp, #8
 801911a:	af00      	add	r7, sp, #0
 801911c:	6078      	str	r0, [r7, #4]
 801911e:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 8);
 8019120:	2208      	movs	r2, #8
 8019122:	6839      	ldr	r1, [r7, #0]
 8019124:	6878      	ldr	r0, [r7, #4]
 8019126:	f7ff fa87 	bl	8018638 <pb_write>
 801912a:	4603      	mov	r3, r0
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
    return pb_write(stream, bytes, 8);
#endif
}
 801912c:	4618      	mov	r0, r3
 801912e:	3708      	adds	r7, #8
 8019130:	46bd      	mov	sp, r7
 8019132:	bd80      	pop	{r7, pc}

08019134 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 8019134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019138:	b088      	sub	sp, #32
 801913a:	af00      	add	r7, sp, #0
 801913c:	6178      	str	r0, [r7, #20]
 801913e:	460b      	mov	r3, r1
 8019140:	60fa      	str	r2, [r7, #12]
 8019142:	74fb      	strb	r3, [r7, #19]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	2200      	movs	r2, #0
 8019148:	469a      	mov	sl, r3
 801914a:	4693      	mov	fp, r2
 801914c:	ea4f 755a 	mov.w	r5, sl, lsr #29
 8019150:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 8019154:	7cfb      	ldrb	r3, [r7, #19]
 8019156:	2200      	movs	r2, #0
 8019158:	4698      	mov	r8, r3
 801915a:	4691      	mov	r9, r2
 801915c:	ea44 0308 	orr.w	r3, r4, r8
 8019160:	603b      	str	r3, [r7, #0]
 8019162:	ea45 0309 	orr.w	r3, r5, r9
 8019166:	607b      	str	r3, [r7, #4]
 8019168:	e9d7 3400 	ldrd	r3, r4, [r7]
 801916c:	e9c7 3406 	strd	r3, r4, [r7, #24]
    return pb_encode_varint(stream, tag);
 8019170:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8019174:	6978      	ldr	r0, [r7, #20]
 8019176:	f7ff ff5a 	bl	801902e <pb_encode_varint>
 801917a:	4603      	mov	r3, r0
}
 801917c:	4618      	mov	r0, r3
 801917e:	3720      	adds	r7, #32
 8019180:	46bd      	mov	sp, r7
 8019182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08019188 <pb_encode_tag_for_field>:

bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
{
 8019188:	b580      	push	{r7, lr}
 801918a:	b084      	sub	sp, #16
 801918c:	af00      	add	r7, sp, #0
 801918e:	6078      	str	r0, [r7, #4]
 8019190:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 8019192:	683b      	ldr	r3, [r7, #0]
 8019194:	7d9b      	ldrb	r3, [r3, #22]
 8019196:	f003 030f 	and.w	r3, r3, #15
 801919a:	2b0b      	cmp	r3, #11
 801919c:	d826      	bhi.n	80191ec <pb_encode_tag_for_field+0x64>
 801919e:	a201      	add	r2, pc, #4	; (adr r2, 80191a4 <pb_encode_tag_for_field+0x1c>)
 80191a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80191a4:	080191d5 	.word	0x080191d5
 80191a8:	080191d5 	.word	0x080191d5
 80191ac:	080191d5 	.word	0x080191d5
 80191b0:	080191d5 	.word	0x080191d5
 80191b4:	080191db 	.word	0x080191db
 80191b8:	080191e1 	.word	0x080191e1
 80191bc:	080191e7 	.word	0x080191e7
 80191c0:	080191e7 	.word	0x080191e7
 80191c4:	080191e7 	.word	0x080191e7
 80191c8:	080191e7 	.word	0x080191e7
 80191cc:	080191ed 	.word	0x080191ed
 80191d0:	080191e7 	.word	0x080191e7
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 80191d4:	2300      	movs	r3, #0
 80191d6:	73fb      	strb	r3, [r7, #15]
            break;
 80191d8:	e014      	b.n	8019204 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 80191da:	2305      	movs	r3, #5
 80191dc:	73fb      	strb	r3, [r7, #15]
            break;
 80191de:	e011      	b.n	8019204 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 80191e0:	2301      	movs	r3, #1
 80191e2:	73fb      	strb	r3, [r7, #15]
            break;
 80191e4:	e00e      	b.n	8019204 <pb_encode_tag_for_field+0x7c>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 80191e6:	2302      	movs	r3, #2
 80191e8:	73fb      	strb	r3, [r7, #15]
            break;
 80191ea:	e00b      	b.n	8019204 <pb_encode_tag_for_field+0x7c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	691b      	ldr	r3, [r3, #16]
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d002      	beq.n	80191fa <pb_encode_tag_for_field+0x72>
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	691b      	ldr	r3, [r3, #16]
 80191f8:	e000      	b.n	80191fc <pb_encode_tag_for_field+0x74>
 80191fa:	4b09      	ldr	r3, [pc, #36]	; (8019220 <pb_encode_tag_for_field+0x98>)
 80191fc:	687a      	ldr	r2, [r7, #4]
 80191fe:	6113      	str	r3, [r2, #16]
 8019200:	2300      	movs	r3, #0
 8019202:	e008      	b.n	8019216 <pb_encode_tag_for_field+0x8e>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 8019204:	683b      	ldr	r3, [r7, #0]
 8019206:	8a1b      	ldrh	r3, [r3, #16]
 8019208:	461a      	mov	r2, r3
 801920a:	7bfb      	ldrb	r3, [r7, #15]
 801920c:	4619      	mov	r1, r3
 801920e:	6878      	ldr	r0, [r7, #4]
 8019210:	f7ff ff90 	bl	8019134 <pb_encode_tag>
 8019214:	4603      	mov	r3, r0
}
 8019216:	4618      	mov	r0, r3
 8019218:	3710      	adds	r7, #16
 801921a:	46bd      	mov	sp, r7
 801921c:	bd80      	pop	{r7, pc}
 801921e:	bf00      	nop
 8019220:	0801fe40 	.word	0x0801fe40

08019224 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 8019224:	b5b0      	push	{r4, r5, r7, lr}
 8019226:	b084      	sub	sp, #16
 8019228:	af00      	add	r7, sp, #0
 801922a:	60f8      	str	r0, [r7, #12]
 801922c:	60b9      	str	r1, [r7, #8]
 801922e:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	2200      	movs	r2, #0
 8019234:	461c      	mov	r4, r3
 8019236:	4615      	mov	r5, r2
 8019238:	4622      	mov	r2, r4
 801923a:	462b      	mov	r3, r5
 801923c:	68f8      	ldr	r0, [r7, #12]
 801923e:	f7ff fef6 	bl	801902e <pb_encode_varint>
 8019242:	4603      	mov	r3, r0
 8019244:	f083 0301 	eor.w	r3, r3, #1
 8019248:	b2db      	uxtb	r3, r3
 801924a:	2b00      	cmp	r3, #0
 801924c:	d001      	beq.n	8019252 <pb_encode_string+0x2e>
        return false;
 801924e:	2300      	movs	r3, #0
 8019250:	e005      	b.n	801925e <pb_encode_string+0x3a>
    
    return pb_write(stream, buffer, size);
 8019252:	687a      	ldr	r2, [r7, #4]
 8019254:	68b9      	ldr	r1, [r7, #8]
 8019256:	68f8      	ldr	r0, [r7, #12]
 8019258:	f7ff f9ee 	bl	8018638 <pb_write>
 801925c:	4603      	mov	r3, r0
}
 801925e:	4618      	mov	r0, r3
 8019260:	3710      	adds	r7, #16
 8019262:	46bd      	mov	sp, r7
 8019264:	bdb0      	pop	{r4, r5, r7, pc}
	...

08019268 <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 8019268:	b5b0      	push	{r4, r5, r7, lr}
 801926a:	b08c      	sub	sp, #48	; 0x30
 801926c:	af00      	add	r7, sp, #0
 801926e:	60f8      	str	r0, [r7, #12]
 8019270:	60b9      	str	r1, [r7, #8]
 8019272:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8019274:	f107 0314 	add.w	r3, r7, #20
 8019278:	2200      	movs	r2, #0
 801927a:	601a      	str	r2, [r3, #0]
 801927c:	605a      	str	r2, [r3, #4]
 801927e:	609a      	str	r2, [r3, #8]
 8019280:	60da      	str	r2, [r3, #12]
 8019282:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 8019284:	f107 0314 	add.w	r3, r7, #20
 8019288:	687a      	ldr	r2, [r7, #4]
 801928a:	68b9      	ldr	r1, [r7, #8]
 801928c:	4618      	mov	r0, r3
 801928e:	f7ff fe20 	bl	8018ed2 <pb_encode>
 8019292:	4603      	mov	r3, r0
 8019294:	f083 0301 	eor.w	r3, r3, #1
 8019298:	b2db      	uxtb	r3, r3
 801929a:	2b00      	cmp	r3, #0
 801929c:	d004      	beq.n	80192a8 <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 801929e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80192a0:	68fb      	ldr	r3, [r7, #12]
 80192a2:	611a      	str	r2, [r3, #16]
#endif
        return false;
 80192a4:	2300      	movs	r3, #0
 80192a6:	e065      	b.n	8019374 <pb_encode_submessage+0x10c>
    }
    
    size = substream.bytes_written;
 80192a8:	6a3b      	ldr	r3, [r7, #32]
 80192aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80192ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192ae:	2200      	movs	r2, #0
 80192b0:	461c      	mov	r4, r3
 80192b2:	4615      	mov	r5, r2
 80192b4:	4622      	mov	r2, r4
 80192b6:	462b      	mov	r3, r5
 80192b8:	68f8      	ldr	r0, [r7, #12]
 80192ba:	f7ff feb8 	bl	801902e <pb_encode_varint>
 80192be:	4603      	mov	r3, r0
 80192c0:	f083 0301 	eor.w	r3, r3, #1
 80192c4:	b2db      	uxtb	r3, r3
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	d001      	beq.n	80192ce <pb_encode_submessage+0x66>
        return false;
 80192ca:	2300      	movs	r3, #0
 80192cc:	e052      	b.n	8019374 <pb_encode_submessage+0x10c>
    
    if (stream->callback == NULL)
 80192ce:	68fb      	ldr	r3, [r7, #12]
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d106      	bne.n	80192e4 <pb_encode_submessage+0x7c>
        return pb_write(stream, NULL, size); /* Just sizing */
 80192d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80192d8:	2100      	movs	r1, #0
 80192da:	68f8      	ldr	r0, [r7, #12]
 80192dc:	f7ff f9ac 	bl	8018638 <pb_write>
 80192e0:	4603      	mov	r3, r0
 80192e2:	e047      	b.n	8019374 <pb_encode_submessage+0x10c>
    
    if (stream->bytes_written + size > stream->max_size)
 80192e4:	68fb      	ldr	r3, [r7, #12]
 80192e6:	68da      	ldr	r2, [r3, #12]
 80192e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192ea:	441a      	add	r2, r3
 80192ec:	68fb      	ldr	r3, [r7, #12]
 80192ee:	689b      	ldr	r3, [r3, #8]
 80192f0:	429a      	cmp	r2, r3
 80192f2:	d90b      	bls.n	801930c <pb_encode_submessage+0xa4>
        PB_RETURN_ERROR(stream, "stream full");
 80192f4:	68fb      	ldr	r3, [r7, #12]
 80192f6:	691b      	ldr	r3, [r3, #16]
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d002      	beq.n	8019302 <pb_encode_submessage+0x9a>
 80192fc:	68fb      	ldr	r3, [r7, #12]
 80192fe:	691b      	ldr	r3, [r3, #16]
 8019300:	e000      	b.n	8019304 <pb_encode_submessage+0x9c>
 8019302:	4b1e      	ldr	r3, [pc, #120]	; (801937c <pb_encode_submessage+0x114>)
 8019304:	68fa      	ldr	r2, [r7, #12]
 8019306:	6113      	str	r3, [r2, #16]
 8019308:	2300      	movs	r3, #0
 801930a:	e033      	b.n	8019374 <pb_encode_submessage+0x10c>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 801930c:	68fb      	ldr	r3, [r7, #12]
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 8019312:	68fb      	ldr	r3, [r7, #12]
 8019314:	685b      	ldr	r3, [r3, #4]
 8019316:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 8019318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801931a:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 801931c:	2300      	movs	r3, #0
 801931e:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 8019320:	2300      	movs	r3, #0
 8019322:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 8019324:	f107 0314 	add.w	r3, r7, #20
 8019328:	687a      	ldr	r2, [r7, #4]
 801932a:	68b9      	ldr	r1, [r7, #8]
 801932c:	4618      	mov	r0, r3
 801932e:	f7ff fdd0 	bl	8018ed2 <pb_encode>
 8019332:	4603      	mov	r3, r0
 8019334:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    
    stream->bytes_written += substream.bytes_written;
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	68da      	ldr	r2, [r3, #12]
 801933c:	6a3b      	ldr	r3, [r7, #32]
 801933e:	441a      	add	r2, r3
 8019340:	68fb      	ldr	r3, [r7, #12]
 8019342:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 8019344:	69ba      	ldr	r2, [r7, #24]
 8019346:	68fb      	ldr	r3, [r7, #12]
 8019348:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 801934a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801934c:	68fb      	ldr	r3, [r7, #12]
 801934e:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 8019350:	6a3b      	ldr	r3, [r7, #32]
 8019352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019354:	429a      	cmp	r2, r3
 8019356:	d00b      	beq.n	8019370 <pb_encode_submessage+0x108>
        PB_RETURN_ERROR(stream, "submsg size changed");
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	691b      	ldr	r3, [r3, #16]
 801935c:	2b00      	cmp	r3, #0
 801935e:	d002      	beq.n	8019366 <pb_encode_submessage+0xfe>
 8019360:	68fb      	ldr	r3, [r7, #12]
 8019362:	691b      	ldr	r3, [r3, #16]
 8019364:	e000      	b.n	8019368 <pb_encode_submessage+0x100>
 8019366:	4b06      	ldr	r3, [pc, #24]	; (8019380 <pb_encode_submessage+0x118>)
 8019368:	68fa      	ldr	r2, [r7, #12]
 801936a:	6113      	str	r3, [r2, #16]
 801936c:	2300      	movs	r3, #0
 801936e:	e001      	b.n	8019374 <pb_encode_submessage+0x10c>
    
    return status;
 8019370:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8019374:	4618      	mov	r0, r3
 8019376:	3730      	adds	r7, #48	; 0x30
 8019378:	46bd      	mov	sp, r7
 801937a:	bdb0      	pop	{r4, r5, r7, pc}
 801937c:	0801fe08 	.word	0x0801fe08
 8019380:	0801fe90 	.word	0x0801fe90

08019384 <pb_enc_bool>:

/* Field encoders */

static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8019384:	b5b0      	push	{r4, r5, r7, lr}
 8019386:	b084      	sub	sp, #16
 8019388:	af00      	add	r7, sp, #0
 801938a:	6078      	str	r0, [r7, #4]
 801938c:	6039      	str	r1, [r7, #0]
    uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 801938e:	683b      	ldr	r3, [r7, #0]
 8019390:	69db      	ldr	r3, [r3, #28]
 8019392:	4618      	mov	r0, r3
 8019394:	f7ff f9a0 	bl	80186d8 <safe_read_bool>
 8019398:	4603      	mov	r3, r0
 801939a:	60fb      	str	r3, [r7, #12]
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
 801939c:	68fb      	ldr	r3, [r7, #12]
 801939e:	2200      	movs	r2, #0
 80193a0:	461c      	mov	r4, r3
 80193a2:	4615      	mov	r5, r2
 80193a4:	4622      	mov	r2, r4
 80193a6:	462b      	mov	r3, r5
 80193a8:	6878      	ldr	r0, [r7, #4]
 80193aa:	f7ff fe40 	bl	801902e <pb_encode_varint>
 80193ae:	4603      	mov	r3, r0
}
 80193b0:	4618      	mov	r0, r3
 80193b2:	3710      	adds	r7, #16
 80193b4:	46bd      	mov	sp, r7
 80193b6:	bdb0      	pop	{r4, r5, r7, pc}

080193b8 <pb_enc_varint>:

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80193b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80193bc:	b08c      	sub	sp, #48	; 0x30
 80193be:	af00      	add	r7, sp, #0
 80193c0:	61f8      	str	r0, [r7, #28]
 80193c2:	61b9      	str	r1, [r7, #24]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 80193c4:	69bb      	ldr	r3, [r7, #24]
 80193c6:	7d9b      	ldrb	r3, [r3, #22]
 80193c8:	f003 030f 	and.w	r3, r3, #15
 80193cc:	2b02      	cmp	r3, #2
 80193ce:	d152      	bne.n	8019476 <pb_enc_varint+0xbe>
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;
 80193d0:	f04f 0200 	mov.w	r2, #0
 80193d4:	f04f 0300 	mov.w	r3, #0
 80193d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

        if (field->data_size == sizeof(uint_least8_t))
 80193dc:	69bb      	ldr	r3, [r7, #24]
 80193de:	8a5b      	ldrh	r3, [r3, #18]
 80193e0:	2b01      	cmp	r3, #1
 80193e2:	d10b      	bne.n	80193fc <pb_enc_varint+0x44>
            value = *(const uint_least8_t*)field->pData;
 80193e4:	69bb      	ldr	r3, [r7, #24]
 80193e6:	69db      	ldr	r3, [r3, #28]
 80193e8:	781b      	ldrb	r3, [r3, #0]
 80193ea:	b2db      	uxtb	r3, r3
 80193ec:	2200      	movs	r2, #0
 80193ee:	613b      	str	r3, [r7, #16]
 80193f0:	617a      	str	r2, [r7, #20]
 80193f2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80193f6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 80193fa:	e035      	b.n	8019468 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint_least16_t))
 80193fc:	69bb      	ldr	r3, [r7, #24]
 80193fe:	8a5b      	ldrh	r3, [r3, #18]
 8019400:	2b02      	cmp	r3, #2
 8019402:	d10b      	bne.n	801941c <pb_enc_varint+0x64>
            value = *(const uint_least16_t*)field->pData;
 8019404:	69bb      	ldr	r3, [r7, #24]
 8019406:	69db      	ldr	r3, [r3, #28]
 8019408:	881b      	ldrh	r3, [r3, #0]
 801940a:	b29b      	uxth	r3, r3
 801940c:	2200      	movs	r2, #0
 801940e:	60bb      	str	r3, [r7, #8]
 8019410:	60fa      	str	r2, [r7, #12]
 8019412:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8019416:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 801941a:	e025      	b.n	8019468 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint32_t))
 801941c:	69bb      	ldr	r3, [r7, #24]
 801941e:	8a5b      	ldrh	r3, [r3, #18]
 8019420:	2b04      	cmp	r3, #4
 8019422:	d10a      	bne.n	801943a <pb_enc_varint+0x82>
            value = *(const uint32_t*)field->pData;
 8019424:	69bb      	ldr	r3, [r7, #24]
 8019426:	69db      	ldr	r3, [r3, #28]
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	2200      	movs	r2, #0
 801942c:	603b      	str	r3, [r7, #0]
 801942e:	607a      	str	r2, [r7, #4]
 8019430:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019434:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8019438:	e016      	b.n	8019468 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(pb_uint64_t))
 801943a:	69bb      	ldr	r3, [r7, #24]
 801943c:	8a5b      	ldrh	r3, [r3, #18]
 801943e:	2b08      	cmp	r3, #8
 8019440:	d106      	bne.n	8019450 <pb_enc_varint+0x98>
            value = *(const pb_uint64_t*)field->pData;
 8019442:	69bb      	ldr	r3, [r7, #24]
 8019444:	69db      	ldr	r3, [r3, #28]
 8019446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801944a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 801944e:	e00b      	b.n	8019468 <pb_enc_varint+0xb0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8019450:	69fb      	ldr	r3, [r7, #28]
 8019452:	691b      	ldr	r3, [r3, #16]
 8019454:	2b00      	cmp	r3, #0
 8019456:	d002      	beq.n	801945e <pb_enc_varint+0xa6>
 8019458:	69fb      	ldr	r3, [r7, #28]
 801945a:	691b      	ldr	r3, [r3, #16]
 801945c:	e000      	b.n	8019460 <pb_enc_varint+0xa8>
 801945e:	4b36      	ldr	r3, [pc, #216]	; (8019538 <pb_enc_varint+0x180>)
 8019460:	69fa      	ldr	r2, [r7, #28]
 8019462:	6113      	str	r3, [r2, #16]
 8019464:	2300      	movs	r3, #0
 8019466:	e061      	b.n	801952c <pb_enc_varint+0x174>

        return pb_encode_varint(stream, value);
 8019468:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801946c:	69f8      	ldr	r0, [r7, #28]
 801946e:	f7ff fdde 	bl	801902e <pb_encode_varint>
 8019472:	4603      	mov	r3, r0
 8019474:	e05a      	b.n	801952c <pb_enc_varint+0x174>
    }
    else
    {
        /* Perform signed integer extension */
        pb_int64_t value = 0;
 8019476:	f04f 0200 	mov.w	r2, #0
 801947a:	f04f 0300 	mov.w	r3, #0
 801947e:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (field->data_size == sizeof(int_least8_t))
 8019482:	69bb      	ldr	r3, [r7, #24]
 8019484:	8a5b      	ldrh	r3, [r3, #18]
 8019486:	2b01      	cmp	r3, #1
 8019488:	d10a      	bne.n	80194a0 <pb_enc_varint+0xe8>
            value = *(const int_least8_t*)field->pData;
 801948a:	69bb      	ldr	r3, [r7, #24]
 801948c:	69db      	ldr	r3, [r3, #28]
 801948e:	f993 3000 	ldrsb.w	r3, [r3]
 8019492:	b25b      	sxtb	r3, r3
 8019494:	17da      	asrs	r2, r3, #31
 8019496:	469a      	mov	sl, r3
 8019498:	4693      	mov	fp, r2
 801949a:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 801949e:	e032      	b.n	8019506 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int_least16_t))
 80194a0:	69bb      	ldr	r3, [r7, #24]
 80194a2:	8a5b      	ldrh	r3, [r3, #18]
 80194a4:	2b02      	cmp	r3, #2
 80194a6:	d10a      	bne.n	80194be <pb_enc_varint+0x106>
            value = *(const int_least16_t*)field->pData;
 80194a8:	69bb      	ldr	r3, [r7, #24]
 80194aa:	69db      	ldr	r3, [r3, #28]
 80194ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80194b0:	b21b      	sxth	r3, r3
 80194b2:	17da      	asrs	r2, r3, #31
 80194b4:	4698      	mov	r8, r3
 80194b6:	4691      	mov	r9, r2
 80194b8:	e9c7 8908 	strd	r8, r9, [r7, #32]
 80194bc:	e023      	b.n	8019506 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int32_t))
 80194be:	69bb      	ldr	r3, [r7, #24]
 80194c0:	8a5b      	ldrh	r3, [r3, #18]
 80194c2:	2b04      	cmp	r3, #4
 80194c4:	d108      	bne.n	80194d8 <pb_enc_varint+0x120>
            value = *(const int32_t*)field->pData;
 80194c6:	69bb      	ldr	r3, [r7, #24]
 80194c8:	69db      	ldr	r3, [r3, #28]
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	17da      	asrs	r2, r3, #31
 80194ce:	461c      	mov	r4, r3
 80194d0:	4615      	mov	r5, r2
 80194d2:	e9c7 4508 	strd	r4, r5, [r7, #32]
 80194d6:	e016      	b.n	8019506 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(pb_int64_t))
 80194d8:	69bb      	ldr	r3, [r7, #24]
 80194da:	8a5b      	ldrh	r3, [r3, #18]
 80194dc:	2b08      	cmp	r3, #8
 80194de:	d106      	bne.n	80194ee <pb_enc_varint+0x136>
            value = *(const pb_int64_t*)field->pData;
 80194e0:	69bb      	ldr	r3, [r7, #24]
 80194e2:	69db      	ldr	r3, [r3, #28]
 80194e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194e8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80194ec:	e00b      	b.n	8019506 <pb_enc_varint+0x14e>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80194ee:	69fb      	ldr	r3, [r7, #28]
 80194f0:	691b      	ldr	r3, [r3, #16]
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	d002      	beq.n	80194fc <pb_enc_varint+0x144>
 80194f6:	69fb      	ldr	r3, [r7, #28]
 80194f8:	691b      	ldr	r3, [r3, #16]
 80194fa:	e000      	b.n	80194fe <pb_enc_varint+0x146>
 80194fc:	4b0e      	ldr	r3, [pc, #56]	; (8019538 <pb_enc_varint+0x180>)
 80194fe:	69fa      	ldr	r2, [r7, #28]
 8019500:	6113      	str	r3, [r2, #16]
 8019502:	2300      	movs	r3, #0
 8019504:	e012      	b.n	801952c <pb_enc_varint+0x174>

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8019506:	69bb      	ldr	r3, [r7, #24]
 8019508:	7d9b      	ldrb	r3, [r3, #22]
 801950a:	f003 030f 	and.w	r3, r3, #15
 801950e:	2b03      	cmp	r3, #3
 8019510:	d106      	bne.n	8019520 <pb_enc_varint+0x168>
            return pb_encode_svarint(stream, value);
 8019512:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8019516:	69f8      	ldr	r0, [r7, #28]
 8019518:	f7ff fdb4 	bl	8019084 <pb_encode_svarint>
 801951c:	4603      	mov	r3, r0
 801951e:	e005      	b.n	801952c <pb_enc_varint+0x174>
#ifdef PB_WITHOUT_64BIT
        else if (value < 0)
            return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);
 8019520:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8019524:	69f8      	ldr	r0, [r7, #28]
 8019526:	f7ff fd82 	bl	801902e <pb_encode_varint>
 801952a:	4603      	mov	r3, r0

    }
}
 801952c:	4618      	mov	r0, r3
 801952e:	3730      	adds	r7, #48	; 0x30
 8019530:	46bd      	mov	sp, r7
 8019532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8019536:	bf00      	nop
 8019538:	0801fea4 	.word	0x0801fea4

0801953c <pb_enc_fixed>:

static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801953c:	b580      	push	{r7, lr}
 801953e:	b082      	sub	sp, #8
 8019540:	af00      	add	r7, sp, #0
 8019542:	6078      	str	r0, [r7, #4]
 8019544:	6039      	str	r1, [r7, #0]
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 8019546:	683b      	ldr	r3, [r7, #0]
 8019548:	8a5b      	ldrh	r3, [r3, #18]
 801954a:	2b04      	cmp	r3, #4
 801954c:	d107      	bne.n	801955e <pb_enc_fixed+0x22>
    {
        return pb_encode_fixed32(stream, field->pData);
 801954e:	683b      	ldr	r3, [r7, #0]
 8019550:	69db      	ldr	r3, [r3, #28]
 8019552:	4619      	mov	r1, r3
 8019554:	6878      	ldr	r0, [r7, #4]
 8019556:	f7ff fdcf 	bl	80190f8 <pb_encode_fixed32>
 801955a:	4603      	mov	r3, r0
 801955c:	e016      	b.n	801958c <pb_enc_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 801955e:	683b      	ldr	r3, [r7, #0]
 8019560:	8a5b      	ldrh	r3, [r3, #18]
 8019562:	2b08      	cmp	r3, #8
 8019564:	d107      	bne.n	8019576 <pb_enc_fixed+0x3a>
    {
        return pb_encode_fixed64(stream, field->pData);
 8019566:	683b      	ldr	r3, [r7, #0]
 8019568:	69db      	ldr	r3, [r3, #28]
 801956a:	4619      	mov	r1, r3
 801956c:	6878      	ldr	r0, [r7, #4]
 801956e:	f7ff fdd2 	bl	8019116 <pb_encode_fixed64>
 8019572:	4603      	mov	r3, r0
 8019574:	e00a      	b.n	801958c <pb_enc_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	691b      	ldr	r3, [r3, #16]
 801957a:	2b00      	cmp	r3, #0
 801957c:	d002      	beq.n	8019584 <pb_enc_fixed+0x48>
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	691b      	ldr	r3, [r3, #16]
 8019582:	e000      	b.n	8019586 <pb_enc_fixed+0x4a>
 8019584:	4b03      	ldr	r3, [pc, #12]	; (8019594 <pb_enc_fixed+0x58>)
 8019586:	687a      	ldr	r2, [r7, #4]
 8019588:	6113      	str	r3, [r2, #16]
 801958a:	2300      	movs	r3, #0
    }
}
 801958c:	4618      	mov	r0, r3
 801958e:	3708      	adds	r7, #8
 8019590:	46bd      	mov	sp, r7
 8019592:	bd80      	pop	{r7, pc}
 8019594:	0801fea4 	.word	0x0801fea4

08019598 <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8019598:	b580      	push	{r7, lr}
 801959a:	b084      	sub	sp, #16
 801959c:	af00      	add	r7, sp, #0
 801959e:	6078      	str	r0, [r7, #4]
 80195a0:	6039      	str	r1, [r7, #0]
    const pb_bytes_array_t *bytes = NULL;
 80195a2:	2300      	movs	r3, #0
 80195a4:	60fb      	str	r3, [r7, #12]

    bytes = (const pb_bytes_array_t*)field->pData;
 80195a6:	683b      	ldr	r3, [r7, #0]
 80195a8:	69db      	ldr	r3, [r3, #28]
 80195aa:	60fb      	str	r3, [r7, #12]
    
    if (bytes == NULL)
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d106      	bne.n	80195c0 <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 80195b2:	2200      	movs	r2, #0
 80195b4:	2100      	movs	r1, #0
 80195b6:	6878      	ldr	r0, [r7, #4]
 80195b8:	f7ff fe34 	bl	8019224 <pb_encode_string>
 80195bc:	4603      	mov	r3, r0
 80195be:	e022      	b.n	8019606 <pb_enc_bytes+0x6e>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80195c0:	683b      	ldr	r3, [r7, #0]
 80195c2:	7d9b      	ldrb	r3, [r3, #22]
 80195c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	d113      	bne.n	80195f4 <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 80195cc:	68fb      	ldr	r3, [r7, #12]
 80195ce:	881b      	ldrh	r3, [r3, #0]
 80195d0:	461a      	mov	r2, r3
 80195d2:	683b      	ldr	r3, [r7, #0]
 80195d4:	8a5b      	ldrh	r3, [r3, #18]
 80195d6:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80195d8:	429a      	cmp	r2, r3
 80195da:	d90b      	bls.n	80195f4 <pb_enc_bytes+0x5c>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	691b      	ldr	r3, [r3, #16]
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d002      	beq.n	80195ea <pb_enc_bytes+0x52>
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	691b      	ldr	r3, [r3, #16]
 80195e8:	e000      	b.n	80195ec <pb_enc_bytes+0x54>
 80195ea:	4b09      	ldr	r3, [pc, #36]	; (8019610 <pb_enc_bytes+0x78>)
 80195ec:	687a      	ldr	r2, [r7, #4]
 80195ee:	6113      	str	r3, [r2, #16]
 80195f0:	2300      	movs	r3, #0
 80195f2:	e008      	b.n	8019606 <pb_enc_bytes+0x6e>
    }
    
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 80195f4:	68fb      	ldr	r3, [r7, #12]
 80195f6:	1c99      	adds	r1, r3, #2
 80195f8:	68fb      	ldr	r3, [r7, #12]
 80195fa:	881b      	ldrh	r3, [r3, #0]
 80195fc:	461a      	mov	r2, r3
 80195fe:	6878      	ldr	r0, [r7, #4]
 8019600:	f7ff fe10 	bl	8019224 <pb_encode_string>
 8019604:	4603      	mov	r3, r0
}
 8019606:	4618      	mov	r0, r3
 8019608:	3710      	adds	r7, #16
 801960a:	46bd      	mov	sp, r7
 801960c:	bd80      	pop	{r7, pc}
 801960e:	bf00      	nop
 8019610:	0801feb8 	.word	0x0801feb8

08019614 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8019614:	b580      	push	{r7, lr}
 8019616:	b086      	sub	sp, #24
 8019618:	af00      	add	r7, sp, #0
 801961a:	6078      	str	r0, [r7, #4]
 801961c:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 801961e:	2300      	movs	r3, #0
 8019620:	617b      	str	r3, [r7, #20]
    size_t max_size = (size_t)field->data_size;
 8019622:	683b      	ldr	r3, [r7, #0]
 8019624:	8a5b      	ldrh	r3, [r3, #18]
 8019626:	613b      	str	r3, [r7, #16]
    const char *str = (const char*)field->pData;
 8019628:	683b      	ldr	r3, [r7, #0]
 801962a:	69db      	ldr	r3, [r3, #28]
 801962c:	60bb      	str	r3, [r7, #8]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 801962e:	683b      	ldr	r3, [r7, #0]
 8019630:	7d9b      	ldrb	r3, [r3, #22]
 8019632:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8019636:	2b80      	cmp	r3, #128	; 0x80
 8019638:	d103      	bne.n	8019642 <pb_enc_string+0x2e>
    {
        max_size = (size_t)-1;
 801963a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801963e:	613b      	str	r3, [r7, #16]
 8019640:	e011      	b.n	8019666 <pb_enc_string+0x52>
        /* pb_dec_string() assumes string fields end with a null
         * terminator when the type isn't PB_ATYPE_POINTER, so we
         * shouldn't allow more than max-1 bytes to be written to
         * allow space for the null terminator.
         */
        if (max_size == 0)
 8019642:	693b      	ldr	r3, [r7, #16]
 8019644:	2b00      	cmp	r3, #0
 8019646:	d10b      	bne.n	8019660 <pb_enc_string+0x4c>
            PB_RETURN_ERROR(stream, "zero-length string");
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	691b      	ldr	r3, [r3, #16]
 801964c:	2b00      	cmp	r3, #0
 801964e:	d002      	beq.n	8019656 <pb_enc_string+0x42>
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	691b      	ldr	r3, [r3, #16]
 8019654:	e000      	b.n	8019658 <pb_enc_string+0x44>
 8019656:	4b1c      	ldr	r3, [pc, #112]	; (80196c8 <pb_enc_string+0xb4>)
 8019658:	687a      	ldr	r2, [r7, #4]
 801965a:	6113      	str	r3, [r2, #16]
 801965c:	2300      	movs	r3, #0
 801965e:	e02f      	b.n	80196c0 <pb_enc_string+0xac>

        max_size -= 1;
 8019660:	693b      	ldr	r3, [r7, #16]
 8019662:	3b01      	subs	r3, #1
 8019664:	613b      	str	r3, [r7, #16]
    }


    if (str == NULL)
 8019666:	68bb      	ldr	r3, [r7, #8]
 8019668:	2b00      	cmp	r3, #0
 801966a:	d102      	bne.n	8019672 <pb_enc_string+0x5e>
    {
        size = 0; /* Treat null pointer as an empty string */
 801966c:	2300      	movs	r3, #0
 801966e:	617b      	str	r3, [r7, #20]
 8019670:	e020      	b.n	80196b4 <pb_enc_string+0xa0>
    }
    else
    {
        const char *p = str;
 8019672:	68bb      	ldr	r3, [r7, #8]
 8019674:	60fb      	str	r3, [r7, #12]

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 8019676:	e005      	b.n	8019684 <pb_enc_string+0x70>
        {
            size++;
 8019678:	697b      	ldr	r3, [r7, #20]
 801967a:	3301      	adds	r3, #1
 801967c:	617b      	str	r3, [r7, #20]
            p++;
 801967e:	68fb      	ldr	r3, [r7, #12]
 8019680:	3301      	adds	r3, #1
 8019682:	60fb      	str	r3, [r7, #12]
        while (size < max_size && *p != '\0')
 8019684:	697a      	ldr	r2, [r7, #20]
 8019686:	693b      	ldr	r3, [r7, #16]
 8019688:	429a      	cmp	r2, r3
 801968a:	d203      	bcs.n	8019694 <pb_enc_string+0x80>
 801968c:	68fb      	ldr	r3, [r7, #12]
 801968e:	781b      	ldrb	r3, [r3, #0]
 8019690:	2b00      	cmp	r3, #0
 8019692:	d1f1      	bne.n	8019678 <pb_enc_string+0x64>
        }

        if (*p != '\0')
 8019694:	68fb      	ldr	r3, [r7, #12]
 8019696:	781b      	ldrb	r3, [r3, #0]
 8019698:	2b00      	cmp	r3, #0
 801969a:	d00b      	beq.n	80196b4 <pb_enc_string+0xa0>
        {
            PB_RETURN_ERROR(stream, "unterminated string");
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	691b      	ldr	r3, [r3, #16]
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d002      	beq.n	80196aa <pb_enc_string+0x96>
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	691b      	ldr	r3, [r3, #16]
 80196a8:	e000      	b.n	80196ac <pb_enc_string+0x98>
 80196aa:	4b08      	ldr	r3, [pc, #32]	; (80196cc <pb_enc_string+0xb8>)
 80196ac:	687a      	ldr	r2, [r7, #4]
 80196ae:	6113      	str	r3, [r2, #16]
 80196b0:	2300      	movs	r3, #0
 80196b2:	e005      	b.n	80196c0 <pb_enc_string+0xac>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
 80196b4:	697a      	ldr	r2, [r7, #20]
 80196b6:	68b9      	ldr	r1, [r7, #8]
 80196b8:	6878      	ldr	r0, [r7, #4]
 80196ba:	f7ff fdb3 	bl	8019224 <pb_encode_string>
 80196be:	4603      	mov	r3, r0
}
 80196c0:	4618      	mov	r0, r3
 80196c2:	3718      	adds	r7, #24
 80196c4:	46bd      	mov	sp, r7
 80196c6:	bd80      	pop	{r7, pc}
 80196c8:	0801fecc 	.word	0x0801fecc
 80196cc:	0801fee0 	.word	0x0801fee0

080196d0 <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80196d0:	b580      	push	{r7, lr}
 80196d2:	b084      	sub	sp, #16
 80196d4:	af00      	add	r7, sp, #0
 80196d6:	6078      	str	r0, [r7, #4]
 80196d8:	6039      	str	r1, [r7, #0]
    if (field->submsg_desc == NULL)
 80196da:	683b      	ldr	r3, [r7, #0]
 80196dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d10b      	bne.n	80196fa <pb_enc_submessage+0x2a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	691b      	ldr	r3, [r3, #16]
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	d002      	beq.n	80196f0 <pb_enc_submessage+0x20>
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	691b      	ldr	r3, [r3, #16]
 80196ee:	e000      	b.n	80196f2 <pb_enc_submessage+0x22>
 80196f0:	4b19      	ldr	r3, [pc, #100]	; (8019758 <pb_enc_submessage+0x88>)
 80196f2:	687a      	ldr	r2, [r7, #4]
 80196f4:	6113      	str	r3, [r2, #16]
 80196f6:	2300      	movs	r3, #0
 80196f8:	e029      	b.n	801974e <pb_enc_submessage+0x7e>

    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 80196fa:	683b      	ldr	r3, [r7, #0]
 80196fc:	7d9b      	ldrb	r3, [r3, #22]
 80196fe:	f003 030f 	and.w	r3, r3, #15
 8019702:	2b09      	cmp	r3, #9
 8019704:	d11a      	bne.n	801973c <pb_enc_submessage+0x6c>
 8019706:	683b      	ldr	r3, [r7, #0]
 8019708:	6a1b      	ldr	r3, [r3, #32]
 801970a:	2b00      	cmp	r3, #0
 801970c:	d016      	beq.n	801973c <pb_enc_submessage+0x6c>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 801970e:	683b      	ldr	r3, [r7, #0]
 8019710:	6a1b      	ldr	r3, [r3, #32]
 8019712:	3b08      	subs	r3, #8
 8019714:	60fb      	str	r3, [r7, #12]
        if (callback->funcs.encode)
 8019716:	68fb      	ldr	r3, [r7, #12]
 8019718:	681b      	ldr	r3, [r3, #0]
 801971a:	2b00      	cmp	r3, #0
 801971c:	d00e      	beq.n	801973c <pb_enc_submessage+0x6c>
        {
            if (!callback->funcs.encode(stream, field, &callback->arg))
 801971e:	68fb      	ldr	r3, [r7, #12]
 8019720:	681b      	ldr	r3, [r3, #0]
 8019722:	68fa      	ldr	r2, [r7, #12]
 8019724:	3204      	adds	r2, #4
 8019726:	6839      	ldr	r1, [r7, #0]
 8019728:	6878      	ldr	r0, [r7, #4]
 801972a:	4798      	blx	r3
 801972c:	4603      	mov	r3, r0
 801972e:	f083 0301 	eor.w	r3, r3, #1
 8019732:	b2db      	uxtb	r3, r3
 8019734:	2b00      	cmp	r3, #0
 8019736:	d001      	beq.n	801973c <pb_enc_submessage+0x6c>
                return false;
 8019738:	2300      	movs	r3, #0
 801973a:	e008      	b.n	801974e <pb_enc_submessage+0x7e>
        }
    }
    
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 801973c:	683b      	ldr	r3, [r7, #0]
 801973e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8019740:	683b      	ldr	r3, [r7, #0]
 8019742:	69db      	ldr	r3, [r3, #28]
 8019744:	461a      	mov	r2, r3
 8019746:	6878      	ldr	r0, [r7, #4]
 8019748:	f7ff fd8e 	bl	8019268 <pb_encode_submessage>
 801974c:	4603      	mov	r3, r0
}
 801974e:	4618      	mov	r0, r3
 8019750:	3710      	adds	r7, #16
 8019752:	46bd      	mov	sp, r7
 8019754:	bd80      	pop	{r7, pc}
 8019756:	bf00      	nop
 8019758:	0801fef4 	.word	0x0801fef4

0801975c <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801975c:	b580      	push	{r7, lr}
 801975e:	b082      	sub	sp, #8
 8019760:	af00      	add	r7, sp, #0
 8019762:	6078      	str	r0, [r7, #4]
 8019764:	6039      	str	r1, [r7, #0]
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 8019766:	683b      	ldr	r3, [r7, #0]
 8019768:	69d9      	ldr	r1, [r3, #28]
 801976a:	683b      	ldr	r3, [r7, #0]
 801976c:	8a5b      	ldrh	r3, [r3, #18]
 801976e:	461a      	mov	r2, r3
 8019770:	6878      	ldr	r0, [r7, #4]
 8019772:	f7ff fd57 	bl	8019224 <pb_encode_string>
 8019776:	4603      	mov	r3, r0
}
 8019778:	4618      	mov	r0, r3
 801977a:	3708      	adds	r7, #8
 801977c:	46bd      	mov	sp, r7
 801977e:	bd80      	pop	{r7, pc}

08019780 <__libc_init_array>:
 8019780:	b570      	push	{r4, r5, r6, lr}
 8019782:	4d0d      	ldr	r5, [pc, #52]	; (80197b8 <__libc_init_array+0x38>)
 8019784:	4c0d      	ldr	r4, [pc, #52]	; (80197bc <__libc_init_array+0x3c>)
 8019786:	1b64      	subs	r4, r4, r5
 8019788:	10a4      	asrs	r4, r4, #2
 801978a:	2600      	movs	r6, #0
 801978c:	42a6      	cmp	r6, r4
 801978e:	d109      	bne.n	80197a4 <__libc_init_array+0x24>
 8019790:	4d0b      	ldr	r5, [pc, #44]	; (80197c0 <__libc_init_array+0x40>)
 8019792:	4c0c      	ldr	r4, [pc, #48]	; (80197c4 <__libc_init_array+0x44>)
 8019794:	f002 feee 	bl	801c574 <_init>
 8019798:	1b64      	subs	r4, r4, r5
 801979a:	10a4      	asrs	r4, r4, #2
 801979c:	2600      	movs	r6, #0
 801979e:	42a6      	cmp	r6, r4
 80197a0:	d105      	bne.n	80197ae <__libc_init_array+0x2e>
 80197a2:	bd70      	pop	{r4, r5, r6, pc}
 80197a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80197a8:	4798      	blx	r3
 80197aa:	3601      	adds	r6, #1
 80197ac:	e7ee      	b.n	801978c <__libc_init_array+0xc>
 80197ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80197b2:	4798      	blx	r3
 80197b4:	3601      	adds	r6, #1
 80197b6:	e7f2      	b.n	801979e <__libc_init_array+0x1e>
 80197b8:	080299b8 	.word	0x080299b8
 80197bc:	080299b8 	.word	0x080299b8
 80197c0:	080299b8 	.word	0x080299b8
 80197c4:	080299bc 	.word	0x080299bc

080197c8 <memcmp>:
 80197c8:	b510      	push	{r4, lr}
 80197ca:	3901      	subs	r1, #1
 80197cc:	4402      	add	r2, r0
 80197ce:	4290      	cmp	r0, r2
 80197d0:	d101      	bne.n	80197d6 <memcmp+0xe>
 80197d2:	2000      	movs	r0, #0
 80197d4:	e005      	b.n	80197e2 <memcmp+0x1a>
 80197d6:	7803      	ldrb	r3, [r0, #0]
 80197d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80197dc:	42a3      	cmp	r3, r4
 80197de:	d001      	beq.n	80197e4 <memcmp+0x1c>
 80197e0:	1b18      	subs	r0, r3, r4
 80197e2:	bd10      	pop	{r4, pc}
 80197e4:	3001      	adds	r0, #1
 80197e6:	e7f2      	b.n	80197ce <memcmp+0x6>

080197e8 <memcpy>:
 80197e8:	440a      	add	r2, r1
 80197ea:	4291      	cmp	r1, r2
 80197ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80197f0:	d100      	bne.n	80197f4 <memcpy+0xc>
 80197f2:	4770      	bx	lr
 80197f4:	b510      	push	{r4, lr}
 80197f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80197fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80197fe:	4291      	cmp	r1, r2
 8019800:	d1f9      	bne.n	80197f6 <memcpy+0xe>
 8019802:	bd10      	pop	{r4, pc}

08019804 <memmove>:
 8019804:	4288      	cmp	r0, r1
 8019806:	b510      	push	{r4, lr}
 8019808:	eb01 0402 	add.w	r4, r1, r2
 801980c:	d902      	bls.n	8019814 <memmove+0x10>
 801980e:	4284      	cmp	r4, r0
 8019810:	4623      	mov	r3, r4
 8019812:	d807      	bhi.n	8019824 <memmove+0x20>
 8019814:	1e43      	subs	r3, r0, #1
 8019816:	42a1      	cmp	r1, r4
 8019818:	d008      	beq.n	801982c <memmove+0x28>
 801981a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801981e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019822:	e7f8      	b.n	8019816 <memmove+0x12>
 8019824:	4402      	add	r2, r0
 8019826:	4601      	mov	r1, r0
 8019828:	428a      	cmp	r2, r1
 801982a:	d100      	bne.n	801982e <memmove+0x2a>
 801982c:	bd10      	pop	{r4, pc}
 801982e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019832:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019836:	e7f7      	b.n	8019828 <memmove+0x24>

08019838 <memset>:
 8019838:	4402      	add	r2, r0
 801983a:	4603      	mov	r3, r0
 801983c:	4293      	cmp	r3, r2
 801983e:	d100      	bne.n	8019842 <memset+0xa>
 8019840:	4770      	bx	lr
 8019842:	f803 1b01 	strb.w	r1, [r3], #1
 8019846:	e7f9      	b.n	801983c <memset+0x4>

08019848 <__cvt>:
 8019848:	b5f0      	push	{r4, r5, r6, r7, lr}
 801984a:	ed2d 8b02 	vpush	{d8}
 801984e:	eeb0 8b40 	vmov.f64	d8, d0
 8019852:	b085      	sub	sp, #20
 8019854:	4617      	mov	r7, r2
 8019856:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8019858:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801985a:	ee18 2a90 	vmov	r2, s17
 801985e:	f025 0520 	bic.w	r5, r5, #32
 8019862:	2a00      	cmp	r2, #0
 8019864:	bfb6      	itet	lt
 8019866:	222d      	movlt	r2, #45	; 0x2d
 8019868:	2200      	movge	r2, #0
 801986a:	eeb1 8b40 	vneglt.f64	d8, d0
 801986e:	2d46      	cmp	r5, #70	; 0x46
 8019870:	460c      	mov	r4, r1
 8019872:	701a      	strb	r2, [r3, #0]
 8019874:	d004      	beq.n	8019880 <__cvt+0x38>
 8019876:	2d45      	cmp	r5, #69	; 0x45
 8019878:	d100      	bne.n	801987c <__cvt+0x34>
 801987a:	3401      	adds	r4, #1
 801987c:	2102      	movs	r1, #2
 801987e:	e000      	b.n	8019882 <__cvt+0x3a>
 8019880:	2103      	movs	r1, #3
 8019882:	ab03      	add	r3, sp, #12
 8019884:	9301      	str	r3, [sp, #4]
 8019886:	ab02      	add	r3, sp, #8
 8019888:	9300      	str	r3, [sp, #0]
 801988a:	4622      	mov	r2, r4
 801988c:	4633      	mov	r3, r6
 801988e:	eeb0 0b48 	vmov.f64	d0, d8
 8019892:	f000 fd65 	bl	801a360 <_dtoa_r>
 8019896:	2d47      	cmp	r5, #71	; 0x47
 8019898:	d101      	bne.n	801989e <__cvt+0x56>
 801989a:	07fb      	lsls	r3, r7, #31
 801989c:	d51a      	bpl.n	80198d4 <__cvt+0x8c>
 801989e:	2d46      	cmp	r5, #70	; 0x46
 80198a0:	eb00 0204 	add.w	r2, r0, r4
 80198a4:	d10c      	bne.n	80198c0 <__cvt+0x78>
 80198a6:	7803      	ldrb	r3, [r0, #0]
 80198a8:	2b30      	cmp	r3, #48	; 0x30
 80198aa:	d107      	bne.n	80198bc <__cvt+0x74>
 80198ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80198b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198b4:	bf1c      	itt	ne
 80198b6:	f1c4 0401 	rsbne	r4, r4, #1
 80198ba:	6034      	strne	r4, [r6, #0]
 80198bc:	6833      	ldr	r3, [r6, #0]
 80198be:	441a      	add	r2, r3
 80198c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80198c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198c8:	bf08      	it	eq
 80198ca:	9203      	streq	r2, [sp, #12]
 80198cc:	2130      	movs	r1, #48	; 0x30
 80198ce:	9b03      	ldr	r3, [sp, #12]
 80198d0:	4293      	cmp	r3, r2
 80198d2:	d307      	bcc.n	80198e4 <__cvt+0x9c>
 80198d4:	9b03      	ldr	r3, [sp, #12]
 80198d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80198d8:	1a1b      	subs	r3, r3, r0
 80198da:	6013      	str	r3, [r2, #0]
 80198dc:	b005      	add	sp, #20
 80198de:	ecbd 8b02 	vpop	{d8}
 80198e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80198e4:	1c5c      	adds	r4, r3, #1
 80198e6:	9403      	str	r4, [sp, #12]
 80198e8:	7019      	strb	r1, [r3, #0]
 80198ea:	e7f0      	b.n	80198ce <__cvt+0x86>

080198ec <__exponent>:
 80198ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80198ee:	4603      	mov	r3, r0
 80198f0:	2900      	cmp	r1, #0
 80198f2:	bfb8      	it	lt
 80198f4:	4249      	neglt	r1, r1
 80198f6:	f803 2b02 	strb.w	r2, [r3], #2
 80198fa:	bfb4      	ite	lt
 80198fc:	222d      	movlt	r2, #45	; 0x2d
 80198fe:	222b      	movge	r2, #43	; 0x2b
 8019900:	2909      	cmp	r1, #9
 8019902:	7042      	strb	r2, [r0, #1]
 8019904:	dd2a      	ble.n	801995c <__exponent+0x70>
 8019906:	f10d 0407 	add.w	r4, sp, #7
 801990a:	46a4      	mov	ip, r4
 801990c:	270a      	movs	r7, #10
 801990e:	46a6      	mov	lr, r4
 8019910:	460a      	mov	r2, r1
 8019912:	fb91 f6f7 	sdiv	r6, r1, r7
 8019916:	fb07 1516 	mls	r5, r7, r6, r1
 801991a:	3530      	adds	r5, #48	; 0x30
 801991c:	2a63      	cmp	r2, #99	; 0x63
 801991e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8019922:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019926:	4631      	mov	r1, r6
 8019928:	dcf1      	bgt.n	801990e <__exponent+0x22>
 801992a:	3130      	adds	r1, #48	; 0x30
 801992c:	f1ae 0502 	sub.w	r5, lr, #2
 8019930:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019934:	1c44      	adds	r4, r0, #1
 8019936:	4629      	mov	r1, r5
 8019938:	4561      	cmp	r1, ip
 801993a:	d30a      	bcc.n	8019952 <__exponent+0x66>
 801993c:	f10d 0209 	add.w	r2, sp, #9
 8019940:	eba2 020e 	sub.w	r2, r2, lr
 8019944:	4565      	cmp	r5, ip
 8019946:	bf88      	it	hi
 8019948:	2200      	movhi	r2, #0
 801994a:	4413      	add	r3, r2
 801994c:	1a18      	subs	r0, r3, r0
 801994e:	b003      	add	sp, #12
 8019950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019952:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019956:	f804 2f01 	strb.w	r2, [r4, #1]!
 801995a:	e7ed      	b.n	8019938 <__exponent+0x4c>
 801995c:	2330      	movs	r3, #48	; 0x30
 801995e:	3130      	adds	r1, #48	; 0x30
 8019960:	7083      	strb	r3, [r0, #2]
 8019962:	70c1      	strb	r1, [r0, #3]
 8019964:	1d03      	adds	r3, r0, #4
 8019966:	e7f1      	b.n	801994c <__exponent+0x60>

08019968 <_printf_float>:
 8019968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801996c:	b08b      	sub	sp, #44	; 0x2c
 801996e:	460c      	mov	r4, r1
 8019970:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8019974:	4616      	mov	r6, r2
 8019976:	461f      	mov	r7, r3
 8019978:	4605      	mov	r5, r0
 801997a:	f001 fb67 	bl	801b04c <_localeconv_r>
 801997e:	f8d0 b000 	ldr.w	fp, [r0]
 8019982:	4658      	mov	r0, fp
 8019984:	f7e6 fc66 	bl	8000254 <strlen>
 8019988:	2300      	movs	r3, #0
 801998a:	9308      	str	r3, [sp, #32]
 801998c:	f8d8 3000 	ldr.w	r3, [r8]
 8019990:	f894 9018 	ldrb.w	r9, [r4, #24]
 8019994:	6822      	ldr	r2, [r4, #0]
 8019996:	3307      	adds	r3, #7
 8019998:	f023 0307 	bic.w	r3, r3, #7
 801999c:	f103 0108 	add.w	r1, r3, #8
 80199a0:	f8c8 1000 	str.w	r1, [r8]
 80199a4:	4682      	mov	sl, r0
 80199a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80199aa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80199ae:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8019c10 <_printf_float+0x2a8>
 80199b2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80199b6:	eeb0 6bc0 	vabs.f64	d6, d0
 80199ba:	eeb4 6b47 	vcmp.f64	d6, d7
 80199be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199c2:	dd24      	ble.n	8019a0e <_printf_float+0xa6>
 80199c4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80199c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199cc:	d502      	bpl.n	80199d4 <_printf_float+0x6c>
 80199ce:	232d      	movs	r3, #45	; 0x2d
 80199d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80199d4:	4b90      	ldr	r3, [pc, #576]	; (8019c18 <_printf_float+0x2b0>)
 80199d6:	4891      	ldr	r0, [pc, #580]	; (8019c1c <_printf_float+0x2b4>)
 80199d8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80199dc:	bf94      	ite	ls
 80199de:	4698      	movls	r8, r3
 80199e0:	4680      	movhi	r8, r0
 80199e2:	2303      	movs	r3, #3
 80199e4:	6123      	str	r3, [r4, #16]
 80199e6:	f022 0204 	bic.w	r2, r2, #4
 80199ea:	2300      	movs	r3, #0
 80199ec:	6022      	str	r2, [r4, #0]
 80199ee:	9304      	str	r3, [sp, #16]
 80199f0:	9700      	str	r7, [sp, #0]
 80199f2:	4633      	mov	r3, r6
 80199f4:	aa09      	add	r2, sp, #36	; 0x24
 80199f6:	4621      	mov	r1, r4
 80199f8:	4628      	mov	r0, r5
 80199fa:	f000 f9d3 	bl	8019da4 <_printf_common>
 80199fe:	3001      	adds	r0, #1
 8019a00:	f040 808a 	bne.w	8019b18 <_printf_float+0x1b0>
 8019a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019a08:	b00b      	add	sp, #44	; 0x2c
 8019a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a0e:	eeb4 0b40 	vcmp.f64	d0, d0
 8019a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a16:	d709      	bvc.n	8019a2c <_printf_float+0xc4>
 8019a18:	ee10 3a90 	vmov	r3, s1
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	bfbc      	itt	lt
 8019a20:	232d      	movlt	r3, #45	; 0x2d
 8019a22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019a26:	487e      	ldr	r0, [pc, #504]	; (8019c20 <_printf_float+0x2b8>)
 8019a28:	4b7e      	ldr	r3, [pc, #504]	; (8019c24 <_printf_float+0x2bc>)
 8019a2a:	e7d5      	b.n	80199d8 <_printf_float+0x70>
 8019a2c:	6863      	ldr	r3, [r4, #4]
 8019a2e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8019a32:	9104      	str	r1, [sp, #16]
 8019a34:	1c59      	adds	r1, r3, #1
 8019a36:	d13c      	bne.n	8019ab2 <_printf_float+0x14a>
 8019a38:	2306      	movs	r3, #6
 8019a3a:	6063      	str	r3, [r4, #4]
 8019a3c:	2300      	movs	r3, #0
 8019a3e:	9303      	str	r3, [sp, #12]
 8019a40:	ab08      	add	r3, sp, #32
 8019a42:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8019a46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019a4a:	ab07      	add	r3, sp, #28
 8019a4c:	6861      	ldr	r1, [r4, #4]
 8019a4e:	9300      	str	r3, [sp, #0]
 8019a50:	6022      	str	r2, [r4, #0]
 8019a52:	f10d 031b 	add.w	r3, sp, #27
 8019a56:	4628      	mov	r0, r5
 8019a58:	f7ff fef6 	bl	8019848 <__cvt>
 8019a5c:	9b04      	ldr	r3, [sp, #16]
 8019a5e:	9907      	ldr	r1, [sp, #28]
 8019a60:	2b47      	cmp	r3, #71	; 0x47
 8019a62:	4680      	mov	r8, r0
 8019a64:	d108      	bne.n	8019a78 <_printf_float+0x110>
 8019a66:	1cc8      	adds	r0, r1, #3
 8019a68:	db02      	blt.n	8019a70 <_printf_float+0x108>
 8019a6a:	6863      	ldr	r3, [r4, #4]
 8019a6c:	4299      	cmp	r1, r3
 8019a6e:	dd41      	ble.n	8019af4 <_printf_float+0x18c>
 8019a70:	f1a9 0902 	sub.w	r9, r9, #2
 8019a74:	fa5f f989 	uxtb.w	r9, r9
 8019a78:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8019a7c:	d820      	bhi.n	8019ac0 <_printf_float+0x158>
 8019a7e:	3901      	subs	r1, #1
 8019a80:	464a      	mov	r2, r9
 8019a82:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019a86:	9107      	str	r1, [sp, #28]
 8019a88:	f7ff ff30 	bl	80198ec <__exponent>
 8019a8c:	9a08      	ldr	r2, [sp, #32]
 8019a8e:	9004      	str	r0, [sp, #16]
 8019a90:	1813      	adds	r3, r2, r0
 8019a92:	2a01      	cmp	r2, #1
 8019a94:	6123      	str	r3, [r4, #16]
 8019a96:	dc02      	bgt.n	8019a9e <_printf_float+0x136>
 8019a98:	6822      	ldr	r2, [r4, #0]
 8019a9a:	07d2      	lsls	r2, r2, #31
 8019a9c:	d501      	bpl.n	8019aa2 <_printf_float+0x13a>
 8019a9e:	3301      	adds	r3, #1
 8019aa0:	6123      	str	r3, [r4, #16]
 8019aa2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d0a2      	beq.n	80199f0 <_printf_float+0x88>
 8019aaa:	232d      	movs	r3, #45	; 0x2d
 8019aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019ab0:	e79e      	b.n	80199f0 <_printf_float+0x88>
 8019ab2:	9904      	ldr	r1, [sp, #16]
 8019ab4:	2947      	cmp	r1, #71	; 0x47
 8019ab6:	d1c1      	bne.n	8019a3c <_printf_float+0xd4>
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	d1bf      	bne.n	8019a3c <_printf_float+0xd4>
 8019abc:	2301      	movs	r3, #1
 8019abe:	e7bc      	b.n	8019a3a <_printf_float+0xd2>
 8019ac0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8019ac4:	d118      	bne.n	8019af8 <_printf_float+0x190>
 8019ac6:	2900      	cmp	r1, #0
 8019ac8:	6863      	ldr	r3, [r4, #4]
 8019aca:	dd0b      	ble.n	8019ae4 <_printf_float+0x17c>
 8019acc:	6121      	str	r1, [r4, #16]
 8019ace:	b913      	cbnz	r3, 8019ad6 <_printf_float+0x16e>
 8019ad0:	6822      	ldr	r2, [r4, #0]
 8019ad2:	07d0      	lsls	r0, r2, #31
 8019ad4:	d502      	bpl.n	8019adc <_printf_float+0x174>
 8019ad6:	3301      	adds	r3, #1
 8019ad8:	440b      	add	r3, r1
 8019ada:	6123      	str	r3, [r4, #16]
 8019adc:	2300      	movs	r3, #0
 8019ade:	65a1      	str	r1, [r4, #88]	; 0x58
 8019ae0:	9304      	str	r3, [sp, #16]
 8019ae2:	e7de      	b.n	8019aa2 <_printf_float+0x13a>
 8019ae4:	b913      	cbnz	r3, 8019aec <_printf_float+0x184>
 8019ae6:	6822      	ldr	r2, [r4, #0]
 8019ae8:	07d2      	lsls	r2, r2, #31
 8019aea:	d501      	bpl.n	8019af0 <_printf_float+0x188>
 8019aec:	3302      	adds	r3, #2
 8019aee:	e7f4      	b.n	8019ada <_printf_float+0x172>
 8019af0:	2301      	movs	r3, #1
 8019af2:	e7f2      	b.n	8019ada <_printf_float+0x172>
 8019af4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8019af8:	9b08      	ldr	r3, [sp, #32]
 8019afa:	4299      	cmp	r1, r3
 8019afc:	db05      	blt.n	8019b0a <_printf_float+0x1a2>
 8019afe:	6823      	ldr	r3, [r4, #0]
 8019b00:	6121      	str	r1, [r4, #16]
 8019b02:	07d8      	lsls	r0, r3, #31
 8019b04:	d5ea      	bpl.n	8019adc <_printf_float+0x174>
 8019b06:	1c4b      	adds	r3, r1, #1
 8019b08:	e7e7      	b.n	8019ada <_printf_float+0x172>
 8019b0a:	2900      	cmp	r1, #0
 8019b0c:	bfd4      	ite	le
 8019b0e:	f1c1 0202 	rsble	r2, r1, #2
 8019b12:	2201      	movgt	r2, #1
 8019b14:	4413      	add	r3, r2
 8019b16:	e7e0      	b.n	8019ada <_printf_float+0x172>
 8019b18:	6823      	ldr	r3, [r4, #0]
 8019b1a:	055a      	lsls	r2, r3, #21
 8019b1c:	d407      	bmi.n	8019b2e <_printf_float+0x1c6>
 8019b1e:	6923      	ldr	r3, [r4, #16]
 8019b20:	4642      	mov	r2, r8
 8019b22:	4631      	mov	r1, r6
 8019b24:	4628      	mov	r0, r5
 8019b26:	47b8      	blx	r7
 8019b28:	3001      	adds	r0, #1
 8019b2a:	d12a      	bne.n	8019b82 <_printf_float+0x21a>
 8019b2c:	e76a      	b.n	8019a04 <_printf_float+0x9c>
 8019b2e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8019b32:	f240 80e2 	bls.w	8019cfa <_printf_float+0x392>
 8019b36:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8019b3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b42:	d133      	bne.n	8019bac <_printf_float+0x244>
 8019b44:	4a38      	ldr	r2, [pc, #224]	; (8019c28 <_printf_float+0x2c0>)
 8019b46:	2301      	movs	r3, #1
 8019b48:	4631      	mov	r1, r6
 8019b4a:	4628      	mov	r0, r5
 8019b4c:	47b8      	blx	r7
 8019b4e:	3001      	adds	r0, #1
 8019b50:	f43f af58 	beq.w	8019a04 <_printf_float+0x9c>
 8019b54:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019b58:	429a      	cmp	r2, r3
 8019b5a:	db02      	blt.n	8019b62 <_printf_float+0x1fa>
 8019b5c:	6823      	ldr	r3, [r4, #0]
 8019b5e:	07d8      	lsls	r0, r3, #31
 8019b60:	d50f      	bpl.n	8019b82 <_printf_float+0x21a>
 8019b62:	4653      	mov	r3, sl
 8019b64:	465a      	mov	r2, fp
 8019b66:	4631      	mov	r1, r6
 8019b68:	4628      	mov	r0, r5
 8019b6a:	47b8      	blx	r7
 8019b6c:	3001      	adds	r0, #1
 8019b6e:	f43f af49 	beq.w	8019a04 <_printf_float+0x9c>
 8019b72:	f04f 0800 	mov.w	r8, #0
 8019b76:	f104 091a 	add.w	r9, r4, #26
 8019b7a:	9b08      	ldr	r3, [sp, #32]
 8019b7c:	3b01      	subs	r3, #1
 8019b7e:	4543      	cmp	r3, r8
 8019b80:	dc09      	bgt.n	8019b96 <_printf_float+0x22e>
 8019b82:	6823      	ldr	r3, [r4, #0]
 8019b84:	079b      	lsls	r3, r3, #30
 8019b86:	f100 8108 	bmi.w	8019d9a <_printf_float+0x432>
 8019b8a:	68e0      	ldr	r0, [r4, #12]
 8019b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b8e:	4298      	cmp	r0, r3
 8019b90:	bfb8      	it	lt
 8019b92:	4618      	movlt	r0, r3
 8019b94:	e738      	b.n	8019a08 <_printf_float+0xa0>
 8019b96:	2301      	movs	r3, #1
 8019b98:	464a      	mov	r2, r9
 8019b9a:	4631      	mov	r1, r6
 8019b9c:	4628      	mov	r0, r5
 8019b9e:	47b8      	blx	r7
 8019ba0:	3001      	adds	r0, #1
 8019ba2:	f43f af2f 	beq.w	8019a04 <_printf_float+0x9c>
 8019ba6:	f108 0801 	add.w	r8, r8, #1
 8019baa:	e7e6      	b.n	8019b7a <_printf_float+0x212>
 8019bac:	9b07      	ldr	r3, [sp, #28]
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	dc3c      	bgt.n	8019c2c <_printf_float+0x2c4>
 8019bb2:	4a1d      	ldr	r2, [pc, #116]	; (8019c28 <_printf_float+0x2c0>)
 8019bb4:	2301      	movs	r3, #1
 8019bb6:	4631      	mov	r1, r6
 8019bb8:	4628      	mov	r0, r5
 8019bba:	47b8      	blx	r7
 8019bbc:	3001      	adds	r0, #1
 8019bbe:	f43f af21 	beq.w	8019a04 <_printf_float+0x9c>
 8019bc2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019bc6:	4313      	orrs	r3, r2
 8019bc8:	d102      	bne.n	8019bd0 <_printf_float+0x268>
 8019bca:	6823      	ldr	r3, [r4, #0]
 8019bcc:	07d9      	lsls	r1, r3, #31
 8019bce:	d5d8      	bpl.n	8019b82 <_printf_float+0x21a>
 8019bd0:	4653      	mov	r3, sl
 8019bd2:	465a      	mov	r2, fp
 8019bd4:	4631      	mov	r1, r6
 8019bd6:	4628      	mov	r0, r5
 8019bd8:	47b8      	blx	r7
 8019bda:	3001      	adds	r0, #1
 8019bdc:	f43f af12 	beq.w	8019a04 <_printf_float+0x9c>
 8019be0:	f04f 0900 	mov.w	r9, #0
 8019be4:	f104 0a1a 	add.w	sl, r4, #26
 8019be8:	9b07      	ldr	r3, [sp, #28]
 8019bea:	425b      	negs	r3, r3
 8019bec:	454b      	cmp	r3, r9
 8019bee:	dc01      	bgt.n	8019bf4 <_printf_float+0x28c>
 8019bf0:	9b08      	ldr	r3, [sp, #32]
 8019bf2:	e795      	b.n	8019b20 <_printf_float+0x1b8>
 8019bf4:	2301      	movs	r3, #1
 8019bf6:	4652      	mov	r2, sl
 8019bf8:	4631      	mov	r1, r6
 8019bfa:	4628      	mov	r0, r5
 8019bfc:	47b8      	blx	r7
 8019bfe:	3001      	adds	r0, #1
 8019c00:	f43f af00 	beq.w	8019a04 <_printf_float+0x9c>
 8019c04:	f109 0901 	add.w	r9, r9, #1
 8019c08:	e7ee      	b.n	8019be8 <_printf_float+0x280>
 8019c0a:	bf00      	nop
 8019c0c:	f3af 8000 	nop.w
 8019c10:	ffffffff 	.word	0xffffffff
 8019c14:	7fefffff 	.word	0x7fefffff
 8019c18:	0802967c 	.word	0x0802967c
 8019c1c:	08029680 	.word	0x08029680
 8019c20:	08029688 	.word	0x08029688
 8019c24:	08029684 	.word	0x08029684
 8019c28:	0802968c 	.word	0x0802968c
 8019c2c:	9a08      	ldr	r2, [sp, #32]
 8019c2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019c30:	429a      	cmp	r2, r3
 8019c32:	bfa8      	it	ge
 8019c34:	461a      	movge	r2, r3
 8019c36:	2a00      	cmp	r2, #0
 8019c38:	4691      	mov	r9, r2
 8019c3a:	dc38      	bgt.n	8019cae <_printf_float+0x346>
 8019c3c:	2300      	movs	r3, #0
 8019c3e:	9305      	str	r3, [sp, #20]
 8019c40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019c44:	f104 021a 	add.w	r2, r4, #26
 8019c48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019c4a:	9905      	ldr	r1, [sp, #20]
 8019c4c:	9304      	str	r3, [sp, #16]
 8019c4e:	eba3 0309 	sub.w	r3, r3, r9
 8019c52:	428b      	cmp	r3, r1
 8019c54:	dc33      	bgt.n	8019cbe <_printf_float+0x356>
 8019c56:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019c5a:	429a      	cmp	r2, r3
 8019c5c:	db3c      	blt.n	8019cd8 <_printf_float+0x370>
 8019c5e:	6823      	ldr	r3, [r4, #0]
 8019c60:	07da      	lsls	r2, r3, #31
 8019c62:	d439      	bmi.n	8019cd8 <_printf_float+0x370>
 8019c64:	9b08      	ldr	r3, [sp, #32]
 8019c66:	9a04      	ldr	r2, [sp, #16]
 8019c68:	9907      	ldr	r1, [sp, #28]
 8019c6a:	1a9a      	subs	r2, r3, r2
 8019c6c:	eba3 0901 	sub.w	r9, r3, r1
 8019c70:	4591      	cmp	r9, r2
 8019c72:	bfa8      	it	ge
 8019c74:	4691      	movge	r9, r2
 8019c76:	f1b9 0f00 	cmp.w	r9, #0
 8019c7a:	dc35      	bgt.n	8019ce8 <_printf_float+0x380>
 8019c7c:	f04f 0800 	mov.w	r8, #0
 8019c80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019c84:	f104 0a1a 	add.w	sl, r4, #26
 8019c88:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019c8c:	1a9b      	subs	r3, r3, r2
 8019c8e:	eba3 0309 	sub.w	r3, r3, r9
 8019c92:	4543      	cmp	r3, r8
 8019c94:	f77f af75 	ble.w	8019b82 <_printf_float+0x21a>
 8019c98:	2301      	movs	r3, #1
 8019c9a:	4652      	mov	r2, sl
 8019c9c:	4631      	mov	r1, r6
 8019c9e:	4628      	mov	r0, r5
 8019ca0:	47b8      	blx	r7
 8019ca2:	3001      	adds	r0, #1
 8019ca4:	f43f aeae 	beq.w	8019a04 <_printf_float+0x9c>
 8019ca8:	f108 0801 	add.w	r8, r8, #1
 8019cac:	e7ec      	b.n	8019c88 <_printf_float+0x320>
 8019cae:	4613      	mov	r3, r2
 8019cb0:	4631      	mov	r1, r6
 8019cb2:	4642      	mov	r2, r8
 8019cb4:	4628      	mov	r0, r5
 8019cb6:	47b8      	blx	r7
 8019cb8:	3001      	adds	r0, #1
 8019cba:	d1bf      	bne.n	8019c3c <_printf_float+0x2d4>
 8019cbc:	e6a2      	b.n	8019a04 <_printf_float+0x9c>
 8019cbe:	2301      	movs	r3, #1
 8019cc0:	4631      	mov	r1, r6
 8019cc2:	4628      	mov	r0, r5
 8019cc4:	9204      	str	r2, [sp, #16]
 8019cc6:	47b8      	blx	r7
 8019cc8:	3001      	adds	r0, #1
 8019cca:	f43f ae9b 	beq.w	8019a04 <_printf_float+0x9c>
 8019cce:	9b05      	ldr	r3, [sp, #20]
 8019cd0:	9a04      	ldr	r2, [sp, #16]
 8019cd2:	3301      	adds	r3, #1
 8019cd4:	9305      	str	r3, [sp, #20]
 8019cd6:	e7b7      	b.n	8019c48 <_printf_float+0x2e0>
 8019cd8:	4653      	mov	r3, sl
 8019cda:	465a      	mov	r2, fp
 8019cdc:	4631      	mov	r1, r6
 8019cde:	4628      	mov	r0, r5
 8019ce0:	47b8      	blx	r7
 8019ce2:	3001      	adds	r0, #1
 8019ce4:	d1be      	bne.n	8019c64 <_printf_float+0x2fc>
 8019ce6:	e68d      	b.n	8019a04 <_printf_float+0x9c>
 8019ce8:	9a04      	ldr	r2, [sp, #16]
 8019cea:	464b      	mov	r3, r9
 8019cec:	4442      	add	r2, r8
 8019cee:	4631      	mov	r1, r6
 8019cf0:	4628      	mov	r0, r5
 8019cf2:	47b8      	blx	r7
 8019cf4:	3001      	adds	r0, #1
 8019cf6:	d1c1      	bne.n	8019c7c <_printf_float+0x314>
 8019cf8:	e684      	b.n	8019a04 <_printf_float+0x9c>
 8019cfa:	9a08      	ldr	r2, [sp, #32]
 8019cfc:	2a01      	cmp	r2, #1
 8019cfe:	dc01      	bgt.n	8019d04 <_printf_float+0x39c>
 8019d00:	07db      	lsls	r3, r3, #31
 8019d02:	d537      	bpl.n	8019d74 <_printf_float+0x40c>
 8019d04:	2301      	movs	r3, #1
 8019d06:	4642      	mov	r2, r8
 8019d08:	4631      	mov	r1, r6
 8019d0a:	4628      	mov	r0, r5
 8019d0c:	47b8      	blx	r7
 8019d0e:	3001      	adds	r0, #1
 8019d10:	f43f ae78 	beq.w	8019a04 <_printf_float+0x9c>
 8019d14:	4653      	mov	r3, sl
 8019d16:	465a      	mov	r2, fp
 8019d18:	4631      	mov	r1, r6
 8019d1a:	4628      	mov	r0, r5
 8019d1c:	47b8      	blx	r7
 8019d1e:	3001      	adds	r0, #1
 8019d20:	f43f ae70 	beq.w	8019a04 <_printf_float+0x9c>
 8019d24:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8019d28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d30:	d01b      	beq.n	8019d6a <_printf_float+0x402>
 8019d32:	9b08      	ldr	r3, [sp, #32]
 8019d34:	f108 0201 	add.w	r2, r8, #1
 8019d38:	3b01      	subs	r3, #1
 8019d3a:	4631      	mov	r1, r6
 8019d3c:	4628      	mov	r0, r5
 8019d3e:	47b8      	blx	r7
 8019d40:	3001      	adds	r0, #1
 8019d42:	d10e      	bne.n	8019d62 <_printf_float+0x3fa>
 8019d44:	e65e      	b.n	8019a04 <_printf_float+0x9c>
 8019d46:	2301      	movs	r3, #1
 8019d48:	464a      	mov	r2, r9
 8019d4a:	4631      	mov	r1, r6
 8019d4c:	4628      	mov	r0, r5
 8019d4e:	47b8      	blx	r7
 8019d50:	3001      	adds	r0, #1
 8019d52:	f43f ae57 	beq.w	8019a04 <_printf_float+0x9c>
 8019d56:	f108 0801 	add.w	r8, r8, #1
 8019d5a:	9b08      	ldr	r3, [sp, #32]
 8019d5c:	3b01      	subs	r3, #1
 8019d5e:	4543      	cmp	r3, r8
 8019d60:	dcf1      	bgt.n	8019d46 <_printf_float+0x3de>
 8019d62:	9b04      	ldr	r3, [sp, #16]
 8019d64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019d68:	e6db      	b.n	8019b22 <_printf_float+0x1ba>
 8019d6a:	f04f 0800 	mov.w	r8, #0
 8019d6e:	f104 091a 	add.w	r9, r4, #26
 8019d72:	e7f2      	b.n	8019d5a <_printf_float+0x3f2>
 8019d74:	2301      	movs	r3, #1
 8019d76:	4642      	mov	r2, r8
 8019d78:	e7df      	b.n	8019d3a <_printf_float+0x3d2>
 8019d7a:	2301      	movs	r3, #1
 8019d7c:	464a      	mov	r2, r9
 8019d7e:	4631      	mov	r1, r6
 8019d80:	4628      	mov	r0, r5
 8019d82:	47b8      	blx	r7
 8019d84:	3001      	adds	r0, #1
 8019d86:	f43f ae3d 	beq.w	8019a04 <_printf_float+0x9c>
 8019d8a:	f108 0801 	add.w	r8, r8, #1
 8019d8e:	68e3      	ldr	r3, [r4, #12]
 8019d90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019d92:	1a5b      	subs	r3, r3, r1
 8019d94:	4543      	cmp	r3, r8
 8019d96:	dcf0      	bgt.n	8019d7a <_printf_float+0x412>
 8019d98:	e6f7      	b.n	8019b8a <_printf_float+0x222>
 8019d9a:	f04f 0800 	mov.w	r8, #0
 8019d9e:	f104 0919 	add.w	r9, r4, #25
 8019da2:	e7f4      	b.n	8019d8e <_printf_float+0x426>

08019da4 <_printf_common>:
 8019da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019da8:	4616      	mov	r6, r2
 8019daa:	4699      	mov	r9, r3
 8019dac:	688a      	ldr	r2, [r1, #8]
 8019dae:	690b      	ldr	r3, [r1, #16]
 8019db0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019db4:	4293      	cmp	r3, r2
 8019db6:	bfb8      	it	lt
 8019db8:	4613      	movlt	r3, r2
 8019dba:	6033      	str	r3, [r6, #0]
 8019dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019dc0:	4607      	mov	r7, r0
 8019dc2:	460c      	mov	r4, r1
 8019dc4:	b10a      	cbz	r2, 8019dca <_printf_common+0x26>
 8019dc6:	3301      	adds	r3, #1
 8019dc8:	6033      	str	r3, [r6, #0]
 8019dca:	6823      	ldr	r3, [r4, #0]
 8019dcc:	0699      	lsls	r1, r3, #26
 8019dce:	bf42      	ittt	mi
 8019dd0:	6833      	ldrmi	r3, [r6, #0]
 8019dd2:	3302      	addmi	r3, #2
 8019dd4:	6033      	strmi	r3, [r6, #0]
 8019dd6:	6825      	ldr	r5, [r4, #0]
 8019dd8:	f015 0506 	ands.w	r5, r5, #6
 8019ddc:	d106      	bne.n	8019dec <_printf_common+0x48>
 8019dde:	f104 0a19 	add.w	sl, r4, #25
 8019de2:	68e3      	ldr	r3, [r4, #12]
 8019de4:	6832      	ldr	r2, [r6, #0]
 8019de6:	1a9b      	subs	r3, r3, r2
 8019de8:	42ab      	cmp	r3, r5
 8019dea:	dc26      	bgt.n	8019e3a <_printf_common+0x96>
 8019dec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019df0:	1e13      	subs	r3, r2, #0
 8019df2:	6822      	ldr	r2, [r4, #0]
 8019df4:	bf18      	it	ne
 8019df6:	2301      	movne	r3, #1
 8019df8:	0692      	lsls	r2, r2, #26
 8019dfa:	d42b      	bmi.n	8019e54 <_printf_common+0xb0>
 8019dfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019e00:	4649      	mov	r1, r9
 8019e02:	4638      	mov	r0, r7
 8019e04:	47c0      	blx	r8
 8019e06:	3001      	adds	r0, #1
 8019e08:	d01e      	beq.n	8019e48 <_printf_common+0xa4>
 8019e0a:	6823      	ldr	r3, [r4, #0]
 8019e0c:	68e5      	ldr	r5, [r4, #12]
 8019e0e:	6832      	ldr	r2, [r6, #0]
 8019e10:	f003 0306 	and.w	r3, r3, #6
 8019e14:	2b04      	cmp	r3, #4
 8019e16:	bf08      	it	eq
 8019e18:	1aad      	subeq	r5, r5, r2
 8019e1a:	68a3      	ldr	r3, [r4, #8]
 8019e1c:	6922      	ldr	r2, [r4, #16]
 8019e1e:	bf0c      	ite	eq
 8019e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019e24:	2500      	movne	r5, #0
 8019e26:	4293      	cmp	r3, r2
 8019e28:	bfc4      	itt	gt
 8019e2a:	1a9b      	subgt	r3, r3, r2
 8019e2c:	18ed      	addgt	r5, r5, r3
 8019e2e:	2600      	movs	r6, #0
 8019e30:	341a      	adds	r4, #26
 8019e32:	42b5      	cmp	r5, r6
 8019e34:	d11a      	bne.n	8019e6c <_printf_common+0xc8>
 8019e36:	2000      	movs	r0, #0
 8019e38:	e008      	b.n	8019e4c <_printf_common+0xa8>
 8019e3a:	2301      	movs	r3, #1
 8019e3c:	4652      	mov	r2, sl
 8019e3e:	4649      	mov	r1, r9
 8019e40:	4638      	mov	r0, r7
 8019e42:	47c0      	blx	r8
 8019e44:	3001      	adds	r0, #1
 8019e46:	d103      	bne.n	8019e50 <_printf_common+0xac>
 8019e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e50:	3501      	adds	r5, #1
 8019e52:	e7c6      	b.n	8019de2 <_printf_common+0x3e>
 8019e54:	18e1      	adds	r1, r4, r3
 8019e56:	1c5a      	adds	r2, r3, #1
 8019e58:	2030      	movs	r0, #48	; 0x30
 8019e5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019e5e:	4422      	add	r2, r4
 8019e60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019e64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019e68:	3302      	adds	r3, #2
 8019e6a:	e7c7      	b.n	8019dfc <_printf_common+0x58>
 8019e6c:	2301      	movs	r3, #1
 8019e6e:	4622      	mov	r2, r4
 8019e70:	4649      	mov	r1, r9
 8019e72:	4638      	mov	r0, r7
 8019e74:	47c0      	blx	r8
 8019e76:	3001      	adds	r0, #1
 8019e78:	d0e6      	beq.n	8019e48 <_printf_common+0xa4>
 8019e7a:	3601      	adds	r6, #1
 8019e7c:	e7d9      	b.n	8019e32 <_printf_common+0x8e>
	...

08019e80 <_printf_i>:
 8019e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019e84:	7e0f      	ldrb	r7, [r1, #24]
 8019e86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019e88:	2f78      	cmp	r7, #120	; 0x78
 8019e8a:	4691      	mov	r9, r2
 8019e8c:	4680      	mov	r8, r0
 8019e8e:	460c      	mov	r4, r1
 8019e90:	469a      	mov	sl, r3
 8019e92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019e96:	d807      	bhi.n	8019ea8 <_printf_i+0x28>
 8019e98:	2f62      	cmp	r7, #98	; 0x62
 8019e9a:	d80a      	bhi.n	8019eb2 <_printf_i+0x32>
 8019e9c:	2f00      	cmp	r7, #0
 8019e9e:	f000 80d8 	beq.w	801a052 <_printf_i+0x1d2>
 8019ea2:	2f58      	cmp	r7, #88	; 0x58
 8019ea4:	f000 80a3 	beq.w	8019fee <_printf_i+0x16e>
 8019ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019eac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019eb0:	e03a      	b.n	8019f28 <_printf_i+0xa8>
 8019eb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019eb6:	2b15      	cmp	r3, #21
 8019eb8:	d8f6      	bhi.n	8019ea8 <_printf_i+0x28>
 8019eba:	a101      	add	r1, pc, #4	; (adr r1, 8019ec0 <_printf_i+0x40>)
 8019ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019ec0:	08019f19 	.word	0x08019f19
 8019ec4:	08019f2d 	.word	0x08019f2d
 8019ec8:	08019ea9 	.word	0x08019ea9
 8019ecc:	08019ea9 	.word	0x08019ea9
 8019ed0:	08019ea9 	.word	0x08019ea9
 8019ed4:	08019ea9 	.word	0x08019ea9
 8019ed8:	08019f2d 	.word	0x08019f2d
 8019edc:	08019ea9 	.word	0x08019ea9
 8019ee0:	08019ea9 	.word	0x08019ea9
 8019ee4:	08019ea9 	.word	0x08019ea9
 8019ee8:	08019ea9 	.word	0x08019ea9
 8019eec:	0801a039 	.word	0x0801a039
 8019ef0:	08019f5d 	.word	0x08019f5d
 8019ef4:	0801a01b 	.word	0x0801a01b
 8019ef8:	08019ea9 	.word	0x08019ea9
 8019efc:	08019ea9 	.word	0x08019ea9
 8019f00:	0801a05b 	.word	0x0801a05b
 8019f04:	08019ea9 	.word	0x08019ea9
 8019f08:	08019f5d 	.word	0x08019f5d
 8019f0c:	08019ea9 	.word	0x08019ea9
 8019f10:	08019ea9 	.word	0x08019ea9
 8019f14:	0801a023 	.word	0x0801a023
 8019f18:	682b      	ldr	r3, [r5, #0]
 8019f1a:	1d1a      	adds	r2, r3, #4
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	602a      	str	r2, [r5, #0]
 8019f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019f28:	2301      	movs	r3, #1
 8019f2a:	e0a3      	b.n	801a074 <_printf_i+0x1f4>
 8019f2c:	6820      	ldr	r0, [r4, #0]
 8019f2e:	6829      	ldr	r1, [r5, #0]
 8019f30:	0606      	lsls	r6, r0, #24
 8019f32:	f101 0304 	add.w	r3, r1, #4
 8019f36:	d50a      	bpl.n	8019f4e <_printf_i+0xce>
 8019f38:	680e      	ldr	r6, [r1, #0]
 8019f3a:	602b      	str	r3, [r5, #0]
 8019f3c:	2e00      	cmp	r6, #0
 8019f3e:	da03      	bge.n	8019f48 <_printf_i+0xc8>
 8019f40:	232d      	movs	r3, #45	; 0x2d
 8019f42:	4276      	negs	r6, r6
 8019f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019f48:	485e      	ldr	r0, [pc, #376]	; (801a0c4 <_printf_i+0x244>)
 8019f4a:	230a      	movs	r3, #10
 8019f4c:	e019      	b.n	8019f82 <_printf_i+0x102>
 8019f4e:	680e      	ldr	r6, [r1, #0]
 8019f50:	602b      	str	r3, [r5, #0]
 8019f52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019f56:	bf18      	it	ne
 8019f58:	b236      	sxthne	r6, r6
 8019f5a:	e7ef      	b.n	8019f3c <_printf_i+0xbc>
 8019f5c:	682b      	ldr	r3, [r5, #0]
 8019f5e:	6820      	ldr	r0, [r4, #0]
 8019f60:	1d19      	adds	r1, r3, #4
 8019f62:	6029      	str	r1, [r5, #0]
 8019f64:	0601      	lsls	r1, r0, #24
 8019f66:	d501      	bpl.n	8019f6c <_printf_i+0xec>
 8019f68:	681e      	ldr	r6, [r3, #0]
 8019f6a:	e002      	b.n	8019f72 <_printf_i+0xf2>
 8019f6c:	0646      	lsls	r6, r0, #25
 8019f6e:	d5fb      	bpl.n	8019f68 <_printf_i+0xe8>
 8019f70:	881e      	ldrh	r6, [r3, #0]
 8019f72:	4854      	ldr	r0, [pc, #336]	; (801a0c4 <_printf_i+0x244>)
 8019f74:	2f6f      	cmp	r7, #111	; 0x6f
 8019f76:	bf0c      	ite	eq
 8019f78:	2308      	moveq	r3, #8
 8019f7a:	230a      	movne	r3, #10
 8019f7c:	2100      	movs	r1, #0
 8019f7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019f82:	6865      	ldr	r5, [r4, #4]
 8019f84:	60a5      	str	r5, [r4, #8]
 8019f86:	2d00      	cmp	r5, #0
 8019f88:	bfa2      	ittt	ge
 8019f8a:	6821      	ldrge	r1, [r4, #0]
 8019f8c:	f021 0104 	bicge.w	r1, r1, #4
 8019f90:	6021      	strge	r1, [r4, #0]
 8019f92:	b90e      	cbnz	r6, 8019f98 <_printf_i+0x118>
 8019f94:	2d00      	cmp	r5, #0
 8019f96:	d04d      	beq.n	801a034 <_printf_i+0x1b4>
 8019f98:	4615      	mov	r5, r2
 8019f9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8019f9e:	fb03 6711 	mls	r7, r3, r1, r6
 8019fa2:	5dc7      	ldrb	r7, [r0, r7]
 8019fa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019fa8:	4637      	mov	r7, r6
 8019faa:	42bb      	cmp	r3, r7
 8019fac:	460e      	mov	r6, r1
 8019fae:	d9f4      	bls.n	8019f9a <_printf_i+0x11a>
 8019fb0:	2b08      	cmp	r3, #8
 8019fb2:	d10b      	bne.n	8019fcc <_printf_i+0x14c>
 8019fb4:	6823      	ldr	r3, [r4, #0]
 8019fb6:	07de      	lsls	r6, r3, #31
 8019fb8:	d508      	bpl.n	8019fcc <_printf_i+0x14c>
 8019fba:	6923      	ldr	r3, [r4, #16]
 8019fbc:	6861      	ldr	r1, [r4, #4]
 8019fbe:	4299      	cmp	r1, r3
 8019fc0:	bfde      	ittt	le
 8019fc2:	2330      	movle	r3, #48	; 0x30
 8019fc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019fc8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8019fcc:	1b52      	subs	r2, r2, r5
 8019fce:	6122      	str	r2, [r4, #16]
 8019fd0:	f8cd a000 	str.w	sl, [sp]
 8019fd4:	464b      	mov	r3, r9
 8019fd6:	aa03      	add	r2, sp, #12
 8019fd8:	4621      	mov	r1, r4
 8019fda:	4640      	mov	r0, r8
 8019fdc:	f7ff fee2 	bl	8019da4 <_printf_common>
 8019fe0:	3001      	adds	r0, #1
 8019fe2:	d14c      	bne.n	801a07e <_printf_i+0x1fe>
 8019fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019fe8:	b004      	add	sp, #16
 8019fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fee:	4835      	ldr	r0, [pc, #212]	; (801a0c4 <_printf_i+0x244>)
 8019ff0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019ff4:	6829      	ldr	r1, [r5, #0]
 8019ff6:	6823      	ldr	r3, [r4, #0]
 8019ff8:	f851 6b04 	ldr.w	r6, [r1], #4
 8019ffc:	6029      	str	r1, [r5, #0]
 8019ffe:	061d      	lsls	r5, r3, #24
 801a000:	d514      	bpl.n	801a02c <_printf_i+0x1ac>
 801a002:	07df      	lsls	r7, r3, #31
 801a004:	bf44      	itt	mi
 801a006:	f043 0320 	orrmi.w	r3, r3, #32
 801a00a:	6023      	strmi	r3, [r4, #0]
 801a00c:	b91e      	cbnz	r6, 801a016 <_printf_i+0x196>
 801a00e:	6823      	ldr	r3, [r4, #0]
 801a010:	f023 0320 	bic.w	r3, r3, #32
 801a014:	6023      	str	r3, [r4, #0]
 801a016:	2310      	movs	r3, #16
 801a018:	e7b0      	b.n	8019f7c <_printf_i+0xfc>
 801a01a:	6823      	ldr	r3, [r4, #0]
 801a01c:	f043 0320 	orr.w	r3, r3, #32
 801a020:	6023      	str	r3, [r4, #0]
 801a022:	2378      	movs	r3, #120	; 0x78
 801a024:	4828      	ldr	r0, [pc, #160]	; (801a0c8 <_printf_i+0x248>)
 801a026:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a02a:	e7e3      	b.n	8019ff4 <_printf_i+0x174>
 801a02c:	0659      	lsls	r1, r3, #25
 801a02e:	bf48      	it	mi
 801a030:	b2b6      	uxthmi	r6, r6
 801a032:	e7e6      	b.n	801a002 <_printf_i+0x182>
 801a034:	4615      	mov	r5, r2
 801a036:	e7bb      	b.n	8019fb0 <_printf_i+0x130>
 801a038:	682b      	ldr	r3, [r5, #0]
 801a03a:	6826      	ldr	r6, [r4, #0]
 801a03c:	6961      	ldr	r1, [r4, #20]
 801a03e:	1d18      	adds	r0, r3, #4
 801a040:	6028      	str	r0, [r5, #0]
 801a042:	0635      	lsls	r5, r6, #24
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	d501      	bpl.n	801a04c <_printf_i+0x1cc>
 801a048:	6019      	str	r1, [r3, #0]
 801a04a:	e002      	b.n	801a052 <_printf_i+0x1d2>
 801a04c:	0670      	lsls	r0, r6, #25
 801a04e:	d5fb      	bpl.n	801a048 <_printf_i+0x1c8>
 801a050:	8019      	strh	r1, [r3, #0]
 801a052:	2300      	movs	r3, #0
 801a054:	6123      	str	r3, [r4, #16]
 801a056:	4615      	mov	r5, r2
 801a058:	e7ba      	b.n	8019fd0 <_printf_i+0x150>
 801a05a:	682b      	ldr	r3, [r5, #0]
 801a05c:	1d1a      	adds	r2, r3, #4
 801a05e:	602a      	str	r2, [r5, #0]
 801a060:	681d      	ldr	r5, [r3, #0]
 801a062:	6862      	ldr	r2, [r4, #4]
 801a064:	2100      	movs	r1, #0
 801a066:	4628      	mov	r0, r5
 801a068:	f7e6 f902 	bl	8000270 <memchr>
 801a06c:	b108      	cbz	r0, 801a072 <_printf_i+0x1f2>
 801a06e:	1b40      	subs	r0, r0, r5
 801a070:	6060      	str	r0, [r4, #4]
 801a072:	6863      	ldr	r3, [r4, #4]
 801a074:	6123      	str	r3, [r4, #16]
 801a076:	2300      	movs	r3, #0
 801a078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a07c:	e7a8      	b.n	8019fd0 <_printf_i+0x150>
 801a07e:	6923      	ldr	r3, [r4, #16]
 801a080:	462a      	mov	r2, r5
 801a082:	4649      	mov	r1, r9
 801a084:	4640      	mov	r0, r8
 801a086:	47d0      	blx	sl
 801a088:	3001      	adds	r0, #1
 801a08a:	d0ab      	beq.n	8019fe4 <_printf_i+0x164>
 801a08c:	6823      	ldr	r3, [r4, #0]
 801a08e:	079b      	lsls	r3, r3, #30
 801a090:	d413      	bmi.n	801a0ba <_printf_i+0x23a>
 801a092:	68e0      	ldr	r0, [r4, #12]
 801a094:	9b03      	ldr	r3, [sp, #12]
 801a096:	4298      	cmp	r0, r3
 801a098:	bfb8      	it	lt
 801a09a:	4618      	movlt	r0, r3
 801a09c:	e7a4      	b.n	8019fe8 <_printf_i+0x168>
 801a09e:	2301      	movs	r3, #1
 801a0a0:	4632      	mov	r2, r6
 801a0a2:	4649      	mov	r1, r9
 801a0a4:	4640      	mov	r0, r8
 801a0a6:	47d0      	blx	sl
 801a0a8:	3001      	adds	r0, #1
 801a0aa:	d09b      	beq.n	8019fe4 <_printf_i+0x164>
 801a0ac:	3501      	adds	r5, #1
 801a0ae:	68e3      	ldr	r3, [r4, #12]
 801a0b0:	9903      	ldr	r1, [sp, #12]
 801a0b2:	1a5b      	subs	r3, r3, r1
 801a0b4:	42ab      	cmp	r3, r5
 801a0b6:	dcf2      	bgt.n	801a09e <_printf_i+0x21e>
 801a0b8:	e7eb      	b.n	801a092 <_printf_i+0x212>
 801a0ba:	2500      	movs	r5, #0
 801a0bc:	f104 0619 	add.w	r6, r4, #25
 801a0c0:	e7f5      	b.n	801a0ae <_printf_i+0x22e>
 801a0c2:	bf00      	nop
 801a0c4:	0802968e 	.word	0x0802968e
 801a0c8:	0802969f 	.word	0x0802969f

0801a0cc <iprintf>:
 801a0cc:	b40f      	push	{r0, r1, r2, r3}
 801a0ce:	4b0a      	ldr	r3, [pc, #40]	; (801a0f8 <iprintf+0x2c>)
 801a0d0:	b513      	push	{r0, r1, r4, lr}
 801a0d2:	681c      	ldr	r4, [r3, #0]
 801a0d4:	b124      	cbz	r4, 801a0e0 <iprintf+0x14>
 801a0d6:	69a3      	ldr	r3, [r4, #24]
 801a0d8:	b913      	cbnz	r3, 801a0e0 <iprintf+0x14>
 801a0da:	4620      	mov	r0, r4
 801a0dc:	f000 ff06 	bl	801aeec <__sinit>
 801a0e0:	ab05      	add	r3, sp, #20
 801a0e2:	9a04      	ldr	r2, [sp, #16]
 801a0e4:	68a1      	ldr	r1, [r4, #8]
 801a0e6:	9301      	str	r3, [sp, #4]
 801a0e8:	4620      	mov	r0, r4
 801a0ea:	f001 fdbf 	bl	801bc6c <_vfiprintf_r>
 801a0ee:	b002      	add	sp, #8
 801a0f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a0f4:	b004      	add	sp, #16
 801a0f6:	4770      	bx	lr
 801a0f8:	20000034 	.word	0x20000034

0801a0fc <rand>:
 801a0fc:	4b16      	ldr	r3, [pc, #88]	; (801a158 <rand+0x5c>)
 801a0fe:	b510      	push	{r4, lr}
 801a100:	681c      	ldr	r4, [r3, #0]
 801a102:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a104:	b9b3      	cbnz	r3, 801a134 <rand+0x38>
 801a106:	2018      	movs	r0, #24
 801a108:	f000 ffa8 	bl	801b05c <malloc>
 801a10c:	63a0      	str	r0, [r4, #56]	; 0x38
 801a10e:	b928      	cbnz	r0, 801a11c <rand+0x20>
 801a110:	4602      	mov	r2, r0
 801a112:	4b12      	ldr	r3, [pc, #72]	; (801a15c <rand+0x60>)
 801a114:	4812      	ldr	r0, [pc, #72]	; (801a160 <rand+0x64>)
 801a116:	214e      	movs	r1, #78	; 0x4e
 801a118:	f000 f876 	bl	801a208 <__assert_func>
 801a11c:	4a11      	ldr	r2, [pc, #68]	; (801a164 <rand+0x68>)
 801a11e:	4b12      	ldr	r3, [pc, #72]	; (801a168 <rand+0x6c>)
 801a120:	e9c0 2300 	strd	r2, r3, [r0]
 801a124:	4b11      	ldr	r3, [pc, #68]	; (801a16c <rand+0x70>)
 801a126:	6083      	str	r3, [r0, #8]
 801a128:	230b      	movs	r3, #11
 801a12a:	8183      	strh	r3, [r0, #12]
 801a12c:	2201      	movs	r2, #1
 801a12e:	2300      	movs	r3, #0
 801a130:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801a134:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801a136:	4a0e      	ldr	r2, [pc, #56]	; (801a170 <rand+0x74>)
 801a138:	6920      	ldr	r0, [r4, #16]
 801a13a:	6963      	ldr	r3, [r4, #20]
 801a13c:	490d      	ldr	r1, [pc, #52]	; (801a174 <rand+0x78>)
 801a13e:	4342      	muls	r2, r0
 801a140:	fb01 2203 	mla	r2, r1, r3, r2
 801a144:	fba0 0101 	umull	r0, r1, r0, r1
 801a148:	1c43      	adds	r3, r0, #1
 801a14a:	eb42 0001 	adc.w	r0, r2, r1
 801a14e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801a152:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a156:	bd10      	pop	{r4, pc}
 801a158:	20000034 	.word	0x20000034
 801a15c:	080296b0 	.word	0x080296b0
 801a160:	080296c7 	.word	0x080296c7
 801a164:	abcd330e 	.word	0xabcd330e
 801a168:	e66d1234 	.word	0xe66d1234
 801a16c:	0005deec 	.word	0x0005deec
 801a170:	5851f42d 	.word	0x5851f42d
 801a174:	4c957f2d 	.word	0x4c957f2d

0801a178 <sniprintf>:
 801a178:	b40c      	push	{r2, r3}
 801a17a:	b530      	push	{r4, r5, lr}
 801a17c:	4b17      	ldr	r3, [pc, #92]	; (801a1dc <sniprintf+0x64>)
 801a17e:	1e0c      	subs	r4, r1, #0
 801a180:	681d      	ldr	r5, [r3, #0]
 801a182:	b09d      	sub	sp, #116	; 0x74
 801a184:	da08      	bge.n	801a198 <sniprintf+0x20>
 801a186:	238b      	movs	r3, #139	; 0x8b
 801a188:	602b      	str	r3, [r5, #0]
 801a18a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a18e:	b01d      	add	sp, #116	; 0x74
 801a190:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a194:	b002      	add	sp, #8
 801a196:	4770      	bx	lr
 801a198:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a19c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a1a0:	bf14      	ite	ne
 801a1a2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801a1a6:	4623      	moveq	r3, r4
 801a1a8:	9304      	str	r3, [sp, #16]
 801a1aa:	9307      	str	r3, [sp, #28]
 801a1ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a1b0:	9002      	str	r0, [sp, #8]
 801a1b2:	9006      	str	r0, [sp, #24]
 801a1b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a1b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a1ba:	ab21      	add	r3, sp, #132	; 0x84
 801a1bc:	a902      	add	r1, sp, #8
 801a1be:	4628      	mov	r0, r5
 801a1c0:	9301      	str	r3, [sp, #4]
 801a1c2:	f001 fc29 	bl	801ba18 <_svfiprintf_r>
 801a1c6:	1c43      	adds	r3, r0, #1
 801a1c8:	bfbc      	itt	lt
 801a1ca:	238b      	movlt	r3, #139	; 0x8b
 801a1cc:	602b      	strlt	r3, [r5, #0]
 801a1ce:	2c00      	cmp	r4, #0
 801a1d0:	d0dd      	beq.n	801a18e <sniprintf+0x16>
 801a1d2:	9b02      	ldr	r3, [sp, #8]
 801a1d4:	2200      	movs	r2, #0
 801a1d6:	701a      	strb	r2, [r3, #0]
 801a1d8:	e7d9      	b.n	801a18e <sniprintf+0x16>
 801a1da:	bf00      	nop
 801a1dc:	20000034 	.word	0x20000034

0801a1e0 <strncmp>:
 801a1e0:	b510      	push	{r4, lr}
 801a1e2:	b17a      	cbz	r2, 801a204 <strncmp+0x24>
 801a1e4:	4603      	mov	r3, r0
 801a1e6:	3901      	subs	r1, #1
 801a1e8:	1884      	adds	r4, r0, r2
 801a1ea:	f813 0b01 	ldrb.w	r0, [r3], #1
 801a1ee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a1f2:	4290      	cmp	r0, r2
 801a1f4:	d101      	bne.n	801a1fa <strncmp+0x1a>
 801a1f6:	42a3      	cmp	r3, r4
 801a1f8:	d101      	bne.n	801a1fe <strncmp+0x1e>
 801a1fa:	1a80      	subs	r0, r0, r2
 801a1fc:	bd10      	pop	{r4, pc}
 801a1fe:	2800      	cmp	r0, #0
 801a200:	d1f3      	bne.n	801a1ea <strncmp+0xa>
 801a202:	e7fa      	b.n	801a1fa <strncmp+0x1a>
 801a204:	4610      	mov	r0, r2
 801a206:	e7f9      	b.n	801a1fc <strncmp+0x1c>

0801a208 <__assert_func>:
 801a208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a20a:	4614      	mov	r4, r2
 801a20c:	461a      	mov	r2, r3
 801a20e:	4b09      	ldr	r3, [pc, #36]	; (801a234 <__assert_func+0x2c>)
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	4605      	mov	r5, r0
 801a214:	68d8      	ldr	r0, [r3, #12]
 801a216:	b14c      	cbz	r4, 801a22c <__assert_func+0x24>
 801a218:	4b07      	ldr	r3, [pc, #28]	; (801a238 <__assert_func+0x30>)
 801a21a:	9100      	str	r1, [sp, #0]
 801a21c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a220:	4906      	ldr	r1, [pc, #24]	; (801a23c <__assert_func+0x34>)
 801a222:	462b      	mov	r3, r5
 801a224:	f000 fee0 	bl	801afe8 <fiprintf>
 801a228:	f001 ff76 	bl	801c118 <abort>
 801a22c:	4b04      	ldr	r3, [pc, #16]	; (801a240 <__assert_func+0x38>)
 801a22e:	461c      	mov	r4, r3
 801a230:	e7f3      	b.n	801a21a <__assert_func+0x12>
 801a232:	bf00      	nop
 801a234:	20000034 	.word	0x20000034
 801a238:	08029722 	.word	0x08029722
 801a23c:	0802972f 	.word	0x0802972f
 801a240:	0802975d 	.word	0x0802975d

0801a244 <quorem>:
 801a244:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a248:	6903      	ldr	r3, [r0, #16]
 801a24a:	690c      	ldr	r4, [r1, #16]
 801a24c:	42a3      	cmp	r3, r4
 801a24e:	4607      	mov	r7, r0
 801a250:	f2c0 8081 	blt.w	801a356 <quorem+0x112>
 801a254:	3c01      	subs	r4, #1
 801a256:	f101 0814 	add.w	r8, r1, #20
 801a25a:	f100 0514 	add.w	r5, r0, #20
 801a25e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a262:	9301      	str	r3, [sp, #4]
 801a264:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a268:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a26c:	3301      	adds	r3, #1
 801a26e:	429a      	cmp	r2, r3
 801a270:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a274:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a278:	fbb2 f6f3 	udiv	r6, r2, r3
 801a27c:	d331      	bcc.n	801a2e2 <quorem+0x9e>
 801a27e:	f04f 0e00 	mov.w	lr, #0
 801a282:	4640      	mov	r0, r8
 801a284:	46ac      	mov	ip, r5
 801a286:	46f2      	mov	sl, lr
 801a288:	f850 2b04 	ldr.w	r2, [r0], #4
 801a28c:	b293      	uxth	r3, r2
 801a28e:	fb06 e303 	mla	r3, r6, r3, lr
 801a292:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801a296:	b29b      	uxth	r3, r3
 801a298:	ebaa 0303 	sub.w	r3, sl, r3
 801a29c:	f8dc a000 	ldr.w	sl, [ip]
 801a2a0:	0c12      	lsrs	r2, r2, #16
 801a2a2:	fa13 f38a 	uxtah	r3, r3, sl
 801a2a6:	fb06 e202 	mla	r2, r6, r2, lr
 801a2aa:	9300      	str	r3, [sp, #0]
 801a2ac:	9b00      	ldr	r3, [sp, #0]
 801a2ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a2b2:	b292      	uxth	r2, r2
 801a2b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801a2b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a2bc:	f8bd 3000 	ldrh.w	r3, [sp]
 801a2c0:	4581      	cmp	r9, r0
 801a2c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a2c6:	f84c 3b04 	str.w	r3, [ip], #4
 801a2ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a2ce:	d2db      	bcs.n	801a288 <quorem+0x44>
 801a2d0:	f855 300b 	ldr.w	r3, [r5, fp]
 801a2d4:	b92b      	cbnz	r3, 801a2e2 <quorem+0x9e>
 801a2d6:	9b01      	ldr	r3, [sp, #4]
 801a2d8:	3b04      	subs	r3, #4
 801a2da:	429d      	cmp	r5, r3
 801a2dc:	461a      	mov	r2, r3
 801a2de:	d32e      	bcc.n	801a33e <quorem+0xfa>
 801a2e0:	613c      	str	r4, [r7, #16]
 801a2e2:	4638      	mov	r0, r7
 801a2e4:	f001 f944 	bl	801b570 <__mcmp>
 801a2e8:	2800      	cmp	r0, #0
 801a2ea:	db24      	blt.n	801a336 <quorem+0xf2>
 801a2ec:	3601      	adds	r6, #1
 801a2ee:	4628      	mov	r0, r5
 801a2f0:	f04f 0c00 	mov.w	ip, #0
 801a2f4:	f858 2b04 	ldr.w	r2, [r8], #4
 801a2f8:	f8d0 e000 	ldr.w	lr, [r0]
 801a2fc:	b293      	uxth	r3, r2
 801a2fe:	ebac 0303 	sub.w	r3, ip, r3
 801a302:	0c12      	lsrs	r2, r2, #16
 801a304:	fa13 f38e 	uxtah	r3, r3, lr
 801a308:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801a30c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a310:	b29b      	uxth	r3, r3
 801a312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a316:	45c1      	cmp	r9, r8
 801a318:	f840 3b04 	str.w	r3, [r0], #4
 801a31c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a320:	d2e8      	bcs.n	801a2f4 <quorem+0xb0>
 801a322:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a326:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a32a:	b922      	cbnz	r2, 801a336 <quorem+0xf2>
 801a32c:	3b04      	subs	r3, #4
 801a32e:	429d      	cmp	r5, r3
 801a330:	461a      	mov	r2, r3
 801a332:	d30a      	bcc.n	801a34a <quorem+0x106>
 801a334:	613c      	str	r4, [r7, #16]
 801a336:	4630      	mov	r0, r6
 801a338:	b003      	add	sp, #12
 801a33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a33e:	6812      	ldr	r2, [r2, #0]
 801a340:	3b04      	subs	r3, #4
 801a342:	2a00      	cmp	r2, #0
 801a344:	d1cc      	bne.n	801a2e0 <quorem+0x9c>
 801a346:	3c01      	subs	r4, #1
 801a348:	e7c7      	b.n	801a2da <quorem+0x96>
 801a34a:	6812      	ldr	r2, [r2, #0]
 801a34c:	3b04      	subs	r3, #4
 801a34e:	2a00      	cmp	r2, #0
 801a350:	d1f0      	bne.n	801a334 <quorem+0xf0>
 801a352:	3c01      	subs	r4, #1
 801a354:	e7eb      	b.n	801a32e <quorem+0xea>
 801a356:	2000      	movs	r0, #0
 801a358:	e7ee      	b.n	801a338 <quorem+0xf4>
 801a35a:	0000      	movs	r0, r0
 801a35c:	0000      	movs	r0, r0
	...

0801a360 <_dtoa_r>:
 801a360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a364:	ed2d 8b02 	vpush	{d8}
 801a368:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a36a:	b091      	sub	sp, #68	; 0x44
 801a36c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a370:	ec59 8b10 	vmov	r8, r9, d0
 801a374:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801a376:	9106      	str	r1, [sp, #24]
 801a378:	4606      	mov	r6, r0
 801a37a:	9208      	str	r2, [sp, #32]
 801a37c:	930c      	str	r3, [sp, #48]	; 0x30
 801a37e:	b975      	cbnz	r5, 801a39e <_dtoa_r+0x3e>
 801a380:	2010      	movs	r0, #16
 801a382:	f000 fe6b 	bl	801b05c <malloc>
 801a386:	4602      	mov	r2, r0
 801a388:	6270      	str	r0, [r6, #36]	; 0x24
 801a38a:	b920      	cbnz	r0, 801a396 <_dtoa_r+0x36>
 801a38c:	4baa      	ldr	r3, [pc, #680]	; (801a638 <_dtoa_r+0x2d8>)
 801a38e:	21ea      	movs	r1, #234	; 0xea
 801a390:	48aa      	ldr	r0, [pc, #680]	; (801a63c <_dtoa_r+0x2dc>)
 801a392:	f7ff ff39 	bl	801a208 <__assert_func>
 801a396:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a39a:	6005      	str	r5, [r0, #0]
 801a39c:	60c5      	str	r5, [r0, #12]
 801a39e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801a3a0:	6819      	ldr	r1, [r3, #0]
 801a3a2:	b151      	cbz	r1, 801a3ba <_dtoa_r+0x5a>
 801a3a4:	685a      	ldr	r2, [r3, #4]
 801a3a6:	604a      	str	r2, [r1, #4]
 801a3a8:	2301      	movs	r3, #1
 801a3aa:	4093      	lsls	r3, r2
 801a3ac:	608b      	str	r3, [r1, #8]
 801a3ae:	4630      	mov	r0, r6
 801a3b0:	f000 fe9c 	bl	801b0ec <_Bfree>
 801a3b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801a3b6:	2200      	movs	r2, #0
 801a3b8:	601a      	str	r2, [r3, #0]
 801a3ba:	f1b9 0300 	subs.w	r3, r9, #0
 801a3be:	bfbb      	ittet	lt
 801a3c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a3c4:	9303      	strlt	r3, [sp, #12]
 801a3c6:	2300      	movge	r3, #0
 801a3c8:	2201      	movlt	r2, #1
 801a3ca:	bfac      	ite	ge
 801a3cc:	6023      	strge	r3, [r4, #0]
 801a3ce:	6022      	strlt	r2, [r4, #0]
 801a3d0:	4b9b      	ldr	r3, [pc, #620]	; (801a640 <_dtoa_r+0x2e0>)
 801a3d2:	9c03      	ldr	r4, [sp, #12]
 801a3d4:	43a3      	bics	r3, r4
 801a3d6:	d11c      	bne.n	801a412 <_dtoa_r+0xb2>
 801a3d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a3da:	f242 730f 	movw	r3, #9999	; 0x270f
 801a3de:	6013      	str	r3, [r2, #0]
 801a3e0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801a3e4:	ea53 0308 	orrs.w	r3, r3, r8
 801a3e8:	f000 84fd 	beq.w	801ade6 <_dtoa_r+0xa86>
 801a3ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a3ee:	b963      	cbnz	r3, 801a40a <_dtoa_r+0xaa>
 801a3f0:	4b94      	ldr	r3, [pc, #592]	; (801a644 <_dtoa_r+0x2e4>)
 801a3f2:	e01f      	b.n	801a434 <_dtoa_r+0xd4>
 801a3f4:	4b94      	ldr	r3, [pc, #592]	; (801a648 <_dtoa_r+0x2e8>)
 801a3f6:	9301      	str	r3, [sp, #4]
 801a3f8:	3308      	adds	r3, #8
 801a3fa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a3fc:	6013      	str	r3, [r2, #0]
 801a3fe:	9801      	ldr	r0, [sp, #4]
 801a400:	b011      	add	sp, #68	; 0x44
 801a402:	ecbd 8b02 	vpop	{d8}
 801a406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a40a:	4b8e      	ldr	r3, [pc, #568]	; (801a644 <_dtoa_r+0x2e4>)
 801a40c:	9301      	str	r3, [sp, #4]
 801a40e:	3303      	adds	r3, #3
 801a410:	e7f3      	b.n	801a3fa <_dtoa_r+0x9a>
 801a412:	ed9d 8b02 	vldr	d8, [sp, #8]
 801a416:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a41e:	d10b      	bne.n	801a438 <_dtoa_r+0xd8>
 801a420:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a422:	2301      	movs	r3, #1
 801a424:	6013      	str	r3, [r2, #0]
 801a426:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a428:	2b00      	cmp	r3, #0
 801a42a:	f000 84d9 	beq.w	801ade0 <_dtoa_r+0xa80>
 801a42e:	4887      	ldr	r0, [pc, #540]	; (801a64c <_dtoa_r+0x2ec>)
 801a430:	6018      	str	r0, [r3, #0]
 801a432:	1e43      	subs	r3, r0, #1
 801a434:	9301      	str	r3, [sp, #4]
 801a436:	e7e2      	b.n	801a3fe <_dtoa_r+0x9e>
 801a438:	a90f      	add	r1, sp, #60	; 0x3c
 801a43a:	aa0e      	add	r2, sp, #56	; 0x38
 801a43c:	4630      	mov	r0, r6
 801a43e:	eeb0 0b48 	vmov.f64	d0, d8
 801a442:	f001 f93b 	bl	801b6bc <__d2b>
 801a446:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801a44a:	4605      	mov	r5, r0
 801a44c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801a44e:	2900      	cmp	r1, #0
 801a450:	d046      	beq.n	801a4e0 <_dtoa_r+0x180>
 801a452:	ee18 4a90 	vmov	r4, s17
 801a456:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801a45a:	ec53 2b18 	vmov	r2, r3, d8
 801a45e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801a462:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a466:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801a46a:	2400      	movs	r4, #0
 801a46c:	ec43 2b16 	vmov	d6, r2, r3
 801a470:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801a474:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801a620 <_dtoa_r+0x2c0>
 801a478:	ee36 7b47 	vsub.f64	d7, d6, d7
 801a47c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 801a628 <_dtoa_r+0x2c8>
 801a480:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a484:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801a630 <_dtoa_r+0x2d0>
 801a488:	ee07 1a90 	vmov	s15, r1
 801a48c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801a490:	eeb0 7b46 	vmov.f64	d7, d6
 801a494:	eea4 7b05 	vfma.f64	d7, d4, d5
 801a498:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801a49c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801a4a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4a4:	ee16 ba90 	vmov	fp, s13
 801a4a8:	940a      	str	r4, [sp, #40]	; 0x28
 801a4aa:	d508      	bpl.n	801a4be <_dtoa_r+0x15e>
 801a4ac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a4b0:	eeb4 6b47 	vcmp.f64	d6, d7
 801a4b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4b8:	bf18      	it	ne
 801a4ba:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 801a4be:	f1bb 0f16 	cmp.w	fp, #22
 801a4c2:	d82f      	bhi.n	801a524 <_dtoa_r+0x1c4>
 801a4c4:	4b62      	ldr	r3, [pc, #392]	; (801a650 <_dtoa_r+0x2f0>)
 801a4c6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a4ca:	ed93 7b00 	vldr	d7, [r3]
 801a4ce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4d6:	d501      	bpl.n	801a4dc <_dtoa_r+0x17c>
 801a4d8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a4dc:	2300      	movs	r3, #0
 801a4de:	e022      	b.n	801a526 <_dtoa_r+0x1c6>
 801a4e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801a4e2:	4401      	add	r1, r0
 801a4e4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801a4e8:	2b20      	cmp	r3, #32
 801a4ea:	bfc1      	itttt	gt
 801a4ec:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801a4f0:	fa04 f303 	lslgt.w	r3, r4, r3
 801a4f4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801a4f8:	fa28 f804 	lsrgt.w	r8, r8, r4
 801a4fc:	bfd6      	itet	le
 801a4fe:	f1c3 0320 	rsble	r3, r3, #32
 801a502:	ea43 0808 	orrgt.w	r8, r3, r8
 801a506:	fa08 f803 	lslle.w	r8, r8, r3
 801a50a:	ee07 8a90 	vmov	s15, r8
 801a50e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a512:	3901      	subs	r1, #1
 801a514:	ee17 4a90 	vmov	r4, s15
 801a518:	ec53 2b17 	vmov	r2, r3, d7
 801a51c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 801a520:	2401      	movs	r4, #1
 801a522:	e7a3      	b.n	801a46c <_dtoa_r+0x10c>
 801a524:	2301      	movs	r3, #1
 801a526:	930b      	str	r3, [sp, #44]	; 0x2c
 801a528:	1a43      	subs	r3, r0, r1
 801a52a:	1e5a      	subs	r2, r3, #1
 801a52c:	bf45      	ittet	mi
 801a52e:	f1c3 0301 	rsbmi	r3, r3, #1
 801a532:	9304      	strmi	r3, [sp, #16]
 801a534:	2300      	movpl	r3, #0
 801a536:	2300      	movmi	r3, #0
 801a538:	9205      	str	r2, [sp, #20]
 801a53a:	bf54      	ite	pl
 801a53c:	9304      	strpl	r3, [sp, #16]
 801a53e:	9305      	strmi	r3, [sp, #20]
 801a540:	f1bb 0f00 	cmp.w	fp, #0
 801a544:	db18      	blt.n	801a578 <_dtoa_r+0x218>
 801a546:	9b05      	ldr	r3, [sp, #20]
 801a548:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801a54c:	445b      	add	r3, fp
 801a54e:	9305      	str	r3, [sp, #20]
 801a550:	2300      	movs	r3, #0
 801a552:	9a06      	ldr	r2, [sp, #24]
 801a554:	2a09      	cmp	r2, #9
 801a556:	d849      	bhi.n	801a5ec <_dtoa_r+0x28c>
 801a558:	2a05      	cmp	r2, #5
 801a55a:	bfc4      	itt	gt
 801a55c:	3a04      	subgt	r2, #4
 801a55e:	9206      	strgt	r2, [sp, #24]
 801a560:	9a06      	ldr	r2, [sp, #24]
 801a562:	f1a2 0202 	sub.w	r2, r2, #2
 801a566:	bfcc      	ite	gt
 801a568:	2400      	movgt	r4, #0
 801a56a:	2401      	movle	r4, #1
 801a56c:	2a03      	cmp	r2, #3
 801a56e:	d848      	bhi.n	801a602 <_dtoa_r+0x2a2>
 801a570:	e8df f002 	tbb	[pc, r2]
 801a574:	3a2c2e0b 	.word	0x3a2c2e0b
 801a578:	9b04      	ldr	r3, [sp, #16]
 801a57a:	2200      	movs	r2, #0
 801a57c:	eba3 030b 	sub.w	r3, r3, fp
 801a580:	9304      	str	r3, [sp, #16]
 801a582:	9209      	str	r2, [sp, #36]	; 0x24
 801a584:	f1cb 0300 	rsb	r3, fp, #0
 801a588:	e7e3      	b.n	801a552 <_dtoa_r+0x1f2>
 801a58a:	2200      	movs	r2, #0
 801a58c:	9207      	str	r2, [sp, #28]
 801a58e:	9a08      	ldr	r2, [sp, #32]
 801a590:	2a00      	cmp	r2, #0
 801a592:	dc39      	bgt.n	801a608 <_dtoa_r+0x2a8>
 801a594:	f04f 0a01 	mov.w	sl, #1
 801a598:	46d1      	mov	r9, sl
 801a59a:	4652      	mov	r2, sl
 801a59c:	f8cd a020 	str.w	sl, [sp, #32]
 801a5a0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801a5a2:	2100      	movs	r1, #0
 801a5a4:	6079      	str	r1, [r7, #4]
 801a5a6:	2004      	movs	r0, #4
 801a5a8:	f100 0c14 	add.w	ip, r0, #20
 801a5ac:	4594      	cmp	ip, r2
 801a5ae:	6879      	ldr	r1, [r7, #4]
 801a5b0:	d92f      	bls.n	801a612 <_dtoa_r+0x2b2>
 801a5b2:	4630      	mov	r0, r6
 801a5b4:	930d      	str	r3, [sp, #52]	; 0x34
 801a5b6:	f000 fd59 	bl	801b06c <_Balloc>
 801a5ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a5bc:	9001      	str	r0, [sp, #4]
 801a5be:	4602      	mov	r2, r0
 801a5c0:	2800      	cmp	r0, #0
 801a5c2:	d149      	bne.n	801a658 <_dtoa_r+0x2f8>
 801a5c4:	4b23      	ldr	r3, [pc, #140]	; (801a654 <_dtoa_r+0x2f4>)
 801a5c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801a5ca:	e6e1      	b.n	801a390 <_dtoa_r+0x30>
 801a5cc:	2201      	movs	r2, #1
 801a5ce:	e7dd      	b.n	801a58c <_dtoa_r+0x22c>
 801a5d0:	2200      	movs	r2, #0
 801a5d2:	9207      	str	r2, [sp, #28]
 801a5d4:	9a08      	ldr	r2, [sp, #32]
 801a5d6:	eb0b 0a02 	add.w	sl, fp, r2
 801a5da:	f10a 0901 	add.w	r9, sl, #1
 801a5de:	464a      	mov	r2, r9
 801a5e0:	2a01      	cmp	r2, #1
 801a5e2:	bfb8      	it	lt
 801a5e4:	2201      	movlt	r2, #1
 801a5e6:	e7db      	b.n	801a5a0 <_dtoa_r+0x240>
 801a5e8:	2201      	movs	r2, #1
 801a5ea:	e7f2      	b.n	801a5d2 <_dtoa_r+0x272>
 801a5ec:	2401      	movs	r4, #1
 801a5ee:	2200      	movs	r2, #0
 801a5f0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801a5f4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801a5f8:	2100      	movs	r1, #0
 801a5fa:	46d1      	mov	r9, sl
 801a5fc:	2212      	movs	r2, #18
 801a5fe:	9108      	str	r1, [sp, #32]
 801a600:	e7ce      	b.n	801a5a0 <_dtoa_r+0x240>
 801a602:	2201      	movs	r2, #1
 801a604:	9207      	str	r2, [sp, #28]
 801a606:	e7f5      	b.n	801a5f4 <_dtoa_r+0x294>
 801a608:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a60c:	46d1      	mov	r9, sl
 801a60e:	4652      	mov	r2, sl
 801a610:	e7c6      	b.n	801a5a0 <_dtoa_r+0x240>
 801a612:	3101      	adds	r1, #1
 801a614:	6079      	str	r1, [r7, #4]
 801a616:	0040      	lsls	r0, r0, #1
 801a618:	e7c6      	b.n	801a5a8 <_dtoa_r+0x248>
 801a61a:	bf00      	nop
 801a61c:	f3af 8000 	nop.w
 801a620:	636f4361 	.word	0x636f4361
 801a624:	3fd287a7 	.word	0x3fd287a7
 801a628:	8b60c8b3 	.word	0x8b60c8b3
 801a62c:	3fc68a28 	.word	0x3fc68a28
 801a630:	509f79fb 	.word	0x509f79fb
 801a634:	3fd34413 	.word	0x3fd34413
 801a638:	080296b0 	.word	0x080296b0
 801a63c:	0802976b 	.word	0x0802976b
 801a640:	7ff00000 	.word	0x7ff00000
 801a644:	08029767 	.word	0x08029767
 801a648:	0802975e 	.word	0x0802975e
 801a64c:	0802968d 	.word	0x0802968d
 801a650:	080298c0 	.word	0x080298c0
 801a654:	080297c6 	.word	0x080297c6
 801a658:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801a65a:	9901      	ldr	r1, [sp, #4]
 801a65c:	6011      	str	r1, [r2, #0]
 801a65e:	f1b9 0f0e 	cmp.w	r9, #14
 801a662:	d86c      	bhi.n	801a73e <_dtoa_r+0x3de>
 801a664:	2c00      	cmp	r4, #0
 801a666:	d06a      	beq.n	801a73e <_dtoa_r+0x3de>
 801a668:	f1bb 0f00 	cmp.w	fp, #0
 801a66c:	f340 80a0 	ble.w	801a7b0 <_dtoa_r+0x450>
 801a670:	49c1      	ldr	r1, [pc, #772]	; (801a978 <_dtoa_r+0x618>)
 801a672:	f00b 020f 	and.w	r2, fp, #15
 801a676:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801a67a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801a67e:	ed92 7b00 	vldr	d7, [r2]
 801a682:	ea4f 112b 	mov.w	r1, fp, asr #4
 801a686:	f000 8087 	beq.w	801a798 <_dtoa_r+0x438>
 801a68a:	4abc      	ldr	r2, [pc, #752]	; (801a97c <_dtoa_r+0x61c>)
 801a68c:	ed92 6b08 	vldr	d6, [r2, #32]
 801a690:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801a694:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a698:	f001 010f 	and.w	r1, r1, #15
 801a69c:	2203      	movs	r2, #3
 801a69e:	48b7      	ldr	r0, [pc, #732]	; (801a97c <_dtoa_r+0x61c>)
 801a6a0:	2900      	cmp	r1, #0
 801a6a2:	d17b      	bne.n	801a79c <_dtoa_r+0x43c>
 801a6a4:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a6a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a6ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a6b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a6b2:	2900      	cmp	r1, #0
 801a6b4:	f000 80a2 	beq.w	801a7fc <_dtoa_r+0x49c>
 801a6b8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a6bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a6c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6c8:	f140 8098 	bpl.w	801a7fc <_dtoa_r+0x49c>
 801a6cc:	f1b9 0f00 	cmp.w	r9, #0
 801a6d0:	f000 8094 	beq.w	801a7fc <_dtoa_r+0x49c>
 801a6d4:	f1ba 0f00 	cmp.w	sl, #0
 801a6d8:	dd2f      	ble.n	801a73a <_dtoa_r+0x3da>
 801a6da:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801a6de:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a6e2:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a6e6:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801a6ea:	3201      	adds	r2, #1
 801a6ec:	4650      	mov	r0, sl
 801a6ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a6f2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801a6f6:	ee07 2a90 	vmov	s15, r2
 801a6fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a6fe:	eea7 5b06 	vfma.f64	d5, d7, d6
 801a702:	ee15 4a90 	vmov	r4, s11
 801a706:	ec52 1b15 	vmov	r1, r2, d5
 801a70a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801a70e:	2800      	cmp	r0, #0
 801a710:	d177      	bne.n	801a802 <_dtoa_r+0x4a2>
 801a712:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a716:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a71a:	ec42 1b17 	vmov	d7, r1, r2
 801a71e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a726:	f300 8263 	bgt.w	801abf0 <_dtoa_r+0x890>
 801a72a:	eeb1 7b47 	vneg.f64	d7, d7
 801a72e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a736:	f100 8258 	bmi.w	801abea <_dtoa_r+0x88a>
 801a73a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a73e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a740:	2a00      	cmp	r2, #0
 801a742:	f2c0 811d 	blt.w	801a980 <_dtoa_r+0x620>
 801a746:	f1bb 0f0e 	cmp.w	fp, #14
 801a74a:	f300 8119 	bgt.w	801a980 <_dtoa_r+0x620>
 801a74e:	4b8a      	ldr	r3, [pc, #552]	; (801a978 <_dtoa_r+0x618>)
 801a750:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a754:	ed93 6b00 	vldr	d6, [r3]
 801a758:	9b08      	ldr	r3, [sp, #32]
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	f280 80b7 	bge.w	801a8ce <_dtoa_r+0x56e>
 801a760:	f1b9 0f00 	cmp.w	r9, #0
 801a764:	f300 80b3 	bgt.w	801a8ce <_dtoa_r+0x56e>
 801a768:	f040 823f 	bne.w	801abea <_dtoa_r+0x88a>
 801a76c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a770:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a774:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a778:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a780:	464c      	mov	r4, r9
 801a782:	464f      	mov	r7, r9
 801a784:	f280 8215 	bge.w	801abb2 <_dtoa_r+0x852>
 801a788:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a78c:	2331      	movs	r3, #49	; 0x31
 801a78e:	f808 3b01 	strb.w	r3, [r8], #1
 801a792:	f10b 0b01 	add.w	fp, fp, #1
 801a796:	e211      	b.n	801abbc <_dtoa_r+0x85c>
 801a798:	2202      	movs	r2, #2
 801a79a:	e780      	b.n	801a69e <_dtoa_r+0x33e>
 801a79c:	07cc      	lsls	r4, r1, #31
 801a79e:	d504      	bpl.n	801a7aa <_dtoa_r+0x44a>
 801a7a0:	ed90 6b00 	vldr	d6, [r0]
 801a7a4:	3201      	adds	r2, #1
 801a7a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a7aa:	1049      	asrs	r1, r1, #1
 801a7ac:	3008      	adds	r0, #8
 801a7ae:	e777      	b.n	801a6a0 <_dtoa_r+0x340>
 801a7b0:	d022      	beq.n	801a7f8 <_dtoa_r+0x498>
 801a7b2:	f1cb 0100 	rsb	r1, fp, #0
 801a7b6:	4a70      	ldr	r2, [pc, #448]	; (801a978 <_dtoa_r+0x618>)
 801a7b8:	f001 000f 	and.w	r0, r1, #15
 801a7bc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801a7c0:	ed92 7b00 	vldr	d7, [r2]
 801a7c4:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a7c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a7cc:	486b      	ldr	r0, [pc, #428]	; (801a97c <_dtoa_r+0x61c>)
 801a7ce:	1109      	asrs	r1, r1, #4
 801a7d0:	2400      	movs	r4, #0
 801a7d2:	2202      	movs	r2, #2
 801a7d4:	b929      	cbnz	r1, 801a7e2 <_dtoa_r+0x482>
 801a7d6:	2c00      	cmp	r4, #0
 801a7d8:	f43f af6a 	beq.w	801a6b0 <_dtoa_r+0x350>
 801a7dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a7e0:	e766      	b.n	801a6b0 <_dtoa_r+0x350>
 801a7e2:	07cf      	lsls	r7, r1, #31
 801a7e4:	d505      	bpl.n	801a7f2 <_dtoa_r+0x492>
 801a7e6:	ed90 6b00 	vldr	d6, [r0]
 801a7ea:	3201      	adds	r2, #1
 801a7ec:	2401      	movs	r4, #1
 801a7ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a7f2:	1049      	asrs	r1, r1, #1
 801a7f4:	3008      	adds	r0, #8
 801a7f6:	e7ed      	b.n	801a7d4 <_dtoa_r+0x474>
 801a7f8:	2202      	movs	r2, #2
 801a7fa:	e759      	b.n	801a6b0 <_dtoa_r+0x350>
 801a7fc:	465f      	mov	r7, fp
 801a7fe:	4648      	mov	r0, r9
 801a800:	e775      	b.n	801a6ee <_dtoa_r+0x38e>
 801a802:	ec42 1b17 	vmov	d7, r1, r2
 801a806:	4a5c      	ldr	r2, [pc, #368]	; (801a978 <_dtoa_r+0x618>)
 801a808:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801a80c:	ed12 4b02 	vldr	d4, [r2, #-8]
 801a810:	9a01      	ldr	r2, [sp, #4]
 801a812:	1814      	adds	r4, r2, r0
 801a814:	9a07      	ldr	r2, [sp, #28]
 801a816:	b352      	cbz	r2, 801a86e <_dtoa_r+0x50e>
 801a818:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801a81c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801a820:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a824:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a828:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a82c:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a830:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a834:	ee14 2a90 	vmov	r2, s9
 801a838:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a83c:	3230      	adds	r2, #48	; 0x30
 801a83e:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a842:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a84a:	f808 2b01 	strb.w	r2, [r8], #1
 801a84e:	d439      	bmi.n	801a8c4 <_dtoa_r+0x564>
 801a850:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a854:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a85c:	d472      	bmi.n	801a944 <_dtoa_r+0x5e4>
 801a85e:	45a0      	cmp	r8, r4
 801a860:	f43f af6b 	beq.w	801a73a <_dtoa_r+0x3da>
 801a864:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a868:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a86c:	e7e0      	b.n	801a830 <_dtoa_r+0x4d0>
 801a86e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a872:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a876:	4621      	mov	r1, r4
 801a878:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a87c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a880:	ee14 2a90 	vmov	r2, s9
 801a884:	3230      	adds	r2, #48	; 0x30
 801a886:	f808 2b01 	strb.w	r2, [r8], #1
 801a88a:	45a0      	cmp	r8, r4
 801a88c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a890:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a894:	d118      	bne.n	801a8c8 <_dtoa_r+0x568>
 801a896:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801a89a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a89e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8a6:	dc4d      	bgt.n	801a944 <_dtoa_r+0x5e4>
 801a8a8:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a8ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8b4:	f57f af41 	bpl.w	801a73a <_dtoa_r+0x3da>
 801a8b8:	4688      	mov	r8, r1
 801a8ba:	3901      	subs	r1, #1
 801a8bc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801a8c0:	2b30      	cmp	r3, #48	; 0x30
 801a8c2:	d0f9      	beq.n	801a8b8 <_dtoa_r+0x558>
 801a8c4:	46bb      	mov	fp, r7
 801a8c6:	e02a      	b.n	801a91e <_dtoa_r+0x5be>
 801a8c8:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a8cc:	e7d6      	b.n	801a87c <_dtoa_r+0x51c>
 801a8ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a8d2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801a8d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a8da:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801a8de:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801a8e2:	ee15 3a10 	vmov	r3, s10
 801a8e6:	3330      	adds	r3, #48	; 0x30
 801a8e8:	f808 3b01 	strb.w	r3, [r8], #1
 801a8ec:	9b01      	ldr	r3, [sp, #4]
 801a8ee:	eba8 0303 	sub.w	r3, r8, r3
 801a8f2:	4599      	cmp	r9, r3
 801a8f4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801a8f8:	eea3 7b46 	vfms.f64	d7, d3, d6
 801a8fc:	d133      	bne.n	801a966 <_dtoa_r+0x606>
 801a8fe:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a902:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a90a:	dc1a      	bgt.n	801a942 <_dtoa_r+0x5e2>
 801a90c:	eeb4 7b46 	vcmp.f64	d7, d6
 801a910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a914:	d103      	bne.n	801a91e <_dtoa_r+0x5be>
 801a916:	ee15 3a10 	vmov	r3, s10
 801a91a:	07d9      	lsls	r1, r3, #31
 801a91c:	d411      	bmi.n	801a942 <_dtoa_r+0x5e2>
 801a91e:	4629      	mov	r1, r5
 801a920:	4630      	mov	r0, r6
 801a922:	f000 fbe3 	bl	801b0ec <_Bfree>
 801a926:	2300      	movs	r3, #0
 801a928:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a92a:	f888 3000 	strb.w	r3, [r8]
 801a92e:	f10b 0301 	add.w	r3, fp, #1
 801a932:	6013      	str	r3, [r2, #0]
 801a934:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a936:	2b00      	cmp	r3, #0
 801a938:	f43f ad61 	beq.w	801a3fe <_dtoa_r+0x9e>
 801a93c:	f8c3 8000 	str.w	r8, [r3]
 801a940:	e55d      	b.n	801a3fe <_dtoa_r+0x9e>
 801a942:	465f      	mov	r7, fp
 801a944:	4643      	mov	r3, r8
 801a946:	4698      	mov	r8, r3
 801a948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a94c:	2a39      	cmp	r2, #57	; 0x39
 801a94e:	d106      	bne.n	801a95e <_dtoa_r+0x5fe>
 801a950:	9a01      	ldr	r2, [sp, #4]
 801a952:	429a      	cmp	r2, r3
 801a954:	d1f7      	bne.n	801a946 <_dtoa_r+0x5e6>
 801a956:	9901      	ldr	r1, [sp, #4]
 801a958:	2230      	movs	r2, #48	; 0x30
 801a95a:	3701      	adds	r7, #1
 801a95c:	700a      	strb	r2, [r1, #0]
 801a95e:	781a      	ldrb	r2, [r3, #0]
 801a960:	3201      	adds	r2, #1
 801a962:	701a      	strb	r2, [r3, #0]
 801a964:	e7ae      	b.n	801a8c4 <_dtoa_r+0x564>
 801a966:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a96a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a96e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a972:	d1b2      	bne.n	801a8da <_dtoa_r+0x57a>
 801a974:	e7d3      	b.n	801a91e <_dtoa_r+0x5be>
 801a976:	bf00      	nop
 801a978:	080298c0 	.word	0x080298c0
 801a97c:	08029898 	.word	0x08029898
 801a980:	9907      	ldr	r1, [sp, #28]
 801a982:	2900      	cmp	r1, #0
 801a984:	f000 80d0 	beq.w	801ab28 <_dtoa_r+0x7c8>
 801a988:	9906      	ldr	r1, [sp, #24]
 801a98a:	2901      	cmp	r1, #1
 801a98c:	f300 80b4 	bgt.w	801aaf8 <_dtoa_r+0x798>
 801a990:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a992:	2900      	cmp	r1, #0
 801a994:	f000 80ac 	beq.w	801aaf0 <_dtoa_r+0x790>
 801a998:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a99c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a9a0:	461c      	mov	r4, r3
 801a9a2:	930a      	str	r3, [sp, #40]	; 0x28
 801a9a4:	9b04      	ldr	r3, [sp, #16]
 801a9a6:	4413      	add	r3, r2
 801a9a8:	9304      	str	r3, [sp, #16]
 801a9aa:	9b05      	ldr	r3, [sp, #20]
 801a9ac:	2101      	movs	r1, #1
 801a9ae:	4413      	add	r3, r2
 801a9b0:	4630      	mov	r0, r6
 801a9b2:	9305      	str	r3, [sp, #20]
 801a9b4:	f000 fc52 	bl	801b25c <__i2b>
 801a9b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a9ba:	4607      	mov	r7, r0
 801a9bc:	f1b8 0f00 	cmp.w	r8, #0
 801a9c0:	dd0d      	ble.n	801a9de <_dtoa_r+0x67e>
 801a9c2:	9a05      	ldr	r2, [sp, #20]
 801a9c4:	2a00      	cmp	r2, #0
 801a9c6:	dd0a      	ble.n	801a9de <_dtoa_r+0x67e>
 801a9c8:	4542      	cmp	r2, r8
 801a9ca:	9904      	ldr	r1, [sp, #16]
 801a9cc:	bfa8      	it	ge
 801a9ce:	4642      	movge	r2, r8
 801a9d0:	1a89      	subs	r1, r1, r2
 801a9d2:	9104      	str	r1, [sp, #16]
 801a9d4:	9905      	ldr	r1, [sp, #20]
 801a9d6:	eba8 0802 	sub.w	r8, r8, r2
 801a9da:	1a8a      	subs	r2, r1, r2
 801a9dc:	9205      	str	r2, [sp, #20]
 801a9de:	b303      	cbz	r3, 801aa22 <_dtoa_r+0x6c2>
 801a9e0:	9a07      	ldr	r2, [sp, #28]
 801a9e2:	2a00      	cmp	r2, #0
 801a9e4:	f000 80a5 	beq.w	801ab32 <_dtoa_r+0x7d2>
 801a9e8:	2c00      	cmp	r4, #0
 801a9ea:	dd13      	ble.n	801aa14 <_dtoa_r+0x6b4>
 801a9ec:	4639      	mov	r1, r7
 801a9ee:	4622      	mov	r2, r4
 801a9f0:	4630      	mov	r0, r6
 801a9f2:	930d      	str	r3, [sp, #52]	; 0x34
 801a9f4:	f000 fcf2 	bl	801b3dc <__pow5mult>
 801a9f8:	462a      	mov	r2, r5
 801a9fa:	4601      	mov	r1, r0
 801a9fc:	4607      	mov	r7, r0
 801a9fe:	4630      	mov	r0, r6
 801aa00:	f000 fc42 	bl	801b288 <__multiply>
 801aa04:	4629      	mov	r1, r5
 801aa06:	900a      	str	r0, [sp, #40]	; 0x28
 801aa08:	4630      	mov	r0, r6
 801aa0a:	f000 fb6f 	bl	801b0ec <_Bfree>
 801aa0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aa10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aa12:	4615      	mov	r5, r2
 801aa14:	1b1a      	subs	r2, r3, r4
 801aa16:	d004      	beq.n	801aa22 <_dtoa_r+0x6c2>
 801aa18:	4629      	mov	r1, r5
 801aa1a:	4630      	mov	r0, r6
 801aa1c:	f000 fcde 	bl	801b3dc <__pow5mult>
 801aa20:	4605      	mov	r5, r0
 801aa22:	2101      	movs	r1, #1
 801aa24:	4630      	mov	r0, r6
 801aa26:	f000 fc19 	bl	801b25c <__i2b>
 801aa2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa2c:	2b00      	cmp	r3, #0
 801aa2e:	4604      	mov	r4, r0
 801aa30:	f340 8081 	ble.w	801ab36 <_dtoa_r+0x7d6>
 801aa34:	461a      	mov	r2, r3
 801aa36:	4601      	mov	r1, r0
 801aa38:	4630      	mov	r0, r6
 801aa3a:	f000 fccf 	bl	801b3dc <__pow5mult>
 801aa3e:	9b06      	ldr	r3, [sp, #24]
 801aa40:	2b01      	cmp	r3, #1
 801aa42:	4604      	mov	r4, r0
 801aa44:	dd7a      	ble.n	801ab3c <_dtoa_r+0x7dc>
 801aa46:	2300      	movs	r3, #0
 801aa48:	930a      	str	r3, [sp, #40]	; 0x28
 801aa4a:	6922      	ldr	r2, [r4, #16]
 801aa4c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801aa50:	6910      	ldr	r0, [r2, #16]
 801aa52:	f000 fbb3 	bl	801b1bc <__hi0bits>
 801aa56:	f1c0 0020 	rsb	r0, r0, #32
 801aa5a:	9b05      	ldr	r3, [sp, #20]
 801aa5c:	4418      	add	r0, r3
 801aa5e:	f010 001f 	ands.w	r0, r0, #31
 801aa62:	f000 808c 	beq.w	801ab7e <_dtoa_r+0x81e>
 801aa66:	f1c0 0220 	rsb	r2, r0, #32
 801aa6a:	2a04      	cmp	r2, #4
 801aa6c:	f340 8085 	ble.w	801ab7a <_dtoa_r+0x81a>
 801aa70:	f1c0 001c 	rsb	r0, r0, #28
 801aa74:	9b04      	ldr	r3, [sp, #16]
 801aa76:	4403      	add	r3, r0
 801aa78:	9304      	str	r3, [sp, #16]
 801aa7a:	9b05      	ldr	r3, [sp, #20]
 801aa7c:	4403      	add	r3, r0
 801aa7e:	4480      	add	r8, r0
 801aa80:	9305      	str	r3, [sp, #20]
 801aa82:	9b04      	ldr	r3, [sp, #16]
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	dd05      	ble.n	801aa94 <_dtoa_r+0x734>
 801aa88:	4629      	mov	r1, r5
 801aa8a:	461a      	mov	r2, r3
 801aa8c:	4630      	mov	r0, r6
 801aa8e:	f000 fcff 	bl	801b490 <__lshift>
 801aa92:	4605      	mov	r5, r0
 801aa94:	9b05      	ldr	r3, [sp, #20]
 801aa96:	2b00      	cmp	r3, #0
 801aa98:	dd05      	ble.n	801aaa6 <_dtoa_r+0x746>
 801aa9a:	4621      	mov	r1, r4
 801aa9c:	461a      	mov	r2, r3
 801aa9e:	4630      	mov	r0, r6
 801aaa0:	f000 fcf6 	bl	801b490 <__lshift>
 801aaa4:	4604      	mov	r4, r0
 801aaa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	d06a      	beq.n	801ab82 <_dtoa_r+0x822>
 801aaac:	4621      	mov	r1, r4
 801aaae:	4628      	mov	r0, r5
 801aab0:	f000 fd5e 	bl	801b570 <__mcmp>
 801aab4:	2800      	cmp	r0, #0
 801aab6:	da64      	bge.n	801ab82 <_dtoa_r+0x822>
 801aab8:	2300      	movs	r3, #0
 801aaba:	4629      	mov	r1, r5
 801aabc:	220a      	movs	r2, #10
 801aabe:	4630      	mov	r0, r6
 801aac0:	f000 fb36 	bl	801b130 <__multadd>
 801aac4:	9b07      	ldr	r3, [sp, #28]
 801aac6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801aaca:	4605      	mov	r5, r0
 801aacc:	2b00      	cmp	r3, #0
 801aace:	f000 8191 	beq.w	801adf4 <_dtoa_r+0xa94>
 801aad2:	4639      	mov	r1, r7
 801aad4:	2300      	movs	r3, #0
 801aad6:	220a      	movs	r2, #10
 801aad8:	4630      	mov	r0, r6
 801aada:	f000 fb29 	bl	801b130 <__multadd>
 801aade:	f1ba 0f00 	cmp.w	sl, #0
 801aae2:	4607      	mov	r7, r0
 801aae4:	f300 808d 	bgt.w	801ac02 <_dtoa_r+0x8a2>
 801aae8:	9b06      	ldr	r3, [sp, #24]
 801aaea:	2b02      	cmp	r3, #2
 801aaec:	dc50      	bgt.n	801ab90 <_dtoa_r+0x830>
 801aaee:	e088      	b.n	801ac02 <_dtoa_r+0x8a2>
 801aaf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801aaf2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801aaf6:	e751      	b.n	801a99c <_dtoa_r+0x63c>
 801aaf8:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 801aafc:	42a3      	cmp	r3, r4
 801aafe:	bfbf      	itttt	lt
 801ab00:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801ab02:	1ae3      	sublt	r3, r4, r3
 801ab04:	18d2      	addlt	r2, r2, r3
 801ab06:	9209      	strlt	r2, [sp, #36]	; 0x24
 801ab08:	bfb6      	itet	lt
 801ab0a:	4623      	movlt	r3, r4
 801ab0c:	1b1c      	subge	r4, r3, r4
 801ab0e:	2400      	movlt	r4, #0
 801ab10:	f1b9 0f00 	cmp.w	r9, #0
 801ab14:	bfb5      	itete	lt
 801ab16:	9a04      	ldrlt	r2, [sp, #16]
 801ab18:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801ab1c:	eba2 0809 	sublt.w	r8, r2, r9
 801ab20:	464a      	movge	r2, r9
 801ab22:	bfb8      	it	lt
 801ab24:	2200      	movlt	r2, #0
 801ab26:	e73c      	b.n	801a9a2 <_dtoa_r+0x642>
 801ab28:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801ab2c:	9f07      	ldr	r7, [sp, #28]
 801ab2e:	461c      	mov	r4, r3
 801ab30:	e744      	b.n	801a9bc <_dtoa_r+0x65c>
 801ab32:	461a      	mov	r2, r3
 801ab34:	e770      	b.n	801aa18 <_dtoa_r+0x6b8>
 801ab36:	9b06      	ldr	r3, [sp, #24]
 801ab38:	2b01      	cmp	r3, #1
 801ab3a:	dc18      	bgt.n	801ab6e <_dtoa_r+0x80e>
 801ab3c:	9b02      	ldr	r3, [sp, #8]
 801ab3e:	b9b3      	cbnz	r3, 801ab6e <_dtoa_r+0x80e>
 801ab40:	9b03      	ldr	r3, [sp, #12]
 801ab42:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801ab46:	b9a2      	cbnz	r2, 801ab72 <_dtoa_r+0x812>
 801ab48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801ab4c:	0d12      	lsrs	r2, r2, #20
 801ab4e:	0512      	lsls	r2, r2, #20
 801ab50:	b18a      	cbz	r2, 801ab76 <_dtoa_r+0x816>
 801ab52:	9b04      	ldr	r3, [sp, #16]
 801ab54:	3301      	adds	r3, #1
 801ab56:	9304      	str	r3, [sp, #16]
 801ab58:	9b05      	ldr	r3, [sp, #20]
 801ab5a:	3301      	adds	r3, #1
 801ab5c:	9305      	str	r3, [sp, #20]
 801ab5e:	2301      	movs	r3, #1
 801ab60:	930a      	str	r3, [sp, #40]	; 0x28
 801ab62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	f47f af70 	bne.w	801aa4a <_dtoa_r+0x6ea>
 801ab6a:	2001      	movs	r0, #1
 801ab6c:	e775      	b.n	801aa5a <_dtoa_r+0x6fa>
 801ab6e:	2300      	movs	r3, #0
 801ab70:	e7f6      	b.n	801ab60 <_dtoa_r+0x800>
 801ab72:	9b02      	ldr	r3, [sp, #8]
 801ab74:	e7f4      	b.n	801ab60 <_dtoa_r+0x800>
 801ab76:	920a      	str	r2, [sp, #40]	; 0x28
 801ab78:	e7f3      	b.n	801ab62 <_dtoa_r+0x802>
 801ab7a:	d082      	beq.n	801aa82 <_dtoa_r+0x722>
 801ab7c:	4610      	mov	r0, r2
 801ab7e:	301c      	adds	r0, #28
 801ab80:	e778      	b.n	801aa74 <_dtoa_r+0x714>
 801ab82:	f1b9 0f00 	cmp.w	r9, #0
 801ab86:	dc37      	bgt.n	801abf8 <_dtoa_r+0x898>
 801ab88:	9b06      	ldr	r3, [sp, #24]
 801ab8a:	2b02      	cmp	r3, #2
 801ab8c:	dd34      	ble.n	801abf8 <_dtoa_r+0x898>
 801ab8e:	46ca      	mov	sl, r9
 801ab90:	f1ba 0f00 	cmp.w	sl, #0
 801ab94:	d10d      	bne.n	801abb2 <_dtoa_r+0x852>
 801ab96:	4621      	mov	r1, r4
 801ab98:	4653      	mov	r3, sl
 801ab9a:	2205      	movs	r2, #5
 801ab9c:	4630      	mov	r0, r6
 801ab9e:	f000 fac7 	bl	801b130 <__multadd>
 801aba2:	4601      	mov	r1, r0
 801aba4:	4604      	mov	r4, r0
 801aba6:	4628      	mov	r0, r5
 801aba8:	f000 fce2 	bl	801b570 <__mcmp>
 801abac:	2800      	cmp	r0, #0
 801abae:	f73f adeb 	bgt.w	801a788 <_dtoa_r+0x428>
 801abb2:	9b08      	ldr	r3, [sp, #32]
 801abb4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801abb8:	ea6f 0b03 	mvn.w	fp, r3
 801abbc:	f04f 0900 	mov.w	r9, #0
 801abc0:	4621      	mov	r1, r4
 801abc2:	4630      	mov	r0, r6
 801abc4:	f000 fa92 	bl	801b0ec <_Bfree>
 801abc8:	2f00      	cmp	r7, #0
 801abca:	f43f aea8 	beq.w	801a91e <_dtoa_r+0x5be>
 801abce:	f1b9 0f00 	cmp.w	r9, #0
 801abd2:	d005      	beq.n	801abe0 <_dtoa_r+0x880>
 801abd4:	45b9      	cmp	r9, r7
 801abd6:	d003      	beq.n	801abe0 <_dtoa_r+0x880>
 801abd8:	4649      	mov	r1, r9
 801abda:	4630      	mov	r0, r6
 801abdc:	f000 fa86 	bl	801b0ec <_Bfree>
 801abe0:	4639      	mov	r1, r7
 801abe2:	4630      	mov	r0, r6
 801abe4:	f000 fa82 	bl	801b0ec <_Bfree>
 801abe8:	e699      	b.n	801a91e <_dtoa_r+0x5be>
 801abea:	2400      	movs	r4, #0
 801abec:	4627      	mov	r7, r4
 801abee:	e7e0      	b.n	801abb2 <_dtoa_r+0x852>
 801abf0:	46bb      	mov	fp, r7
 801abf2:	4604      	mov	r4, r0
 801abf4:	4607      	mov	r7, r0
 801abf6:	e5c7      	b.n	801a788 <_dtoa_r+0x428>
 801abf8:	9b07      	ldr	r3, [sp, #28]
 801abfa:	46ca      	mov	sl, r9
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	f000 8100 	beq.w	801ae02 <_dtoa_r+0xaa2>
 801ac02:	f1b8 0f00 	cmp.w	r8, #0
 801ac06:	dd05      	ble.n	801ac14 <_dtoa_r+0x8b4>
 801ac08:	4639      	mov	r1, r7
 801ac0a:	4642      	mov	r2, r8
 801ac0c:	4630      	mov	r0, r6
 801ac0e:	f000 fc3f 	bl	801b490 <__lshift>
 801ac12:	4607      	mov	r7, r0
 801ac14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d05d      	beq.n	801acd6 <_dtoa_r+0x976>
 801ac1a:	6879      	ldr	r1, [r7, #4]
 801ac1c:	4630      	mov	r0, r6
 801ac1e:	f000 fa25 	bl	801b06c <_Balloc>
 801ac22:	4680      	mov	r8, r0
 801ac24:	b928      	cbnz	r0, 801ac32 <_dtoa_r+0x8d2>
 801ac26:	4b82      	ldr	r3, [pc, #520]	; (801ae30 <_dtoa_r+0xad0>)
 801ac28:	4602      	mov	r2, r0
 801ac2a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801ac2e:	f7ff bbaf 	b.w	801a390 <_dtoa_r+0x30>
 801ac32:	693a      	ldr	r2, [r7, #16]
 801ac34:	3202      	adds	r2, #2
 801ac36:	0092      	lsls	r2, r2, #2
 801ac38:	f107 010c 	add.w	r1, r7, #12
 801ac3c:	300c      	adds	r0, #12
 801ac3e:	f7fe fdd3 	bl	80197e8 <memcpy>
 801ac42:	2201      	movs	r2, #1
 801ac44:	4641      	mov	r1, r8
 801ac46:	4630      	mov	r0, r6
 801ac48:	f000 fc22 	bl	801b490 <__lshift>
 801ac4c:	9b01      	ldr	r3, [sp, #4]
 801ac4e:	3301      	adds	r3, #1
 801ac50:	9304      	str	r3, [sp, #16]
 801ac52:	9b01      	ldr	r3, [sp, #4]
 801ac54:	4453      	add	r3, sl
 801ac56:	9308      	str	r3, [sp, #32]
 801ac58:	9b02      	ldr	r3, [sp, #8]
 801ac5a:	f003 0301 	and.w	r3, r3, #1
 801ac5e:	46b9      	mov	r9, r7
 801ac60:	9307      	str	r3, [sp, #28]
 801ac62:	4607      	mov	r7, r0
 801ac64:	9b04      	ldr	r3, [sp, #16]
 801ac66:	4621      	mov	r1, r4
 801ac68:	3b01      	subs	r3, #1
 801ac6a:	4628      	mov	r0, r5
 801ac6c:	9302      	str	r3, [sp, #8]
 801ac6e:	f7ff fae9 	bl	801a244 <quorem>
 801ac72:	4603      	mov	r3, r0
 801ac74:	3330      	adds	r3, #48	; 0x30
 801ac76:	9005      	str	r0, [sp, #20]
 801ac78:	4649      	mov	r1, r9
 801ac7a:	4628      	mov	r0, r5
 801ac7c:	9309      	str	r3, [sp, #36]	; 0x24
 801ac7e:	f000 fc77 	bl	801b570 <__mcmp>
 801ac82:	463a      	mov	r2, r7
 801ac84:	4682      	mov	sl, r0
 801ac86:	4621      	mov	r1, r4
 801ac88:	4630      	mov	r0, r6
 801ac8a:	f000 fc8d 	bl	801b5a8 <__mdiff>
 801ac8e:	68c2      	ldr	r2, [r0, #12]
 801ac90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac92:	4680      	mov	r8, r0
 801ac94:	bb0a      	cbnz	r2, 801acda <_dtoa_r+0x97a>
 801ac96:	4601      	mov	r1, r0
 801ac98:	4628      	mov	r0, r5
 801ac9a:	f000 fc69 	bl	801b570 <__mcmp>
 801ac9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aca0:	4602      	mov	r2, r0
 801aca2:	4641      	mov	r1, r8
 801aca4:	4630      	mov	r0, r6
 801aca6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801acaa:	f000 fa1f 	bl	801b0ec <_Bfree>
 801acae:	9b06      	ldr	r3, [sp, #24]
 801acb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801acb2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801acb6:	ea43 0102 	orr.w	r1, r3, r2
 801acba:	9b07      	ldr	r3, [sp, #28]
 801acbc:	430b      	orrs	r3, r1
 801acbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801acc0:	d10d      	bne.n	801acde <_dtoa_r+0x97e>
 801acc2:	2b39      	cmp	r3, #57	; 0x39
 801acc4:	d029      	beq.n	801ad1a <_dtoa_r+0x9ba>
 801acc6:	f1ba 0f00 	cmp.w	sl, #0
 801acca:	dd01      	ble.n	801acd0 <_dtoa_r+0x970>
 801accc:	9b05      	ldr	r3, [sp, #20]
 801acce:	3331      	adds	r3, #49	; 0x31
 801acd0:	9a02      	ldr	r2, [sp, #8]
 801acd2:	7013      	strb	r3, [r2, #0]
 801acd4:	e774      	b.n	801abc0 <_dtoa_r+0x860>
 801acd6:	4638      	mov	r0, r7
 801acd8:	e7b8      	b.n	801ac4c <_dtoa_r+0x8ec>
 801acda:	2201      	movs	r2, #1
 801acdc:	e7e1      	b.n	801aca2 <_dtoa_r+0x942>
 801acde:	f1ba 0f00 	cmp.w	sl, #0
 801ace2:	db06      	blt.n	801acf2 <_dtoa_r+0x992>
 801ace4:	9906      	ldr	r1, [sp, #24]
 801ace6:	ea41 0a0a 	orr.w	sl, r1, sl
 801acea:	9907      	ldr	r1, [sp, #28]
 801acec:	ea5a 0101 	orrs.w	r1, sl, r1
 801acf0:	d120      	bne.n	801ad34 <_dtoa_r+0x9d4>
 801acf2:	2a00      	cmp	r2, #0
 801acf4:	ddec      	ble.n	801acd0 <_dtoa_r+0x970>
 801acf6:	4629      	mov	r1, r5
 801acf8:	2201      	movs	r2, #1
 801acfa:	4630      	mov	r0, r6
 801acfc:	9304      	str	r3, [sp, #16]
 801acfe:	f000 fbc7 	bl	801b490 <__lshift>
 801ad02:	4621      	mov	r1, r4
 801ad04:	4605      	mov	r5, r0
 801ad06:	f000 fc33 	bl	801b570 <__mcmp>
 801ad0a:	2800      	cmp	r0, #0
 801ad0c:	9b04      	ldr	r3, [sp, #16]
 801ad0e:	dc02      	bgt.n	801ad16 <_dtoa_r+0x9b6>
 801ad10:	d1de      	bne.n	801acd0 <_dtoa_r+0x970>
 801ad12:	07da      	lsls	r2, r3, #31
 801ad14:	d5dc      	bpl.n	801acd0 <_dtoa_r+0x970>
 801ad16:	2b39      	cmp	r3, #57	; 0x39
 801ad18:	d1d8      	bne.n	801accc <_dtoa_r+0x96c>
 801ad1a:	9a02      	ldr	r2, [sp, #8]
 801ad1c:	2339      	movs	r3, #57	; 0x39
 801ad1e:	7013      	strb	r3, [r2, #0]
 801ad20:	4643      	mov	r3, r8
 801ad22:	4698      	mov	r8, r3
 801ad24:	3b01      	subs	r3, #1
 801ad26:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801ad2a:	2a39      	cmp	r2, #57	; 0x39
 801ad2c:	d051      	beq.n	801add2 <_dtoa_r+0xa72>
 801ad2e:	3201      	adds	r2, #1
 801ad30:	701a      	strb	r2, [r3, #0]
 801ad32:	e745      	b.n	801abc0 <_dtoa_r+0x860>
 801ad34:	2a00      	cmp	r2, #0
 801ad36:	dd03      	ble.n	801ad40 <_dtoa_r+0x9e0>
 801ad38:	2b39      	cmp	r3, #57	; 0x39
 801ad3a:	d0ee      	beq.n	801ad1a <_dtoa_r+0x9ba>
 801ad3c:	3301      	adds	r3, #1
 801ad3e:	e7c7      	b.n	801acd0 <_dtoa_r+0x970>
 801ad40:	9a04      	ldr	r2, [sp, #16]
 801ad42:	9908      	ldr	r1, [sp, #32]
 801ad44:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ad48:	428a      	cmp	r2, r1
 801ad4a:	d02b      	beq.n	801ada4 <_dtoa_r+0xa44>
 801ad4c:	4629      	mov	r1, r5
 801ad4e:	2300      	movs	r3, #0
 801ad50:	220a      	movs	r2, #10
 801ad52:	4630      	mov	r0, r6
 801ad54:	f000 f9ec 	bl	801b130 <__multadd>
 801ad58:	45b9      	cmp	r9, r7
 801ad5a:	4605      	mov	r5, r0
 801ad5c:	f04f 0300 	mov.w	r3, #0
 801ad60:	f04f 020a 	mov.w	r2, #10
 801ad64:	4649      	mov	r1, r9
 801ad66:	4630      	mov	r0, r6
 801ad68:	d107      	bne.n	801ad7a <_dtoa_r+0xa1a>
 801ad6a:	f000 f9e1 	bl	801b130 <__multadd>
 801ad6e:	4681      	mov	r9, r0
 801ad70:	4607      	mov	r7, r0
 801ad72:	9b04      	ldr	r3, [sp, #16]
 801ad74:	3301      	adds	r3, #1
 801ad76:	9304      	str	r3, [sp, #16]
 801ad78:	e774      	b.n	801ac64 <_dtoa_r+0x904>
 801ad7a:	f000 f9d9 	bl	801b130 <__multadd>
 801ad7e:	4639      	mov	r1, r7
 801ad80:	4681      	mov	r9, r0
 801ad82:	2300      	movs	r3, #0
 801ad84:	220a      	movs	r2, #10
 801ad86:	4630      	mov	r0, r6
 801ad88:	f000 f9d2 	bl	801b130 <__multadd>
 801ad8c:	4607      	mov	r7, r0
 801ad8e:	e7f0      	b.n	801ad72 <_dtoa_r+0xa12>
 801ad90:	f1ba 0f00 	cmp.w	sl, #0
 801ad94:	9a01      	ldr	r2, [sp, #4]
 801ad96:	bfcc      	ite	gt
 801ad98:	46d0      	movgt	r8, sl
 801ad9a:	f04f 0801 	movle.w	r8, #1
 801ad9e:	4490      	add	r8, r2
 801ada0:	f04f 0900 	mov.w	r9, #0
 801ada4:	4629      	mov	r1, r5
 801ada6:	2201      	movs	r2, #1
 801ada8:	4630      	mov	r0, r6
 801adaa:	9302      	str	r3, [sp, #8]
 801adac:	f000 fb70 	bl	801b490 <__lshift>
 801adb0:	4621      	mov	r1, r4
 801adb2:	4605      	mov	r5, r0
 801adb4:	f000 fbdc 	bl	801b570 <__mcmp>
 801adb8:	2800      	cmp	r0, #0
 801adba:	dcb1      	bgt.n	801ad20 <_dtoa_r+0x9c0>
 801adbc:	d102      	bne.n	801adc4 <_dtoa_r+0xa64>
 801adbe:	9b02      	ldr	r3, [sp, #8]
 801adc0:	07db      	lsls	r3, r3, #31
 801adc2:	d4ad      	bmi.n	801ad20 <_dtoa_r+0x9c0>
 801adc4:	4643      	mov	r3, r8
 801adc6:	4698      	mov	r8, r3
 801adc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801adcc:	2a30      	cmp	r2, #48	; 0x30
 801adce:	d0fa      	beq.n	801adc6 <_dtoa_r+0xa66>
 801add0:	e6f6      	b.n	801abc0 <_dtoa_r+0x860>
 801add2:	9a01      	ldr	r2, [sp, #4]
 801add4:	429a      	cmp	r2, r3
 801add6:	d1a4      	bne.n	801ad22 <_dtoa_r+0x9c2>
 801add8:	f10b 0b01 	add.w	fp, fp, #1
 801addc:	2331      	movs	r3, #49	; 0x31
 801adde:	e778      	b.n	801acd2 <_dtoa_r+0x972>
 801ade0:	4b14      	ldr	r3, [pc, #80]	; (801ae34 <_dtoa_r+0xad4>)
 801ade2:	f7ff bb27 	b.w	801a434 <_dtoa_r+0xd4>
 801ade6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ade8:	2b00      	cmp	r3, #0
 801adea:	f47f ab03 	bne.w	801a3f4 <_dtoa_r+0x94>
 801adee:	4b12      	ldr	r3, [pc, #72]	; (801ae38 <_dtoa_r+0xad8>)
 801adf0:	f7ff bb20 	b.w	801a434 <_dtoa_r+0xd4>
 801adf4:	f1ba 0f00 	cmp.w	sl, #0
 801adf8:	dc03      	bgt.n	801ae02 <_dtoa_r+0xaa2>
 801adfa:	9b06      	ldr	r3, [sp, #24]
 801adfc:	2b02      	cmp	r3, #2
 801adfe:	f73f aec7 	bgt.w	801ab90 <_dtoa_r+0x830>
 801ae02:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ae06:	4621      	mov	r1, r4
 801ae08:	4628      	mov	r0, r5
 801ae0a:	f7ff fa1b 	bl	801a244 <quorem>
 801ae0e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801ae12:	f808 3b01 	strb.w	r3, [r8], #1
 801ae16:	9a01      	ldr	r2, [sp, #4]
 801ae18:	eba8 0202 	sub.w	r2, r8, r2
 801ae1c:	4592      	cmp	sl, r2
 801ae1e:	ddb7      	ble.n	801ad90 <_dtoa_r+0xa30>
 801ae20:	4629      	mov	r1, r5
 801ae22:	2300      	movs	r3, #0
 801ae24:	220a      	movs	r2, #10
 801ae26:	4630      	mov	r0, r6
 801ae28:	f000 f982 	bl	801b130 <__multadd>
 801ae2c:	4605      	mov	r5, r0
 801ae2e:	e7ea      	b.n	801ae06 <_dtoa_r+0xaa6>
 801ae30:	080297c6 	.word	0x080297c6
 801ae34:	0802968c 	.word	0x0802968c
 801ae38:	0802975e 	.word	0x0802975e

0801ae3c <std>:
 801ae3c:	2300      	movs	r3, #0
 801ae3e:	b510      	push	{r4, lr}
 801ae40:	4604      	mov	r4, r0
 801ae42:	e9c0 3300 	strd	r3, r3, [r0]
 801ae46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ae4a:	6083      	str	r3, [r0, #8]
 801ae4c:	8181      	strh	r1, [r0, #12]
 801ae4e:	6643      	str	r3, [r0, #100]	; 0x64
 801ae50:	81c2      	strh	r2, [r0, #14]
 801ae52:	6183      	str	r3, [r0, #24]
 801ae54:	4619      	mov	r1, r3
 801ae56:	2208      	movs	r2, #8
 801ae58:	305c      	adds	r0, #92	; 0x5c
 801ae5a:	f7fe fced 	bl	8019838 <memset>
 801ae5e:	4b05      	ldr	r3, [pc, #20]	; (801ae74 <std+0x38>)
 801ae60:	6263      	str	r3, [r4, #36]	; 0x24
 801ae62:	4b05      	ldr	r3, [pc, #20]	; (801ae78 <std+0x3c>)
 801ae64:	62a3      	str	r3, [r4, #40]	; 0x28
 801ae66:	4b05      	ldr	r3, [pc, #20]	; (801ae7c <std+0x40>)
 801ae68:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ae6a:	4b05      	ldr	r3, [pc, #20]	; (801ae80 <std+0x44>)
 801ae6c:	6224      	str	r4, [r4, #32]
 801ae6e:	6323      	str	r3, [r4, #48]	; 0x30
 801ae70:	bd10      	pop	{r4, pc}
 801ae72:	bf00      	nop
 801ae74:	0801beed 	.word	0x0801beed
 801ae78:	0801bf0f 	.word	0x0801bf0f
 801ae7c:	0801bf47 	.word	0x0801bf47
 801ae80:	0801bf6b 	.word	0x0801bf6b

0801ae84 <_cleanup_r>:
 801ae84:	4901      	ldr	r1, [pc, #4]	; (801ae8c <_cleanup_r+0x8>)
 801ae86:	f000 b8c1 	b.w	801b00c <_fwalk_reent>
 801ae8a:	bf00      	nop
 801ae8c:	0801c255 	.word	0x0801c255

0801ae90 <__sfmoreglue>:
 801ae90:	b570      	push	{r4, r5, r6, lr}
 801ae92:	2268      	movs	r2, #104	; 0x68
 801ae94:	1e4d      	subs	r5, r1, #1
 801ae96:	4355      	muls	r5, r2
 801ae98:	460e      	mov	r6, r1
 801ae9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ae9e:	f000 fceb 	bl	801b878 <_malloc_r>
 801aea2:	4604      	mov	r4, r0
 801aea4:	b140      	cbz	r0, 801aeb8 <__sfmoreglue+0x28>
 801aea6:	2100      	movs	r1, #0
 801aea8:	e9c0 1600 	strd	r1, r6, [r0]
 801aeac:	300c      	adds	r0, #12
 801aeae:	60a0      	str	r0, [r4, #8]
 801aeb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801aeb4:	f7fe fcc0 	bl	8019838 <memset>
 801aeb8:	4620      	mov	r0, r4
 801aeba:	bd70      	pop	{r4, r5, r6, pc}

0801aebc <__sfp_lock_acquire>:
 801aebc:	4801      	ldr	r0, [pc, #4]	; (801aec4 <__sfp_lock_acquire+0x8>)
 801aebe:	f000 b8ca 	b.w	801b056 <__retarget_lock_acquire_recursive>
 801aec2:	bf00      	nop
 801aec4:	200115e1 	.word	0x200115e1

0801aec8 <__sfp_lock_release>:
 801aec8:	4801      	ldr	r0, [pc, #4]	; (801aed0 <__sfp_lock_release+0x8>)
 801aeca:	f000 b8c5 	b.w	801b058 <__retarget_lock_release_recursive>
 801aece:	bf00      	nop
 801aed0:	200115e1 	.word	0x200115e1

0801aed4 <__sinit_lock_acquire>:
 801aed4:	4801      	ldr	r0, [pc, #4]	; (801aedc <__sinit_lock_acquire+0x8>)
 801aed6:	f000 b8be 	b.w	801b056 <__retarget_lock_acquire_recursive>
 801aeda:	bf00      	nop
 801aedc:	200115e2 	.word	0x200115e2

0801aee0 <__sinit_lock_release>:
 801aee0:	4801      	ldr	r0, [pc, #4]	; (801aee8 <__sinit_lock_release+0x8>)
 801aee2:	f000 b8b9 	b.w	801b058 <__retarget_lock_release_recursive>
 801aee6:	bf00      	nop
 801aee8:	200115e2 	.word	0x200115e2

0801aeec <__sinit>:
 801aeec:	b510      	push	{r4, lr}
 801aeee:	4604      	mov	r4, r0
 801aef0:	f7ff fff0 	bl	801aed4 <__sinit_lock_acquire>
 801aef4:	69a3      	ldr	r3, [r4, #24]
 801aef6:	b11b      	cbz	r3, 801af00 <__sinit+0x14>
 801aef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aefc:	f7ff bff0 	b.w	801aee0 <__sinit_lock_release>
 801af00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801af04:	6523      	str	r3, [r4, #80]	; 0x50
 801af06:	4b13      	ldr	r3, [pc, #76]	; (801af54 <__sinit+0x68>)
 801af08:	4a13      	ldr	r2, [pc, #76]	; (801af58 <__sinit+0x6c>)
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	62a2      	str	r2, [r4, #40]	; 0x28
 801af0e:	42a3      	cmp	r3, r4
 801af10:	bf04      	itt	eq
 801af12:	2301      	moveq	r3, #1
 801af14:	61a3      	streq	r3, [r4, #24]
 801af16:	4620      	mov	r0, r4
 801af18:	f000 f820 	bl	801af5c <__sfp>
 801af1c:	6060      	str	r0, [r4, #4]
 801af1e:	4620      	mov	r0, r4
 801af20:	f000 f81c 	bl	801af5c <__sfp>
 801af24:	60a0      	str	r0, [r4, #8]
 801af26:	4620      	mov	r0, r4
 801af28:	f000 f818 	bl	801af5c <__sfp>
 801af2c:	2200      	movs	r2, #0
 801af2e:	60e0      	str	r0, [r4, #12]
 801af30:	2104      	movs	r1, #4
 801af32:	6860      	ldr	r0, [r4, #4]
 801af34:	f7ff ff82 	bl	801ae3c <std>
 801af38:	68a0      	ldr	r0, [r4, #8]
 801af3a:	2201      	movs	r2, #1
 801af3c:	2109      	movs	r1, #9
 801af3e:	f7ff ff7d 	bl	801ae3c <std>
 801af42:	68e0      	ldr	r0, [r4, #12]
 801af44:	2202      	movs	r2, #2
 801af46:	2112      	movs	r1, #18
 801af48:	f7ff ff78 	bl	801ae3c <std>
 801af4c:	2301      	movs	r3, #1
 801af4e:	61a3      	str	r3, [r4, #24]
 801af50:	e7d2      	b.n	801aef8 <__sinit+0xc>
 801af52:	bf00      	nop
 801af54:	08029678 	.word	0x08029678
 801af58:	0801ae85 	.word	0x0801ae85

0801af5c <__sfp>:
 801af5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af5e:	4607      	mov	r7, r0
 801af60:	f7ff ffac 	bl	801aebc <__sfp_lock_acquire>
 801af64:	4b1e      	ldr	r3, [pc, #120]	; (801afe0 <__sfp+0x84>)
 801af66:	681e      	ldr	r6, [r3, #0]
 801af68:	69b3      	ldr	r3, [r6, #24]
 801af6a:	b913      	cbnz	r3, 801af72 <__sfp+0x16>
 801af6c:	4630      	mov	r0, r6
 801af6e:	f7ff ffbd 	bl	801aeec <__sinit>
 801af72:	3648      	adds	r6, #72	; 0x48
 801af74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801af78:	3b01      	subs	r3, #1
 801af7a:	d503      	bpl.n	801af84 <__sfp+0x28>
 801af7c:	6833      	ldr	r3, [r6, #0]
 801af7e:	b30b      	cbz	r3, 801afc4 <__sfp+0x68>
 801af80:	6836      	ldr	r6, [r6, #0]
 801af82:	e7f7      	b.n	801af74 <__sfp+0x18>
 801af84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801af88:	b9d5      	cbnz	r5, 801afc0 <__sfp+0x64>
 801af8a:	4b16      	ldr	r3, [pc, #88]	; (801afe4 <__sfp+0x88>)
 801af8c:	60e3      	str	r3, [r4, #12]
 801af8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801af92:	6665      	str	r5, [r4, #100]	; 0x64
 801af94:	f000 f85e 	bl	801b054 <__retarget_lock_init_recursive>
 801af98:	f7ff ff96 	bl	801aec8 <__sfp_lock_release>
 801af9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801afa0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801afa4:	6025      	str	r5, [r4, #0]
 801afa6:	61a5      	str	r5, [r4, #24]
 801afa8:	2208      	movs	r2, #8
 801afaa:	4629      	mov	r1, r5
 801afac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801afb0:	f7fe fc42 	bl	8019838 <memset>
 801afb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801afb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801afbc:	4620      	mov	r0, r4
 801afbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801afc0:	3468      	adds	r4, #104	; 0x68
 801afc2:	e7d9      	b.n	801af78 <__sfp+0x1c>
 801afc4:	2104      	movs	r1, #4
 801afc6:	4638      	mov	r0, r7
 801afc8:	f7ff ff62 	bl	801ae90 <__sfmoreglue>
 801afcc:	4604      	mov	r4, r0
 801afce:	6030      	str	r0, [r6, #0]
 801afd0:	2800      	cmp	r0, #0
 801afd2:	d1d5      	bne.n	801af80 <__sfp+0x24>
 801afd4:	f7ff ff78 	bl	801aec8 <__sfp_lock_release>
 801afd8:	230c      	movs	r3, #12
 801afda:	603b      	str	r3, [r7, #0]
 801afdc:	e7ee      	b.n	801afbc <__sfp+0x60>
 801afde:	bf00      	nop
 801afe0:	08029678 	.word	0x08029678
 801afe4:	ffff0001 	.word	0xffff0001

0801afe8 <fiprintf>:
 801afe8:	b40e      	push	{r1, r2, r3}
 801afea:	b503      	push	{r0, r1, lr}
 801afec:	4601      	mov	r1, r0
 801afee:	ab03      	add	r3, sp, #12
 801aff0:	4805      	ldr	r0, [pc, #20]	; (801b008 <fiprintf+0x20>)
 801aff2:	f853 2b04 	ldr.w	r2, [r3], #4
 801aff6:	6800      	ldr	r0, [r0, #0]
 801aff8:	9301      	str	r3, [sp, #4]
 801affa:	f000 fe37 	bl	801bc6c <_vfiprintf_r>
 801affe:	b002      	add	sp, #8
 801b000:	f85d eb04 	ldr.w	lr, [sp], #4
 801b004:	b003      	add	sp, #12
 801b006:	4770      	bx	lr
 801b008:	20000034 	.word	0x20000034

0801b00c <_fwalk_reent>:
 801b00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b010:	4606      	mov	r6, r0
 801b012:	4688      	mov	r8, r1
 801b014:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b018:	2700      	movs	r7, #0
 801b01a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b01e:	f1b9 0901 	subs.w	r9, r9, #1
 801b022:	d505      	bpl.n	801b030 <_fwalk_reent+0x24>
 801b024:	6824      	ldr	r4, [r4, #0]
 801b026:	2c00      	cmp	r4, #0
 801b028:	d1f7      	bne.n	801b01a <_fwalk_reent+0xe>
 801b02a:	4638      	mov	r0, r7
 801b02c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b030:	89ab      	ldrh	r3, [r5, #12]
 801b032:	2b01      	cmp	r3, #1
 801b034:	d907      	bls.n	801b046 <_fwalk_reent+0x3a>
 801b036:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b03a:	3301      	adds	r3, #1
 801b03c:	d003      	beq.n	801b046 <_fwalk_reent+0x3a>
 801b03e:	4629      	mov	r1, r5
 801b040:	4630      	mov	r0, r6
 801b042:	47c0      	blx	r8
 801b044:	4307      	orrs	r7, r0
 801b046:	3568      	adds	r5, #104	; 0x68
 801b048:	e7e9      	b.n	801b01e <_fwalk_reent+0x12>
	...

0801b04c <_localeconv_r>:
 801b04c:	4800      	ldr	r0, [pc, #0]	; (801b050 <_localeconv_r+0x4>)
 801b04e:	4770      	bx	lr
 801b050:	20000188 	.word	0x20000188

0801b054 <__retarget_lock_init_recursive>:
 801b054:	4770      	bx	lr

0801b056 <__retarget_lock_acquire_recursive>:
 801b056:	4770      	bx	lr

0801b058 <__retarget_lock_release_recursive>:
 801b058:	4770      	bx	lr
	...

0801b05c <malloc>:
 801b05c:	4b02      	ldr	r3, [pc, #8]	; (801b068 <malloc+0xc>)
 801b05e:	4601      	mov	r1, r0
 801b060:	6818      	ldr	r0, [r3, #0]
 801b062:	f000 bc09 	b.w	801b878 <_malloc_r>
 801b066:	bf00      	nop
 801b068:	20000034 	.word	0x20000034

0801b06c <_Balloc>:
 801b06c:	b570      	push	{r4, r5, r6, lr}
 801b06e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b070:	4604      	mov	r4, r0
 801b072:	460d      	mov	r5, r1
 801b074:	b976      	cbnz	r6, 801b094 <_Balloc+0x28>
 801b076:	2010      	movs	r0, #16
 801b078:	f7ff fff0 	bl	801b05c <malloc>
 801b07c:	4602      	mov	r2, r0
 801b07e:	6260      	str	r0, [r4, #36]	; 0x24
 801b080:	b920      	cbnz	r0, 801b08c <_Balloc+0x20>
 801b082:	4b18      	ldr	r3, [pc, #96]	; (801b0e4 <_Balloc+0x78>)
 801b084:	4818      	ldr	r0, [pc, #96]	; (801b0e8 <_Balloc+0x7c>)
 801b086:	2166      	movs	r1, #102	; 0x66
 801b088:	f7ff f8be 	bl	801a208 <__assert_func>
 801b08c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b090:	6006      	str	r6, [r0, #0]
 801b092:	60c6      	str	r6, [r0, #12]
 801b094:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b096:	68f3      	ldr	r3, [r6, #12]
 801b098:	b183      	cbz	r3, 801b0bc <_Balloc+0x50>
 801b09a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b09c:	68db      	ldr	r3, [r3, #12]
 801b09e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b0a2:	b9b8      	cbnz	r0, 801b0d4 <_Balloc+0x68>
 801b0a4:	2101      	movs	r1, #1
 801b0a6:	fa01 f605 	lsl.w	r6, r1, r5
 801b0aa:	1d72      	adds	r2, r6, #5
 801b0ac:	0092      	lsls	r2, r2, #2
 801b0ae:	4620      	mov	r0, r4
 801b0b0:	f000 fb60 	bl	801b774 <_calloc_r>
 801b0b4:	b160      	cbz	r0, 801b0d0 <_Balloc+0x64>
 801b0b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b0ba:	e00e      	b.n	801b0da <_Balloc+0x6e>
 801b0bc:	2221      	movs	r2, #33	; 0x21
 801b0be:	2104      	movs	r1, #4
 801b0c0:	4620      	mov	r0, r4
 801b0c2:	f000 fb57 	bl	801b774 <_calloc_r>
 801b0c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b0c8:	60f0      	str	r0, [r6, #12]
 801b0ca:	68db      	ldr	r3, [r3, #12]
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	d1e4      	bne.n	801b09a <_Balloc+0x2e>
 801b0d0:	2000      	movs	r0, #0
 801b0d2:	bd70      	pop	{r4, r5, r6, pc}
 801b0d4:	6802      	ldr	r2, [r0, #0]
 801b0d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b0da:	2300      	movs	r3, #0
 801b0dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b0e0:	e7f7      	b.n	801b0d2 <_Balloc+0x66>
 801b0e2:	bf00      	nop
 801b0e4:	080296b0 	.word	0x080296b0
 801b0e8:	08029838 	.word	0x08029838

0801b0ec <_Bfree>:
 801b0ec:	b570      	push	{r4, r5, r6, lr}
 801b0ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b0f0:	4605      	mov	r5, r0
 801b0f2:	460c      	mov	r4, r1
 801b0f4:	b976      	cbnz	r6, 801b114 <_Bfree+0x28>
 801b0f6:	2010      	movs	r0, #16
 801b0f8:	f7ff ffb0 	bl	801b05c <malloc>
 801b0fc:	4602      	mov	r2, r0
 801b0fe:	6268      	str	r0, [r5, #36]	; 0x24
 801b100:	b920      	cbnz	r0, 801b10c <_Bfree+0x20>
 801b102:	4b09      	ldr	r3, [pc, #36]	; (801b128 <_Bfree+0x3c>)
 801b104:	4809      	ldr	r0, [pc, #36]	; (801b12c <_Bfree+0x40>)
 801b106:	218a      	movs	r1, #138	; 0x8a
 801b108:	f7ff f87e 	bl	801a208 <__assert_func>
 801b10c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b110:	6006      	str	r6, [r0, #0]
 801b112:	60c6      	str	r6, [r0, #12]
 801b114:	b13c      	cbz	r4, 801b126 <_Bfree+0x3a>
 801b116:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b118:	6862      	ldr	r2, [r4, #4]
 801b11a:	68db      	ldr	r3, [r3, #12]
 801b11c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b120:	6021      	str	r1, [r4, #0]
 801b122:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b126:	bd70      	pop	{r4, r5, r6, pc}
 801b128:	080296b0 	.word	0x080296b0
 801b12c:	08029838 	.word	0x08029838

0801b130 <__multadd>:
 801b130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b134:	690d      	ldr	r5, [r1, #16]
 801b136:	4607      	mov	r7, r0
 801b138:	460c      	mov	r4, r1
 801b13a:	461e      	mov	r6, r3
 801b13c:	f101 0c14 	add.w	ip, r1, #20
 801b140:	2000      	movs	r0, #0
 801b142:	f8dc 3000 	ldr.w	r3, [ip]
 801b146:	b299      	uxth	r1, r3
 801b148:	fb02 6101 	mla	r1, r2, r1, r6
 801b14c:	0c1e      	lsrs	r6, r3, #16
 801b14e:	0c0b      	lsrs	r3, r1, #16
 801b150:	fb02 3306 	mla	r3, r2, r6, r3
 801b154:	b289      	uxth	r1, r1
 801b156:	3001      	adds	r0, #1
 801b158:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b15c:	4285      	cmp	r5, r0
 801b15e:	f84c 1b04 	str.w	r1, [ip], #4
 801b162:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b166:	dcec      	bgt.n	801b142 <__multadd+0x12>
 801b168:	b30e      	cbz	r6, 801b1ae <__multadd+0x7e>
 801b16a:	68a3      	ldr	r3, [r4, #8]
 801b16c:	42ab      	cmp	r3, r5
 801b16e:	dc19      	bgt.n	801b1a4 <__multadd+0x74>
 801b170:	6861      	ldr	r1, [r4, #4]
 801b172:	4638      	mov	r0, r7
 801b174:	3101      	adds	r1, #1
 801b176:	f7ff ff79 	bl	801b06c <_Balloc>
 801b17a:	4680      	mov	r8, r0
 801b17c:	b928      	cbnz	r0, 801b18a <__multadd+0x5a>
 801b17e:	4602      	mov	r2, r0
 801b180:	4b0c      	ldr	r3, [pc, #48]	; (801b1b4 <__multadd+0x84>)
 801b182:	480d      	ldr	r0, [pc, #52]	; (801b1b8 <__multadd+0x88>)
 801b184:	21b5      	movs	r1, #181	; 0xb5
 801b186:	f7ff f83f 	bl	801a208 <__assert_func>
 801b18a:	6922      	ldr	r2, [r4, #16]
 801b18c:	3202      	adds	r2, #2
 801b18e:	f104 010c 	add.w	r1, r4, #12
 801b192:	0092      	lsls	r2, r2, #2
 801b194:	300c      	adds	r0, #12
 801b196:	f7fe fb27 	bl	80197e8 <memcpy>
 801b19a:	4621      	mov	r1, r4
 801b19c:	4638      	mov	r0, r7
 801b19e:	f7ff ffa5 	bl	801b0ec <_Bfree>
 801b1a2:	4644      	mov	r4, r8
 801b1a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b1a8:	3501      	adds	r5, #1
 801b1aa:	615e      	str	r6, [r3, #20]
 801b1ac:	6125      	str	r5, [r4, #16]
 801b1ae:	4620      	mov	r0, r4
 801b1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1b4:	080297c6 	.word	0x080297c6
 801b1b8:	08029838 	.word	0x08029838

0801b1bc <__hi0bits>:
 801b1bc:	0c03      	lsrs	r3, r0, #16
 801b1be:	041b      	lsls	r3, r3, #16
 801b1c0:	b9d3      	cbnz	r3, 801b1f8 <__hi0bits+0x3c>
 801b1c2:	0400      	lsls	r0, r0, #16
 801b1c4:	2310      	movs	r3, #16
 801b1c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b1ca:	bf04      	itt	eq
 801b1cc:	0200      	lsleq	r0, r0, #8
 801b1ce:	3308      	addeq	r3, #8
 801b1d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b1d4:	bf04      	itt	eq
 801b1d6:	0100      	lsleq	r0, r0, #4
 801b1d8:	3304      	addeq	r3, #4
 801b1da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b1de:	bf04      	itt	eq
 801b1e0:	0080      	lsleq	r0, r0, #2
 801b1e2:	3302      	addeq	r3, #2
 801b1e4:	2800      	cmp	r0, #0
 801b1e6:	db05      	blt.n	801b1f4 <__hi0bits+0x38>
 801b1e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b1ec:	f103 0301 	add.w	r3, r3, #1
 801b1f0:	bf08      	it	eq
 801b1f2:	2320      	moveq	r3, #32
 801b1f4:	4618      	mov	r0, r3
 801b1f6:	4770      	bx	lr
 801b1f8:	2300      	movs	r3, #0
 801b1fa:	e7e4      	b.n	801b1c6 <__hi0bits+0xa>

0801b1fc <__lo0bits>:
 801b1fc:	6803      	ldr	r3, [r0, #0]
 801b1fe:	f013 0207 	ands.w	r2, r3, #7
 801b202:	4601      	mov	r1, r0
 801b204:	d00b      	beq.n	801b21e <__lo0bits+0x22>
 801b206:	07da      	lsls	r2, r3, #31
 801b208:	d423      	bmi.n	801b252 <__lo0bits+0x56>
 801b20a:	0798      	lsls	r0, r3, #30
 801b20c:	bf49      	itett	mi
 801b20e:	085b      	lsrmi	r3, r3, #1
 801b210:	089b      	lsrpl	r3, r3, #2
 801b212:	2001      	movmi	r0, #1
 801b214:	600b      	strmi	r3, [r1, #0]
 801b216:	bf5c      	itt	pl
 801b218:	600b      	strpl	r3, [r1, #0]
 801b21a:	2002      	movpl	r0, #2
 801b21c:	4770      	bx	lr
 801b21e:	b298      	uxth	r0, r3
 801b220:	b9a8      	cbnz	r0, 801b24e <__lo0bits+0x52>
 801b222:	0c1b      	lsrs	r3, r3, #16
 801b224:	2010      	movs	r0, #16
 801b226:	b2da      	uxtb	r2, r3
 801b228:	b90a      	cbnz	r2, 801b22e <__lo0bits+0x32>
 801b22a:	3008      	adds	r0, #8
 801b22c:	0a1b      	lsrs	r3, r3, #8
 801b22e:	071a      	lsls	r2, r3, #28
 801b230:	bf04      	itt	eq
 801b232:	091b      	lsreq	r3, r3, #4
 801b234:	3004      	addeq	r0, #4
 801b236:	079a      	lsls	r2, r3, #30
 801b238:	bf04      	itt	eq
 801b23a:	089b      	lsreq	r3, r3, #2
 801b23c:	3002      	addeq	r0, #2
 801b23e:	07da      	lsls	r2, r3, #31
 801b240:	d403      	bmi.n	801b24a <__lo0bits+0x4e>
 801b242:	085b      	lsrs	r3, r3, #1
 801b244:	f100 0001 	add.w	r0, r0, #1
 801b248:	d005      	beq.n	801b256 <__lo0bits+0x5a>
 801b24a:	600b      	str	r3, [r1, #0]
 801b24c:	4770      	bx	lr
 801b24e:	4610      	mov	r0, r2
 801b250:	e7e9      	b.n	801b226 <__lo0bits+0x2a>
 801b252:	2000      	movs	r0, #0
 801b254:	4770      	bx	lr
 801b256:	2020      	movs	r0, #32
 801b258:	4770      	bx	lr
	...

0801b25c <__i2b>:
 801b25c:	b510      	push	{r4, lr}
 801b25e:	460c      	mov	r4, r1
 801b260:	2101      	movs	r1, #1
 801b262:	f7ff ff03 	bl	801b06c <_Balloc>
 801b266:	4602      	mov	r2, r0
 801b268:	b928      	cbnz	r0, 801b276 <__i2b+0x1a>
 801b26a:	4b05      	ldr	r3, [pc, #20]	; (801b280 <__i2b+0x24>)
 801b26c:	4805      	ldr	r0, [pc, #20]	; (801b284 <__i2b+0x28>)
 801b26e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801b272:	f7fe ffc9 	bl	801a208 <__assert_func>
 801b276:	2301      	movs	r3, #1
 801b278:	6144      	str	r4, [r0, #20]
 801b27a:	6103      	str	r3, [r0, #16]
 801b27c:	bd10      	pop	{r4, pc}
 801b27e:	bf00      	nop
 801b280:	080297c6 	.word	0x080297c6
 801b284:	08029838 	.word	0x08029838

0801b288 <__multiply>:
 801b288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b28c:	4691      	mov	r9, r2
 801b28e:	690a      	ldr	r2, [r1, #16]
 801b290:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b294:	429a      	cmp	r2, r3
 801b296:	bfb8      	it	lt
 801b298:	460b      	movlt	r3, r1
 801b29a:	460c      	mov	r4, r1
 801b29c:	bfbc      	itt	lt
 801b29e:	464c      	movlt	r4, r9
 801b2a0:	4699      	movlt	r9, r3
 801b2a2:	6927      	ldr	r7, [r4, #16]
 801b2a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801b2a8:	68a3      	ldr	r3, [r4, #8]
 801b2aa:	6861      	ldr	r1, [r4, #4]
 801b2ac:	eb07 060a 	add.w	r6, r7, sl
 801b2b0:	42b3      	cmp	r3, r6
 801b2b2:	b085      	sub	sp, #20
 801b2b4:	bfb8      	it	lt
 801b2b6:	3101      	addlt	r1, #1
 801b2b8:	f7ff fed8 	bl	801b06c <_Balloc>
 801b2bc:	b930      	cbnz	r0, 801b2cc <__multiply+0x44>
 801b2be:	4602      	mov	r2, r0
 801b2c0:	4b44      	ldr	r3, [pc, #272]	; (801b3d4 <__multiply+0x14c>)
 801b2c2:	4845      	ldr	r0, [pc, #276]	; (801b3d8 <__multiply+0x150>)
 801b2c4:	f240 115d 	movw	r1, #349	; 0x15d
 801b2c8:	f7fe ff9e 	bl	801a208 <__assert_func>
 801b2cc:	f100 0514 	add.w	r5, r0, #20
 801b2d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b2d4:	462b      	mov	r3, r5
 801b2d6:	2200      	movs	r2, #0
 801b2d8:	4543      	cmp	r3, r8
 801b2da:	d321      	bcc.n	801b320 <__multiply+0x98>
 801b2dc:	f104 0314 	add.w	r3, r4, #20
 801b2e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b2e4:	f109 0314 	add.w	r3, r9, #20
 801b2e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801b2ec:	9202      	str	r2, [sp, #8]
 801b2ee:	1b3a      	subs	r2, r7, r4
 801b2f0:	3a15      	subs	r2, #21
 801b2f2:	f022 0203 	bic.w	r2, r2, #3
 801b2f6:	3204      	adds	r2, #4
 801b2f8:	f104 0115 	add.w	r1, r4, #21
 801b2fc:	428f      	cmp	r7, r1
 801b2fe:	bf38      	it	cc
 801b300:	2204      	movcc	r2, #4
 801b302:	9201      	str	r2, [sp, #4]
 801b304:	9a02      	ldr	r2, [sp, #8]
 801b306:	9303      	str	r3, [sp, #12]
 801b308:	429a      	cmp	r2, r3
 801b30a:	d80c      	bhi.n	801b326 <__multiply+0x9e>
 801b30c:	2e00      	cmp	r6, #0
 801b30e:	dd03      	ble.n	801b318 <__multiply+0x90>
 801b310:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b314:	2b00      	cmp	r3, #0
 801b316:	d05a      	beq.n	801b3ce <__multiply+0x146>
 801b318:	6106      	str	r6, [r0, #16]
 801b31a:	b005      	add	sp, #20
 801b31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b320:	f843 2b04 	str.w	r2, [r3], #4
 801b324:	e7d8      	b.n	801b2d8 <__multiply+0x50>
 801b326:	f8b3 a000 	ldrh.w	sl, [r3]
 801b32a:	f1ba 0f00 	cmp.w	sl, #0
 801b32e:	d024      	beq.n	801b37a <__multiply+0xf2>
 801b330:	f104 0e14 	add.w	lr, r4, #20
 801b334:	46a9      	mov	r9, r5
 801b336:	f04f 0c00 	mov.w	ip, #0
 801b33a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801b33e:	f8d9 1000 	ldr.w	r1, [r9]
 801b342:	fa1f fb82 	uxth.w	fp, r2
 801b346:	b289      	uxth	r1, r1
 801b348:	fb0a 110b 	mla	r1, sl, fp, r1
 801b34c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801b350:	f8d9 2000 	ldr.w	r2, [r9]
 801b354:	4461      	add	r1, ip
 801b356:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b35a:	fb0a c20b 	mla	r2, sl, fp, ip
 801b35e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801b362:	b289      	uxth	r1, r1
 801b364:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b368:	4577      	cmp	r7, lr
 801b36a:	f849 1b04 	str.w	r1, [r9], #4
 801b36e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b372:	d8e2      	bhi.n	801b33a <__multiply+0xb2>
 801b374:	9a01      	ldr	r2, [sp, #4]
 801b376:	f845 c002 	str.w	ip, [r5, r2]
 801b37a:	9a03      	ldr	r2, [sp, #12]
 801b37c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801b380:	3304      	adds	r3, #4
 801b382:	f1b9 0f00 	cmp.w	r9, #0
 801b386:	d020      	beq.n	801b3ca <__multiply+0x142>
 801b388:	6829      	ldr	r1, [r5, #0]
 801b38a:	f104 0c14 	add.w	ip, r4, #20
 801b38e:	46ae      	mov	lr, r5
 801b390:	f04f 0a00 	mov.w	sl, #0
 801b394:	f8bc b000 	ldrh.w	fp, [ip]
 801b398:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801b39c:	fb09 220b 	mla	r2, r9, fp, r2
 801b3a0:	4492      	add	sl, r2
 801b3a2:	b289      	uxth	r1, r1
 801b3a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801b3a8:	f84e 1b04 	str.w	r1, [lr], #4
 801b3ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 801b3b0:	f8be 1000 	ldrh.w	r1, [lr]
 801b3b4:	0c12      	lsrs	r2, r2, #16
 801b3b6:	fb09 1102 	mla	r1, r9, r2, r1
 801b3ba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801b3be:	4567      	cmp	r7, ip
 801b3c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b3c4:	d8e6      	bhi.n	801b394 <__multiply+0x10c>
 801b3c6:	9a01      	ldr	r2, [sp, #4]
 801b3c8:	50a9      	str	r1, [r5, r2]
 801b3ca:	3504      	adds	r5, #4
 801b3cc:	e79a      	b.n	801b304 <__multiply+0x7c>
 801b3ce:	3e01      	subs	r6, #1
 801b3d0:	e79c      	b.n	801b30c <__multiply+0x84>
 801b3d2:	bf00      	nop
 801b3d4:	080297c6 	.word	0x080297c6
 801b3d8:	08029838 	.word	0x08029838

0801b3dc <__pow5mult>:
 801b3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b3e0:	4615      	mov	r5, r2
 801b3e2:	f012 0203 	ands.w	r2, r2, #3
 801b3e6:	4606      	mov	r6, r0
 801b3e8:	460f      	mov	r7, r1
 801b3ea:	d007      	beq.n	801b3fc <__pow5mult+0x20>
 801b3ec:	4c25      	ldr	r4, [pc, #148]	; (801b484 <__pow5mult+0xa8>)
 801b3ee:	3a01      	subs	r2, #1
 801b3f0:	2300      	movs	r3, #0
 801b3f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b3f6:	f7ff fe9b 	bl	801b130 <__multadd>
 801b3fa:	4607      	mov	r7, r0
 801b3fc:	10ad      	asrs	r5, r5, #2
 801b3fe:	d03d      	beq.n	801b47c <__pow5mult+0xa0>
 801b400:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801b402:	b97c      	cbnz	r4, 801b424 <__pow5mult+0x48>
 801b404:	2010      	movs	r0, #16
 801b406:	f7ff fe29 	bl	801b05c <malloc>
 801b40a:	4602      	mov	r2, r0
 801b40c:	6270      	str	r0, [r6, #36]	; 0x24
 801b40e:	b928      	cbnz	r0, 801b41c <__pow5mult+0x40>
 801b410:	4b1d      	ldr	r3, [pc, #116]	; (801b488 <__pow5mult+0xac>)
 801b412:	481e      	ldr	r0, [pc, #120]	; (801b48c <__pow5mult+0xb0>)
 801b414:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801b418:	f7fe fef6 	bl	801a208 <__assert_func>
 801b41c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b420:	6004      	str	r4, [r0, #0]
 801b422:	60c4      	str	r4, [r0, #12]
 801b424:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801b428:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b42c:	b94c      	cbnz	r4, 801b442 <__pow5mult+0x66>
 801b42e:	f240 2171 	movw	r1, #625	; 0x271
 801b432:	4630      	mov	r0, r6
 801b434:	f7ff ff12 	bl	801b25c <__i2b>
 801b438:	2300      	movs	r3, #0
 801b43a:	f8c8 0008 	str.w	r0, [r8, #8]
 801b43e:	4604      	mov	r4, r0
 801b440:	6003      	str	r3, [r0, #0]
 801b442:	f04f 0900 	mov.w	r9, #0
 801b446:	07eb      	lsls	r3, r5, #31
 801b448:	d50a      	bpl.n	801b460 <__pow5mult+0x84>
 801b44a:	4639      	mov	r1, r7
 801b44c:	4622      	mov	r2, r4
 801b44e:	4630      	mov	r0, r6
 801b450:	f7ff ff1a 	bl	801b288 <__multiply>
 801b454:	4639      	mov	r1, r7
 801b456:	4680      	mov	r8, r0
 801b458:	4630      	mov	r0, r6
 801b45a:	f7ff fe47 	bl	801b0ec <_Bfree>
 801b45e:	4647      	mov	r7, r8
 801b460:	106d      	asrs	r5, r5, #1
 801b462:	d00b      	beq.n	801b47c <__pow5mult+0xa0>
 801b464:	6820      	ldr	r0, [r4, #0]
 801b466:	b938      	cbnz	r0, 801b478 <__pow5mult+0x9c>
 801b468:	4622      	mov	r2, r4
 801b46a:	4621      	mov	r1, r4
 801b46c:	4630      	mov	r0, r6
 801b46e:	f7ff ff0b 	bl	801b288 <__multiply>
 801b472:	6020      	str	r0, [r4, #0]
 801b474:	f8c0 9000 	str.w	r9, [r0]
 801b478:	4604      	mov	r4, r0
 801b47a:	e7e4      	b.n	801b446 <__pow5mult+0x6a>
 801b47c:	4638      	mov	r0, r7
 801b47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b482:	bf00      	nop
 801b484:	08029988 	.word	0x08029988
 801b488:	080296b0 	.word	0x080296b0
 801b48c:	08029838 	.word	0x08029838

0801b490 <__lshift>:
 801b490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b494:	460c      	mov	r4, r1
 801b496:	6849      	ldr	r1, [r1, #4]
 801b498:	6923      	ldr	r3, [r4, #16]
 801b49a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b49e:	68a3      	ldr	r3, [r4, #8]
 801b4a0:	4607      	mov	r7, r0
 801b4a2:	4691      	mov	r9, r2
 801b4a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b4a8:	f108 0601 	add.w	r6, r8, #1
 801b4ac:	42b3      	cmp	r3, r6
 801b4ae:	db0b      	blt.n	801b4c8 <__lshift+0x38>
 801b4b0:	4638      	mov	r0, r7
 801b4b2:	f7ff fddb 	bl	801b06c <_Balloc>
 801b4b6:	4605      	mov	r5, r0
 801b4b8:	b948      	cbnz	r0, 801b4ce <__lshift+0x3e>
 801b4ba:	4602      	mov	r2, r0
 801b4bc:	4b2a      	ldr	r3, [pc, #168]	; (801b568 <__lshift+0xd8>)
 801b4be:	482b      	ldr	r0, [pc, #172]	; (801b56c <__lshift+0xdc>)
 801b4c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 801b4c4:	f7fe fea0 	bl	801a208 <__assert_func>
 801b4c8:	3101      	adds	r1, #1
 801b4ca:	005b      	lsls	r3, r3, #1
 801b4cc:	e7ee      	b.n	801b4ac <__lshift+0x1c>
 801b4ce:	2300      	movs	r3, #0
 801b4d0:	f100 0114 	add.w	r1, r0, #20
 801b4d4:	f100 0210 	add.w	r2, r0, #16
 801b4d8:	4618      	mov	r0, r3
 801b4da:	4553      	cmp	r3, sl
 801b4dc:	db37      	blt.n	801b54e <__lshift+0xbe>
 801b4de:	6920      	ldr	r0, [r4, #16]
 801b4e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b4e4:	f104 0314 	add.w	r3, r4, #20
 801b4e8:	f019 091f 	ands.w	r9, r9, #31
 801b4ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b4f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801b4f4:	d02f      	beq.n	801b556 <__lshift+0xc6>
 801b4f6:	f1c9 0e20 	rsb	lr, r9, #32
 801b4fa:	468a      	mov	sl, r1
 801b4fc:	f04f 0c00 	mov.w	ip, #0
 801b500:	681a      	ldr	r2, [r3, #0]
 801b502:	fa02 f209 	lsl.w	r2, r2, r9
 801b506:	ea42 020c 	orr.w	r2, r2, ip
 801b50a:	f84a 2b04 	str.w	r2, [sl], #4
 801b50e:	f853 2b04 	ldr.w	r2, [r3], #4
 801b512:	4298      	cmp	r0, r3
 801b514:	fa22 fc0e 	lsr.w	ip, r2, lr
 801b518:	d8f2      	bhi.n	801b500 <__lshift+0x70>
 801b51a:	1b03      	subs	r3, r0, r4
 801b51c:	3b15      	subs	r3, #21
 801b51e:	f023 0303 	bic.w	r3, r3, #3
 801b522:	3304      	adds	r3, #4
 801b524:	f104 0215 	add.w	r2, r4, #21
 801b528:	4290      	cmp	r0, r2
 801b52a:	bf38      	it	cc
 801b52c:	2304      	movcc	r3, #4
 801b52e:	f841 c003 	str.w	ip, [r1, r3]
 801b532:	f1bc 0f00 	cmp.w	ip, #0
 801b536:	d001      	beq.n	801b53c <__lshift+0xac>
 801b538:	f108 0602 	add.w	r6, r8, #2
 801b53c:	3e01      	subs	r6, #1
 801b53e:	4638      	mov	r0, r7
 801b540:	612e      	str	r6, [r5, #16]
 801b542:	4621      	mov	r1, r4
 801b544:	f7ff fdd2 	bl	801b0ec <_Bfree>
 801b548:	4628      	mov	r0, r5
 801b54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b54e:	f842 0f04 	str.w	r0, [r2, #4]!
 801b552:	3301      	adds	r3, #1
 801b554:	e7c1      	b.n	801b4da <__lshift+0x4a>
 801b556:	3904      	subs	r1, #4
 801b558:	f853 2b04 	ldr.w	r2, [r3], #4
 801b55c:	f841 2f04 	str.w	r2, [r1, #4]!
 801b560:	4298      	cmp	r0, r3
 801b562:	d8f9      	bhi.n	801b558 <__lshift+0xc8>
 801b564:	e7ea      	b.n	801b53c <__lshift+0xac>
 801b566:	bf00      	nop
 801b568:	080297c6 	.word	0x080297c6
 801b56c:	08029838 	.word	0x08029838

0801b570 <__mcmp>:
 801b570:	b530      	push	{r4, r5, lr}
 801b572:	6902      	ldr	r2, [r0, #16]
 801b574:	690c      	ldr	r4, [r1, #16]
 801b576:	1b12      	subs	r2, r2, r4
 801b578:	d10e      	bne.n	801b598 <__mcmp+0x28>
 801b57a:	f100 0314 	add.w	r3, r0, #20
 801b57e:	3114      	adds	r1, #20
 801b580:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801b584:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801b588:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801b58c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801b590:	42a5      	cmp	r5, r4
 801b592:	d003      	beq.n	801b59c <__mcmp+0x2c>
 801b594:	d305      	bcc.n	801b5a2 <__mcmp+0x32>
 801b596:	2201      	movs	r2, #1
 801b598:	4610      	mov	r0, r2
 801b59a:	bd30      	pop	{r4, r5, pc}
 801b59c:	4283      	cmp	r3, r0
 801b59e:	d3f3      	bcc.n	801b588 <__mcmp+0x18>
 801b5a0:	e7fa      	b.n	801b598 <__mcmp+0x28>
 801b5a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b5a6:	e7f7      	b.n	801b598 <__mcmp+0x28>

0801b5a8 <__mdiff>:
 801b5a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5ac:	460c      	mov	r4, r1
 801b5ae:	4606      	mov	r6, r0
 801b5b0:	4611      	mov	r1, r2
 801b5b2:	4620      	mov	r0, r4
 801b5b4:	4690      	mov	r8, r2
 801b5b6:	f7ff ffdb 	bl	801b570 <__mcmp>
 801b5ba:	1e05      	subs	r5, r0, #0
 801b5bc:	d110      	bne.n	801b5e0 <__mdiff+0x38>
 801b5be:	4629      	mov	r1, r5
 801b5c0:	4630      	mov	r0, r6
 801b5c2:	f7ff fd53 	bl	801b06c <_Balloc>
 801b5c6:	b930      	cbnz	r0, 801b5d6 <__mdiff+0x2e>
 801b5c8:	4b3a      	ldr	r3, [pc, #232]	; (801b6b4 <__mdiff+0x10c>)
 801b5ca:	4602      	mov	r2, r0
 801b5cc:	f240 2132 	movw	r1, #562	; 0x232
 801b5d0:	4839      	ldr	r0, [pc, #228]	; (801b6b8 <__mdiff+0x110>)
 801b5d2:	f7fe fe19 	bl	801a208 <__assert_func>
 801b5d6:	2301      	movs	r3, #1
 801b5d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b5dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5e0:	bfa4      	itt	ge
 801b5e2:	4643      	movge	r3, r8
 801b5e4:	46a0      	movge	r8, r4
 801b5e6:	4630      	mov	r0, r6
 801b5e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b5ec:	bfa6      	itte	ge
 801b5ee:	461c      	movge	r4, r3
 801b5f0:	2500      	movge	r5, #0
 801b5f2:	2501      	movlt	r5, #1
 801b5f4:	f7ff fd3a 	bl	801b06c <_Balloc>
 801b5f8:	b920      	cbnz	r0, 801b604 <__mdiff+0x5c>
 801b5fa:	4b2e      	ldr	r3, [pc, #184]	; (801b6b4 <__mdiff+0x10c>)
 801b5fc:	4602      	mov	r2, r0
 801b5fe:	f44f 7110 	mov.w	r1, #576	; 0x240
 801b602:	e7e5      	b.n	801b5d0 <__mdiff+0x28>
 801b604:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801b608:	6926      	ldr	r6, [r4, #16]
 801b60a:	60c5      	str	r5, [r0, #12]
 801b60c:	f104 0914 	add.w	r9, r4, #20
 801b610:	f108 0514 	add.w	r5, r8, #20
 801b614:	f100 0e14 	add.w	lr, r0, #20
 801b618:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801b61c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801b620:	f108 0210 	add.w	r2, r8, #16
 801b624:	46f2      	mov	sl, lr
 801b626:	2100      	movs	r1, #0
 801b628:	f859 3b04 	ldr.w	r3, [r9], #4
 801b62c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801b630:	fa1f f883 	uxth.w	r8, r3
 801b634:	fa11 f18b 	uxtah	r1, r1, fp
 801b638:	0c1b      	lsrs	r3, r3, #16
 801b63a:	eba1 0808 	sub.w	r8, r1, r8
 801b63e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801b642:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801b646:	fa1f f888 	uxth.w	r8, r8
 801b64a:	1419      	asrs	r1, r3, #16
 801b64c:	454e      	cmp	r6, r9
 801b64e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801b652:	f84a 3b04 	str.w	r3, [sl], #4
 801b656:	d8e7      	bhi.n	801b628 <__mdiff+0x80>
 801b658:	1b33      	subs	r3, r6, r4
 801b65a:	3b15      	subs	r3, #21
 801b65c:	f023 0303 	bic.w	r3, r3, #3
 801b660:	3304      	adds	r3, #4
 801b662:	3415      	adds	r4, #21
 801b664:	42a6      	cmp	r6, r4
 801b666:	bf38      	it	cc
 801b668:	2304      	movcc	r3, #4
 801b66a:	441d      	add	r5, r3
 801b66c:	4473      	add	r3, lr
 801b66e:	469e      	mov	lr, r3
 801b670:	462e      	mov	r6, r5
 801b672:	4566      	cmp	r6, ip
 801b674:	d30e      	bcc.n	801b694 <__mdiff+0xec>
 801b676:	f10c 0203 	add.w	r2, ip, #3
 801b67a:	1b52      	subs	r2, r2, r5
 801b67c:	f022 0203 	bic.w	r2, r2, #3
 801b680:	3d03      	subs	r5, #3
 801b682:	45ac      	cmp	ip, r5
 801b684:	bf38      	it	cc
 801b686:	2200      	movcc	r2, #0
 801b688:	441a      	add	r2, r3
 801b68a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801b68e:	b17b      	cbz	r3, 801b6b0 <__mdiff+0x108>
 801b690:	6107      	str	r7, [r0, #16]
 801b692:	e7a3      	b.n	801b5dc <__mdiff+0x34>
 801b694:	f856 8b04 	ldr.w	r8, [r6], #4
 801b698:	fa11 f288 	uxtah	r2, r1, r8
 801b69c:	1414      	asrs	r4, r2, #16
 801b69e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801b6a2:	b292      	uxth	r2, r2
 801b6a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801b6a8:	f84e 2b04 	str.w	r2, [lr], #4
 801b6ac:	1421      	asrs	r1, r4, #16
 801b6ae:	e7e0      	b.n	801b672 <__mdiff+0xca>
 801b6b0:	3f01      	subs	r7, #1
 801b6b2:	e7ea      	b.n	801b68a <__mdiff+0xe2>
 801b6b4:	080297c6 	.word	0x080297c6
 801b6b8:	08029838 	.word	0x08029838

0801b6bc <__d2b>:
 801b6bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b6c0:	4689      	mov	r9, r1
 801b6c2:	2101      	movs	r1, #1
 801b6c4:	ec57 6b10 	vmov	r6, r7, d0
 801b6c8:	4690      	mov	r8, r2
 801b6ca:	f7ff fccf 	bl	801b06c <_Balloc>
 801b6ce:	4604      	mov	r4, r0
 801b6d0:	b930      	cbnz	r0, 801b6e0 <__d2b+0x24>
 801b6d2:	4602      	mov	r2, r0
 801b6d4:	4b25      	ldr	r3, [pc, #148]	; (801b76c <__d2b+0xb0>)
 801b6d6:	4826      	ldr	r0, [pc, #152]	; (801b770 <__d2b+0xb4>)
 801b6d8:	f240 310a 	movw	r1, #778	; 0x30a
 801b6dc:	f7fe fd94 	bl	801a208 <__assert_func>
 801b6e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801b6e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b6e8:	bb35      	cbnz	r5, 801b738 <__d2b+0x7c>
 801b6ea:	2e00      	cmp	r6, #0
 801b6ec:	9301      	str	r3, [sp, #4]
 801b6ee:	d028      	beq.n	801b742 <__d2b+0x86>
 801b6f0:	4668      	mov	r0, sp
 801b6f2:	9600      	str	r6, [sp, #0]
 801b6f4:	f7ff fd82 	bl	801b1fc <__lo0bits>
 801b6f8:	9900      	ldr	r1, [sp, #0]
 801b6fa:	b300      	cbz	r0, 801b73e <__d2b+0x82>
 801b6fc:	9a01      	ldr	r2, [sp, #4]
 801b6fe:	f1c0 0320 	rsb	r3, r0, #32
 801b702:	fa02 f303 	lsl.w	r3, r2, r3
 801b706:	430b      	orrs	r3, r1
 801b708:	40c2      	lsrs	r2, r0
 801b70a:	6163      	str	r3, [r4, #20]
 801b70c:	9201      	str	r2, [sp, #4]
 801b70e:	9b01      	ldr	r3, [sp, #4]
 801b710:	61a3      	str	r3, [r4, #24]
 801b712:	2b00      	cmp	r3, #0
 801b714:	bf14      	ite	ne
 801b716:	2202      	movne	r2, #2
 801b718:	2201      	moveq	r2, #1
 801b71a:	6122      	str	r2, [r4, #16]
 801b71c:	b1d5      	cbz	r5, 801b754 <__d2b+0x98>
 801b71e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801b722:	4405      	add	r5, r0
 801b724:	f8c9 5000 	str.w	r5, [r9]
 801b728:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b72c:	f8c8 0000 	str.w	r0, [r8]
 801b730:	4620      	mov	r0, r4
 801b732:	b003      	add	sp, #12
 801b734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b738:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b73c:	e7d5      	b.n	801b6ea <__d2b+0x2e>
 801b73e:	6161      	str	r1, [r4, #20]
 801b740:	e7e5      	b.n	801b70e <__d2b+0x52>
 801b742:	a801      	add	r0, sp, #4
 801b744:	f7ff fd5a 	bl	801b1fc <__lo0bits>
 801b748:	9b01      	ldr	r3, [sp, #4]
 801b74a:	6163      	str	r3, [r4, #20]
 801b74c:	2201      	movs	r2, #1
 801b74e:	6122      	str	r2, [r4, #16]
 801b750:	3020      	adds	r0, #32
 801b752:	e7e3      	b.n	801b71c <__d2b+0x60>
 801b754:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b758:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b75c:	f8c9 0000 	str.w	r0, [r9]
 801b760:	6918      	ldr	r0, [r3, #16]
 801b762:	f7ff fd2b 	bl	801b1bc <__hi0bits>
 801b766:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b76a:	e7df      	b.n	801b72c <__d2b+0x70>
 801b76c:	080297c6 	.word	0x080297c6
 801b770:	08029838 	.word	0x08029838

0801b774 <_calloc_r>:
 801b774:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b776:	fba1 2402 	umull	r2, r4, r1, r2
 801b77a:	b94c      	cbnz	r4, 801b790 <_calloc_r+0x1c>
 801b77c:	4611      	mov	r1, r2
 801b77e:	9201      	str	r2, [sp, #4]
 801b780:	f000 f87a 	bl	801b878 <_malloc_r>
 801b784:	9a01      	ldr	r2, [sp, #4]
 801b786:	4605      	mov	r5, r0
 801b788:	b930      	cbnz	r0, 801b798 <_calloc_r+0x24>
 801b78a:	4628      	mov	r0, r5
 801b78c:	b003      	add	sp, #12
 801b78e:	bd30      	pop	{r4, r5, pc}
 801b790:	220c      	movs	r2, #12
 801b792:	6002      	str	r2, [r0, #0]
 801b794:	2500      	movs	r5, #0
 801b796:	e7f8      	b.n	801b78a <_calloc_r+0x16>
 801b798:	4621      	mov	r1, r4
 801b79a:	f7fe f84d 	bl	8019838 <memset>
 801b79e:	e7f4      	b.n	801b78a <_calloc_r+0x16>

0801b7a0 <_free_r>:
 801b7a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b7a2:	2900      	cmp	r1, #0
 801b7a4:	d044      	beq.n	801b830 <_free_r+0x90>
 801b7a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b7aa:	9001      	str	r0, [sp, #4]
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	f1a1 0404 	sub.w	r4, r1, #4
 801b7b2:	bfb8      	it	lt
 801b7b4:	18e4      	addlt	r4, r4, r3
 801b7b6:	f000 fe13 	bl	801c3e0 <__malloc_lock>
 801b7ba:	4a1e      	ldr	r2, [pc, #120]	; (801b834 <_free_r+0x94>)
 801b7bc:	9801      	ldr	r0, [sp, #4]
 801b7be:	6813      	ldr	r3, [r2, #0]
 801b7c0:	b933      	cbnz	r3, 801b7d0 <_free_r+0x30>
 801b7c2:	6063      	str	r3, [r4, #4]
 801b7c4:	6014      	str	r4, [r2, #0]
 801b7c6:	b003      	add	sp, #12
 801b7c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b7cc:	f000 be0e 	b.w	801c3ec <__malloc_unlock>
 801b7d0:	42a3      	cmp	r3, r4
 801b7d2:	d908      	bls.n	801b7e6 <_free_r+0x46>
 801b7d4:	6825      	ldr	r5, [r4, #0]
 801b7d6:	1961      	adds	r1, r4, r5
 801b7d8:	428b      	cmp	r3, r1
 801b7da:	bf01      	itttt	eq
 801b7dc:	6819      	ldreq	r1, [r3, #0]
 801b7de:	685b      	ldreq	r3, [r3, #4]
 801b7e0:	1949      	addeq	r1, r1, r5
 801b7e2:	6021      	streq	r1, [r4, #0]
 801b7e4:	e7ed      	b.n	801b7c2 <_free_r+0x22>
 801b7e6:	461a      	mov	r2, r3
 801b7e8:	685b      	ldr	r3, [r3, #4]
 801b7ea:	b10b      	cbz	r3, 801b7f0 <_free_r+0x50>
 801b7ec:	42a3      	cmp	r3, r4
 801b7ee:	d9fa      	bls.n	801b7e6 <_free_r+0x46>
 801b7f0:	6811      	ldr	r1, [r2, #0]
 801b7f2:	1855      	adds	r5, r2, r1
 801b7f4:	42a5      	cmp	r5, r4
 801b7f6:	d10b      	bne.n	801b810 <_free_r+0x70>
 801b7f8:	6824      	ldr	r4, [r4, #0]
 801b7fa:	4421      	add	r1, r4
 801b7fc:	1854      	adds	r4, r2, r1
 801b7fe:	42a3      	cmp	r3, r4
 801b800:	6011      	str	r1, [r2, #0]
 801b802:	d1e0      	bne.n	801b7c6 <_free_r+0x26>
 801b804:	681c      	ldr	r4, [r3, #0]
 801b806:	685b      	ldr	r3, [r3, #4]
 801b808:	6053      	str	r3, [r2, #4]
 801b80a:	4421      	add	r1, r4
 801b80c:	6011      	str	r1, [r2, #0]
 801b80e:	e7da      	b.n	801b7c6 <_free_r+0x26>
 801b810:	d902      	bls.n	801b818 <_free_r+0x78>
 801b812:	230c      	movs	r3, #12
 801b814:	6003      	str	r3, [r0, #0]
 801b816:	e7d6      	b.n	801b7c6 <_free_r+0x26>
 801b818:	6825      	ldr	r5, [r4, #0]
 801b81a:	1961      	adds	r1, r4, r5
 801b81c:	428b      	cmp	r3, r1
 801b81e:	bf04      	itt	eq
 801b820:	6819      	ldreq	r1, [r3, #0]
 801b822:	685b      	ldreq	r3, [r3, #4]
 801b824:	6063      	str	r3, [r4, #4]
 801b826:	bf04      	itt	eq
 801b828:	1949      	addeq	r1, r1, r5
 801b82a:	6021      	streq	r1, [r4, #0]
 801b82c:	6054      	str	r4, [r2, #4]
 801b82e:	e7ca      	b.n	801b7c6 <_free_r+0x26>
 801b830:	b003      	add	sp, #12
 801b832:	bd30      	pop	{r4, r5, pc}
 801b834:	200115e4 	.word	0x200115e4

0801b838 <sbrk_aligned>:
 801b838:	b570      	push	{r4, r5, r6, lr}
 801b83a:	4e0e      	ldr	r6, [pc, #56]	; (801b874 <sbrk_aligned+0x3c>)
 801b83c:	460c      	mov	r4, r1
 801b83e:	6831      	ldr	r1, [r6, #0]
 801b840:	4605      	mov	r5, r0
 801b842:	b911      	cbnz	r1, 801b84a <sbrk_aligned+0x12>
 801b844:	f000 fb42 	bl	801becc <_sbrk_r>
 801b848:	6030      	str	r0, [r6, #0]
 801b84a:	4621      	mov	r1, r4
 801b84c:	4628      	mov	r0, r5
 801b84e:	f000 fb3d 	bl	801becc <_sbrk_r>
 801b852:	1c43      	adds	r3, r0, #1
 801b854:	d00a      	beq.n	801b86c <sbrk_aligned+0x34>
 801b856:	1cc4      	adds	r4, r0, #3
 801b858:	f024 0403 	bic.w	r4, r4, #3
 801b85c:	42a0      	cmp	r0, r4
 801b85e:	d007      	beq.n	801b870 <sbrk_aligned+0x38>
 801b860:	1a21      	subs	r1, r4, r0
 801b862:	4628      	mov	r0, r5
 801b864:	f000 fb32 	bl	801becc <_sbrk_r>
 801b868:	3001      	adds	r0, #1
 801b86a:	d101      	bne.n	801b870 <sbrk_aligned+0x38>
 801b86c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801b870:	4620      	mov	r0, r4
 801b872:	bd70      	pop	{r4, r5, r6, pc}
 801b874:	200115e8 	.word	0x200115e8

0801b878 <_malloc_r>:
 801b878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b87c:	1ccd      	adds	r5, r1, #3
 801b87e:	f025 0503 	bic.w	r5, r5, #3
 801b882:	3508      	adds	r5, #8
 801b884:	2d0c      	cmp	r5, #12
 801b886:	bf38      	it	cc
 801b888:	250c      	movcc	r5, #12
 801b88a:	2d00      	cmp	r5, #0
 801b88c:	4607      	mov	r7, r0
 801b88e:	db01      	blt.n	801b894 <_malloc_r+0x1c>
 801b890:	42a9      	cmp	r1, r5
 801b892:	d905      	bls.n	801b8a0 <_malloc_r+0x28>
 801b894:	230c      	movs	r3, #12
 801b896:	603b      	str	r3, [r7, #0]
 801b898:	2600      	movs	r6, #0
 801b89a:	4630      	mov	r0, r6
 801b89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b8a0:	4e2e      	ldr	r6, [pc, #184]	; (801b95c <_malloc_r+0xe4>)
 801b8a2:	f000 fd9d 	bl	801c3e0 <__malloc_lock>
 801b8a6:	6833      	ldr	r3, [r6, #0]
 801b8a8:	461c      	mov	r4, r3
 801b8aa:	bb34      	cbnz	r4, 801b8fa <_malloc_r+0x82>
 801b8ac:	4629      	mov	r1, r5
 801b8ae:	4638      	mov	r0, r7
 801b8b0:	f7ff ffc2 	bl	801b838 <sbrk_aligned>
 801b8b4:	1c43      	adds	r3, r0, #1
 801b8b6:	4604      	mov	r4, r0
 801b8b8:	d14d      	bne.n	801b956 <_malloc_r+0xde>
 801b8ba:	6834      	ldr	r4, [r6, #0]
 801b8bc:	4626      	mov	r6, r4
 801b8be:	2e00      	cmp	r6, #0
 801b8c0:	d140      	bne.n	801b944 <_malloc_r+0xcc>
 801b8c2:	6823      	ldr	r3, [r4, #0]
 801b8c4:	4631      	mov	r1, r6
 801b8c6:	4638      	mov	r0, r7
 801b8c8:	eb04 0803 	add.w	r8, r4, r3
 801b8cc:	f000 fafe 	bl	801becc <_sbrk_r>
 801b8d0:	4580      	cmp	r8, r0
 801b8d2:	d13a      	bne.n	801b94a <_malloc_r+0xd2>
 801b8d4:	6821      	ldr	r1, [r4, #0]
 801b8d6:	3503      	adds	r5, #3
 801b8d8:	1a6d      	subs	r5, r5, r1
 801b8da:	f025 0503 	bic.w	r5, r5, #3
 801b8de:	3508      	adds	r5, #8
 801b8e0:	2d0c      	cmp	r5, #12
 801b8e2:	bf38      	it	cc
 801b8e4:	250c      	movcc	r5, #12
 801b8e6:	4629      	mov	r1, r5
 801b8e8:	4638      	mov	r0, r7
 801b8ea:	f7ff ffa5 	bl	801b838 <sbrk_aligned>
 801b8ee:	3001      	adds	r0, #1
 801b8f0:	d02b      	beq.n	801b94a <_malloc_r+0xd2>
 801b8f2:	6823      	ldr	r3, [r4, #0]
 801b8f4:	442b      	add	r3, r5
 801b8f6:	6023      	str	r3, [r4, #0]
 801b8f8:	e00e      	b.n	801b918 <_malloc_r+0xa0>
 801b8fa:	6822      	ldr	r2, [r4, #0]
 801b8fc:	1b52      	subs	r2, r2, r5
 801b8fe:	d41e      	bmi.n	801b93e <_malloc_r+0xc6>
 801b900:	2a0b      	cmp	r2, #11
 801b902:	d916      	bls.n	801b932 <_malloc_r+0xba>
 801b904:	1961      	adds	r1, r4, r5
 801b906:	42a3      	cmp	r3, r4
 801b908:	6025      	str	r5, [r4, #0]
 801b90a:	bf18      	it	ne
 801b90c:	6059      	strne	r1, [r3, #4]
 801b90e:	6863      	ldr	r3, [r4, #4]
 801b910:	bf08      	it	eq
 801b912:	6031      	streq	r1, [r6, #0]
 801b914:	5162      	str	r2, [r4, r5]
 801b916:	604b      	str	r3, [r1, #4]
 801b918:	4638      	mov	r0, r7
 801b91a:	f104 060b 	add.w	r6, r4, #11
 801b91e:	f000 fd65 	bl	801c3ec <__malloc_unlock>
 801b922:	f026 0607 	bic.w	r6, r6, #7
 801b926:	1d23      	adds	r3, r4, #4
 801b928:	1af2      	subs	r2, r6, r3
 801b92a:	d0b6      	beq.n	801b89a <_malloc_r+0x22>
 801b92c:	1b9b      	subs	r3, r3, r6
 801b92e:	50a3      	str	r3, [r4, r2]
 801b930:	e7b3      	b.n	801b89a <_malloc_r+0x22>
 801b932:	6862      	ldr	r2, [r4, #4]
 801b934:	42a3      	cmp	r3, r4
 801b936:	bf0c      	ite	eq
 801b938:	6032      	streq	r2, [r6, #0]
 801b93a:	605a      	strne	r2, [r3, #4]
 801b93c:	e7ec      	b.n	801b918 <_malloc_r+0xa0>
 801b93e:	4623      	mov	r3, r4
 801b940:	6864      	ldr	r4, [r4, #4]
 801b942:	e7b2      	b.n	801b8aa <_malloc_r+0x32>
 801b944:	4634      	mov	r4, r6
 801b946:	6876      	ldr	r6, [r6, #4]
 801b948:	e7b9      	b.n	801b8be <_malloc_r+0x46>
 801b94a:	230c      	movs	r3, #12
 801b94c:	603b      	str	r3, [r7, #0]
 801b94e:	4638      	mov	r0, r7
 801b950:	f000 fd4c 	bl	801c3ec <__malloc_unlock>
 801b954:	e7a1      	b.n	801b89a <_malloc_r+0x22>
 801b956:	6025      	str	r5, [r4, #0]
 801b958:	e7de      	b.n	801b918 <_malloc_r+0xa0>
 801b95a:	bf00      	nop
 801b95c:	200115e4 	.word	0x200115e4

0801b960 <__ssputs_r>:
 801b960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b964:	688e      	ldr	r6, [r1, #8]
 801b966:	429e      	cmp	r6, r3
 801b968:	4682      	mov	sl, r0
 801b96a:	460c      	mov	r4, r1
 801b96c:	4690      	mov	r8, r2
 801b96e:	461f      	mov	r7, r3
 801b970:	d838      	bhi.n	801b9e4 <__ssputs_r+0x84>
 801b972:	898a      	ldrh	r2, [r1, #12]
 801b974:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b978:	d032      	beq.n	801b9e0 <__ssputs_r+0x80>
 801b97a:	6825      	ldr	r5, [r4, #0]
 801b97c:	6909      	ldr	r1, [r1, #16]
 801b97e:	eba5 0901 	sub.w	r9, r5, r1
 801b982:	6965      	ldr	r5, [r4, #20]
 801b984:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b988:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b98c:	3301      	adds	r3, #1
 801b98e:	444b      	add	r3, r9
 801b990:	106d      	asrs	r5, r5, #1
 801b992:	429d      	cmp	r5, r3
 801b994:	bf38      	it	cc
 801b996:	461d      	movcc	r5, r3
 801b998:	0553      	lsls	r3, r2, #21
 801b99a:	d531      	bpl.n	801ba00 <__ssputs_r+0xa0>
 801b99c:	4629      	mov	r1, r5
 801b99e:	f7ff ff6b 	bl	801b878 <_malloc_r>
 801b9a2:	4606      	mov	r6, r0
 801b9a4:	b950      	cbnz	r0, 801b9bc <__ssputs_r+0x5c>
 801b9a6:	230c      	movs	r3, #12
 801b9a8:	f8ca 3000 	str.w	r3, [sl]
 801b9ac:	89a3      	ldrh	r3, [r4, #12]
 801b9ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b9b2:	81a3      	strh	r3, [r4, #12]
 801b9b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b9b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b9bc:	6921      	ldr	r1, [r4, #16]
 801b9be:	464a      	mov	r2, r9
 801b9c0:	f7fd ff12 	bl	80197e8 <memcpy>
 801b9c4:	89a3      	ldrh	r3, [r4, #12]
 801b9c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b9ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b9ce:	81a3      	strh	r3, [r4, #12]
 801b9d0:	6126      	str	r6, [r4, #16]
 801b9d2:	6165      	str	r5, [r4, #20]
 801b9d4:	444e      	add	r6, r9
 801b9d6:	eba5 0509 	sub.w	r5, r5, r9
 801b9da:	6026      	str	r6, [r4, #0]
 801b9dc:	60a5      	str	r5, [r4, #8]
 801b9de:	463e      	mov	r6, r7
 801b9e0:	42be      	cmp	r6, r7
 801b9e2:	d900      	bls.n	801b9e6 <__ssputs_r+0x86>
 801b9e4:	463e      	mov	r6, r7
 801b9e6:	6820      	ldr	r0, [r4, #0]
 801b9e8:	4632      	mov	r2, r6
 801b9ea:	4641      	mov	r1, r8
 801b9ec:	f7fd ff0a 	bl	8019804 <memmove>
 801b9f0:	68a3      	ldr	r3, [r4, #8]
 801b9f2:	1b9b      	subs	r3, r3, r6
 801b9f4:	60a3      	str	r3, [r4, #8]
 801b9f6:	6823      	ldr	r3, [r4, #0]
 801b9f8:	4433      	add	r3, r6
 801b9fa:	6023      	str	r3, [r4, #0]
 801b9fc:	2000      	movs	r0, #0
 801b9fe:	e7db      	b.n	801b9b8 <__ssputs_r+0x58>
 801ba00:	462a      	mov	r2, r5
 801ba02:	f000 fcf9 	bl	801c3f8 <_realloc_r>
 801ba06:	4606      	mov	r6, r0
 801ba08:	2800      	cmp	r0, #0
 801ba0a:	d1e1      	bne.n	801b9d0 <__ssputs_r+0x70>
 801ba0c:	6921      	ldr	r1, [r4, #16]
 801ba0e:	4650      	mov	r0, sl
 801ba10:	f7ff fec6 	bl	801b7a0 <_free_r>
 801ba14:	e7c7      	b.n	801b9a6 <__ssputs_r+0x46>
	...

0801ba18 <_svfiprintf_r>:
 801ba18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba1c:	4698      	mov	r8, r3
 801ba1e:	898b      	ldrh	r3, [r1, #12]
 801ba20:	061b      	lsls	r3, r3, #24
 801ba22:	b09d      	sub	sp, #116	; 0x74
 801ba24:	4607      	mov	r7, r0
 801ba26:	460d      	mov	r5, r1
 801ba28:	4614      	mov	r4, r2
 801ba2a:	d50e      	bpl.n	801ba4a <_svfiprintf_r+0x32>
 801ba2c:	690b      	ldr	r3, [r1, #16]
 801ba2e:	b963      	cbnz	r3, 801ba4a <_svfiprintf_r+0x32>
 801ba30:	2140      	movs	r1, #64	; 0x40
 801ba32:	f7ff ff21 	bl	801b878 <_malloc_r>
 801ba36:	6028      	str	r0, [r5, #0]
 801ba38:	6128      	str	r0, [r5, #16]
 801ba3a:	b920      	cbnz	r0, 801ba46 <_svfiprintf_r+0x2e>
 801ba3c:	230c      	movs	r3, #12
 801ba3e:	603b      	str	r3, [r7, #0]
 801ba40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ba44:	e0d1      	b.n	801bbea <_svfiprintf_r+0x1d2>
 801ba46:	2340      	movs	r3, #64	; 0x40
 801ba48:	616b      	str	r3, [r5, #20]
 801ba4a:	2300      	movs	r3, #0
 801ba4c:	9309      	str	r3, [sp, #36]	; 0x24
 801ba4e:	2320      	movs	r3, #32
 801ba50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ba54:	f8cd 800c 	str.w	r8, [sp, #12]
 801ba58:	2330      	movs	r3, #48	; 0x30
 801ba5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801bc04 <_svfiprintf_r+0x1ec>
 801ba5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ba62:	f04f 0901 	mov.w	r9, #1
 801ba66:	4623      	mov	r3, r4
 801ba68:	469a      	mov	sl, r3
 801ba6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ba6e:	b10a      	cbz	r2, 801ba74 <_svfiprintf_r+0x5c>
 801ba70:	2a25      	cmp	r2, #37	; 0x25
 801ba72:	d1f9      	bne.n	801ba68 <_svfiprintf_r+0x50>
 801ba74:	ebba 0b04 	subs.w	fp, sl, r4
 801ba78:	d00b      	beq.n	801ba92 <_svfiprintf_r+0x7a>
 801ba7a:	465b      	mov	r3, fp
 801ba7c:	4622      	mov	r2, r4
 801ba7e:	4629      	mov	r1, r5
 801ba80:	4638      	mov	r0, r7
 801ba82:	f7ff ff6d 	bl	801b960 <__ssputs_r>
 801ba86:	3001      	adds	r0, #1
 801ba88:	f000 80aa 	beq.w	801bbe0 <_svfiprintf_r+0x1c8>
 801ba8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ba8e:	445a      	add	r2, fp
 801ba90:	9209      	str	r2, [sp, #36]	; 0x24
 801ba92:	f89a 3000 	ldrb.w	r3, [sl]
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	f000 80a2 	beq.w	801bbe0 <_svfiprintf_r+0x1c8>
 801ba9c:	2300      	movs	r3, #0
 801ba9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801baa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801baa6:	f10a 0a01 	add.w	sl, sl, #1
 801baaa:	9304      	str	r3, [sp, #16]
 801baac:	9307      	str	r3, [sp, #28]
 801baae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bab2:	931a      	str	r3, [sp, #104]	; 0x68
 801bab4:	4654      	mov	r4, sl
 801bab6:	2205      	movs	r2, #5
 801bab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801babc:	4851      	ldr	r0, [pc, #324]	; (801bc04 <_svfiprintf_r+0x1ec>)
 801babe:	f7e4 fbd7 	bl	8000270 <memchr>
 801bac2:	9a04      	ldr	r2, [sp, #16]
 801bac4:	b9d8      	cbnz	r0, 801bafe <_svfiprintf_r+0xe6>
 801bac6:	06d0      	lsls	r0, r2, #27
 801bac8:	bf44      	itt	mi
 801baca:	2320      	movmi	r3, #32
 801bacc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bad0:	0711      	lsls	r1, r2, #28
 801bad2:	bf44      	itt	mi
 801bad4:	232b      	movmi	r3, #43	; 0x2b
 801bad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bada:	f89a 3000 	ldrb.w	r3, [sl]
 801bade:	2b2a      	cmp	r3, #42	; 0x2a
 801bae0:	d015      	beq.n	801bb0e <_svfiprintf_r+0xf6>
 801bae2:	9a07      	ldr	r2, [sp, #28]
 801bae4:	4654      	mov	r4, sl
 801bae6:	2000      	movs	r0, #0
 801bae8:	f04f 0c0a 	mov.w	ip, #10
 801baec:	4621      	mov	r1, r4
 801baee:	f811 3b01 	ldrb.w	r3, [r1], #1
 801baf2:	3b30      	subs	r3, #48	; 0x30
 801baf4:	2b09      	cmp	r3, #9
 801baf6:	d94e      	bls.n	801bb96 <_svfiprintf_r+0x17e>
 801baf8:	b1b0      	cbz	r0, 801bb28 <_svfiprintf_r+0x110>
 801bafa:	9207      	str	r2, [sp, #28]
 801bafc:	e014      	b.n	801bb28 <_svfiprintf_r+0x110>
 801bafe:	eba0 0308 	sub.w	r3, r0, r8
 801bb02:	fa09 f303 	lsl.w	r3, r9, r3
 801bb06:	4313      	orrs	r3, r2
 801bb08:	9304      	str	r3, [sp, #16]
 801bb0a:	46a2      	mov	sl, r4
 801bb0c:	e7d2      	b.n	801bab4 <_svfiprintf_r+0x9c>
 801bb0e:	9b03      	ldr	r3, [sp, #12]
 801bb10:	1d19      	adds	r1, r3, #4
 801bb12:	681b      	ldr	r3, [r3, #0]
 801bb14:	9103      	str	r1, [sp, #12]
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	bfbb      	ittet	lt
 801bb1a:	425b      	neglt	r3, r3
 801bb1c:	f042 0202 	orrlt.w	r2, r2, #2
 801bb20:	9307      	strge	r3, [sp, #28]
 801bb22:	9307      	strlt	r3, [sp, #28]
 801bb24:	bfb8      	it	lt
 801bb26:	9204      	strlt	r2, [sp, #16]
 801bb28:	7823      	ldrb	r3, [r4, #0]
 801bb2a:	2b2e      	cmp	r3, #46	; 0x2e
 801bb2c:	d10c      	bne.n	801bb48 <_svfiprintf_r+0x130>
 801bb2e:	7863      	ldrb	r3, [r4, #1]
 801bb30:	2b2a      	cmp	r3, #42	; 0x2a
 801bb32:	d135      	bne.n	801bba0 <_svfiprintf_r+0x188>
 801bb34:	9b03      	ldr	r3, [sp, #12]
 801bb36:	1d1a      	adds	r2, r3, #4
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	9203      	str	r2, [sp, #12]
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	bfb8      	it	lt
 801bb40:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801bb44:	3402      	adds	r4, #2
 801bb46:	9305      	str	r3, [sp, #20]
 801bb48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801bc14 <_svfiprintf_r+0x1fc>
 801bb4c:	7821      	ldrb	r1, [r4, #0]
 801bb4e:	2203      	movs	r2, #3
 801bb50:	4650      	mov	r0, sl
 801bb52:	f7e4 fb8d 	bl	8000270 <memchr>
 801bb56:	b140      	cbz	r0, 801bb6a <_svfiprintf_r+0x152>
 801bb58:	2340      	movs	r3, #64	; 0x40
 801bb5a:	eba0 000a 	sub.w	r0, r0, sl
 801bb5e:	fa03 f000 	lsl.w	r0, r3, r0
 801bb62:	9b04      	ldr	r3, [sp, #16]
 801bb64:	4303      	orrs	r3, r0
 801bb66:	3401      	adds	r4, #1
 801bb68:	9304      	str	r3, [sp, #16]
 801bb6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bb6e:	4826      	ldr	r0, [pc, #152]	; (801bc08 <_svfiprintf_r+0x1f0>)
 801bb70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bb74:	2206      	movs	r2, #6
 801bb76:	f7e4 fb7b 	bl	8000270 <memchr>
 801bb7a:	2800      	cmp	r0, #0
 801bb7c:	d038      	beq.n	801bbf0 <_svfiprintf_r+0x1d8>
 801bb7e:	4b23      	ldr	r3, [pc, #140]	; (801bc0c <_svfiprintf_r+0x1f4>)
 801bb80:	bb1b      	cbnz	r3, 801bbca <_svfiprintf_r+0x1b2>
 801bb82:	9b03      	ldr	r3, [sp, #12]
 801bb84:	3307      	adds	r3, #7
 801bb86:	f023 0307 	bic.w	r3, r3, #7
 801bb8a:	3308      	adds	r3, #8
 801bb8c:	9303      	str	r3, [sp, #12]
 801bb8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb90:	4433      	add	r3, r6
 801bb92:	9309      	str	r3, [sp, #36]	; 0x24
 801bb94:	e767      	b.n	801ba66 <_svfiprintf_r+0x4e>
 801bb96:	fb0c 3202 	mla	r2, ip, r2, r3
 801bb9a:	460c      	mov	r4, r1
 801bb9c:	2001      	movs	r0, #1
 801bb9e:	e7a5      	b.n	801baec <_svfiprintf_r+0xd4>
 801bba0:	2300      	movs	r3, #0
 801bba2:	3401      	adds	r4, #1
 801bba4:	9305      	str	r3, [sp, #20]
 801bba6:	4619      	mov	r1, r3
 801bba8:	f04f 0c0a 	mov.w	ip, #10
 801bbac:	4620      	mov	r0, r4
 801bbae:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bbb2:	3a30      	subs	r2, #48	; 0x30
 801bbb4:	2a09      	cmp	r2, #9
 801bbb6:	d903      	bls.n	801bbc0 <_svfiprintf_r+0x1a8>
 801bbb8:	2b00      	cmp	r3, #0
 801bbba:	d0c5      	beq.n	801bb48 <_svfiprintf_r+0x130>
 801bbbc:	9105      	str	r1, [sp, #20]
 801bbbe:	e7c3      	b.n	801bb48 <_svfiprintf_r+0x130>
 801bbc0:	fb0c 2101 	mla	r1, ip, r1, r2
 801bbc4:	4604      	mov	r4, r0
 801bbc6:	2301      	movs	r3, #1
 801bbc8:	e7f0      	b.n	801bbac <_svfiprintf_r+0x194>
 801bbca:	ab03      	add	r3, sp, #12
 801bbcc:	9300      	str	r3, [sp, #0]
 801bbce:	462a      	mov	r2, r5
 801bbd0:	4b0f      	ldr	r3, [pc, #60]	; (801bc10 <_svfiprintf_r+0x1f8>)
 801bbd2:	a904      	add	r1, sp, #16
 801bbd4:	4638      	mov	r0, r7
 801bbd6:	f7fd fec7 	bl	8019968 <_printf_float>
 801bbda:	1c42      	adds	r2, r0, #1
 801bbdc:	4606      	mov	r6, r0
 801bbde:	d1d6      	bne.n	801bb8e <_svfiprintf_r+0x176>
 801bbe0:	89ab      	ldrh	r3, [r5, #12]
 801bbe2:	065b      	lsls	r3, r3, #25
 801bbe4:	f53f af2c 	bmi.w	801ba40 <_svfiprintf_r+0x28>
 801bbe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bbea:	b01d      	add	sp, #116	; 0x74
 801bbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbf0:	ab03      	add	r3, sp, #12
 801bbf2:	9300      	str	r3, [sp, #0]
 801bbf4:	462a      	mov	r2, r5
 801bbf6:	4b06      	ldr	r3, [pc, #24]	; (801bc10 <_svfiprintf_r+0x1f8>)
 801bbf8:	a904      	add	r1, sp, #16
 801bbfa:	4638      	mov	r0, r7
 801bbfc:	f7fe f940 	bl	8019e80 <_printf_i>
 801bc00:	e7eb      	b.n	801bbda <_svfiprintf_r+0x1c2>
 801bc02:	bf00      	nop
 801bc04:	08029994 	.word	0x08029994
 801bc08:	0802999e 	.word	0x0802999e
 801bc0c:	08019969 	.word	0x08019969
 801bc10:	0801b961 	.word	0x0801b961
 801bc14:	0802999a 	.word	0x0802999a

0801bc18 <__sfputc_r>:
 801bc18:	6893      	ldr	r3, [r2, #8]
 801bc1a:	3b01      	subs	r3, #1
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	b410      	push	{r4}
 801bc20:	6093      	str	r3, [r2, #8]
 801bc22:	da08      	bge.n	801bc36 <__sfputc_r+0x1e>
 801bc24:	6994      	ldr	r4, [r2, #24]
 801bc26:	42a3      	cmp	r3, r4
 801bc28:	db01      	blt.n	801bc2e <__sfputc_r+0x16>
 801bc2a:	290a      	cmp	r1, #10
 801bc2c:	d103      	bne.n	801bc36 <__sfputc_r+0x1e>
 801bc2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bc32:	f000 b99f 	b.w	801bf74 <__swbuf_r>
 801bc36:	6813      	ldr	r3, [r2, #0]
 801bc38:	1c58      	adds	r0, r3, #1
 801bc3a:	6010      	str	r0, [r2, #0]
 801bc3c:	7019      	strb	r1, [r3, #0]
 801bc3e:	4608      	mov	r0, r1
 801bc40:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bc44:	4770      	bx	lr

0801bc46 <__sfputs_r>:
 801bc46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc48:	4606      	mov	r6, r0
 801bc4a:	460f      	mov	r7, r1
 801bc4c:	4614      	mov	r4, r2
 801bc4e:	18d5      	adds	r5, r2, r3
 801bc50:	42ac      	cmp	r4, r5
 801bc52:	d101      	bne.n	801bc58 <__sfputs_r+0x12>
 801bc54:	2000      	movs	r0, #0
 801bc56:	e007      	b.n	801bc68 <__sfputs_r+0x22>
 801bc58:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc5c:	463a      	mov	r2, r7
 801bc5e:	4630      	mov	r0, r6
 801bc60:	f7ff ffda 	bl	801bc18 <__sfputc_r>
 801bc64:	1c43      	adds	r3, r0, #1
 801bc66:	d1f3      	bne.n	801bc50 <__sfputs_r+0xa>
 801bc68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bc6c <_vfiprintf_r>:
 801bc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc70:	460d      	mov	r5, r1
 801bc72:	b09d      	sub	sp, #116	; 0x74
 801bc74:	4614      	mov	r4, r2
 801bc76:	4698      	mov	r8, r3
 801bc78:	4606      	mov	r6, r0
 801bc7a:	b118      	cbz	r0, 801bc84 <_vfiprintf_r+0x18>
 801bc7c:	6983      	ldr	r3, [r0, #24]
 801bc7e:	b90b      	cbnz	r3, 801bc84 <_vfiprintf_r+0x18>
 801bc80:	f7ff f934 	bl	801aeec <__sinit>
 801bc84:	4b89      	ldr	r3, [pc, #548]	; (801beac <_vfiprintf_r+0x240>)
 801bc86:	429d      	cmp	r5, r3
 801bc88:	d11b      	bne.n	801bcc2 <_vfiprintf_r+0x56>
 801bc8a:	6875      	ldr	r5, [r6, #4]
 801bc8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bc8e:	07d9      	lsls	r1, r3, #31
 801bc90:	d405      	bmi.n	801bc9e <_vfiprintf_r+0x32>
 801bc92:	89ab      	ldrh	r3, [r5, #12]
 801bc94:	059a      	lsls	r2, r3, #22
 801bc96:	d402      	bmi.n	801bc9e <_vfiprintf_r+0x32>
 801bc98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bc9a:	f7ff f9dc 	bl	801b056 <__retarget_lock_acquire_recursive>
 801bc9e:	89ab      	ldrh	r3, [r5, #12]
 801bca0:	071b      	lsls	r3, r3, #28
 801bca2:	d501      	bpl.n	801bca8 <_vfiprintf_r+0x3c>
 801bca4:	692b      	ldr	r3, [r5, #16]
 801bca6:	b9eb      	cbnz	r3, 801bce4 <_vfiprintf_r+0x78>
 801bca8:	4629      	mov	r1, r5
 801bcaa:	4630      	mov	r0, r6
 801bcac:	f000 f9c6 	bl	801c03c <__swsetup_r>
 801bcb0:	b1c0      	cbz	r0, 801bce4 <_vfiprintf_r+0x78>
 801bcb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bcb4:	07dc      	lsls	r4, r3, #31
 801bcb6:	d50e      	bpl.n	801bcd6 <_vfiprintf_r+0x6a>
 801bcb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bcbc:	b01d      	add	sp, #116	; 0x74
 801bcbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcc2:	4b7b      	ldr	r3, [pc, #492]	; (801beb0 <_vfiprintf_r+0x244>)
 801bcc4:	429d      	cmp	r5, r3
 801bcc6:	d101      	bne.n	801bccc <_vfiprintf_r+0x60>
 801bcc8:	68b5      	ldr	r5, [r6, #8]
 801bcca:	e7df      	b.n	801bc8c <_vfiprintf_r+0x20>
 801bccc:	4b79      	ldr	r3, [pc, #484]	; (801beb4 <_vfiprintf_r+0x248>)
 801bcce:	429d      	cmp	r5, r3
 801bcd0:	bf08      	it	eq
 801bcd2:	68f5      	ldreq	r5, [r6, #12]
 801bcd4:	e7da      	b.n	801bc8c <_vfiprintf_r+0x20>
 801bcd6:	89ab      	ldrh	r3, [r5, #12]
 801bcd8:	0598      	lsls	r0, r3, #22
 801bcda:	d4ed      	bmi.n	801bcb8 <_vfiprintf_r+0x4c>
 801bcdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bcde:	f7ff f9bb 	bl	801b058 <__retarget_lock_release_recursive>
 801bce2:	e7e9      	b.n	801bcb8 <_vfiprintf_r+0x4c>
 801bce4:	2300      	movs	r3, #0
 801bce6:	9309      	str	r3, [sp, #36]	; 0x24
 801bce8:	2320      	movs	r3, #32
 801bcea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bcee:	f8cd 800c 	str.w	r8, [sp, #12]
 801bcf2:	2330      	movs	r3, #48	; 0x30
 801bcf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801beb8 <_vfiprintf_r+0x24c>
 801bcf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bcfc:	f04f 0901 	mov.w	r9, #1
 801bd00:	4623      	mov	r3, r4
 801bd02:	469a      	mov	sl, r3
 801bd04:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bd08:	b10a      	cbz	r2, 801bd0e <_vfiprintf_r+0xa2>
 801bd0a:	2a25      	cmp	r2, #37	; 0x25
 801bd0c:	d1f9      	bne.n	801bd02 <_vfiprintf_r+0x96>
 801bd0e:	ebba 0b04 	subs.w	fp, sl, r4
 801bd12:	d00b      	beq.n	801bd2c <_vfiprintf_r+0xc0>
 801bd14:	465b      	mov	r3, fp
 801bd16:	4622      	mov	r2, r4
 801bd18:	4629      	mov	r1, r5
 801bd1a:	4630      	mov	r0, r6
 801bd1c:	f7ff ff93 	bl	801bc46 <__sfputs_r>
 801bd20:	3001      	adds	r0, #1
 801bd22:	f000 80aa 	beq.w	801be7a <_vfiprintf_r+0x20e>
 801bd26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bd28:	445a      	add	r2, fp
 801bd2a:	9209      	str	r2, [sp, #36]	; 0x24
 801bd2c:	f89a 3000 	ldrb.w	r3, [sl]
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	f000 80a2 	beq.w	801be7a <_vfiprintf_r+0x20e>
 801bd36:	2300      	movs	r3, #0
 801bd38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bd3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bd40:	f10a 0a01 	add.w	sl, sl, #1
 801bd44:	9304      	str	r3, [sp, #16]
 801bd46:	9307      	str	r3, [sp, #28]
 801bd48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bd4c:	931a      	str	r3, [sp, #104]	; 0x68
 801bd4e:	4654      	mov	r4, sl
 801bd50:	2205      	movs	r2, #5
 801bd52:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bd56:	4858      	ldr	r0, [pc, #352]	; (801beb8 <_vfiprintf_r+0x24c>)
 801bd58:	f7e4 fa8a 	bl	8000270 <memchr>
 801bd5c:	9a04      	ldr	r2, [sp, #16]
 801bd5e:	b9d8      	cbnz	r0, 801bd98 <_vfiprintf_r+0x12c>
 801bd60:	06d1      	lsls	r1, r2, #27
 801bd62:	bf44      	itt	mi
 801bd64:	2320      	movmi	r3, #32
 801bd66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bd6a:	0713      	lsls	r3, r2, #28
 801bd6c:	bf44      	itt	mi
 801bd6e:	232b      	movmi	r3, #43	; 0x2b
 801bd70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bd74:	f89a 3000 	ldrb.w	r3, [sl]
 801bd78:	2b2a      	cmp	r3, #42	; 0x2a
 801bd7a:	d015      	beq.n	801bda8 <_vfiprintf_r+0x13c>
 801bd7c:	9a07      	ldr	r2, [sp, #28]
 801bd7e:	4654      	mov	r4, sl
 801bd80:	2000      	movs	r0, #0
 801bd82:	f04f 0c0a 	mov.w	ip, #10
 801bd86:	4621      	mov	r1, r4
 801bd88:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bd8c:	3b30      	subs	r3, #48	; 0x30
 801bd8e:	2b09      	cmp	r3, #9
 801bd90:	d94e      	bls.n	801be30 <_vfiprintf_r+0x1c4>
 801bd92:	b1b0      	cbz	r0, 801bdc2 <_vfiprintf_r+0x156>
 801bd94:	9207      	str	r2, [sp, #28]
 801bd96:	e014      	b.n	801bdc2 <_vfiprintf_r+0x156>
 801bd98:	eba0 0308 	sub.w	r3, r0, r8
 801bd9c:	fa09 f303 	lsl.w	r3, r9, r3
 801bda0:	4313      	orrs	r3, r2
 801bda2:	9304      	str	r3, [sp, #16]
 801bda4:	46a2      	mov	sl, r4
 801bda6:	e7d2      	b.n	801bd4e <_vfiprintf_r+0xe2>
 801bda8:	9b03      	ldr	r3, [sp, #12]
 801bdaa:	1d19      	adds	r1, r3, #4
 801bdac:	681b      	ldr	r3, [r3, #0]
 801bdae:	9103      	str	r1, [sp, #12]
 801bdb0:	2b00      	cmp	r3, #0
 801bdb2:	bfbb      	ittet	lt
 801bdb4:	425b      	neglt	r3, r3
 801bdb6:	f042 0202 	orrlt.w	r2, r2, #2
 801bdba:	9307      	strge	r3, [sp, #28]
 801bdbc:	9307      	strlt	r3, [sp, #28]
 801bdbe:	bfb8      	it	lt
 801bdc0:	9204      	strlt	r2, [sp, #16]
 801bdc2:	7823      	ldrb	r3, [r4, #0]
 801bdc4:	2b2e      	cmp	r3, #46	; 0x2e
 801bdc6:	d10c      	bne.n	801bde2 <_vfiprintf_r+0x176>
 801bdc8:	7863      	ldrb	r3, [r4, #1]
 801bdca:	2b2a      	cmp	r3, #42	; 0x2a
 801bdcc:	d135      	bne.n	801be3a <_vfiprintf_r+0x1ce>
 801bdce:	9b03      	ldr	r3, [sp, #12]
 801bdd0:	1d1a      	adds	r2, r3, #4
 801bdd2:	681b      	ldr	r3, [r3, #0]
 801bdd4:	9203      	str	r2, [sp, #12]
 801bdd6:	2b00      	cmp	r3, #0
 801bdd8:	bfb8      	it	lt
 801bdda:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801bdde:	3402      	adds	r4, #2
 801bde0:	9305      	str	r3, [sp, #20]
 801bde2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801bec8 <_vfiprintf_r+0x25c>
 801bde6:	7821      	ldrb	r1, [r4, #0]
 801bde8:	2203      	movs	r2, #3
 801bdea:	4650      	mov	r0, sl
 801bdec:	f7e4 fa40 	bl	8000270 <memchr>
 801bdf0:	b140      	cbz	r0, 801be04 <_vfiprintf_r+0x198>
 801bdf2:	2340      	movs	r3, #64	; 0x40
 801bdf4:	eba0 000a 	sub.w	r0, r0, sl
 801bdf8:	fa03 f000 	lsl.w	r0, r3, r0
 801bdfc:	9b04      	ldr	r3, [sp, #16]
 801bdfe:	4303      	orrs	r3, r0
 801be00:	3401      	adds	r4, #1
 801be02:	9304      	str	r3, [sp, #16]
 801be04:	f814 1b01 	ldrb.w	r1, [r4], #1
 801be08:	482c      	ldr	r0, [pc, #176]	; (801bebc <_vfiprintf_r+0x250>)
 801be0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801be0e:	2206      	movs	r2, #6
 801be10:	f7e4 fa2e 	bl	8000270 <memchr>
 801be14:	2800      	cmp	r0, #0
 801be16:	d03f      	beq.n	801be98 <_vfiprintf_r+0x22c>
 801be18:	4b29      	ldr	r3, [pc, #164]	; (801bec0 <_vfiprintf_r+0x254>)
 801be1a:	bb1b      	cbnz	r3, 801be64 <_vfiprintf_r+0x1f8>
 801be1c:	9b03      	ldr	r3, [sp, #12]
 801be1e:	3307      	adds	r3, #7
 801be20:	f023 0307 	bic.w	r3, r3, #7
 801be24:	3308      	adds	r3, #8
 801be26:	9303      	str	r3, [sp, #12]
 801be28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be2a:	443b      	add	r3, r7
 801be2c:	9309      	str	r3, [sp, #36]	; 0x24
 801be2e:	e767      	b.n	801bd00 <_vfiprintf_r+0x94>
 801be30:	fb0c 3202 	mla	r2, ip, r2, r3
 801be34:	460c      	mov	r4, r1
 801be36:	2001      	movs	r0, #1
 801be38:	e7a5      	b.n	801bd86 <_vfiprintf_r+0x11a>
 801be3a:	2300      	movs	r3, #0
 801be3c:	3401      	adds	r4, #1
 801be3e:	9305      	str	r3, [sp, #20]
 801be40:	4619      	mov	r1, r3
 801be42:	f04f 0c0a 	mov.w	ip, #10
 801be46:	4620      	mov	r0, r4
 801be48:	f810 2b01 	ldrb.w	r2, [r0], #1
 801be4c:	3a30      	subs	r2, #48	; 0x30
 801be4e:	2a09      	cmp	r2, #9
 801be50:	d903      	bls.n	801be5a <_vfiprintf_r+0x1ee>
 801be52:	2b00      	cmp	r3, #0
 801be54:	d0c5      	beq.n	801bde2 <_vfiprintf_r+0x176>
 801be56:	9105      	str	r1, [sp, #20]
 801be58:	e7c3      	b.n	801bde2 <_vfiprintf_r+0x176>
 801be5a:	fb0c 2101 	mla	r1, ip, r1, r2
 801be5e:	4604      	mov	r4, r0
 801be60:	2301      	movs	r3, #1
 801be62:	e7f0      	b.n	801be46 <_vfiprintf_r+0x1da>
 801be64:	ab03      	add	r3, sp, #12
 801be66:	9300      	str	r3, [sp, #0]
 801be68:	462a      	mov	r2, r5
 801be6a:	4b16      	ldr	r3, [pc, #88]	; (801bec4 <_vfiprintf_r+0x258>)
 801be6c:	a904      	add	r1, sp, #16
 801be6e:	4630      	mov	r0, r6
 801be70:	f7fd fd7a 	bl	8019968 <_printf_float>
 801be74:	4607      	mov	r7, r0
 801be76:	1c78      	adds	r0, r7, #1
 801be78:	d1d6      	bne.n	801be28 <_vfiprintf_r+0x1bc>
 801be7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801be7c:	07d9      	lsls	r1, r3, #31
 801be7e:	d405      	bmi.n	801be8c <_vfiprintf_r+0x220>
 801be80:	89ab      	ldrh	r3, [r5, #12]
 801be82:	059a      	lsls	r2, r3, #22
 801be84:	d402      	bmi.n	801be8c <_vfiprintf_r+0x220>
 801be86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801be88:	f7ff f8e6 	bl	801b058 <__retarget_lock_release_recursive>
 801be8c:	89ab      	ldrh	r3, [r5, #12]
 801be8e:	065b      	lsls	r3, r3, #25
 801be90:	f53f af12 	bmi.w	801bcb8 <_vfiprintf_r+0x4c>
 801be94:	9809      	ldr	r0, [sp, #36]	; 0x24
 801be96:	e711      	b.n	801bcbc <_vfiprintf_r+0x50>
 801be98:	ab03      	add	r3, sp, #12
 801be9a:	9300      	str	r3, [sp, #0]
 801be9c:	462a      	mov	r2, r5
 801be9e:	4b09      	ldr	r3, [pc, #36]	; (801bec4 <_vfiprintf_r+0x258>)
 801bea0:	a904      	add	r1, sp, #16
 801bea2:	4630      	mov	r0, r6
 801bea4:	f7fd ffec 	bl	8019e80 <_printf_i>
 801bea8:	e7e4      	b.n	801be74 <_vfiprintf_r+0x208>
 801beaa:	bf00      	nop
 801beac:	080297f8 	.word	0x080297f8
 801beb0:	08029818 	.word	0x08029818
 801beb4:	080297d8 	.word	0x080297d8
 801beb8:	08029994 	.word	0x08029994
 801bebc:	0802999e 	.word	0x0802999e
 801bec0:	08019969 	.word	0x08019969
 801bec4:	0801bc47 	.word	0x0801bc47
 801bec8:	0802999a 	.word	0x0802999a

0801becc <_sbrk_r>:
 801becc:	b538      	push	{r3, r4, r5, lr}
 801bece:	4d06      	ldr	r5, [pc, #24]	; (801bee8 <_sbrk_r+0x1c>)
 801bed0:	2300      	movs	r3, #0
 801bed2:	4604      	mov	r4, r0
 801bed4:	4608      	mov	r0, r1
 801bed6:	602b      	str	r3, [r5, #0]
 801bed8:	f7e5 fab6 	bl	8001448 <_sbrk>
 801bedc:	1c43      	adds	r3, r0, #1
 801bede:	d102      	bne.n	801bee6 <_sbrk_r+0x1a>
 801bee0:	682b      	ldr	r3, [r5, #0]
 801bee2:	b103      	cbz	r3, 801bee6 <_sbrk_r+0x1a>
 801bee4:	6023      	str	r3, [r4, #0]
 801bee6:	bd38      	pop	{r3, r4, r5, pc}
 801bee8:	200115d8 	.word	0x200115d8

0801beec <__sread>:
 801beec:	b510      	push	{r4, lr}
 801beee:	460c      	mov	r4, r1
 801bef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bef4:	f000 fab0 	bl	801c458 <_read_r>
 801bef8:	2800      	cmp	r0, #0
 801befa:	bfab      	itete	ge
 801befc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801befe:	89a3      	ldrhlt	r3, [r4, #12]
 801bf00:	181b      	addge	r3, r3, r0
 801bf02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801bf06:	bfac      	ite	ge
 801bf08:	6563      	strge	r3, [r4, #84]	; 0x54
 801bf0a:	81a3      	strhlt	r3, [r4, #12]
 801bf0c:	bd10      	pop	{r4, pc}

0801bf0e <__swrite>:
 801bf0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf12:	461f      	mov	r7, r3
 801bf14:	898b      	ldrh	r3, [r1, #12]
 801bf16:	05db      	lsls	r3, r3, #23
 801bf18:	4605      	mov	r5, r0
 801bf1a:	460c      	mov	r4, r1
 801bf1c:	4616      	mov	r6, r2
 801bf1e:	d505      	bpl.n	801bf2c <__swrite+0x1e>
 801bf20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf24:	2302      	movs	r3, #2
 801bf26:	2200      	movs	r2, #0
 801bf28:	f000 f9d0 	bl	801c2cc <_lseek_r>
 801bf2c:	89a3      	ldrh	r3, [r4, #12]
 801bf2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bf32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bf36:	81a3      	strh	r3, [r4, #12]
 801bf38:	4632      	mov	r2, r6
 801bf3a:	463b      	mov	r3, r7
 801bf3c:	4628      	mov	r0, r5
 801bf3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bf42:	f000 b869 	b.w	801c018 <_write_r>

0801bf46 <__sseek>:
 801bf46:	b510      	push	{r4, lr}
 801bf48:	460c      	mov	r4, r1
 801bf4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf4e:	f000 f9bd 	bl	801c2cc <_lseek_r>
 801bf52:	1c43      	adds	r3, r0, #1
 801bf54:	89a3      	ldrh	r3, [r4, #12]
 801bf56:	bf15      	itete	ne
 801bf58:	6560      	strne	r0, [r4, #84]	; 0x54
 801bf5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801bf5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801bf62:	81a3      	strheq	r3, [r4, #12]
 801bf64:	bf18      	it	ne
 801bf66:	81a3      	strhne	r3, [r4, #12]
 801bf68:	bd10      	pop	{r4, pc}

0801bf6a <__sclose>:
 801bf6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf6e:	f000 b8db 	b.w	801c128 <_close_r>
	...

0801bf74 <__swbuf_r>:
 801bf74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf76:	460e      	mov	r6, r1
 801bf78:	4614      	mov	r4, r2
 801bf7a:	4605      	mov	r5, r0
 801bf7c:	b118      	cbz	r0, 801bf86 <__swbuf_r+0x12>
 801bf7e:	6983      	ldr	r3, [r0, #24]
 801bf80:	b90b      	cbnz	r3, 801bf86 <__swbuf_r+0x12>
 801bf82:	f7fe ffb3 	bl	801aeec <__sinit>
 801bf86:	4b21      	ldr	r3, [pc, #132]	; (801c00c <__swbuf_r+0x98>)
 801bf88:	429c      	cmp	r4, r3
 801bf8a:	d12b      	bne.n	801bfe4 <__swbuf_r+0x70>
 801bf8c:	686c      	ldr	r4, [r5, #4]
 801bf8e:	69a3      	ldr	r3, [r4, #24]
 801bf90:	60a3      	str	r3, [r4, #8]
 801bf92:	89a3      	ldrh	r3, [r4, #12]
 801bf94:	071a      	lsls	r2, r3, #28
 801bf96:	d52f      	bpl.n	801bff8 <__swbuf_r+0x84>
 801bf98:	6923      	ldr	r3, [r4, #16]
 801bf9a:	b36b      	cbz	r3, 801bff8 <__swbuf_r+0x84>
 801bf9c:	6923      	ldr	r3, [r4, #16]
 801bf9e:	6820      	ldr	r0, [r4, #0]
 801bfa0:	1ac0      	subs	r0, r0, r3
 801bfa2:	6963      	ldr	r3, [r4, #20]
 801bfa4:	b2f6      	uxtb	r6, r6
 801bfa6:	4283      	cmp	r3, r0
 801bfa8:	4637      	mov	r7, r6
 801bfaa:	dc04      	bgt.n	801bfb6 <__swbuf_r+0x42>
 801bfac:	4621      	mov	r1, r4
 801bfae:	4628      	mov	r0, r5
 801bfb0:	f000 f950 	bl	801c254 <_fflush_r>
 801bfb4:	bb30      	cbnz	r0, 801c004 <__swbuf_r+0x90>
 801bfb6:	68a3      	ldr	r3, [r4, #8]
 801bfb8:	3b01      	subs	r3, #1
 801bfba:	60a3      	str	r3, [r4, #8]
 801bfbc:	6823      	ldr	r3, [r4, #0]
 801bfbe:	1c5a      	adds	r2, r3, #1
 801bfc0:	6022      	str	r2, [r4, #0]
 801bfc2:	701e      	strb	r6, [r3, #0]
 801bfc4:	6963      	ldr	r3, [r4, #20]
 801bfc6:	3001      	adds	r0, #1
 801bfc8:	4283      	cmp	r3, r0
 801bfca:	d004      	beq.n	801bfd6 <__swbuf_r+0x62>
 801bfcc:	89a3      	ldrh	r3, [r4, #12]
 801bfce:	07db      	lsls	r3, r3, #31
 801bfd0:	d506      	bpl.n	801bfe0 <__swbuf_r+0x6c>
 801bfd2:	2e0a      	cmp	r6, #10
 801bfd4:	d104      	bne.n	801bfe0 <__swbuf_r+0x6c>
 801bfd6:	4621      	mov	r1, r4
 801bfd8:	4628      	mov	r0, r5
 801bfda:	f000 f93b 	bl	801c254 <_fflush_r>
 801bfde:	b988      	cbnz	r0, 801c004 <__swbuf_r+0x90>
 801bfe0:	4638      	mov	r0, r7
 801bfe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bfe4:	4b0a      	ldr	r3, [pc, #40]	; (801c010 <__swbuf_r+0x9c>)
 801bfe6:	429c      	cmp	r4, r3
 801bfe8:	d101      	bne.n	801bfee <__swbuf_r+0x7a>
 801bfea:	68ac      	ldr	r4, [r5, #8]
 801bfec:	e7cf      	b.n	801bf8e <__swbuf_r+0x1a>
 801bfee:	4b09      	ldr	r3, [pc, #36]	; (801c014 <__swbuf_r+0xa0>)
 801bff0:	429c      	cmp	r4, r3
 801bff2:	bf08      	it	eq
 801bff4:	68ec      	ldreq	r4, [r5, #12]
 801bff6:	e7ca      	b.n	801bf8e <__swbuf_r+0x1a>
 801bff8:	4621      	mov	r1, r4
 801bffa:	4628      	mov	r0, r5
 801bffc:	f000 f81e 	bl	801c03c <__swsetup_r>
 801c000:	2800      	cmp	r0, #0
 801c002:	d0cb      	beq.n	801bf9c <__swbuf_r+0x28>
 801c004:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801c008:	e7ea      	b.n	801bfe0 <__swbuf_r+0x6c>
 801c00a:	bf00      	nop
 801c00c:	080297f8 	.word	0x080297f8
 801c010:	08029818 	.word	0x08029818
 801c014:	080297d8 	.word	0x080297d8

0801c018 <_write_r>:
 801c018:	b538      	push	{r3, r4, r5, lr}
 801c01a:	4d07      	ldr	r5, [pc, #28]	; (801c038 <_write_r+0x20>)
 801c01c:	4604      	mov	r4, r0
 801c01e:	4608      	mov	r0, r1
 801c020:	4611      	mov	r1, r2
 801c022:	2200      	movs	r2, #0
 801c024:	602a      	str	r2, [r5, #0]
 801c026:	461a      	mov	r2, r3
 801c028:	f7e5 f9bd 	bl	80013a6 <_write>
 801c02c:	1c43      	adds	r3, r0, #1
 801c02e:	d102      	bne.n	801c036 <_write_r+0x1e>
 801c030:	682b      	ldr	r3, [r5, #0]
 801c032:	b103      	cbz	r3, 801c036 <_write_r+0x1e>
 801c034:	6023      	str	r3, [r4, #0]
 801c036:	bd38      	pop	{r3, r4, r5, pc}
 801c038:	200115d8 	.word	0x200115d8

0801c03c <__swsetup_r>:
 801c03c:	4b32      	ldr	r3, [pc, #200]	; (801c108 <__swsetup_r+0xcc>)
 801c03e:	b570      	push	{r4, r5, r6, lr}
 801c040:	681d      	ldr	r5, [r3, #0]
 801c042:	4606      	mov	r6, r0
 801c044:	460c      	mov	r4, r1
 801c046:	b125      	cbz	r5, 801c052 <__swsetup_r+0x16>
 801c048:	69ab      	ldr	r3, [r5, #24]
 801c04a:	b913      	cbnz	r3, 801c052 <__swsetup_r+0x16>
 801c04c:	4628      	mov	r0, r5
 801c04e:	f7fe ff4d 	bl	801aeec <__sinit>
 801c052:	4b2e      	ldr	r3, [pc, #184]	; (801c10c <__swsetup_r+0xd0>)
 801c054:	429c      	cmp	r4, r3
 801c056:	d10f      	bne.n	801c078 <__swsetup_r+0x3c>
 801c058:	686c      	ldr	r4, [r5, #4]
 801c05a:	89a3      	ldrh	r3, [r4, #12]
 801c05c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c060:	0719      	lsls	r1, r3, #28
 801c062:	d42c      	bmi.n	801c0be <__swsetup_r+0x82>
 801c064:	06dd      	lsls	r5, r3, #27
 801c066:	d411      	bmi.n	801c08c <__swsetup_r+0x50>
 801c068:	2309      	movs	r3, #9
 801c06a:	6033      	str	r3, [r6, #0]
 801c06c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c070:	81a3      	strh	r3, [r4, #12]
 801c072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c076:	e03e      	b.n	801c0f6 <__swsetup_r+0xba>
 801c078:	4b25      	ldr	r3, [pc, #148]	; (801c110 <__swsetup_r+0xd4>)
 801c07a:	429c      	cmp	r4, r3
 801c07c:	d101      	bne.n	801c082 <__swsetup_r+0x46>
 801c07e:	68ac      	ldr	r4, [r5, #8]
 801c080:	e7eb      	b.n	801c05a <__swsetup_r+0x1e>
 801c082:	4b24      	ldr	r3, [pc, #144]	; (801c114 <__swsetup_r+0xd8>)
 801c084:	429c      	cmp	r4, r3
 801c086:	bf08      	it	eq
 801c088:	68ec      	ldreq	r4, [r5, #12]
 801c08a:	e7e6      	b.n	801c05a <__swsetup_r+0x1e>
 801c08c:	0758      	lsls	r0, r3, #29
 801c08e:	d512      	bpl.n	801c0b6 <__swsetup_r+0x7a>
 801c090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c092:	b141      	cbz	r1, 801c0a6 <__swsetup_r+0x6a>
 801c094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c098:	4299      	cmp	r1, r3
 801c09a:	d002      	beq.n	801c0a2 <__swsetup_r+0x66>
 801c09c:	4630      	mov	r0, r6
 801c09e:	f7ff fb7f 	bl	801b7a0 <_free_r>
 801c0a2:	2300      	movs	r3, #0
 801c0a4:	6363      	str	r3, [r4, #52]	; 0x34
 801c0a6:	89a3      	ldrh	r3, [r4, #12]
 801c0a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c0ac:	81a3      	strh	r3, [r4, #12]
 801c0ae:	2300      	movs	r3, #0
 801c0b0:	6063      	str	r3, [r4, #4]
 801c0b2:	6923      	ldr	r3, [r4, #16]
 801c0b4:	6023      	str	r3, [r4, #0]
 801c0b6:	89a3      	ldrh	r3, [r4, #12]
 801c0b8:	f043 0308 	orr.w	r3, r3, #8
 801c0bc:	81a3      	strh	r3, [r4, #12]
 801c0be:	6923      	ldr	r3, [r4, #16]
 801c0c0:	b94b      	cbnz	r3, 801c0d6 <__swsetup_r+0x9a>
 801c0c2:	89a3      	ldrh	r3, [r4, #12]
 801c0c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c0c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c0cc:	d003      	beq.n	801c0d6 <__swsetup_r+0x9a>
 801c0ce:	4621      	mov	r1, r4
 801c0d0:	4630      	mov	r0, r6
 801c0d2:	f000 f933 	bl	801c33c <__smakebuf_r>
 801c0d6:	89a0      	ldrh	r0, [r4, #12]
 801c0d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c0dc:	f010 0301 	ands.w	r3, r0, #1
 801c0e0:	d00a      	beq.n	801c0f8 <__swsetup_r+0xbc>
 801c0e2:	2300      	movs	r3, #0
 801c0e4:	60a3      	str	r3, [r4, #8]
 801c0e6:	6963      	ldr	r3, [r4, #20]
 801c0e8:	425b      	negs	r3, r3
 801c0ea:	61a3      	str	r3, [r4, #24]
 801c0ec:	6923      	ldr	r3, [r4, #16]
 801c0ee:	b943      	cbnz	r3, 801c102 <__swsetup_r+0xc6>
 801c0f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c0f4:	d1ba      	bne.n	801c06c <__swsetup_r+0x30>
 801c0f6:	bd70      	pop	{r4, r5, r6, pc}
 801c0f8:	0781      	lsls	r1, r0, #30
 801c0fa:	bf58      	it	pl
 801c0fc:	6963      	ldrpl	r3, [r4, #20]
 801c0fe:	60a3      	str	r3, [r4, #8]
 801c100:	e7f4      	b.n	801c0ec <__swsetup_r+0xb0>
 801c102:	2000      	movs	r0, #0
 801c104:	e7f7      	b.n	801c0f6 <__swsetup_r+0xba>
 801c106:	bf00      	nop
 801c108:	20000034 	.word	0x20000034
 801c10c:	080297f8 	.word	0x080297f8
 801c110:	08029818 	.word	0x08029818
 801c114:	080297d8 	.word	0x080297d8

0801c118 <abort>:
 801c118:	b508      	push	{r3, lr}
 801c11a:	2006      	movs	r0, #6
 801c11c:	f000 f9d6 	bl	801c4cc <raise>
 801c120:	2001      	movs	r0, #1
 801c122:	f7e5 f919 	bl	8001358 <_exit>
	...

0801c128 <_close_r>:
 801c128:	b538      	push	{r3, r4, r5, lr}
 801c12a:	4d06      	ldr	r5, [pc, #24]	; (801c144 <_close_r+0x1c>)
 801c12c:	2300      	movs	r3, #0
 801c12e:	4604      	mov	r4, r0
 801c130:	4608      	mov	r0, r1
 801c132:	602b      	str	r3, [r5, #0]
 801c134:	f7e5 f953 	bl	80013de <_close>
 801c138:	1c43      	adds	r3, r0, #1
 801c13a:	d102      	bne.n	801c142 <_close_r+0x1a>
 801c13c:	682b      	ldr	r3, [r5, #0]
 801c13e:	b103      	cbz	r3, 801c142 <_close_r+0x1a>
 801c140:	6023      	str	r3, [r4, #0]
 801c142:	bd38      	pop	{r3, r4, r5, pc}
 801c144:	200115d8 	.word	0x200115d8

0801c148 <__sflush_r>:
 801c148:	898a      	ldrh	r2, [r1, #12]
 801c14a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c14e:	4605      	mov	r5, r0
 801c150:	0710      	lsls	r0, r2, #28
 801c152:	460c      	mov	r4, r1
 801c154:	d458      	bmi.n	801c208 <__sflush_r+0xc0>
 801c156:	684b      	ldr	r3, [r1, #4]
 801c158:	2b00      	cmp	r3, #0
 801c15a:	dc05      	bgt.n	801c168 <__sflush_r+0x20>
 801c15c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c15e:	2b00      	cmp	r3, #0
 801c160:	dc02      	bgt.n	801c168 <__sflush_r+0x20>
 801c162:	2000      	movs	r0, #0
 801c164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c16a:	2e00      	cmp	r6, #0
 801c16c:	d0f9      	beq.n	801c162 <__sflush_r+0x1a>
 801c16e:	2300      	movs	r3, #0
 801c170:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c174:	682f      	ldr	r7, [r5, #0]
 801c176:	602b      	str	r3, [r5, #0]
 801c178:	d032      	beq.n	801c1e0 <__sflush_r+0x98>
 801c17a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c17c:	89a3      	ldrh	r3, [r4, #12]
 801c17e:	075a      	lsls	r2, r3, #29
 801c180:	d505      	bpl.n	801c18e <__sflush_r+0x46>
 801c182:	6863      	ldr	r3, [r4, #4]
 801c184:	1ac0      	subs	r0, r0, r3
 801c186:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c188:	b10b      	cbz	r3, 801c18e <__sflush_r+0x46>
 801c18a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c18c:	1ac0      	subs	r0, r0, r3
 801c18e:	2300      	movs	r3, #0
 801c190:	4602      	mov	r2, r0
 801c192:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c194:	6a21      	ldr	r1, [r4, #32]
 801c196:	4628      	mov	r0, r5
 801c198:	47b0      	blx	r6
 801c19a:	1c43      	adds	r3, r0, #1
 801c19c:	89a3      	ldrh	r3, [r4, #12]
 801c19e:	d106      	bne.n	801c1ae <__sflush_r+0x66>
 801c1a0:	6829      	ldr	r1, [r5, #0]
 801c1a2:	291d      	cmp	r1, #29
 801c1a4:	d82c      	bhi.n	801c200 <__sflush_r+0xb8>
 801c1a6:	4a2a      	ldr	r2, [pc, #168]	; (801c250 <__sflush_r+0x108>)
 801c1a8:	40ca      	lsrs	r2, r1
 801c1aa:	07d6      	lsls	r6, r2, #31
 801c1ac:	d528      	bpl.n	801c200 <__sflush_r+0xb8>
 801c1ae:	2200      	movs	r2, #0
 801c1b0:	6062      	str	r2, [r4, #4]
 801c1b2:	04d9      	lsls	r1, r3, #19
 801c1b4:	6922      	ldr	r2, [r4, #16]
 801c1b6:	6022      	str	r2, [r4, #0]
 801c1b8:	d504      	bpl.n	801c1c4 <__sflush_r+0x7c>
 801c1ba:	1c42      	adds	r2, r0, #1
 801c1bc:	d101      	bne.n	801c1c2 <__sflush_r+0x7a>
 801c1be:	682b      	ldr	r3, [r5, #0]
 801c1c0:	b903      	cbnz	r3, 801c1c4 <__sflush_r+0x7c>
 801c1c2:	6560      	str	r0, [r4, #84]	; 0x54
 801c1c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c1c6:	602f      	str	r7, [r5, #0]
 801c1c8:	2900      	cmp	r1, #0
 801c1ca:	d0ca      	beq.n	801c162 <__sflush_r+0x1a>
 801c1cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c1d0:	4299      	cmp	r1, r3
 801c1d2:	d002      	beq.n	801c1da <__sflush_r+0x92>
 801c1d4:	4628      	mov	r0, r5
 801c1d6:	f7ff fae3 	bl	801b7a0 <_free_r>
 801c1da:	2000      	movs	r0, #0
 801c1dc:	6360      	str	r0, [r4, #52]	; 0x34
 801c1de:	e7c1      	b.n	801c164 <__sflush_r+0x1c>
 801c1e0:	6a21      	ldr	r1, [r4, #32]
 801c1e2:	2301      	movs	r3, #1
 801c1e4:	4628      	mov	r0, r5
 801c1e6:	47b0      	blx	r6
 801c1e8:	1c41      	adds	r1, r0, #1
 801c1ea:	d1c7      	bne.n	801c17c <__sflush_r+0x34>
 801c1ec:	682b      	ldr	r3, [r5, #0]
 801c1ee:	2b00      	cmp	r3, #0
 801c1f0:	d0c4      	beq.n	801c17c <__sflush_r+0x34>
 801c1f2:	2b1d      	cmp	r3, #29
 801c1f4:	d001      	beq.n	801c1fa <__sflush_r+0xb2>
 801c1f6:	2b16      	cmp	r3, #22
 801c1f8:	d101      	bne.n	801c1fe <__sflush_r+0xb6>
 801c1fa:	602f      	str	r7, [r5, #0]
 801c1fc:	e7b1      	b.n	801c162 <__sflush_r+0x1a>
 801c1fe:	89a3      	ldrh	r3, [r4, #12]
 801c200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c204:	81a3      	strh	r3, [r4, #12]
 801c206:	e7ad      	b.n	801c164 <__sflush_r+0x1c>
 801c208:	690f      	ldr	r7, [r1, #16]
 801c20a:	2f00      	cmp	r7, #0
 801c20c:	d0a9      	beq.n	801c162 <__sflush_r+0x1a>
 801c20e:	0793      	lsls	r3, r2, #30
 801c210:	680e      	ldr	r6, [r1, #0]
 801c212:	bf08      	it	eq
 801c214:	694b      	ldreq	r3, [r1, #20]
 801c216:	600f      	str	r7, [r1, #0]
 801c218:	bf18      	it	ne
 801c21a:	2300      	movne	r3, #0
 801c21c:	eba6 0807 	sub.w	r8, r6, r7
 801c220:	608b      	str	r3, [r1, #8]
 801c222:	f1b8 0f00 	cmp.w	r8, #0
 801c226:	dd9c      	ble.n	801c162 <__sflush_r+0x1a>
 801c228:	6a21      	ldr	r1, [r4, #32]
 801c22a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c22c:	4643      	mov	r3, r8
 801c22e:	463a      	mov	r2, r7
 801c230:	4628      	mov	r0, r5
 801c232:	47b0      	blx	r6
 801c234:	2800      	cmp	r0, #0
 801c236:	dc06      	bgt.n	801c246 <__sflush_r+0xfe>
 801c238:	89a3      	ldrh	r3, [r4, #12]
 801c23a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c23e:	81a3      	strh	r3, [r4, #12]
 801c240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c244:	e78e      	b.n	801c164 <__sflush_r+0x1c>
 801c246:	4407      	add	r7, r0
 801c248:	eba8 0800 	sub.w	r8, r8, r0
 801c24c:	e7e9      	b.n	801c222 <__sflush_r+0xda>
 801c24e:	bf00      	nop
 801c250:	20400001 	.word	0x20400001

0801c254 <_fflush_r>:
 801c254:	b538      	push	{r3, r4, r5, lr}
 801c256:	690b      	ldr	r3, [r1, #16]
 801c258:	4605      	mov	r5, r0
 801c25a:	460c      	mov	r4, r1
 801c25c:	b913      	cbnz	r3, 801c264 <_fflush_r+0x10>
 801c25e:	2500      	movs	r5, #0
 801c260:	4628      	mov	r0, r5
 801c262:	bd38      	pop	{r3, r4, r5, pc}
 801c264:	b118      	cbz	r0, 801c26e <_fflush_r+0x1a>
 801c266:	6983      	ldr	r3, [r0, #24]
 801c268:	b90b      	cbnz	r3, 801c26e <_fflush_r+0x1a>
 801c26a:	f7fe fe3f 	bl	801aeec <__sinit>
 801c26e:	4b14      	ldr	r3, [pc, #80]	; (801c2c0 <_fflush_r+0x6c>)
 801c270:	429c      	cmp	r4, r3
 801c272:	d11b      	bne.n	801c2ac <_fflush_r+0x58>
 801c274:	686c      	ldr	r4, [r5, #4]
 801c276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d0ef      	beq.n	801c25e <_fflush_r+0xa>
 801c27e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c280:	07d0      	lsls	r0, r2, #31
 801c282:	d404      	bmi.n	801c28e <_fflush_r+0x3a>
 801c284:	0599      	lsls	r1, r3, #22
 801c286:	d402      	bmi.n	801c28e <_fflush_r+0x3a>
 801c288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c28a:	f7fe fee4 	bl	801b056 <__retarget_lock_acquire_recursive>
 801c28e:	4628      	mov	r0, r5
 801c290:	4621      	mov	r1, r4
 801c292:	f7ff ff59 	bl	801c148 <__sflush_r>
 801c296:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c298:	07da      	lsls	r2, r3, #31
 801c29a:	4605      	mov	r5, r0
 801c29c:	d4e0      	bmi.n	801c260 <_fflush_r+0xc>
 801c29e:	89a3      	ldrh	r3, [r4, #12]
 801c2a0:	059b      	lsls	r3, r3, #22
 801c2a2:	d4dd      	bmi.n	801c260 <_fflush_r+0xc>
 801c2a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c2a6:	f7fe fed7 	bl	801b058 <__retarget_lock_release_recursive>
 801c2aa:	e7d9      	b.n	801c260 <_fflush_r+0xc>
 801c2ac:	4b05      	ldr	r3, [pc, #20]	; (801c2c4 <_fflush_r+0x70>)
 801c2ae:	429c      	cmp	r4, r3
 801c2b0:	d101      	bne.n	801c2b6 <_fflush_r+0x62>
 801c2b2:	68ac      	ldr	r4, [r5, #8]
 801c2b4:	e7df      	b.n	801c276 <_fflush_r+0x22>
 801c2b6:	4b04      	ldr	r3, [pc, #16]	; (801c2c8 <_fflush_r+0x74>)
 801c2b8:	429c      	cmp	r4, r3
 801c2ba:	bf08      	it	eq
 801c2bc:	68ec      	ldreq	r4, [r5, #12]
 801c2be:	e7da      	b.n	801c276 <_fflush_r+0x22>
 801c2c0:	080297f8 	.word	0x080297f8
 801c2c4:	08029818 	.word	0x08029818
 801c2c8:	080297d8 	.word	0x080297d8

0801c2cc <_lseek_r>:
 801c2cc:	b538      	push	{r3, r4, r5, lr}
 801c2ce:	4d07      	ldr	r5, [pc, #28]	; (801c2ec <_lseek_r+0x20>)
 801c2d0:	4604      	mov	r4, r0
 801c2d2:	4608      	mov	r0, r1
 801c2d4:	4611      	mov	r1, r2
 801c2d6:	2200      	movs	r2, #0
 801c2d8:	602a      	str	r2, [r5, #0]
 801c2da:	461a      	mov	r2, r3
 801c2dc:	f7e5 f8a6 	bl	800142c <_lseek>
 801c2e0:	1c43      	adds	r3, r0, #1
 801c2e2:	d102      	bne.n	801c2ea <_lseek_r+0x1e>
 801c2e4:	682b      	ldr	r3, [r5, #0]
 801c2e6:	b103      	cbz	r3, 801c2ea <_lseek_r+0x1e>
 801c2e8:	6023      	str	r3, [r4, #0]
 801c2ea:	bd38      	pop	{r3, r4, r5, pc}
 801c2ec:	200115d8 	.word	0x200115d8

0801c2f0 <__swhatbuf_r>:
 801c2f0:	b570      	push	{r4, r5, r6, lr}
 801c2f2:	460e      	mov	r6, r1
 801c2f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c2f8:	2900      	cmp	r1, #0
 801c2fa:	b096      	sub	sp, #88	; 0x58
 801c2fc:	4614      	mov	r4, r2
 801c2fe:	461d      	mov	r5, r3
 801c300:	da08      	bge.n	801c314 <__swhatbuf_r+0x24>
 801c302:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801c306:	2200      	movs	r2, #0
 801c308:	602a      	str	r2, [r5, #0]
 801c30a:	061a      	lsls	r2, r3, #24
 801c30c:	d410      	bmi.n	801c330 <__swhatbuf_r+0x40>
 801c30e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c312:	e00e      	b.n	801c332 <__swhatbuf_r+0x42>
 801c314:	466a      	mov	r2, sp
 801c316:	f000 f903 	bl	801c520 <_fstat_r>
 801c31a:	2800      	cmp	r0, #0
 801c31c:	dbf1      	blt.n	801c302 <__swhatbuf_r+0x12>
 801c31e:	9a01      	ldr	r2, [sp, #4]
 801c320:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c324:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c328:	425a      	negs	r2, r3
 801c32a:	415a      	adcs	r2, r3
 801c32c:	602a      	str	r2, [r5, #0]
 801c32e:	e7ee      	b.n	801c30e <__swhatbuf_r+0x1e>
 801c330:	2340      	movs	r3, #64	; 0x40
 801c332:	2000      	movs	r0, #0
 801c334:	6023      	str	r3, [r4, #0]
 801c336:	b016      	add	sp, #88	; 0x58
 801c338:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c33c <__smakebuf_r>:
 801c33c:	898b      	ldrh	r3, [r1, #12]
 801c33e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c340:	079d      	lsls	r5, r3, #30
 801c342:	4606      	mov	r6, r0
 801c344:	460c      	mov	r4, r1
 801c346:	d507      	bpl.n	801c358 <__smakebuf_r+0x1c>
 801c348:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c34c:	6023      	str	r3, [r4, #0]
 801c34e:	6123      	str	r3, [r4, #16]
 801c350:	2301      	movs	r3, #1
 801c352:	6163      	str	r3, [r4, #20]
 801c354:	b002      	add	sp, #8
 801c356:	bd70      	pop	{r4, r5, r6, pc}
 801c358:	ab01      	add	r3, sp, #4
 801c35a:	466a      	mov	r2, sp
 801c35c:	f7ff ffc8 	bl	801c2f0 <__swhatbuf_r>
 801c360:	9900      	ldr	r1, [sp, #0]
 801c362:	4605      	mov	r5, r0
 801c364:	4630      	mov	r0, r6
 801c366:	f7ff fa87 	bl	801b878 <_malloc_r>
 801c36a:	b948      	cbnz	r0, 801c380 <__smakebuf_r+0x44>
 801c36c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c370:	059a      	lsls	r2, r3, #22
 801c372:	d4ef      	bmi.n	801c354 <__smakebuf_r+0x18>
 801c374:	f023 0303 	bic.w	r3, r3, #3
 801c378:	f043 0302 	orr.w	r3, r3, #2
 801c37c:	81a3      	strh	r3, [r4, #12]
 801c37e:	e7e3      	b.n	801c348 <__smakebuf_r+0xc>
 801c380:	4b0d      	ldr	r3, [pc, #52]	; (801c3b8 <__smakebuf_r+0x7c>)
 801c382:	62b3      	str	r3, [r6, #40]	; 0x28
 801c384:	89a3      	ldrh	r3, [r4, #12]
 801c386:	6020      	str	r0, [r4, #0]
 801c388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c38c:	81a3      	strh	r3, [r4, #12]
 801c38e:	9b00      	ldr	r3, [sp, #0]
 801c390:	6163      	str	r3, [r4, #20]
 801c392:	9b01      	ldr	r3, [sp, #4]
 801c394:	6120      	str	r0, [r4, #16]
 801c396:	b15b      	cbz	r3, 801c3b0 <__smakebuf_r+0x74>
 801c398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c39c:	4630      	mov	r0, r6
 801c39e:	f000 f8d1 	bl	801c544 <_isatty_r>
 801c3a2:	b128      	cbz	r0, 801c3b0 <__smakebuf_r+0x74>
 801c3a4:	89a3      	ldrh	r3, [r4, #12]
 801c3a6:	f023 0303 	bic.w	r3, r3, #3
 801c3aa:	f043 0301 	orr.w	r3, r3, #1
 801c3ae:	81a3      	strh	r3, [r4, #12]
 801c3b0:	89a0      	ldrh	r0, [r4, #12]
 801c3b2:	4305      	orrs	r5, r0
 801c3b4:	81a5      	strh	r5, [r4, #12]
 801c3b6:	e7cd      	b.n	801c354 <__smakebuf_r+0x18>
 801c3b8:	0801ae85 	.word	0x0801ae85

0801c3bc <__ascii_mbtowc>:
 801c3bc:	b082      	sub	sp, #8
 801c3be:	b901      	cbnz	r1, 801c3c2 <__ascii_mbtowc+0x6>
 801c3c0:	a901      	add	r1, sp, #4
 801c3c2:	b142      	cbz	r2, 801c3d6 <__ascii_mbtowc+0x1a>
 801c3c4:	b14b      	cbz	r3, 801c3da <__ascii_mbtowc+0x1e>
 801c3c6:	7813      	ldrb	r3, [r2, #0]
 801c3c8:	600b      	str	r3, [r1, #0]
 801c3ca:	7812      	ldrb	r2, [r2, #0]
 801c3cc:	1e10      	subs	r0, r2, #0
 801c3ce:	bf18      	it	ne
 801c3d0:	2001      	movne	r0, #1
 801c3d2:	b002      	add	sp, #8
 801c3d4:	4770      	bx	lr
 801c3d6:	4610      	mov	r0, r2
 801c3d8:	e7fb      	b.n	801c3d2 <__ascii_mbtowc+0x16>
 801c3da:	f06f 0001 	mvn.w	r0, #1
 801c3de:	e7f8      	b.n	801c3d2 <__ascii_mbtowc+0x16>

0801c3e0 <__malloc_lock>:
 801c3e0:	4801      	ldr	r0, [pc, #4]	; (801c3e8 <__malloc_lock+0x8>)
 801c3e2:	f7fe be38 	b.w	801b056 <__retarget_lock_acquire_recursive>
 801c3e6:	bf00      	nop
 801c3e8:	200115e0 	.word	0x200115e0

0801c3ec <__malloc_unlock>:
 801c3ec:	4801      	ldr	r0, [pc, #4]	; (801c3f4 <__malloc_unlock+0x8>)
 801c3ee:	f7fe be33 	b.w	801b058 <__retarget_lock_release_recursive>
 801c3f2:	bf00      	nop
 801c3f4:	200115e0 	.word	0x200115e0

0801c3f8 <_realloc_r>:
 801c3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c3fc:	4680      	mov	r8, r0
 801c3fe:	4614      	mov	r4, r2
 801c400:	460e      	mov	r6, r1
 801c402:	b921      	cbnz	r1, 801c40e <_realloc_r+0x16>
 801c404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c408:	4611      	mov	r1, r2
 801c40a:	f7ff ba35 	b.w	801b878 <_malloc_r>
 801c40e:	b92a      	cbnz	r2, 801c41c <_realloc_r+0x24>
 801c410:	f7ff f9c6 	bl	801b7a0 <_free_r>
 801c414:	4625      	mov	r5, r4
 801c416:	4628      	mov	r0, r5
 801c418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c41c:	f000 f8a2 	bl	801c564 <_malloc_usable_size_r>
 801c420:	4284      	cmp	r4, r0
 801c422:	4607      	mov	r7, r0
 801c424:	d802      	bhi.n	801c42c <_realloc_r+0x34>
 801c426:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c42a:	d812      	bhi.n	801c452 <_realloc_r+0x5a>
 801c42c:	4621      	mov	r1, r4
 801c42e:	4640      	mov	r0, r8
 801c430:	f7ff fa22 	bl	801b878 <_malloc_r>
 801c434:	4605      	mov	r5, r0
 801c436:	2800      	cmp	r0, #0
 801c438:	d0ed      	beq.n	801c416 <_realloc_r+0x1e>
 801c43a:	42bc      	cmp	r4, r7
 801c43c:	4622      	mov	r2, r4
 801c43e:	4631      	mov	r1, r6
 801c440:	bf28      	it	cs
 801c442:	463a      	movcs	r2, r7
 801c444:	f7fd f9d0 	bl	80197e8 <memcpy>
 801c448:	4631      	mov	r1, r6
 801c44a:	4640      	mov	r0, r8
 801c44c:	f7ff f9a8 	bl	801b7a0 <_free_r>
 801c450:	e7e1      	b.n	801c416 <_realloc_r+0x1e>
 801c452:	4635      	mov	r5, r6
 801c454:	e7df      	b.n	801c416 <_realloc_r+0x1e>
	...

0801c458 <_read_r>:
 801c458:	b538      	push	{r3, r4, r5, lr}
 801c45a:	4d07      	ldr	r5, [pc, #28]	; (801c478 <_read_r+0x20>)
 801c45c:	4604      	mov	r4, r0
 801c45e:	4608      	mov	r0, r1
 801c460:	4611      	mov	r1, r2
 801c462:	2200      	movs	r2, #0
 801c464:	602a      	str	r2, [r5, #0]
 801c466:	461a      	mov	r2, r3
 801c468:	f7e4 ff80 	bl	800136c <_read>
 801c46c:	1c43      	adds	r3, r0, #1
 801c46e:	d102      	bne.n	801c476 <_read_r+0x1e>
 801c470:	682b      	ldr	r3, [r5, #0]
 801c472:	b103      	cbz	r3, 801c476 <_read_r+0x1e>
 801c474:	6023      	str	r3, [r4, #0]
 801c476:	bd38      	pop	{r3, r4, r5, pc}
 801c478:	200115d8 	.word	0x200115d8

0801c47c <_raise_r>:
 801c47c:	291f      	cmp	r1, #31
 801c47e:	b538      	push	{r3, r4, r5, lr}
 801c480:	4604      	mov	r4, r0
 801c482:	460d      	mov	r5, r1
 801c484:	d904      	bls.n	801c490 <_raise_r+0x14>
 801c486:	2316      	movs	r3, #22
 801c488:	6003      	str	r3, [r0, #0]
 801c48a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c48e:	bd38      	pop	{r3, r4, r5, pc}
 801c490:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c492:	b112      	cbz	r2, 801c49a <_raise_r+0x1e>
 801c494:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c498:	b94b      	cbnz	r3, 801c4ae <_raise_r+0x32>
 801c49a:	4620      	mov	r0, r4
 801c49c:	f000 f830 	bl	801c500 <_getpid_r>
 801c4a0:	462a      	mov	r2, r5
 801c4a2:	4601      	mov	r1, r0
 801c4a4:	4620      	mov	r0, r4
 801c4a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c4aa:	f000 b817 	b.w	801c4dc <_kill_r>
 801c4ae:	2b01      	cmp	r3, #1
 801c4b0:	d00a      	beq.n	801c4c8 <_raise_r+0x4c>
 801c4b2:	1c59      	adds	r1, r3, #1
 801c4b4:	d103      	bne.n	801c4be <_raise_r+0x42>
 801c4b6:	2316      	movs	r3, #22
 801c4b8:	6003      	str	r3, [r0, #0]
 801c4ba:	2001      	movs	r0, #1
 801c4bc:	e7e7      	b.n	801c48e <_raise_r+0x12>
 801c4be:	2400      	movs	r4, #0
 801c4c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c4c4:	4628      	mov	r0, r5
 801c4c6:	4798      	blx	r3
 801c4c8:	2000      	movs	r0, #0
 801c4ca:	e7e0      	b.n	801c48e <_raise_r+0x12>

0801c4cc <raise>:
 801c4cc:	4b02      	ldr	r3, [pc, #8]	; (801c4d8 <raise+0xc>)
 801c4ce:	4601      	mov	r1, r0
 801c4d0:	6818      	ldr	r0, [r3, #0]
 801c4d2:	f7ff bfd3 	b.w	801c47c <_raise_r>
 801c4d6:	bf00      	nop
 801c4d8:	20000034 	.word	0x20000034

0801c4dc <_kill_r>:
 801c4dc:	b538      	push	{r3, r4, r5, lr}
 801c4de:	4d07      	ldr	r5, [pc, #28]	; (801c4fc <_kill_r+0x20>)
 801c4e0:	2300      	movs	r3, #0
 801c4e2:	4604      	mov	r4, r0
 801c4e4:	4608      	mov	r0, r1
 801c4e6:	4611      	mov	r1, r2
 801c4e8:	602b      	str	r3, [r5, #0]
 801c4ea:	f7e4 ff23 	bl	8001334 <_kill>
 801c4ee:	1c43      	adds	r3, r0, #1
 801c4f0:	d102      	bne.n	801c4f8 <_kill_r+0x1c>
 801c4f2:	682b      	ldr	r3, [r5, #0]
 801c4f4:	b103      	cbz	r3, 801c4f8 <_kill_r+0x1c>
 801c4f6:	6023      	str	r3, [r4, #0]
 801c4f8:	bd38      	pop	{r3, r4, r5, pc}
 801c4fa:	bf00      	nop
 801c4fc:	200115d8 	.word	0x200115d8

0801c500 <_getpid_r>:
 801c500:	f7e4 bf10 	b.w	8001324 <_getpid>

0801c504 <__ascii_wctomb>:
 801c504:	b149      	cbz	r1, 801c51a <__ascii_wctomb+0x16>
 801c506:	2aff      	cmp	r2, #255	; 0xff
 801c508:	bf85      	ittet	hi
 801c50a:	238a      	movhi	r3, #138	; 0x8a
 801c50c:	6003      	strhi	r3, [r0, #0]
 801c50e:	700a      	strbls	r2, [r1, #0]
 801c510:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801c514:	bf98      	it	ls
 801c516:	2001      	movls	r0, #1
 801c518:	4770      	bx	lr
 801c51a:	4608      	mov	r0, r1
 801c51c:	4770      	bx	lr
	...

0801c520 <_fstat_r>:
 801c520:	b538      	push	{r3, r4, r5, lr}
 801c522:	4d07      	ldr	r5, [pc, #28]	; (801c540 <_fstat_r+0x20>)
 801c524:	2300      	movs	r3, #0
 801c526:	4604      	mov	r4, r0
 801c528:	4608      	mov	r0, r1
 801c52a:	4611      	mov	r1, r2
 801c52c:	602b      	str	r3, [r5, #0]
 801c52e:	f7e4 ff62 	bl	80013f6 <_fstat>
 801c532:	1c43      	adds	r3, r0, #1
 801c534:	d102      	bne.n	801c53c <_fstat_r+0x1c>
 801c536:	682b      	ldr	r3, [r5, #0]
 801c538:	b103      	cbz	r3, 801c53c <_fstat_r+0x1c>
 801c53a:	6023      	str	r3, [r4, #0]
 801c53c:	bd38      	pop	{r3, r4, r5, pc}
 801c53e:	bf00      	nop
 801c540:	200115d8 	.word	0x200115d8

0801c544 <_isatty_r>:
 801c544:	b538      	push	{r3, r4, r5, lr}
 801c546:	4d06      	ldr	r5, [pc, #24]	; (801c560 <_isatty_r+0x1c>)
 801c548:	2300      	movs	r3, #0
 801c54a:	4604      	mov	r4, r0
 801c54c:	4608      	mov	r0, r1
 801c54e:	602b      	str	r3, [r5, #0]
 801c550:	f7e4 ff61 	bl	8001416 <_isatty>
 801c554:	1c43      	adds	r3, r0, #1
 801c556:	d102      	bne.n	801c55e <_isatty_r+0x1a>
 801c558:	682b      	ldr	r3, [r5, #0]
 801c55a:	b103      	cbz	r3, 801c55e <_isatty_r+0x1a>
 801c55c:	6023      	str	r3, [r4, #0]
 801c55e:	bd38      	pop	{r3, r4, r5, pc}
 801c560:	200115d8 	.word	0x200115d8

0801c564 <_malloc_usable_size_r>:
 801c564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c568:	1f18      	subs	r0, r3, #4
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	bfbc      	itt	lt
 801c56e:	580b      	ldrlt	r3, [r1, r0]
 801c570:	18c0      	addlt	r0, r0, r3
 801c572:	4770      	bx	lr

0801c574 <_init>:
 801c574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c576:	bf00      	nop
 801c578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c57a:	bc08      	pop	{r3}
 801c57c:	469e      	mov	lr, r3
 801c57e:	4770      	bx	lr

0801c580 <_fini>:
 801c580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c582:	bf00      	nop
 801c584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c586:	bc08      	pop	{r3}
 801c588:	469e      	mov	lr, r3
 801c58a:	4770      	bx	lr
